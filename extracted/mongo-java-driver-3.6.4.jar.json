{"mongo-java-driver-3.6.4.jar": [["boolean", "org.bson.NoOpFieldNameValidator.validate(java.lang.String)"], ["org.bson.FieldNameValidator", "org.bson.NoOpFieldNameValidator.getValidatorForField(java.lang.String)"], ["org.bson.BsonDbPointer", "org.bson.BsonDbPointer(java.lang.String, org.bson.types.ObjectId)"], ["org.bson.BsonType", "org.bson.BsonDbPointer.getBsonType()"], ["java.lang.String", "org.bson.BsonDbPointer.getNamespace()"], ["org.bson.types.ObjectId", "org.bson.BsonDbPointer.getId()"], ["boolean", "org.bson.BsonDbPointer.equals(java.lang.Object)"], ["int", "org.bson.BsonDbPointer.hashCode()"], ["java.lang.String", "org.bson.BsonDbPointer.toString()"], ["org.bson.BsonTimestamp", "org.bson.BsonTimestamp()"], ["org.bson.BsonTimestamp", "org.bson.BsonTimestamp(long)"], ["org.bson.BsonTimestamp", "org.bson.BsonTimestamp(int, int)"], ["org.bson.BsonType", "org.bson.BsonTimestamp.getBsonType()"], ["long", "org.bson.BsonTimestamp.getValue()"], ["int", "org.bson.BsonTimestamp.getTime()"], ["int", "org.bson.BsonTimestamp.getInc()"], ["java.lang.String", "org.bson.BsonTimestamp.toString()"], ["int", "org.bson.BsonTimestamp.compareTo(org.bson.BsonTimestamp)"], ["boolean", "org.bson.BsonTimestamp.equals(java.lang.Object)"], ["int", "org.bson.BsonTimestamp.hashCode()"], ["int", "org.bson.BsonTimestamp.compareTo(java.lang.Object)"], ["org.bson.BasicBSONEncoder", "org.bson.BasicBSONEncoder()"], ["byte[]", "org.bson.BasicBSONEncoder.encode(org.bson.BSONObject)"], ["void", "org.bson.BasicBSONEncoder.done()"], ["void", "org.bson.BasicBSONEncoder.set(org.bson.io.OutputBuffer)"], ["int", "org.bson.BasicBSONEncoder.putObject(org.bson.BSONObject)"], ["org.bson.BsonDateTime", "org.bson.BsonDateTime(long)"], ["int", "org.bson.BsonDateTime.compareTo(org.bson.BsonDateTime)"], ["org.bson.BsonType", "org.bson.BsonDateTime.getBsonType()"], ["long", "org.bson.BsonDateTime.getValue()"], ["boolean", "org.bson.BsonDateTime.equals(java.lang.Object)"], ["int", "org.bson.BsonDateTime.hashCode()"], ["java.lang.String", "org.bson.BsonDateTime.toString()"], ["int", "org.bson.BsonDateTime.compareTo(java.lang.Object)"], ["boolean", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.hasNext()"], ["T", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.next()"], ["void", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.remove()"], ["org.bson.BsonUndefined", "org.bson.BsonUndefined()"], ["org.bson.BsonType", "org.bson.BsonUndefined.getBsonType()"], ["boolean", "org.bson.BsonUndefined.equals(java.lang.Object)"], ["int", "org.bson.BsonUndefined.hashCode()"], ["org.bson.BsonInt32", "org.bson.BsonInt32(int)"], ["int", "org.bson.BsonInt32.compareTo(org.bson.BsonInt32)"], ["org.bson.BsonType", "org.bson.BsonInt32.getBsonType()"], ["int", "org.bson.BsonInt32.getValue()"], ["int", "org.bson.BsonInt32.intValue()"], ["long", "org.bson.BsonInt32.longValue()"], ["org.bson.types.Decimal128", "org.bson.BsonInt32.decimal128Value()"], ["double", "org.bson.BsonInt32.doubleValue()"], ["boolean", "org.bson.BsonInt32.equals(java.lang.Object)"], ["int", "org.bson.BsonInt32.hashCode()"], ["java.lang.String", "org.bson.BsonInt32.toString()"], ["int", "org.bson.BsonInt32.compareTo(java.lang.Object)"], ["org.bson.BsonElement", "org.bson.BsonElement(java.lang.String, org.bson.BsonValue)"], ["java.lang.String", "org.bson.BsonElement.getName()"], ["org.bson.BsonValue", "org.bson.BsonElement.getValue()"], ["boolean", "org.bson.BsonElement.equals(java.lang.Object)"], ["int", "org.bson.BsonElement.hashCode()"], ["org.bson.types.Decimal128", "org.bson.types.Decimal128.parse(java.lang.String)"], ["org.bson.types.Decimal128", "org.bson.types.Decimal128.fromIEEE754BIDEncoding(long, long)"], ["org.bson.types.Decimal128", "org.bson.types.Decimal128(long)"], ["org.bson.types.Decimal128", "org.bson.types.Decimal128(java.math.BigDecimal)"], ["long", "org.bson.types.Decimal128.getHigh()"], ["long", "org.bson.types.Decimal128.getLow()"], ["java.math.BigDecimal", "org.bson.types.Decimal128.bigDecimalValue()"], ["boolean", "org.bson.types.Decimal128.isNegative()"], ["boolean", "org.bson.types.Decimal128.isInfinite()"], ["boolean", "org.bson.types.Decimal128.isFinite()"], ["boolean", "org.bson.types.Decimal128.isNaN()"], ["boolean", "org.bson.types.Decimal128.equals(java.lang.Object)"], ["int", "org.bson.types.Decimal128.hashCode()"], ["java.lang.String", "org.bson.types.Decimal128.toString()"], ["org.bson.types.BSONTimestamp", "org.bson.types.BSONTimestamp()"], ["org.bson.types.BSONTimestamp", "org.bson.types.BSONTimestamp(int, int)"], ["int", "org.bson.types.BSONTimestamp.getTime()"], ["int", "org.bson.types.BSONTimestamp.getInc()"], ["java.lang.String", "org.bson.types.BSONTimestamp.toString()"], ["int", "org.bson.types.BSONTimestamp.compareTo(org.bson.types.BSONTimestamp)"], ["int", "org.bson.types.BSONTimestamp.hashCode()"], ["boolean", "org.bson.types.BSONTimestamp.equals(java.lang.Object)"], ["int", "org.bson.types.BSONTimestamp.compareTo(java.lang.Object)"], ["org.bson.types.MinKey", "org.bson.types.MinKey()"], ["boolean", "org.bson.types.MinKey.equals(java.lang.Object)"], ["int", "org.bson.types.MinKey.hashCode()"], ["java.lang.String", "org.bson.types.MinKey.toString()"], ["org.bson.types.CodeWithScope", "org.bson.types.CodeWithScope(java.lang.String, org.bson.Document)"], ["org.bson.Document", "org.bson.types.CodeWithScope.getScope()"], ["boolean", "org.bson.types.CodeWithScope.equals(java.lang.Object)"], ["int", "org.bson.types.CodeWithScope.hashCode()"], ["boolean", "org.bson.types.StringRangeSet$1.hasNext()"], ["java.lang.String", "org.bson.types.StringRangeSet$1.next()"], ["void", "org.bson.types.StringRangeSet$1.remove()"], ["java.lang.Object", "org.bson.types.StringRangeSet$1.next()"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId.get()"], ["boolean", "org.bson.types.ObjectId.isValid(java.lang.String)"], ["int", "org.bson.types.ObjectId.getGeneratedMachineIdentifier()"], ["int", "org.bson.types.ObjectId.getGeneratedProcessIdentifier()"], ["int", "org.bson.types.ObjectId.getCurrentCounter()"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId.createFromLegacyFormat(int, int, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId()"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date, int, short, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(int, int, short, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(byte[])"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.nio.ByteBuffer)"], ["byte[]", "org.bson.types.ObjectId.toByteArray()"], ["void", "org.bson.types.ObjectId.putToByteBuffer(java.nio.ByteBuffer)"], ["int", "org.bson.types.ObjectId.getTimestamp()"], ["int", "org.bson.types.ObjectId.getMachineIdentifier()"], ["short", "org.bson.types.ObjectId.getProcessIdentifier()"], ["int", "org.bson.types.ObjectId.getCounter()"], ["java.util.Date", "org.bson.types.ObjectId.getDate()"], ["java.lang.String", "org.bson.types.ObjectId.toHexString()"], ["boolean", "org.bson.types.ObjectId.equals(java.lang.Object)"], ["int", "org.bson.types.ObjectId.hashCode()"], ["int", "org.bson.types.ObjectId.compareTo(org.bson.types.ObjectId)"], ["java.lang.String", "org.bson.types.ObjectId.toString()"], ["int", "org.bson.types.ObjectId.getTimeSecond()"], ["long", "org.bson.types.ObjectId.getTime()"], ["java.lang.String", "org.bson.types.ObjectId.toStringMongod()"], ["int", "org.bson.types.ObjectId.compareTo(java.lang.Object)"], ["org.bson.types.BasicBSONList", "org.bson.types.BasicBSONList()"], ["java.lang.Object", "org.bson.types.BasicBSONList.put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.bson.types.BasicBSONList.put(int, java.lang.Object)"], ["void", "org.bson.types.BasicBSONList.putAll(java.util.Map)"], ["void", "org.bson.types.BasicBSONList.putAll(org.bson.BSONObject)"], ["java.lang.Object", "org.bson.types.BasicBSONList.get(java.lang.String)"], ["java.lang.Object", "org.bson.types.BasicBSONList.removeField(java.lang.String)"], ["boolean", "org.bson.types.BasicBSONList.containsKey(java.lang.String)"], ["boolean", "org.bson.types.BasicBSONList.containsField(java.lang.String)"], ["java.util.Map", "org.bson.types.BasicBSONList.toMap()"], ["int", "org.bson.types.StringRangeSet.size()"], ["boolean", "org.bson.types.StringRangeSet.isEmpty()"], ["boolean", "org.bson.types.StringRangeSet.contains(java.lang.Object)"], ["java.lang.Object[]", "org.bson.types.StringRangeSet.toArray()"], ["<T> T[]", "org.bson.types.StringRangeSet.toArray(T[])"], ["boolean", "org.bson.types.StringRangeSet.add(java.lang.String)"], ["boolean", "org.bson.types.StringRangeSet.remove(java.lang.Object)"], ["boolean", "org.bson.types.StringRangeSet.containsAll(java.util.Collection<?>)"], ["boolean", "org.bson.types.StringRangeSet.addAll(java.util.Collection<? extends java.lang.String>)"], ["boolean", "org.bson.types.StringRangeSet.retainAll(java.util.Collection<?>)"], ["boolean", "org.bson.types.StringRangeSet.removeAll(java.util.Collection<?>)"], ["void", "org.bson.types.StringRangeSet.clear()"], ["boolean", "org.bson.types.StringRangeSet.add(java.lang.Object)"], ["org.bson.types.MaxKey", "org.bson.types.MaxKey()"], ["boolean", "org.bson.types.MaxKey.equals(java.lang.Object)"], ["int", "org.bson.types.MaxKey.hashCode()"], ["java.lang.String", "org.bson.types.MaxKey.toString()"], ["org.bson.types.Code", "org.bson.types.Code(java.lang.String)"], ["java.lang.String", "org.bson.types.Code.getCode()"], ["boolean", "org.bson.types.Code.equals(java.lang.Object)"], ["int", "org.bson.types.Code.hashCode()"], ["java.lang.String", "org.bson.types.Code.toString()"], ["org.bson.types.CodeWScope", "org.bson.types.CodeWScope(java.lang.String, org.bson.BSONObject)"], ["org.bson.BSONObject", "org.bson.types.CodeWScope.getScope()"], ["boolean", "org.bson.types.CodeWScope.equals(java.lang.Object)"], ["int", "org.bson.types.CodeWScope.hashCode()"], ["org.bson.types.Binary", "org.bson.types.Binary(byte[])"], ["org.bson.types.Binary", "org.bson.types.Binary(org.bson.BsonBinarySubType, byte[])"], ["org.bson.types.Binary", "org.bson.types.Binary(byte, byte[])"], ["byte", "org.bson.types.Binary.getType()"], ["byte[]", "org.bson.types.Binary.getData()"], ["int", "org.bson.types.Binary.length()"], ["boolean", "org.bson.types.Binary.equals(java.lang.Object)"], ["int", "org.bson.types.Binary.hashCode()"], ["org.bson.types.Symbol", "org.bson.types.Symbol(java.lang.String)"], ["java.lang.String", "org.bson.types.Symbol.getSymbol()"], ["boolean", "org.bson.types.Symbol.equals(java.lang.Object)"], ["int", "org.bson.types.Symbol.hashCode()"], ["java.lang.String", "org.bson.types.Symbol.toString()"], ["org.bson.LazyBSONDecoder", "org.bson.LazyBSONDecoder()"], ["org.bson.BSONObject", "org.bson.LazyBSONDecoder.readObject(byte[])"], ["org.bson.BSONObject", "org.bson.LazyBSONDecoder.readObject(java.io.InputStream)"], ["int", "org.bson.LazyBSONDecoder.decode(byte[], org.bson.BSONCallback)"], ["int", "org.bson.LazyBSONDecoder.decode(java.io.InputStream, org.bson.BSONCallback)"], ["org.bson.LazyBSONObject", "org.bson.LazyBSONObject(byte[], org.bson.LazyBSONCallback)"], ["org.bson.LazyBSONObject", "org.bson.LazyBSONObject(byte[], int, org.bson.LazyBSONCallback)"], ["java.lang.Object", "org.bson.LazyBSONObject.get(java.lang.String)"], ["boolean", "org.bson.LazyBSONObject.containsKey(java.lang.String)"], ["boolean", "org.bson.LazyBSONObject.containsField(java.lang.String)"], ["boolean", "org.bson.LazyBSONObject.isEmpty()"], ["int", "org.bson.LazyBSONObject.getBSONSize()"], ["int", "org.bson.LazyBSONObject.pipe(java.io.OutputStream)"], ["java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.bson.LazyBSONObject.entrySet()"], ["int", "org.bson.LazyBSONObject.hashCode()"], ["boolean", "org.bson.LazyBSONObject.equals(java.lang.Object)"], ["java.lang.String", "org.bson.LazyBSONObject.toString()"], ["java.lang.Object", "org.bson.LazyBSONObject.put(java.lang.String, java.lang.Object)"], ["void", "org.bson.LazyBSONObject.putAll(org.bson.BSONObject)"], ["void", "org.bson.LazyBSONObject.putAll(java.util.Map)"], ["java.lang.Object", "org.bson.LazyBSONObject.removeField(java.lang.String)"], ["java.util.Map", "org.bson.LazyBSONObject.toMap()"], ["org.bson.BasicBSONCallback", "org.bson.BasicBSONCallback()"], ["java.lang.Object", "org.bson.BasicBSONCallback.get()"], ["org.bson.BSONObject", "org.bson.BasicBSONCallback.create()"], ["org.bson.BSONCallback", "org.bson.BasicBSONCallback.createBSONCallback()"], ["org.bson.BSONObject", "org.bson.BasicBSONCallback.create(boolean, java.util.List<java.lang.String>)"], ["void", "org.bson.BasicBSONCallback.objectStart()"], ["void", "org.bson.BasicBSONCallback.objectStart(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONCallback.objectDone()"], ["void", "org.bson.BasicBSONCallback.arrayStart()"], ["void", "org.bson.BasicBSONCallback.arrayStart(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONCallback.arrayDone()"], ["void", "org.bson.BasicBSONCallback.gotNull(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotUndefined(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotMinKey(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotMaxKey(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotBoolean(java.lang.String, boolean)"], ["void", "org.bson.BasicBSONCallback.gotDouble(java.lang.String, double)"], ["void", "org.bson.BasicBSONCallback.gotInt(java.lang.String, int)"], ["void", "org.bson.BasicBSONCallback.gotLong(java.lang.String, long)"], ["void", "org.bson.BasicBSONCallback.gotDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "org.bson.BasicBSONCallback.gotDate(java.lang.String, long)"], ["void", "org.bson.BasicBSONCallback.gotRegex(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotString(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotTimestamp(java.lang.String, int, int)"], ["void", "org.bson.BasicBSONCallback.gotObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.BasicBSONCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.BasicBSONCallback.gotBinaryArray(java.lang.String, byte[])"], ["void", "org.bson.BasicBSONCallback.gotBinary(java.lang.String, byte, byte[])"], ["void", "org.bson.BasicBSONCallback.gotUUID(java.lang.String, long, long)"], ["void", "org.bson.BasicBSONCallback.gotCode(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)"], ["void", "org.bson.BasicBSONCallback.reset()"], ["org.bson.codecs.BsonDateTimeCodec", "org.bson.codecs.BsonDateTimeCodec()"], ["org.bson.BsonDateTime", "org.bson.codecs.BsonDateTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDateTimeCodec.encode(org.bson.BsonWriter, org.bson.BsonDateTime, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonDateTimeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDateTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BigDecimalCodec", "org.bson.codecs.BigDecimalCodec()"], ["void", "org.bson.codecs.BigDecimalCodec.encode(org.bson.BsonWriter, java.math.BigDecimal, org.bson.codecs.EncoderContext)"], ["java.math.BigDecimal", "org.bson.codecs.BigDecimalCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BigDecimalCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BigDecimalCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "org.bson.codecs.configuration.Optional$1.get()"], ["boolean", "org.bson.codecs.configuration.Optional$1.isEmpty()"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromCodecs(org.bson.codecs.Codec<?>...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromCodecs(java.util.List<? extends org.bson.codecs.Codec<?>>)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromProviders(org.bson.codecs.configuration.CodecProvider...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromProviders(java.util.List<? extends org.bson.codecs.configuration.CodecProvider>)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromRegistries(org.bson.codecs.configuration.CodecRegistry...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromRegistries(java.util.List<? extends org.bson.codecs.configuration.CodecRegistry>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.MapOfCodecsProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.configuration.CodecCache.containsKey(java.lang.Class<?>)"], ["void", "org.bson.codecs.configuration.CodecCache.put(java.lang.Class<?>, org.bson.codecs.Codec<?>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.CodecCache.getOrThrow(java.lang.Class<T>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.ProvidersCodecRegistry.get(java.lang.Class<T>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.ProvidersCodecRegistry.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.configuration.ProvidersCodecRegistry.equals(java.lang.Object)"], ["int", "org.bson.codecs.configuration.ProvidersCodecRegistry.hashCode()"], ["T", "org.bson.codecs.configuration.Optional$Some.get()"], ["boolean", "org.bson.codecs.configuration.Optional$Some.isEmpty()"], ["java.lang.String", "org.bson.codecs.configuration.Optional$Some.toString()"], ["boolean", "org.bson.codecs.configuration.Optional$Some.isDefined()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.CodecRegistries$1.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["<U> org.bson.codecs.Codec<U>", "org.bson.codecs.configuration.ChildCodecRegistry.get(java.lang.Class<U>)"], ["boolean", "org.bson.codecs.configuration.ChildCodecRegistry.equals(java.lang.Object)"], ["int", "org.bson.codecs.configuration.ChildCodecRegistry.hashCode()"], ["org.bson.codecs.configuration.CodecConfigurationException", "org.bson.codecs.configuration.CodecConfigurationException(java.lang.String)"], ["org.bson.codecs.configuration.CodecConfigurationException", "org.bson.codecs.configuration.CodecConfigurationException(java.lang.String, java.lang.Throwable)"], ["<T> org.bson.codecs.configuration.Optional<T>", "org.bson.codecs.configuration.Optional.empty()"], ["<T> org.bson.codecs.configuration.Optional<T>", "org.bson.codecs.configuration.Optional.of(T)"], ["java.lang.String", "org.bson.codecs.configuration.Optional.toString()"], ["boolean", "org.bson.codecs.configuration.Optional.isDefined()"], ["void", "org.bson.codecs.configuration.LazyCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["T", "org.bson.codecs.configuration.LazyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.UuidCodecHelper.reverseByteArray(byte[], int, int)"], ["org.bson.codecs.BsonDocumentWrapperCodec", "org.bson.codecs.BsonDocumentWrapperCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)"], ["org.bson.BsonDocumentWrapper", "org.bson.codecs.BsonDocumentWrapperCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDocumentWrapperCodec.encode(org.bson.BsonWriter, org.bson.BsonDocumentWrapper, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonDocumentWrapperCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentWrapperCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.CodeCodec", "org.bson.codecs.CodeCodec()"], ["void", "org.bson.codecs.CodeCodec.encode(org.bson.BsonWriter, org.bson.types.Code, org.bson.codecs.EncoderContext)"], ["org.bson.types.Code", "org.bson.codecs.CodeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.CodeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.CodeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonJavaScriptWithScopeCodec", "org.bson.codecs.BsonJavaScriptWithScopeCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)"], ["org.bson.BsonJavaScriptWithScope", "org.bson.codecs.BsonJavaScriptWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonJavaScriptWithScopeCodec.encode(org.bson.BsonWriter, org.bson.BsonJavaScriptWithScope, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonJavaScriptWithScopeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonJavaScriptWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonUndefinedCodec", "org.bson.codecs.BsonUndefinedCodec()"], ["org.bson.BsonUndefined", "org.bson.codecs.BsonUndefinedCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonUndefinedCodec.encode(org.bson.BsonWriter, org.bson.BsonUndefined, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonUndefinedCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonUndefinedCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonNullCodec", "org.bson.codecs.BsonNullCodec()"], ["org.bson.BsonNull", "org.bson.codecs.BsonNullCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonNullCodec.encode(org.bson.BsonWriter, org.bson.BsonNull, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonNullCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonNullCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.PatternCodec", "org.bson.codecs.PatternCodec()"], ["void", "org.bson.codecs.PatternCodec.encode(org.bson.BsonWriter, java.util.regex.Pattern, org.bson.codecs.EncoderContext)"], ["java.util.regex.Pattern", "org.bson.codecs.PatternCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.PatternCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.PatternCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonTimestampCodec", "org.bson.codecs.BsonTimestampCodec()"], ["void", "org.bson.codecs.BsonTimestampCodec.encode(org.bson.BsonWriter, org.bson.BsonTimestamp, org.bson.codecs.EncoderContext)"], ["org.bson.BsonTimestamp", "org.bson.codecs.BsonTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonTimestampCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ByteCodec", "org.bson.codecs.ByteCodec()"], ["void", "org.bson.codecs.ByteCodec.encode(org.bson.BsonWriter, java.lang.Byte, org.bson.codecs.EncoderContext)"], ["java.lang.Byte", "org.bson.codecs.ByteCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.ByteCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ByteCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.PatternCodec$RegexFlag[]", "org.bson.codecs.PatternCodec$RegexFlag.values()"], ["org.bson.codecs.PatternCodec$RegexFlag", "org.bson.codecs.PatternCodec$RegexFlag.valueOf(java.lang.String)"], ["org.bson.codecs.PatternCodec$RegexFlag", "org.bson.codecs.PatternCodec$RegexFlag.getByCharacter(char)"], ["org.bson.codecs.ShortCodec", "org.bson.codecs.ShortCodec()"], ["void", "org.bson.codecs.ShortCodec.encode(org.bson.BsonWriter, java.lang.Short, org.bson.codecs.EncoderContext)"], ["java.lang.Short", "org.bson.codecs.ShortCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.ShortCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ShortCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonBinaryCodec", "org.bson.codecs.BsonBinaryCodec()"], ["void", "org.bson.codecs.BsonBinaryCodec.encode(org.bson.BsonWriter, org.bson.BsonBinary, org.bson.codecs.EncoderContext)"], ["org.bson.BsonBinary", "org.bson.codecs.BsonBinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonBinaryCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonBinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BinaryCodec", "org.bson.codecs.BinaryCodec()"], ["void", "org.bson.codecs.BinaryCodec.encode(org.bson.BsonWriter, org.bson.types.Binary, org.bson.codecs.EncoderContext)"], ["org.bson.types.Binary", "org.bson.codecs.BinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BinaryCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ObjectIdCodec", "org.bson.codecs.ObjectIdCodec()"], ["void", "org.bson.codecs.ObjectIdCodec.encode(org.bson.BsonWriter, org.bson.types.ObjectId, org.bson.codecs.EncoderContext)"], ["org.bson.types.ObjectId", "org.bson.codecs.ObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.ObjectIdCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonArrayCodec", "org.bson.codecs.BsonArrayCodec()"], ["org.bson.codecs.BsonArrayCodec", "org.bson.codecs.BsonArrayCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonArray", "org.bson.codecs.BsonArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonArrayCodec.encode(org.bson.BsonWriter, org.bson.BsonArray, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonArrayCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ObjectIdGenerator", "org.bson.codecs.ObjectIdGenerator()"], ["java.lang.Object", "org.bson.codecs.ObjectIdGenerator.generate()"], ["org.bson.codecs.BsonInt64Codec", "org.bson.codecs.BsonInt64Codec()"], ["org.bson.BsonInt64", "org.bson.codecs.BsonInt64Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonInt64Codec.encode(org.bson.BsonWriter, org.bson.BsonInt64, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonInt64Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonInt64Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonBooleanCodec", "org.bson.codecs.BsonBooleanCodec()"], ["org.bson.BsonBoolean", "org.bson.codecs.BsonBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonBooleanCodec.encode(org.bson.BsonWriter, org.bson.BsonBoolean, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonBooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ValueCodecProvider", "org.bson.codecs.ValueCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.ValueCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.ValueCodecProvider.equals(java.lang.Object)"], ["int", "org.bson.codecs.ValueCodecProvider.hashCode()"], ["org.bson.codecs.BsonDoubleCodec", "org.bson.codecs.BsonDoubleCodec()"], ["org.bson.BsonDouble", "org.bson.codecs.BsonDoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDoubleCodec.encode(org.bson.BsonWriter, org.bson.BsonDouble, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonDoubleCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "org.bson.codecs.IterableCodec$1.transform(java.lang.Object)"], ["org.bson.codecs.DoubleCodec", "org.bson.codecs.DoubleCodec()"], ["void", "org.bson.codecs.DoubleCodec.encode(org.bson.BsonWriter, java.lang.Double, org.bson.codecs.EncoderContext)"], ["java.lang.Double", "org.bson.codecs.DoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.DoubleCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MapCodecProvider", "org.bson.codecs.MapCodecProvider()"], ["org.bson.codecs.MapCodecProvider", "org.bson.codecs.MapCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.MapCodecProvider", "org.bson.codecs.MapCodecProvider(org.bson.Transformer)"], ["org.bson.codecs.MapCodecProvider", "org.bson.codecs.MapCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.MapCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.MapCodecProvider.equals(java.lang.Object)"], ["int", "org.bson.codecs.MapCodecProvider.hashCode()"], ["boolean", "org.bson.codecs.DecoderContext$Builder.hasCheckedDiscriminator()"], ["org.bson.codecs.DecoderContext$Builder", "org.bson.codecs.DecoderContext$Builder.checkedDiscriminator(boolean)"], ["org.bson.codecs.DecoderContext", "org.bson.codecs.DecoderContext$Builder.build()"], ["org.bson.codecs.ByteArrayCodec", "org.bson.codecs.ByteArrayCodec()"], ["void", "org.bson.codecs.ByteArrayCodec.encode(org.bson.BsonWriter, byte[], org.bson.codecs.EncoderContext)"], ["byte[]", "org.bson.codecs.ByteArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.ByteArrayCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ByteArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec()"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["boolean", "org.bson.codecs.DocumentCodec.documentHasId(org.bson.Document)"], ["org.bson.BsonValue", "org.bson.codecs.DocumentCodec.getDocumentId(org.bson.Document)"], ["org.bson.Document", "org.bson.codecs.DocumentCodec.generateIdIfAbsentFromDocument(org.bson.Document)"], ["void", "org.bson.codecs.DocumentCodec.encode(org.bson.BsonWriter, org.bson.Document, org.bson.codecs.EncoderContext)"], ["org.bson.Document", "org.bson.codecs.DocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.BsonValue", "org.bson.codecs.DocumentCodec.getDocumentId(java.lang.Object)"], ["boolean", "org.bson.codecs.DocumentCodec.documentHasId(java.lang.Object)"], ["java.lang.Object", "org.bson.codecs.DocumentCodec.generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "org.bson.codecs.DocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider()"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.Transformer)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.DocumentCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.DocumentCodecProvider.equals(java.lang.Object)"], ["int", "org.bson.codecs.DocumentCodecProvider.hashCode()"], ["org.bson.codecs.BooleanCodec", "org.bson.codecs.BooleanCodec()"], ["void", "org.bson.codecs.BooleanCodec.encode(org.bson.BsonWriter, java.lang.Boolean, org.bson.codecs.EncoderContext)"], ["java.lang.Boolean", "org.bson.codecs.BooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.AtomicBooleanCodec", "org.bson.codecs.AtomicBooleanCodec()"], ["void", "org.bson.codecs.AtomicBooleanCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicBoolean, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicBoolean", "org.bson.codecs.AtomicBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.AtomicBooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.Decimal128Codec", "org.bson.codecs.Decimal128Codec()"], ["org.bson.types.Decimal128", "org.bson.codecs.Decimal128Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.Decimal128Codec.encode(org.bson.BsonWriter, org.bson.types.Decimal128, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.Decimal128Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.Decimal128Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonJavaScriptCodec", "org.bson.codecs.BsonJavaScriptCodec()"], ["org.bson.BsonJavaScript", "org.bson.codecs.BsonJavaScriptCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonJavaScriptCodec.encode(org.bson.BsonWriter, org.bson.BsonJavaScript, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonJavaScriptCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonJavaScriptCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonMinKeyCodec", "org.bson.codecs.BsonMinKeyCodec()"], ["void", "org.bson.codecs.BsonMinKeyCodec.encode(org.bson.BsonWriter, org.bson.BsonMinKey, org.bson.codecs.EncoderContext)"], ["org.bson.BsonMinKey", "org.bson.codecs.BsonMinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonMinKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonMinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonSymbolCodec", "org.bson.codecs.BsonSymbolCodec()"], ["org.bson.BsonSymbol", "org.bson.codecs.BsonSymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonSymbolCodec.encode(org.bson.BsonWriter, org.bson.BsonSymbol, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonSymbolCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonSymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MinKeyCodec", "org.bson.codecs.MinKeyCodec()"], ["void", "org.bson.codecs.MinKeyCodec.encode(org.bson.BsonWriter, org.bson.types.MinKey, org.bson.codecs.EncoderContext)"], ["org.bson.types.MinKey", "org.bson.codecs.MinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.MinKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.MinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.SymbolCodec", "org.bson.codecs.SymbolCodec()"], ["org.bson.types.Symbol", "org.bson.codecs.SymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.SymbolCodec.encode(org.bson.BsonWriter, org.bson.types.Symbol, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.SymbolCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.SymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.IntegerCodec", "org.bson.codecs.IntegerCodec()"], ["void", "org.bson.codecs.IntegerCodec.encode(org.bson.BsonWriter, java.lang.Integer, org.bson.codecs.EncoderContext)"], ["java.lang.Integer", "org.bson.codecs.IntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.IntegerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.IntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.AtomicIntegerCodec", "org.bson.codecs.AtomicIntegerCodec()"], ["void", "org.bson.codecs.AtomicIntegerCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicInteger, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicInteger", "org.bson.codecs.AtomicIntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.AtomicIntegerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicIntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MapCodec", "org.bson.codecs.MapCodec()"], ["org.bson.codecs.MapCodec", "org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.MapCodec", "org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.MapCodec", "org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["void", "org.bson.codecs.MapCodec.encode(org.bson.BsonWriter, java.util.Map<java.lang.String, java.lang.Object>, org.bson.codecs.EncoderContext)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.bson.codecs.MapCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.Map<java.lang.String, java.lang.Object>>", "org.bson.codecs.MapCodec.getEncoderClass()"], ["void", "org.bson.codecs.MapCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.MapCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonValueCodec", "org.bson.codecs.BsonValueCodec()"], ["org.bson.codecs.BsonValueCodec", "org.bson.codecs.BsonValueCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonValue", "org.bson.codecs.BsonValueCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonValueCodec.encode(org.bson.BsonWriter, org.bson.BsonValue, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonValueCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonValueCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonInt32Codec", "org.bson.codecs.BsonInt32Codec()"], ["org.bson.BsonInt32", "org.bson.codecs.BsonInt32Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonInt32Codec.encode(org.bson.BsonWriter, org.bson.BsonInt32, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonInt32Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonInt32Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonTypeClassMap", "org.bson.codecs.BsonTypeClassMap(java.util.Map<org.bson.BsonType, java.lang.Class<?>>)"], ["org.bson.codecs.BsonTypeClassMap", "org.bson.codecs.BsonTypeClassMap()"], ["boolean", "org.bson.codecs.BsonTypeClassMap.equals(java.lang.Object)"], ["int", "org.bson.codecs.BsonTypeClassMap.hashCode()"], ["org.bson.codecs.LongCodec", "org.bson.codecs.LongCodec()"], ["void", "org.bson.codecs.LongCodec.encode(org.bson.BsonWriter, java.lang.Long, org.bson.codecs.EncoderContext)"], ["java.lang.Long", "org.bson.codecs.LongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.LongCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.LongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonMaxKeyCodec", "org.bson.codecs.BsonMaxKeyCodec()"], ["void", "org.bson.codecs.BsonMaxKeyCodec.encode(org.bson.BsonWriter, org.bson.BsonMaxKey, org.bson.codecs.EncoderContext)"], ["org.bson.BsonMaxKey", "org.bson.codecs.BsonMaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonMaxKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonMaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonRegularExpressionCodec", "org.bson.codecs.BsonRegularExpressionCodec()"], ["org.bson.BsonRegularExpression", "org.bson.codecs.BsonRegularExpressionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonRegularExpressionCodec.encode(org.bson.BsonWriter, org.bson.BsonRegularExpression, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonRegularExpressionCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonRegularExpressionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.StringCodec", "org.bson.codecs.StringCodec()"], ["void", "org.bson.codecs.StringCodec.encode(org.bson.BsonWriter, java.lang.String, org.bson.codecs.EncoderContext)"], ["java.lang.String", "org.bson.codecs.StringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.StringCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.StringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.FloatCodec", "org.bson.codecs.FloatCodec()"], ["void", "org.bson.codecs.FloatCodec.encode(org.bson.BsonWriter, java.lang.Float, org.bson.codecs.EncoderContext)"], ["java.lang.Float", "org.bson.codecs.FloatCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.FloatCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.FloatCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonStringCodec", "org.bson.codecs.BsonStringCodec()"], ["org.bson.BsonString", "org.bson.codecs.BsonStringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonStringCodec.encode(org.bson.BsonWriter, org.bson.BsonString, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonStringCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonStringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDBPointerCodec", "org.bson.codecs.BsonDBPointerCodec()"], ["org.bson.BsonDbPointer", "org.bson.codecs.BsonDBPointerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDBPointerCodec.encode(org.bson.BsonWriter, org.bson.BsonDbPointer, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonDBPointerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDBPointerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MaxKeyCodec", "org.bson.codecs.MaxKeyCodec()"], ["void", "org.bson.codecs.MaxKeyCodec.encode(org.bson.BsonWriter, org.bson.types.MaxKey, org.bson.codecs.EncoderContext)"], ["org.bson.types.MaxKey", "org.bson.codecs.MaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.MaxKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.MaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.EncoderContext$Builder", "org.bson.codecs.EncoderContext.builder()"], ["boolean", "org.bson.codecs.EncoderContext.isEncodingCollectibleDocument()"], ["<T> void", "org.bson.codecs.EncoderContext.encodeWithChildContext(org.bson.codecs.Encoder<T>, org.bson.BsonWriter, T)"], ["org.bson.codecs.EncoderContext", "org.bson.codecs.EncoderContext.getChildContext()"], ["java.lang.Object", "org.bson.codecs.DocumentCodec$1.transform(java.lang.Object)"], ["org.bson.codecs.EncoderContext$Builder", "org.bson.codecs.EncoderContext$Builder.isEncodingCollectibleDocument(boolean)"], ["org.bson.codecs.EncoderContext", "org.bson.codecs.EncoderContext$Builder.build()"], ["org.bson.codecs.CodeWithScopeCodec", "org.bson.codecs.CodeWithScopeCodec(org.bson.codecs.Codec<org.bson.Document>)"], ["org.bson.types.CodeWithScope", "org.bson.codecs.CodeWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.CodeWithScopeCodec.encode(org.bson.BsonWriter, org.bson.types.CodeWithScope, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.CodeWithScopeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.CodeWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.RawBsonDocumentCodec", "org.bson.codecs.RawBsonDocumentCodec()"], ["void", "org.bson.codecs.RawBsonDocumentCodec.encode(org.bson.BsonWriter, org.bson.RawBsonDocument, org.bson.codecs.EncoderContext)"], ["org.bson.RawBsonDocument", "org.bson.codecs.RawBsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.RawBsonDocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.RawBsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonValueCodecProvider", "org.bson.codecs.BsonValueCodecProvider()"], ["java.lang.Class<? extends org.bson.BsonValue>", "org.bson.codecs.BsonValueCodecProvider.getClassForBsonType(org.bson.BsonType)"], ["org.bson.codecs.BsonTypeClassMap", "org.bson.codecs.BsonValueCodecProvider.getBsonTypeClassMap()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.BsonValueCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.UuidCodecProvider", "org.bson.codecs.UuidCodecProvider(org.bson.UuidRepresentation)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.UuidCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.UuidCodec", "org.bson.codecs.UuidCodec(org.bson.UuidRepresentation)"], ["org.bson.codecs.UuidCodec", "org.bson.codecs.UuidCodec()"], ["void", "org.bson.codecs.UuidCodec.encode(org.bson.BsonWriter, java.util.UUID, org.bson.codecs.EncoderContext)"], ["java.util.UUID", "org.bson.codecs.UuidCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.UuidCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.UuidCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDocumentCodec", "org.bson.codecs.BsonDocumentCodec()"], ["org.bson.codecs.BsonDocumentCodec", "org.bson.codecs.BsonDocumentCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.BsonDocumentCodec.getCodecRegistry()"], ["org.bson.BsonDocument", "org.bson.codecs.BsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDocumentCodec.encode(org.bson.BsonWriter, org.bson.BsonDocument, org.bson.codecs.EncoderContext)"], ["org.bson.BsonDocument", "org.bson.codecs.BsonDocumentCodec.generateIdIfAbsentFromDocument(org.bson.BsonDocument)"], ["boolean", "org.bson.codecs.BsonDocumentCodec.documentHasId(org.bson.BsonDocument)"], ["org.bson.BsonValue", "org.bson.codecs.BsonDocumentCodec.getDocumentId(org.bson.BsonDocument)"], ["org.bson.BsonValue", "org.bson.codecs.BsonDocumentCodec.getDocumentId(java.lang.Object)"], ["boolean", "org.bson.codecs.BsonDocumentCodec.documentHasId(java.lang.Object)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentCodec.generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "org.bson.codecs.BsonDocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDecimal128Codec", "org.bson.codecs.BsonDecimal128Codec()"], ["org.bson.BsonDecimal128", "org.bson.codecs.BsonDecimal128Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDecimal128Codec.encode(org.bson.BsonWriter, org.bson.BsonDecimal128, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.BsonDecimal128Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDecimal128Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "org.bson.codecs.MapCodec$1.transform(java.lang.Object)"], ["org.bson.codecs.BsonTypeCodecMap", "org.bson.codecs.BsonTypeCodecMap(org.bson.codecs.BsonTypeClassMap, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.DecoderContext.hasCheckedDiscriminator()"], ["org.bson.codecs.DecoderContext$Builder", "org.bson.codecs.DecoderContext.builder()"], ["<T> T", "org.bson.codecs.DecoderContext.decodeWithChildContext(org.bson.codecs.Decoder<T>, org.bson.BsonReader)"], ["<S> void", "org.bson.codecs.pojo.InstanceCreatorImpl.set(S, org.bson.codecs.pojo.PropertyModel<S>)"], ["T", "org.bson.codecs.pojo.InstanceCreatorImpl.getInstance()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModelBuilder.getDiscriminator()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModelBuilder.getDiscriminatorKey()"], ["java.lang.Boolean", "org.bson.codecs.pojo.ClassModelBuilder.useDiscriminator()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModelBuilder.getIdPropertyName()"], ["boolean", "org.bson.codecs.pojo.ClassModelBuilder.removeProperty(java.lang.String)"], ["java.lang.String", "org.bson.codecs.pojo.ClassModelBuilder.toString()"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider.builder()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.PojoCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["void", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["T", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.PojoCodecImpl.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["T", "org.bson.codecs.pojo.PojoCodecImpl.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.String", "org.bson.codecs.pojo.PojoCodecImpl.toString()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.CollectionPropertyCodecProvider.get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.EnumPropertyCodecProvider.get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)"], ["void", "org.bson.codecs.pojo.CollectionPropertyCodecProvider$CollectionCodec.encode(org.bson.BsonWriter, java.util.Collection<T>, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.pojo.CollectionPropertyCodecProvider$CollectionCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.pojo.CollectionPropertyCodecProvider$CollectionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.ConventionDefaultsImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["void", "org.bson.codecs.pojo.LazyPojoCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["T", "org.bson.codecs.pojo.LazyPojoCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["<T> org.bson.codecs.pojo.TypeData$Builder<T>", "org.bson.codecs.pojo.TypeData.builder(java.lang.Class<T>)"], ["<T> org.bson.codecs.pojo.TypeData<T>", "org.bson.codecs.pojo.TypeData.newInstance(java.lang.reflect.Type, java.lang.Class<T>)"], ["java.lang.String", "org.bson.codecs.pojo.TypeData.toString()"], ["boolean", "org.bson.codecs.pojo.TypeData.equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.TypeData.hashCode()"], ["void", "org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModelBuilder.getName()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModelBuilder.getReadName()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModelBuilder.getWriteName()"], ["boolean", "org.bson.codecs.pojo.PropertyModelBuilder.isWritable()"], ["boolean", "org.bson.codecs.pojo.PropertyModelBuilder.isReadable()"], ["java.lang.Boolean", "org.bson.codecs.pojo.PropertyModelBuilder.isDiscriminatorEnabled()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModelBuilder.toString()"], ["void", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.encode(org.bson.BsonWriter, java.util.Map<java.lang.String, T>, org.bson.codecs.EncoderContext)"], ["java.util.Map<java.lang.String, T>", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.Map<java.lang.String, T>>", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.getEncoderClass()"], ["void", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.MapPropertyCodecProvider.get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)"], ["void", "org.bson.codecs.pojo.ConventionSetPrivateFieldImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["java.lang.String", "org.bson.codecs.pojo.PropertyMetadata.getName()"], ["java.lang.reflect.Field", "org.bson.codecs.pojo.PropertyMetadata.getField()"], ["java.lang.reflect.Method", "org.bson.codecs.pojo.PropertyMetadata.getGetter()"], ["void", "org.bson.codecs.pojo.PropertyMetadata.setGetter(java.lang.reflect.Method)"], ["java.lang.reflect.Method", "org.bson.codecs.pojo.PropertyMetadata.getSetter()"], ["void", "org.bson.codecs.pojo.PropertyMetadata.setSetter(java.lang.reflect.Method)"], ["java.lang.String", "org.bson.codecs.pojo.PropertyMetadata.getDeclaringClassName()"], ["org.bson.codecs.pojo.TypeParameterMap", "org.bson.codecs.pojo.PropertyMetadata.getTypeParameterMap()"], ["<S> org.bson.codecs.pojo.PropertyMetadata<T>", "org.bson.codecs.pojo.PropertyMetadata.typeParameterInfo(org.bson.codecs.pojo.TypeParameterMap, org.bson.codecs.pojo.TypeData<S>)"], ["boolean", "org.bson.codecs.pojo.PropertyMetadata.isSerializable()"], ["boolean", "org.bson.codecs.pojo.PropertyMetadata.isDeserializable()"], ["boolean", "org.bson.codecs.pojo.PropertyModelSerializationImpl.shouldSerialize(T)"], ["java.lang.String", "org.bson.codecs.pojo.TypeParameterMap.toString()"], ["boolean", "org.bson.codecs.pojo.TypeParameterMap.equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.TypeParameterMap.hashCode()"], ["<S> T", "org.bson.codecs.pojo.PropertyAccessorImpl.get(S)"], ["<S> void", "org.bson.codecs.pojo.PropertyAccessorImpl.set(S, T)"], ["<S> org.bson.codecs.pojo.TypeData$Builder<T>", "org.bson.codecs.pojo.TypeData$Builder.addTypeParameter(org.bson.codecs.pojo.TypeData<S>)"], ["org.bson.codecs.pojo.PojoCodecProvider", "org.bson.codecs.pojo.PojoCodecProvider$Builder.build()"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.automatic(boolean)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.conventions(java.util.List<org.bson.codecs.pojo.Convention>)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.register(java.lang.Class<?>...)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.register(org.bson.codecs.pojo.ClassModel<?>...)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.register(java.lang.String...)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.register(org.bson.codecs.pojo.PropertyCodecProvider...)"], ["<S> T", "org.bson.codecs.pojo.ConventionSetPrivateFieldImpl$PrivateProperyAccessor.get(S)"], ["<S> void", "org.bson.codecs.pojo.ConventionSetPrivateFieldImpl$PrivateProperyAccessor.set(S, T)"], ["void", "org.bson.codecs.pojo.ConventionAnnotationImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["<S> org.bson.codecs.Codec<S>", "org.bson.codecs.pojo.FallbackPropertyCodecProvider.get(org.bson.codecs.pojo.TypeWithTypeParameters<S>, org.bson.codecs.pojo.PropertyCodecRegistry)"], ["<S> T", "org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl$PrivateProperyAccessor.get(S)"], ["<S> void", "org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl$PrivateProperyAccessor.set(S, T)"], ["<T> org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModel.builder()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModel.getName()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModel.getWriteName()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModel.getReadName()"], ["boolean", "org.bson.codecs.pojo.PropertyModel.isWritable()"], ["boolean", "org.bson.codecs.pojo.PropertyModel.isReadable()"], ["boolean", "org.bson.codecs.pojo.PropertyModel.shouldSerialize(T)"], ["java.lang.Boolean", "org.bson.codecs.pojo.PropertyModel.useDiscriminator()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModel.toString()"], ["boolean", "org.bson.codecs.pojo.PropertyModel.equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.PropertyModel.hashCode()"], ["org.bson.codecs.pojo.PojoBuilderHelper$PropertyTypeCheck[]", "org.bson.codecs.pojo.PojoBuilderHelper$PropertyTypeCheck.values()"], ["org.bson.codecs.pojo.PojoBuilderHelper$PropertyTypeCheck", "org.bson.codecs.pojo.PojoBuilderHelper$PropertyTypeCheck.valueOf(java.lang.String)"], ["T", "org.bson.codecs.pojo.AutomaticPojoCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.AutomaticPojoCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["<S> org.bson.codecs.Codec<S>", "org.bson.codecs.pojo.PropertyCodecRegistryImpl.get(org.bson.codecs.pojo.TypeWithTypeParameters<S>)"], ["<S> org.bson.codecs.pojo.ClassModelBuilder<S>", "org.bson.codecs.pojo.ClassModel.builder(java.lang.Class<S>)"], ["boolean", "org.bson.codecs.pojo.ClassModel.hasTypeParameters()"], ["boolean", "org.bson.codecs.pojo.ClassModel.useDiscriminator()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModel.getDiscriminatorKey()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModel.getDiscriminator()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModel.getName()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModel.toString()"], ["boolean", "org.bson.codecs.pojo.ClassModel.equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.ClassModel.hashCode()"], ["org.bson.codecs.IterableCodec", "org.bson.codecs.IterableCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.IterableCodec", "org.bson.codecs.IterableCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["java.lang.Iterable", "org.bson.codecs.IterableCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.IterableCodec.encode(org.bson.BsonWriter, java.lang.Iterable, org.bson.codecs.EncoderContext)"], ["void", "org.bson.codecs.IterableCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.IterableCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.IterableCodecProvider", "org.bson.codecs.IterableCodecProvider()"], ["org.bson.codecs.IterableCodecProvider", "org.bson.codecs.IterableCodecProvider(org.bson.Transformer)"], ["org.bson.codecs.IterableCodecProvider", "org.bson.codecs.IterableCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.IterableCodecProvider", "org.bson.codecs.IterableCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.IterableCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.IterableCodecProvider.equals(java.lang.Object)"], ["int", "org.bson.codecs.IterableCodecProvider.hashCode()"], ["org.bson.codecs.AtomicLongCodec", "org.bson.codecs.AtomicLongCodec()"], ["void", "org.bson.codecs.AtomicLongCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicLong, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicLong", "org.bson.codecs.AtomicLongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.AtomicLongCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicLongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonObjectIdCodec", "org.bson.codecs.BsonObjectIdCodec()"], ["void", "org.bson.codecs.BsonObjectIdCodec.encode(org.bson.BsonWriter, org.bson.BsonObjectId, org.bson.codecs.EncoderContext)"], ["org.bson.BsonObjectId", "org.bson.codecs.BsonObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonObjectIdCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.CharacterCodec", "org.bson.codecs.CharacterCodec()"], ["void", "org.bson.codecs.CharacterCodec.encode(org.bson.BsonWriter, java.lang.Character, org.bson.codecs.EncoderContext)"], ["java.lang.Character", "org.bson.codecs.CharacterCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.CharacterCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.CharacterCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DateCodec", "org.bson.codecs.DateCodec()"], ["void", "org.bson.codecs.DateCodec.encode(org.bson.BsonWriter, java.util.Date, org.bson.codecs.EncoderContext)"], ["java.util.Date", "org.bson.codecs.DateCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.DateCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DateCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.BsonBinaryWriterSettings", "org.bson.BsonBinaryWriterSettings(int)"], ["org.bson.BsonBinaryWriterSettings", "org.bson.BsonBinaryWriterSettings()"], ["int", "org.bson.BsonBinaryWriterSettings.getMaxDocumentSize()"], ["java.lang.String", "org.bson.StringUtils.join(java.lang.String, java.util.Collection<?>)"], ["java.util.Map$Entry<java.lang.String, org.bson.BsonValue>", "org.bson.BsonDocumentReader$Context.getNextElement()"], ["org.bson.BsonValue", "org.bson.BsonDocumentReader$Context.getNextValue()"], ["org.bson.BsonMinKey", "org.bson.BsonMinKey()"], ["org.bson.BsonType", "org.bson.BsonMinKey.getBsonType()"], ["boolean", "org.bson.BsonMinKey.equals(java.lang.Object)"], ["int", "org.bson.BsonMinKey.hashCode()"], ["java.lang.String", "org.bson.BsonMinKey.toString()"], ["void", "org.bson.BSONCallbackAdapter.flush()"], ["void", "org.bson.BSONCallbackAdapter.doWriteStartDocument()"], ["void", "org.bson.BSONCallbackAdapter.doWriteStartArray()"], ["void", "org.bson.BSONCallbackAdapter.doWriteBoolean(boolean)"], ["void", "org.bson.BSONCallbackAdapter.doWriteNull()"], ["void", "org.bson.BSONCallbackAdapter.doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BSONCallbackAdapter.doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BSONCallbackAdapter.doWriteString(java.lang.String)"], ["void", "org.bson.BSONCallbackAdapter.doWriteSymbol(java.lang.String)"], ["void", "org.bson.BSONCallbackAdapter.doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BSONCallbackAdapter.doWriteUndefined()"], ["org.bson.LazyBSONList", "org.bson.LazyBSONList(byte[], org.bson.LazyBSONCallback)"], ["org.bson.LazyBSONList", "org.bson.LazyBSONList(byte[], int, org.bson.LazyBSONCallback)"], ["int", "org.bson.LazyBSONList.size()"], ["boolean", "org.bson.LazyBSONList.contains(java.lang.Object)"], ["java.util.Iterator", "org.bson.LazyBSONList.iterator()"], ["boolean", "org.bson.LazyBSONList.containsAll(java.util.Collection)"], ["java.lang.Object", "org.bson.LazyBSONList.get(int)"], ["int", "org.bson.LazyBSONList.indexOf(java.lang.Object)"], ["int", "org.bson.LazyBSONList.lastIndexOf(java.lang.Object)"], ["java.util.ListIterator", "org.bson.LazyBSONList.listIterator()"], ["java.util.ListIterator", "org.bson.LazyBSONList.listIterator(int)"], ["boolean", "org.bson.LazyBSONList.add(java.lang.Object)"], ["boolean", "org.bson.LazyBSONList.remove(java.lang.Object)"], ["boolean", "org.bson.LazyBSONList.addAll(java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.addAll(int, java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.removeAll(java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.retainAll(java.util.Collection)"], ["void", "org.bson.LazyBSONList.clear()"], ["java.lang.Object", "org.bson.LazyBSONList.set(int, java.lang.Object)"], ["void", "org.bson.LazyBSONList.add(int, java.lang.Object)"], ["java.lang.Object", "org.bson.LazyBSONList.remove(int)"], ["java.util.List", "org.bson.LazyBSONList.subList(int, int)"], ["java.lang.Object[]", "org.bson.LazyBSONList.toArray()"], ["java.lang.Object[]", "org.bson.LazyBSONList.toArray(java.lang.Object[])"], ["void", "org.bson.AbstractBsonReader$Mark.reset()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap$Mutable.entrySet()"], ["org.bson.util.ClassMap", "org.bson.util.ClassMap()"], ["<T> java.util.List<java.lang.Class<?>>", "org.bson.util.ClassMap.getAncestry(java.lang.Class<T>)"], ["T", "org.bson.util.ClassMap.get(java.lang.Object)"], ["T", "org.bson.util.ClassMap.put(java.lang.Class<?>, T)"], ["T", "org.bson.util.ClassMap.remove(java.lang.Object)"], ["void", "org.bson.util.ClassMap.clear()"], ["int", "org.bson.util.ClassMap.size()"], ["boolean", "org.bson.util.ClassMap.isEmpty()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap$Immutable.entrySet()"], ["void", "org.bson.util.AbstractCopyOnWriteMap$Values.clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.retainAll(java.util.Collection<?>)"], ["<K, V> org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap.builder()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newHashMap()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newLinkedMap()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newLinkedMap(java.util.Map<? extends K, ? extends V>)"], ["void", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.retainAll(java.util.Collection<?>)"], ["<T> java.util.List<java.lang.Class<?>>", "org.bson.util.ClassAncestry.getAncestry(java.lang.Class<T>)"], ["<K, V> java.util.Map<K, V>", "org.bson.util.ComputingMap.create(org.bson.util.Function<K, V>)"], ["V", "org.bson.util.ComputingMap.get(java.lang.Object)"], ["V", "org.bson.util.ComputingMap.apply(K)"], ["V", "org.bson.util.ComputingMap.putIfAbsent(K, V)"], ["boolean", "org.bson.util.ComputingMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.bson.util.ComputingMap.replace(K, V, V)"], ["V", "org.bson.util.ComputingMap.replace(K, V)"], ["int", "org.bson.util.ComputingMap.size()"], ["boolean", "org.bson.util.ComputingMap.isEmpty()"], ["boolean", "org.bson.util.ComputingMap.containsKey(java.lang.Object)"], ["boolean", "org.bson.util.ComputingMap.containsValue(java.lang.Object)"], ["V", "org.bson.util.ComputingMap.put(K, V)"], ["V", "org.bson.util.ComputingMap.remove(java.lang.Object)"], ["void", "org.bson.util.ComputingMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.bson.util.ComputingMap.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.ComputingMap.entrySet()"], ["boolean", "org.bson.util.ComputingMap.equals(java.lang.Object)"], ["int", "org.bson.util.ComputingMap.hashCode()"], ["<N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V>", "org.bson.util.CopyOnWriteMap$Hash.copy(N)"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.stableViews()"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.addAll(java.util.Map<? extends K, ? extends V>)"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.liveViews()"], ["org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap$Builder.newHashMap()"], ["org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap$Builder.newLinkedMap()"], ["void", "org.bson.util.AbstractCopyOnWriteMap.clear()"], ["V", "org.bson.util.AbstractCopyOnWriteMap.remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.replace(K, V, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.replace(K, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.put(K, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.putIfAbsent(K, V)"], ["void", "org.bson.util.AbstractCopyOnWriteMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap.entrySet()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.containsKey(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.containsValue(java.lang.Object)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.get(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.isEmpty()"], ["int", "org.bson.util.AbstractCopyOnWriteMap.size()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.equals(java.lang.Object)"], ["int", "org.bson.util.AbstractCopyOnWriteMap.hashCode()"], ["java.lang.String", "org.bson.util.AbstractCopyOnWriteMap.toString()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.hasNext()"], ["T", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.next()"], ["void", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.remove()"], ["<N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V>", "org.bson.util.CopyOnWriteMap$Linked.copy(N)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.contains(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.containsAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.isEmpty()"], ["int", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.size()"], ["java.lang.Object[]", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toArray()"], ["<T> T[]", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toArray(T[])"], ["int", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.hashCode()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.equals(java.lang.Object)"], ["java.lang.String", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toString()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.add(E)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.addAll(java.util.Collection<? extends E>)"], ["T", "org.bson.util.ClassMap$ComputeFunction.apply(java.lang.Class<?>)"], ["java.lang.Object", "org.bson.util.ClassMap$ComputeFunction.apply(java.lang.Object)"], ["org.bson.util.AbstractCopyOnWriteMap$View$Type[]", "org.bson.util.AbstractCopyOnWriteMap$View$Type.values()"], ["org.bson.util.AbstractCopyOnWriteMap$View$Type", "org.bson.util.AbstractCopyOnWriteMap$View$Type.valueOf(java.lang.String)"], ["void", "org.bson.util.AbstractCopyOnWriteMap$KeySet.clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.retainAll(java.util.Collection<?>)"], ["org.bson.BsonDocument", "org.bson.BsonDocument.parse(java.lang.String)"], ["org.bson.BsonDocument", "org.bson.BsonDocument(java.util.List<org.bson.BsonElement>)"], ["org.bson.BsonDocument", "org.bson.BsonDocument(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.BsonDocument()"], ["<C> org.bson.BsonDocument", "org.bson.BsonDocument.toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonType", "org.bson.BsonDocument.getBsonType()"], ["int", "org.bson.BsonDocument.size()"], ["boolean", "org.bson.BsonDocument.isEmpty()"], ["boolean", "org.bson.BsonDocument.containsKey(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocument.get(java.lang.Object)"], ["org.bson.BsonDocument", "org.bson.BsonDocument.getDocument(java.lang.Object)"], ["org.bson.BsonArray", "org.bson.BsonDocument.getArray(java.lang.Object)"], ["org.bson.BsonNumber", "org.bson.BsonDocument.getNumber(java.lang.Object)"], ["org.bson.BsonInt32", "org.bson.BsonDocument.getInt32(java.lang.Object)"], ["org.bson.BsonInt64", "org.bson.BsonDocument.getInt64(java.lang.Object)"], ["org.bson.BsonDecimal128", "org.bson.BsonDocument.getDecimal128(java.lang.Object)"], ["org.bson.BsonDouble", "org.bson.BsonDocument.getDouble(java.lang.Object)"], ["org.bson.BsonBoolean", "org.bson.BsonDocument.getBoolean(java.lang.Object)"], ["org.bson.BsonString", "org.bson.BsonDocument.getString(java.lang.Object)"], ["org.bson.BsonDateTime", "org.bson.BsonDocument.getDateTime(java.lang.Object)"], ["org.bson.BsonTimestamp", "org.bson.BsonDocument.getTimestamp(java.lang.Object)"], ["org.bson.BsonObjectId", "org.bson.BsonDocument.getObjectId(java.lang.Object)"], ["org.bson.BsonRegularExpression", "org.bson.BsonDocument.getRegularExpression(java.lang.Object)"], ["org.bson.BsonBinary", "org.bson.BsonDocument.getBinary(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isNull(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDocument(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isArray(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isNumber(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isInt32(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isInt64(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDecimal128(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDouble(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isBoolean(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isString(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDateTime(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isTimestamp(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isObjectId(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isBinary(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocument.get(java.lang.Object, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.BsonDocument.getDocument(java.lang.Object, org.bson.BsonDocument)"], ["org.bson.BsonArray", "org.bson.BsonDocument.getArray(java.lang.Object, org.bson.BsonArray)"], ["org.bson.BsonNumber", "org.bson.BsonDocument.getNumber(java.lang.Object, org.bson.BsonNumber)"], ["org.bson.BsonInt32", "org.bson.BsonDocument.getInt32(java.lang.Object, org.bson.BsonInt32)"], ["org.bson.BsonInt64", "org.bson.BsonDocument.getInt64(java.lang.Object, org.bson.BsonInt64)"], ["org.bson.BsonDecimal128", "org.bson.BsonDocument.getDecimal128(java.lang.Object, org.bson.BsonDecimal128)"], ["org.bson.BsonDouble", "org.bson.BsonDocument.getDouble(java.lang.Object, org.bson.BsonDouble)"], ["org.bson.BsonBoolean", "org.bson.BsonDocument.getBoolean(java.lang.Object, org.bson.BsonBoolean)"], ["org.bson.BsonString", "org.bson.BsonDocument.getString(java.lang.Object, org.bson.BsonString)"], ["org.bson.BsonDateTime", "org.bson.BsonDocument.getDateTime(java.lang.Object, org.bson.BsonDateTime)"], ["org.bson.BsonTimestamp", "org.bson.BsonDocument.getTimestamp(java.lang.Object, org.bson.BsonTimestamp)"], ["org.bson.BsonObjectId", "org.bson.BsonDocument.getObjectId(java.lang.Object, org.bson.BsonObjectId)"], ["org.bson.BsonBinary", "org.bson.BsonDocument.getBinary(java.lang.Object, org.bson.BsonBinary)"], ["org.bson.BsonRegularExpression", "org.bson.BsonDocument.getRegularExpression(java.lang.Object, org.bson.BsonRegularExpression)"], ["org.bson.BsonValue", "org.bson.BsonDocument.put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonDocument.remove(java.lang.Object)"], ["void", "org.bson.BsonDocument.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["void", "org.bson.BsonDocument.clear()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.BsonDocument.entrySet()"], ["org.bson.BsonDocument", "org.bson.BsonDocument.append(java.lang.String, org.bson.BsonValue)"], ["java.lang.String", "org.bson.BsonDocument.getFirstKey()"], ["boolean", "org.bson.BsonDocument.equals(java.lang.Object)"], ["int", "org.bson.BsonDocument.hashCode()"], ["java.lang.String", "org.bson.BsonDocument.toJson()"], ["java.lang.String", "org.bson.BsonDocument.toJson(org.bson.json.JsonWriterSettings)"], ["java.lang.String", "org.bson.BsonDocument.toString()"], ["org.bson.BsonDocument", "org.bson.BsonDocument.clone()"], ["java.lang.Object", "org.bson.BsonDocument.clone()"], ["java.lang.Object", "org.bson.BsonDocument.remove(java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocument.put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocument.get(java.lang.Object)"], ["org.bson.BsonType[]", "org.bson.BsonType.values()"], ["org.bson.BsonType", "org.bson.BsonType.valueOf(java.lang.String)"], ["int", "org.bson.BsonType.getValue()"], ["org.bson.BsonType", "org.bson.BsonType.findByValue(int)"], ["boolean", "org.bson.BsonType.isContainer()"], ["org.bson.BsonSerializationException", "org.bson.BsonSerializationException(java.lang.String)"], ["org.bson.BsonMaxKey", "org.bson.BsonMaxKey()"], ["org.bson.BsonType", "org.bson.BsonMaxKey.getBsonType()"], ["boolean", "org.bson.BsonMaxKey.equals(java.lang.Object)"], ["int", "org.bson.BsonMaxKey.hashCode()"], ["java.lang.String", "org.bson.BsonMaxKey.toString()"], ["org.bson.BsonBinaryReader", "org.bson.BsonBinaryReader(java.nio.ByteBuffer)"], ["org.bson.BsonBinaryReader", "org.bson.BsonBinaryReader(org.bson.io.BsonInput)"], ["void", "org.bson.BsonBinaryReader.close()"], ["org.bson.io.BsonInput", "org.bson.BsonBinaryReader.getBsonInput()"], ["org.bson.BsonType", "org.bson.BsonBinaryReader.readBsonType()"], ["org.bson.types.Decimal128", "org.bson.BsonBinaryReader.doReadDecimal128()"], ["void", "org.bson.BsonBinaryReader.doReadStartArray()"], ["void", "org.bson.BsonBinaryReader.mark()"], ["org.bson.BsonReaderMark", "org.bson.BsonBinaryReader.getMark()"], ["void", "org.bson.BsonBinaryReader.reset()"], ["org.bson.BsonJavaScript", "org.bson.BsonJavaScript(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonJavaScript.getBsonType()"], ["java.lang.String", "org.bson.BsonJavaScript.getCode()"], ["boolean", "org.bson.BsonJavaScript.equals(java.lang.Object)"], ["int", "org.bson.BsonJavaScript.hashCode()"], ["java.lang.String", "org.bson.BsonJavaScript.toString()"], ["org.bson.LazyBSONList$LazyBSONListIterator", "org.bson.LazyBSONList$LazyBSONListIterator(org.bson.LazyBSONList)"], ["boolean", "org.bson.LazyBSONList$LazyBSONListIterator.hasNext()"], ["java.lang.Object", "org.bson.LazyBSONList$LazyBSONListIterator.next()"], ["void", "org.bson.LazyBSONList$LazyBSONListIterator.remove()"], ["org.bson.ByteBufNIO", "org.bson.ByteBufNIO(java.nio.ByteBuffer)"], ["int", "org.bson.ByteBufNIO.getReferenceCount()"], ["org.bson.ByteBufNIO", "org.bson.ByteBufNIO.retain()"], ["void", "org.bson.ByteBufNIO.release()"], ["int", "org.bson.ByteBufNIO.capacity()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(int, byte)"], ["int", "org.bson.ByteBufNIO.remaining()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(byte[], int, int)"], ["boolean", "org.bson.ByteBufNIO.hasRemaining()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(byte)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.flip()"], ["byte[]", "org.bson.ByteBufNIO.array()"], ["int", "org.bson.ByteBufNIO.limit()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.position(int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.clear()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.order(java.nio.ByteOrder)"], ["byte", "org.bson.ByteBufNIO.get()"], ["byte", "org.bson.ByteBufNIO.get(int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(byte[])"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(int, byte[])"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(byte[], int, int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(int, byte[], int, int)"], ["long", "org.bson.ByteBufNIO.getLong()"], ["long", "org.bson.ByteBufNIO.getLong(int)"], ["double", "org.bson.ByteBufNIO.getDouble()"], ["double", "org.bson.ByteBufNIO.getDouble(int)"], ["int", "org.bson.ByteBufNIO.getInt()"], ["int", "org.bson.ByteBufNIO.getInt(int)"], ["int", "org.bson.ByteBufNIO.position()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.limit(int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.asReadOnly()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.duplicate()"], ["java.nio.ByteBuffer", "org.bson.ByteBufNIO.asNIO()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.retain()"], ["org.bson.BsonNumber", "org.bson.BsonNumber()"], ["org.bson.io.ByteBufferBsonInput", "org.bson.io.ByteBufferBsonInput(org.bson.ByteBuf)"], ["int", "org.bson.io.ByteBufferBsonInput.getPosition()"], ["byte", "org.bson.io.ByteBufferBsonInput.readByte()"], ["void", "org.bson.io.ByteBufferBsonInput.readBytes(byte[])"], ["void", "org.bson.io.ByteBufferBsonInput.readBytes(byte[], int, int)"], ["long", "org.bson.io.ByteBufferBsonInput.readInt64()"], ["double", "org.bson.io.ByteBufferBsonInput.readDouble()"], ["int", "org.bson.io.ByteBufferBsonInput.readInt32()"], ["org.bson.types.ObjectId", "org.bson.io.ByteBufferBsonInput.readObjectId()"], ["java.lang.String", "org.bson.io.ByteBufferBsonInput.readString()"], ["java.lang.String", "org.bson.io.ByteBufferBsonInput.readCString()"], ["void", "org.bson.io.ByteBufferBsonInput.skipCString()"], ["void", "org.bson.io.ByteBufferBsonInput.skip(int)"], ["void", "org.bson.io.ByteBufferBsonInput.mark(int)"], ["void", "org.bson.io.ByteBufferBsonInput.reset()"], ["boolean", "org.bson.io.ByteBufferBsonInput.hasRemaining()"], ["void", "org.bson.io.ByteBufferBsonInput.close()"], ["org.bson.io.BasicOutputBuffer", "org.bson.io.BasicOutputBuffer()"], ["org.bson.io.BasicOutputBuffer", "org.bson.io.BasicOutputBuffer(int)"], ["byte[]", "org.bson.io.BasicOutputBuffer.getInternalBuffer()"], ["void", "org.bson.io.BasicOutputBuffer.write(byte[])"], ["void", "org.bson.io.BasicOutputBuffer.writeBytes(byte[], int, int)"], ["void", "org.bson.io.BasicOutputBuffer.writeByte(int)"], ["int", "org.bson.io.BasicOutputBuffer.getPosition()"], ["int", "org.bson.io.BasicOutputBuffer.getSize()"], ["int", "org.bson.io.BasicOutputBuffer.pipe(java.io.OutputStream)"], ["void", "org.bson.io.BasicOutputBuffer.truncateToPosition(int)"], ["void", "org.bson.io.BasicOutputBuffer.close()"], ["org.bson.io.OutputBuffer", "org.bson.io.OutputBuffer()"], ["void", "org.bson.io.OutputBuffer.write(byte[])"], ["void", "org.bson.io.OutputBuffer.close()"], ["void", "org.bson.io.OutputBuffer.write(byte[], int, int)"], ["void", "org.bson.io.OutputBuffer.writeBytes(byte[])"], ["void", "org.bson.io.OutputBuffer.writeInt32(int)"], ["void", "org.bson.io.OutputBuffer.writeInt32(int, int)"], ["void", "org.bson.io.OutputBuffer.writeInt64(long)"], ["void", "org.bson.io.OutputBuffer.writeDouble(double)"], ["void", "org.bson.io.OutputBuffer.writeString(java.lang.String)"], ["void", "org.bson.io.OutputBuffer.writeCString(java.lang.String)"], ["void", "org.bson.io.OutputBuffer.writeObjectId(org.bson.types.ObjectId)"], ["int", "org.bson.io.OutputBuffer.size()"], ["byte[]", "org.bson.io.OutputBuffer.toByteArray()"], ["void", "org.bson.io.OutputBuffer.write(int)"], ["void", "org.bson.io.OutputBuffer.writeInt(int)"], ["java.lang.String", "org.bson.io.OutputBuffer.toString()"], ["void", "org.bson.io.OutputBuffer.writeLong(long)"], ["org.bson.io.Bits", "org.bson.io.Bits()"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[])"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[], int)"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[], int, int)"], ["int", "org.bson.io.Bits.readInt(java.io.InputStream)"], ["int", "org.bson.io.Bits.readInt(java.io.InputStream, byte[])"], ["int", "org.bson.io.Bits.readInt(byte[])"], ["int", "org.bson.io.Bits.readInt(byte[], int)"], ["int", "org.bson.io.Bits.readIntBE(byte[], int)"], ["long", "org.bson.io.Bits.readLong(java.io.InputStream)"], ["long", "org.bson.io.Bits.readLong(java.io.InputStream, byte[])"], ["long", "org.bson.io.Bits.readLong(byte[])"], ["long", "org.bson.io.Bits.readLong(byte[], int)"], ["org.bson.BsonJavaScriptWithScope", "org.bson.BsonJavaScriptWithScope(java.lang.String, org.bson.BsonDocument)"], ["org.bson.BsonType", "org.bson.BsonJavaScriptWithScope.getBsonType()"], ["java.lang.String", "org.bson.BsonJavaScriptWithScope.getCode()"], ["org.bson.BsonDocument", "org.bson.BsonJavaScriptWithScope.getScope()"], ["boolean", "org.bson.BsonJavaScriptWithScope.equals(java.lang.Object)"], ["int", "org.bson.BsonJavaScriptWithScope.hashCode()"], ["java.lang.String", "org.bson.BsonJavaScriptWithScope.toString()"], ["byte[]", "org.bson.internal.Base64.decode(java.lang.String)"], ["java.lang.String", "org.bson.internal.Base64.encode(byte[])"], ["int", "org.bson.internal.UnsignedLongs.compare(long, long)"], ["java.lang.String", "org.bson.internal.UnsignedLongs.toString(long)"], ["long", "org.bson.internal.UnsignedLongs.parse(java.lang.String)"], ["org.bson.BsonArray", "org.bson.BsonArray(java.util.List<? extends org.bson.BsonValue>)"], ["org.bson.BsonArray", "org.bson.BsonArray()"], ["org.bson.BsonArray", "org.bson.BsonArray.parse(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonArray.getBsonType()"], ["int", "org.bson.BsonArray.size()"], ["boolean", "org.bson.BsonArray.isEmpty()"], ["boolean", "org.bson.BsonArray.contains(java.lang.Object)"], ["java.lang.Object[]", "org.bson.BsonArray.toArray()"], ["<T> T[]", "org.bson.BsonArray.toArray(T[])"], ["boolean", "org.bson.BsonArray.add(org.bson.BsonValue)"], ["boolean", "org.bson.BsonArray.remove(java.lang.Object)"], ["boolean", "org.bson.BsonArray.containsAll(java.util.Collection<?>)"], ["boolean", "org.bson.BsonArray.addAll(java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "org.bson.BsonArray.addAll(int, java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "org.bson.BsonArray.removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.BsonArray.retainAll(java.util.Collection<?>)"], ["void", "org.bson.BsonArray.clear()"], ["org.bson.BsonValue", "org.bson.BsonArray.get(int)"], ["org.bson.BsonValue", "org.bson.BsonArray.set(int, org.bson.BsonValue)"], ["void", "org.bson.BsonArray.add(int, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonArray.remove(int)"], ["int", "org.bson.BsonArray.indexOf(java.lang.Object)"], ["int", "org.bson.BsonArray.lastIndexOf(java.lang.Object)"], ["boolean", "org.bson.BsonArray.equals(java.lang.Object)"], ["int", "org.bson.BsonArray.hashCode()"], ["java.lang.String", "org.bson.BsonArray.toString()"], ["org.bson.BsonArray", "org.bson.BsonArray.clone()"], ["java.lang.Object", "org.bson.BsonArray.clone()"], ["java.lang.Object", "org.bson.BsonArray.remove(int)"], ["void", "org.bson.BsonArray.add(int, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonArray.set(int, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonArray.get(int)"], ["boolean", "org.bson.BsonArray.add(java.lang.Object)"], ["org.bson.LazyBSONCallback", "org.bson.LazyBSONCallback()"], ["void", "org.bson.LazyBSONCallback.reset()"], ["java.lang.Object", "org.bson.LazyBSONCallback.get()"], ["void", "org.bson.LazyBSONCallback.gotBinary(java.lang.String, byte, byte[])"], ["java.lang.Object", "org.bson.LazyBSONCallback.createObject(byte[], int)"], ["java.util.List", "org.bson.LazyBSONCallback.createArray(byte[], int)"], ["java.lang.Object", "org.bson.LazyBSONCallback.createDBRef(java.lang.String, org.bson.types.ObjectId)"], ["<T> T", "org.bson.assertions.Assertions.notNull(java.lang.String, T)"], ["void", "org.bson.assertions.Assertions.isTrue(java.lang.String, boolean)"], ["void", "org.bson.assertions.Assertions.isTrueArgument(java.lang.String, boolean)"], ["<T> T", "org.bson.assertions.Assertions.convertToType(java.lang.Class<T>, java.lang.Object, java.lang.String)"], ["org.bson.BsonDocumentReader", "org.bson.BsonDocumentReader(org.bson.BsonDocument)"], ["org.bson.types.Decimal128", "org.bson.BsonDocumentReader.doReadDecimal128()"], ["org.bson.BsonType", "org.bson.BsonDocumentReader.readBsonType()"], ["void", "org.bson.BsonDocumentReader.mark()"], ["org.bson.BsonReaderMark", "org.bson.BsonDocumentReader.getMark()"], ["void", "org.bson.BsonDocumentReader.reset()"], ["org.bson.BsonRegularExpression", "org.bson.BsonRegularExpression(java.lang.String, java.lang.String)"], ["org.bson.BsonRegularExpression", "org.bson.BsonRegularExpression(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonRegularExpression.getBsonType()"], ["java.lang.String", "org.bson.BsonRegularExpression.getPattern()"], ["java.lang.String", "org.bson.BsonRegularExpression.getOptions()"], ["boolean", "org.bson.BsonRegularExpression.equals(java.lang.Object)"], ["int", "org.bson.BsonRegularExpression.hashCode()"], ["java.lang.String", "org.bson.BsonRegularExpression.toString()"], ["void", "org.bson.AbstractBsonWriter.writeStartDocument(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeStartDocument()"], ["void", "org.bson.AbstractBsonWriter.writeEndDocument()"], ["void", "org.bson.AbstractBsonWriter.writeStartArray(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeStartArray()"], ["void", "org.bson.AbstractBsonWriter.writeEndArray()"], ["void", "org.bson.AbstractBsonWriter.writeBinaryData(java.lang.String, org.bson.BsonBinary)"], ["void", "org.bson.AbstractBsonWriter.writeBinaryData(org.bson.BsonBinary)"], ["void", "org.bson.AbstractBsonWriter.writeBoolean(java.lang.String, boolean)"], ["void", "org.bson.AbstractBsonWriter.writeBoolean(boolean)"], ["void", "org.bson.AbstractBsonWriter.writeDateTime(java.lang.String, long)"], ["void", "org.bson.AbstractBsonWriter.writeDateTime(long)"], ["void", "org.bson.AbstractBsonWriter.writeDBPointer(java.lang.String, org.bson.BsonDbPointer)"], ["void", "org.bson.AbstractBsonWriter.writeDBPointer(org.bson.BsonDbPointer)"], ["void", "org.bson.AbstractBsonWriter.writeDouble(java.lang.String, double)"], ["void", "org.bson.AbstractBsonWriter.writeDouble(double)"], ["void", "org.bson.AbstractBsonWriter.writeInt32(java.lang.String, int)"], ["void", "org.bson.AbstractBsonWriter.writeInt32(int)"], ["void", "org.bson.AbstractBsonWriter.writeInt64(java.lang.String, long)"], ["void", "org.bson.AbstractBsonWriter.writeInt64(long)"], ["void", "org.bson.AbstractBsonWriter.writeDecimal128(org.bson.types.Decimal128)"], ["void", "org.bson.AbstractBsonWriter.writeDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScript(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScript(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScriptWithScope(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScriptWithScope(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMaxKey(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMaxKey()"], ["void", "org.bson.AbstractBsonWriter.writeMinKey(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMinKey()"], ["void", "org.bson.AbstractBsonWriter.writeName(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeNull(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeNull()"], ["void", "org.bson.AbstractBsonWriter.writeObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.AbstractBsonWriter.writeObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.AbstractBsonWriter.writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)"], ["void", "org.bson.AbstractBsonWriter.writeRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.AbstractBsonWriter.writeString(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeString(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeSymbol(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeTimestamp(java.lang.String, org.bson.BsonTimestamp)"], ["void", "org.bson.AbstractBsonWriter.writeTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.AbstractBsonWriter.writeUndefined(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeUndefined()"], ["void", "org.bson.AbstractBsonWriter.close()"], ["void", "org.bson.AbstractBsonWriter.pipe(org.bson.BsonReader)"], ["void", "org.bson.AbstractBsonWriter.pipe(org.bson.BsonReader, java.util.List<org.bson.BsonElement>)"], ["org.bson.BasicBSONDecoder", "org.bson.BasicBSONDecoder()"], ["org.bson.BSONObject", "org.bson.BasicBSONDecoder.readObject(byte[])"], ["org.bson.BSONObject", "org.bson.BasicBSONDecoder.readObject(java.io.InputStream)"], ["int", "org.bson.BasicBSONDecoder.decode(byte[], org.bson.BSONCallback)"], ["int", "org.bson.BasicBSONDecoder.decode(java.io.InputStream, org.bson.BSONCallback)"], ["org.bson.UuidRepresentation[]", "org.bson.UuidRepresentation.values()"], ["org.bson.UuidRepresentation", "org.bson.UuidRepresentation.valueOf(java.lang.String)"], ["org.bson.BsonBoolean", "org.bson.BsonBoolean.valueOf(boolean)"], ["org.bson.BsonBoolean", "org.bson.BsonBoolean(boolean)"], ["int", "org.bson.BsonBoolean.compareTo(org.bson.BsonBoolean)"], ["org.bson.BsonType", "org.bson.BsonBoolean.getBsonType()"], ["boolean", "org.bson.BsonBoolean.getValue()"], ["boolean", "org.bson.BsonBoolean.equals(java.lang.Object)"], ["int", "org.bson.BsonBoolean.hashCode()"], ["java.lang.String", "org.bson.BsonBoolean.toString()"], ["int", "org.bson.BsonBoolean.compareTo(java.lang.Object)"], ["org.bson.BsonDecimal128", "org.bson.BsonDecimal128(org.bson.types.Decimal128)"], ["org.bson.BsonType", "org.bson.BsonDecimal128.getBsonType()"], ["org.bson.types.Decimal128", "org.bson.BsonDecimal128.getValue()"], ["boolean", "org.bson.BsonDecimal128.equals(java.lang.Object)"], ["int", "org.bson.BsonDecimal128.hashCode()"], ["java.lang.String", "org.bson.BsonDecimal128.toString()"], ["int", "org.bson.BsonDecimal128.intValue()"], ["long", "org.bson.BsonDecimal128.longValue()"], ["double", "org.bson.BsonDecimal128.doubleValue()"], ["org.bson.types.Decimal128", "org.bson.BsonDecimal128.decimal128Value()"], ["org.bson.BsonBinary", "org.bson.BsonBinary(byte[])"], ["org.bson.BsonBinary", "org.bson.BsonBinary(org.bson.BsonBinarySubType, byte[])"], ["org.bson.BsonBinary", "org.bson.BsonBinary(byte, byte[])"], ["org.bson.BsonType", "org.bson.BsonBinary.getBsonType()"], ["byte", "org.bson.BsonBinary.getType()"], ["byte[]", "org.bson.BsonBinary.getData()"], ["boolean", "org.bson.BsonBinary.equals(java.lang.Object)"], ["int", "org.bson.BsonBinary.hashCode()"], ["java.lang.String", "org.bson.BsonBinary.toString()"], ["void", "org.bson.json.ShellMinKeyConverter.convert(org.bson.BsonMinKey, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellMinKeyConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonInt64Converter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonInt64Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonMaxKeyConverter.convert(org.bson.BsonMaxKey, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonMaxKeyConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType[]", "org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType.values()"], ["org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType", "org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType.valueOf(java.lang.String)"], ["void", "org.bson.json.LegacyExtendedJsonBinaryConverter.convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonBinaryConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonReader", "org.bson.json.JsonReader(java.lang.String)"], ["org.bson.BsonType", "org.bson.json.JsonReader.readBsonType()"], ["org.bson.types.Decimal128", "org.bson.json.JsonReader.doReadDecimal128()"], ["void", "org.bson.json.JsonReader.mark()"], ["org.bson.BsonReaderMark", "org.bson.json.JsonReader.getMark()"], ["void", "org.bson.json.JsonReader.reset()"], ["void", "org.bson.json.RelaxedExtendedJsonDoubleConverter.convert(java.lang.Double, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonDoubleConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellDateTimeConverter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellDateTimeConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["int", "org.bson.json.JsonBuffer.getPosition()"], ["void", "org.bson.json.JsonBuffer.setPosition(int)"], ["int", "org.bson.json.JsonBuffer.read()"], ["void", "org.bson.json.JsonBuffer.unread(int)"], ["java.lang.String", "org.bson.json.JsonBuffer.substring(int)"], ["java.lang.String", "org.bson.json.JsonBuffer.substring(int, int)"], ["org.bson.json.JsonWriter$Context", "org.bson.json.JsonWriter$Context(org.bson.json.JsonWriter, org.bson.json.JsonWriter$Context, org.bson.BsonContextType, java.lang.String)"], ["org.bson.json.JsonWriter$Context", "org.bson.json.JsonWriter$Context(org.bson.json.JsonWriter, org.bson.json.JsonWriter$Context, org.bson.BsonContextType)"], ["org.bson.json.JsonWriter$Context", "org.bson.json.JsonWriter$Context.getParentContext()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.json.JsonWriter$Context.getParentContext()"], ["java.lang.Object", "org.bson.json.JsonToken.getValue()"], ["<T> T", "org.bson.json.JsonToken.getValue(java.lang.Class<T>)"], ["org.bson.json.JsonTokenType", "org.bson.json.JsonToken.getType()"], ["org.bson.json.JsonScanner$RegularExpressionState[]", "org.bson.json.JsonScanner$RegularExpressionState.values()"], ["org.bson.json.JsonScanner$RegularExpressionState", "org.bson.json.JsonScanner$RegularExpressionState.valueOf(java.lang.String)"], ["void", "org.bson.json.ExtendedJsonDecimal128Converter.convert(org.bson.types.Decimal128, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDecimal128Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonBinaryConverter.convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonBinaryConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonDoubleConverter.convert(java.lang.Double, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonDoubleConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonReader$Mark.reset()"], ["void", "org.bson.json.JsonNullConverter.convert(org.bson.BsonNull, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonNullConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonStringConverter.convert(java.lang.String, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonStringConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriter$State[]", "org.bson.json.StrictCharacterStreamJsonWriter$State.values()"], ["org.bson.json.StrictCharacterStreamJsonWriter$State", "org.bson.json.StrictCharacterStreamJsonWriter$State.valueOf(java.lang.String)"], ["void", "org.bson.json.ShellInt64Converter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellInt64Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonDateTimeConverter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonDateTimeConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriter", "org.bson.json.StrictCharacterStreamJsonWriter(java.io.Writer, org.bson.json.StrictCharacterStreamJsonWriterSettings)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeStartObject(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeStartArray(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeBoolean(java.lang.String, boolean)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeNumber(java.lang.String, java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeString(java.lang.String, java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeRaw(java.lang.String, java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeNull(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeName(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeBoolean(boolean)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeNumber(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeString(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeRaw(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeNull()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeStartObject()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeStartArray()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeEndObject()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeEndArray()"], ["void", "org.bson.json.JsonSymbolConverter.convert(java.lang.String, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonSymbolConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellDecimal128Converter.convert(org.bson.types.Decimal128, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellDecimal128Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonRegularExpressionConverter.convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonRegularExpressionConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDateTimeConverter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDateTimeConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonUndefinedConverter.convert(org.bson.BsonUndefined, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonUndefinedConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonTokenType[]", "org.bson.json.JsonTokenType.values()"], ["org.bson.json.JsonTokenType", "org.bson.json.JsonTokenType.valueOf(java.lang.String)"], ["java.time.Instant", "org.bson.json.DateTimeFormatter$Java8DateTimeFormatter$1.queryFrom(java.time.temporal.TemporalAccessor)"], ["java.lang.Object", "org.bson.json.DateTimeFormatter$Java8DateTimeFormatter$1.queryFrom(java.time.temporal.TemporalAccessor)"], ["void", "org.bson.json.ShellMaxKeyConverter.convert(org.bson.BsonMaxKey, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellMaxKeyConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.build()"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.indent(boolean)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.newLineCharacters(java.lang.String)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.indentCharacters(java.lang.String)"], ["void", "org.bson.json.ExtendedJsonObjectIdConverter.convert(org.bson.types.ObjectId, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonObjectIdConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonWriter$1.convert(org.bson.BsonDbPointer, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonWriter$1.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["long", "org.bson.json.DateTimeFormatter$Java8DateTimeFormatter.parse(java.lang.String)"], ["java.lang.String", "org.bson.json.DateTimeFormatter$Java8DateTimeFormatter.format(long)"], ["void", "org.bson.json.ExtendedJsonDoubleConverter.convert(java.lang.Double, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDoubleConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonTimestampConverter.convert(org.bson.BsonTimestamp, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonTimestampConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonDateTimeConverter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonDateTimeConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonMinKeyConverter.convert(org.bson.BsonMinKey, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonMinKeyConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonWriter", "org.bson.json.JsonWriter(java.io.Writer)"], ["org.bson.json.JsonWriter", "org.bson.json.JsonWriter(java.io.Writer, org.bson.json.JsonWriterSettings)"], ["java.io.Writer", "org.bson.json.JsonWriter.getWriter()"], ["void", "org.bson.json.JsonWriter.doWriteBoolean(boolean)"], ["void", "org.bson.json.JsonWriter.doWriteNull()"], ["void", "org.bson.json.JsonWriter.doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.json.JsonWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.json.JsonWriter.doWriteString(java.lang.String)"], ["void", "org.bson.json.JsonWriter.doWriteSymbol(java.lang.String)"], ["void", "org.bson.json.JsonWriter.doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.json.JsonWriter.doWriteUndefined()"], ["void", "org.bson.json.JsonWriter.flush()"], ["void", "org.bson.json.ExtendedJsonInt32Converter.convert(java.lang.Integer, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonInt32Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonRegularExpressionConverter.convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonRegularExpressionConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings$Builder.build()"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.indent(boolean)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.newLineCharacters(java.lang.String)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.indentCharacters(java.lang.String)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.outputMode(org.bson.json.JsonMode)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.nullConverter(org.bson.json.Converter<org.bson.BsonNull>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.stringConverter(org.bson.json.Converter<java.lang.String>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.dateTimeConverter(org.bson.json.Converter<java.lang.Long>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.binaryConverter(org.bson.json.Converter<org.bson.BsonBinary>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.booleanConverter(org.bson.json.Converter<java.lang.Boolean>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.doubleConverter(org.bson.json.Converter<java.lang.Double>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.int32Converter(org.bson.json.Converter<java.lang.Integer>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.int64Converter(org.bson.json.Converter<java.lang.Long>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.decimal128Converter(org.bson.json.Converter<org.bson.types.Decimal128>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.objectIdConverter(org.bson.json.Converter<org.bson.types.ObjectId>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.timestampConverter(org.bson.json.Converter<org.bson.BsonTimestamp>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.regularExpressionConverter(org.bson.json.Converter<org.bson.BsonRegularExpression>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.symbolConverter(org.bson.json.Converter<java.lang.String>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.minKeyConverter(org.bson.json.Converter<org.bson.BsonMinKey>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.maxKeyConverter(org.bson.json.Converter<org.bson.BsonMaxKey>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.undefinedConverter(org.bson.json.Converter<org.bson.BsonUndefined>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.javaScriptConverter(org.bson.json.Converter<java.lang.String>)"], ["void", "org.bson.json.RelaxedExtendedJsonInt64Converter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonInt64Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellObjectIdConverter.convert(org.bson.types.ObjectId, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellObjectIdConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings.builder()"], ["boolean", "org.bson.json.StrictCharacterStreamJsonWriterSettings.isIndent()"], ["java.lang.String", "org.bson.json.StrictCharacterStreamJsonWriterSettings.getNewLineCharacters()"], ["java.lang.String", "org.bson.json.StrictCharacterStreamJsonWriterSettings.getIndentCharacters()"], ["void", "org.bson.json.ShellTimestampConverter.convert(org.bson.BsonTimestamp, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellTimestampConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonMode[]", "org.bson.json.JsonMode.values()"], ["org.bson.json.JsonMode", "org.bson.json.JsonMode.valueOf(java.lang.String)"], ["void", "org.bson.json.JsonBooleanConverter.convert(java.lang.Boolean, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonBooleanConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException()"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.String)"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.String, java.lang.Object...)"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.Throwable)"], ["void", "org.bson.json.ShellUndefinedConverter.convert(org.bson.BsonUndefined, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellUndefinedConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonJavaScriptConverter.convert(java.lang.String, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonJavaScriptConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["long", "org.bson.json.DateTimeFormatter$JaxbDateTimeFormatter.parse(java.lang.String)"], ["java.lang.String", "org.bson.json.DateTimeFormatter$JaxbDateTimeFormatter.format(long)"], ["void", "org.bson.json.ShellRegularExpressionConverter.convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellRegularExpressionConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonWriter$2.convert(org.bson.BsonDbPointer, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonWriter$2.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings.builder()"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings()"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(boolean)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, boolean)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String, java.lang.String)"], ["boolean", "org.bson.json.JsonWriterSettings.isIndent()"], ["java.lang.String", "org.bson.json.JsonWriterSettings.getNewLineCharacters()"], ["java.lang.String", "org.bson.json.JsonWriterSettings.getIndentCharacters()"], ["org.bson.json.JsonMode", "org.bson.json.JsonWriterSettings.getOutputMode()"], ["org.bson.json.JsonScanner$NumberState[]", "org.bson.json.JsonScanner$NumberState.values()"], ["org.bson.json.JsonScanner$NumberState", "org.bson.json.JsonScanner$NumberState.valueOf(java.lang.String)"], ["void", "org.bson.json.ShellBinaryConverter.convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellBinaryConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonInt32Converter.convert(java.lang.Integer, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonInt32Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonScanner.setBufferPosition(int)"], ["int", "org.bson.json.JsonScanner.getBufferPosition()"], ["org.bson.json.JsonToken", "org.bson.json.JsonScanner.nextToken()"], ["org.bson.EmptyBSONCallback", "org.bson.EmptyBSONCallback()"], ["void", "org.bson.EmptyBSONCallback.objectStart()"], ["void", "org.bson.EmptyBSONCallback.objectStart(java.lang.String)"], ["java.lang.Object", "org.bson.EmptyBSONCallback.objectDone()"], ["void", "org.bson.EmptyBSONCallback.reset()"], ["java.lang.Object", "org.bson.EmptyBSONCallback.get()"], ["org.bson.BSONCallback", "org.bson.EmptyBSONCallback.createBSONCallback()"], ["void", "org.bson.EmptyBSONCallback.arrayStart()"], ["void", "org.bson.EmptyBSONCallback.arrayStart(java.lang.String)"], ["java.lang.Object", "org.bson.EmptyBSONCallback.arrayDone()"], ["void", "org.bson.EmptyBSONCallback.gotNull(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotUndefined(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotMinKey(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotMaxKey(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotBoolean(java.lang.String, boolean)"], ["void", "org.bson.EmptyBSONCallback.gotDouble(java.lang.String, double)"], ["void", "org.bson.EmptyBSONCallback.gotInt(java.lang.String, int)"], ["void", "org.bson.EmptyBSONCallback.gotLong(java.lang.String, long)"], ["void", "org.bson.EmptyBSONCallback.gotDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "org.bson.EmptyBSONCallback.gotDate(java.lang.String, long)"], ["void", "org.bson.EmptyBSONCallback.gotString(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotRegex(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotTimestamp(java.lang.String, int, int)"], ["void", "org.bson.EmptyBSONCallback.gotObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.EmptyBSONCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.EmptyBSONCallback.gotBinaryArray(java.lang.String, byte[])"], ["void", "org.bson.EmptyBSONCallback.gotBinary(java.lang.String, byte, byte[])"], ["void", "org.bson.EmptyBSONCallback.gotUUID(java.lang.String, long, long)"], ["void", "org.bson.EmptyBSONCallback.gotCode(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)"], ["org.bson.BsonString", "org.bson.BsonString(java.lang.String)"], ["int", "org.bson.BsonString.compareTo(org.bson.BsonString)"], ["org.bson.BsonType", "org.bson.BsonString.getBsonType()"], ["java.lang.String", "org.bson.BsonString.getValue()"], ["boolean", "org.bson.BsonString.equals(java.lang.Object)"], ["int", "org.bson.BsonString.hashCode()"], ["java.lang.String", "org.bson.BsonString.toString()"], ["int", "org.bson.BsonString.compareTo(java.lang.Object)"], ["org.bson.BsonDocumentWriter", "org.bson.BsonDocumentWriter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "org.bson.BsonDocumentWriter.getDocument()"], ["void", "org.bson.BsonDocumentWriter.doWriteBoolean(boolean)"], ["void", "org.bson.BsonDocumentWriter.doWriteNull()"], ["void", "org.bson.BsonDocumentWriter.doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BsonDocumentWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BsonDocumentWriter.doWriteString(java.lang.String)"], ["void", "org.bson.BsonDocumentWriter.doWriteSymbol(java.lang.String)"], ["void", "org.bson.BsonDocumentWriter.doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BsonDocumentWriter.doWriteUndefined()"], ["void", "org.bson.BsonDocumentWriter.flush()"], ["org.bson.BsonContextType[]", "org.bson.BsonContextType.values()"], ["org.bson.BsonContextType", "org.bson.BsonContextType.valueOf(java.lang.String)"], ["org.bson.BsonType", "org.bson.AbstractBsonReader.getCurrentBsonType()"], ["java.lang.String", "org.bson.AbstractBsonReader.getCurrentName()"], ["org.bson.AbstractBsonReader$State", "org.bson.AbstractBsonReader.getState()"], ["void", "org.bson.AbstractBsonReader.close()"], ["org.bson.BsonBinary", "org.bson.AbstractBsonReader.readBinaryData()"], ["byte", "org.bson.AbstractBsonReader.peekBinarySubType()"], ["int", "org.bson.AbstractBsonReader.peekBinarySize()"], ["boolean", "org.bson.AbstractBsonReader.readBoolean()"], ["long", "org.bson.AbstractBsonReader.readDateTime()"], ["double", "org.bson.AbstractBsonReader.readDouble()"], ["void", "org.bson.AbstractBsonReader.readEndArray()"], ["void", "org.bson.AbstractBsonReader.readEndDocument()"], ["int", "org.bson.AbstractBsonReader.readInt32()"], ["long", "org.bson.AbstractBsonReader.readInt64()"], ["org.bson.types.Decimal128", "org.bson.AbstractBsonReader.readDecimal128()"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScript()"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScriptWithScope()"], ["void", "org.bson.AbstractBsonReader.readMaxKey()"], ["void", "org.bson.AbstractBsonReader.readMinKey()"], ["void", "org.bson.AbstractBsonReader.readNull()"], ["org.bson.types.ObjectId", "org.bson.AbstractBsonReader.readObjectId()"], ["org.bson.BsonRegularExpression", "org.bson.AbstractBsonReader.readRegularExpression()"], ["org.bson.BsonDbPointer", "org.bson.AbstractBsonReader.readDBPointer()"], ["void", "org.bson.AbstractBsonReader.readStartArray()"], ["void", "org.bson.AbstractBsonReader.readStartDocument()"], ["java.lang.String", "org.bson.AbstractBsonReader.readString()"], ["java.lang.String", "org.bson.AbstractBsonReader.readSymbol()"], ["org.bson.BsonTimestamp", "org.bson.AbstractBsonReader.readTimestamp()"], ["void", "org.bson.AbstractBsonReader.readUndefined()"], ["void", "org.bson.AbstractBsonReader.skipName()"], ["void", "org.bson.AbstractBsonReader.skipValue()"], ["org.bson.BsonBinary", "org.bson.AbstractBsonReader.readBinaryData(java.lang.String)"], ["boolean", "org.bson.AbstractBsonReader.readBoolean(java.lang.String)"], ["long", "org.bson.AbstractBsonReader.readDateTime(java.lang.String)"], ["double", "org.bson.AbstractBsonReader.readDouble(java.lang.String)"], ["int", "org.bson.AbstractBsonReader.readInt32(java.lang.String)"], ["long", "org.bson.AbstractBsonReader.readInt64(java.lang.String)"], ["org.bson.types.Decimal128", "org.bson.AbstractBsonReader.readDecimal128(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScript(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScriptWithScope(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readMaxKey(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readMinKey(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readName()"], ["void", "org.bson.AbstractBsonReader.readName(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readNull(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.AbstractBsonReader.readObjectId(java.lang.String)"], ["org.bson.BsonRegularExpression", "org.bson.AbstractBsonReader.readRegularExpression(java.lang.String)"], ["org.bson.BsonDbPointer", "org.bson.AbstractBsonReader.readDBPointer(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readString(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readSymbol(java.lang.String)"], ["org.bson.BsonTimestamp", "org.bson.AbstractBsonReader.readTimestamp(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readUndefined(java.lang.String)"], ["org.bson.BsonObjectId", "org.bson.BsonObjectId()"], ["org.bson.BsonObjectId", "org.bson.BsonObjectId(org.bson.types.ObjectId)"], ["org.bson.types.ObjectId", "org.bson.BsonObjectId.getValue()"], ["org.bson.BsonType", "org.bson.BsonObjectId.getBsonType()"], ["int", "org.bson.BsonObjectId.compareTo(org.bson.BsonObjectId)"], ["boolean", "org.bson.BsonObjectId.equals(java.lang.Object)"], ["int", "org.bson.BsonObjectId.hashCode()"], ["java.lang.String", "org.bson.BsonObjectId.toString()"], ["int", "org.bson.BsonObjectId.compareTo(java.lang.Object)"], ["org.bson.BsonWriterSettings", "org.bson.BsonWriterSettings(int)"], ["org.bson.BsonWriterSettings", "org.bson.BsonWriterSettings()"], ["int", "org.bson.BsonWriterSettings.getMaxSerializationDepth()"], ["org.bson.BsonDocument", "org.bson.BsonValue.asDocument()"], ["org.bson.BsonArray", "org.bson.BsonValue.asArray()"], ["org.bson.BsonString", "org.bson.BsonValue.asString()"], ["org.bson.BsonNumber", "org.bson.BsonValue.asNumber()"], ["org.bson.BsonInt32", "org.bson.BsonValue.asInt32()"], ["org.bson.BsonInt64", "org.bson.BsonValue.asInt64()"], ["org.bson.BsonDecimal128", "org.bson.BsonValue.asDecimal128()"], ["org.bson.BsonDouble", "org.bson.BsonValue.asDouble()"], ["org.bson.BsonBoolean", "org.bson.BsonValue.asBoolean()"], ["org.bson.BsonObjectId", "org.bson.BsonValue.asObjectId()"], ["org.bson.BsonDbPointer", "org.bson.BsonValue.asDBPointer()"], ["org.bson.BsonTimestamp", "org.bson.BsonValue.asTimestamp()"], ["org.bson.BsonBinary", "org.bson.BsonValue.asBinary()"], ["org.bson.BsonDateTime", "org.bson.BsonValue.asDateTime()"], ["org.bson.BsonSymbol", "org.bson.BsonValue.asSymbol()"], ["org.bson.BsonRegularExpression", "org.bson.BsonValue.asRegularExpression()"], ["org.bson.BsonJavaScript", "org.bson.BsonValue.asJavaScript()"], ["org.bson.BsonJavaScriptWithScope", "org.bson.BsonValue.asJavaScriptWithScope()"], ["boolean", "org.bson.BsonValue.isNull()"], ["boolean", "org.bson.BsonValue.isDocument()"], ["boolean", "org.bson.BsonValue.isArray()"], ["boolean", "org.bson.BsonValue.isString()"], ["boolean", "org.bson.BsonValue.isNumber()"], ["boolean", "org.bson.BsonValue.isInt32()"], ["boolean", "org.bson.BsonValue.isInt64()"], ["boolean", "org.bson.BsonValue.isDecimal128()"], ["boolean", "org.bson.BsonValue.isDouble()"], ["boolean", "org.bson.BsonValue.isBoolean()"], ["boolean", "org.bson.BsonValue.isObjectId()"], ["boolean", "org.bson.BsonValue.isDBPointer()"], ["boolean", "org.bson.BsonValue.isTimestamp()"], ["boolean", "org.bson.BsonValue.isBinary()"], ["boolean", "org.bson.BsonValue.isDateTime()"], ["boolean", "org.bson.BsonValue.isSymbol()"], ["boolean", "org.bson.BsonValue.isRegularExpression()"], ["boolean", "org.bson.BsonValue.isJavaScript()"], ["boolean", "org.bson.BsonValue.isJavaScriptWithScope()"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.io.BsonOutput, org.bson.FieldNameValidator)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.io.BsonOutput)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput, org.bson.FieldNameValidator)"], ["void", "org.bson.BsonBinaryWriter.close()"], ["org.bson.io.BsonOutput", "org.bson.BsonBinaryWriter.getBsonOutput()"], ["org.bson.BsonBinaryWriterSettings", "org.bson.BsonBinaryWriter.getBinaryWriterSettings()"], ["void", "org.bson.BsonBinaryWriter.flush()"], ["void", "org.bson.BsonBinaryWriter.doWriteBoolean(boolean)"], ["void", "org.bson.BsonBinaryWriter.doWriteNull()"], ["void", "org.bson.BsonBinaryWriter.doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BsonBinaryWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BsonBinaryWriter.doWriteString(java.lang.String)"], ["void", "org.bson.BsonBinaryWriter.doWriteSymbol(java.lang.String)"], ["void", "org.bson.BsonBinaryWriter.doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BsonBinaryWriter.doWriteUndefined()"], ["void", "org.bson.BsonBinaryWriter.pipe(org.bson.BsonReader)"], ["void", "org.bson.BsonBinaryWriter.pipe(org.bson.BsonReader, java.util.List<org.bson.BsonElement>)"], ["void", "org.bson.BsonBinaryWriter.pushMaxDocumentSize(int)"], ["void", "org.bson.BsonBinaryWriter.popMaxDocumentSize()"], ["void", "org.bson.BsonBinaryWriter.mark()"], ["void", "org.bson.BsonBinaryWriter.reset()"], ["org.bson.diagnostics.Logger", "org.bson.diagnostics.Loggers.getLogger(java.lang.String)"], ["java.lang.String", "org.bson.diagnostics.JULLogger.getName()"], ["boolean", "org.bson.diagnostics.JULLogger.isTraceEnabled()"], ["void", "org.bson.diagnostics.JULLogger.trace(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.trace(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.JULLogger.isDebugEnabled()"], ["void", "org.bson.diagnostics.JULLogger.debug(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.debug(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.JULLogger.isInfoEnabled()"], ["void", "org.bson.diagnostics.JULLogger.info(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.info(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.JULLogger.isWarnEnabled()"], ["void", "org.bson.diagnostics.JULLogger.warn(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.warn(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.JULLogger.isErrorEnabled()"], ["void", "org.bson.diagnostics.JULLogger.error(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.error(java.lang.String, java.lang.Throwable)"], ["void", "org.bson.diagnostics.JULLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.bson.diagnostics.SLF4JLogger.getName()"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isTraceEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.trace(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.trace(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isDebugEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.debug(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.debug(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isInfoEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.info(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.info(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isWarnEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.warn(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.warn(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isErrorEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.error(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.error(java.lang.String, java.lang.Throwable)"], ["org.bson.AbstractBsonReader$State[]", "org.bson.AbstractBsonReader$State.values()"], ["org.bson.AbstractBsonReader$State", "org.bson.AbstractBsonReader$State.valueOf(java.lang.String)"], ["org.bson.BsonNull", "org.bson.BsonNull()"], ["org.bson.BsonType", "org.bson.BsonNull.getBsonType()"], ["boolean", "org.bson.BsonNull.equals(java.lang.Object)"], ["int", "org.bson.BsonNull.hashCode()"], ["java.lang.String", "org.bson.BsonNull.toString()"], ["org.bson.BsonInvalidOperationException", "org.bson.BsonInvalidOperationException(java.lang.String)"], ["org.bson.BsonInvalidOperationException", "org.bson.BsonInvalidOperationException(java.lang.String, java.lang.Throwable)"], ["org.bson.Document", "org.bson.Document()"], ["org.bson.Document", "org.bson.Document(java.lang.String, java.lang.Object)"], ["org.bson.Document", "org.bson.Document(java.util.Map<java.lang.String, java.lang.Object>)"], ["org.bson.Document", "org.bson.Document.parse(java.lang.String)"], ["org.bson.Document", "org.bson.Document.parse(java.lang.String, org.bson.codecs.Decoder<org.bson.Document>)"], ["<C> org.bson.BsonDocument", "org.bson.Document.toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.Document", "org.bson.Document.append(java.lang.String, java.lang.Object)"], ["<T> T", "org.bson.Document.get(java.lang.Object, java.lang.Class<T>)"], ["<T> T", "org.bson.Document.get(java.lang.Object, T)"], ["java.lang.Integer", "org.bson.Document.getInteger(java.lang.Object)"], ["int", "org.bson.Document.getInteger(java.lang.Object, int)"], ["java.lang.Long", "org.bson.Document.getLong(java.lang.Object)"], ["java.lang.Double", "org.bson.Document.getDouble(java.lang.Object)"], ["java.lang.String", "org.bson.Document.getString(java.lang.Object)"], ["java.lang.Boolean", "org.bson.Document.getBoolean(java.lang.Object)"], ["boolean", "org.bson.Document.getBoolean(java.lang.Object, boolean)"], ["org.bson.types.ObjectId", "org.bson.Document.getObjectId(java.lang.Object)"], ["java.util.Date", "org.bson.Document.getDate(java.lang.Object)"], ["java.lang.String", "org.bson.Document.toJson()"], ["java.lang.String", "org.bson.Document.toJson(org.bson.json.JsonWriterSettings)"], ["java.lang.String", "org.bson.Document.toJson(org.bson.codecs.Encoder<org.bson.Document>)"], ["java.lang.String", "org.bson.Document.toJson(org.bson.json.JsonWriterSettings, org.bson.codecs.Encoder<org.bson.Document>)"], ["int", "org.bson.Document.size()"], ["boolean", "org.bson.Document.isEmpty()"], ["boolean", "org.bson.Document.containsValue(java.lang.Object)"], ["boolean", "org.bson.Document.containsKey(java.lang.Object)"], ["java.lang.Object", "org.bson.Document.get(java.lang.Object)"], ["java.lang.Object", "org.bson.Document.put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.bson.Document.remove(java.lang.Object)"], ["void", "org.bson.Document.putAll(java.util.Map<? extends java.lang.String, ?>)"], ["void", "org.bson.Document.clear()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.bson.Document.entrySet()"], ["boolean", "org.bson.Document.equals(java.lang.Object)"], ["int", "org.bson.Document.hashCode()"], ["java.lang.String", "org.bson.Document.toString()"], ["java.lang.Object", "org.bson.Document.put(java.lang.Object, java.lang.Object)"], ["void", "org.bson.BsonDocumentReader$Mark.reset()"], ["int", "org.bson.LazyBSONObject$1.size()"], ["boolean", "org.bson.LazyBSONObject$1.isEmpty()"], ["java.util.Iterator<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.bson.LazyBSONObject$1.iterator()"], ["java.lang.Object[]", "org.bson.LazyBSONObject$1.toArray()"], ["<T> T[]", "org.bson.LazyBSONObject$1.toArray(T[])"], ["boolean", "org.bson.LazyBSONObject$1.contains(java.lang.Object)"], ["boolean", "org.bson.LazyBSONObject$1.containsAll(java.util.Collection<?>)"], ["boolean", "org.bson.LazyBSONObject$1.add(java.util.Map$Entry<java.lang.String, java.lang.Object>)"], ["boolean", "org.bson.LazyBSONObject$1.remove(java.lang.Object)"], ["boolean", "org.bson.LazyBSONObject$1.addAll(java.util.Collection<? extends java.util.Map$Entry<java.lang.String, java.lang.Object>>)"], ["boolean", "org.bson.LazyBSONObject$1.retainAll(java.util.Collection<?>)"], ["boolean", "org.bson.LazyBSONObject$1.removeAll(java.util.Collection<?>)"], ["void", "org.bson.LazyBSONObject$1.clear()"], ["boolean", "org.bson.LazyBSONObject$1.add(java.lang.Object)"], ["org.bson.BSON", "org.bson.BSON()"], ["boolean", "org.bson.BSON.hasEncodeHooks()"], ["boolean", "org.bson.BSON.hasDecodeHooks()"], ["void", "org.bson.BSON.addEncodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["void", "org.bson.BSON.addDecodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["java.lang.Object", "org.bson.BSON.applyEncodingHooks(java.lang.Object)"], ["java.lang.Object", "org.bson.BSON.applyDecodingHooks(java.lang.Object)"], ["void", "org.bson.BSON.clearEncodingHooks()"], ["void", "org.bson.BSON.removeEncodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.removeEncodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["void", "org.bson.BSON.clearDecodingHooks()"], ["void", "org.bson.BSON.removeDecodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.removeDecodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["void", "org.bson.BSON.clearAllHooks()"], ["byte[]", "org.bson.BSON.encode(org.bson.BSONObject)"], ["org.bson.BSONObject", "org.bson.BSON.decode(byte[])"], ["int", "org.bson.BSON.regexFlags(java.lang.String)"], ["int", "org.bson.BSON.regexFlag(char)"], ["java.lang.String", "org.bson.BSON.regexFlags(int)"], ["int", "org.bson.BSON.toInt(java.lang.Object)"], ["org.bson.BsonInt64", "org.bson.BsonInt64(long)"], ["int", "org.bson.BsonInt64.compareTo(org.bson.BsonInt64)"], ["org.bson.BsonType", "org.bson.BsonInt64.getBsonType()"], ["long", "org.bson.BsonInt64.getValue()"], ["int", "org.bson.BsonInt64.intValue()"], ["long", "org.bson.BsonInt64.longValue()"], ["double", "org.bson.BsonInt64.doubleValue()"], ["org.bson.types.Decimal128", "org.bson.BsonInt64.decimal128Value()"], ["boolean", "org.bson.BsonInt64.equals(java.lang.Object)"], ["int", "org.bson.BsonInt64.hashCode()"], ["java.lang.String", "org.bson.BsonInt64.toString()"], ["int", "org.bson.BsonInt64.compareTo(java.lang.Object)"], ["org.bson.BsonSymbol", "org.bson.BsonSymbol(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonSymbol.getBsonType()"], ["java.lang.String", "org.bson.BsonSymbol.getSymbol()"], ["boolean", "org.bson.BsonSymbol.equals(java.lang.Object)"], ["int", "org.bson.BsonSymbol.hashCode()"], ["java.lang.String", "org.bson.BsonSymbol.toString()"], ["org.bson.BsonBinarySubType[]", "org.bson.BsonBinarySubType.values()"], ["org.bson.BsonBinarySubType", "org.bson.BsonBinarySubType.valueOf(java.lang.String)"], ["boolean", "org.bson.BsonBinarySubType.isUuid(byte)"], ["byte", "org.bson.BsonBinarySubType.getValue()"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject()"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(int)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(java.lang.String, java.lang.Object)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(java.util.Map)"], ["java.util.Map", "org.bson.BasicBSONObject.toMap()"], ["java.lang.Object", "org.bson.BasicBSONObject.removeField(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.containsField(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.containsKey(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONObject.get(java.lang.String)"], ["int", "org.bson.BasicBSONObject.getInt(java.lang.String)"], ["int", "org.bson.BasicBSONObject.getInt(java.lang.String, int)"], ["long", "org.bson.BasicBSONObject.getLong(java.lang.String)"], ["long", "org.bson.BasicBSONObject.getLong(java.lang.String, long)"], ["double", "org.bson.BasicBSONObject.getDouble(java.lang.String)"], ["double", "org.bson.BasicBSONObject.getDouble(java.lang.String, double)"], ["java.lang.String", "org.bson.BasicBSONObject.getString(java.lang.String)"], ["java.lang.String", "org.bson.BasicBSONObject.getString(java.lang.String, java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.getBoolean(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.getBoolean(java.lang.String, boolean)"], ["org.bson.types.ObjectId", "org.bson.BasicBSONObject.getObjectId(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.BasicBSONObject.getObjectId(java.lang.String, org.bson.types.ObjectId)"], ["java.util.Date", "org.bson.BasicBSONObject.getDate(java.lang.String)"], ["java.util.Date", "org.bson.BasicBSONObject.getDate(java.lang.String, java.util.Date)"], ["void", "org.bson.BasicBSONObject.putAll(java.util.Map)"], ["void", "org.bson.BasicBSONObject.putAll(org.bson.BSONObject)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject.append(java.lang.String, java.lang.Object)"], ["java.lang.String", "org.bson.BasicBSONObject.toString()"], ["boolean", "org.bson.BasicBSONObject.equals(java.lang.Object)"], ["int", "org.bson.BasicBSONObject.hashCode()"], ["java.lang.Object", "org.bson.BasicBSONObject.put(java.lang.String, java.lang.Object)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context, org.bson.BsonContextType)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context.getParentContext()"], ["org.bson.BsonContextType", "org.bson.AbstractBsonWriter$Context.getContextType()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context.copy()"], ["org.bson.BSONException", "org.bson.BSONException(java.lang.String)"], ["org.bson.BSONException", "org.bson.BSONException(int, java.lang.String)"], ["org.bson.BSONException", "org.bson.BSONException(java.lang.String, java.lang.Throwable)"], ["org.bson.BSONException", "org.bson.BSONException(int, java.lang.String, java.lang.Throwable)"], ["java.lang.Integer", "org.bson.BSONException.getErrorCode()"], ["boolean", "org.bson.BSONException.hasErrorCode()"], ["org.bson.BsonDocument", "org.bson.BsonDocumentWrapper.asBsonDocument(java.lang.Object, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonDocumentWrapper", "org.bson.BsonDocumentWrapper(T, org.bson.codecs.Encoder<T>)"], ["T", "org.bson.BsonDocumentWrapper.getWrappedDocument()"], ["boolean", "org.bson.BsonDocumentWrapper.isUnwrapped()"], ["int", "org.bson.BsonDocumentWrapper.size()"], ["boolean", "org.bson.BsonDocumentWrapper.isEmpty()"], ["boolean", "org.bson.BsonDocumentWrapper.containsKey(java.lang.Object)"], ["boolean", "org.bson.BsonDocumentWrapper.containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.get(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.remove(java.lang.Object)"], ["void", "org.bson.BsonDocumentWrapper.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["void", "org.bson.BsonDocumentWrapper.clear()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.BsonDocumentWrapper.entrySet()"], ["boolean", "org.bson.BsonDocumentWrapper.equals(java.lang.Object)"], ["int", "org.bson.BsonDocumentWrapper.hashCode()"], ["java.lang.String", "org.bson.BsonDocumentWrapper.toString()"], ["org.bson.BsonDocument", "org.bson.BsonDocumentWrapper.clone()"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.remove(java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.get(java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.clone()"], ["org.bson.AbstractBsonWriter$State[]", "org.bson.AbstractBsonWriter$State.values()"], ["org.bson.AbstractBsonWriter$State", "org.bson.AbstractBsonWriter$State.valueOf(java.lang.String)"], ["org.bson.RawBsonDocument", "org.bson.RawBsonDocument.parse(java.lang.String)"], ["org.bson.RawBsonDocument", "org.bson.RawBsonDocument(byte[])"], ["org.bson.RawBsonDocument", "org.bson.RawBsonDocument(byte[], int, int)"], ["org.bson.ByteBuf", "org.bson.RawBsonDocument.getByteBuffer()"], ["<T> T", "org.bson.RawBsonDocument.decode(org.bson.codecs.Codec<T>)"], ["<T> T", "org.bson.RawBsonDocument.decode(org.bson.codecs.Decoder<T>)"], ["void", "org.bson.RawBsonDocument.clear()"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.RawBsonDocument.append(java.lang.String, org.bson.BsonValue)"], ["void", "org.bson.RawBsonDocument.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.remove(java.lang.Object)"], ["boolean", "org.bson.RawBsonDocument.isEmpty()"], ["int", "org.bson.RawBsonDocument.size()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.RawBsonDocument.entrySet()"], ["java.lang.String", "org.bson.RawBsonDocument.getFirstKey()"], ["boolean", "org.bson.RawBsonDocument.containsKey(java.lang.Object)"], ["boolean", "org.bson.RawBsonDocument.containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.get(java.lang.Object)"], ["java.lang.String", "org.bson.RawBsonDocument.toJson()"], ["java.lang.String", "org.bson.RawBsonDocument.toJson(org.bson.json.JsonWriterSettings)"], ["boolean", "org.bson.RawBsonDocument.equals(java.lang.Object)"], ["int", "org.bson.RawBsonDocument.hashCode()"], ["org.bson.BsonDocument", "org.bson.RawBsonDocument.clone()"], ["java.lang.Object", "org.bson.RawBsonDocument.remove(java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonDocument.put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonDocument.get(java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonDocument.clone()"], ["org.bson.BSONCallbackAdapter$Context", "org.bson.BSONCallbackAdapter$Context.getParentContext()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BSONCallbackAdapter$Context.getParentContext()"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context, org.bson.BsonContextType, int)"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context)"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context.getParentContext()"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context.copy()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BsonBinaryWriter$Context.copy()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BsonBinaryWriter$Context.getParentContext()"], ["void", "org.bson.BsonBinaryReader$Mark.reset()"], ["org.bson.BsonDouble", "org.bson.BsonDouble(double)"], ["int", "org.bson.BsonDouble.compareTo(org.bson.BsonDouble)"], ["org.bson.BsonType", "org.bson.BsonDouble.getBsonType()"], ["double", "org.bson.BsonDouble.getValue()"], ["int", "org.bson.BsonDouble.intValue()"], ["long", "org.bson.BsonDouble.longValue()"], ["org.bson.types.Decimal128", "org.bson.BsonDouble.decimal128Value()"], ["double", "org.bson.BsonDouble.doubleValue()"], ["boolean", "org.bson.BsonDouble.equals(java.lang.Object)"], ["int", "org.bson.BsonDouble.hashCode()"], ["java.lang.String", "org.bson.BsonDouble.toString()"], ["int", "org.bson.BsonDouble.compareTo(java.lang.Object)"], ["java.lang.String", "com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.getName()"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern$Majority()"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern$Majority(int, boolean, boolean)"], ["long", "com.mongodb.MongoCursorAdapter.getCursorId()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoCursorAdapter.getServerAddress()"], ["void", "com.mongodb.MongoCursorAdapter.close()"], ["boolean", "com.mongodb.MongoCursorAdapter.hasNext()"], ["com.mongodb.DBObject", "com.mongodb.MongoCursorAdapter.next()"], ["void", "com.mongodb.MongoCursorAdapter.remove()"], ["java.lang.Object", "com.mongodb.MongoCursorAdapter.next()"], ["com.mongodb.MongoInterruptedException", "com.mongodb.MongoInterruptedException(java.lang.String, java.lang.Exception)"], ["com.mongodb.BulkWriteError", "com.mongodb.BulkWriteError(int, java.lang.String, com.mongodb.DBObject, int)"], ["int", "com.mongodb.BulkWriteError.getCode()"], ["java.lang.String", "com.mongodb.BulkWriteError.getMessage()"], ["com.mongodb.DBObject", "com.mongodb.BulkWriteError.getDetails()"], ["int", "com.mongodb.BulkWriteError.getIndex()"], ["boolean", "com.mongodb.BulkWriteError.equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteError.hashCode()"], ["java.lang.String", "com.mongodb.BulkWriteError.toString()"], ["com.mongodb.MapReduceCommand", "com.mongodb.MapReduceCommand(com.mongodb.DBCollection, java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)"], ["void", "com.mongodb.MapReduceCommand.setVerbose(java.lang.Boolean)"], ["java.lang.Boolean", "com.mongodb.MapReduceCommand.isVerbose()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getInput()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getMap()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getReduce()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getOutputTarget()"], ["com.mongodb.MapReduceCommand$OutputType", "com.mongodb.MapReduceCommand.getOutputType()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getFinalize()"], ["void", "com.mongodb.MapReduceCommand.setFinalize(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.getQuery()"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.getSort()"], ["void", "com.mongodb.MapReduceCommand.setSort(com.mongodb.DBObject)"], ["int", "com.mongodb.MapReduceCommand.getLimit()"], ["void", "com.mongodb.MapReduceCommand.setLimit(int)"], ["long", "com.mongodb.MapReduceCommand.getMaxTime(java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.MapReduceCommand.setMaxTime(long, java.util.concurrent.TimeUnit)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.mongodb.MapReduceCommand.getScope()"], ["void", "com.mongodb.MapReduceCommand.setScope(java.util.Map<java.lang.String, java.lang.Object>)"], ["java.lang.Boolean", "com.mongodb.MapReduceCommand.getJsMode()"], ["void", "com.mongodb.MapReduceCommand.setJsMode(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.MapReduceCommand.getOutputDB()"], ["void", "com.mongodb.MapReduceCommand.setOutputDB(java.lang.String)"], ["java.lang.Boolean", "com.mongodb.MapReduceCommand.getBypassDocumentValidation()"], ["void", "com.mongodb.MapReduceCommand.setBypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.toDBObject()"], ["void", "com.mongodb.MapReduceCommand.setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.MapReduceCommand.getReadPreference()"], ["com.mongodb.client.model.Collation", "com.mongodb.MapReduceCommand.getCollation()"], ["void", "com.mongodb.MapReduceCommand.setCollation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.MapReduceCommand.toString()"], ["com.mongodb.ReadConcern", "com.mongodb.ReadConcern(com.mongodb.ReadConcernLevel)"], ["com.mongodb.ReadConcernLevel", "com.mongodb.ReadConcern.getLevel()"], ["boolean", "com.mongodb.ReadConcern.isServerDefault()"], ["org.bson.BsonDocument", "com.mongodb.ReadConcern.asDocument()"], ["boolean", "com.mongodb.ReadConcern.equals(java.lang.Object)"], ["int", "com.mongodb.ReadConcern.hashCode()"], ["com.mongodb.DefaultDBCallback", "com.mongodb.DefaultDBCallback(com.mongodb.DBCollection)"], ["org.bson.BSONObject", "com.mongodb.DefaultDBCallback.create()"], ["org.bson.BSONObject", "com.mongodb.DefaultDBCallback.create(boolean, java.util.List<java.lang.String>)"], ["void", "com.mongodb.DefaultDBCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["java.lang.Object", "com.mongodb.DefaultDBCallback.objectDone()"], ["void", "com.mongodb.operation.CommandOperationHelper$TransformingResultCallback.onResult(T, java.lang.Throwable)"], ["com.mongodb.operation.FsyncUnlockOperation", "com.mongodb.operation.FsyncUnlockOperation()"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation.execute(com.mongodb.binding.WriteBinding)"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation.execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.operation.FsyncUnlockOperation.execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Object", "com.mongodb.operation.FsyncUnlockOperation.execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation(com.mongodb.MongoNamespace)"], ["org.bson.BsonDocument", "com.mongodb.operation.CountOperation.getFilter()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.filter(org.bson.BsonDocument)"], ["org.bson.BsonValue", "com.mongodb.operation.CountOperation.getHint()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.hint(org.bson.BsonValue)"], ["long", "com.mongodb.operation.CountOperation.getLimit()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.limit(long)"], ["long", "com.mongodb.operation.CountOperation.getSkip()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.skip(long)"], ["long", "com.mongodb.operation.CountOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadConcern", "com.mongodb.operation.CountOperation.getReadConcern()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.CountOperation.getCollation()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.collation(com.mongodb.client.model.Collation)"], ["java.lang.Long", "com.mongodb.operation.CountOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.CountOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Long>)"], ["java.lang.Object", "com.mongodb.operation.CountOperation.execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.ListCollectionsOperation", "com.mongodb.operation.ListCollectionsOperation(java.lang.String, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.ListCollectionsOperation.getFilter()"], ["java.lang.Integer", "com.mongodb.operation.ListCollectionsOperation.getBatchSize()"], ["long", "com.mongodb.operation.ListCollectionsOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.operation.ListCollectionsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.MapReduceToCollectionOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AggregateExplainOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["boolean", "com.mongodb.operation.QueryBatchCursor.hasNext()"], ["void", "com.mongodb.operation.QueryBatchCursor.setBatchSize(int)"], ["int", "com.mongodb.operation.QueryBatchCursor.getBatchSize()"], ["void", "com.mongodb.operation.QueryBatchCursor.remove()"], ["void", "com.mongodb.operation.QueryBatchCursor.close()"], ["com.mongodb.ServerCursor", "com.mongodb.operation.QueryBatchCursor.getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.operation.QueryBatchCursor.getServerAddress()"], ["java.lang.Object", "com.mongodb.operation.QueryBatchCursor.next()"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$4.onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$4.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.CreateIndexesOperation", "com.mongodb.operation.CreateIndexesOperation(com.mongodb.MongoNamespace, java.util.List<com.mongodb.bulk.IndexRequest>)"], ["com.mongodb.operation.CreateIndexesOperation", "com.mongodb.operation.CreateIndexesOperation(com.mongodb.MongoNamespace, java.util.List<com.mongodb.bulk.IndexRequest>, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.CreateIndexesOperation.getWriteConcern()"], ["long", "com.mongodb.operation.CreateIndexesOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.CreateIndexesOperation", "com.mongodb.operation.CreateIndexesOperation.maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Void", "com.mongodb.operation.CreateIndexesOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateIndexesOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateIndexesOperation.execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor$3.apply(java.lang.Object)"], ["void", "com.mongodb.operation.MapReduceWithInlineResultsOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateCollectionOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Boolean", "com.mongodb.operation.ChangeStreamBatchCursor$1.apply(com.mongodb.operation.BatchCursor<org.bson.RawBsonDocument>)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor$1.apply(java.lang.Object)"], ["org.bson.BsonArray", "com.mongodb.operation.CommandResultArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "com.mongodb.operation.CommandResultArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.operation.CommandResultCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.operation.CommandResultCodecProvider.equals(java.lang.Object)"], ["int", "com.mongodb.operation.CommandResultCodecProvider.hashCode()"], ["void", "com.mongodb.operation.MapReduceWithInlineResultsOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.DropIndexOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropIndexOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation$4.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FsyncUnlockOperation$1.call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.UserExistsOperation", "com.mongodb.operation.UserExistsOperation(java.lang.String, java.lang.String)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.UserExistsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Boolean>)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation$4$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$4$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.FindOperation", "com.mongodb.operation.FindOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindOperation.getNamespace()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getFilter()"], ["int", "com.mongodb.operation.FindOperation.getBatchSize()"], ["int", "com.mongodb.operation.FindOperation.getLimit()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getModifiers()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getProjection()"], ["long", "com.mongodb.operation.FindOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.operation.FindOperation.getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.operation.FindOperation.getSkip()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getSort()"], ["com.mongodb.CursorType", "com.mongodb.operation.FindOperation.getCursorType()"], ["boolean", "com.mongodb.operation.FindOperation.isSlaveOk()"], ["boolean", "com.mongodb.operation.FindOperation.isOplogReplay()"], ["boolean", "com.mongodb.operation.FindOperation.isNoCursorTimeout()"], ["boolean", "com.mongodb.operation.FindOperation.isPartial()"], ["com.mongodb.ReadConcern", "com.mongodb.operation.FindOperation.getReadConcern()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.FindOperation.getCollation()"], ["java.lang.String", "com.mongodb.operation.FindOperation.getComment()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getHint()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getMax()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getMin()"], ["long", "com.mongodb.operation.FindOperation.getMaxScan()"], ["boolean", "com.mongodb.operation.FindOperation.isReturnKey()"], ["boolean", "com.mongodb.operation.FindOperation.isShowRecordId()"], ["boolean", "com.mongodb.operation.FindOperation.isSnapshot()"], ["void", "com.mongodb.operation.FindOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.FindOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AggregateExplainOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$5$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation$3.apply(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$2.apply(com.mongodb.async.AsyncBatchCursor<org.bson.RawBsonDocument>, com.mongodb.async.SingleResultCallback<java.util.List<org.bson.RawBsonDocument>>)"], ["com.mongodb.operation.OrderBy[]", "com.mongodb.operation.OrderBy.values()"], ["com.mongodb.operation.OrderBy", "com.mongodb.operation.OrderBy.valueOf(java.lang.String)"], ["int", "com.mongodb.operation.OrderBy.getIntRepresentation()"], ["com.mongodb.operation.OrderBy", "com.mongodb.operation.OrderBy.fromInt(int)"], ["java.lang.Void", "com.mongodb.operation.WriteConcernHelper$1.apply(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["java.lang.Object", "com.mongodb.operation.WriteConcernHelper$1.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation$4.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.CountOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BaseWriteOperation", "com.mongodb.operation.BaseWriteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.operation.BaseWriteOperation", "com.mongodb.operation.BaseWriteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.BaseWriteOperation.getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.BaseWriteOperation.getWriteConcern()"], ["boolean", "com.mongodb.operation.BaseWriteOperation.isOrdered()"], ["java.lang.Boolean", "com.mongodb.operation.BaseWriteOperation.getBypassDocumentValidation()"], ["com.mongodb.operation.BaseWriteOperation", "com.mongodb.operation.BaseWriteOperation.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.WriteConcernResult", "com.mongodb.operation.BaseWriteOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.BaseWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.operation.BaseWriteOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.GroupOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["com.mongodb.operation.CommandReadOperation", "com.mongodb.operation.CommandReadOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["T", "com.mongodb.operation.CommandReadOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.CommandReadOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, java.lang.String)"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, java.lang.String, com.mongodb.WriteConcern)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.MapReduceToCollectionOperation.getNamespace()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getMapFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getReduceFunction()"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getCollectionName()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.MapReduceToCollectionOperation.getWriteConcern()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getFinalizeFunction()"], ["finalizeFunction(org.bson.BsonJavaScript)", "com.mongodb.operation.MapReduceToCollectionOperation."], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getScope()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.scope(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getFilter()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getSort()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.sort(org.bson.BsonDocument)"], ["int", "com.mongodb.operation.MapReduceToCollectionOperation.getLimit()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.limit(int)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isJsMode()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.jsMode(boolean)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isVerbose()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.verbose(boolean)"], ["long", "com.mongodb.operation.MapReduceToCollectionOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getAction()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.action(java.lang.String)"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getDatabaseName()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.databaseName(java.lang.String)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isSharded()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.sharded(boolean)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isNonAtomic()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.nonAtomic(boolean)"], ["java.lang.Boolean", "com.mongodb.operation.MapReduceToCollectionOperation.getBypassDocumentValidation()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.MapReduceToCollectionOperation.getCollation()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.MapReduceToCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceStatistics>)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.UpdateOperation", "com.mongodb.operation.UpdateOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["com.mongodb.operation.UpdateOperation", "com.mongodb.operation.UpdateOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["com.mongodb.operation.ListDatabasesOperation", "com.mongodb.operation.ListDatabasesOperation(org.bson.codecs.Decoder<T>)"], ["long", "com.mongodb.operation.ListDatabasesOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.ListDatabasesOperation.getFilter()"], ["java.lang.Boolean", "com.mongodb.operation.ListDatabasesOperation.getNameOnly()"], ["void", "com.mongodb.operation.ListDatabasesOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation.execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.UpdateUserOperation", "com.mongodb.operation.UpdateUserOperation(com.mongodb.MongoCredential, boolean)"], ["com.mongodb.operation.UpdateUserOperation", "com.mongodb.operation.UpdateUserOperation(com.mongodb.MongoCredential, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.MongoCredential", "com.mongodb.operation.UpdateUserOperation.getCredential()"], ["boolean", "com.mongodb.operation.UpdateUserOperation.isReadOnly()"], ["java.lang.Void", "com.mongodb.operation.UpdateUserOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.UpdateUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.UpdateUserOperation.execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.ListIndexesOperation", "com.mongodb.operation.ListIndexesOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["java.lang.Integer", "com.mongodb.operation.ListIndexesOperation.getBatchSize()"], ["long", "com.mongodb.operation.ListIndexesOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.operation.ListIndexesOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation.execute(com.mongodb.binding.ReadBinding)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateExplainOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.AggregateExplainOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.FindOperation$2$2$1.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$2$2$1.onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation$2.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FsyncUnlockOperation$2.call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.AggregateOperation", "com.mongodb.operation.AggregateOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>)"], ["java.lang.Boolean", "com.mongodb.operation.AggregateOperation.getAllowDiskUse()"], ["java.lang.Integer", "com.mongodb.operation.AggregateOperation.getBatchSize()"], ["long", "com.mongodb.operation.AggregateOperation.getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.operation.AggregateOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.operation.AggregateOperation.getUseCursor()"], ["com.mongodb.ReadConcern", "com.mongodb.operation.AggregateOperation.getReadConcern()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.AggregateOperation.getCollation()"], ["java.lang.String", "com.mongodb.operation.AggregateOperation.getComment()"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateOperation.getHint()"], ["void", "com.mongodb.operation.AggregateOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.String", "com.mongodb.operation.AggregateOperation.toString()"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation.execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.AggregateToCollectionOperation.getWriteConcern()"], ["java.lang.Boolean", "com.mongodb.operation.AggregateToCollectionOperation.getAllowDiskUse()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.allowDiskUse(java.lang.Boolean)"], ["long", "com.mongodb.operation.AggregateToCollectionOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.operation.AggregateToCollectionOperation.getBypassDocumentValidation()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.AggregateToCollectionOperation.getCollation()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.operation.AggregateToCollectionOperation.getComment()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.comment(java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateToCollectionOperation.getHint()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.hint(org.bson.BsonDocument)"], ["java.lang.Void", "com.mongodb.operation.AggregateToCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.AggregateToCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.AggregateToCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor$2.apply(java.lang.Object)"], ["void", "com.mongodb.operation.CommandOperationHelper$5$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.ParallelCollectionScanOperation$2$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$5.onResult(java.util.List<org.bson.RawBsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$5.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropIndexOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncSingleBatchQueryCursor.close()"], ["void", "com.mongodb.operation.AsyncSingleBatchQueryCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncSingleBatchQueryCursor.tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncSingleBatchQueryCursor.setBatchSize(int)"], ["int", "com.mongodb.operation.AsyncSingleBatchQueryCursor.getBatchSize()"], ["boolean", "com.mongodb.operation.AsyncSingleBatchQueryCursor.isClosed()"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$1.apply(com.mongodb.async.AsyncBatchCursor<org.bson.RawBsonDocument>, com.mongodb.async.SingleResultCallback<java.util.List<org.bson.RawBsonDocument>>)"], ["void", "com.mongodb.operation.AggregateOperation$2$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.CommandOperationHelper$4$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$4$1.onResult(java.lang.Object, java.lang.Throwable)"], ["T", "com.mongodb.operation.CommandOperationHelper$IdentityTransformer.apply(T, com.mongodb.ServerAddress)"], ["java.lang.Long", "com.mongodb.operation.CountOperation$3.apply(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["java.lang.Object", "com.mongodb.operation.CountOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation(java.lang.String, java.lang.String)"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation(java.lang.String, java.lang.String, com.mongodb.WriteConcern)"], ["java.lang.String", "com.mongodb.operation.CreateCollectionOperation.getCollectionName()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.CreateCollectionOperation.getWriteConcern()"], ["boolean", "com.mongodb.operation.CreateCollectionOperation.isAutoIndex()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.autoIndex(boolean)"], ["long", "com.mongodb.operation.CreateCollectionOperation.getMaxDocuments()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.maxDocuments(long)"], ["boolean", "com.mongodb.operation.CreateCollectionOperation.isCapped()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.capped(boolean)"], ["long", "com.mongodb.operation.CreateCollectionOperation.getSizeInBytes()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.sizeInBytes(long)"], ["java.lang.Boolean", "com.mongodb.operation.CreateCollectionOperation.isUsePowerOf2Sizes()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.usePowerOf2Sizes(java.lang.Boolean)"], ["org.bson.BsonDocument", "com.mongodb.operation.CreateCollectionOperation.getStorageEngineOptions()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.storageEngineOptions(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.CreateCollectionOperation.getIndexOptionDefaults()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.indexOptionDefaults(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.CreateCollectionOperation.getValidator()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.validator(org.bson.BsonDocument)"], ["com.mongodb.client.model.ValidationLevel", "com.mongodb.operation.CreateCollectionOperation.getValidationLevel()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.validationLevel(com.mongodb.client.model.ValidationLevel)"], ["com.mongodb.client.model.ValidationAction", "com.mongodb.operation.CreateCollectionOperation.getValidationAction()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.validationAction(com.mongodb.client.model.ValidationAction)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.CreateCollectionOperation.getCollation()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.collation(com.mongodb.client.model.Collation)"], ["java.lang.Void", "com.mongodb.operation.CreateCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Long", "com.mongodb.operation.CountOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CountOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.ChangeStreamOperation$1.onResult(com.mongodb.async.AsyncBatchCursor<org.bson.RawBsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ChangeStreamOperation$1.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.UserExistsOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$3.onResult(java.util.List<org.bson.RawBsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$3.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceInlineResultsAsyncCursor.getStatistics()"], ["void", "com.mongodb.operation.GroupOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.DeleteOperation", "com.mongodb.operation.DeleteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["com.mongodb.operation.DeleteOperation", "com.mongodb.operation.DeleteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["org.bson.BsonDocument", "com.mongodb.operation.CurrentOpOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CurrentOpOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.OperationHelper$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.ParallelCollectionScanOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.AggregateToCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.AggregateToCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.GroupOperation", "com.mongodb.operation.GroupOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.GroupOperation.getNamespace()"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getKey()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getKeyFunction()"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getInitial()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getReduceFunction()"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getFilter()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getFinalizeFunction()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.GroupOperation.getCollation()"], ["void", "com.mongodb.operation.GroupOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation.execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Void", "com.mongodb.operation.CreateViewOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateViewOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.DropCollectionOperation$2$1.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropCollectionOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.FindAndReplaceOperation", "com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndReplaceOperation", "com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndReplaceOperation", "com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindAndReplaceOperation.getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.FindAndReplaceOperation.getWriteConcern()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getReplacement()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getFilter()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getProjection()"], ["long", "com.mongodb.operation.FindAndReplaceOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getSort()"], ["boolean", "com.mongodb.operation.FindAndReplaceOperation.isReturnOriginal()"], ["boolean", "com.mongodb.operation.FindAndReplaceOperation.isUpsert()"], ["java.lang.Boolean", "com.mongodb.operation.FindAndReplaceOperation.getBypassDocumentValidation()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.FindAndReplaceOperation.getCollation()"], ["void", "com.mongodb.operation.FindAndReplaceOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback)"], ["java.lang.Object", "com.mongodb.operation.FindAndReplaceOperation.execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation$4.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.allowDiskUse(java.lang.Boolean)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.collation(com.mongodb.client.model.Collation)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateExplainOperation.getHint()"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.hint(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateExplainOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AggregateExplainOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)"], ["java.lang.Object", "com.mongodb.operation.AggregateExplainOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.setBatchSize(int)"], ["int", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.getBatchSize()"], ["boolean", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.isClosed()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.close()"], ["void", "com.mongodb.operation.MapReduceToCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$6.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.CommandOperationHelper$1.onResult(D, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$2.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$2.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.RenameCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.RenameCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$2.onResult(com.mongodb.connection.QueryResult<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$2.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$ExplainResultCallback$1.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$ExplainResultCallback$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.RenameCollectionOperation", "com.mongodb.operation.RenameCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.MongoNamespace)"], ["com.mongodb.operation.RenameCollectionOperation", "com.mongodb.operation.RenameCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.MongoNamespace, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.RenameCollectionOperation.getWriteConcern()"], ["boolean", "com.mongodb.operation.RenameCollectionOperation.isDropTarget()"], ["com.mongodb.operation.RenameCollectionOperation", "com.mongodb.operation.RenameCollectionOperation.dropTarget(boolean)"], ["java.lang.Void", "com.mongodb.operation.RenameCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.RenameCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.RenameCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CountOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["R", "com.mongodb.operation.CommandOperationHelper$3.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.close()"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.setBatchSize(int)"], ["int", "com.mongodb.operation.AsyncQueryBatchCursor.getBatchSize()"], ["boolean", "com.mongodb.operation.AsyncQueryBatchCursor.isClosed()"], ["com.mongodb.operation.InsertOperation", "com.mongodb.operation.InsertOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["com.mongodb.operation.InsertOperation", "com.mongodb.operation.InsertOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["void", "com.mongodb.operation.DropDatabaseOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.CommandWriteOperation", "com.mongodb.operation.CommandWriteOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["T", "com.mongodb.operation.CommandWriteOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CommandWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.operation.DropCollectionOperation", "com.mongodb.operation.DropCollectionOperation(com.mongodb.MongoNamespace)"], ["com.mongodb.operation.DropCollectionOperation", "com.mongodb.operation.DropCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.DropCollectionOperation.getWriteConcern()"], ["java.lang.Void", "com.mongodb.operation.DropCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropCollectionOperation.execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$5.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$5.onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation$4.execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$4.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AggregateOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.BulkWriteBatch$WriteRequestEncoder.encode(org.bson.BsonWriter, com.mongodb.bulk.WriteRequest, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.operation.BulkWriteBatch$WriteRequestEncoder.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.operation.OperationHelper$3.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.MixedBulkWriteOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Void", "com.mongodb.operation.CreateIndexesOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateIndexesOperation$1.call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.ChangeStreamOperation", "com.mongodb.operation.ChangeStreamOperation(com.mongodb.MongoNamespace, com.mongodb.client.model.changestream.FullDocument, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.ChangeStreamOperation.getNamespace()"], ["com.mongodb.client.model.changestream.FullDocument", "com.mongodb.operation.ChangeStreamOperation.getFullDocument()"], ["org.bson.BsonDocument", "com.mongodb.operation.ChangeStreamOperation.getResumeToken()"], ["java.lang.Integer", "com.mongodb.operation.ChangeStreamOperation.getBatchSize()"], ["long", "com.mongodb.operation.ChangeStreamOperation.getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadConcern", "com.mongodb.operation.ChangeStreamOperation.getReadConcern()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.ChangeStreamOperation.getCollation()"], ["void", "com.mongodb.operation.ChangeStreamOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListDatabasesOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.UpdateUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$7.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$7.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$1$1.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$1$1.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation$4.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.remove()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.close()"], ["boolean", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.hasNext()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.setBatchSize(int)"], ["int", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getBatchSize()"], ["com.mongodb.ServerCursor", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getServerAddress()"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.next()"], ["void", "com.mongodb.operation.FindOperation$ExplainResultCallback.onResult(com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$ExplainResultCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceStatistics(int, int, int, int)"], ["int", "com.mongodb.operation.MapReduceStatistics.getInputCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getOutputCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getEmitCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getDuration()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$3.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$3.onResult(java.lang.Object, java.lang.Throwable)"], ["T", "com.mongodb.operation.FindAndModifyHelper$1.apply(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["java.lang.Object", "com.mongodb.operation.FindAndModifyHelper$1.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.AggregateToCollectionOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor.tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor.setBatchSize(int)"], ["int", "com.mongodb.operation.AsyncChangeStreamBatchCursor.getBatchSize()"], ["boolean", "com.mongodb.operation.AsyncChangeStreamBatchCursor.isClosed()"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor.close()"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$2$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.CommandOperationHelper$5.onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$2.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$2.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.CreateViewOperation", "com.mongodb.operation.CreateViewOperation(java.lang.String, java.lang.String, java.lang.String, java.util.List<org.bson.BsonDocument>, com.mongodb.WriteConcern)"], ["java.lang.String", "com.mongodb.operation.CreateViewOperation.getDatabaseName()"], ["java.lang.String", "com.mongodb.operation.CreateViewOperation.getViewName()"], ["java.lang.String", "com.mongodb.operation.CreateViewOperation.getViewOn()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.CreateViewOperation.getWriteConcern()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.CreateViewOperation.getCollation()"], ["com.mongodb.operation.CreateViewOperation", "com.mongodb.operation.CreateViewOperation.collation(com.mongodb.client.model.Collation)"], ["java.lang.Void", "com.mongodb.operation.CreateViewOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateViewOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateViewOperation.execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.OperationHelper$5.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.DropUserOperation", "com.mongodb.operation.DropUserOperation(java.lang.String, java.lang.String)"], ["com.mongodb.operation.DropUserOperation", "com.mongodb.operation.DropUserOperation(java.lang.String, java.lang.String, com.mongodb.WriteConcern)"], ["java.lang.Void", "com.mongodb.operation.DropUserOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropUserOperation.execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.MixedBulkWriteOperation$3.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation$3.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.FindOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["T", "com.mongodb.operation.BaseFindAndModifyOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.BaseFindAndModifyOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation$4.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["com.mongodb.operation.ParallelCollectionScanOperation", "com.mongodb.operation.ParallelCollectionScanOperation(com.mongodb.MongoNamespace, int, org.bson.codecs.Decoder<T>)"], ["int", "com.mongodb.operation.ParallelCollectionScanOperation.getNumCursors()"], ["int", "com.mongodb.operation.ParallelCollectionScanOperation.getBatchSize()"], ["com.mongodb.ReadConcern", "com.mongodb.operation.ParallelCollectionScanOperation.getReadConcern()"], ["void", "com.mongodb.operation.ParallelCollectionScanOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.util.List<com.mongodb.async.AsyncBatchCursor<T>>>)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$1.onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.DropUserOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropUserOperation$1.call(com.mongodb.connection.Connection)"], ["int", "com.mongodb.operation.BsonArrayWrapper.size()"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.isEmpty()"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.contains(java.lang.Object)"], ["java.lang.Object[]", "com.mongodb.operation.BsonArrayWrapper.toArray()"], ["<T> T[]", "com.mongodb.operation.BsonArrayWrapper.toArray(T[])"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.add(org.bson.BsonValue)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.remove(java.lang.Object)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.containsAll(java.util.Collection<?>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.addAll(java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.addAll(int, java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.removeAll(java.util.Collection<?>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.retainAll(java.util.Collection<?>)"], ["void", "com.mongodb.operation.BsonArrayWrapper.clear()"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.get(int)"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.set(int, org.bson.BsonValue)"], ["void", "com.mongodb.operation.BsonArrayWrapper.add(int, org.bson.BsonValue)"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.remove(int)"], ["int", "com.mongodb.operation.BsonArrayWrapper.indexOf(java.lang.Object)"], ["int", "com.mongodb.operation.BsonArrayWrapper.lastIndexOf(java.lang.Object)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.equals(java.lang.Object)"], ["int", "com.mongodb.operation.BsonArrayWrapper.hashCode()"], ["java.lang.String", "com.mongodb.operation.BsonArrayWrapper.toString()"], ["org.bson.BsonArray", "com.mongodb.operation.BsonArrayWrapper.clone()"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.remove(int)"], ["void", "com.mongodb.operation.BsonArrayWrapper.add(int, java.lang.Object)"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.set(int, java.lang.Object)"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.get(int)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.add(java.lang.Object)"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.clone()"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$4.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.CommandOperationHelper$2.onResult(D, java.lang.Throwable)"], ["com.mongodb.operation.FindAndDeleteOperation", "com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["com.mongodb.operation.FindAndDeleteOperation", "com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>)"], ["com.mongodb.operation.FindAndDeleteOperation", "com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindAndDeleteOperation.getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.FindAndDeleteOperation.getWriteConcern()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getFilter()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getProjection()"], ["long", "com.mongodb.operation.FindAndDeleteOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getSort()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.FindAndDeleteOperation.getCollation()"], ["void", "com.mongodb.operation.FindAndDeleteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback)"], ["java.lang.Object", "com.mongodb.operation.FindAndDeleteOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.RenameCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, java.lang.String)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, org.bson.BsonDocument)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, java.lang.String, com.mongodb.WriteConcern)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, org.bson.BsonDocument, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.DropIndexOperation.getWriteConcern()"], ["long", "com.mongodb.operation.DropIndexOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation.maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Void", "com.mongodb.operation.DropIndexOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropIndexOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropIndexOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateViewOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.AggregateToCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$4.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.OperationHelper$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.MixedBulkWriteOperation", "com.mongodb.operation.MixedBulkWriteOperation(com.mongodb.MongoNamespace, java.util.List<? extends com.mongodb.bulk.WriteRequest>, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.operation.MixedBulkWriteOperation", "com.mongodb.operation.MixedBulkWriteOperation(com.mongodb.MongoNamespace, java.util.List<? extends com.mongodb.bulk.WriteRequest>, boolean, com.mongodb.WriteConcern, boolean)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.MixedBulkWriteOperation.getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.MixedBulkWriteOperation.getWriteConcern()"], ["boolean", "com.mongodb.operation.MixedBulkWriteOperation.isOrdered()"], ["java.util.List<? extends com.mongodb.bulk.WriteRequest>", "com.mongodb.operation.MixedBulkWriteOperation.getWriteRequests()"], ["java.lang.Boolean", "com.mongodb.operation.MixedBulkWriteOperation.getBypassDocumentValidation()"], ["com.mongodb.operation.MixedBulkWriteOperation", "com.mongodb.operation.MixedBulkWriteOperation.bypassDocumentValidation(java.lang.Boolean)"], ["java.lang.Boolean", "com.mongodb.operation.MixedBulkWriteOperation.getRetryWrites()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.MixedBulkWriteOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.FindOperation$5.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$4.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceInlineResultsCursor.getStatistics()"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation$3.apply(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation", "com.mongodb.operation.MapReduceWithInlineResultsOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getNamespace()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getMapFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getReduceFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getFinalizeFunction()"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getScope()"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getFilter()"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getSort()"], ["int", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getLimit()"], ["boolean", "com.mongodb.operation.MapReduceWithInlineResultsOperation.isJsMode()"], ["boolean", "com.mongodb.operation.MapReduceWithInlineResultsOperation.isVerbose()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getCollation()"], ["long", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadConcern", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getReadConcern()"], ["void", "com.mongodb.operation.MapReduceWithInlineResultsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceAsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation.execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$7.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$6.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$6.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.DistinctOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.DropDatabaseOperation", "com.mongodb.operation.DropDatabaseOperation(java.lang.String)"], ["com.mongodb.operation.DropDatabaseOperation", "com.mongodb.operation.DropDatabaseOperation(java.lang.String, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.DropDatabaseOperation.getWriteConcern()"], ["java.lang.Void", "com.mongodb.operation.DropDatabaseOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropDatabaseOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropDatabaseOperation.execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["com.mongodb.operation.CurrentOpOperation", "com.mongodb.operation.CurrentOpOperation()"], ["org.bson.BsonDocument", "com.mongodb.operation.CurrentOpOperation.execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.operation.CurrentOpOperation.execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.BulkWriteBatch", "com.mongodb.operation.BulkWriteBatch.createBulkWriteBatch(com.mongodb.MongoNamespace, com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription, boolean, com.mongodb.WriteConcern, java.lang.Boolean, boolean, java.util.List<? extends com.mongodb.bulk.WriteRequest>, com.mongodb.session.SessionContext)"], ["void", "com.mongodb.operation.BulkWriteBatch.addResult(org.bson.BsonDocument)"], ["boolean", "com.mongodb.operation.BulkWriteBatch.getRetryWrites()"], ["org.bson.BsonDocument", "com.mongodb.operation.BulkWriteBatch.getCommand()"], ["com.mongodb.connection.SplittablePayload", "com.mongodb.operation.BulkWriteBatch.getPayload()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.BulkWriteBatch.getResult()"], ["boolean", "com.mongodb.operation.BulkWriteBatch.hasErrors()"], ["com.mongodb.MongoBulkWriteException", "com.mongodb.operation.BulkWriteBatch.getError()"], ["boolean", "com.mongodb.operation.BulkWriteBatch.shouldProcessBatch()"], ["boolean", "com.mongodb.operation.BulkWriteBatch.hasAnotherBatch()"], ["com.mongodb.operation.BulkWriteBatch", "com.mongodb.operation.BulkWriteBatch.getNextBatch()"], ["org.bson.FieldNameValidator", "com.mongodb.operation.BulkWriteBatch.getFieldNameValidator()"], ["com.mongodb.operation.CreateUserOperation", "com.mongodb.operation.CreateUserOperation(com.mongodb.MongoCredential, boolean)"], ["com.mongodb.operation.CreateUserOperation", "com.mongodb.operation.CreateUserOperation(com.mongodb.MongoCredential, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.MongoCredential", "com.mongodb.operation.CreateUserOperation.getCredential()"], ["boolean", "com.mongodb.operation.CreateUserOperation.isReadOnly()"], ["java.lang.Void", "com.mongodb.operation.CreateUserOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateUserOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$1.onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.DropDatabaseOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropDatabaseOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$4.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$4.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$4.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$4.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$3.onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.CreateCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.DistinctOperation", "com.mongodb.operation.DistinctOperation(com.mongodb.MongoNamespace, java.lang.String, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.DistinctOperation.getFilter()"], ["long", "com.mongodb.operation.DistinctOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadConcern", "com.mongodb.operation.DistinctOperation.getReadConcern()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.DistinctOperation.getCollation()"], ["void", "com.mongodb.operation.DistinctOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation.execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.DistinctOperation$2$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$4.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.UpdateUserOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.UpdateUserOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.DropIndexOperation$2$1.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropIndexOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$ConnectionReleasingWrappedCallback.onResult(T, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.CreateUserOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateUserOperation$1.call(com.mongodb.connection.Connection)"], ["boolean", "com.mongodb.operation.ChangeStreamBatchCursor.hasNext()"], ["void", "com.mongodb.operation.ChangeStreamBatchCursor.close()"], ["void", "com.mongodb.operation.ChangeStreamBatchCursor.setBatchSize(int)"], ["int", "com.mongodb.operation.ChangeStreamBatchCursor.getBatchSize()"], ["com.mongodb.ServerCursor", "com.mongodb.operation.ChangeStreamBatchCursor.getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.operation.ChangeStreamBatchCursor.getServerAddress()"], ["void", "com.mongodb.operation.ChangeStreamBatchCursor.remove()"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor.next()"], ["void", "com.mongodb.operation.OperationHelper$6.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$6.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$1.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.FindAndUpdateOperation", "com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndUpdateOperation", "com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndUpdateOperation", "com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindAndUpdateOperation.getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.FindAndUpdateOperation.getWriteConcern()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getUpdate()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getFilter()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getProjection()"], ["long", "com.mongodb.operation.FindAndUpdateOperation.getMaxTime(java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getSort()"], ["boolean", "com.mongodb.operation.FindAndUpdateOperation.isReturnOriginal()"], ["boolean", "com.mongodb.operation.FindAndUpdateOperation.isUpsert()"], ["java.lang.Boolean", "com.mongodb.operation.FindAndUpdateOperation.getBypassDocumentValidation()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.FindAndUpdateOperation.getCollation()"], ["void", "com.mongodb.operation.FindAndUpdateOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback)"], ["java.lang.Object", "com.mongodb.operation.FindAndUpdateOperation.execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1$1.onResult(D, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation$3.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["void", "com.mongodb.operation.UserOperationHelper$1.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.UserOperationHelper$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$CommandResultSingleResultCallback.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$CommandResultSingleResultCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation$4.apply(java.lang.Object, com.mongodb.ServerAddress)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["R", "com.mongodb.operation.CommandOperationHelper$3$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.BaseWriteOperation$1.onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.BaseWriteOperation$1.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.DropCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropCollectionOperation$1.call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.FindOperation$2$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$2.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$2.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.DBRefCodecProvider", "com.mongodb.DBRefCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.DBRefCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.DBRefCodecProvider.equals(java.lang.Object)"], ["int", "com.mongodb.DBRefCodecProvider.hashCode()"], ["<T> T", "com.mongodb.Mongo$3.execute(com.mongodb.operation.ReadOperation<T>, com.mongodb.ReadPreference)"], ["<T> T", "com.mongodb.Mongo$3.execute(com.mongodb.operation.WriteOperation<T>)"], ["<T> T", "com.mongodb.Mongo$3.execute(com.mongodb.operation.ReadOperation<T>, com.mongodb.ReadPreference, com.mongodb.session.ClientSession)"], ["<T> T", "com.mongodb.Mongo$3.execute(com.mongodb.operation.WriteOperation<T>, com.mongodb.session.ClientSession)"], ["com.mongodb.MongoConfigurationException", "com.mongodb.MongoConfigurationException(java.lang.String)"], ["com.mongodb.MongoConfigurationException", "com.mongodb.MongoConfigurationException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.Mongo", "com.mongodb.Mongo()"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String, int)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.MongoURI)"], ["void", "com.mongodb.Mongo.setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.Mongo.getWriteConcern()"], ["com.mongodb.ReadConcern", "com.mongodb.Mongo.getReadConcern()"], ["void", "com.mongodb.Mongo.setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.Mongo.getReadPreference()"], ["com.mongodb.ServerAddress", "com.mongodb.Mongo.getAddress()"], ["com.mongodb.MongoOptions", "com.mongodb.Mongo.getMongoOptions()"], ["com.mongodb.ReplicaSetStatus", "com.mongodb.Mongo.getReplicaSetStatus()"], ["com.mongodb.DB", "com.mongodb.Mongo.getDB(java.lang.String)"], ["void", "com.mongodb.Mongo.dropDatabase(java.lang.String)"], ["void", "com.mongodb.Mongo.close()"], ["void", "com.mongodb.Mongo.slaveOk()"], ["void", "com.mongodb.Mongo.setOptions(int)"], ["void", "com.mongodb.Mongo.resetOptions()"], ["void", "com.mongodb.Mongo.addOption(int)"], ["int", "com.mongodb.Mongo.getOptions()"], ["com.mongodb.CommandResult", "com.mongodb.Mongo.fsync(boolean)"], ["com.mongodb.CommandResult", "com.mongodb.Mongo.fsyncAndLock()"], ["com.mongodb.DBObject", "com.mongodb.Mongo.unlock()"], ["boolean", "com.mongodb.Mongo.isLocked()"], ["java.lang.String", "com.mongodb.Mongo.toString()"], ["int", "com.mongodb.Mongo.getMaxBsonObjectSize()"], ["java.lang.String", "com.mongodb.Mongo.getConnectPoint()"], ["com.mongodb.MongoExecutionTimeoutException", "com.mongodb.MongoExecutionTimeoutException(int, java.lang.String)"], ["com.mongodb.WriteConcernException", "com.mongodb.WriteConcernException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)"], ["int", "com.mongodb.WriteConcernException.extractErrorCode(org.bson.BsonDocument)"], ["java.lang.String", "com.mongodb.WriteConcernException.extractErrorMessage(org.bson.BsonDocument)"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernException.getWriteConcernResult()"], ["int", "com.mongodb.WriteConcernException.getErrorCode()"], ["java.lang.String", "com.mongodb.WriteConcernException.getErrorMessage()"], ["org.bson.BsonDocument", "com.mongodb.WriteConcernException.getResponse()"], ["java.lang.String", "com.mongodb.ReplicaSetStatus.getName()"], ["com.mongodb.ServerAddress", "com.mongodb.ReplicaSetStatus.getMaster()"], ["boolean", "com.mongodb.ReplicaSetStatus.isMaster(com.mongodb.ServerAddress)"], ["int", "com.mongodb.ReplicaSetStatus.getMaxBsonObjectSize()"], ["java.lang.String", "com.mongodb.ReplicaSetStatus.toString()"], ["void", "com.mongodb.MongoBatchCursorAdapter.remove()"], ["void", "com.mongodb.MongoBatchCursorAdapter.close()"], ["boolean", "com.mongodb.MongoBatchCursorAdapter.hasNext()"], ["T", "com.mongodb.MongoBatchCursorAdapter.next()"], ["T", "com.mongodb.MongoBatchCursorAdapter.tryNext()"], ["com.mongodb.ServerCursor", "com.mongodb.MongoBatchCursorAdapter.getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoBatchCursorAdapter.getServerAddress()"], ["java.lang.String", "com.mongodb.Mongo$1.apply(com.mongodb.DBObject)"], ["java.lang.Object", "com.mongodb.Mongo$1.apply(java.lang.Object)"], ["com.mongodb.selector.ReadPreferenceServerSelector", "com.mongodb.selector.ReadPreferenceServerSelector(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.selector.ReadPreferenceServerSelector.getReadPreference()"], ["java.lang.String", "com.mongodb.selector.ReadPreferenceServerSelector.toString()"], ["com.mongodb.selector.WritableServerSelector", "com.mongodb.selector.WritableServerSelector()"], ["java.lang.String", "com.mongodb.selector.WritableServerSelector.toString()"], ["com.mongodb.selector.CompositeServerSelector", "com.mongodb.selector.CompositeServerSelector(java.util.List<? extends com.mongodb.selector.ServerSelector>)"], ["java.lang.String", "com.mongodb.selector.CompositeServerSelector.toString()"], ["com.mongodb.selector.PrimaryServerSelector", "com.mongodb.selector.PrimaryServerSelector()"], ["java.lang.String", "com.mongodb.selector.PrimaryServerSelector.toString()"], ["com.mongodb.selector.ServerAddressSelector", "com.mongodb.selector.ServerAddressSelector(com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.selector.ServerAddressSelector.getServerAddress()"], ["java.lang.String", "com.mongodb.selector.ServerAddressSelector.toString()"], ["com.mongodb.selector.LatencyMinimizingServerSelector", "com.mongodb.selector.LatencyMinimizingServerSelector(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.selector.LatencyMinimizingServerSelector.getAcceptableLatencyDifference(java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.selector.LatencyMinimizingServerSelector.toString()"], ["com.mongodb.ConnectionString", "com.mongodb.ConnectionString(java.lang.String)"], ["java.lang.String", "com.mongodb.ConnectionString.getUsername()"], ["char[]", "com.mongodb.ConnectionString.getPassword()"], ["java.lang.String", "com.mongodb.ConnectionString.getDatabase()"], ["java.lang.String", "com.mongodb.ConnectionString.getCollection()"], ["java.lang.String", "com.mongodb.ConnectionString.getURI()"], ["java.lang.String", "com.mongodb.ConnectionString.getConnectionString()"], ["com.mongodb.MongoCredential", "com.mongodb.ConnectionString.getCredential()"], ["com.mongodb.ReadPreference", "com.mongodb.ConnectionString.getReadPreference()"], ["com.mongodb.ReadConcern", "com.mongodb.ConnectionString.getReadConcern()"], ["com.mongodb.WriteConcern", "com.mongodb.ConnectionString.getWriteConcern()"], ["boolean", "com.mongodb.ConnectionString.getRetryWrites()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMinConnectionPoolSize()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionPoolSize()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getThreadsAllowedToBlockForConnectionMultiplier()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxWaitTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionIdleTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionLifeTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getConnectTimeout()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getSocketTimeout()"], ["java.lang.Boolean", "com.mongodb.ConnectionString.getSslEnabled()"], ["java.lang.String", "com.mongodb.ConnectionString.getStreamType()"], ["java.lang.Boolean", "com.mongodb.ConnectionString.getSslInvalidHostnameAllowed()"], ["java.lang.String", "com.mongodb.ConnectionString.getRequiredReplicaSetName()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getServerSelectionTimeout()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getLocalThreshold()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getHeartbeatFrequency()"], ["java.lang.String", "com.mongodb.ConnectionString.getApplicationName()"], ["java.lang.String", "com.mongodb.ConnectionString.toString()"], ["boolean", "com.mongodb.ConnectionString.equals(java.lang.Object)"], ["int", "com.mongodb.ConnectionString.hashCode()"], ["com.mongodb.DBEncoder", "com.mongodb.DefaultDBEncoder$1.create()"], ["com.mongodb.LazyDBList", "com.mongodb.LazyDBList(byte[], org.bson.LazyBSONCallback)"], ["com.mongodb.LazyDBList", "com.mongodb.LazyDBList(byte[], int, org.bson.LazyBSONCallback)"], ["void", "com.mongodb.LazyDBList.markAsPartialObject()"], ["boolean", "com.mongodb.LazyDBList.isPartialObject()"], ["com.mongodb.ClientSessionOptions$Builder", "com.mongodb.ClientSessionOptions$Builder.causallyConsistent(boolean)"], ["com.mongodb.ClientSessionOptions", "com.mongodb.ClientSessionOptions$Builder.build()"], ["void", "com.mongodb.AggregateIterableImpl.toCollection()"], ["com.mongodb.client.MongoIterable", "com.mongodb.AggregateIterableImpl.batchSize(int)"], ["TResult", "com.mongodb.FindIterableImpl.first()"], ["com.mongodb.client.MongoIterable", "com.mongodb.FindIterableImpl.batchSize(int)"], ["com.mongodb.bulk.BulkWriteError", "com.mongodb.bulk.BulkWriteError(int, java.lang.String, org.bson.BsonDocument, int)"], ["int", "com.mongodb.bulk.BulkWriteError.getIndex()"], ["boolean", "com.mongodb.bulk.BulkWriteError.equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteError.hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteError.toString()"], ["com.mongodb.bulk.InsertRequest", "com.mongodb.bulk.InsertRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.InsertRequest.getDocument()"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.InsertRequest.getType()"], ["com.mongodb.bulk.BulkWriteUpsert", "com.mongodb.bulk.BulkWriteUpsert(int, org.bson.BsonValue)"], ["int", "com.mongodb.bulk.BulkWriteUpsert.getIndex()"], ["org.bson.BsonValue", "com.mongodb.bulk.BulkWriteUpsert.getId()"], ["boolean", "com.mongodb.bulk.BulkWriteUpsert.equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteUpsert.hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteUpsert.toString()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getKeys()"], ["boolean", "com.mongodb.bulk.IndexRequest.isBackground()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.background(boolean)"], ["boolean", "com.mongodb.bulk.IndexRequest.isUnique()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.unique(boolean)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getName()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.name(java.lang.String)"], ["boolean", "com.mongodb.bulk.IndexRequest.isSparse()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.sparse(boolean)"], ["java.lang.Long", "com.mongodb.bulk.IndexRequest.getExpireAfter(java.util.concurrent.TimeUnit)"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.version(java.lang.Integer)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getWeights()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.weights(org.bson.BsonDocument)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getDefaultLanguage()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.defaultLanguage(java.lang.String)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getLanguageOverride()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.languageOverride(java.lang.String)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getTextVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.textVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getSphereVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.sphereVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getBits()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.bits(java.lang.Integer)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getMin()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.min(java.lang.Double)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getMax()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.max(java.lang.Double)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getBucketSize()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.bucketSize(java.lang.Double)"], ["boolean", "com.mongodb.bulk.IndexRequest.getDropDups()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.dropDups(boolean)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getStorageEngine()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.storageEngine(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getPartialFilterExpression()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.partialFilterExpression(org.bson.BsonDocument)"], ["com.mongodb.client.model.Collation", "com.mongodb.bulk.IndexRequest.getCollation()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.bulk.WriteRequest$Type[]", "com.mongodb.bulk.WriteRequest$Type.values()"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.WriteRequest$Type.valueOf(java.lang.String)"], ["com.mongodb.bulk.DeleteRequest", "com.mongodb.bulk.DeleteRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.DeleteRequest.getFilter()"], ["com.mongodb.bulk.DeleteRequest", "com.mongodb.bulk.DeleteRequest.multi(boolean)"], ["boolean", "com.mongodb.bulk.DeleteRequest.isMulti()"], ["com.mongodb.client.model.Collation", "com.mongodb.bulk.DeleteRequest.getCollation()"], ["com.mongodb.bulk.DeleteRequest", "com.mongodb.bulk.DeleteRequest.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.DeleteRequest.getType()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.wasAcknowledged()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getInsertedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getMatchedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getDeletedCount()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.isModifiedCountAvailable()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getModifiedCount()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteResult$1.hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteResult$1.toString()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(int, int, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.unacknowledged()"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.bulk.WriteConcernError(int, java.lang.String, org.bson.BsonDocument)"], ["int", "com.mongodb.bulk.WriteConcernError.getCode()"], ["java.lang.String", "com.mongodb.bulk.WriteConcernError.getMessage()"], ["org.bson.BsonDocument", "com.mongodb.bulk.WriteConcernError.getDetails()"], ["boolean", "com.mongodb.bulk.WriteConcernError.equals(java.lang.Object)"], ["int", "com.mongodb.bulk.WriteConcernError.hashCode()"], ["java.lang.String", "com.mongodb.bulk.WriteConcernError.toString()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest(org.bson.BsonDocument, org.bson.BsonDocument, com.mongodb.bulk.WriteRequest$Type)"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.UpdateRequest.getType()"], ["org.bson.BsonDocument", "com.mongodb.bulk.UpdateRequest.getFilter()"], ["org.bson.BsonDocument", "com.mongodb.bulk.UpdateRequest.getUpdate()"], ["boolean", "com.mongodb.bulk.UpdateRequest.isMulti()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.multi(boolean)"], ["boolean", "com.mongodb.bulk.UpdateRequest.isUpsert()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.upsert(boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.bulk.UpdateRequest.getCollation()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.arrayFilters(java.util.List<org.bson.BsonDocument>)"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.wasAcknowledged()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getInsertedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getMatchedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getDeletedCount()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.isModifiedCountAvailable()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getModifiedCount()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteResult$2.hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteResult$2.toString()"], ["com.mongodb.MongoGridFSException", "com.mongodb.MongoGridFSException(java.lang.String)"], ["com.mongodb.MongoGridFSException", "com.mongodb.MongoGridFSException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject.parse(java.lang.String)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject.parse(java.lang.String, org.bson.codecs.Decoder<com.mongodb.BasicDBObject>)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject()"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(int)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(java.util.Map)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject.append(java.lang.String, java.lang.Object)"], ["boolean", "com.mongodb.BasicDBObject.isPartialObject()"], ["java.lang.String", "com.mongodb.BasicDBObject.toJson()"], ["java.lang.String", "com.mongodb.BasicDBObject.toJson(org.bson.json.JsonWriterSettings)"], ["java.lang.String", "com.mongodb.BasicDBObject.toJson(org.bson.codecs.Encoder<com.mongodb.BasicDBObject>)"], ["java.lang.String", "com.mongodb.BasicDBObject.toJson(org.bson.json.JsonWriterSettings, org.bson.codecs.Encoder<com.mongodb.BasicDBObject>)"], ["java.lang.String", "com.mongodb.BasicDBObject.toString()"], ["void", "com.mongodb.BasicDBObject.markAsPartialObject()"], ["java.lang.Object", "com.mongodb.BasicDBObject.copy()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.BasicDBObject.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BasicBSONObject", "com.mongodb.BasicDBObject.append(java.lang.String, java.lang.Object)"], ["com.mongodb.DocumentToDBRefTransformer", "com.mongodb.DocumentToDBRefTransformer()"], ["java.lang.Object", "com.mongodb.DocumentToDBRefTransformer.transform(java.lang.Object)"], ["boolean", "com.mongodb.DocumentToDBRefTransformer.equals(java.lang.Object)"], ["int", "com.mongodb.DocumentToDBRefTransformer.hashCode()"], ["void", "com.mongodb.MongoMappingCursor.close()"], ["boolean", "com.mongodb.MongoMappingCursor.hasNext()"], ["U", "com.mongodb.MongoMappingCursor.next()"], ["U", "com.mongodb.MongoMappingCursor.tryNext()"], ["void", "com.mongodb.MongoMappingCursor.remove()"], ["com.mongodb.ServerCursor", "com.mongodb.MongoMappingCursor.getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoMappingCursor.getServerAddress()"], ["com.mongodb.MongoServerException", "com.mongodb.MongoServerException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoServerException", "com.mongodb.MongoServerException(int, java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.MongoServerException.getServerAddress()"], ["void", "com.mongodb.Mongo$5.run()"], ["boolean", "com.mongodb.ReflectionDBObject$JavaWrapper.containsKey(java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject$JavaWrapper.get(com.mongodb.ReflectionDBObject, java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject$JavaWrapper.set(com.mongodb.ReflectionDBObject, java.lang.String, java.lang.Object)"], ["java.lang.String", "com.mongodb.MongoDatabaseImpl$1.apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.MongoDatabaseImpl$1.apply(java.lang.Object)"], ["com.mongodb.MongoWriteException", "com.mongodb.MongoWriteException(com.mongodb.WriteError, com.mongodb.ServerAddress)"], ["com.mongodb.WriteError", "com.mongodb.MongoWriteException.getError()"], ["com.mongodb.MongoException", "com.mongodb.MongoException.fromThrowable(java.lang.Throwable)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(java.lang.String)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(int, java.lang.String)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(int, java.lang.String, java.lang.Throwable)"], ["int", "com.mongodb.MongoException.getCode()"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isTailableCursor()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.tailableCursor(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isSlaveOk()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.slaveOk(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isOplogReplay()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.oplogReplay(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isNoCursorTimeout()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.noCursorTimeout(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isAwaitData()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.awaitData(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isPartial()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.partial(boolean)"], ["void", "com.mongodb.connection.NativeAuthenticator.authenticate(com.mongodb.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)"], ["long", "com.mongodb.connection.GetMoreMessage.getCursorId()"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$1.compare(com.mongodb.bulk.BulkWriteUpsert, com.mongodb.bulk.BulkWriteUpsert)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$1.compare(java.lang.Object, java.lang.Object)"], ["void", "com.mongodb.connection.InsertProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.InsertProtocol$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.SplittablePayloadBsonWriter.writeStartDocument()"], ["void", "com.mongodb.connection.SplittablePayloadBsonWriter.writeEndDocument()"], ["int", "com.mongodb.connection.CompressedHeader.getOriginalOpcode()"], ["int", "com.mongodb.connection.CompressedHeader.getUncompressedSize()"], ["byte", "com.mongodb.connection.CompressedHeader.getCompressorId()"], ["int", "com.mongodb.connection.CompressedHeader.getCompressedSize()"], ["com.mongodb.connection.MessageHeader", "com.mongodb.connection.CompressedHeader.getMessageHeader()"], ["synchronized", "com.mongodb.connection.DefaultServerMonitor$ServerMonitorRunnable.void run()"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription.builder()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getCanonicalAddress()"], ["java.lang.Integer", "com.mongodb.connection.ServerDescription.getLogicalSessionTimeoutMinutes()"], ["boolean", "com.mongodb.connection.ServerDescription.isCompatibleWithDriver()"], ["boolean", "com.mongodb.connection.ServerDescription.isIncompatiblyNewerThanDriver()"], ["boolean", "com.mongodb.connection.ServerDescription.isIncompatiblyOlderThanDriver()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMaxDocumentSize()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMinWireVersion()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMaxWireVersion()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ServerDescription.getAddress()"], ["boolean", "com.mongodb.connection.ServerDescription.isReplicaSetMember()"], ["boolean", "com.mongodb.connection.ServerDescription.isShardRouter()"], ["boolean", "com.mongodb.connection.ServerDescription.isStandAlone()"], ["boolean", "com.mongodb.connection.ServerDescription.isPrimary()"], ["boolean", "com.mongodb.connection.ServerDescription.isSecondary()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getPrimary()"], ["int", "com.mongodb.connection.ServerDescription.getMaxDocumentSize()"], ["com.mongodb.TagSet", "com.mongodb.connection.ServerDescription.getTagSet()"], ["int", "com.mongodb.connection.ServerDescription.getMinWireVersion()"], ["int", "com.mongodb.connection.ServerDescription.getMaxWireVersion()"], ["org.bson.types.ObjectId", "com.mongodb.connection.ServerDescription.getElectionId()"], ["java.lang.Integer", "com.mongodb.connection.ServerDescription.getSetVersion()"], ["java.util.Date", "com.mongodb.connection.ServerDescription.getLastWriteDate()"], ["long", "com.mongodb.connection.ServerDescription.getLastUpdateTime(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.ServerDescription.hasTags(com.mongodb.TagSet)"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getSetName()"], ["boolean", "com.mongodb.connection.ServerDescription.isOk()"], ["com.mongodb.connection.ServerConnectionState", "com.mongodb.connection.ServerDescription.getState()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ServerDescription.getType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerDescription.getClusterType()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerDescription.getVersion()"], ["long", "com.mongodb.connection.ServerDescription.getRoundTripTimeNanos()"], ["java.lang.Throwable", "com.mongodb.connection.ServerDescription.getException()"], ["boolean", "com.mongodb.connection.ServerDescription.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerDescription.hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.toString()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getShortDescription()"], ["boolean", "com.mongodb.connection.ClusterDescription$1.apply(com.mongodb.connection.ServerDescription)"], ["java.lang.String", "com.mongodb.connection.ZlibCompressor.getName()"], ["byte", "com.mongodb.connection.ZlibCompressor.getId()"], ["synchronized", "com.mongodb.connection.ClusterClock.org.bson.BsonDocument getCurrent()"], ["synchronized", "com.mongodb.connection.ClusterClock.void advance(org.bson.BsonDocument)"], ["synchronized", "com.mongodb.connection.ClusterClock.org.bson.BsonDocument greaterOf(org.bson.BsonDocument)"], ["boolean", "com.mongodb.connection.ClusterDescription$3.apply(com.mongodb.connection.ServerDescription)"], ["void", "com.mongodb.connection.InternalStreamConnection$1$1.onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$1$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$AsyncWritableByteChannelAdapter.write(java.nio.ByteBuffer, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["java.lang.String", "com.mongodb.connection.SnappyCompressor.getName()"], ["byte", "com.mongodb.connection.SnappyCompressor.getId()"], ["void", "com.mongodb.connection.SnappyCompressor.compress(java.util.List<org.bson.ByteBuf>, org.bson.io.BsonOutput)"], ["void", "com.mongodb.connection.SingleServerCluster.close()"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder()"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.enabled(boolean)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.invalidHostNameAllowed(boolean)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.context(javax.net.ssl.SSLContext)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.SslSettings", "com.mongodb.connection.SslSettings$Builder.build()"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings.builder()"], ["boolean", "com.mongodb.connection.SslSettings.isEnabled()"], ["boolean", "com.mongodb.connection.SslSettings.isInvalidHostNameAllowed()"], ["javax.net.ssl.SSLContext", "com.mongodb.connection.SslSettings.getContext()"], ["boolean", "com.mongodb.connection.SslSettings.equals(java.lang.Object)"], ["int", "com.mongodb.connection.SslSettings.hashCode()"], ["java.lang.String", "com.mongodb.connection.SslSettings.toString()"], ["java.lang.Void", "com.mongodb.connection.SaslAuthenticator$1.run()"], ["java.lang.Object", "com.mongodb.connection.SaslAuthenticator$1.run()"], ["void", "com.mongodb.connection.DefaultConnectionPool$1.run()"], ["void", "com.mongodb.connection.NativeAuthenticator$1$1.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.NativeAuthenticator$1$1.onResult(java.lang.Object, java.lang.Throwable)"], ["boolean", "com.mongodb.connection.ClusterDescription$7.apply(com.mongodb.connection.ServerDescription)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.InsertProtocol.execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.InsertProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.connection.InsertProtocol.execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.UpdateProtocol.execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.UpdateProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.connection.UpdateProtocol.execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.InternalStreamConnectionInitializer.initialize(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer.initializeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ConnectionDescription>)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$OpenCompletionHandler.completed(java.lang.Void, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$OpenCompletionHandler.failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$OpenCompletionHandler.completed(java.lang.Object, java.lang.Object)"], ["boolean", "com.mongodb.connection.ClusterDescription$5.apply(com.mongodb.connection.ServerDescription)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$2$1.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$2$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.KillCursorProtocol$1.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.KillCursorProtocol$1.onResult(java.lang.Object, java.lang.Throwable)"], ["synchronized", "com.mongodb.connection.DefaultConnectionPool$3.void run()"], ["void", "com.mongodb.connection.ElementExtendingBsonWriter.writeEndDocument()"], ["void", "com.mongodb.connection.ElementExtendingBsonWriter.pipe(org.bson.BsonReader)"], ["int", "com.mongodb.connection.RequestMessage.getCurrentGlobalId()"], ["int", "com.mongodb.connection.RequestMessage.getId()"], ["com.mongodb.connection.OpCode", "com.mongodb.connection.RequestMessage.getOpCode()"], ["java.lang.String", "com.mongodb.connection.RequestMessage.getNamespace()"], ["com.mongodb.connection.MessageSettings", "com.mongodb.connection.RequestMessage.getSettings()"], ["void", "com.mongodb.connection.RequestMessage.encode(org.bson.io.BsonOutput, com.mongodb.session.SessionContext)"], ["com.mongodb.connection.RequestMessage$EncodingMetadata", "com.mongodb.connection.RequestMessage.getEncodingMetadata()"], ["void", "com.mongodb.connection.DefaultServer$DefaultServerStateListener.stateChanged(com.mongodb.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$2.compare(com.mongodb.bulk.BulkWriteError, com.mongodb.bulk.BulkWriteError)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$2.compare(java.lang.Object, java.lang.Object)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.heartbeatFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.minHeartbeatFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.addServerListener(com.mongodb.event.ServerListener)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.addServerMonitorListener(com.mongodb.event.ServerMonitorListener)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.ServerSettings", "com.mongodb.connection.ServerSettings$Builder.build()"], ["void", "com.mongodb.connection.InternalStreamConnection$2$1.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$2$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.start()"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.onResult(java.lang.Object, java.lang.Throwable)"], ["int", "com.mongodb.connection.ClusterDescription$2.compare(com.mongodb.connection.ServerDescription, com.mongodb.connection.ServerDescription)"], ["int", "com.mongodb.connection.ClusterDescription$2.compare(java.lang.Object, java.lang.Object)"], ["com.mongodb.connection.QueryResult", "com.mongodb.connection.QueryResult(com.mongodb.MongoNamespace, java.util.List<T>, long, com.mongodb.ServerAddress)"], ["com.mongodb.MongoNamespace", "com.mongodb.connection.QueryResult.getNamespace()"], ["com.mongodb.ServerCursor", "com.mongodb.connection.QueryResult.getCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.QueryResult.getAddress()"], ["com.mongodb.connection.ServerId", "com.mongodb.connection.ServerId(com.mongodb.connection.ClusterId, com.mongodb.ServerAddress)"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ServerId.getClusterId()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ServerId.getAddress()"], ["boolean", "com.mongodb.connection.ServerId.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerId.hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerId.toString()"], ["T", "com.mongodb.connection.ChangeEvent.getPreviousValue()"], ["T", "com.mongodb.connection.ChangeEvent.getNewValue()"], ["boolean", "com.mongodb.connection.ChangeEvent.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ChangeEvent.hashCode()"], ["java.lang.String", "com.mongodb.connection.ChangeEvent.toString()"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings.builder()"], ["int", "com.mongodb.connection.SocketSettings.getConnectTimeout(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.connection.SocketSettings.getReadTimeout(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.SocketSettings.isKeepAlive()"], ["int", "com.mongodb.connection.SocketSettings.getReceiveBufferSize()"], ["int", "com.mongodb.connection.SocketSettings.getSendBufferSize()"], ["boolean", "com.mongodb.connection.SocketSettings.equals(java.lang.Object)"], ["int", "com.mongodb.connection.SocketSettings.hashCode()"], ["java.lang.String", "com.mongodb.connection.SocketSettings.toString()"], ["void", "com.mongodb.connection.SaslAuthenticator.authenticate(com.mongodb.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder()"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.connectTimeout(int, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.readTimeout(int, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.keepAlive(boolean)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.receiveBufferSize(int)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.sendBufferSize(int)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.SocketSettings", "com.mongodb.connection.SocketSettings$Builder.build()"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.open()"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.close()"], ["boolean", "com.mongodb.connection.UsageTrackingInternalConnection.opened()"], ["boolean", "com.mongodb.connection.UsageTrackingInternalConnection.isClosed()"], ["org.bson.ByteBuf", "com.mongodb.connection.UsageTrackingInternalConnection.getBuffer(int)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["<T> T", "com.mongodb.connection.UsageTrackingInternalConnection.sendAndReceive(com.mongodb.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> void", "com.mongodb.connection.UsageTrackingInternalConnection.sendAndReceiveAsync(com.mongodb.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.connection.ResponseBuffers", "com.mongodb.connection.UsageTrackingInternalConnection.receiveMessage(int)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.UsageTrackingInternalConnection.getDescription()"], ["com.mongodb.connection.OpCode[]", "com.mongodb.connection.OpCode.values()"], ["com.mongodb.connection.OpCode", "com.mongodb.connection.OpCode.valueOf(java.lang.String)"], ["int", "com.mongodb.connection.OpCode.getValue()"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings.builder()"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings.builder(com.mongodb.connection.ServerSettings)"], ["long", "com.mongodb.connection.ServerSettings.getHeartbeatFrequency(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ServerSettings.getMinHeartbeatFrequency(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.ServerSettings.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerSettings.hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerSettings.toString()"], ["void", "com.mongodb.connection.PlainAuthenticator$1.handle(javax.security.auth.callback.Callback[])"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.minSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxWaitQueueSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxWaitTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxConnectionLifeTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxConnectionIdleTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maintenanceInitialDelay(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maintenanceFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.addConnectionPoolListener(com.mongodb.event.ConnectionPoolListener)"], ["com.mongodb.connection.ConnectionPoolSettings", "com.mongodb.connection.ConnectionPoolSettings$Builder.build()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)"], ["void", "com.mongodb.connection.SocketStream.open()"], ["org.bson.ByteBuf", "com.mongodb.connection.SocketStream.getBuffer(int)"], ["void", "com.mongodb.connection.SocketStream.write(java.util.List<org.bson.ByteBuf>)"], ["org.bson.ByteBuf", "com.mongodb.connection.SocketStream.read(int)"], ["void", "com.mongodb.connection.SocketStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.SocketStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.SocketStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.SocketStream.getAddress()"], ["void", "com.mongodb.connection.SocketStream.close()"], ["boolean", "com.mongodb.connection.SocketStream.isClosed()"], ["void", "com.mongodb.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(org.bson.ByteBuf, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.String", "com.mongodb.connection.InternalStreamConnection$LazyCommandDocument.getName()"], ["void", "com.mongodb.connection.DefaultServer$1.onResult(com.mongodb.connection.InternalConnection, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultServer$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.SendMessageCallback.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.SendMessageCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.Connection", "com.mongodb.connection.DefaultServer.getConnection()"], ["void", "com.mongodb.connection.DefaultServer.getConnectionAsync(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.DefaultServer.getDescription()"], ["void", "com.mongodb.connection.DefaultServer.invalidate()"], ["void", "com.mongodb.connection.DefaultServer.close()"], ["boolean", "com.mongodb.connection.DefaultServer.isClosed()"], ["void", "com.mongodb.connection.DefaultServer.connect()"], ["com.mongodb.connection.ClusterConnectionMode[]", "com.mongodb.connection.ClusterConnectionMode.values()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterConnectionMode.valueOf(java.lang.String)"], ["java.lang.Void", "com.mongodb.connection.KillCursorProtocol.execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.KillCursorProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.KillCursorProtocol.setCommandListener(com.mongodb.event.CommandListener)"], ["java.lang.Object", "com.mongodb.connection.KillCursorProtocol.execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$1$1.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$1$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ScramSha1Authenticator$DefaultRandomStringGenerator", "com.mongodb.connection.ScramSha1Authenticator$DefaultRandomStringGenerator()"], ["java.lang.String", "com.mongodb.connection.ScramSha1Authenticator$DefaultRandomStringGenerator.generate(int)"], ["void", "com.mongodb.connection.InternalStreamConnection$MessageHeaderCallback.onResult(org.bson.ByteBuf, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$MessageHeaderCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["boolean", "com.mongodb.connection.ClusterDescription$4.apply(com.mongodb.connection.ServerDescription)"], ["java.lang.Void", "com.mongodb.connection.SaslAuthenticator$2.run()"], ["java.lang.Object", "com.mongodb.connection.SaslAuthenticator$2.run()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$8.getClusterType()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, java.util.List<com.mongodb.connection.ServerDescription>)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, java.util.List<com.mongodb.connection.ServerDescription>, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings)"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.connection.ClusterDescription.getClusterSettings()"], ["com.mongodb.connection.ServerSettings", "com.mongodb.connection.ClusterDescription.getServerSettings()"], ["boolean", "com.mongodb.connection.ClusterDescription.isCompatibleWithDriver()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ClusterDescription.findServerIncompatiblyOlderThanDriver()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ClusterDescription.findServerIncompatiblyNewerThanDriver()"], ["boolean", "com.mongodb.connection.ClusterDescription.hasReadableServer(com.mongodb.ReadPreference)"], ["boolean", "com.mongodb.connection.ClusterDescription.hasWritableServer()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterDescription.getConnectionMode()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterDescription.getType()"], ["java.lang.Integer", "com.mongodb.connection.ClusterDescription.getLogicalSessionTimeoutMinutes()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ClusterDescription.getByServerAddress(com.mongodb.ServerAddress)"], ["boolean", "com.mongodb.connection.ClusterDescription.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterDescription.hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterDescription.toString()"], ["java.lang.String", "com.mongodb.connection.ClusterDescription.getShortDescription()"], ["void", "com.mongodb.connection.DefaultConnectionPool$2.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$2.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.SaslAuthenticator$Continuator.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.SaslAuthenticator$Continuator.start()"], ["void", "com.mongodb.connection.SaslAuthenticator$Continuator.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.Server", "com.mongodb.connection.BaseCluster.selectServer(com.mongodb.selector.ServerSelector)"], ["void", "com.mongodb.connection.BaseCluster.selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.BaseCluster.getDescription()"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.connection.BaseCluster.getSettings()"], ["com.mongodb.connection.ClusterableServerFactory", "com.mongodb.connection.BaseCluster.getServerFactory()"], ["void", "com.mongodb.connection.BaseCluster.close()"], ["boolean", "com.mongodb.connection.BaseCluster.isClosed()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.BaseCluster.getCurrentDescription()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings.builder()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings.builder(com.mongodb.connection.ConnectionPoolSettings)"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMaxSize()"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMinSize()"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMaxWaitQueueSize()"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxWaitTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxConnectionLifeTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxConnectionIdleTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaintenanceInitialDelay(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaintenanceFrequency(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.ConnectionPoolSettings.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionPoolSettings.hashCode()"], ["java.lang.String", "com.mongodb.connection.ConnectionPoolSettings.toString()"], ["void", "com.mongodb.connection.netty.NettyStream$4.run()"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder", "com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder.allocator(io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder", "com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder.socketChannelClass(java.lang.Class<? extends io.netty.channel.socket.SocketChannel>)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder", "com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder.eventLoopGroup(io.netty.channel.EventLoopGroup)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory", "com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder.build()"], ["void", "com.mongodb.connection.netty.NettyStream$2.operationComplete(io.netty.channel.ChannelFuture)"], ["void", "com.mongodb.connection.netty.NettyStream$2.operationComplete(io.netty.util.concurrent.Future)"], ["void", "com.mongodb.connection.netty.NettyStream$InboundBufferHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyStream.getBuffer(int)"], ["void", "com.mongodb.connection.netty.NettyStream.open()"], ["void", "com.mongodb.connection.netty.NettyStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.netty.NettyStream.write(java.util.List<org.bson.ByteBuf>)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyStream.read(int)"], ["void", "com.mongodb.connection.netty.NettyStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.netty.NettyStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.netty.NettyStream.getAddress()"], ["void", "com.mongodb.connection.netty.NettyStream.close()"], ["boolean", "com.mongodb.connection.netty.NettyStream.isClosed()"], ["com.mongodb.connection.SocketSettings", "com.mongodb.connection.netty.NettyStream.getSettings()"], ["com.mongodb.connection.SslSettings", "com.mongodb.connection.netty.NettyStream.getSslSettings()"], ["io.netty.channel.EventLoopGroup", "com.mongodb.connection.netty.NettyStream.getWorkerGroup()"], ["java.lang.Class<? extends io.netty.channel.socket.SocketChannel>", "com.mongodb.connection.netty.NettyStream.getSocketChannelClass()"], ["io.netty.buffer.ByteBufAllocator", "com.mongodb.connection.netty.NettyStream.getAllocator()"], ["void", "com.mongodb.connection.netty.NettyStream$5.run()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyBufferProvider.getBuffer(int)"], ["void", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.completed(T)"], ["void", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.failed(java.lang.Throwable)"], ["T", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.get()"], ["void", "com.mongodb.connection.netty.NettyStream$3.operationComplete(io.netty.channel.ChannelFuture)"], ["void", "com.mongodb.connection.netty.NettyStream$3.operationComplete(io.netty.util.concurrent.Future)"], ["void", "com.mongodb.connection.netty.NettyStream$1.initChannel(io.netty.channel.socket.SocketChannel)"], ["void", "com.mongodb.connection.netty.NettyStream$1.initChannel(io.netty.channel.Channel)"], ["void", "com.mongodb.connection.netty.ReadTimeoutHandler$ReadTimeoutTask.run()"], ["void", "com.mongodb.connection.netty.NettyStream$2$1.operationComplete(io.netty.channel.ChannelFuture)"], ["void", "com.mongodb.connection.netty.NettyStream$2$1.operationComplete(io.netty.util.concurrent.Future)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory", "com.mongodb.connection.netty.NettyStreamFactoryFactory()"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory", "com.mongodb.connection.netty.NettyStreamFactoryFactory(io.netty.channel.EventLoopGroup, io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder", "com.mongodb.connection.netty.NettyStreamFactoryFactory.builder()"], ["com.mongodb.connection.StreamFactory", "com.mongodb.connection.netty.NettyStreamFactoryFactory.create(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["java.lang.String", "com.mongodb.connection.netty.NettyStreamFactoryFactory.toString()"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup, java.lang.Class<? extends io.netty.channel.socket.SocketChannel>, io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup, io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup)"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.netty.NettyStreamFactory.create(com.mongodb.ServerAddress)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.capacity()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(int, byte)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.remaining()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(byte[], int, int)"], ["boolean", "com.mongodb.connection.netty.NettyByteBuf.hasRemaining()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(byte)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.flip()"], ["byte[]", "com.mongodb.connection.netty.NettyByteBuf.array()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.limit()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.position(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.clear()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.order(java.nio.ByteOrder)"], ["byte", "com.mongodb.connection.netty.NettyByteBuf.get()"], ["byte", "com.mongodb.connection.netty.NettyByteBuf.get(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(byte[])"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(int, byte[])"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(byte[], int, int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(int, byte[], int, int)"], ["long", "com.mongodb.connection.netty.NettyByteBuf.getLong()"], ["long", "com.mongodb.connection.netty.NettyByteBuf.getLong(int)"], ["double", "com.mongodb.connection.netty.NettyByteBuf.getDouble()"], ["double", "com.mongodb.connection.netty.NettyByteBuf.getDouble(int)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.getInt()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.getInt(int)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.position()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.limit(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.asReadOnly()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.duplicate()"], ["java.nio.ByteBuffer", "com.mongodb.connection.netty.NettyByteBuf.asNIO()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.getReferenceCount()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.retain()"], ["void", "com.mongodb.connection.netty.NettyByteBuf.release()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, java.nio.channels.AsynchronousChannelGroup)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.AsynchronousSocketChannelStreamFactory.create(com.mongodb.ServerAddress)"], ["boolean", "com.mongodb.connection.ClusterDescription$6.apply(com.mongodb.connection.ServerDescription)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$AsyncWritableByteChannelAdapter$WriteCompletionHandler.completed(java.lang.Integer, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$AsyncWritableByteChannelAdapter$WriteCompletionHandler.failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$AsyncWritableByteChannelAdapter$WriteCompletionHandler.completed(java.lang.Object, java.lang.Object)"], ["com.mongodb.connection.ClusterableServer", "com.mongodb.connection.DefaultClusterableServerFactory.create(com.mongodb.ServerAddress, com.mongodb.event.ServerListener, com.mongodb.connection.ClusterClock)"], ["com.mongodb.connection.ServerSettings", "com.mongodb.connection.DefaultClusterableServerFactory.getSettings()"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$2.completed(java.lang.Void)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$2.failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$2.completed(java.lang.Object)"], ["com.mongodb.connection.ServerMonitor", "com.mongodb.connection.DefaultServerMonitorFactory.create(com.mongodb.connection.ChangeListener<com.mongodb.connection.ServerDescription>)"], ["com.mongodb.connection.SplittablePayload$Type[]", "com.mongodb.connection.SplittablePayload$Type.values()"], ["com.mongodb.connection.SplittablePayload$Type", "com.mongodb.connection.SplittablePayload$Type.valueOf(java.lang.String)"], ["void", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(T, java.lang.Throwable)"], ["java.lang.Boolean", "com.mongodb.connection.AbstractByteBufBsonDocument$1.find(org.bson.BsonReader)"], ["java.lang.Boolean", "com.mongodb.connection.AbstractByteBufBsonDocument$1.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$1.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$1.find(org.bson.BsonReader)"], ["int", "com.mongodb.connection.AbstractReferenceCounted.getCount()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.connection.AbstractReferenceCounted.retain()"], ["void", "com.mongodb.connection.AbstractReferenceCounted.release()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$6.getClusterType()"], ["void", "com.mongodb.connection.DeleteProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.DeleteProtocol$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion(java.util.List<java.lang.Integer>)"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion(int, int)"], ["int", "com.mongodb.connection.ServerVersion.compareTo(com.mongodb.connection.ServerVersion)"], ["boolean", "com.mongodb.connection.ServerVersion.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerVersion.hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerVersion.toString()"], ["int", "com.mongodb.connection.ServerVersion.compareTo(java.lang.Object)"], ["void", "com.mongodb.connection.NativeAuthenticator$1.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.NativeAuthenticator$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.open()"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.close()"], ["boolean", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.opened()"], ["boolean", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.isClosed()"], ["org.bson.ByteBuf", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.getBuffer(int)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["<T> T", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.sendAndReceive(com.mongodb.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.sendAndReceiveAsync(com.mongodb.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.connection.ResponseBuffers", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.receiveMessage(int)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.getDescription()"], ["void", "com.mongodb.connection.MultiServerCluster$DefaultServerStateListener.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.description(java.lang.String)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.hosts(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.mode(com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.requiredReplicaSetName(java.lang.String)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.requiredClusterType(com.mongodb.connection.ClusterType)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.serverSelector(com.mongodb.selector.ServerSelector)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.serverSelectionTimeout(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.maxWaitQueueSize(int)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.addClusterListener(com.mongodb.event.ClusterListener)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.connection.ClusterSettings$Builder.build()"], ["void", "com.mongodb.connection.GetMoreProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["void", "com.mongodb.connection.GetMoreProtocol.setCommandListener(com.mongodb.event.CommandListener)"], ["java.lang.Object", "com.mongodb.connection.GetMoreProtocol.execute(com.mongodb.connection.InternalConnection)"], ["java.lang.String", "com.mongodb.connection.ByteBufBsonDocument.toJson()"], ["java.lang.String", "com.mongodb.connection.ByteBufBsonDocument.toJson(org.bson.json.JsonWriterSettings)"], ["org.bson.BsonDocument", "com.mongodb.connection.ByteBufBsonDocument.clone()"], ["java.lang.Object", "com.mongodb.connection.ByteBufBsonDocument.clone()"], ["void", "com.mongodb.connection.FutureAsyncCompletionHandler.completed(T)"], ["void", "com.mongodb.connection.FutureAsyncCompletionHandler.failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.FutureAsyncCompletionHandler.getOpen()"], ["void", "com.mongodb.connection.FutureAsyncCompletionHandler.getWrite()"], ["T", "com.mongodb.connection.FutureAsyncCompletionHandler.getRead()"], ["com.mongodb.connection.ServerConnectionState[]", "com.mongodb.connection.ServerConnectionState.values()"], ["com.mongodb.connection.ServerConnectionState", "com.mongodb.connection.ServerConnectionState.valueOf(java.lang.String)"], ["com.mongodb.connection.SplittablePayload", "com.mongodb.connection.SplittablePayload(com.mongodb.connection.SplittablePayload$Type, java.util.List<org.bson.BsonDocument>)"], ["com.mongodb.connection.SplittablePayload$Type", "com.mongodb.connection.SplittablePayload.getPayloadType()"], ["java.lang.String", "com.mongodb.connection.SplittablePayload.getPayloadName()"], ["int", "com.mongodb.connection.SplittablePayload.getPosition()"], ["void", "com.mongodb.connection.SplittablePayload.setPosition(int)"], ["boolean", "com.mongodb.connection.SplittablePayload.hasAnotherSplit()"], ["com.mongodb.connection.SplittablePayload", "com.mongodb.connection.SplittablePayload.getNextSplit()"], ["boolean", "com.mongodb.connection.SplittablePayload.isEmpty()"], ["void", "com.mongodb.connection.WriteProtocol.setCommandListener(com.mongodb.event.CommandListener)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.WriteProtocol.execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.WriteProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.connection.WriteProtocol.execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.UsageTrackingInternalConnection", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.create(boolean)"], ["void", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.close(com.mongodb.connection.UsageTrackingInternalConnection)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.shouldPrune(com.mongodb.connection.UsageTrackingInternalConnection)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.shouldPrune(java.lang.Object)"], ["void", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.close(java.lang.Object)"], ["java.lang.Object", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.create(boolean)"], ["com.mongodb.connection.ClusterType[]", "com.mongodb.connection.ClusterType.values()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterType.valueOf(java.lang.String)"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$4.getClusterType()"], ["java.lang.Boolean", "com.mongodb.connection.AbstractByteBufBsonDocument$3.find(org.bson.BsonReader)"], ["java.lang.Boolean", "com.mongodb.connection.AbstractByteBufBsonDocument$3.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$3.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$3.find(org.bson.BsonReader)"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ClusterId()"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ClusterId(java.lang.String)"], ["java.lang.String", "com.mongodb.connection.ClusterId.getValue()"], ["java.lang.String", "com.mongodb.connection.ClusterId.getDescription()"], ["boolean", "com.mongodb.connection.ClusterId.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterId.hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterId.toString()"], ["void", "com.mongodb.connection.InternalStreamConnection$2.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$2.onResult(java.lang.Object, java.lang.Throwable)"], ["int", "com.mongodb.connection.Compressor$ByteBufInputStream.read(byte[], int, int)"], ["int", "com.mongodb.connection.Compressor$ByteBufInputStream.read()"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$4.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$4.onResult(java.lang.Object, java.lang.Throwable)"], ["<T> T", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.execute(com.mongodb.connection.LegacyProtocol<T>, com.mongodb.connection.InternalConnection)"], ["<T> void", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.executeAsync(com.mongodb.connection.LegacyProtocol<T>, com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)"], ["<T> T", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.execute(com.mongodb.connection.CommandProtocol<T>, com.mongodb.connection.InternalConnection, com.mongodb.session.SessionContext)"], ["<T> void", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.executeAsync(com.mongodb.connection.CommandProtocol<T>, com.mongodb.connection.InternalConnection, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["boolean", "com.mongodb.connection.ClusterDescription$8.apply(com.mongodb.connection.ServerDescription)"], ["void", "com.mongodb.connection.WriteProtocol$UnacknowledgedWriteResultCallback.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.WriteProtocol$UnacknowledgedWriteResultCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$2.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$2.onResult(java.lang.Object, java.lang.Throwable)"], ["int", "com.mongodb.connection.ReplyHeader.getMessageLength()"], ["int", "com.mongodb.connection.ReplyHeader.getRequestId()"], ["int", "com.mongodb.connection.ReplyHeader.getResponseTo()"], ["int", "com.mongodb.connection.ReplyHeader.getResponseFlags()"], ["long", "com.mongodb.connection.ReplyHeader.getCursorId()"], ["int", "com.mongodb.connection.ReplyHeader.getStartingFrom()"], ["int", "com.mongodb.connection.ReplyHeader.getNumberReturned()"], ["boolean", "com.mongodb.connection.ReplyHeader.isCursorNotFound()"], ["boolean", "com.mongodb.connection.ReplyHeader.isQueryFailure()"], ["void", "com.mongodb.connection.X509Authenticator$1.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.X509Authenticator$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$1.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder.group(java.nio.channels.AsynchronousChannelGroup)"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder.build()"], ["com.mongodb.connection.ReplyHeader", "com.mongodb.connection.ReplyMessage.getReplyHeader()"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$1.onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$1.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.String", "com.mongodb.connection.PlainAuthenticator.getMechanismName()"], ["void", "com.mongodb.connection.SaslAuthenticator$2$1.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.SaslAuthenticator$2$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.DeleteProtocol.execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.DeleteProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.connection.DeleteProtocol.execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$2.getClusterType()"], ["org.bson.BsonValue", "com.mongodb.connection.AbstractByteBufBsonDocument$5.find(org.bson.BsonReader)"], ["org.bson.BsonValue", "com.mongodb.connection.AbstractByteBufBsonDocument$5.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$5.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$5.find(org.bson.BsonReader)"], ["com.mongodb.connection.InternalConnection", "com.mongodb.connection.DefaultConnectionPool.get()"], ["com.mongodb.connection.InternalConnection", "com.mongodb.connection.DefaultConnectionPool.get(long, java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.connection.DefaultConnectionPool.getAsync(com.mongodb.async.SingleResultCallback<com.mongodb.connection.InternalConnection>)"], ["void", "com.mongodb.connection.DefaultConnectionPool.invalidate()"], ["void", "com.mongodb.connection.DefaultConnectionPool.close()"], ["void", "com.mongodb.connection.DefaultConnectionPool.doMaintenance()"], ["java.lang.Void", "com.mongodb.connection.SaslAuthenticator$Continuator$1.run()"], ["java.lang.Object", "com.mongodb.connection.SaslAuthenticator$Continuator$1.run()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory.builder()"], ["com.mongodb.connection.StreamFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory.create(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$3.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$3.onResult(java.lang.Object, java.lang.Throwable)"], ["int", "com.mongodb.connection.RequestMessage$EncodingMetadata.getFirstDocumentPosition()"], ["com.mongodb.connection.ReplyHeader", "com.mongodb.connection.ResponseBuffers.getReplyHeader()"], ["org.bson.ByteBuf", "com.mongodb.connection.ResponseBuffers.getBodyByteBuffer()"], ["void", "com.mongodb.connection.ResponseBuffers.reset()"], ["void", "com.mongodb.connection.ResponseBuffers.close()"], ["java.lang.String", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.getMechanismName()"], ["boolean", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.hasInitialResponse()"], ["byte[]", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.evaluateChallenge(byte[])"], ["boolean", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.isComplete()"], ["byte[]", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.unwrap(byte[], int, int)"], ["byte[]", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.wrap(byte[], int, int)"], ["java.lang.Object", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.getNegotiatedProperty(java.lang.String)"], ["void", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.dispose()"], ["java.lang.String", "com.mongodb.connection.GSSAPIAuthenticator.getMechanismName()"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$2.onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$4.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$4.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandProtocolImpl$1.onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.connection.SocketChannelStream.open()"], ["org.bson.ByteBuf", "com.mongodb.connection.SocketChannelStream.getBuffer(int)"], ["void", "com.mongodb.connection.SocketChannelStream.write(java.util.List<org.bson.ByteBuf>)"], ["org.bson.ByteBuf", "com.mongodb.connection.SocketChannelStream.read(int)"], ["void", "com.mongodb.connection.SocketChannelStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.SocketChannelStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.SocketChannelStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.SocketChannelStream.getAddress()"], ["void", "com.mongodb.connection.SocketChannelStream.close()"], ["boolean", "com.mongodb.connection.SocketChannelStream.isClosed()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$5.getClusterType()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, com.mongodb.connection.ServerType, int, int, int)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, com.mongodb.connection.ServerType, int, int, int, java.util.List<java.lang.String>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ConnectionDescription.getServerAddress()"], ["com.mongodb.connection.ConnectionId", "com.mongodb.connection.ConnectionDescription.getConnectionId()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ConnectionDescription.getServerVersion()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ConnectionDescription.getServerType()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxBatchCount()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxDocumentSize()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxMessageSize()"], ["int", "com.mongodb.connection.ConnectionDescription.getDefaultMaxMessageSize()"], ["int", "com.mongodb.connection.ConnectionDescription.getDefaultMaxWriteBatchSize()"], ["boolean", "com.mongodb.connection.ConnectionDescription.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionDescription.hashCode()"], ["java.lang.Integer", "com.mongodb.connection.AbstractByteBufBsonDocument$2.find(org.bson.BsonReader)"], ["java.lang.Integer", "com.mongodb.connection.AbstractByteBufBsonDocument$2.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$2.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$2.find(org.bson.BsonReader)"], ["com.mongodb.connection.DefaultClusterFactory", "com.mongodb.connection.DefaultClusterFactory()"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener)"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener, com.mongodb.event.CommandListener)"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.client.MongoDriverInformation)"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.createCluster(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.client.MongoDriverInformation)"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.createCluster(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.client.MongoDriverInformation, java.util.List<com.mongodb.MongoCompressor>)"], ["void", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor$1.onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultServerMonitor.start()"], ["void", "com.mongodb.connection.DefaultServerMonitor.connect()"], ["void", "com.mongodb.connection.DefaultServerMonitor.close()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.InternalStreamConnection.getDescription()"], ["void", "com.mongodb.connection.InternalStreamConnection.open()"], ["void", "com.mongodb.connection.InternalStreamConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.InternalStreamConnection.close()"], ["boolean", "com.mongodb.connection.InternalStreamConnection.opened()"], ["boolean", "com.mongodb.connection.InternalStreamConnection.isClosed()"], ["<T> T", "com.mongodb.connection.InternalStreamConnection.sendAndReceive(com.mongodb.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> void", "com.mongodb.connection.InternalStreamConnection.sendAndReceiveAsync(com.mongodb.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["void", "com.mongodb.connection.InternalStreamConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["com.mongodb.connection.ResponseBuffers", "com.mongodb.connection.InternalStreamConnection.receiveMessage(int)"], ["void", "com.mongodb.connection.InternalStreamConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.InternalStreamConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)"], ["org.bson.ByteBuf", "com.mongodb.connection.InternalStreamConnection.getBuffer(int)"], ["com.mongodb.connection.DefaultServerConnection", "com.mongodb.connection.DefaultServerConnection.retain()"], ["void", "com.mongodb.connection.DefaultServerConnection.release()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.DefaultServerConnection.getDescription()"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.DefaultServerConnection.insert(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.InsertRequest)"], ["void", "com.mongodb.connection.DefaultServerConnection.insertAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.InsertRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.DefaultServerConnection.update(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.UpdateRequest)"], ["void", "com.mongodb.connection.DefaultServerConnection.updateAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.UpdateRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.DefaultServerConnection.delete(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.DeleteRequest)"], ["void", "com.mongodb.connection.DefaultServerConnection.deleteAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.DeleteRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["<T> T", "com.mongodb.connection.DefaultServerConnection.command(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)"], ["<T> T", "com.mongodb.connection.DefaultServerConnection.command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> T", "com.mongodb.connection.DefaultServerConnection.command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, boolean, com.mongodb.connection.SplittablePayload, org.bson.FieldNameValidator)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.commandAsync(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<T>)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.commandAsync(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.commandAsync(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, boolean, com.mongodb.connection.SplittablePayload, org.bson.FieldNameValidator, com.mongodb.async.SingleResultCallback<T>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.connection.DefaultServerConnection.query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.connection.DefaultServerConnection.query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.queryAsync(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.queryAsync(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.connection.DefaultServerConnection.getMore(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.getMoreAsync(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["void", "com.mongodb.connection.DefaultServerConnection.killCursor(java.util.List<java.lang.Long>)"], ["void", "com.mongodb.connection.DefaultServerConnection.killCursor(com.mongodb.MongoNamespace, java.util.List<java.lang.Long>)"], ["void", "com.mongodb.connection.DefaultServerConnection.killCursorAsync(java.util.List<java.lang.Long>, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.DefaultServerConnection.killCursorAsync(com.mongodb.MongoNamespace, java.util.List<java.lang.Long>, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.connection.DefaultServerConnection.retain()"], ["com.mongodb.connection.Connection", "com.mongodb.connection.DefaultServerConnection.retain()"], ["com.mongodb.connection.AsyncConnection", "com.mongodb.connection.DefaultServerConnection.retain()"], ["void", "com.mongodb.connection.QueryProtocol.setCommandListener(com.mongodb.event.CommandListener)"], ["com.mongodb.event.CommandListener", "com.mongodb.connection.QueryProtocol.getCommandListener()"], ["boolean", "com.mongodb.connection.QueryProtocol.isTailableCursor()"], ["boolean", "com.mongodb.connection.QueryProtocol.isSlaveOk()"], ["boolean", "com.mongodb.connection.QueryProtocol.isOplogReplay()"], ["boolean", "com.mongodb.connection.QueryProtocol.isNoCursorTimeout()"], ["boolean", "com.mongodb.connection.QueryProtocol.isAwaitData()"], ["boolean", "com.mongodb.connection.QueryProtocol.isPartial()"], ["void", "com.mongodb.connection.QueryProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["java.lang.Object", "com.mongodb.connection.QueryProtocol.execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.InternalConnection", "com.mongodb.connection.InternalStreamConnectionFactory.create(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.BulkWriteBatchCombiner", "com.mongodb.connection.BulkWriteBatchCombiner(com.mongodb.ServerAddress, boolean, com.mongodb.WriteConcern)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addResult(com.mongodb.bulk.BulkWriteResult, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addErrorResult(com.mongodb.MongoBulkWriteException, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addWriteErrorResult(com.mongodb.bulk.BulkWriteError, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addWriteConcernErrorResult(com.mongodb.bulk.WriteConcernError)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addErrorResult(java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.internal.connection.IndexMap)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.BulkWriteBatchCombiner.getResult()"], ["boolean", "com.mongodb.connection.BulkWriteBatchCombiner.shouldStopSendingMoreBatches()"], ["boolean", "com.mongodb.connection.BulkWriteBatchCombiner.hasErrors()"], ["com.mongodb.MongoBulkWriteException", "com.mongodb.connection.BulkWriteBatchCombiner.getError()"], ["void", "com.mongodb.connection.AbstractByteBufBsonDocument.clear()"], ["org.bson.BsonValue", "com.mongodb.connection.AbstractByteBufBsonDocument.put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonDocument", "com.mongodb.connection.AbstractByteBufBsonDocument.append(java.lang.String, org.bson.BsonValue)"], ["void", "com.mongodb.connection.AbstractByteBufBsonDocument.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["org.bson.BsonValue", "com.mongodb.connection.AbstractByteBufBsonDocument.remove(java.lang.Object)"], ["boolean", "com.mongodb.connection.AbstractByteBufBsonDocument.isEmpty()"], ["int", "com.mongodb.connection.AbstractByteBufBsonDocument.size()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "com.mongodb.connection.AbstractByteBufBsonDocument.entrySet()"], ["boolean", "com.mongodb.connection.AbstractByteBufBsonDocument.containsKey(java.lang.Object)"], ["boolean", "com.mongodb.connection.AbstractByteBufBsonDocument.containsValue(java.lang.Object)"], ["org.bson.BsonValue", "com.mongodb.connection.AbstractByteBufBsonDocument.get(java.lang.Object)"], ["java.lang.String", "com.mongodb.connection.AbstractByteBufBsonDocument.getFirstKey()"], ["boolean", "com.mongodb.connection.AbstractByteBufBsonDocument.equals(java.lang.Object)"], ["int", "com.mongodb.connection.AbstractByteBufBsonDocument.hashCode()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument.remove(java.lang.Object)"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument.put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument.get(java.lang.Object)"], ["com.mongodb.connection.ServerId", "com.mongodb.connection.ConnectionId.getServerId()"], ["int", "com.mongodb.connection.ConnectionId.getLocalValue()"], ["java.lang.Integer", "com.mongodb.connection.ConnectionId.getServerValue()"], ["boolean", "com.mongodb.connection.ConnectionId.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionId.hashCode()"], ["java.lang.String", "com.mongodb.connection.ConnectionId.toString()"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder()"], ["com.mongodb.connection.MessageSettings", "com.mongodb.connection.MessageSettings$Builder.build()"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder.maxDocumentSize(int)"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder.maxMessageSize(int)"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder.maxBatchCount(int)"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder.serverVersion(com.mongodb.connection.ServerVersion)"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder.serverType(com.mongodb.connection.ServerType)"], ["com.mongodb.connection.Connection", "com.mongodb.connection.DefaultConnectionFactory.create(com.mongodb.connection.InternalConnection, com.mongodb.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.connection.AsyncConnection", "com.mongodb.connection.DefaultConnectionFactory.createAsync(com.mongodb.connection.InternalConnection, com.mongodb.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)"], ["void", "com.mongodb.connection.InternalStreamConnection$3.completed(java.lang.Void)"], ["void", "com.mongodb.connection.InternalStreamConnection$3.failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$3.completed(java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$1.completed(java.lang.Void)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$1.failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$1.completed(java.lang.Object)"], ["com.mongodb.connection.SocketStreamFactory", "com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.SocketStreamFactory", "com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.SocketStreamFactory.create(com.mongodb.ServerAddress)"], ["void", "com.mongodb.connection.InternalStreamConnection$1.completed(java.lang.Void)"], ["void", "com.mongodb.connection.InternalStreamConnection$1.failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$1.completed(java.lang.Object)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings.builder()"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings.builder(com.mongodb.connection.ClusterSettings)"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getDescription()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterSettings.getMode()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterSettings.getRequiredClusterType()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getRequiredReplicaSetName()"], ["com.mongodb.selector.ServerSelector", "com.mongodb.connection.ClusterSettings.getServerSelector()"], ["long", "com.mongodb.connection.ClusterSettings.getServerSelectionTimeout(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.connection.ClusterSettings.getMaxWaitQueueSize()"], ["boolean", "com.mongodb.connection.ClusterSettings.equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterSettings.hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.toString()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getShortDescription()"], ["java.lang.String", "com.mongodb.connection.ScramSha1Authenticator.getMechanismName()"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.order(java.nio.ByteOrder)"], ["int", "com.mongodb.connection.CompositeByteBuf.capacity()"], ["int", "com.mongodb.connection.CompositeByteBuf.remaining()"], ["boolean", "com.mongodb.connection.CompositeByteBuf.hasRemaining()"], ["int", "com.mongodb.connection.CompositeByteBuf.position()"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.position(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.clear()"], ["int", "com.mongodb.connection.CompositeByteBuf.limit()"], ["byte", "com.mongodb.connection.CompositeByteBuf.get()"], ["byte", "com.mongodb.connection.CompositeByteBuf.get(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.get(byte[])"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.get(int, byte[])"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.get(byte[], int, int)"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.get(int, byte[], int, int)"], ["long", "com.mongodb.connection.CompositeByteBuf.getLong()"], ["long", "com.mongodb.connection.CompositeByteBuf.getLong(int)"], ["double", "com.mongodb.connection.CompositeByteBuf.getDouble()"], ["double", "com.mongodb.connection.CompositeByteBuf.getDouble(int)"], ["int", "com.mongodb.connection.CompositeByteBuf.getInt()"], ["int", "com.mongodb.connection.CompositeByteBuf.getInt(int)"], ["byte[]", "com.mongodb.connection.CompositeByteBuf.array()"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.limit(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.put(int, byte)"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.put(byte[], int, int)"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.put(byte)"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.flip()"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.asReadOnly()"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.duplicate()"], ["java.nio.ByteBuffer", "com.mongodb.connection.CompositeByteBuf.asNIO()"], ["int", "com.mongodb.connection.CompositeByteBuf.getReferenceCount()"], ["org.bson.ByteBuf", "com.mongodb.connection.CompositeByteBuf.retain()"], ["void", "com.mongodb.connection.CompositeByteBuf.release()"], ["boolean", "com.mongodb.connection.ClusterClockAdvancingSessionContext.hasSession()"], ["org.bson.BsonDocument", "com.mongodb.connection.ClusterClockAdvancingSessionContext.getSessionId()"], ["boolean", "com.mongodb.connection.ClusterClockAdvancingSessionContext.isCausallyConsistent()"], ["long", "com.mongodb.connection.ClusterClockAdvancingSessionContext.advanceTransactionNumber()"], ["org.bson.BsonTimestamp", "com.mongodb.connection.ClusterClockAdvancingSessionContext.getOperationTime()"], ["void", "com.mongodb.connection.ClusterClockAdvancingSessionContext.advanceOperationTime(org.bson.BsonTimestamp)"], ["org.bson.BsonDocument", "com.mongodb.connection.ClusterClockAdvancingSessionContext.getClusterTime()"], ["void", "com.mongodb.connection.ClusterClockAdvancingSessionContext.advanceClusterTime(org.bson.BsonDocument)"], ["org.bson.ByteBuf", "com.mongodb.connection.AsynchronousSocketChannelStream.getBuffer(int)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.open()"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.write(java.util.List<org.bson.ByteBuf>)"], ["org.bson.ByteBuf", "com.mongodb.connection.AsynchronousSocketChannelStream.read(int)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.AsynchronousSocketChannelStream.getAddress()"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.close()"], ["boolean", "com.mongodb.connection.AsynchronousSocketChannelStream.isClosed()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.AsynchronousSocketChannelStream.getServerAddress()"], ["com.mongodb.connection.SocketSettings", "com.mongodb.connection.AsynchronousSocketChannelStream.getSettings()"], ["java.nio.channels.AsynchronousChannelGroup", "com.mongodb.connection.AsynchronousSocketChannelStream.getGroup()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$7.getClusterType()"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings.builder()"], ["int", "com.mongodb.connection.MessageSettings.getMaxDocumentSize()"], ["int", "com.mongodb.connection.MessageSettings.getMaxMessageSize()"], ["int", "com.mongodb.connection.MessageSettings.getMaxBatchCount()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.MessageSettings.getServerVersion()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.MessageSettings.getServerType()"], ["void", "com.mongodb.connection.ResponseCallback.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.ResponseCallback.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$CommandEventSender.sendStartedEvent()"], ["void", "com.mongodb.connection.InternalStreamConnection$CommandEventSender.sendFailedEvent(java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$CommandEventSender.sendSucceededEvent(com.mongodb.connection.ResponseBuffers)"], ["void", "com.mongodb.connection.InternalStreamConnection$CommandEventSender.sendSucceededEventForOneWayCommand()"], ["int", "com.mongodb.connection.MessageHeader.getMessageLength()"], ["int", "com.mongodb.connection.MessageHeader.getRequestId()"], ["int", "com.mongodb.connection.MessageHeader.getResponseTo()"], ["int", "com.mongodb.connection.MessageHeader.getOpCode()"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$2.onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$2.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$3.getClusterType()"], ["java.lang.Boolean", "com.mongodb.connection.AbstractByteBufBsonDocument$4.find(org.bson.BsonReader)"], ["java.lang.Boolean", "com.mongodb.connection.AbstractByteBufBsonDocument$4.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$4.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$4.find(org.bson.BsonReader)"], ["com.mongodb.connection.ByteBufferBsonOutput", "com.mongodb.connection.ByteBufferBsonOutput(com.mongodb.connection.BufferProvider)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.writeBytes(byte[], int, int)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.writeByte(int)"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.getPosition()"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.getSize()"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.pipe(java.io.OutputStream)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.truncateToPosition(int)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.close()"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$1.onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$BasicCompletionHandler.completed(java.lang.Integer, java.lang.Void)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$BasicCompletionHandler.failed(java.lang.Throwable, java.lang.Void)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$BasicCompletionHandler.failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$BasicCompletionHandler.completed(java.lang.Object, java.lang.Object)"], ["void", "com.mongodb.connection.InternalStreamConnection$5.completed(org.bson.ByteBuf)"], ["void", "com.mongodb.connection.InternalStreamConnection$5.failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$5.completed(java.lang.Object)"], ["int", "com.mongodb.connection.LevelCountingBsonWriter.getCurrentLevel()"], ["org.bson.BsonBinaryWriter", "com.mongodb.connection.LevelCountingBsonWriter.getBsonBinaryWriter()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeStartDocument(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeStartDocument()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeEndDocument()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeStartArray(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeStartArray()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeEndArray()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeBinaryData(java.lang.String, org.bson.BsonBinary)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeBinaryData(org.bson.BsonBinary)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeBoolean(java.lang.String, boolean)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeBoolean(boolean)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeDateTime(java.lang.String, long)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeDateTime(long)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeDBPointer(java.lang.String, org.bson.BsonDbPointer)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeDBPointer(org.bson.BsonDbPointer)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeDouble(java.lang.String, double)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeDouble(double)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeInt32(java.lang.String, int)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeInt32(int)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeInt64(java.lang.String, long)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeInt64(long)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeDecimal128(org.bson.types.Decimal128)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeJavaScript(java.lang.String, java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeJavaScript(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeJavaScriptWithScope(java.lang.String, java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeJavaScriptWithScope(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeMaxKey(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeMaxKey()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeMinKey(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeMinKey()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeName(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeNull(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeNull()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeObjectId(org.bson.types.ObjectId)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeRegularExpression(org.bson.BsonRegularExpression)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeString(java.lang.String, java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeString(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeSymbol(java.lang.String, java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeSymbol(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeTimestamp(java.lang.String, org.bson.BsonTimestamp)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeTimestamp(org.bson.BsonTimestamp)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeUndefined(java.lang.String)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.writeUndefined()"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.pipe(org.bson.BsonReader)"], ["void", "com.mongodb.connection.LevelCountingBsonWriter.flush()"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$3.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$3.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$1.onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$1.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.MultiServerCluster.close()"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$3.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$3.onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.UpdateProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.UpdateProtocol$1.onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.String", "com.mongodb.connection.AbstractByteBufBsonDocument$6.find(org.bson.BsonReader)"], ["java.lang.String", "com.mongodb.connection.AbstractByteBufBsonDocument$6.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$6.notFound()"], ["java.lang.Object", "com.mongodb.connection.AbstractByteBufBsonDocument$6.find(org.bson.BsonReader)"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$1.getClusterType()"], ["com.mongodb.connection.ServerType[]", "com.mongodb.connection.ServerType.values()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ServerType.valueOf(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder()"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.address(com.mongodb.ServerAddress)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.canonicalAddress(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.type(com.mongodb.connection.ServerType)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.hosts(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.passives(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.arbiters(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.primary(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.maxDocumentSize(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.tagSet(com.mongodb.TagSet)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.roundTripTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.setName(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.ok(boolean)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.state(com.mongodb.connection.ServerConnectionState)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.version(com.mongodb.connection.ServerVersion)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.minWireVersion(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.maxWireVersion(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.electionId(org.bson.types.ObjectId)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.setVersion(java.lang.Integer)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.lastWriteDate(java.util.Date)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.lastUpdateTimeNanos(long)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.logicalSessionTimeoutMinutes(java.lang.Integer)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.exception(java.lang.Throwable)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ServerDescription$Builder.build()"], ["void", "com.mongodb.connection.BaseCluster$WaitQueueHandler.run()"], ["void", "com.mongodb.connection.SingleServerCluster$DefaultServerStateListener.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["T", "com.mongodb.connection.CommandProtocolImpl.execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.CommandProtocolImpl.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.connection.CommandProtocol", "com.mongodb.connection.CommandProtocolImpl.sessionContext(com.mongodb.session.SessionContext)"], ["com.mongodb.ReflectionDBObject", "com.mongodb.ReflectionDBObject()"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.get(java.lang.String)"], ["boolean", "com.mongodb.ReflectionDBObject.containsKey(java.lang.String)"], ["boolean", "com.mongodb.ReflectionDBObject.containsField(java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.put(java.lang.String, java.lang.Object)"], ["void", "com.mongodb.ReflectionDBObject.putAll(java.util.Map)"], ["void", "com.mongodb.ReflectionDBObject.putAll(org.bson.BSONObject)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.get_id()"], ["void", "com.mongodb.ReflectionDBObject.set_id(java.lang.Object)"], ["boolean", "com.mongodb.ReflectionDBObject.isPartialObject()"], ["java.util.Map", "com.mongodb.ReflectionDBObject.toMap()"], ["void", "com.mongodb.ReflectionDBObject.markAsPartialObject()"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.removeField(java.lang.String)"], ["com.mongodb.ReflectionDBObject$JavaWrapper", "com.mongodb.ReflectionDBObject.getWrapperIfReflectionObject(java.lang.Class)"], ["com.mongodb.ReflectionDBObject$JavaWrapper", "com.mongodb.ReflectionDBObject.getWrapper(java.lang.Class)"], ["void", "com.mongodb.DBEncoderAdapter.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.DBEncoderAdapter.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.util.JSONSerializers$DBObjectSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$StringSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$DBRefBaseSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ToStringSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.ClassMapBasedObjectSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$SymbolSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$BSONTimestampSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$MaxKeySerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["java.lang.String", "com.mongodb.util.AbstractObjectSerializer.serialize(java.lang.Object)"], ["com.mongodb.util.JSON", "com.mongodb.util.JSON()"], ["java.lang.String", "com.mongodb.util.JSON.serialize(java.lang.Object)"], ["void", "com.mongodb.util.JSON.serialize(java.lang.Object, java.lang.StringBuilder)"], ["java.lang.Object", "com.mongodb.util.JSON.parse(java.lang.String)"], ["java.lang.Object", "com.mongodb.util.JSON.parse(java.lang.String, org.bson.BSONCallback)"], ["void", "com.mongodb.util.JSONSerializers$IterableSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$Decimal128Serializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$UndefinedSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.util.Util", "com.mongodb.util.Util()"], ["java.lang.String", "com.mongodb.util.Util.toHex(byte[])"], ["java.lang.String", "com.mongodb.util.Util.hexMD5(byte[])"], ["java.lang.String", "com.mongodb.util.Util.hexMD5(java.nio.ByteBuffer, int, int)"], ["void", "com.mongodb.util.JSONSerializers$CodeSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$UuidSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$LegacyBSONTimestampSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$DateSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ObjectArraySerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$MapSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$BinarySerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.util.ObjectSerializer", "com.mongodb.util.JSONSerializers.getLegacy()"], ["com.mongodb.util.ObjectSerializer", "com.mongodb.util.JSONSerializers.getStrict()"], ["void", "com.mongodb.util.JSONSerializers$CodeWScopeSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ObjectIdSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.util.JSONCallback", "com.mongodb.util.JSONCallback()"], ["org.bson.BSONObject", "com.mongodb.util.JSONCallback.create()"], ["void", "com.mongodb.util.JSONCallback.arrayStart(java.lang.String)"], ["void", "com.mongodb.util.JSONCallback.objectStart(java.lang.String)"], ["java.lang.Object", "com.mongodb.util.JSONCallback.objectDone()"], ["void", "com.mongodb.util.JSONSerializers$PatternSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["java.lang.String", "com.mongodb.util.JSONParseException.getMessage()"], ["com.mongodb.util.JSONParseException", "com.mongodb.util.JSONParseException(java.lang.String, int)"], ["com.mongodb.util.JSONParseException", "com.mongodb.util.JSONParseException(java.lang.String, int, java.lang.Throwable)"], ["java.lang.Object", "com.mongodb.util.JSONParser.parse()"], ["java.lang.Object", "com.mongodb.util.JSONParser.parseObject()"], ["void", "com.mongodb.util.JSONParser.read(char)"], ["char", "com.mongodb.util.JSONParser.read()"], ["void", "com.mongodb.util.JSONParser.readHex()"], ["boolean", "com.mongodb.util.JSONParser.check(char)"], ["void", "com.mongodb.util.JSONParser.skipWS()"], ["char", "com.mongodb.util.JSONParser.get()"], ["java.lang.String", "com.mongodb.util.JSONParser.parseString(boolean)"], ["java.lang.Number", "com.mongodb.util.JSONParser.parseNumber()"], ["void", "com.mongodb.util.JSONParser.parseFraction()"], ["void", "com.mongodb.util.JSONParser.parseExponent()"], ["java.lang.Object", "com.mongodb.util.JSONParser.parseArray()"], ["void", "com.mongodb.util.JSONSerializers$ByteArraySerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$MinKeySerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$LegacyDateSerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$LegacyBinarySerializer.serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.DBObject", "com.mongodb.InsertRequest.getDocument()"], ["void", "com.mongodb.MappingIterable$2.apply(V)"], ["com.mongodb.DBCursor$IteratorOrArray[]", "com.mongodb.DBCursor$IteratorOrArray.values()"], ["com.mongodb.DBCursor$IteratorOrArray", "com.mongodb.DBCursor$IteratorOrArray.valueOf(java.lang.String)"], ["com.mongodb.BSONTimestampCodec", "com.mongodb.BSONTimestampCodec()"], ["void", "com.mongodb.BSONTimestampCodec.encode(org.bson.BsonWriter, org.bson.types.BSONTimestamp, org.bson.codecs.EncoderContext)"], ["org.bson.types.BSONTimestamp", "com.mongodb.BSONTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.BSONTimestampCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.BSONTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.MongoInternalException", "com.mongodb.MongoInternalException(java.lang.String)"], ["com.mongodb.MongoInternalException", "com.mongodb.MongoInternalException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.ServerCursor", "com.mongodb.ServerCursor(long, com.mongodb.ServerAddress)"], ["long", "com.mongodb.ServerCursor.getId()"], ["com.mongodb.ServerAddress", "com.mongodb.ServerCursor.getAddress()"], ["boolean", "com.mongodb.ServerCursor.equals(java.lang.Object)"], ["int", "com.mongodb.ServerCursor.hashCode()"], ["java.lang.String", "com.mongodb.ServerCursor.toString()"], ["com.mongodb.client.MongoIterable", "com.mongodb.ListDatabasesIterableImpl.batchSize(int)"], ["com.mongodb.client.ListDatabasesIterable", "com.mongodb.ListDatabasesIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DBDecoder", "com.mongodb.LazyDBDecoder$1.create()"], ["com.mongodb.BulkWriteUpsert", "com.mongodb.BulkWriteUpsert(int, java.lang.Object)"], ["int", "com.mongodb.BulkWriteUpsert.getIndex()"], ["java.lang.Object", "com.mongodb.BulkWriteUpsert.getId()"], ["boolean", "com.mongodb.BulkWriteUpsert.equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteUpsert.hashCode()"], ["java.lang.String", "com.mongodb.BulkWriteUpsert.toString()"], ["V", "com.mongodb.MappingIterable.first()"], ["void", "com.mongodb.MappingIterable.forEach(com.mongodb.Block<? super V>)"], ["<A extends java.util.Collection<? super V>> A", "com.mongodb.MappingIterable.into(A)"], ["com.mongodb.MappingIterable<U, V>", "com.mongodb.MappingIterable.batchSize(int)"], ["<W> com.mongodb.client.MongoIterable<W>", "com.mongodb.MappingIterable.map(com.mongodb.Function<V, W>)"], ["com.mongodb.client.MongoIterable", "com.mongodb.MappingIterable.batchSize(int)"], ["java.util.Iterator", "com.mongodb.MappingIterable.iterator()"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject...)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.WriteConcern, com.mongodb.DBObject...)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject[], com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject[], com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.InsertOptions)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.save(com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.save(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern, java.lang.Boolean, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.updateMulti(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.client.model.DBCollectionUpdateOptions)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionRemoveOptions)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject, int, int, int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject, int, int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find()"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindOptions)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne()"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(java.lang.Object)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(java.lang.Object, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindOptions)"], ["long", "com.mongodb.DBCollection.count()"], ["long", "com.mongodb.DBCollection.count(com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.count(com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.count(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionCountOptions)"], ["long", "com.mongodb.DBCollection.getCount()"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long, com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionCountOptions)"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.rename(java.lang.String)"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.rename(java.lang.String, boolean)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.GroupCommand)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.GroupCommand, com.mongodb.ReadPreference)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.ReadPreference)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.DBObject)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.client.model.DBCollectionDistinctOptions)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.DBObject)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(com.mongodb.MapReduceCommand)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(com.mongodb.DBObject, com.mongodb.DBObject...)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.ReadPreference)"], ["com.mongodb.Cursor", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)"], ["com.mongodb.Cursor", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions, com.mongodb.ReadPreference)"], ["com.mongodb.CommandResult", "com.mongodb.DBCollection.explainAggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)"], ["java.lang.String", "com.mongodb.DBCollection.getName()"], ["java.lang.String", "com.mongodb.DBCollection.getFullName()"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.getCollection(java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, java.lang.String, boolean)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, com.mongodb.DBObject)"], ["void", "com.mongodb.DBCollection.setHintFields(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndRemove(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, long, java.util.concurrent.TimeUnit, com.mongodb.WriteConcern)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, boolean, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, boolean, long, java.util.concurrent.TimeUnit, com.mongodb.WriteConcern)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindAndModifyOptions)"], ["com.mongodb.DB", "com.mongodb.DBCollection.getDB()"], ["com.mongodb.WriteConcern", "com.mongodb.DBCollection.getWriteConcern()"], ["void", "com.mongodb.DBCollection.setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.ReadPreference", "com.mongodb.DBCollection.getReadPreference()"], ["void", "com.mongodb.DBCollection.setReadPreference(com.mongodb.ReadPreference)"], ["void", "com.mongodb.DBCollection.setReadConcern(com.mongodb.ReadConcern)"], ["com.mongodb.ReadConcern", "com.mongodb.DBCollection.getReadConcern()"], ["void", "com.mongodb.DBCollection.slaveOk()"], ["void", "com.mongodb.DBCollection.addOption(int)"], ["void", "com.mongodb.DBCollection.resetOptions()"], ["int", "com.mongodb.DBCollection.getOptions()"], ["void", "com.mongodb.DBCollection.setOptions(int)"], ["void", "com.mongodb.DBCollection.drop()"], ["synchronized", "com.mongodb.DBCollection.com.mongodb.DBDecoderFactory getDBDecoderFactory()"], ["synchronized", "com.mongodb.DBCollection.void setDBDecoderFactory(com.mongodb.DBDecoderFactory)"], ["synchronized", "com.mongodb.DBCollection.com.mongodb.DBEncoderFactory getDBEncoderFactory()"], ["synchronized", "com.mongodb.DBCollection.void setDBEncoderFactory(com.mongodb.DBEncoderFactory)"], ["void", "com.mongodb.DBCollection.dropIndex(com.mongodb.DBObject)"], ["void", "com.mongodb.DBCollection.dropIndex(java.lang.String)"], ["void", "com.mongodb.DBCollection.dropIndexes()"], ["void", "com.mongodb.DBCollection.dropIndexes(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DBCollection.getStats()"], ["boolean", "com.mongodb.DBCollection.isCapped()"], ["java.lang.Class", "com.mongodb.DBCollection.getObjectClass()"], ["void", "com.mongodb.DBCollection.setObjectClass(java.lang.Class<? extends com.mongodb.DBObject>)"], ["void", "com.mongodb.DBCollection.setInternalClass(java.lang.String, java.lang.Class<? extends com.mongodb.DBObject>)"], ["java.lang.String", "com.mongodb.DBCollection.toString()"], ["com.mongodb.BulkWriteOperation", "com.mongodb.DBCollection.initializeOrderedBulkOperation()"], ["com.mongodb.BulkWriteOperation", "com.mongodb.DBCollection.initializeUnorderedBulkOperation()"], ["com.mongodb.TagSet", "com.mongodb.TagSet()"], ["com.mongodb.TagSet", "com.mongodb.TagSet(com.mongodb.Tag)"], ["com.mongodb.TagSet", "com.mongodb.TagSet(java.util.List<com.mongodb.Tag>)"], ["boolean", "com.mongodb.TagSet.containsAll(com.mongodb.TagSet)"], ["boolean", "com.mongodb.TagSet.equals(java.lang.Object)"], ["int", "com.mongodb.TagSet.hashCode()"], ["java.lang.String", "com.mongodb.TagSet.toString()"], ["void", "com.mongodb.DBEncoderFactoryAdapter.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.DBEncoderFactoryAdapter.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["com.mongodb.MongoSocketReadException", "com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoSocketReadException", "com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions.builder()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions.builder(com.mongodb.MongoClientOptions)"], ["java.lang.String", "com.mongodb.MongoClientOptions.getDescription()"], ["java.lang.String", "com.mongodb.MongoClientOptions.getApplicationName()"], ["int", "com.mongodb.MongoClientOptions.getConnectionsPerHost()"], ["int", "com.mongodb.MongoClientOptions.getMinConnectionsPerHost()"], ["int", "com.mongodb.MongoClientOptions.getThreadsAllowedToBlockForConnectionMultiplier()"], ["int", "com.mongodb.MongoClientOptions.getServerSelectionTimeout()"], ["int", "com.mongodb.MongoClientOptions.getMaxWaitTime()"], ["int", "com.mongodb.MongoClientOptions.getMaxConnectionIdleTime()"], ["int", "com.mongodb.MongoClientOptions.getMaxConnectionLifeTime()"], ["int", "com.mongodb.MongoClientOptions.getConnectTimeout()"], ["int", "com.mongodb.MongoClientOptions.getSocketTimeout()"], ["boolean", "com.mongodb.MongoClientOptions.isSocketKeepAlive()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatFrequency()"], ["int", "com.mongodb.MongoClientOptions.getMinHeartbeatFrequency()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatConnectTimeout()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatSocketTimeout()"], ["int", "com.mongodb.MongoClientOptions.getLocalThreshold()"], ["java.lang.String", "com.mongodb.MongoClientOptions.getRequiredReplicaSetName()"], ["boolean", "com.mongodb.MongoClientOptions.isSslEnabled()"], ["boolean", "com.mongodb.MongoClientOptions.isSslInvalidHostNameAllowed()"], ["javax.net.ssl.SSLContext", "com.mongodb.MongoClientOptions.getSslContext()"], ["com.mongodb.ReadPreference", "com.mongodb.MongoClientOptions.getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoClientOptions.getWriteConcern()"], ["boolean", "com.mongodb.MongoClientOptions.getRetryWrites()"], ["com.mongodb.ReadConcern", "com.mongodb.MongoClientOptions.getReadConcern()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoClientOptions.getCodecRegistry()"], ["com.mongodb.selector.ServerSelector", "com.mongodb.MongoClientOptions.getServerSelector()"], ["com.mongodb.DBDecoderFactory", "com.mongodb.MongoClientOptions.getDbDecoderFactory()"], ["com.mongodb.DBEncoderFactory", "com.mongodb.MongoClientOptions.getDbEncoderFactory()"], ["boolean", "com.mongodb.MongoClientOptions.isAlwaysUseMBeans()"], ["javax.net.SocketFactory", "com.mongodb.MongoClientOptions.getSocketFactory()"], ["boolean", "com.mongodb.MongoClientOptions.isCursorFinalizerEnabled()"], ["boolean", "com.mongodb.MongoClientOptions.equals(java.lang.Object)"], ["int", "com.mongodb.MongoClientOptions.hashCode()"], ["java.lang.String", "com.mongodb.MongoClientOptions.toString()"], ["com.mongodb.DBObject", "com.mongodb.ReplaceRequest.getQuery()"], ["com.mongodb.DBObject", "com.mongodb.ReplaceRequest.getDocument()"], ["boolean", "com.mongodb.ReplaceRequest.isUpsert()"], ["com.mongodb.client.model.Collation", "com.mongodb.ReplaceRequest.getCollation()"], ["com.mongodb.MongoNotPrimaryException", "com.mongodb.MongoNotPrimaryException(com.mongodb.ServerAddress)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.ClientSessionBinding$SessionBindingConnectionSource.getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.ClientSessionBinding$SessionBindingConnectionSource.getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.ClientSessionBinding$SessionBindingConnectionSource.getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.ClientSessionBinding$SessionBindingConnectionSource.retain()"], ["int", "com.mongodb.ClientSessionBinding$SessionBindingConnectionSource.getCount()"], ["void", "com.mongodb.ClientSessionBinding$SessionBindingConnectionSource.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.ClientSessionBinding$SessionBindingConnectionSource.retain()"], ["com.mongodb.LazyDBObject", "com.mongodb.LazyDBObject(byte[], org.bson.LazyBSONCallback)"], ["com.mongodb.LazyDBObject", "com.mongodb.LazyDBObject(byte[], int, org.bson.LazyBSONCallback)"], ["void", "com.mongodb.LazyDBObject.markAsPartialObject()"], ["boolean", "com.mongodb.LazyDBObject.isPartialObject()"], ["com.mongodb.MongoQueryException", "com.mongodb.MongoQueryException(com.mongodb.ServerAddress, int, java.lang.String)"], ["int", "com.mongodb.MongoQueryException.getErrorCode()"], ["java.lang.String", "com.mongodb.MongoQueryException.getErrorMessage()"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions.builder()"], ["int", "com.mongodb.ParallelScanOptions.getNumCursors()"], ["int", "com.mongodb.ParallelScanOptions.getBatchSize()"], ["com.mongodb.ReadPreference", "com.mongodb.ParallelScanOptions.getReadPreference()"], ["com.mongodb.MongoIncompatibleDriverException", "com.mongodb.MongoIncompatibleDriverException(java.lang.String, com.mongodb.connection.ClusterDescription)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.MongoIncompatibleDriverException.getClusterDescription()"], ["java.lang.Integer", "com.mongodb.MongoIterableImpl.getBatchSize()"], ["TResult", "com.mongodb.MongoIterableImpl.first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.MongoIterableImpl.map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.MongoIterableImpl.forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.MongoIterableImpl.into(A)"], ["java.util.Iterator", "com.mongodb.MongoIterableImpl.iterator()"], ["com.mongodb.DBObject", "com.mongodb.CompoundDBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.CompoundDBObjectCodec.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.CompoundDBObjectCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.CompoundDBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(java.lang.String)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int, boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int, boolean, boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(java.lang.String, int, boolean, boolean)"], ["java.lang.Object", "com.mongodb.WriteConcern.getWObject()"], ["int", "com.mongodb.WriteConcern.getW()"], ["java.lang.String", "com.mongodb.WriteConcern.getWString()"], ["java.lang.Integer", "com.mongodb.WriteConcern.getWTimeout(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.WriteConcern.getWtimeout()"], ["java.lang.Boolean", "com.mongodb.WriteConcern.getJournal()"], ["boolean", "com.mongodb.WriteConcern.getJ()"], ["boolean", "com.mongodb.WriteConcern.getFsync()"], ["boolean", "com.mongodb.WriteConcern.fsync()"], ["boolean", "com.mongodb.WriteConcern.callGetLastError()"], ["boolean", "com.mongodb.WriteConcern.isServerDefault()"], ["org.bson.BsonDocument", "com.mongodb.WriteConcern.asDocument()"], ["boolean", "com.mongodb.WriteConcern.isAcknowledged()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.valueOf(java.lang.String)"], ["boolean", "com.mongodb.WriteConcern.equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcern.hashCode()"], ["java.lang.String", "com.mongodb.WriteConcern.toString()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withW(int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withW(java.lang.String)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withFsync(boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withJournal(java.lang.Boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withJ(boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withWTimeout(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern.majorityWriteConcern(int, boolean, boolean)"], ["com.mongodb.MongoSecurityException", "com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoSecurityException", "com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String)"], ["com.mongodb.MongoCredential", "com.mongodb.MongoSecurityException.getCredential()"], ["void", "com.mongodb.MapReduceOutput.drop()"], ["com.mongodb.DBCollection", "com.mongodb.MapReduceOutput.getOutputCollection()"], ["com.mongodb.DBObject", "com.mongodb.MapReduceOutput.getCommand()"], ["java.lang.String", "com.mongodb.MapReduceOutput.toString()"], ["java.lang.String", "com.mongodb.MapReduceOutput.getCollectionName()"], ["java.lang.String", "com.mongodb.MapReduceOutput.getDatabaseName()"], ["int", "com.mongodb.MapReduceOutput.getDuration()"], ["int", "com.mongodb.MapReduceOutput.getInputCount()"], ["int", "com.mongodb.MapReduceOutput.getOutputCount()"], ["int", "com.mongodb.MapReduceOutput.getEmitCount()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createScramSha1Credential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createMongoCRCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createMongoX509Credential(java.lang.String)"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createMongoX509Credential()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createPlainCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createGSSAPICredential(java.lang.String)"], ["<T> com.mongodb.MongoCredential", "com.mongodb.MongoCredential.withMechanismProperty(java.lang.String, T)"], ["java.lang.String", "com.mongodb.MongoCredential.getMechanism()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.MongoCredential.getAuthenticationMechanism()"], ["java.lang.String", "com.mongodb.MongoCredential.getUserName()"], ["java.lang.String", "com.mongodb.MongoCredential.getSource()"], ["char[]", "com.mongodb.MongoCredential.getPassword()"], ["<T> T", "com.mongodb.MongoCredential.getMechanismProperty(java.lang.String, T)"], ["boolean", "com.mongodb.MongoCredential.equals(java.lang.Object)"], ["int", "com.mongodb.MongoCredential.hashCode()"], ["java.lang.String", "com.mongodb.MongoCredential.toString()"], ["com.mongodb.MongoCursorNotFoundException", "com.mongodb.MongoCursorNotFoundException(long, com.mongodb.ServerAddress)"], ["long", "com.mongodb.MongoCursorNotFoundException.getCursorId()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoCursorNotFoundException.getServerAddress()"], ["com.mongodb.DBObjectCodecProvider", "com.mongodb.DBObjectCodecProvider()"], ["com.mongodb.DBObjectCodecProvider", "com.mongodb.DBObjectCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.DBObjectCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.DBObjectCodecProvider.equals(java.lang.Object)"], ["int", "com.mongodb.DBObjectCodecProvider.hashCode()"], ["com.mongodb.client.model.Collation", "com.mongodb.BulkWriteRequestBuilder.getCollation()"], ["com.mongodb.BulkWriteRequestBuilder", "com.mongodb.BulkWriteRequestBuilder.collation(com.mongodb.client.model.Collation)"], ["void", "com.mongodb.BulkWriteRequestBuilder.remove()"], ["void", "com.mongodb.BulkWriteRequestBuilder.removeOne()"], ["void", "com.mongodb.BulkWriteRequestBuilder.replaceOne(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkWriteRequestBuilder.update(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkWriteRequestBuilder.updateOne(com.mongodb.DBObject)"], ["com.mongodb.BulkUpdateRequestBuilder", "com.mongodb.BulkWriteRequestBuilder.upsert()"], ["com.mongodb.BulkUpdateRequestBuilder", "com.mongodb.BulkWriteRequestBuilder.arrayFilters(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder()"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start()"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start(java.util.Map)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.append(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.add(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.push(java.lang.String)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.pop()"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectBuilder.get()"], ["boolean", "com.mongodb.BasicDBObjectBuilder.isEmpty()"], ["com.mongodb.internal.validator.NoOpFieldNameValidator", "com.mongodb.internal.validator.NoOpFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.NoOpFieldNameValidator.validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.NoOpFieldNameValidator.getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator.validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator.getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.MappedFieldNameValidator", "com.mongodb.internal.validator.MappedFieldNameValidator(org.bson.FieldNameValidator, java.util.Map<java.lang.String, org.bson.FieldNameValidator>)"], ["boolean", "com.mongodb.internal.validator.MappedFieldNameValidator.validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.MappedFieldNameValidator.getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.UpdateFieldNameValidator", "com.mongodb.internal.validator.UpdateFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.UpdateFieldNameValidator.validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.UpdateFieldNameValidator.getValidatorForField(java.lang.String)"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$PooledByteBufNIO.release()"], ["com.mongodb.internal.connection.PowerOfTwoBufferPool", "com.mongodb.internal.connection.PowerOfTwoBufferPool()"], ["com.mongodb.internal.connection.PowerOfTwoBufferPool", "com.mongodb.internal.connection.PowerOfTwoBufferPool(int)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.PowerOfTwoBufferPool.getBuffer(int)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.hasNext()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.next()"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.remove()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.reportingRemove()"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap$HashBased.add(int, int)"], ["int", "com.mongodb.internal.connection.IndexMap$HashBased.map(int)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune[]", "com.mongodb.internal.connection.ConcurrentPool$Prune.values()"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.connection.ConcurrentPool$Prune.valueOf(java.lang.String)"], ["java.nio.ByteBuffer", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.create(boolean)"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.close(java.nio.ByteBuffer)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.shouldPrune(java.nio.ByteBuffer)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.shouldPrune(java.lang.Object)"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.close(java.lang.Object)"], ["java.lang.Object", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.create(boolean)"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap()"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap.create()"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap.create(int, int)"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap$RangeBased.add(int, int)"], ["int", "com.mongodb.internal.connection.IndexMap$RangeBased.map(int)"], ["void", "com.mongodb.internal.connection.Java8SniSslHelper.enableSni(com.mongodb.ServerAddress, javax.net.ssl.SSLParameters)"], ["com.mongodb.internal.connection.ConcurrentPool", "com.mongodb.internal.connection.ConcurrentPool(int, com.mongodb.internal.connection.ConcurrentPool$ItemFactory<T>)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.release(T)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.release(T, boolean)"], ["T", "com.mongodb.internal.connection.ConcurrentPool.get()"], ["T", "com.mongodb.internal.connection.ConcurrentPool.get(long, java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.prune()"], ["void", "com.mongodb.internal.connection.ConcurrentPool.ensureMinSize(int, boolean)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.close()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getMaxSize()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getInUseCount()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getAvailableCount()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getCount()"], ["java.lang.String", "com.mongodb.internal.connection.ConcurrentPool.toString()"], ["com.mongodb.internal.connection.ConcurrentLinkedDeque", "com.mongodb.internal.connection.ConcurrentLinkedDeque()"], ["com.mongodb.internal.connection.ConcurrentLinkedDeque", "com.mongodb.internal.connection.ConcurrentLinkedDeque(java.util.Collection<? extends E>)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addFirst(E)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addLast(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offerFirst(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offerLast(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peekFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peekLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.getFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.getLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pollFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pollLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeLast()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offer(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.add(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.poll()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.remove()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peek()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.element()"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.push(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pop()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeFirstOccurrence(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeLastOccurrence(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.contains(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.isEmpty()"], ["int", "com.mongodb.internal.connection.ConcurrentLinkedDeque.size()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.remove(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addAll(java.util.Collection<? extends E>)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.clear()"], ["java.lang.Object[]", "com.mongodb.internal.connection.ConcurrentLinkedDeque.toArray()"], ["<T> T[]", "com.mongodb.internal.connection.ConcurrentLinkedDeque.toArray(T[])"], ["java.util.Iterator", "com.mongodb.internal.connection.ConcurrentLinkedDeque.iterator()"], ["void", "com.mongodb.internal.connection.SslHelper.enableHostNameVerification(javax.net.ssl.SSLParameters)"], ["void", "com.mongodb.internal.connection.SslHelper.enableSni(com.mongodb.ServerAddress, javax.net.ssl.SSLParameters)"], ["boolean", "com.mongodb.internal.connection.NoOpSessionContext.hasSession()"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.NoOpSessionContext.getSessionId()"], ["boolean", "com.mongodb.internal.connection.NoOpSessionContext.isCausallyConsistent()"], ["long", "com.mongodb.internal.connection.NoOpSessionContext.advanceTransactionNumber()"], ["org.bson.BsonTimestamp", "com.mongodb.internal.connection.NoOpSessionContext.getOperationTime()"], ["void", "com.mongodb.internal.connection.NoOpSessionContext.advanceOperationTime(org.bson.BsonTimestamp)"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.NoOpSessionContext.getClusterTime()"], ["void", "com.mongodb.internal.connection.NoOpSessionContext.advanceClusterTime(org.bson.BsonDocument)"], ["com.mongodb.internal.HexUtils", "com.mongodb.internal.HexUtils()"], ["java.lang.String", "com.mongodb.internal.HexUtils.toHex(byte[])"], ["java.lang.String", "com.mongodb.internal.HexUtils.hexMD5(byte[])"], ["java.lang.String", "com.mongodb.internal.HexUtils.hexMD5(java.nio.ByteBuffer, int, int)"], ["<T> com.mongodb.async.SingleResultCallback<T>", "com.mongodb.internal.async.ErrorHandlingResultCallback.errorHandlingCallback(com.mongodb.async.SingleResultCallback<T>, com.mongodb.diagnostics.logging.Logger)"], ["void", "com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(T, java.lang.Throwable)"], ["com.mongodb.internal.management.jmx.JMXMBeanServer", "com.mongodb.internal.management.jmx.JMXMBeanServer()"], ["void", "com.mongodb.internal.management.jmx.JMXMBeanServer.registerMBean(java.lang.Object, java.lang.String)"], ["void", "com.mongodb.internal.management.jmx.JMXMBeanServer.unregisterMBean(java.lang.String)"], ["java.lang.String", "com.mongodb.internal.dns.DnsResolver.resolveAdditionalQueryParametersFromTxtRecords(java.lang.String)"], ["com.mongodb.internal.thread.DaemonThreadFactory", "com.mongodb.internal.thread.DaemonThreadFactory(java.lang.String)"], ["java.lang.Thread", "com.mongodb.internal.thread.DaemonThreadFactory.newThread(java.lang.Runnable)"], ["java.lang.String", "com.mongodb.internal.authentication.NativeAuthenticationHelper.createAuthenticationHash(java.lang.String, char[])"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getAuthCommand(java.lang.String, char[], java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getAuthCommand(java.lang.String, java.lang.String, java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getNonceCommand()"], ["void", "com.mongodb.internal.event.ServerMonitorListenerMulticaster.serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)"], ["void", "com.mongodb.internal.event.ServerMonitorListenerMulticaster.serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)"], ["void", "com.mongodb.internal.event.ServerMonitorListenerMulticaster.serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["com.mongodb.event.ClusterListener", "com.mongodb.internal.event.EventListenerHelper.getClusterListener(com.mongodb.connection.ClusterSettings)"], ["com.mongodb.event.CommandListener", "com.mongodb.internal.event.EventListenerHelper.getCommandListener(java.util.List<com.mongodb.event.CommandListener>)"], ["com.mongodb.event.ConnectionPoolListener", "com.mongodb.internal.event.EventListenerHelper.getConnectionPoolListener(com.mongodb.connection.ConnectionPoolSettings)"], ["com.mongodb.event.ServerMonitorListener", "com.mongodb.internal.event.EventListenerHelper.getServerMonitorListener(com.mongodb.connection.ServerSettings)"], ["com.mongodb.event.ServerListener", "com.mongodb.internal.event.EventListenerHelper.createServerListener(com.mongodb.connection.ServerSettings, com.mongodb.event.ServerListener)"], ["void", "com.mongodb.internal.event.ClusterListenerMulticaster.clusterOpening(com.mongodb.event.ClusterOpeningEvent)"], ["void", "com.mongodb.internal.event.ClusterListenerMulticaster.clusterClosed(com.mongodb.event.ClusterClosedEvent)"], ["void", "com.mongodb.internal.event.ClusterListenerMulticaster.clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)"], ["void", "com.mongodb.internal.event.CommandListenerMulticaster.commandStarted(com.mongodb.event.CommandStartedEvent)"], ["void", "com.mongodb.internal.event.CommandListenerMulticaster.commandSucceeded(com.mongodb.event.CommandSucceededEvent)"], ["void", "com.mongodb.internal.event.CommandListenerMulticaster.commandFailed(com.mongodb.event.CommandFailedEvent)"], ["void", "com.mongodb.internal.event.ServerListenerMulticaster.serverOpening(com.mongodb.event.ServerOpeningEvent)"], ["void", "com.mongodb.internal.event.ServerListenerMulticaster.serverClosed(com.mongodb.event.ServerClosedEvent)"], ["void", "com.mongodb.internal.event.ServerListenerMulticaster.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["long", "com.mongodb.internal.session.ServerSessionPool$1.millis()"], ["com.mongodb.internal.session.ClientSessionImpl", "com.mongodb.internal.session.ClientSessionImpl(com.mongodb.internal.session.ServerSessionPool, java.lang.Object, com.mongodb.ClientSessionOptions)"], ["com.mongodb.ClientSessionOptions", "com.mongodb.internal.session.ClientSessionImpl.getOptions()"], ["boolean", "com.mongodb.internal.session.ClientSessionImpl.isCausallyConsistent()"], ["java.lang.Object", "com.mongodb.internal.session.ClientSessionImpl.getOriginator()"], ["org.bson.BsonDocument", "com.mongodb.internal.session.ClientSessionImpl.getClusterTime()"], ["org.bson.BsonTimestamp", "com.mongodb.internal.session.ClientSessionImpl.getOperationTime()"], ["com.mongodb.session.ServerSession", "com.mongodb.internal.session.ClientSessionImpl.getServerSession()"], ["void", "com.mongodb.internal.session.ClientSessionImpl.advanceOperationTime(org.bson.BsonTimestamp)"], ["void", "com.mongodb.internal.session.ClientSessionImpl.advanceClusterTime(org.bson.BsonDocument)"], ["void", "com.mongodb.internal.session.ClientSessionImpl.close()"], ["com.mongodb.internal.session.ServerSessionPool", "com.mongodb.internal.session.ServerSessionPool(com.mongodb.connection.Cluster)"], ["com.mongodb.internal.session.ServerSessionPool", "com.mongodb.internal.session.ServerSessionPool(com.mongodb.connection.Cluster, com.mongodb.internal.session.ServerSessionPool$Clock)"], ["com.mongodb.session.ServerSession", "com.mongodb.internal.session.ServerSessionPool.get()"], ["void", "com.mongodb.internal.session.ServerSessionPool.release(com.mongodb.session.ServerSession)"], ["void", "com.mongodb.internal.session.ServerSessionPool.close()"], ["int", "com.mongodb.internal.session.ServerSessionPool.getInUseCount()"], ["com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.create(boolean)"], ["void", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.close(com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.shouldPrune(com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.shouldPrune(java.lang.Object)"], ["void", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.close(java.lang.Object)"], ["java.lang.Object", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.create(boolean)"], ["com.mongodb.internal.session.ClientSessionContext", "com.mongodb.internal.session.ClientSessionContext(com.mongodb.session.ClientSession)"], ["com.mongodb.session.ClientSession", "com.mongodb.internal.session.ClientSessionContext.getClientSession()"], ["boolean", "com.mongodb.internal.session.ClientSessionContext.hasSession()"], ["org.bson.BsonDocument", "com.mongodb.internal.session.ClientSessionContext.getSessionId()"], ["boolean", "com.mongodb.internal.session.ClientSessionContext.isCausallyConsistent()"], ["long", "com.mongodb.internal.session.ClientSessionContext.advanceTransactionNumber()"], ["org.bson.BsonTimestamp", "com.mongodb.internal.session.ClientSessionContext.getOperationTime()"], ["void", "com.mongodb.internal.session.ClientSessionContext.advanceOperationTime(org.bson.BsonTimestamp)"], ["org.bson.BsonDocument", "com.mongodb.internal.session.ClientSessionContext.getClusterTime()"], ["void", "com.mongodb.internal.session.ClientSessionContext.advanceClusterTime(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl.getIdentifier()"], ["long", "com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl.advanceTransactionNumber()"], ["boolean", "com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl.isClosed()"], ["java.lang.String", "com.mongodb.management.ConnectionPoolStatistics.getHost()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getPort()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getMinSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getMaxSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getCheckedOutCount()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getWaitQueueSize()"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["com.mongodb.management.NullMBeanServer", "com.mongodb.management.NullMBeanServer()"], ["void", "com.mongodb.management.NullMBeanServer.unregisterMBean(java.lang.String)"], ["void", "com.mongodb.management.NullMBeanServer.registerMBean(java.lang.Object, java.lang.String)"], ["com.mongodb.management.JMXConnectionPoolListener", "com.mongodb.management.JMXConnectionPoolListener()"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["com.mongodb.management.MBeanServer", "com.mongodb.management.MBeanServerFactory.getMBeanServer()"], ["void", "com.mongodb.MapReduceIterableImpl.toCollection()"], ["com.mongodb.client.MongoIterable", "com.mongodb.MapReduceIterableImpl.batchSize(int)"], ["com.mongodb.MongoClientURI", "com.mongodb.MongoClientURI(java.lang.String)"], ["com.mongodb.MongoClientURI", "com.mongodb.MongoClientURI(java.lang.String, com.mongodb.MongoClientOptions$Builder)"], ["java.lang.String", "com.mongodb.MongoClientURI.getUsername()"], ["char[]", "com.mongodb.MongoClientURI.getPassword()"], ["java.lang.String", "com.mongodb.MongoClientURI.getDatabase()"], ["java.lang.String", "com.mongodb.MongoClientURI.getCollection()"], ["java.lang.String", "com.mongodb.MongoClientURI.getURI()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoClientURI.getCredentials()"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClientURI.getOptions()"], ["boolean", "com.mongodb.MongoClientURI.equals(java.lang.Object)"], ["int", "com.mongodb.MongoClientURI.hashCode()"], ["java.lang.String", "com.mongodb.MongoClientURI.toString()"], ["com.mongodb.DBObject", "com.mongodb.DBDecoderAdapter.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "com.mongodb.DBDecoderAdapter.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.DBObject", "com.mongodb.RemoveRequest.getQuery()"], ["boolean", "com.mongodb.RemoveRequest.isMulti()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.isAcknowledged()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getInsertedCount()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getMatchedCount()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getRemovedCount()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.isModifiedCountAvailable()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getModifiedCount()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.equals(java.lang.Object)"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.hashCode()"], ["java.lang.String", "com.mongodb.UnacknowledgedBulkWriteResult.toString()"], ["boolean", "com.mongodb.ReadPreference$PrimaryReadPreference.isSlaveOk()"], ["java.lang.String", "com.mongodb.ReadPreference$PrimaryReadPreference.toString()"], ["boolean", "com.mongodb.ReadPreference$PrimaryReadPreference.equals(java.lang.Object)"], ["int", "com.mongodb.ReadPreference$PrimaryReadPreference.hashCode()"], ["org.bson.BsonDocument", "com.mongodb.ReadPreference$PrimaryReadPreference.toDocument()"], ["java.lang.String", "com.mongodb.ReadPreference$PrimaryReadPreference.getName()"], ["com.mongodb.DBRefCodec", "com.mongodb.DBRefCodec(org.bson.codecs.configuration.CodecRegistry)"], ["void", "com.mongodb.DBRefCodec.encode(org.bson.BsonWriter, com.mongodb.DBRef, org.bson.codecs.EncoderContext)"], ["com.mongodb.DBRef", "com.mongodb.DBRefCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.DBRefCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.DBRefCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, com.mongodb.DBObjectFactory)"], ["void", "com.mongodb.DBObjectCodec.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["com.mongodb.DBObject", "com.mongodb.DBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["boolean", "com.mongodb.DBObjectCodec.documentHasId(com.mongodb.DBObject)"], ["org.bson.BsonValue", "com.mongodb.DBObjectCodec.getDocumentId(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBObjectCodec.generateIdIfAbsentFromDocument(com.mongodb.DBObject)"], ["org.bson.BsonValue", "com.mongodb.DBObjectCodec.getDocumentId(java.lang.Object)"], ["boolean", "com.mongodb.DBObjectCodec.documentHasId(java.lang.Object)"], ["java.lang.Object", "com.mongodb.DBObjectCodec.generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "com.mongodb.DBObjectCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.DBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.DuplicateKeyException", "com.mongodb.DuplicateKeyException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)"], ["<T> T", "com.mongodb.assertions.Assertions.notNull(java.lang.String, T)"], ["<T> T", "com.mongodb.assertions.Assertions.notNull(java.lang.String, T, com.mongodb.async.SingleResultCallback<?>)"], ["void", "com.mongodb.assertions.Assertions.isTrue(java.lang.String, boolean)"], ["void", "com.mongodb.assertions.Assertions.isTrue(java.lang.String, boolean, com.mongodb.async.SingleResultCallback<?>)"], ["void", "com.mongodb.assertions.Assertions.isTrueArgument(java.lang.String, boolean)"], ["com.mongodb.MongoTimeoutException", "com.mongodb.MongoTimeoutException(java.lang.String)"], ["void", "com.mongodb.MappingIterable$1.apply(U)"], ["com.mongodb.MongoURI", "com.mongodb.MongoURI(java.lang.String)"], ["com.mongodb.MongoURI", "com.mongodb.MongoURI(com.mongodb.MongoClientURI)"], ["java.lang.String", "com.mongodb.MongoURI.getUsername()"], ["char[]", "com.mongodb.MongoURI.getPassword()"], ["java.lang.String", "com.mongodb.MongoURI.getDatabase()"], ["java.lang.String", "com.mongodb.MongoURI.getCollection()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoURI.getCredentials()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoURI.getOptions()"], ["com.mongodb.Mongo", "com.mongodb.MongoURI.connect()"], ["com.mongodb.DB", "com.mongodb.MongoURI.connectDB()"], ["com.mongodb.DB", "com.mongodb.MongoURI.connectDB(com.mongodb.Mongo)"], ["com.mongodb.DBCollection", "com.mongodb.MongoURI.connectCollection(com.mongodb.DB)"], ["com.mongodb.DBCollection", "com.mongodb.MongoURI.connectCollection(com.mongodb.Mongo)"], ["java.lang.String", "com.mongodb.MongoURI.toString()"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteException.getWriteResult()"], ["com.mongodb.WriteConcernError", "com.mongodb.BulkWriteException.getWriteConcernError()"], ["boolean", "com.mongodb.BulkWriteException.equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteException.hashCode()"], ["java.lang.String", "com.mongodb.TaggableReadPreference$SecondaryReadPreference.getName()"], ["com.mongodb.LazyDBCallback", "com.mongodb.LazyDBCallback(com.mongodb.DBCollection)"], ["java.lang.Object", "com.mongodb.LazyDBCallback.createObject(byte[], int)"], ["java.util.List", "com.mongodb.LazyDBCallback.createArray(byte[], int)"], ["java.lang.Object", "com.mongodb.LazyDBCallback.createDBRef(java.lang.String, org.bson.types.ObjectId)"], ["com.mongodb.DBCallback", "com.mongodb.DefaultDBCallback$1.create(com.mongodb.DBCollection)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.retain()"], ["void", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.retain()"], ["com.mongodb.binding.SingleConnectionReadBinding", "com.mongodb.binding.SingleConnectionReadBinding(com.mongodb.ReadPreference, com.mongodb.connection.ServerDescription, com.mongodb.connection.Connection)"], ["com.mongodb.ReadPreference", "com.mongodb.binding.SingleConnectionReadBinding.getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleConnectionReadBinding.getReadConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.SingleConnectionReadBinding.getSessionContext()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.binding.SingleConnectionReadBinding.retain()"], ["void", "com.mongodb.binding.SingleConnectionReadBinding.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleConnectionReadBinding.retain()"], ["int", "com.mongodb.binding.SingleConnectionReadBinding.getCount()"], ["void", "com.mongodb.binding.AsyncClusterBinding$1.onResult(com.mongodb.connection.Server, java.lang.Throwable)"], ["void", "com.mongodb.binding.AsyncClusterBinding$1.onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.retain()"], ["void", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.retain()"], ["com.mongodb.binding.ClusterBinding", "com.mongodb.binding.ClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.binding.ClusterBinding.retain()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.ClusterBinding.getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding.getReadConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.ClusterBinding.getSessionContext()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding.getWriteConnectionSource()"], ["void", "com.mongodb.binding.ClusterBinding.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.ClusterBinding.retain()"], ["int", "com.mongodb.binding.ClusterBinding.getCount()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.binding.ClusterBinding.retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.binding.ClusterBinding.retain()"], ["com.mongodb.binding.AsyncSingleConnectionReadBinding", "com.mongodb.binding.AsyncSingleConnectionReadBinding(com.mongodb.ReadPreference, com.mongodb.connection.ServerDescription, com.mongodb.connection.AsyncConnection)"], ["com.mongodb.ReadPreference", "com.mongodb.binding.AsyncSingleConnectionReadBinding.getReadPreference()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncSingleConnectionReadBinding.getSessionContext()"], ["void", "com.mongodb.binding.AsyncSingleConnectionReadBinding.getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["com.mongodb.binding.AsyncReadBinding", "com.mongodb.binding.AsyncSingleConnectionReadBinding.retain()"], ["void", "com.mongodb.binding.AsyncSingleConnectionReadBinding.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncSingleConnectionReadBinding.retain()"], ["int", "com.mongodb.binding.AsyncSingleConnectionReadBinding.getCount()"], ["int", "com.mongodb.binding.AbstractReferenceCounted.getCount()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AbstractReferenceCounted.retain()"], ["void", "com.mongodb.binding.AbstractReferenceCounted.release()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.retain()"], ["void", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.retain()"], ["com.mongodb.binding.AsyncClusterBinding", "com.mongodb.binding.AsyncClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)"], ["com.mongodb.binding.AsyncReadWriteBinding", "com.mongodb.binding.AsyncClusterBinding.retain()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.AsyncClusterBinding.getReadPreference()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncClusterBinding.getSessionContext()"], ["void", "com.mongodb.binding.AsyncClusterBinding.getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["void", "com.mongodb.binding.AsyncClusterBinding.getWriteConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["void", "com.mongodb.binding.AsyncClusterBinding.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncClusterBinding.retain()"], ["int", "com.mongodb.binding.AsyncClusterBinding.getCount()"], ["com.mongodb.binding.AsyncReadBinding", "com.mongodb.binding.AsyncClusterBinding.retain()"], ["com.mongodb.binding.AsyncWriteBinding", "com.mongodb.binding.AsyncClusterBinding.retain()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.getSessionContext()"], ["void", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.binding.AsyncConnectionSource", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.retain()"], ["void", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.retain()"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress)"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress, com.mongodb.ReadPreference)"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding.getWriteConnectionSource()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.SingleServerBinding.getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding.getReadConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.SingleServerBinding.getSessionContext()"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding.retain()"], ["void", "com.mongodb.binding.SingleServerBinding.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleServerBinding.retain()"], ["int", "com.mongodb.binding.SingleServerBinding.getCount()"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.binding.SingleServerBinding.retain()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.binding.SingleServerBinding.retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.binding.SingleServerBinding.retain()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.getSessionContext()"], ["void", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.binding.AsyncConnectionSource", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.retain()"], ["void", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.retain()"], ["java.lang.String", "com.mongodb.TaggableReadPreference$NearestReadPreference.getName()"], ["com.mongodb.DBRef", "com.mongodb.DBRef(java.lang.String, java.lang.Object)"], ["com.mongodb.DBRef", "com.mongodb.DBRef(java.lang.String, java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.mongodb.DBRef.getId()"], ["java.lang.String", "com.mongodb.DBRef.getCollectionName()"], ["java.lang.String", "com.mongodb.DBRef.getDatabaseName()"], ["boolean", "com.mongodb.DBRef.equals(java.lang.Object)"], ["int", "com.mongodb.DBRef.hashCode()"], ["java.lang.String", "com.mongodb.DBRef.toString()"], ["java.lang.Boolean", "com.mongodb.AggregationOptions.getAllowDiskUse()"], ["java.lang.Integer", "com.mongodb.AggregationOptions.getBatchSize()"], ["com.mongodb.AggregationOptions$OutputMode", "com.mongodb.AggregationOptions.getOutputMode()"], ["long", "com.mongodb.AggregationOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.AggregationOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.Collation", "com.mongodb.AggregationOptions.getCollation()"], ["java.lang.String", "com.mongodb.AggregationOptions.toString()"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions.builder()"], ["com.mongodb.LazyDBDecoder", "com.mongodb.LazyDBDecoder()"], ["com.mongodb.DBCallback", "com.mongodb.LazyDBDecoder.getDBCallback(com.mongodb.DBCollection)"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.readObject(java.io.InputStream)"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.decode(java.io.InputStream, com.mongodb.DBCollection)"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.decode(byte[], com.mongodb.DBCollection)"], ["org.bson.BSONObject", "com.mongodb.LazyDBDecoder.readObject(java.io.InputStream)"], ["com.mongodb.DBObject", "com.mongodb.DBObjects.toDBObject(org.bson.BsonDocument)"], ["com.mongodb.MongoSocketOpenException", "com.mongodb.MongoSocketOpenException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.BasicDBList", "com.mongodb.BasicDBList()"], ["java.lang.String", "com.mongodb.BasicDBList.toString()"], ["boolean", "com.mongodb.BasicDBList.isPartialObject()"], ["void", "com.mongodb.BasicDBList.markAsPartialObject()"], ["java.lang.Object", "com.mongodb.BasicDBList.copy()"], ["com.mongodb.MongoNodeIsRecoveringException", "com.mongodb.MongoNodeIsRecoveringException(com.mongodb.ServerAddress)"], ["com.mongodb.MongoBulkWriteException", "com.mongodb.MongoBulkWriteException(com.mongodb.bulk.BulkWriteResult, java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoBulkWriteException.getWriteResult()"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.MongoBulkWriteException.getWriteConcernError()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoBulkWriteException.getServerAddress()"], ["boolean", "com.mongodb.MongoBulkWriteException.equals(java.lang.Object)"], ["int", "com.mongodb.MongoBulkWriteException.hashCode()"], ["boolean", "com.mongodb.WriteConcernResult$1.wasAcknowledged()"], ["int", "com.mongodb.WriteConcernResult$1.getCount()"], ["boolean", "com.mongodb.WriteConcernResult$1.isUpdateOfExisting()"], ["org.bson.BsonValue", "com.mongodb.WriteConcernResult$1.getUpsertedId()"], ["boolean", "com.mongodb.WriteConcernResult$1.equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernResult$1.hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernResult$1.toString()"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult()"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult.acknowledged(int, boolean, org.bson.BsonValue)"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult.unacknowledged()"], ["<TDocument> com.mongodb.client.MongoIterable<TDocument>", "com.mongodb.ChangeStreamIterableImpl.withDocumentClass(java.lang.Class<TDocument>)"], ["com.mongodb.client.MongoIterable", "com.mongodb.ChangeStreamIterableImpl.batchSize(int)"], ["com.mongodb.ErrorCategory[]", "com.mongodb.ErrorCategory.values()"], ["com.mongodb.ErrorCategory", "com.mongodb.ErrorCategory.valueOf(java.lang.String)"], ["com.mongodb.ErrorCategory", "com.mongodb.ErrorCategory.fromErrorCode(int)"], ["java.lang.Object", "com.mongodb.MapReduceIterableImpl$WrappedMapReduceReadOperation.execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.client.MongoIterable", "com.mongodb.ListIndexesIterableImpl.batchSize(int)"], ["com.mongodb.ExplainVerbosity[]", "com.mongodb.ExplainVerbosity.values()"], ["com.mongodb.ExplainVerbosity", "com.mongodb.ExplainVerbosity.valueOf(java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(com.mongodb.DBAddress, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String, int, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.net.InetAddress, int, java.lang.String)"], ["int", "com.mongodb.DBAddress.hashCode()"], ["boolean", "com.mongodb.DBAddress.equals(java.lang.Object)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress.getSister(java.lang.String)"], ["java.lang.String", "com.mongodb.DBAddress.getDBName()"], ["java.lang.String", "com.mongodb.DBAddress.toString()"], ["com.mongodb.MongoSocketException", "com.mongodb.MongoSocketException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.MongoSocketException.getServerAddress()"], ["com.mongodb.DefaultDBDecoder", "com.mongodb.DefaultDBDecoder()"], ["com.mongodb.DBCallback", "com.mongodb.DefaultDBDecoder.getDBCallback(com.mongodb.DBCollection)"], ["com.mongodb.DBObject", "com.mongodb.DefaultDBDecoder.decode(java.io.InputStream, com.mongodb.DBCollection)"], ["com.mongodb.DBObject", "com.mongodb.DefaultDBDecoder.decode(byte[], com.mongodb.DBCollection)"], ["java.lang.String", "com.mongodb.DefaultDBDecoder.toString()"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteResult()"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions()"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.continueOnError(boolean)"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.dbEncoder(com.mongodb.DBEncoder)"], ["com.mongodb.WriteConcern", "com.mongodb.InsertOptions.getWriteConcern()"], ["boolean", "com.mongodb.InsertOptions.isContinueOnError()"], ["com.mongodb.DBEncoder", "com.mongodb.InsertOptions.getDbEncoder()"], ["java.lang.Boolean", "com.mongodb.InsertOptions.getBypassDocumentValidation()"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.gridfs.GridFS", "com.mongodb.gridfs.GridFS(com.mongodb.DB)"], ["com.mongodb.gridfs.GridFS", "com.mongodb.gridfs.GridFS(com.mongodb.DB, java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList()"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.find(org.bson.types.ObjectId)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(org.bson.types.ObjectId)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(java.lang.String)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(com.mongodb.DBObject)"], ["void", "com.mongodb.gridfs.GridFS.remove(org.bson.types.ObjectId)"], ["void", "com.mongodb.gridfs.GridFS.remove(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFS.remove(com.mongodb.DBObject)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(byte[])"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.File)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, boolean)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, java.lang.String)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, java.lang.String, boolean)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.lang.String)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile()"], ["java.lang.String", "com.mongodb.gridfs.GridFS.getBucketName()"], ["com.mongodb.DB", "com.mongodb.gridfs.GridFS.getDB()"], ["void", "com.mongodb.gridfs.GridFSInputFile.setId(java.lang.Object)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setFilename(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setContentType(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setChunkSize(long)"], ["void", "com.mongodb.gridfs.GridFSInputFile.save()"], ["void", "com.mongodb.gridfs.GridFSInputFile.save(long)"], ["int", "com.mongodb.gridfs.GridFSInputFile.saveChunks()"], ["int", "com.mongodb.gridfs.GridFSInputFile.saveChunks(long)"], ["java.io.OutputStream", "com.mongodb.gridfs.GridFSInputFile.getOutputStream()"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFSDBFile()"], ["java.io.InputStream", "com.mongodb.gridfs.GridFSDBFile.getInputStream()"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.lang.String)"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.io.File)"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.io.OutputStream)"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.available()"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read()"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read(byte[])"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read(byte[], int, int)"], ["long", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.skip(long)"], ["com.mongodb.gridfs.CLI", "com.mongodb.gridfs.CLI()"], ["void", "com.mongodb.gridfs.CLI.main(java.lang.String[])"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.write(int)"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.write(byte[], int, int)"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.close()"], ["com.mongodb.gridfs.GridFSFile", "com.mongodb.gridfs.GridFSFile()"], ["void", "com.mongodb.gridfs.GridFSFile.save()"], ["void", "com.mongodb.gridfs.GridFSFile.validate()"], ["int", "com.mongodb.gridfs.GridFSFile.numChunks()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.getId()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getFilename()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getContentType()"], ["long", "com.mongodb.gridfs.GridFSFile.getLength()"], ["long", "com.mongodb.gridfs.GridFSFile.getChunkSize()"], ["java.util.Date", "com.mongodb.gridfs.GridFSFile.getUploadDate()"], ["com.mongodb.DBObject", "com.mongodb.gridfs.GridFSFile.getMetaData()"], ["void", "com.mongodb.gridfs.GridFSFile.setMetaData(com.mongodb.DBObject)"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getMD5()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.get(java.lang.String)"], ["boolean", "com.mongodb.gridfs.GridFSFile.containsKey(java.lang.String)"], ["boolean", "com.mongodb.gridfs.GridFSFile.containsField(java.lang.String)"], ["boolean", "com.mongodb.gridfs.GridFSFile.isPartialObject()"], ["void", "com.mongodb.gridfs.GridFSFile.markAsPartialObject()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.toString()"], ["void", "com.mongodb.gridfs.GridFSFile.putAll(org.bson.BSONObject)"], ["void", "com.mongodb.gridfs.GridFSFile.putAll(java.util.Map)"], ["java.util.Map<?, ?>", "com.mongodb.gridfs.GridFSFile.toMap()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.removeField(java.lang.String)"], ["com.mongodb.WriteConcernError", "com.mongodb.WriteConcernError(int, java.lang.String, com.mongodb.DBObject)"], ["int", "com.mongodb.WriteConcernError.getCode()"], ["java.lang.String", "com.mongodb.WriteConcernError.getMessage()"], ["com.mongodb.DBObject", "com.mongodb.WriteConcernError.getDetails()"], ["boolean", "com.mongodb.WriteConcernError.equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernError.hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernError.toString()"], ["boolean", "com.mongodb.CursorType$1.isTailable()"], ["java.lang.String", "com.mongodb.MongoDatabaseImpl.getName()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoDatabaseImpl.getCodecRegistry()"], ["com.mongodb.ReadPreference", "com.mongodb.MongoDatabaseImpl.getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoDatabaseImpl.getWriteConcern()"], ["com.mongodb.ReadConcern", "com.mongodb.MongoDatabaseImpl.getReadConcern()"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoDatabaseImpl.withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoDatabaseImpl.withReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoDatabaseImpl.withWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoDatabaseImpl.withReadConcern(com.mongodb.ReadConcern)"], ["<TDocument> com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.MongoDatabaseImpl.getCollection(java.lang.String, java.lang.Class<TDocument>)"], ["org.bson.Document", "com.mongodb.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson)"], ["org.bson.Document", "com.mongodb.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference)"], ["<TResult> TResult", "com.mongodb.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> TResult", "com.mongodb.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference, java.lang.Class<TResult>)"], ["org.bson.Document", "com.mongodb.MongoDatabaseImpl.runCommand(com.mongodb.session.ClientSession, org.bson.conversions.Bson)"], ["org.bson.Document", "com.mongodb.MongoDatabaseImpl.runCommand(com.mongodb.session.ClientSession, org.bson.conversions.Bson, com.mongodb.ReadPreference)"], ["<TResult> TResult", "com.mongodb.MongoDatabaseImpl.runCommand(com.mongodb.session.ClientSession, org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> TResult", "com.mongodb.MongoDatabaseImpl.runCommand(com.mongodb.session.ClientSession, org.bson.conversions.Bson, com.mongodb.ReadPreference, java.lang.Class<TResult>)"], ["void", "com.mongodb.MongoDatabaseImpl.drop()"], ["void", "com.mongodb.MongoDatabaseImpl.drop(com.mongodb.session.ClientSession)"], ["<TResult> com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.MongoDatabaseImpl.listCollections(java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.MongoDatabaseImpl.listCollections(com.mongodb.session.ClientSession, java.lang.Class<TResult>)"], ["void", "com.mongodb.MongoDatabaseImpl.createCollection(java.lang.String)"], ["void", "com.mongodb.MongoDatabaseImpl.createCollection(java.lang.String, com.mongodb.client.model.CreateCollectionOptions)"], ["void", "com.mongodb.MongoDatabaseImpl.createCollection(com.mongodb.session.ClientSession, java.lang.String)"], ["void", "com.mongodb.MongoDatabaseImpl.createCollection(com.mongodb.session.ClientSession, java.lang.String, com.mongodb.client.model.CreateCollectionOptions)"], ["void", "com.mongodb.MongoDatabaseImpl.createView(java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)"], ["void", "com.mongodb.MongoDatabaseImpl.createView(java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.CreateViewOptions)"], ["void", "com.mongodb.MongoDatabaseImpl.createView(com.mongodb.session.ClientSession, java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)"], ["void", "com.mongodb.MongoDatabaseImpl.createView(com.mongodb.session.ClientSession, java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.CreateViewOptions)"], ["com.mongodb.DBDecoder", "com.mongodb.DefaultDBDecoder$1.create()"], ["com.mongodb.Mongo$Holder", "com.mongodb.Mongo$Holder()"], ["com.mongodb.Mongo$Holder", "com.mongodb.Mongo$Holder.singleton()"], ["com.mongodb.Mongo", "com.mongodb.Mongo$Holder.connect(com.mongodb.MongoURI)"], ["com.mongodb.Mongo", "com.mongodb.Mongo$Holder.connect(com.mongodb.MongoClientURI)"], ["com.mongodb.MongoCompressor", "com.mongodb.MongoCompressor.createSnappyCompressor()"], ["com.mongodb.MongoCompressor", "com.mongodb.MongoCompressor.createZlibCompressor()"], ["java.lang.String", "com.mongodb.MongoCompressor.getName()"], ["<T> T", "com.mongodb.MongoCompressor.getProperty(java.lang.String, T)"], ["<T> com.mongodb.MongoCompressor", "com.mongodb.MongoCompressor.withProperty(java.lang.String, T)"], ["boolean", "com.mongodb.MongoCompressor.equals(java.lang.Object)"], ["int", "com.mongodb.MongoCompressor.hashCode()"], ["java.lang.String", "com.mongodb.MongoCompressor.toString()"], ["com.mongodb.MongoSocketReadTimeoutException", "com.mongodb.MongoSocketReadTimeoutException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.diagnostics.logging.Logger", "com.mongodb.diagnostics.logging.Loggers.getLogger(java.lang.String)"], ["java.lang.String", "com.mongodb.diagnostics.logging.JULLogger.getName()"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isTraceEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.trace(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.trace(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isDebugEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.debug(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.debug(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isInfoEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.info(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.info(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isWarnEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.warn(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.warn(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isErrorEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.error(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.error(java.lang.String, java.lang.Throwable)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["java.lang.String", "com.mongodb.diagnostics.logging.SLF4JLogger.getName()"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isTraceEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.trace(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.trace(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isDebugEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.debug(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.debug(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isInfoEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.info(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.info(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isWarnEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.warn(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.warn(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isErrorEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.error(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.error(java.lang.String, java.lang.Throwable)"], ["com.mongodb.client.MongoIterable", "com.mongodb.ListCollectionsIterableImpl.batchSize(int)"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder()"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.numCursors(int)"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.batchSize(int)"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ParallelScanOptions", "com.mongodb.ParallelScanOptions$Builder.build()"], ["com.mongodb.DBObject", "com.mongodb.DBCollectionObjectFactory.getInstance()"], ["com.mongodb.DBObject", "com.mongodb.DBCollectionObjectFactory.getInstance(java.util.List<java.lang.String>)"], ["com.mongodb.DBCollectionObjectFactory", "com.mongodb.DBCollectionObjectFactory.update(java.lang.Class<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBCollectionObjectFactory", "com.mongodb.DBCollectionObjectFactory.update(java.lang.Class<? extends com.mongodb.DBObject>, java.util.List<java.lang.String>)"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.client.model.Collation)"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, java.lang.String, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, java.lang.String, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.client.model.Collation)"], ["com.mongodb.DBObject", "com.mongodb.GroupCommand.toDBObject()"], ["com.mongodb.DB", "com.mongodb.DB(com.mongodb.Mongo, java.lang.String)"], ["com.mongodb.Mongo", "com.mongodb.DB.getMongo()"], ["void", "com.mongodb.DB.setReadPreference(com.mongodb.ReadPreference)"], ["void", "com.mongodb.DB.setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.ReadPreference", "com.mongodb.DB.getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.DB.getWriteConcern()"], ["void", "com.mongodb.DB.setReadConcern(com.mongodb.ReadConcern)"], ["com.mongodb.ReadConcern", "com.mongodb.DB.getReadConcern()"], ["com.mongodb.DBCollection", "com.mongodb.DB.getCollection(java.lang.String)"], ["void", "com.mongodb.DB.dropDatabase()"], ["com.mongodb.DBCollection", "com.mongodb.DB.getCollectionFromString(java.lang.String)"], ["java.lang.String", "com.mongodb.DB.getName()"], ["com.mongodb.DBCollection", "com.mongodb.DB.createCollection(java.lang.String, com.mongodb.DBObject)"], ["com.mongodb.DBCollection", "com.mongodb.DB.createView(java.lang.String, java.lang.String, java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBCollection", "com.mongodb.DB.createView(java.lang.String, java.lang.String, java.util.List<? extends com.mongodb.DBObject>, com.mongodb.client.model.DBCreateViewOptions)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.DBEncoder)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.ReadPreference, com.mongodb.DBEncoder)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(java.lang.String, com.mongodb.ReadPreference)"], ["com.mongodb.DB", "com.mongodb.DB.getSisterDB(java.lang.String)"], ["boolean", "com.mongodb.DB.collectionExists(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DB.doEval(java.lang.String, java.lang.Object...)"], ["java.lang.Object", "com.mongodb.DB.eval(java.lang.String, java.lang.Object...)"], ["com.mongodb.CommandResult", "com.mongodb.DB.getStats()"], ["com.mongodb.WriteResult", "com.mongodb.DB.addUser(java.lang.String, char[])"], ["com.mongodb.WriteResult", "com.mongodb.DB.addUser(java.lang.String, char[], boolean)"], ["com.mongodb.WriteResult", "com.mongodb.DB.removeUser(java.lang.String)"], ["void", "com.mongodb.DB.slaveOk()"], ["void", "com.mongodb.DB.addOption(int)"], ["void", "com.mongodb.DB.setOptions(int)"], ["void", "com.mongodb.DB.resetOptions()"], ["int", "com.mongodb.DB.getOptions()"], ["java.lang.String", "com.mongodb.DB.toString()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder(com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.description(java.lang.String)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.applicationName(java.lang.String)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.compressorList(java.util.List<com.mongodb.MongoCompressor>)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.minConnectionsPerHost(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.connectionsPerHost(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.threadsAllowedToBlockForConnectionMultiplier(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.serverSelectionTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxWaitTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxConnectionIdleTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxConnectionLifeTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.connectTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketKeepAlive(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.sslEnabled(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.sslInvalidHostNameAllowed(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.sslContext(javax.net.ssl.SSLContext)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.retryWrites(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.codecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.serverSelector(com.mongodb.selector.ServerSelector)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addCommandListener(com.mongodb.event.CommandListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addConnectionPoolListener(com.mongodb.event.ConnectionPoolListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addClusterListener(com.mongodb.event.ClusterListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addServerListener(com.mongodb.event.ServerListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addServerMonitorListener(com.mongodb.event.ServerMonitorListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketFactory(javax.net.SocketFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.cursorFinalizerEnabled(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.alwaysUseMBeans(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.dbDecoderFactory(com.mongodb.DBDecoderFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.dbEncoderFactory(com.mongodb.DBEncoderFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatFrequency(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.minHeartbeatFrequency(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatConnectTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatSocketTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.localThreshold(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.requiredReplicaSetName(java.lang.String)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.legacyDefaults()"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClientOptions$Builder.build()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.primary()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.primaryPreferred()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondary()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondaryPreferred()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.nearest()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.primaryPreferred(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondary(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.nearest(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.valueOf(java.lang.String)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.valueOf(java.lang.String, java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.valueOf(java.lang.String, java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions(com.mongodb.MongoClientOptions)"], ["void", "com.mongodb.MongoOptions.reset()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions.copy()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoOptions.getWriteConcern()"], ["void", "com.mongodb.MongoOptions.setWriteConcern(com.mongodb.WriteConcern)"], ["synchronized", "com.mongodb.MongoOptions.javax.net.SocketFactory getSocketFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketFactory(javax.net.SocketFactory)"], ["synchronized", "com.mongodb.MongoOptions.java.lang.String getDescription()"], ["synchronized", "com.mongodb.MongoOptions.void setDescription(java.lang.String)"], ["synchronized", "com.mongodb.MongoOptions.int getConnectionsPerHost()"], ["synchronized", "com.mongodb.MongoOptions.void setConnectionsPerHost(int)"], ["synchronized", "com.mongodb.MongoOptions.int getThreadsAllowedToBlockForConnectionMultiplier()"], ["synchronized", "com.mongodb.MongoOptions.void setThreadsAllowedToBlockForConnectionMultiplier(int)"], ["synchronized", "com.mongodb.MongoOptions.int getMaxWaitTime()"], ["synchronized", "com.mongodb.MongoOptions.void setMaxWaitTime(int)"], ["synchronized", "com.mongodb.MongoOptions.int getConnectTimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setConnectTimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.int getSocketTimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketTimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.boolean isSocketKeepAlive()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketKeepAlive(boolean)"], ["synchronized", "com.mongodb.MongoOptions.com.mongodb.DBDecoderFactory getDbDecoderFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setDbDecoderFactory(com.mongodb.DBDecoderFactory)"], ["synchronized", "com.mongodb.MongoOptions.com.mongodb.DBEncoderFactory getDbEncoderFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setDbEncoderFactory(com.mongodb.DBEncoderFactory)"], ["synchronized", "com.mongodb.MongoOptions.boolean isSafe()"], ["synchronized", "com.mongodb.MongoOptions.void setSafe(boolean)"], ["synchronized", "com.mongodb.MongoOptions.int getW()"], ["synchronized", "com.mongodb.MongoOptions.void setW(int)"], ["synchronized", "com.mongodb.MongoOptions.int getWtimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setWtimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.boolean isFsync()"], ["synchronized", "com.mongodb.MongoOptions.void setFsync(boolean)"], ["synchronized", "com.mongodb.MongoOptions.boolean isJ()"], ["synchronized", "com.mongodb.MongoOptions.void setJ(boolean)"], ["com.mongodb.ReadPreference", "com.mongodb.MongoOptions.getReadPreference()"], ["void", "com.mongodb.MongoOptions.setReadPreference(com.mongodb.ReadPreference)"], ["boolean", "com.mongodb.MongoOptions.isCursorFinalizerEnabled()"], ["void", "com.mongodb.MongoOptions.setCursorFinalizerEnabled(boolean)"], ["boolean", "com.mongodb.MongoOptions.isAlwaysUseMBeans()"], ["void", "com.mongodb.MongoOptions.setAlwaysUseMBeans(boolean)"], ["java.lang.String", "com.mongodb.MongoOptions.getRequiredReplicaSetName()"], ["boolean", "com.mongodb.MongoOptions.equals(java.lang.Object)"], ["int", "com.mongodb.MongoOptions.hashCode()"], ["java.lang.String", "com.mongodb.MongoOptions.toString()"], ["com.mongodb.MapReduceCommand$OutputType[]", "com.mongodb.MapReduceCommand$OutputType.values()"], ["com.mongodb.MapReduceCommand$OutputType", "com.mongodb.MapReduceCommand$OutputType.valueOf(java.lang.String)"], ["boolean", "com.mongodb.CursorType$3.isTailable()"], ["java.lang.Object", "com.mongodb.DBCollection$1.apply(org.bson.BsonValue)"], ["java.lang.Object", "com.mongodb.DBCollection$1.apply(java.lang.Object)"], ["com.mongodb.AuthenticationMechanism[]", "com.mongodb.AuthenticationMechanism.values()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.AuthenticationMechanism.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.AuthenticationMechanism.getMechanismName()"], ["java.lang.String", "com.mongodb.AuthenticationMechanism.toString()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.AuthenticationMechanism.fromMechanismName(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.UpdateRequest.getQuery()"], ["com.mongodb.DBObject", "com.mongodb.UpdateRequest.getUpdate()"], ["boolean", "com.mongodb.UpdateRequest.isUpsert()"], ["boolean", "com.mongodb.UpdateRequest.isMulti()"], ["com.mongodb.client.model.Collation", "com.mongodb.UpdateRequest.getCollation()"], ["java.util.List<? extends com.mongodb.DBObject>", "com.mongodb.UpdateRequest.getArrayFilters()"], ["void", "com.mongodb.MongoNamespace.checkDatabaseNameValidity(java.lang.String)"], ["void", "com.mongodb.MongoNamespace.checkCollectionNameValidity(java.lang.String)"], ["com.mongodb.MongoNamespace", "com.mongodb.MongoNamespace(java.lang.String)"], ["com.mongodb.MongoNamespace", "com.mongodb.MongoNamespace(java.lang.String, java.lang.String)"], ["java.lang.String", "com.mongodb.MongoNamespace.getDatabaseName()"], ["java.lang.String", "com.mongodb.MongoNamespace.getCollectionName()"], ["java.lang.String", "com.mongodb.MongoNamespace.getFullName()"], ["boolean", "com.mongodb.MongoNamespace.equals(java.lang.Object)"], ["java.lang.String", "com.mongodb.MongoNamespace.toString()"], ["int", "com.mongodb.MongoNamespace.hashCode()"], ["boolean", "com.mongodb.TaggableReadPreference.isSlaveOk()"], ["org.bson.BsonDocument", "com.mongodb.TaggableReadPreference.toDocument()"], ["java.lang.Long", "com.mongodb.TaggableReadPreference.getMaxStaleness(java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.TaggableReadPreference.toString()"], ["boolean", "com.mongodb.TaggableReadPreference.equals(java.lang.Object)"], ["int", "com.mongodb.TaggableReadPreference.hashCode()"], ["com.mongodb.Tag", "com.mongodb.Tag(java.lang.String, java.lang.String)"], ["java.lang.String", "com.mongodb.Tag.getName()"], ["java.lang.String", "com.mongodb.Tag.getValue()"], ["boolean", "com.mongodb.Tag.equals(java.lang.Object)"], ["int", "com.mongodb.Tag.hashCode()"], ["java.lang.String", "com.mongodb.Tag.toString()"], ["boolean", "com.mongodb.WriteConcernResult$2.wasAcknowledged()"], ["int", "com.mongodb.WriteConcernResult$2.getCount()"], ["boolean", "com.mongodb.WriteConcernResult$2.isUpdateOfExisting()"], ["org.bson.BsonValue", "com.mongodb.WriteConcernResult$2.getUpsertedId()"], ["boolean", "com.mongodb.WriteConcernResult$2.equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernResult$2.hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernResult$2.toString()"], ["boolean", "com.mongodb.CommandResult.ok()"], ["java.lang.String", "com.mongodb.CommandResult.getErrorMessage()"], ["com.mongodb.MongoException", "com.mongodb.CommandResult.getException()"], ["void", "com.mongodb.CommandResult.throwOnError()"], ["com.mongodb.MongoWriteConcernException", "com.mongodb.MongoWriteConcernException(com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)"], ["com.mongodb.MongoWriteConcernException", "com.mongodb.MongoWriteConcernException(com.mongodb.bulk.WriteConcernError, com.mongodb.WriteConcernResult, com.mongodb.ServerAddress)"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.MongoWriteConcernException.getWriteConcernError()"], ["com.mongodb.WriteConcernResult", "com.mongodb.MongoWriteConcernException.getWriteResult()"], ["com.mongodb.MongoClientException", "com.mongodb.MongoClientException(java.lang.String)"], ["com.mongodb.MongoClientException", "com.mongodb.MongoClientException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoWaitQueueFullException", "com.mongodb.MongoWaitQueueFullException(java.lang.String)"], ["com.mongodb.WriteError", "com.mongodb.WriteError(int, java.lang.String, org.bson.BsonDocument)"], ["com.mongodb.WriteError", "com.mongodb.WriteError(com.mongodb.WriteError)"], ["com.mongodb.ErrorCategory", "com.mongodb.WriteError.getCategory()"], ["int", "com.mongodb.WriteError.getCode()"], ["java.lang.String", "com.mongodb.WriteError.getMessage()"], ["org.bson.BsonDocument", "com.mongodb.WriteError.getDetails()"], ["boolean", "com.mongodb.WriteError.equals(java.lang.Object)"], ["int", "com.mongodb.WriteError.hashCode()"], ["java.lang.String", "com.mongodb.WriteError.toString()"], ["com.mongodb.client.model.Collation", "com.mongodb.BulkUpdateRequestBuilder.getCollation()"], ["com.mongodb.BulkUpdateRequestBuilder", "com.mongodb.BulkUpdateRequestBuilder.collation(com.mongodb.client.model.Collation)"], ["java.util.List<? extends com.mongodb.DBObject>", "com.mongodb.BulkUpdateRequestBuilder.getArrayFilters()"], ["void", "com.mongodb.BulkUpdateRequestBuilder.replaceOne(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkUpdateRequestBuilder.update(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkUpdateRequestBuilder.updateOne(com.mongodb.DBObject)"], ["void", "com.mongodb.MongoIterableImpl$1.apply(TResult)"], ["boolean", "com.mongodb.AcknowledgedBulkWriteResult.isAcknowledged()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getInsertedCount()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getMatchedCount()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getRemovedCount()"], ["boolean", "com.mongodb.AcknowledgedBulkWriteResult.isModifiedCountAvailable()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getModifiedCount()"], ["boolean", "com.mongodb.AcknowledgedBulkWriteResult.equals(java.lang.Object)"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.hashCode()"], ["java.lang.String", "com.mongodb.AcknowledgedBulkWriteResult.toString()"], ["com.mongodb.ReadConcernLevel[]", "com.mongodb.ReadConcernLevel.values()"], ["com.mongodb.ReadConcernLevel", "com.mongodb.ReadConcernLevel.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.ReadConcernLevel.getValue()"], ["com.mongodb.ReadConcernLevel", "com.mongodb.ReadConcernLevel.fromString(java.lang.String)"], ["com.mongodb.MongoSocketWriteException", "com.mongodb.MongoSocketWriteException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.AggregationOptions$OutputMode[]", "com.mongodb.AggregationOptions$OutputMode.values()"], ["com.mongodb.AggregationOptions$OutputMode", "com.mongodb.AggregationOptions$OutputMode.valueOf(java.lang.String)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress()"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.lang.String)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetAddress, int)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetSocketAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.lang.String, int)"], ["boolean", "com.mongodb.ServerAddress.equals(java.lang.Object)"], ["int", "com.mongodb.ServerAddress.hashCode()"], ["java.lang.String", "com.mongodb.ServerAddress.getHost()"], ["int", "com.mongodb.ServerAddress.getPort()"], ["java.net.InetSocketAddress", "com.mongodb.ServerAddress.getSocketAddress()"], ["java.lang.String", "com.mongodb.ServerAddress.toString()"], ["java.lang.String", "com.mongodb.ServerAddress.defaultHost()"], ["int", "com.mongodb.ServerAddress.defaultPort()"], ["boolean", "com.mongodb.ServerAddress.sameHost(java.lang.String)"], ["java.lang.Boolean", "com.mongodb.ClientSessionOptions.isCausallyConsistent()"], ["com.mongodb.ClientSessionOptions$Builder", "com.mongodb.ClientSessionOptions.builder()"], ["com.mongodb.event.ClusterDescriptionChangedEvent", "com.mongodb.event.ClusterDescriptionChangedEvent(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterDescription, com.mongodb.connection.ClusterDescription)"], ["com.mongodb.connection.ClusterId", "com.mongodb.event.ClusterDescriptionChangedEvent.getClusterId()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.event.ClusterDescriptionChangedEvent.getNewDescription()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.event.ClusterDescriptionChangedEvent.getPreviousDescription()"], ["java.lang.String", "com.mongodb.event.ClusterDescriptionChangedEvent.toString()"], ["com.mongodb.event.ClusterListenerAdapter", "com.mongodb.event.ClusterListenerAdapter()"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterOpening(com.mongodb.event.ClusterOpeningEvent)"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterClosed(com.mongodb.event.ClusterClosedEvent)"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)"], ["com.mongodb.event.ConnectionCheckedInEvent", "com.mongodb.event.ConnectionCheckedInEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionCheckedInEvent.getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionCheckedInEvent.toString()"], ["com.mongodb.event.ServerListenerAdapter", "com.mongodb.event.ServerListenerAdapter()"], ["void", "com.mongodb.event.ServerListenerAdapter.serverOpening(com.mongodb.event.ServerOpeningEvent)"], ["void", "com.mongodb.event.ServerListenerAdapter.serverClosed(com.mongodb.event.ServerClosedEvent)"], ["void", "com.mongodb.event.ServerListenerAdapter.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["com.mongodb.event.ConnectionPoolOpenedEvent", "com.mongodb.event.ConnectionPoolOpenedEvent(com.mongodb.connection.ServerId, com.mongodb.connection.ConnectionPoolSettings)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolOpenedEvent.getServerId()"], ["com.mongodb.connection.ConnectionPoolSettings", "com.mongodb.event.ConnectionPoolOpenedEvent.getSettings()"], ["java.lang.String", "com.mongodb.event.ConnectionPoolOpenedEvent.toString()"], ["com.mongodb.event.CommandEvent", "com.mongodb.event.CommandEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String)"], ["int", "com.mongodb.event.CommandEvent.getRequestId()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.event.CommandEvent.getConnectionDescription()"], ["java.lang.String", "com.mongodb.event.CommandEvent.getCommandName()"], ["com.mongodb.event.CommandFailedEvent", "com.mongodb.event.CommandFailedEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, long, java.lang.Throwable)"], ["long", "com.mongodb.event.CommandFailedEvent.getElapsedTime(java.util.concurrent.TimeUnit)"], ["java.lang.Throwable", "com.mongodb.event.CommandFailedEvent.getThrowable()"], ["com.mongodb.event.ConnectionCheckedOutEvent", "com.mongodb.event.ConnectionCheckedOutEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionCheckedOutEvent.getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionCheckedOutEvent.toString()"], ["com.mongodb.event.CommandEventMulticaster", "com.mongodb.event.CommandEventMulticaster(java.util.List<com.mongodb.event.CommandListener>)"], ["void", "com.mongodb.event.CommandEventMulticaster.commandStarted(com.mongodb.event.CommandStartedEvent)"], ["void", "com.mongodb.event.CommandEventMulticaster.commandSucceeded(com.mongodb.event.CommandSucceededEvent)"], ["void", "com.mongodb.event.CommandEventMulticaster.commandFailed(com.mongodb.event.CommandFailedEvent)"], ["com.mongodb.event.ServerHeartbeatFailedEvent", "com.mongodb.event.ServerHeartbeatFailedEvent(com.mongodb.connection.ConnectionId, long, java.lang.Throwable)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ServerHeartbeatFailedEvent.getConnectionId()"], ["long", "com.mongodb.event.ServerHeartbeatFailedEvent.getElapsedTime(java.util.concurrent.TimeUnit)"], ["java.lang.Throwable", "com.mongodb.event.ServerHeartbeatFailedEvent.getThrowable()"], ["java.lang.String", "com.mongodb.event.ServerHeartbeatFailedEvent.toString()"], ["com.mongodb.event.ConnectionClosedEvent", "com.mongodb.event.ConnectionClosedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionClosedEvent.getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionClosedEvent.toString()"], ["com.mongodb.event.ServerHeartbeatSucceededEvent", "com.mongodb.event.ServerHeartbeatSucceededEvent(com.mongodb.connection.ConnectionId, org.bson.BsonDocument, long)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ServerHeartbeatSucceededEvent.getConnectionId()"], ["org.bson.BsonDocument", "com.mongodb.event.ServerHeartbeatSucceededEvent.getReply()"], ["long", "com.mongodb.event.ServerHeartbeatSucceededEvent.getElapsedTime(java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.event.ServerHeartbeatSucceededEvent.toString()"], ["com.mongodb.event.ConnectionRemovedEvent", "com.mongodb.event.ConnectionRemovedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionRemovedEvent.getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionRemovedEvent.toString()"], ["com.mongodb.event.ConnectionMessageReceivedEvent", "com.mongodb.event.ConnectionMessageReceivedEvent(com.mongodb.connection.ConnectionId, int, int)"], ["int", "com.mongodb.event.ConnectionMessageReceivedEvent.getResponseTo()"], ["int", "com.mongodb.event.ConnectionMessageReceivedEvent.getSize()"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionMessageReceivedEvent.getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionMessageReceivedEvent.toString()"], ["com.mongodb.event.ServerMonitorListenerAdapter", "com.mongodb.event.ServerMonitorListenerAdapter()"], ["void", "com.mongodb.event.ServerMonitorListenerAdapter.serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)"], ["void", "com.mongodb.event.ServerMonitorListenerAdapter.serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)"], ["void", "com.mongodb.event.ServerMonitorListenerAdapter.serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)"], ["com.mongodb.event.ServerOpeningEvent", "com.mongodb.event.ServerOpeningEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ServerOpeningEvent.getServerId()"], ["java.lang.String", "com.mongodb.event.ServerOpeningEvent.toString()"], ["com.mongodb.event.CommandStartedEvent", "com.mongodb.event.CommandStartedEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, java.lang.String, org.bson.BsonDocument)"], ["java.lang.String", "com.mongodb.event.CommandStartedEvent.getDatabaseName()"], ["org.bson.BsonDocument", "com.mongodb.event.CommandStartedEvent.getCommand()"], ["com.mongodb.event.ClusterEventMulticaster", "com.mongodb.event.ClusterEventMulticaster(java.util.List<com.mongodb.event.ClusterListener>)"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterOpening(com.mongodb.event.ClusterOpeningEvent)"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterClosed(com.mongodb.event.ClusterClosedEvent)"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)"], ["com.mongodb.event.ServerHeartbeatStartedEvent", "com.mongodb.event.ServerHeartbeatStartedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ServerHeartbeatStartedEvent.getConnectionId()"], ["java.lang.String", "com.mongodb.event.ServerHeartbeatStartedEvent.toString()"], ["com.mongodb.event.ServerDescriptionChangedEvent", "com.mongodb.event.ServerDescriptionChangedEvent(com.mongodb.connection.ServerId, com.mongodb.connection.ServerDescription, com.mongodb.connection.ServerDescription)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ServerDescriptionChangedEvent.getServerId()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.event.ServerDescriptionChangedEvent.getNewDescription()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.event.ServerDescriptionChangedEvent.getPreviousDescription()"], ["java.lang.String", "com.mongodb.event.ServerDescriptionChangedEvent.toString()"], ["com.mongodb.event.ConnectionAddedEvent", "com.mongodb.event.ConnectionAddedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionAddedEvent.getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionAddedEvent.toString()"], ["com.mongodb.event.CommandListenerMulticaster", "com.mongodb.event.CommandListenerMulticaster(java.util.List<com.mongodb.event.CommandListener>)"], ["void", "com.mongodb.event.CommandListenerMulticaster.commandStarted(com.mongodb.event.CommandStartedEvent)"], ["void", "com.mongodb.event.CommandListenerMulticaster.commandSucceeded(com.mongodb.event.CommandSucceededEvent)"], ["void", "com.mongodb.event.CommandListenerMulticaster.commandFailed(com.mongodb.event.CommandFailedEvent)"], ["com.mongodb.event.ClusterClosedEvent", "com.mongodb.event.ClusterClosedEvent(com.mongodb.connection.ClusterId)"], ["com.mongodb.connection.ClusterId", "com.mongodb.event.ClusterClosedEvent.getClusterId()"], ["java.lang.String", "com.mongodb.event.ClusterClosedEvent.toString()"], ["com.mongodb.event.ConnectionPoolEventMulticaster", "com.mongodb.event.ConnectionPoolEventMulticaster()"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.add(com.mongodb.event.ConnectionPoolListener)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.remove(com.mongodb.event.ConnectionPoolListener)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["com.mongodb.event.ConnectionPoolWaitQueueExitedEvent", "com.mongodb.event.ConnectionPoolWaitQueueExitedEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolWaitQueueExitedEvent.getServerId()"], ["java.lang.String", "com.mongodb.event.ConnectionPoolWaitQueueExitedEvent.toString()"], ["com.mongodb.event.ServerEventMulticaster", "com.mongodb.event.ServerEventMulticaster(java.util.List<com.mongodb.event.ServerListener>)"], ["void", "com.mongodb.event.ServerEventMulticaster.serverOpening(com.mongodb.event.ServerOpeningEvent)"], ["void", "com.mongodb.event.ServerEventMulticaster.serverClosed(com.mongodb.event.ServerClosedEvent)"], ["void", "com.mongodb.event.ServerEventMulticaster.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent", "com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent.getServerId()"], ["java.lang.String", "com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent.toString()"], ["com.mongodb.event.CommandSucceededEvent", "com.mongodb.event.CommandSucceededEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, org.bson.BsonDocument, long)"], ["long", "com.mongodb.event.CommandSucceededEvent.getElapsedTime(java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.event.CommandSucceededEvent.getResponse()"], ["com.mongodb.event.ConnectionMessagesSentEvent", "com.mongodb.event.ConnectionMessagesSentEvent(com.mongodb.connection.ConnectionId, int, int)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionMessagesSentEvent.getConnectionId()"], ["int", "com.mongodb.event.ConnectionMessagesSentEvent.getRequestId()"], ["int", "com.mongodb.event.ConnectionMessagesSentEvent.getSize()"], ["java.lang.String", "com.mongodb.event.ConnectionMessagesSentEvent.toString()"], ["com.mongodb.event.ServerMonitorEventMulticaster", "com.mongodb.event.ServerMonitorEventMulticaster(java.util.List<com.mongodb.event.ServerMonitorListener>)"], ["void", "com.mongodb.event.ServerMonitorEventMulticaster.serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)"], ["void", "com.mongodb.event.ServerMonitorEventMulticaster.serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)"], ["void", "com.mongodb.event.ServerMonitorEventMulticaster.serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)"], ["com.mongodb.event.ConnectionPoolClosedEvent", "com.mongodb.event.ConnectionPoolClosedEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolClosedEvent.getServerId()"], ["java.lang.String", "com.mongodb.event.ConnectionPoolClosedEvent.toString()"], ["com.mongodb.event.ServerClosedEvent", "com.mongodb.event.ServerClosedEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ServerClosedEvent.getServerId()"], ["java.lang.String", "com.mongodb.event.ServerClosedEvent.toString()"], ["com.mongodb.event.ConnectionPoolListenerAdapter", "com.mongodb.event.ConnectionPoolListenerAdapter()"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["com.mongodb.event.ClusterOpeningEvent", "com.mongodb.event.ClusterOpeningEvent(com.mongodb.connection.ClusterId)"], ["com.mongodb.connection.ClusterId", "com.mongodb.event.ClusterOpeningEvent.getClusterId()"], ["java.lang.String", "com.mongodb.event.ClusterOpeningEvent.toString()"], ["com.mongodb.event.ConnectionOpenedEvent", "com.mongodb.event.ConnectionOpenedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionOpenedEvent.getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionOpenedEvent.toString()"], ["boolean", "com.mongodb.CursorType$2.isTailable()"], ["com.mongodb.client.MongoDriverInformation$Builder", "com.mongodb.client.MongoDriverInformation.builder()"], ["com.mongodb.client.MongoDriverInformation$Builder", "com.mongodb.client.MongoDriverInformation.builder(com.mongodb.client.MongoDriverInformation)"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.wasAcknowledged()"], ["long", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getMatchedCount()"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.isModifiedCountAvailable()"], ["long", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getModifiedCount()"], ["org.bson.BsonValue", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getUpsertedId()"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.equals(java.lang.Object)"], ["int", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.hashCode()"], ["java.lang.String", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.toString()"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.wasAcknowledged()"], ["long", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getMatchedCount()"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.isModifiedCountAvailable()"], ["long", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getModifiedCount()"], ["org.bson.BsonValue", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getUpsertedId()"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.equals(java.lang.Object)"], ["int", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.hashCode()"], ["java.lang.String", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.toString()"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult()"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult.acknowledged(long)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult.unacknowledged()"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult()"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult.acknowledged(long, java.lang.Long, org.bson.BsonValue)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult.unacknowledged()"], ["boolean", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.wasAcknowledged()"], ["long", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.getDeletedCount()"], ["boolean", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.equals(java.lang.Object)"], ["int", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.hashCode()"], ["java.lang.String", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.toString()"], ["boolean", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.wasAcknowledged()"], ["long", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.getDeletedCount()"], ["boolean", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.equals(java.lang.Object)"], ["int", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.hashCode()"], ["java.lang.String", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.toString()"], ["com.mongodb.client.MongoDriverInformation$Builder", "com.mongodb.client.MongoDriverInformation$Builder.driverName(java.lang.String)"], ["com.mongodb.client.MongoDriverInformation$Builder", "com.mongodb.client.MongoDriverInformation$Builder.driverVersion(java.lang.String)"], ["com.mongodb.client.MongoDriverInformation$Builder", "com.mongodb.client.MongoDriverInformation$Builder.driverPlatform(java.lang.String)"], ["com.mongodb.client.MongoDriverInformation", "com.mongodb.client.MongoDriverInformation$Builder.build()"], ["com.mongodb.client.jndi.MongoClientFactory", "com.mongodb.client.jndi.MongoClientFactory()"], ["java.lang.Object", "com.mongodb.client.jndi.MongoClientFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.sort(org.bson.conversions.Bson)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.skip(int)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.limit(int)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.filter(org.bson.conversions.Bson)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.batchSize(int)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.noCursorTimeout(boolean)"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.GridFSFindIterableImpl.first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.client.gridfs.GridFSFindIterableImpl.map(com.mongodb.Function<com.mongodb.client.gridfs.model.GridFSFile, U>)"], ["void", "com.mongodb.client.gridfs.GridFSFindIterableImpl.forEach(com.mongodb.Block<? super com.mongodb.client.gridfs.model.GridFSFile>)"], ["<A extends java.util.Collection<? super com.mongodb.client.gridfs.model.GridFSFile>> A", "com.mongodb.client.gridfs.GridFSFindIterableImpl.into(A)"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.batchSize(int)"], ["java.lang.Object", "com.mongodb.client.gridfs.GridFSFindIterableImpl.first()"], ["java.util.Iterator", "com.mongodb.client.gridfs.GridFSFindIterableImpl.iterator()"], ["com.mongodb.client.gridfs.codecs.GridFSFileCodec", "com.mongodb.client.gridfs.codecs.GridFSFileCodec(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.encode(org.bson.BsonWriter, com.mongodb.client.gridfs.model.GridFSFile, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider", "com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSUploadStream()"], ["void", "com.mongodb.client.gridfs.GridFSUploadStream.flush()"], ["java.lang.String", "com.mongodb.client.gridfs.GridFSBucketImpl.getBucketName()"], ["int", "com.mongodb.client.gridfs.GridFSBucketImpl.getChunkSizeBytes()"], ["com.mongodb.ReadPreference", "com.mongodb.client.gridfs.GridFSBucketImpl.getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.client.gridfs.GridFSBucketImpl.getWriteConcern()"], ["com.mongodb.ReadConcern", "com.mongodb.client.gridfs.GridFSBucketImpl.getReadConcern()"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withChunkSizeBytes(int)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withReadConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(org.bson.BsonValue, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(org.bson.BsonValue, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.session.ClientSession, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.session.ClientSession, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.session.ClientSession, org.bson.types.ObjectId, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.session.ClientSession, org.bson.BsonValue, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.session.ClientSession, org.bson.BsonValue, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(java.lang.String, java.io.InputStream)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(org.bson.BsonValue, java.lang.String, java.io.InputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(org.bson.BsonValue, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(com.mongodb.session.ClientSession, java.lang.String, java.io.InputStream)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(com.mongodb.session.ClientSession, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(com.mongodb.session.ClientSession, org.bson.BsonValue, java.lang.String, java.io.InputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(com.mongodb.session.ClientSession, org.bson.BsonValue, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(org.bson.types.ObjectId)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(org.bson.BsonValue)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(java.lang.String)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadOptions)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(com.mongodb.session.ClientSession, org.bson.types.ObjectId)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(com.mongodb.session.ClientSession, org.bson.BsonValue)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(com.mongodb.session.ClientSession, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(com.mongodb.session.ClientSession, java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(org.bson.types.ObjectId, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(org.bson.BsonValue, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(java.lang.String, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(com.mongodb.session.ClientSession, org.bson.types.ObjectId, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(com.mongodb.session.ClientSession, org.bson.BsonValue, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(com.mongodb.session.ClientSession, java.lang.String, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(com.mongodb.session.ClientSession, java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadOptions)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSBucketImpl.find()"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSBucketImpl.find(org.bson.conversions.Bson)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSBucketImpl.find(com.mongodb.session.ClientSession)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSBucketImpl.find(com.mongodb.session.ClientSession, org.bson.conversions.Bson)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.delete(org.bson.types.ObjectId)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.delete(org.bson.BsonValue)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.delete(com.mongodb.session.ClientSession, org.bson.types.ObjectId)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.delete(com.mongodb.session.ClientSession, org.bson.BsonValue)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.rename(org.bson.types.ObjectId, java.lang.String)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.rename(org.bson.BsonValue, java.lang.String)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.rename(com.mongodb.session.ClientSession, org.bson.types.ObjectId, java.lang.String)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.rename(com.mongodb.session.ClientSession, org.bson.BsonValue, java.lang.String)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.drop()"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.drop(com.mongodb.session.ClientSession)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStreamByName(java.lang.String)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStreamByName(java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStreamByName(java.lang.String, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStreamByName(java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.getFileId()"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.getObjectId()"], ["org.bson.BsonValue", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.getId()"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.abort()"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.write(int)"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.write(byte[])"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.write(byte[], int, int)"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.close()"], ["com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions", "com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions()"], ["com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions", "com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions.revision(int)"], ["int", "com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions.getRevision()"], ["com.mongodb.client.gridfs.model.GridFSDownloadOptions", "com.mongodb.client.gridfs.model.GridFSDownloadOptions()"], ["com.mongodb.client.gridfs.model.GridFSDownloadOptions", "com.mongodb.client.gridfs.model.GridFSDownloadOptions.revision(int)"], ["int", "com.mongodb.client.gridfs.model.GridFSDownloadOptions.getRevision()"], ["com.mongodb.client.gridfs.model.GridFSUploadOptions", "com.mongodb.client.gridfs.model.GridFSUploadOptions()"], ["java.lang.Integer", "com.mongodb.client.gridfs.model.GridFSUploadOptions.getChunkSizeBytes()"], ["com.mongodb.client.gridfs.model.GridFSUploadOptions", "com.mongodb.client.gridfs.model.GridFSUploadOptions.chunkSizeBytes(java.lang.Integer)"], ["org.bson.Document", "com.mongodb.client.gridfs.model.GridFSUploadOptions.getMetadata()"], ["com.mongodb.client.gridfs.model.GridFSUploadOptions", "com.mongodb.client.gridfs.model.GridFSUploadOptions.metadata(org.bson.Document)"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.model.GridFSFile(org.bson.BsonValue, java.lang.String, long, int, java.util.Date, java.lang.String, org.bson.Document)"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.model.GridFSFile(org.bson.BsonValue, java.lang.String, long, int, java.util.Date, java.lang.String, org.bson.Document, org.bson.Document)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.model.GridFSFile.getObjectId()"], ["org.bson.BsonValue", "com.mongodb.client.gridfs.model.GridFSFile.getId()"], ["java.lang.String", "com.mongodb.client.gridfs.model.GridFSFile.getFilename()"], ["long", "com.mongodb.client.gridfs.model.GridFSFile.getLength()"], ["int", "com.mongodb.client.gridfs.model.GridFSFile.getChunkSize()"], ["java.util.Date", "com.mongodb.client.gridfs.model.GridFSFile.getUploadDate()"], ["java.lang.String", "com.mongodb.client.gridfs.model.GridFSFile.getMD5()"], ["org.bson.Document", "com.mongodb.client.gridfs.model.GridFSFile.getMetadata()"], ["org.bson.Document", "com.mongodb.client.gridfs.model.GridFSFile.getExtraElements()"], ["java.lang.String", "com.mongodb.client.gridfs.model.GridFSFile.getContentType()"], ["boolean", "com.mongodb.client.gridfs.model.GridFSFile.equals(java.lang.Object)"], ["int", "com.mongodb.client.gridfs.model.GridFSFile.hashCode()"], ["java.lang.String", "com.mongodb.client.gridfs.model.GridFSFile.toString()"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSDownloadStream()"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBuckets.create(com.mongodb.client.MongoDatabase)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBuckets.create(com.mongodb.client.MongoDatabase, java.lang.String)"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.getGridFSFile()"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.batchSize(int)"], ["int", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.read()"], ["int", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.read(byte[])"], ["int", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.read(byte[], int, int)"], ["long", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.skip(long)"], ["int", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.available()"], ["void", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.mark()"], ["synchronized", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.void mark(int)"], ["synchronized", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.void reset()"], ["boolean", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.markSupported()"], ["void", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.close()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$GroupStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$GroupStage.toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$NotFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$NotFilter.toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$1.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$SortByCountStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$SortByCountStage.toString()"], ["com.mongodb.client.model.ValidationLevel[]", "com.mongodb.client.model.ValidationLevel.values()"], ["com.mongodb.client.model.ValidationLevel", "com.mongodb.client.model.ValidationLevel.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.ValidationLevel.getValue()"], ["com.mongodb.client.model.ValidationLevel", "com.mongodb.client.model.ValidationLevel.fromString(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.geojson.Geometry.toJson()"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystem", "com.mongodb.client.model.geojson.Geometry.getCoordinateReferenceSystem()"], ["boolean", "com.mongodb.client.model.geojson.Geometry.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.Geometry.hashCode()"], ["com.mongodb.client.model.geojson.codecs.MultiPolygonCodec", "com.mongodb.client.model.geojson.codecs.MultiPolygonCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.MultiPolygonCodec.getEncoderClass()"], ["com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider", "com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.geojson.codecs.GeometryCodec", "com.mongodb.client.model.geojson.codecs.GeometryCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.GeometryCodec.getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.GeometryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.GeometryCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.codecs.MultiPointCodec", "com.mongodb.client.model.geojson.codecs.MultiPointCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.MultiPointCodec.getEncoderClass()"], ["com.mongodb.client.model.geojson.codecs.PointCodec", "com.mongodb.client.model.geojson.codecs.PointCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.PointCodec.getEncoderClass()"], ["com.mongodb.client.model.geojson.codecs.MultiLineStringCodec", "com.mongodb.client.model.geojson.codecs.MultiLineStringCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.MultiLineStringCodec.getEncoderClass()"], ["com.mongodb.client.model.geojson.codecs.PolygonCodec", "com.mongodb.client.model.geojson.codecs.PolygonCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.PolygonCodec.getEncoderClass()"], ["void", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["T", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec()"], ["void", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec", "com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec.getEncoderClass()"], ["com.mongodb.client.model.geojson.codecs.LineStringCodec", "com.mongodb.client.model.geojson.codecs.LineStringCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.LineStringCodec.getEncoderClass()"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystem", "com.mongodb.client.model.geojson.CoordinateReferenceSystem()"], ["com.mongodb.client.model.geojson.GeoJsonObjectType[]", "com.mongodb.client.model.geojson.GeoJsonObjectType.values()"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.GeoJsonObjectType.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.geojson.GeoJsonObjectType.getTypeName()"], ["com.mongodb.client.model.geojson.Point", "com.mongodb.client.model.geojson.Point(com.mongodb.client.model.geojson.Position)"], ["com.mongodb.client.model.geojson.Point", "com.mongodb.client.model.geojson.Point(com.mongodb.client.model.geojson.CoordinateReferenceSystem, com.mongodb.client.model.geojson.Position)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.Point.getType()"], ["com.mongodb.client.model.geojson.Position", "com.mongodb.client.model.geojson.Point.getCoordinates()"], ["com.mongodb.client.model.geojson.Position", "com.mongodb.client.model.geojson.Point.getPosition()"], ["boolean", "com.mongodb.client.model.geojson.Point.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.Point.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.Point.toString()"], ["com.mongodb.client.model.geojson.PolygonCoordinates", "com.mongodb.client.model.geojson.PolygonCoordinates(java.util.List<com.mongodb.client.model.geojson.Position>, java.util.List<com.mongodb.client.model.geojson.Position>...)"], ["boolean", "com.mongodb.client.model.geojson.PolygonCoordinates.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.PolygonCoordinates.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.PolygonCoordinates.toString()"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystemType[]", "com.mongodb.client.model.geojson.CoordinateReferenceSystemType.values()"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystemType", "com.mongodb.client.model.geojson.CoordinateReferenceSystemType.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.geojson.CoordinateReferenceSystemType.getTypeName()"], ["com.mongodb.client.model.geojson.Polygon", "com.mongodb.client.model.geojson.Polygon(java.util.List<com.mongodb.client.model.geojson.Position>, java.util.List<com.mongodb.client.model.geojson.Position>...)"], ["com.mongodb.client.model.geojson.Polygon", "com.mongodb.client.model.geojson.Polygon(com.mongodb.client.model.geojson.PolygonCoordinates)"], ["com.mongodb.client.model.geojson.Polygon", "com.mongodb.client.model.geojson.Polygon(com.mongodb.client.model.geojson.CoordinateReferenceSystem, com.mongodb.client.model.geojson.PolygonCoordinates)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.Polygon.getType()"], ["com.mongodb.client.model.geojson.PolygonCoordinates", "com.mongodb.client.model.geojson.Polygon.getCoordinates()"], ["boolean", "com.mongodb.client.model.geojson.Polygon.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.Polygon.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.Polygon.toString()"], ["com.mongodb.client.model.geojson.LineString", "com.mongodb.client.model.geojson.LineString(java.util.List<com.mongodb.client.model.geojson.Position>)"], ["com.mongodb.client.model.geojson.LineString", "com.mongodb.client.model.geojson.LineString(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.Position>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.LineString.getType()"], ["boolean", "com.mongodb.client.model.geojson.LineString.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.LineString.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.LineString.toString()"], ["com.mongodb.client.model.geojson.Position", "com.mongodb.client.model.geojson.Position(java.util.List<java.lang.Double>)"], ["com.mongodb.client.model.geojson.Position", "com.mongodb.client.model.geojson.Position(double, double, double...)"], ["boolean", "com.mongodb.client.model.geojson.Position.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.Position.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.Position.toString()"], ["com.mongodb.client.model.geojson.MultiPoint", "com.mongodb.client.model.geojson.MultiPoint(java.util.List<com.mongodb.client.model.geojson.Position>)"], ["com.mongodb.client.model.geojson.MultiPoint", "com.mongodb.client.model.geojson.MultiPoint(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.Position>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.MultiPoint.getType()"], ["boolean", "com.mongodb.client.model.geojson.MultiPoint.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.MultiPoint.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.MultiPoint.toString()"], ["com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem(java.lang.String)"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystemType", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.getType()"], ["java.lang.String", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.getName()"], ["boolean", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.toString()"], ["com.mongodb.client.model.geojson.GeometryCollection", "com.mongodb.client.model.geojson.GeometryCollection(java.util.List<? extends com.mongodb.client.model.geojson.Geometry>)"], ["com.mongodb.client.model.geojson.GeometryCollection", "com.mongodb.client.model.geojson.GeometryCollection(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<? extends com.mongodb.client.model.geojson.Geometry>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.GeometryCollection.getType()"], ["java.util.List<? extends com.mongodb.client.model.geojson.Geometry>", "com.mongodb.client.model.geojson.GeometryCollection.getGeometries()"], ["boolean", "com.mongodb.client.model.geojson.GeometryCollection.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.GeometryCollection.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.GeometryCollection.toString()"], ["com.mongodb.client.model.geojson.MultiPolygon", "com.mongodb.client.model.geojson.MultiPolygon(java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>)"], ["com.mongodb.client.model.geojson.MultiPolygon", "com.mongodb.client.model.geojson.MultiPolygon(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.MultiPolygon.getType()"], ["boolean", "com.mongodb.client.model.geojson.MultiPolygon.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.MultiPolygon.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.MultiPolygon.toString()"], ["com.mongodb.client.model.geojson.MultiLineString", "com.mongodb.client.model.geojson.MultiLineString(java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>)"], ["com.mongodb.client.model.geojson.MultiLineString", "com.mongodb.client.model.geojson.MultiLineString(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.MultiLineString.getType()"], ["boolean", "com.mongodb.client.model.geojson.MultiLineString.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.MultiLineString.hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.MultiLineString.toString()"], ["com.mongodb.client.model.UpdateManyModel", "com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.model.UpdateManyModel", "com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateManyModel.getFilter()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateManyModel.getUpdate()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateManyModel.getOptions()"], ["com.mongodb.client.model.TextSearchOptions", "com.mongodb.client.model.TextSearchOptions()"], ["java.lang.String", "com.mongodb.client.model.TextSearchOptions.getLanguage()"], ["com.mongodb.client.model.TextSearchOptions", "com.mongodb.client.model.TextSearchOptions.language(java.lang.String)"], ["java.lang.Boolean", "com.mongodb.client.model.TextSearchOptions.getCaseSensitive()"], ["com.mongodb.client.model.TextSearchOptions", "com.mongodb.client.model.TextSearchOptions.caseSensitive(java.lang.Boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.TextSearchOptions.getDiacriticSensitive()"], ["com.mongodb.client.model.TextSearchOptions", "com.mongodb.client.model.TextSearchOptions.diacriticSensitive(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.client.model.TextSearchOptions.toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$SimpleEncodingFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$SimpleEncodingFilter.toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$OrNorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$OrNorFilter.toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$IterableOperatorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$IterableOperatorFilter.toString()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndDeleteOptions.getProjection()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndDeleteOptions.getSort()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.sort(org.bson.conversions.Bson)"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndDeleteOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.FindOneAndDeleteOptions.getCollation()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.collation(com.mongodb.client.model.Collation)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.SimpleExpression.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.SimpleExpression.toString()"], ["com.mongodb.client.model.BucketOptions", "com.mongodb.client.model.BucketOptions()"], ["com.mongodb.client.model.BucketOptions", "com.mongodb.client.model.BucketOptions.defaultBucket(java.lang.Object)"], ["java.lang.Object", "com.mongodb.client.model.BucketOptions.getDefaultBucket()"], ["com.mongodb.client.model.BucketOptions", "com.mongodb.client.model.BucketOptions.output(com.mongodb.client.model.BsonField...)"], ["com.mongodb.client.model.BucketOptions", "com.mongodb.client.model.BucketOptions.output(java.util.List<com.mongodb.client.model.BsonField>)"], ["com.mongodb.client.model.Facet", "com.mongodb.client.model.Facet(java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.model.Facet", "com.mongodb.client.model.Facet(java.lang.String, org.bson.conversions.Bson...)"], ["java.lang.String", "com.mongodb.client.model.Facet.getName()"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.client.model.Facet.getPipeline()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions()"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getProjection()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.projection(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getSort()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.sort(com.mongodb.DBObject)"], ["boolean", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.isRemove()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.remove(boolean)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getUpdate()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.update(com.mongodb.DBObject)"], ["boolean", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.isUpsert()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.upsert(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.returnNew()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.returnNew(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.bypassDocumentValidation(java.lang.Boolean)"], ["long", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.WriteConcern", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getWriteConcern()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getCollation()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.arrayFilters(java.util.List<? extends com.mongodb.DBObject>)"], ["java.util.List<? extends com.mongodb.DBObject>", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getArrayFilters()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions()"], ["java.lang.Integer", "com.mongodb.client.model.PushOptions.getPosition()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions.position(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.PushOptions.getSlice()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions.slice(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.PushOptions.getSort()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions.sort(java.lang.Integer)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.PushOptions.getSortDocument()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions.sortDocument(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.model.PushOptions.toString()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.combine(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.combine(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.set(java.lang.String, TItem)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.unset(java.lang.String)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.setOnInsert(java.lang.String, TItem)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.rename(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.inc(java.lang.String, java.lang.Number)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.mul(java.lang.String, java.lang.Number)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.min(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.max(java.lang.String, TItem)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.currentDate(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.currentTimestamp(java.lang.String)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.addToSet(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.addEachToSet(java.lang.String, java.util.List<TItem>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.push(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pushEach(java.lang.String, java.util.List<TItem>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pushEach(java.lang.String, java.util.List<TItem>, com.mongodb.client.model.PushOptions)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pull(java.lang.String, TItem)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pullByFilter(org.bson.conversions.Bson)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pullAll(java.lang.String, java.util.List<TItem>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.popFirst(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.popLast(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseAnd(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseAnd(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseOr(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseOr(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseXor(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseXor(java.lang.String, long)"], ["com.mongodb.client.model.DeleteOneModel", "com.mongodb.client.model.DeleteOneModel(org.bson.conversions.Bson)"], ["com.mongodb.client.model.DeleteOneModel", "com.mongodb.client.model.DeleteOneModel(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.DeleteOneModel.getFilter()"], ["com.mongodb.client.model.DeleteOptions", "com.mongodb.client.model.DeleteOneModel.getOptions()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Sorts$CompoundSort.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Sorts$CompoundSort.toString()"], ["com.mongodb.client.model.DropIndexOptions", "com.mongodb.client.model.DropIndexOptions()"], ["long", "com.mongodb.client.model.DropIndexOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DropIndexOptions", "com.mongodb.client.model.DropIndexOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.copy()"], ["int", "com.mongodb.client.model.DBCollectionFindOptions.getLimit()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.limit(int)"], ["int", "com.mongodb.client.model.DBCollectionFindOptions.getSkip()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.skip(int)"], ["long", "com.mongodb.client.model.DBCollectionFindOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.DBCollectionFindOptions.getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.client.model.DBCollectionFindOptions.getBatchSize()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.batchSize(int)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getModifiers()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.modifiers(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getProjection()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.projection(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getSort()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.sort(com.mongodb.DBObject)"], ["boolean", "com.mongodb.client.model.DBCollectionFindOptions.isNoCursorTimeout()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.noCursorTimeout(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionFindOptions.isOplogReplay()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.oplogReplay(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionFindOptions.isPartial()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.partial(boolean)"], ["com.mongodb.CursorType", "com.mongodb.client.model.DBCollectionFindOptions.getCursorType()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.cursorType(com.mongodb.CursorType)"], ["com.mongodb.ReadPreference", "com.mongodb.client.model.DBCollectionFindOptions.getReadPreference()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadConcern", "com.mongodb.client.model.DBCollectionFindOptions.getReadConcern()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionFindOptions.getCollation()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.ParallelCollectionScanOptions", "com.mongodb.client.model.ParallelCollectionScanOptions()"], ["int", "com.mongodb.client.model.ParallelCollectionScanOptions.getBatchSize()"], ["com.mongodb.client.model.ParallelCollectionScanOptions", "com.mongodb.client.model.ParallelCollectionScanOptions.batchSize(int)"], ["com.mongodb.client.model.DeleteManyModel", "com.mongodb.client.model.DeleteManyModel(org.bson.conversions.Bson)"], ["com.mongodb.client.model.DeleteManyModel", "com.mongodb.client.model.DeleteManyModel(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.DeleteManyModel.getFilter()"], ["com.mongodb.client.model.DeleteOptions", "com.mongodb.client.model.DeleteManyModel.getOptions()"], ["com.mongodb.client.model.BsonField", "com.mongodb.client.model.BsonField(java.lang.String, org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.model.BsonField.getName()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.BsonField.getValue()"], ["java.lang.String", "com.mongodb.client.model.BsonField.toString()"], ["com.mongodb.client.model.GraphLookupOptions", "com.mongodb.client.model.GraphLookupOptions()"], ["com.mongodb.client.model.GraphLookupOptions", "com.mongodb.client.model.GraphLookupOptions.depthField(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.GraphLookupOptions.getDepthField()"], ["com.mongodb.client.model.GraphLookupOptions", "com.mongodb.client.model.GraphLookupOptions.maxDepth(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.GraphLookupOptions.getMaxDepth()"], ["com.mongodb.client.model.GraphLookupOptions", "com.mongodb.client.model.GraphLookupOptions.restrictSearchWithMatch(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.GraphLookupOptions.getRestrictSearchWithMatch()"], ["java.lang.String", "com.mongodb.client.model.GraphLookupOptions.toString()"], ["com.mongodb.client.model.DBCollectionRemoveOptions", "com.mongodb.client.model.DBCollectionRemoveOptions()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionRemoveOptions.getCollation()"], ["com.mongodb.client.model.DBCollectionRemoveOptions", "com.mongodb.client.model.DBCollectionRemoveOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.WriteConcern", "com.mongodb.client.model.DBCollectionRemoveOptions.getWriteConcern()"], ["com.mongodb.client.model.DBCollectionRemoveOptions", "com.mongodb.client.model.DBCollectionRemoveOptions.writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.DBEncoder", "com.mongodb.client.model.DBCollectionRemoveOptions.getEncoder()"], ["com.mongodb.client.model.DBCollectionRemoveOptions", "com.mongodb.client.model.DBCollectionRemoveOptions.encoder(com.mongodb.DBEncoder)"], ["com.mongodb.client.model.InsertOneOptions", "com.mongodb.client.model.InsertOneOptions()"], ["java.lang.Boolean", "com.mongodb.client.model.InsertOneOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.InsertOneOptions", "com.mongodb.client.model.InsertOneOptions.bypassDocumentValidation(java.lang.Boolean)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$BucketAutoStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$BucketAutoStage.toString()"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation.builder()"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation.builder(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.Collation.getLocale()"], ["java.lang.Boolean", "com.mongodb.client.model.Collation.getCaseLevel()"], ["com.mongodb.client.model.CollationCaseFirst", "com.mongodb.client.model.Collation.getCaseFirst()"], ["com.mongodb.client.model.CollationStrength", "com.mongodb.client.model.Collation.getStrength()"], ["java.lang.Boolean", "com.mongodb.client.model.Collation.getNumericOrdering()"], ["com.mongodb.client.model.CollationAlternate", "com.mongodb.client.model.Collation.getAlternate()"], ["com.mongodb.client.model.CollationMaxVariable", "com.mongodb.client.model.Collation.getMaxVariable()"], ["java.lang.Boolean", "com.mongodb.client.model.Collation.getNormalization()"], ["java.lang.Boolean", "com.mongodb.client.model.Collation.getBackwards()"], ["org.bson.BsonDocument", "com.mongodb.client.model.Collation.asDocument()"], ["boolean", "com.mongodb.client.model.Collation.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Collation.hashCode()"], ["java.lang.String", "com.mongodb.client.model.Collation.toString()"], ["com.mongodb.client.model.ReturnDocument[]", "com.mongodb.client.model.ReturnDocument.values()"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.ReturnDocument.valueOf(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$BucketStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$BucketStage.toString()"], ["com.mongodb.client.model.BulkWriteOptions", "com.mongodb.client.model.BulkWriteOptions()"], ["boolean", "com.mongodb.client.model.BulkWriteOptions.isOrdered()"], ["com.mongodb.client.model.BulkWriteOptions", "com.mongodb.client.model.BulkWriteOptions.ordered(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.BulkWriteOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.BulkWriteOptions", "com.mongodb.client.model.BulkWriteOptions.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.ValidationAction[]", "com.mongodb.client.model.ValidationAction.values()"], ["com.mongodb.client.model.ValidationAction", "com.mongodb.client.model.ValidationAction.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.ValidationAction.getValue()"], ["com.mongodb.client.model.ValidationAction", "com.mongodb.client.model.ValidationAction.fromString(java.lang.String)"], ["com.mongodb.client.model.Filters$OrNorFilter$Operator[]", "com.mongodb.client.model.Filters$OrNorFilter$Operator.values()"], ["com.mongodb.client.model.Filters$OrNorFilter$Operator", "com.mongodb.client.model.Filters$OrNorFilter$Operator.valueOf(java.lang.String)"], ["com.mongodb.client.model.BucketGranularity[]", "com.mongodb.client.model.BucketGranularity.values()"], ["com.mongodb.client.model.BucketGranularity", "com.mongodb.client.model.BucketGranularity.valueOf(java.lang.String)"], ["com.mongodb.client.model.BucketGranularity", "com.mongodb.client.model.BucketGranularity.fromString(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.BucketGranularity.getValue()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$GeometryOperatorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$GeometryOperatorFilter.toString()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions()"], ["boolean", "com.mongodb.client.model.UpdateOptions.isUpsert()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.upsert(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.UpdateOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.UpdateOptions.getCollation()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.arrayFilters(java.util.List<? extends org.bson.conversions.Bson>)"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.client.model.UpdateOptions.getArrayFilters()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$FacetStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$FacetStage.toString()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions()"], ["boolean", "com.mongodb.client.model.CreateCollectionOptions.isAutoIndex()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.autoIndex(boolean)"], ["long", "com.mongodb.client.model.CreateCollectionOptions.getMaxDocuments()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.maxDocuments(long)"], ["boolean", "com.mongodb.client.model.CreateCollectionOptions.isCapped()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.capped(boolean)"], ["long", "com.mongodb.client.model.CreateCollectionOptions.getSizeInBytes()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.sizeInBytes(long)"], ["java.lang.Boolean", "com.mongodb.client.model.CreateCollectionOptions.isUsePowerOf2Sizes()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.usePowerOf2Sizes(java.lang.Boolean)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.CreateCollectionOptions.getStorageEngineOptions()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.storageEngineOptions(org.bson.conversions.Bson)"], ["com.mongodb.client.model.IndexOptionDefaults", "com.mongodb.client.model.CreateCollectionOptions.getIndexOptionDefaults()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.indexOptionDefaults(com.mongodb.client.model.IndexOptionDefaults)"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.CreateCollectionOptions.getValidationOptions()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.validationOptions(com.mongodb.client.model.ValidationOptions)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.CreateCollectionOptions.getCollation()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.collation(com.mongodb.client.model.Collation)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.ascending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.ascending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.descending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.descending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.geo2dsphere(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.geo2dsphere(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.geo2d(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.geoHaystack(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.text(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.hashed(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.compoundIndex(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.compoundIndex(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$SimplePipelineStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$SimplePipelineStage.toString()"], ["com.mongodb.client.model.Field", "com.mongodb.client.model.Field(java.lang.String, TExpression)"], ["java.lang.String", "com.mongodb.client.model.Field.getName()"], ["TExpression", "com.mongodb.client.model.Field.getValue()"], ["boolean", "com.mongodb.client.model.Field.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Field.hashCode()"], ["com.mongodb.client.model.IndexModel", "com.mongodb.client.model.IndexModel(org.bson.conversions.Bson)"], ["com.mongodb.client.model.IndexModel", "com.mongodb.client.model.IndexModel(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexModel.getKeys()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexModel.getOptions()"], ["com.mongodb.client.model.CollationStrength[]", "com.mongodb.client.model.CollationStrength.values()"], ["com.mongodb.client.model.CollationStrength", "com.mongodb.client.model.CollationStrength.valueOf(java.lang.String)"], ["int", "com.mongodb.client.model.CollationStrength.getIntRepresentation()"], ["com.mongodb.client.model.CollationStrength", "com.mongodb.client.model.CollationStrength.fromInt(int)"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.ValidationOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.ValidationOptions.getValidator()"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.ValidationOptions.validator(org.bson.conversions.Bson)"], ["com.mongodb.client.model.ValidationLevel", "com.mongodb.client.model.ValidationOptions.getValidationLevel()"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.ValidationOptions.validationLevel(com.mongodb.client.model.ValidationLevel)"], ["com.mongodb.client.model.ValidationAction", "com.mongodb.client.model.ValidationOptions.getValidationAction()"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.ValidationOptions.validationAction(com.mongodb.client.model.ValidationAction)"], ["com.mongodb.client.model.RenameCollectionOptions", "com.mongodb.client.model.RenameCollectionOptions()"], ["boolean", "com.mongodb.client.model.RenameCollectionOptions.isDropTarget()"], ["com.mongodb.client.model.RenameCollectionOptions", "com.mongodb.client.model.RenameCollectionOptions.dropTarget(boolean)"], ["com.mongodb.client.model.CreateIndexOptions", "com.mongodb.client.model.CreateIndexOptions()"], ["long", "com.mongodb.client.model.CreateIndexOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.CreateIndexOptions", "com.mongodb.client.model.CreateIndexOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.locale(java.lang.String)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.caseLevel(java.lang.Boolean)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.collationCaseFirst(com.mongodb.client.model.CollationCaseFirst)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.collationStrength(com.mongodb.client.model.CollationStrength)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.numericOrdering(java.lang.Boolean)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.collationAlternate(com.mongodb.client.model.CollationAlternate)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.collationMaxVariable(com.mongodb.client.model.CollationMaxVariable)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.normalization(java.lang.Boolean)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.backwards(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.Collation$Builder.build()"], ["com.mongodb.client.model.CollationCaseFirst[]", "com.mongodb.client.model.CollationCaseFirst.values()"], ["com.mongodb.client.model.CollationCaseFirst", "com.mongodb.client.model.CollationCaseFirst.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.CollationCaseFirst.getValue()"], ["com.mongodb.client.model.CollationCaseFirst", "com.mongodb.client.model.CollationCaseFirst.fromString(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$AddFieldsStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$AddFieldsStage.toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Projections$FieldsProjection.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Projections$FieldsProjection.toString()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndReplaceOptions.getProjection()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndReplaceOptions.getSort()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOneAndReplaceOptions.isUpsert()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.upsert(boolean)"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.FindOneAndReplaceOptions.getReturnDocument()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.returnDocument(com.mongodb.client.model.ReturnDocument)"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndReplaceOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.client.model.FindOneAndReplaceOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.FindOneAndReplaceOptions.getCollation()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.collation(com.mongodb.client.model.Collation)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$PullAllUpdate.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Updates$PullAllUpdate.toString()"], ["com.mongodb.client.model.DBCreateViewOptions", "com.mongodb.client.model.DBCreateViewOptions()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCreateViewOptions.getCollation()"], ["com.mongodb.client.model.DBCreateViewOptions", "com.mongodb.client.model.DBCreateViewOptions.collation(com.mongodb.client.model.Collation)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.ascending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.ascending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.descending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.descending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.metaTextScore(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.orderBy(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.orderBy(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$OperatorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$OperatorFilter.toString()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions()"], ["boolean", "com.mongodb.client.model.DBCollectionUpdateOptions.isUpsert()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.upsert(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.DBCollectionUpdateOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.multi(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionUpdateOptions.isMulti()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionUpdateOptions.getCollation()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.arrayFilters(java.util.List<? extends com.mongodb.DBObject>)"], ["java.util.List<? extends com.mongodb.DBObject>", "com.mongodb.client.model.DBCollectionUpdateOptions.getArrayFilters()"], ["com.mongodb.WriteConcern", "com.mongodb.client.model.DBCollectionUpdateOptions.getWriteConcern()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.DBEncoder", "com.mongodb.client.model.DBCollectionUpdateOptions.getEncoder()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.encoder(com.mongodb.DBEncoder)"], ["com.mongodb.client.model.CreateViewOptions", "com.mongodb.client.model.CreateViewOptions()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.CreateViewOptions.getCollation()"], ["com.mongodb.client.model.CreateViewOptions", "com.mongodb.client.model.CreateViewOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.CountOptions.getHint()"], ["java.lang.String", "com.mongodb.client.model.CountOptions.getHintString()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.hint(org.bson.conversions.Bson)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.hintString(java.lang.String)"], ["int", "com.mongodb.client.model.CountOptions.getLimit()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.limit(int)"], ["int", "com.mongodb.client.model.CountOptions.getSkip()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.skip(int)"], ["long", "com.mongodb.client.model.CountOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.CountOptions.getCollation()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.CollationMaxVariable[]", "com.mongodb.client.model.CollationMaxVariable.values()"], ["com.mongodb.client.model.CollationMaxVariable", "com.mongodb.client.model.CollationMaxVariable.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.CollationMaxVariable.getValue()"], ["com.mongodb.client.model.CollationMaxVariable", "com.mongodb.client.model.CollationMaxVariable.fromString(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$1.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.IndexOptionDefaults", "com.mongodb.client.model.IndexOptionDefaults()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptionDefaults.getStorageEngine()"], ["com.mongodb.client.model.IndexOptionDefaults", "com.mongodb.client.model.IndexOptionDefaults.storageEngine(org.bson.conversions.Bson)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$ReplaceRootStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$ReplaceRootStage.toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Indexes$1.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions(com.mongodb.client.model.FindOptions)"], ["int", "com.mongodb.client.model.FindOptions.getLimit()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.limit(int)"], ["int", "com.mongodb.client.model.FindOptions.getSkip()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.skip(int)"], ["long", "com.mongodb.client.model.FindOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOptions.getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.client.model.FindOptions.getBatchSize()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.batchSize(int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getModifiers()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.modifiers(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getProjection()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getSort()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOptions.isNoCursorTimeout()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.noCursorTimeout(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isOplogReplay()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.oplogReplay(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isPartial()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.partial(boolean)"], ["com.mongodb.CursorType", "com.mongodb.client.model.FindOptions.getCursorType()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.cursorType(com.mongodb.CursorType)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.FindOptions.getCollation()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.FindOptions.getComment()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.comment(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getHint()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.hint(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getMax()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.max(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getMin()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.min(org.bson.conversions.Bson)"], ["long", "com.mongodb.client.model.FindOptions.getMaxScan()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.maxScan(long)"], ["boolean", "com.mongodb.client.model.FindOptions.isReturnKey()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.returnKey(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isShowRecordId()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.showRecordId(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isSnapshot()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.snapshot(boolean)"], ["java.lang.String", "com.mongodb.client.model.FindOptions.toString()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndUpdateOptions.getProjection()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndUpdateOptions.getSort()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOneAndUpdateOptions.isUpsert()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.upsert(boolean)"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.FindOneAndUpdateOptions.getReturnDocument()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.returnDocument(com.mongodb.client.model.ReturnDocument)"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndUpdateOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.client.model.FindOneAndUpdateOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.FindOneAndUpdateOptions.getCollation()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.arrayFilters(java.util.List<? extends org.bson.conversions.Bson>)"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.client.model.FindOneAndUpdateOptions.getArrayFilters()"], ["com.mongodb.client.model.ReplaceOneModel", "com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T)"], ["com.mongodb.client.model.ReplaceOneModel", "com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T, com.mongodb.client.model.UpdateOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.ReplaceOneModel.getFilter()"], ["T", "com.mongodb.client.model.ReplaceOneModel.getReplacement()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.ReplaceOneModel.getOptions()"], ["com.mongodb.client.model.CollationAlternate[]", "com.mongodb.client.model.CollationAlternate.values()"], ["com.mongodb.client.model.CollationAlternate", "com.mongodb.client.model.CollationAlternate.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.CollationAlternate.getValue()"], ["com.mongodb.client.model.CollationAlternate", "com.mongodb.client.model.CollationAlternate.fromString(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Projections$ElemMatchFilterProjection.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Projections$ElemMatchFilterProjection.toString()"], ["com.mongodb.client.model.UpdateOneModel", "com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.model.UpdateOneModel", "com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateOneModel.getFilter()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateOneModel.getUpdate()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOneModel.getOptions()"], ["com.mongodb.client.model.InsertOneModel", "com.mongodb.client.model.InsertOneModel(T)"], ["T", "com.mongodb.client.model.InsertOneModel.getDocument()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$CompositeUpdate.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Updates$CompositeUpdate.toString()"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.sum(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.avg(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.first(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.last(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.max(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.min(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.push(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.addToSet(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.stdDevPop(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.stdDevSamp(java.lang.String, TExpression)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions()"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionCountOptions.getHint()"], ["java.lang.String", "com.mongodb.client.model.DBCollectionCountOptions.getHintString()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.hint(com.mongodb.DBObject)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.hintString(java.lang.String)"], ["int", "com.mongodb.client.model.DBCollectionCountOptions.getLimit()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.limit(int)"], ["int", "com.mongodb.client.model.DBCollectionCountOptions.getSkip()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.skip(int)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.limit(long)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.skip(long)"], ["long", "com.mongodb.client.model.DBCollectionCountOptions.getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.client.model.DBCollectionCountOptions.getReadPreference()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadConcern", "com.mongodb.client.model.DBCollectionCountOptions.getReadConcern()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionCountOptions.getCollation()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.UnwindOptions", "com.mongodb.client.model.UnwindOptions()"], ["java.lang.Boolean", "com.mongodb.client.model.UnwindOptions.isPreserveNullAndEmptyArrays()"], ["com.mongodb.client.model.UnwindOptions", "com.mongodb.client.model.UnwindOptions.preserveNullAndEmptyArrays(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.client.model.UnwindOptions.getIncludeArrayIndex()"], ["com.mongodb.client.model.UnwindOptions", "com.mongodb.client.model.UnwindOptions.includeArrayIndex(java.lang.String)"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions()"], ["boolean", "com.mongodb.client.model.IndexOptions.isBackground()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.background(boolean)"], ["boolean", "com.mongodb.client.model.IndexOptions.isUnique()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.unique(boolean)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getName()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.name(java.lang.String)"], ["boolean", "com.mongodb.client.model.IndexOptions.isSparse()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.sparse(boolean)"], ["java.lang.Long", "com.mongodb.client.model.IndexOptions.getExpireAfter(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.version(java.lang.Integer)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getWeights()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.weights(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getDefaultLanguage()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.defaultLanguage(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getLanguageOverride()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.languageOverride(java.lang.String)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getTextVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.textVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getSphereVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.sphereVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getBits()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.bits(java.lang.Integer)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getMin()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.min(java.lang.Double)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getMax()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.max(java.lang.Double)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getBucketSize()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.bucketSize(java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getStorageEngine()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.storageEngine(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getPartialFilterExpression()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.partialFilterExpression(org.bson.conversions.Bson)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.IndexOptions.getCollation()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.collation(com.mongodb.client.model.Collation)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.eq(TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.eq(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.ne(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.gt(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.lt(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.gte(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.lte(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.in(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.in(java.lang.String, java.lang.Iterable<TItem>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nin(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nin(java.lang.String, java.lang.Iterable<TItem>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.and(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.and(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.or(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.or(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.not(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nor(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nor(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.exists(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.exists(java.lang.String, boolean)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.type(java.lang.String, org.bson.BsonType)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.type(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.mod(java.lang.String, long, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.util.regex.Pattern)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.text(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.text(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.text(java.lang.String, com.mongodb.client.model.TextSearchOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.where(java.lang.String)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.expr(TExpression)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.all(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.all(java.lang.String, java.lang.Iterable<TItem>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.elemMatch(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.size(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.bitsAllClear(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.bitsAllSet(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.bitsAnyClear(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.bitsAnySet(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithin(java.lang.String, com.mongodb.client.model.geojson.Geometry)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithin(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithinBox(java.lang.String, double, double, double, double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithinPolygon(java.lang.String, java.util.List<java.util.List<java.lang.Double>>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithinCenter(java.lang.String, double, double, double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithinCenterSphere(java.lang.String, double, double, double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoIntersects(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoIntersects(java.lang.String, com.mongodb.client.model.geojson.Geometry)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.near(java.lang.String, com.mongodb.client.model.geojson.Point, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.near(java.lang.String, org.bson.conversions.Bson, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.near(java.lang.String, double, double, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nearSphere(java.lang.String, com.mongodb.client.model.geojson.Point, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nearSphere(java.lang.String, org.bson.conversions.Bson, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nearSphere(java.lang.String, double, double, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.jsonSchema(org.bson.conversions.Bson)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Projections.computed(java.lang.String, TExpression)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.include(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.include(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.exclude(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.exclude(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.excludeId()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.elemMatch(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.elemMatch(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.metaTextScore(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.slice(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.slice(java.lang.String, int, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.fields(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.fields(java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.model.InsertManyOptions", "com.mongodb.client.model.InsertManyOptions()"], ["boolean", "com.mongodb.client.model.InsertManyOptions.isOrdered()"], ["com.mongodb.client.model.InsertManyOptions", "com.mongodb.client.model.InsertManyOptions.ordered(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.InsertManyOptions.getBypassDocumentValidation()"], ["com.mongodb.client.model.InsertManyOptions", "com.mongodb.client.model.InsertManyOptions.bypassDocumentValidation(java.lang.Boolean)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$TextFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$TextFilter.toString()"], ["com.mongodb.client.model.DeleteOptions", "com.mongodb.client.model.DeleteOptions()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DeleteOptions.getCollation()"], ["com.mongodb.client.model.DeleteOptions", "com.mongodb.client.model.DeleteOptions.collation(com.mongodb.client.model.Collation)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$WithEachUpdate.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Updates$WithEachUpdate.toString()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.addFields(com.mongodb.client.model.Field<?>...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.addFields(java.util.List<com.mongodb.client.model.Field<?>>)"], ["<TExpression, Boundary> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.bucket(TExpression, java.util.List<Boundary>)"], ["<TExpression, TBoundary> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.bucket(TExpression, java.util.List<TBoundary>, com.mongodb.client.model.BucketOptions)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.bucketAuto(TExpression, int)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.bucketAuto(TExpression, int, com.mongodb.client.model.BucketAutoOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.count()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.count(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.match(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.project(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.sort(org.bson.conversions.Bson)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.sortByCount(TExpression)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.skip(int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.limit(int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.lookup(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.facet(java.util.List<com.mongodb.client.model.Facet>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.facet(com.mongodb.client.model.Facet...)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.graphLookup(java.lang.String, TExpression, java.lang.String, java.lang.String, java.lang.String)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.graphLookup(java.lang.String, TExpression, java.lang.String, java.lang.String, java.lang.String, com.mongodb.client.model.GraphLookupOptions)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.group(TExpression, com.mongodb.client.model.BsonField...)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.group(TExpression, java.util.List<com.mongodb.client.model.BsonField>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.unwind(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.unwind(java.lang.String, com.mongodb.client.model.UnwindOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.out(java.lang.String)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.replaceRoot(TExpression)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.sample(int)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$SimpleFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$SimpleFilter.toString()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions()"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionDistinctOptions.getFilter()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions.filter(com.mongodb.DBObject)"], ["com.mongodb.ReadPreference", "com.mongodb.client.model.DBCollectionDistinctOptions.getReadPreference()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions.readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadConcern", "com.mongodb.client.model.DBCollectionDistinctOptions.getReadConcern()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions.readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionDistinctOptions.getCollation()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions.collation(com.mongodb.client.model.Collation)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$AndFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Filters$AndFilter.toString()"], ["com.mongodb.client.model.MapReduceAction[]", "com.mongodb.client.model.MapReduceAction.values()"], ["com.mongodb.client.model.MapReduceAction", "com.mongodb.client.model.MapReduceAction.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.MapReduceAction.getValue()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$SimpleUpdate.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Updates$SimpleUpdate.toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$GraphLookupStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.client.model.Aggregates$GraphLookupStage.toString()"], ["com.mongodb.client.model.BucketAutoOptions", "com.mongodb.client.model.BucketAutoOptions()"], ["com.mongodb.client.model.BucketGranularity", "com.mongodb.client.model.BucketAutoOptions.getGranularity()"], ["com.mongodb.client.model.BucketAutoOptions", "com.mongodb.client.model.BucketAutoOptions.granularity(com.mongodb.client.model.BucketGranularity)"], ["com.mongodb.client.model.BucketAutoOptions", "com.mongodb.client.model.BucketAutoOptions.output(com.mongodb.client.model.BsonField...)"], ["com.mongodb.client.model.BucketAutoOptions", "com.mongodb.client.model.BucketAutoOptions.output(java.util.List<com.mongodb.client.model.BsonField>)"], ["void", "com.mongodb.client.model.changestream.ChangeStreamDocumentCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.client.model.changestream.ChangeStreamDocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.model.changestream.ChangeStreamDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.model.changestream.OperationType[]", "com.mongodb.client.model.changestream.OperationType.values()"], ["com.mongodb.client.model.changestream.OperationType", "com.mongodb.client.model.changestream.OperationType.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.changestream.OperationType.getValue()"], ["com.mongodb.client.model.changestream.OperationType", "com.mongodb.client.model.changestream.OperationType.fromString(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.changestream.OperationType.toString()"], ["com.mongodb.client.model.changestream.OperationType", "com.mongodb.client.model.changestream.OperationTypeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.changestream.OperationTypeCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.changestream.OperationType, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.client.model.changestream.OperationTypeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.model.changestream.OperationTypeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.model.changestream.UpdateDescription", "com.mongodb.client.model.changestream.UpdateDescription(java.util.List<java.lang.String>, org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.UpdateDescription.getUpdatedFields()"], ["boolean", "com.mongodb.client.model.changestream.UpdateDescription.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.changestream.UpdateDescription.hashCode()"], ["java.lang.String", "com.mongodb.client.model.changestream.UpdateDescription.toString()"], ["com.mongodb.client.model.changestream.FullDocument[]", "com.mongodb.client.model.changestream.FullDocument.values()"], ["com.mongodb.client.model.changestream.FullDocument", "com.mongodb.client.model.changestream.FullDocument.valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.changestream.FullDocument.getValue()"], ["com.mongodb.client.model.changestream.FullDocument", "com.mongodb.client.model.changestream.FullDocument.fromString(java.lang.String)"], ["com.mongodb.client.model.changestream.ChangeStreamDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument(org.bson.BsonDocument, com.mongodb.MongoNamespace, TDocument, org.bson.BsonDocument, com.mongodb.client.model.changestream.OperationType, com.mongodb.client.model.changestream.UpdateDescription)"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getResumeToken()"], ["com.mongodb.MongoNamespace", "com.mongodb.client.model.changestream.ChangeStreamDocument.getNamespace()"], ["TDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getFullDocument()"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getDocumentKey()"], ["com.mongodb.client.model.changestream.OperationType", "com.mongodb.client.model.changestream.ChangeStreamDocument.getOperationType()"], ["com.mongodb.client.model.changestream.UpdateDescription", "com.mongodb.client.model.changestream.ChangeStreamDocument.getUpdateDescription()"], ["<TFullDocument> org.bson.codecs.Codec<com.mongodb.client.model.changestream.ChangeStreamDocument<TFullDocument>>", "com.mongodb.client.model.changestream.ChangeStreamDocument.createCodec(java.lang.Class<TFullDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.changestream.ChangeStreamDocument.equals(java.lang.Object)"], ["int", "com.mongodb.client.model.changestream.ChangeStreamDocument.hashCode()"], ["java.lang.String", "com.mongodb.client.model.changestream.ChangeStreamDocument.toString()"], ["com.mongodb.MongoChangeStreamException", "com.mongodb.MongoChangeStreamException(java.lang.String)"], ["java.lang.String", "com.mongodb.DB$1.apply(com.mongodb.DBObject)"], ["java.lang.Object", "com.mongodb.DB$1.apply(java.lang.Object)"], ["com.mongodb.MongoSocketClosedException", "com.mongodb.MongoSocketClosedException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.DefaultDBEncoder", "com.mongodb.DefaultDBEncoder()"], ["int", "com.mongodb.DefaultDBEncoder.writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)"], ["java.lang.String", "com.mongodb.DefaultDBEncoder.toString()"], ["com.mongodb.WriteResult", "com.mongodb.WriteResult.unacknowledged()"], ["com.mongodb.WriteResult", "com.mongodb.WriteResult(int, boolean, java.lang.Object)"], ["boolean", "com.mongodb.WriteResult.wasAcknowledged()"], ["int", "com.mongodb.WriteResult.getN()"], ["java.lang.Object", "com.mongodb.WriteResult.getUpsertedId()"], ["boolean", "com.mongodb.WriteResult.isUpdateOfExisting()"], ["java.lang.String", "com.mongodb.WriteResult.toString()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.copy()"], ["boolean", "com.mongodb.DBCursor.hasNext()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.next()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.tryNext()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.curr()"], ["void", "com.mongodb.DBCursor.remove()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.addOption(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setOptions(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.resetOptions()"], ["int", "com.mongodb.DBCursor.getOptions()"], ["int", "com.mongodb.DBCursor.getLimit()"], ["int", "com.mongodb.DBCursor.getBatchSize()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.addSpecial(java.lang.String, java.lang.Object)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.comment(java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.maxScan(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.max(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.min(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.returnKey()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.showDiskLoc()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.hint(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.hint(java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.snapshot()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.explain()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.sort(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.limit(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.batchSize(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.skip(int)"], ["long", "com.mongodb.DBCursor.getCursorId()"], ["int", "com.mongodb.DBCursor.numSeen()"], ["void", "com.mongodb.DBCursor.close()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.slaveOk()"], ["int", "com.mongodb.DBCursor.count()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.one()"], ["int", "com.mongodb.DBCursor.length()"], ["int", "com.mongodb.DBCursor.itcount()"], ["int", "com.mongodb.DBCursor.size()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.getKeysWanted()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.getQuery()"], ["com.mongodb.DBCollection", "com.mongodb.DBCursor.getCollection()"], ["com.mongodb.ServerAddress", "com.mongodb.DBCursor.getServerAddress()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.DBCursor.getReadPreference()"], ["com.mongodb.client.model.Collation", "com.mongodb.DBCursor.getCollation()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setCollation(com.mongodb.client.model.Collation)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setDecoderFactory(com.mongodb.DBDecoderFactory)"], ["com.mongodb.DBDecoderFactory", "com.mongodb.DBCursor.getDecoderFactory()"], ["java.lang.String", "com.mongodb.DBCursor.toString()"], ["java.lang.Object", "com.mongodb.DBCursor.next()"], ["com.mongodb.Bytes", "com.mongodb.Bytes()"], ["byte", "com.mongodb.Bytes.getType(java.lang.Object)"], ["com.mongodb.CursorType[]", "com.mongodb.CursorType.values()"], ["com.mongodb.CursorType", "com.mongodb.CursorType.valueOf(java.lang.String)"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoClient.getDefaultCodecRegistry()"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient()"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String, int)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.MongoClientURI)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.MongoClientURI, com.mongodb.client.MongoDriverInformation)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions, com.mongodb.client.MongoDriverInformation)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions, com.mongodb.client.MongoDriverInformation)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions, com.mongodb.client.MongoDriverInformation)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions, com.mongodb.client.MongoDriverInformation)"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClient.getMongoClientOptions()"], ["<T> com.mongodb.client.ListDatabasesIterable<T>", "com.mongodb.MongoClient.listDatabases(java.lang.Class<T>)"], ["<T> com.mongodb.client.ListDatabasesIterable<T>", "com.mongodb.MongoClient.listDatabases(com.mongodb.session.ClientSession, java.lang.Class<T>)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoClient.getDatabase(java.lang.String)"], ["com.mongodb.session.ClientSession", "com.mongodb.MongoClient.startSession(com.mongodb.ClientSessionOptions)"], ["com.mongodb.client.MongoIterable", "com.mongodb.DistinctIterableImpl.batchSize(int)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.start()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.start(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.put(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.and(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.greaterThan(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.greaterThanEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.lessThan(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.lessThanEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.is(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.notEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.in(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.notIn(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.mod(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.all(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.size(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.exists(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.regex(java.util.regex.Pattern)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.elemMatch(com.mongodb.DBObject)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinCenter(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.near(double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.near(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.nearSphere(double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.nearSphere(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinCenterSphere(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinBox(double, double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinPolygon(java.util.List<java.lang.Double[]>)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.text(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.text(java.lang.String, java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.not()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.or(com.mongodb.DBObject...)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.and(com.mongodb.DBObject...)"], ["com.mongodb.DBObject", "com.mongodb.QueryBuilder.get()"], ["com.mongodb.ReadPreference", "com.mongodb.ClientSessionBinding.getReadPreference()"], ["int", "com.mongodb.ClientSessionBinding.getCount()"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.ClientSessionBinding.retain()"], ["void", "com.mongodb.ClientSessionBinding.release()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.ClientSessionBinding.getReadConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.ClientSessionBinding.getSessionContext()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.ClientSessionBinding.getWriteConnectionSource()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.ClientSessionBinding.retain()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.ClientSessionBinding.retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.ClientSessionBinding.retain()"], ["com.mongodb.MongoNamespace", "com.mongodb.MongoCollectionImpl.getNamespace()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoCollectionImpl.getCodecRegistry()"], ["com.mongodb.ReadPreference", "com.mongodb.MongoCollectionImpl.getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoCollectionImpl.getWriteConcern()"], ["com.mongodb.ReadConcern", "com.mongodb.MongoCollectionImpl.getReadConcern()"], ["<NewTDocument> com.mongodb.client.MongoCollection<NewTDocument>", "com.mongodb.MongoCollectionImpl.withDocumentClass(java.lang.Class<NewTDocument>)"], ["long", "com.mongodb.MongoCollectionImpl.count()"], ["long", "com.mongodb.MongoCollectionImpl.count(org.bson.conversions.Bson)"], ["long", "com.mongodb.MongoCollectionImpl.count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)"], ["long", "com.mongodb.MongoCollectionImpl.count(com.mongodb.session.ClientSession)"], ["long", "com.mongodb.MongoCollectionImpl.count(com.mongodb.session.ClientSession, org.bson.conversions.Bson)"], ["long", "com.mongodb.MongoCollectionImpl.count(com.mongodb.session.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.MongoCollectionImpl.distinct(java.lang.String, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.MongoCollectionImpl.distinct(java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.MongoCollectionImpl.distinct(com.mongodb.session.ClientSession, java.lang.String, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.MongoCollectionImpl.distinct(com.mongodb.session.ClientSession, java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.MongoCollectionImpl.find(java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.MongoCollectionImpl.find(org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.MongoCollectionImpl.find(com.mongodb.session.ClientSession, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.MongoCollectionImpl.find(com.mongodb.session.ClientSession, org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.MongoCollectionImpl.aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.MongoCollectionImpl.aggregate(com.mongodb.session.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.MongoCollectionImpl.watch(java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.MongoCollectionImpl.watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.MongoCollectionImpl.watch(com.mongodb.session.ClientSession, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.MongoCollectionImpl.watch(com.mongodb.session.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MongoCollectionImpl.mapReduce(java.lang.String, java.lang.String, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MongoCollectionImpl.mapReduce(com.mongodb.session.ClientSession, java.lang.String, java.lang.String, java.lang.Class<TResult>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoCollectionImpl.bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoCollectionImpl.bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoCollectionImpl.bulkWrite(com.mongodb.session.ClientSession, java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoCollectionImpl.bulkWrite(com.mongodb.session.ClientSession, java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)"], ["void", "com.mongodb.MongoCollectionImpl.insertOne(TDocument)"], ["void", "com.mongodb.MongoCollectionImpl.insertOne(TDocument, com.mongodb.client.model.InsertOneOptions)"], ["void", "com.mongodb.MongoCollectionImpl.insertOne(com.mongodb.session.ClientSession, TDocument)"], ["void", "com.mongodb.MongoCollectionImpl.insertOne(com.mongodb.session.ClientSession, TDocument, com.mongodb.client.model.InsertOneOptions)"], ["void", "com.mongodb.MongoCollectionImpl.insertMany(java.util.List<? extends TDocument>)"], ["void", "com.mongodb.MongoCollectionImpl.insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)"], ["void", "com.mongodb.MongoCollectionImpl.insertMany(com.mongodb.session.ClientSession, java.util.List<? extends TDocument>)"], ["void", "com.mongodb.MongoCollectionImpl.insertMany(com.mongodb.session.ClientSession, java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteOne(org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteOne(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteOne(com.mongodb.session.ClientSession, org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteOne(com.mongodb.session.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteMany(org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteMany(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteMany(com.mongodb.session.ClientSession, org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteMany(com.mongodb.session.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.replaceOne(org.bson.conversions.Bson, TDocument)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.replaceOne(com.mongodb.session.ClientSession, org.bson.conversions.Bson, TDocument)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.replaceOne(com.mongodb.session.ClientSession, org.bson.conversions.Bson, TDocument, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateOne(com.mongodb.session.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateOne(com.mongodb.session.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateMany(com.mongodb.session.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateMany(com.mongodb.session.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndDelete(org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndDelete(com.mongodb.session.ClientSession, org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndDelete(com.mongodb.session.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndReplace(org.bson.conversions.Bson, TDocument)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndReplace(com.mongodb.session.ClientSession, org.bson.conversions.Bson, TDocument)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndReplace(com.mongodb.session.ClientSession, org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndUpdate(com.mongodb.session.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndUpdate(com.mongodb.session.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["void", "com.mongodb.MongoCollectionImpl.drop()"], ["void", "com.mongodb.MongoCollectionImpl.drop(com.mongodb.session.ClientSession)"], ["java.lang.String", "com.mongodb.MongoCollectionImpl.createIndex(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.MongoCollectionImpl.createIndex(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)"], ["java.lang.String", "com.mongodb.MongoCollectionImpl.createIndex(com.mongodb.session.ClientSession, org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.MongoCollectionImpl.createIndex(com.mongodb.session.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)"], ["<TResult> com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.MongoCollectionImpl.listIndexes(java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.MongoCollectionImpl.listIndexes(com.mongodb.session.ClientSession, java.lang.Class<TResult>)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(java.lang.String)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(java.lang.String, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(org.bson.conversions.Bson)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(com.mongodb.session.ClientSession, java.lang.String)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(com.mongodb.session.ClientSession, org.bson.conversions.Bson)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(com.mongodb.session.ClientSession, java.lang.String, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(com.mongodb.session.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndexes()"], ["void", "com.mongodb.MongoCollectionImpl.dropIndexes(com.mongodb.session.ClientSession)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndexes(com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndexes(com.mongodb.session.ClientSession, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.MongoCollectionImpl.renameCollection(com.mongodb.MongoNamespace)"], ["void", "com.mongodb.MongoCollectionImpl.renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)"], ["void", "com.mongodb.MongoCollectionImpl.renameCollection(com.mongodb.session.ClientSession, com.mongodb.MongoNamespace)"], ["void", "com.mongodb.MongoCollectionImpl.renameCollection(com.mongodb.session.ClientSession, com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectFactory.getInstance()"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectFactory.getInstance(java.util.List<java.lang.String>)"], ["java.lang.String", "com.mongodb.MongoClient$1.apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.MongoClient$1.apply(java.lang.Object)"], ["com.mongodb.LazyDBEncoder", "com.mongodb.LazyDBEncoder()"], ["int", "com.mongodb.LazyDBEncoder.writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)"], ["com.mongodb.MongoCommandException", "com.mongodb.MongoCommandException(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["int", "com.mongodb.MongoCommandException.getErrorCode()"], ["java.lang.String", "com.mongodb.MongoCommandException.getErrorMessage()"], ["org.bson.BsonDocument", "com.mongodb.MongoCommandException.getResponse()"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.batchSize(java.lang.Integer)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.allowDiskUse(java.lang.Boolean)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.outputMode(com.mongodb.AggregationOptions$OutputMode)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.collation(com.mongodb.client.model.Collation)"], ["com.mongodb.AggregationOptions", "com.mongodb.AggregationOptions$Builder.build()"], ["boolean", "com.mongodb.BulkWriteOperation.isOrdered()"], ["java.lang.Boolean", "com.mongodb.BulkWriteOperation.getBypassDocumentValidation()"], ["void", "com.mongodb.BulkWriteOperation.setBypassDocumentValidation(java.lang.Boolean)"], ["void", "com.mongodb.BulkWriteOperation.insert(com.mongodb.DBObject)"], ["com.mongodb.BulkWriteRequestBuilder", "com.mongodb.BulkWriteOperation.find(com.mongodb.DBObject)"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteOperation.execute()"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteOperation.execute(com.mongodb.WriteConcern)"], ["java.lang.String", "com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.getName()"]]}