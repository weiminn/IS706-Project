{"cassandra-all-3.11.4.jar": [["byte[]", "org.apache.cassandra.auth.AllowAllAuthenticator$Negotiator.evaluateResponse(byte[])"], ["boolean", "org.apache.cassandra.auth.AllowAllAuthenticator$Negotiator.isComplete()"], ["org.apache.cassandra.auth.AuthenticatedUser", "org.apache.cassandra.auth.AllowAllAuthenticator$Negotiator.getAuthenticatedUser()"], ["org.apache.cassandra.auth.AllowAllAuthenticator", "org.apache.cassandra.auth.AllowAllAuthenticator()"], ["boolean", "org.apache.cassandra.auth.AllowAllAuthenticator.requireAuthentication()"], ["void", "org.apache.cassandra.auth.AllowAllAuthenticator.validateConfiguration()"], ["void", "org.apache.cassandra.auth.AllowAllAuthenticator.setup()"], ["org.apache.cassandra.auth.IAuthenticator$SaslNegotiator", "org.apache.cassandra.auth.AllowAllAuthenticator.newSaslNegotiator(java.net.InetAddress)"], ["org.apache.cassandra.auth.AuthenticatedUser", "org.apache.cassandra.auth.AllowAllAuthenticator.legacyAuthenticate(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.auth.AllowAllAuthorizer", "org.apache.cassandra.auth.AllowAllAuthorizer()"], ["boolean", "org.apache.cassandra.auth.AllowAllAuthorizer.requireAuthorization()"], ["void", "org.apache.cassandra.auth.AllowAllAuthorizer.grant(org.apache.cassandra.auth.AuthenticatedUser, java.util.Set<org.apache.cassandra.auth.Permission>, org.apache.cassandra.auth.IResource, org.apache.cassandra.auth.RoleResource)"], ["void", "org.apache.cassandra.auth.AllowAllAuthorizer.revoke(org.apache.cassandra.auth.AuthenticatedUser, java.util.Set<org.apache.cassandra.auth.Permission>, org.apache.cassandra.auth.IResource, org.apache.cassandra.auth.RoleResource)"], ["void", "org.apache.cassandra.auth.AllowAllAuthorizer.revokeAllFrom(org.apache.cassandra.auth.RoleResource)"], ["void", "org.apache.cassandra.auth.AllowAllAuthorizer.revokeAllOn(org.apache.cassandra.auth.IResource)"], ["void", "org.apache.cassandra.auth.AllowAllAuthorizer.validateConfiguration()"], ["void", "org.apache.cassandra.auth.AllowAllAuthorizer.setup()"], ["org.apache.cassandra.auth.AllowAllInternodeAuthenticator", "org.apache.cassandra.auth.AllowAllInternodeAuthenticator()"], ["boolean", "org.apache.cassandra.auth.AllowAllInternodeAuthenticator.authenticate(java.net.InetAddress, int)"], ["void", "org.apache.cassandra.auth.AllowAllInternodeAuthenticator.validateConfiguration()"], ["V", "org.apache.cassandra.auth.AuthCache$1.load(K)"], ["V", "org.apache.cassandra.auth.AuthCache.get(K)"], ["void", "org.apache.cassandra.auth.AuthCache.invalidate()"], ["void", "org.apache.cassandra.auth.AuthCache.invalidate(K)"], ["void", "org.apache.cassandra.auth.AuthCache.setValidity(int)"], ["int", "org.apache.cassandra.auth.AuthCache.getValidity()"], ["void", "org.apache.cassandra.auth.AuthCache.setUpdateInterval(int)"], ["int", "org.apache.cassandra.auth.AuthCache.getUpdateInterval()"], ["void", "org.apache.cassandra.auth.AuthCache.setMaxEntries(int)"], ["int", "org.apache.cassandra.auth.AuthCache.getMaxEntries()"], ["org.apache.cassandra.auth.AuthConfig", "org.apache.cassandra.auth.AuthConfig()"], ["void", "org.apache.cassandra.auth.AuthConfig.applyAuth()"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.auth.AuthKeyspace.metadata()"], ["org.apache.cassandra.auth.AuthMigrationListener", "org.apache.cassandra.auth.AuthMigrationListener()"], ["void", "org.apache.cassandra.auth.AuthMigrationListener.onDropKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.auth.AuthMigrationListener.onDropColumnFamily(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.auth.AuthMigrationListener.onDropFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.auth.AuthMigrationListener.onDropAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.auth.AuthenticatedUser", "org.apache.cassandra.auth.AuthenticatedUser(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.auth.AuthenticatedUser.getName()"], ["org.apache.cassandra.auth.RoleResource", "org.apache.cassandra.auth.AuthenticatedUser.getPrimaryRole()"], ["boolean", "org.apache.cassandra.auth.AuthenticatedUser.isSuper()"], ["boolean", "org.apache.cassandra.auth.AuthenticatedUser.isAnonymous()"], ["boolean", "org.apache.cassandra.auth.AuthenticatedUser.isSystem()"], ["java.lang.String", "org.apache.cassandra.auth.AuthenticatedUser.toString()"], ["boolean", "org.apache.cassandra.auth.AuthenticatedUser.equals(java.lang.Object)"], ["int", "org.apache.cassandra.auth.AuthenticatedUser.hashCode()"], ["void", "org.apache.cassandra.auth.CassandraAuthorizer$1.run()"], ["boolean", "org.apache.cassandra.auth.CassandraAuthorizer$2.apply(java.lang.String)"], ["boolean", "org.apache.cassandra.auth.CassandraAuthorizer$2.apply(java.lang.Object)"], ["org.apache.cassandra.auth.CassandraAuthorizer", "org.apache.cassandra.auth.CassandraAuthorizer()"], ["void", "org.apache.cassandra.auth.CassandraAuthorizer.grant(org.apache.cassandra.auth.AuthenticatedUser, java.util.Set<org.apache.cassandra.auth.Permission>, org.apache.cassandra.auth.IResource, org.apache.cassandra.auth.RoleResource)"], ["void", "org.apache.cassandra.auth.CassandraAuthorizer.revoke(org.apache.cassandra.auth.AuthenticatedUser, java.util.Set<org.apache.cassandra.auth.Permission>, org.apache.cassandra.auth.IResource, org.apache.cassandra.auth.RoleResource)"], ["void", "org.apache.cassandra.auth.CassandraAuthorizer.revokeAllFrom(org.apache.cassandra.auth.RoleResource)"], ["void", "org.apache.cassandra.auth.CassandraAuthorizer.revokeAllOn(org.apache.cassandra.auth.IResource)"], ["void", "org.apache.cassandra.auth.CassandraAuthorizer.validateConfiguration()"], ["void", "org.apache.cassandra.auth.CassandraAuthorizer.setup()"], ["org.apache.cassandra.auth.CassandraLoginModule", "org.apache.cassandra.auth.CassandraLoginModule()"], ["void", "org.apache.cassandra.auth.CassandraLoginModule.initialize(javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler, java.util.Map<java.lang.String, ?>, java.util.Map<java.lang.String, ?>)"], ["boolean", "org.apache.cassandra.auth.CassandraLoginModule.login()"], ["boolean", "org.apache.cassandra.auth.CassandraLoginModule.commit()"], ["boolean", "org.apache.cassandra.auth.CassandraLoginModule.abort()"], ["boolean", "org.apache.cassandra.auth.CassandraLoginModule.logout()"], ["org.apache.cassandra.auth.CassandraPrincipal", "org.apache.cassandra.auth.CassandraPrincipal(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.auth.CassandraPrincipal.getName()"], ["java.lang.String", "org.apache.cassandra.auth.CassandraPrincipal.toString()"], ["boolean", "org.apache.cassandra.auth.CassandraPrincipal.equals(java.lang.Object)"], ["int", "org.apache.cassandra.auth.CassandraPrincipal.hashCode()"], ["org.apache.cassandra.auth.CassandraRoleManager$Role", "org.apache.cassandra.auth.CassandraRoleManager$1.apply(org.apache.cassandra.cql3.UntypedResultSet$Row)"], ["java.lang.Object", "org.apache.cassandra.auth.CassandraRoleManager$1.apply(java.lang.Object)"], ["org.apache.cassandra.auth.CassandraRoleManager$Role", "org.apache.cassandra.auth.CassandraRoleManager$2.apply(org.apache.cassandra.cql3.UntypedResultSet$Row)"], ["java.lang.Object", "org.apache.cassandra.auth.CassandraRoleManager$2.apply(java.lang.Object)"], ["org.apache.cassandra.auth.RoleResource", "org.apache.cassandra.auth.CassandraRoleManager$3.apply(org.apache.cassandra.cql3.UntypedResultSet$Row)"], ["java.lang.Object", "org.apache.cassandra.auth.CassandraRoleManager$3.apply(java.lang.Object)"], ["void", "org.apache.cassandra.auth.CassandraRoleManager$4.run()"], ["java.lang.String", "org.apache.cassandra.auth.CassandraRoleManager$5.apply(java.util.Map$Entry<org.apache.cassandra.auth.IRoleManager$Option, java.lang.Object>)"], ["java.lang.Object", "org.apache.cassandra.auth.CassandraRoleManager$5.apply(java.lang.Object)"], ["boolean", "org.apache.cassandra.auth.CassandraRoleManager$Role.equals(java.lang.Object)"], ["int", "org.apache.cassandra.auth.CassandraRoleManager$Role.hashCode()"], ["org.apache.cassandra.auth.CassandraRoleManager", "org.apache.cassandra.auth.CassandraRoleManager()"], ["void", "org.apache.cassandra.auth.CassandraRoleManager.setup()"], ["void", "org.apache.cassandra.auth.CassandraRoleManager.createRole(org.apache.cassandra.auth.AuthenticatedUser, org.apache.cassandra.auth.RoleResource, org.apache.cassandra.auth.RoleOptions)"], ["void", "org.apache.cassandra.auth.CassandraRoleManager.dropRole(org.apache.cassandra.auth.AuthenticatedUser, org.apache.cassandra.auth.RoleResource)"], ["void", "org.apache.cassandra.auth.CassandraRoleManager.alterRole(org.apache.cassandra.auth.AuthenticatedUser, org.apache.cassandra.auth.RoleResource, org.apache.cassandra.auth.RoleOptions)"], ["void", "org.apache.cassandra.auth.CassandraRoleManager.grantRole(org.apache.cassandra.auth.AuthenticatedUser, org.apache.cassandra.auth.RoleResource, org.apache.cassandra.auth.RoleResource)"], ["void", "org.apache.cassandra.auth.CassandraRoleManager.revokeRole(org.apache.cassandra.auth.AuthenticatedUser, org.apache.cassandra.auth.RoleResource, org.apache.cassandra.auth.RoleResource)"], ["boolean", "org.apache.cassandra.auth.CassandraRoleManager.isSuper(org.apache.cassandra.auth.RoleResource)"], ["boolean", "org.apache.cassandra.auth.CassandraRoleManager.canLogin(org.apache.cassandra.auth.RoleResource)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.auth.CassandraRoleManager.getCustomOptions(org.apache.cassandra.auth.RoleResource)"], ["boolean", "org.apache.cassandra.auth.CassandraRoleManager.isExistingRole(org.apache.cassandra.auth.RoleResource)"], ["java.util.Set<? extends org.apache.cassandra.auth.IResource>", "org.apache.cassandra.auth.CassandraRoleManager.protectedResources()"], ["void", "org.apache.cassandra.auth.CassandraRoleManager.validateConfiguration()"], ["org.apache.cassandra.auth.DataResource$Level[]", "org.apache.cassandra.auth.DataResource$Level.values()"], ["org.apache.cassandra.auth.DataResource$Level", "org.apache.cassandra.auth.DataResource$Level.valueOf(java.lang.String)"], ["org.apache.cassandra.auth.DataResource", "org.apache.cassandra.auth.DataResource.root()"], ["org.apache.cassandra.auth.DataResource", "org.apache.cassandra.auth.DataResource.keyspace(java.lang.String)"], ["org.apache.cassandra.auth.DataResource", "org.apache.cassandra.auth.DataResource.table(java.lang.String, java.lang.String)"], ["org.apache.cassandra.auth.DataResource", "org.apache.cassandra.auth.DataResource.fromName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.auth.DataResource.getName()"], ["org.apache.cassandra.auth.IResource", "org.apache.cassandra.auth.DataResource.getParent()"], ["boolean", "org.apache.cassandra.auth.DataResource.isRootLevel()"], ["boolean", "org.apache.cassandra.auth.DataResource.isKeyspaceLevel()"], ["boolean", "org.apache.cassandra.auth.DataResource.isTableLevel()"], ["java.lang.String", "org.apache.cassandra.auth.DataResource.getKeyspace()"], ["java.lang.String", "org.apache.cassandra.auth.DataResource.getTable()"], ["boolean", "org.apache.cassandra.auth.DataResource.hasParent()"], ["boolean", "org.apache.cassandra.auth.DataResource.exists()"], ["java.lang.String", "org.apache.cassandra.auth.DataResource.toString()"], ["boolean", "org.apache.cassandra.auth.DataResource.equals(java.lang.Object)"], ["int", "org.apache.cassandra.auth.DataResource.hashCode()"], ["org.apache.cassandra.auth.FunctionResource$Level[]", "org.apache.cassandra.auth.FunctionResource$Level.values()"], ["org.apache.cassandra.auth.FunctionResource$Level", "org.apache.cassandra.auth.FunctionResource$Level.valueOf(java.lang.String)"], ["org.apache.cassandra.auth.FunctionResource", "org.apache.cassandra.auth.FunctionResource.root()"], ["org.apache.cassandra.auth.FunctionResource", "org.apache.cassandra.auth.FunctionResource.keyspace(java.lang.String)"], ["org.apache.cassandra.auth.FunctionResource", "org.apache.cassandra.auth.FunctionResource.function(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.auth.FunctionResource", "org.apache.cassandra.auth.FunctionResource.functionFromCql(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.cql3.CQL3Type$Raw>)"], ["org.apache.cassandra.auth.FunctionResource", "org.apache.cassandra.auth.FunctionResource.fromName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.auth.FunctionResource.getName()"], ["java.lang.String", "org.apache.cassandra.auth.FunctionResource.getKeyspace()"], ["org.apache.cassandra.cql3.functions.FunctionName", "org.apache.cassandra.auth.FunctionResource.getFunctionName()"], ["org.apache.cassandra.auth.IResource", "org.apache.cassandra.auth.FunctionResource.getParent()"], ["boolean", "org.apache.cassandra.auth.FunctionResource.hasParent()"], ["boolean", "org.apache.cassandra.auth.FunctionResource.exists()"], ["int", "org.apache.cassandra.auth.FunctionResource.compareTo(org.apache.cassandra.auth.FunctionResource)"], ["java.lang.String", "org.apache.cassandra.auth.FunctionResource.toString()"], ["boolean", "org.apache.cassandra.auth.FunctionResource.equals(java.lang.Object)"], ["int", "org.apache.cassandra.auth.FunctionResource.hashCode()"], ["default", "org.apache.cassandra.auth.IAuthorizer.boolean requireAuthorization()"], ["org.apache.cassandra.auth.IRoleManager$Option[]", "org.apache.cassandra.auth.IRoleManager$Option.values()"], ["org.apache.cassandra.auth.IRoleManager$Option", "org.apache.cassandra.auth.IRoleManager$Option.valueOf(java.lang.String)"], ["org.apache.cassandra.auth.JMXResource$Level[]", "org.apache.cassandra.auth.JMXResource$Level.values()"], ["org.apache.cassandra.auth.JMXResource$Level", "org.apache.cassandra.auth.JMXResource$Level.valueOf(java.lang.String)"], ["org.apache.cassandra.auth.JMXResource", "org.apache.cassandra.auth.JMXResource.mbean(java.lang.String)"], ["org.apache.cassandra.auth.JMXResource", "org.apache.cassandra.auth.JMXResource.fromName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.auth.JMXResource.getName()"], ["java.lang.String", "org.apache.cassandra.auth.JMXResource.getObjectName()"], ["org.apache.cassandra.auth.JMXResource", "org.apache.cassandra.auth.JMXResource.root()"], ["org.apache.cassandra.auth.IResource", "org.apache.cassandra.auth.JMXResource.getParent()"], ["boolean", "org.apache.cassandra.auth.JMXResource.hasParent()"], ["boolean", "org.apache.cassandra.auth.JMXResource.exists()"], ["java.lang.String", "org.apache.cassandra.auth.JMXResource.toString()"], ["boolean", "org.apache.cassandra.auth.JMXResource.equals(java.lang.Object)"], ["int", "org.apache.cassandra.auth.JMXResource.hashCode()"], ["void", "org.apache.cassandra.auth.PasswordAuthenticator$CredentialsCache.invalidateCredentials(java.lang.String)"], ["byte[]", "org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator.evaluateResponse(byte[])"], ["boolean", "org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator.isComplete()"], ["org.apache.cassandra.auth.AuthenticatedUser", "org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator.getAuthenticatedUser()"], ["org.apache.cassandra.auth.PasswordAuthenticator", "org.apache.cassandra.auth.PasswordAuthenticator()"], ["boolean", "org.apache.cassandra.auth.PasswordAuthenticator.requireAuthentication()"], ["void", "org.apache.cassandra.auth.PasswordAuthenticator.validateConfiguration()"], ["void", "org.apache.cassandra.auth.PasswordAuthenticator.setup()"], ["org.apache.cassandra.auth.AuthenticatedUser", "org.apache.cassandra.auth.PasswordAuthenticator.legacyAuthenticate(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.auth.IAuthenticator$SaslNegotiator", "org.apache.cassandra.auth.PasswordAuthenticator.newSaslNegotiator(java.net.InetAddress)"], ["org.apache.cassandra.auth.Permission[]", "org.apache.cassandra.auth.Permission.values()"], ["org.apache.cassandra.auth.Permission", "org.apache.cassandra.auth.Permission.valueOf(java.lang.String)"], ["org.apache.cassandra.auth.PermissionDetails", "org.apache.cassandra.auth.PermissionDetails(java.lang.String, org.apache.cassandra.auth.IResource, org.apache.cassandra.auth.Permission)"], ["int", "org.apache.cassandra.auth.PermissionDetails.compareTo(org.apache.cassandra.auth.PermissionDetails)"], ["java.lang.String", "org.apache.cassandra.auth.PermissionDetails.toString()"], ["boolean", "org.apache.cassandra.auth.PermissionDetails.equals(java.lang.Object)"], ["int", "org.apache.cassandra.auth.PermissionDetails.hashCode()"], ["int", "org.apache.cassandra.auth.PermissionDetails.compareTo(java.lang.Object)"], ["org.apache.cassandra.auth.PermissionsCache", "org.apache.cassandra.auth.PermissionsCache(org.apache.cassandra.auth.IAuthorizer)"], ["org.apache.cassandra.auth.Resources", "org.apache.cassandra.auth.Resources()"], ["java.util.List<? extends org.apache.cassandra.auth.IResource>", "org.apache.cassandra.auth.Resources.chain(org.apache.cassandra.auth.IResource)"], ["org.apache.cassandra.auth.IResource", "org.apache.cassandra.auth.Resources.fromName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.auth.Resources.toString(java.util.List<java.lang.Object>)"], ["org.apache.cassandra.auth.RoleOptions", "org.apache.cassandra.auth.RoleOptions()"], ["void", "org.apache.cassandra.auth.RoleOptions.setOption(org.apache.cassandra.auth.IRoleManager$Option, java.lang.Object)"], ["boolean", "org.apache.cassandra.auth.RoleOptions.isEmpty()"], ["java.util.Map<org.apache.cassandra.auth.IRoleManager$Option, java.lang.Object>", "org.apache.cassandra.auth.RoleOptions.getOptions()"], ["com.google.common.base.Optional<java.util.Map<java.lang.String, java.lang.String>>", "org.apache.cassandra.auth.RoleOptions.getCustomOptions()"], ["void", "org.apache.cassandra.auth.RoleOptions.validate()"], ["java.lang.String", "org.apache.cassandra.auth.RoleOptions.toString()"], ["org.apache.cassandra.auth.RoleResource$Level[]", "org.apache.cassandra.auth.RoleResource$Level.values()"], ["org.apache.cassandra.auth.RoleResource$Level", "org.apache.cassandra.auth.RoleResource$Level.valueOf(java.lang.String)"], ["org.apache.cassandra.auth.RoleResource", "org.apache.cassandra.auth.RoleResource.root()"], ["org.apache.cassandra.auth.RoleResource", "org.apache.cassandra.auth.RoleResource.role(java.lang.String)"], ["org.apache.cassandra.auth.RoleResource", "org.apache.cassandra.auth.RoleResource.fromName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.auth.RoleResource.getName()"], ["java.lang.String", "org.apache.cassandra.auth.RoleResource.getRoleName()"], ["org.apache.cassandra.auth.IResource", "org.apache.cassandra.auth.RoleResource.getParent()"], ["boolean", "org.apache.cassandra.auth.RoleResource.hasParent()"], ["boolean", "org.apache.cassandra.auth.RoleResource.exists()"], ["int", "org.apache.cassandra.auth.RoleResource.compareTo(org.apache.cassandra.auth.RoleResource)"], ["java.lang.String", "org.apache.cassandra.auth.RoleResource.toString()"], ["boolean", "org.apache.cassandra.auth.RoleResource.equals(java.lang.Object)"], ["int", "org.apache.cassandra.auth.RoleResource.hashCode()"], ["int", "org.apache.cassandra.auth.RoleResource.compareTo(java.lang.Object)"], ["org.apache.cassandra.auth.Roles", "org.apache.cassandra.auth.Roles()"], ["boolean", "org.apache.cassandra.auth.Roles.hasSuperuserStatus(org.apache.cassandra.auth.RoleResource)"], ["org.apache.cassandra.auth.RolesCache", "org.apache.cassandra.auth.RolesCache(org.apache.cassandra.auth.IRoleManager)"], ["void", "org.apache.cassandra.auth.jmx.AuthenticationProxy$JMXCallbackHandler.handle(javax.security.auth.callback.Callback[])"], ["org.apache.cassandra.auth.jmx.AuthenticationProxy", "org.apache.cassandra.auth.jmx.AuthenticationProxy(java.lang.String)"], ["javax.security.auth.Subject", "org.apache.cassandra.auth.jmx.AuthenticationProxy.authenticate(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.auth.jmx.AuthorizationProxy$JMXPermissionsCache.get(java.lang.Object)"], ["org.apache.cassandra.auth.jmx.AuthorizationProxy", "org.apache.cassandra.auth.jmx.AuthorizationProxy()"], ["java.lang.Object", "org.apache.cassandra.auth.jmx.AuthorizationProxy.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])"], ["long", "org.apache.cassandra.batchlog.Batch$Serializer.serializedSize(org.apache.cassandra.batchlog.Batch, int)"], ["void", "org.apache.cassandra.batchlog.Batch$Serializer.serialize(org.apache.cassandra.batchlog.Batch, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.batchlog.Batch", "org.apache.cassandra.batchlog.Batch$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.batchlog.Batch$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.batchlog.Batch$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.batchlog.Batch$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.batchlog.Batch", "org.apache.cassandra.batchlog.Batch.createLocal(java.util.UUID, long, java.util.Collection<org.apache.cassandra.db.Mutation>)"], ["org.apache.cassandra.batchlog.Batch", "org.apache.cassandra.batchlog.Batch.createRemote(java.util.UUID, long, java.util.Collection<java.nio.ByteBuffer>)"], ["int", "org.apache.cassandra.batchlog.Batch.size()"], ["org.apache.cassandra.batchlog.BatchRemoveVerbHandler", "org.apache.cassandra.batchlog.BatchRemoveVerbHandler()"], ["void", "org.apache.cassandra.batchlog.BatchRemoveVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<java.util.UUID>, int)"], ["org.apache.cassandra.batchlog.BatchStoreVerbHandler", "org.apache.cassandra.batchlog.BatchStoreVerbHandler()"], ["void", "org.apache.cassandra.batchlog.BatchStoreVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.batchlog.Batch>, int)"], ["org.apache.cassandra.batchlog.BatchlogManager$EndpointFilter", "org.apache.cassandra.batchlog.BatchlogManager$EndpointFilter(java.lang.String, com.google.common.collect.Multimap<java.lang.String, java.net.InetAddress>)"], ["void", "org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$ReplayWriteResponseHandler.response(org.apache.cassandra.net.MessageIn<T>)"], ["int", "org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch.replay(com.google.common.util.concurrent.RateLimiter, java.util.Set<java.net.InetAddress>)"], ["void", "org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch.finish(java.util.Set<java.net.InetAddress>)"], ["org.apache.cassandra.batchlog.BatchlogManager", "org.apache.cassandra.batchlog.BatchlogManager()"], ["void", "org.apache.cassandra.batchlog.BatchlogManager.start()"], ["void", "org.apache.cassandra.batchlog.BatchlogManager.shutdown()"], ["void", "org.apache.cassandra.batchlog.BatchlogManager.remove(java.util.UUID)"], ["void", "org.apache.cassandra.batchlog.BatchlogManager.store(org.apache.cassandra.batchlog.Batch)"], ["void", "org.apache.cassandra.batchlog.BatchlogManager.store(org.apache.cassandra.batchlog.Batch, boolean)"], ["int", "org.apache.cassandra.batchlog.BatchlogManager.countAllBatches()"], ["long", "org.apache.cassandra.batchlog.BatchlogManager.getTotalBatchesReplayed()"], ["void", "org.apache.cassandra.batchlog.BatchlogManager.forceBatchlogReplay()"], ["long", "org.apache.cassandra.batchlog.BatchlogManager.getBatchlogTimeout()"], ["void", "org.apache.cassandra.batchlog.LegacyBatchlogMigrator.migrate()"], ["boolean", "org.apache.cassandra.batchlog.LegacyBatchlogMigrator.isLegacyBatchlogMutation(org.apache.cassandra.db.Mutation)"], ["void", "org.apache.cassandra.batchlog.LegacyBatchlogMigrator.handleLegacyMutation(org.apache.cassandra.db.Mutation)"], ["void", "org.apache.cassandra.batchlog.LegacyBatchlogMigrator.syncWriteToBatchlog(org.apache.cassandra.service.WriteResponseHandler<?>, org.apache.cassandra.batchlog.Batch, java.util.Collection<java.net.InetAddress>)"], ["void", "org.apache.cassandra.batchlog.LegacyBatchlogMigrator.asyncRemoveFromBatchlog(java.util.Collection<java.net.InetAddress>, java.util.UUID, long)"], ["java.io.InputStream", "org.apache.cassandra.cache.AutoSavingCache$1.getInputStream(java.io.File, java.io.File)"], ["java.io.OutputStream", "org.apache.cassandra.cache.AutoSavingCache$1.getOutputStream(java.io.File, java.io.File)"], ["void", "org.apache.cassandra.cache.AutoSavingCache$2.run()"], ["java.lang.Integer", "org.apache.cassandra.cache.AutoSavingCache$3.call()"], ["java.lang.Object", "org.apache.cassandra.cache.AutoSavingCache$3.call()"], ["void", "org.apache.cassandra.cache.AutoSavingCache$4.run()"], ["org.apache.cassandra.service.CacheService$CacheType", "org.apache.cassandra.cache.AutoSavingCache$Writer.cacheType()"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.cache.AutoSavingCache$Writer.getCompactionInfo()"], ["void", "org.apache.cassandra.cache.AutoSavingCache$Writer.saveCache()"], ["void", "org.apache.cassandra.cache.AutoSavingCache.setStreamFactory(org.apache.cassandra.cache.AutoSavingCache$IStreamFactory)"], ["org.apache.cassandra.cache.AutoSavingCache", "org.apache.cassandra.cache.AutoSavingCache(org.apache.cassandra.cache.ICache<K, V>, org.apache.cassandra.service.CacheService$CacheType, org.apache.cassandra.cache.AutoSavingCache$CacheSerializer<K, V>)"], ["java.io.File", "org.apache.cassandra.cache.AutoSavingCache.getCacheDataPath(java.lang.String)"], ["java.io.File", "org.apache.cassandra.cache.AutoSavingCache.getCacheCrcPath(java.lang.String)"], ["org.apache.cassandra.cache.AutoSavingCache<K, V>.Writer", "org.apache.cassandra.cache.AutoSavingCache.getWriter(int)"], ["void", "org.apache.cassandra.cache.AutoSavingCache.scheduleSaving(int, int)"], ["int", "org.apache.cassandra.cache.AutoSavingCache.loadSaved()"], ["org.apache.cassandra.cache.CacheKey", "org.apache.cassandra.cache.CacheKey(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.cache.ChunkCache$Buffer", "org.apache.cassandra.cache.ChunkCache$Buffer(java.nio.ByteBuffer, long)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cache.ChunkCache$Buffer.buffer()"], ["long", "org.apache.cassandra.cache.ChunkCache$Buffer.offset()"], ["void", "org.apache.cassandra.cache.ChunkCache$Buffer.release()"], ["org.apache.cassandra.cache.ChunkCache$CachingRebufferer", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer(org.apache.cassandra.cache.ChunkCache, org.apache.cassandra.io.util.ChunkReader)"], ["org.apache.cassandra.cache.ChunkCache$Buffer", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(long)"], ["void", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.invalidate(long)"], ["org.apache.cassandra.io.util.Rebufferer", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.instantiateRebufferer()"], ["void", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.close()"], ["void", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.closeReader()"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.channel()"], ["long", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.fileLength()"], ["double", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.getCrcCheckChance()"], ["java.lang.String", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.toString()"], ["org.apache.cassandra.io.util.Rebufferer$BufferHolder", "org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(long)"], ["org.apache.cassandra.cache.ChunkCache$Key", "org.apache.cassandra.cache.ChunkCache$Key(org.apache.cassandra.io.util.ChunkReader, long)"], ["int", "org.apache.cassandra.cache.ChunkCache$Key.hashCode()"], ["boolean", "org.apache.cassandra.cache.ChunkCache$Key.equals(java.lang.Object)"], ["org.apache.cassandra.cache.ChunkCache", "org.apache.cassandra.cache.ChunkCache()"], ["org.apache.cassandra.cache.ChunkCache$Buffer", "org.apache.cassandra.cache.ChunkCache.load(org.apache.cassandra.cache.ChunkCache$Key)"], ["void", "org.apache.cassandra.cache.ChunkCache.onRemoval(org.apache.cassandra.cache.ChunkCache$Key, org.apache.cassandra.cache.ChunkCache$Buffer, com.github.benmanes.caffeine.cache.RemovalCause)"], ["void", "org.apache.cassandra.cache.ChunkCache.close()"], ["org.apache.cassandra.io.util.RebuffererFactory", "org.apache.cassandra.cache.ChunkCache.wrap(org.apache.cassandra.io.util.ChunkReader)"], ["org.apache.cassandra.io.util.RebuffererFactory", "org.apache.cassandra.cache.ChunkCache.maybeWrap(org.apache.cassandra.io.util.ChunkReader)"], ["void", "org.apache.cassandra.cache.ChunkCache.invalidatePosition(org.apache.cassandra.io.util.FileHandle, long)"], ["void", "org.apache.cassandra.cache.ChunkCache.invalidateFile(java.lang.String)"], ["void", "org.apache.cassandra.cache.ChunkCache.enable(boolean)"], ["long", "org.apache.cassandra.cache.ChunkCache.capacity()"], ["void", "org.apache.cassandra.cache.ChunkCache.setCapacity(long)"], ["int", "org.apache.cassandra.cache.ChunkCache.size()"], ["long", "org.apache.cassandra.cache.ChunkCache.weightedSize()"], ["java.lang.Object", "org.apache.cassandra.cache.ChunkCache.load(java.lang.Object)"], ["void", "org.apache.cassandra.cache.ChunkCache.onRemoval(java.lang.Object, java.lang.Object, com.github.benmanes.caffeine.cache.RemovalCause)"], ["int", "org.apache.cassandra.cache.ConcurrentLinkedHashCache$1.weightOf(K, V)"], ["int", "org.apache.cassandra.cache.ConcurrentLinkedHashCache$1.weightOf(java.lang.Object, java.lang.Object)"], ["<K extends org.apache.cassandra.cache.IMeasurableMemory, V extends org.apache.cassandra.cache.IMeasurableMemory> org.apache.cassandra.cache.ConcurrentLinkedHashCache<K, V>", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.create(long, com.googlecode.concurrentlinkedhashmap.EntryWeigher<K, V>)"], ["<K extends org.apache.cassandra.cache.IMeasurableMemory, V extends org.apache.cassandra.cache.IMeasurableMemory> org.apache.cassandra.cache.ConcurrentLinkedHashCache<K, V>", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.create(long)"], ["long", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.capacity()"], ["void", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.setCapacity(long)"], ["boolean", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.isEmpty()"], ["int", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.size()"], ["long", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.weightedSize()"], ["void", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.clear()"], ["V", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.get(K)"], ["void", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.put(K, V)"], ["boolean", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.putIfAbsent(K, V)"], ["boolean", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.replace(K, V, V)"], ["void", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.remove(K)"], ["boolean", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.containsKey(K)"], ["boolean", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.containsKey(java.lang.Object)"], ["void", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.remove(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.get(java.lang.Object)"], ["boolean", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.replace(java.lang.Object, java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.putIfAbsent(java.lang.Object, java.lang.Object)"], ["void", "org.apache.cassandra.cache.ConcurrentLinkedHashCache.put(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.cache.CounterCacheKey", "org.apache.cassandra.cache.CounterCacheKey(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["org.apache.cassandra.cache.CounterCacheKey", "org.apache.cassandra.cache.CounterCacheKey.create(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>, java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath)"], ["long", "org.apache.cassandra.cache.CounterCacheKey.unsharedHeapSize()"], ["java.lang.String", "org.apache.cassandra.cache.CounterCacheKey.toString()"], ["int", "org.apache.cassandra.cache.CounterCacheKey.hashCode()"], ["boolean", "org.apache.cassandra.cache.CounterCacheKey.equals(java.lang.Object)"], ["org.apache.cassandra.cache.InstrumentingCache", "org.apache.cassandra.cache.InstrumentingCache(java.lang.String, org.apache.cassandra.cache.ICache<K, V>)"], ["void", "org.apache.cassandra.cache.InstrumentingCache.put(K, V)"], ["boolean", "org.apache.cassandra.cache.InstrumentingCache.putIfAbsent(K, V)"], ["boolean", "org.apache.cassandra.cache.InstrumentingCache.replace(K, V, V)"], ["V", "org.apache.cassandra.cache.InstrumentingCache.get(K)"], ["V", "org.apache.cassandra.cache.InstrumentingCache.getInternal(K)"], ["void", "org.apache.cassandra.cache.InstrumentingCache.remove(K)"], ["long", "org.apache.cassandra.cache.InstrumentingCache.getCapacity()"], ["void", "org.apache.cassandra.cache.InstrumentingCache.setCapacity(long)"], ["int", "org.apache.cassandra.cache.InstrumentingCache.size()"], ["long", "org.apache.cassandra.cache.InstrumentingCache.weightedSize()"], ["void", "org.apache.cassandra.cache.InstrumentingCache.clear()"], ["boolean", "org.apache.cassandra.cache.InstrumentingCache.containsKey(K)"], ["org.apache.cassandra.metrics.CacheMetrics", "org.apache.cassandra.cache.InstrumentingCache.getMetrics()"], ["org.apache.cassandra.cache.KeyCacheKey", "org.apache.cassandra.cache.KeyCacheKey(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>, org.apache.cassandra.io.sstable.Descriptor, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.cache.KeyCacheKey.toString()"], ["long", "org.apache.cassandra.cache.KeyCacheKey.unsharedHeapSize()"], ["boolean", "org.apache.cassandra.cache.KeyCacheKey.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cache.KeyCacheKey.hashCode()"], ["long", "org.apache.cassandra.cache.NopCacheProvider$NopCache.capacity()"], ["void", "org.apache.cassandra.cache.NopCacheProvider$NopCache.setCapacity(long)"], ["void", "org.apache.cassandra.cache.NopCacheProvider$NopCache.put(org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry)"], ["boolean", "org.apache.cassandra.cache.NopCacheProvider$NopCache.putIfAbsent(org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry)"], ["boolean", "org.apache.cassandra.cache.NopCacheProvider$NopCache.replace(org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry, org.apache.cassandra.cache.IRowCacheEntry)"], ["org.apache.cassandra.cache.IRowCacheEntry", "org.apache.cassandra.cache.NopCacheProvider$NopCache.get(org.apache.cassandra.cache.RowCacheKey)"], ["void", "org.apache.cassandra.cache.NopCacheProvider$NopCache.remove(org.apache.cassandra.cache.RowCacheKey)"], ["int", "org.apache.cassandra.cache.NopCacheProvider$NopCache.size()"], ["long", "org.apache.cassandra.cache.NopCacheProvider$NopCache.weightedSize()"], ["void", "org.apache.cassandra.cache.NopCacheProvider$NopCache.clear()"], ["boolean", "org.apache.cassandra.cache.NopCacheProvider$NopCache.containsKey(org.apache.cassandra.cache.RowCacheKey)"], ["boolean", "org.apache.cassandra.cache.NopCacheProvider$NopCache.containsKey(java.lang.Object)"], ["void", "org.apache.cassandra.cache.NopCacheProvider$NopCache.remove(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.cache.NopCacheProvider$NopCache.get(java.lang.Object)"], ["boolean", "org.apache.cassandra.cache.NopCacheProvider$NopCache.replace(java.lang.Object, java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.cassandra.cache.NopCacheProvider$NopCache.putIfAbsent(java.lang.Object, java.lang.Object)"], ["void", "org.apache.cassandra.cache.NopCacheProvider$NopCache.put(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.cache.NopCacheProvider", "org.apache.cassandra.cache.NopCacheProvider()"], ["org.apache.cassandra.cache.ICache<org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry>", "org.apache.cassandra.cache.NopCacheProvider.create()"], ["void", "org.apache.cassandra.cache.OHCProvider$KeySerializer.serialize(org.apache.cassandra.cache.RowCacheKey, java.nio.ByteBuffer)"], ["org.apache.cassandra.cache.RowCacheKey", "org.apache.cassandra.cache.OHCProvider$KeySerializer.deserialize(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.cache.OHCProvider$KeySerializer.serializedSize(org.apache.cassandra.cache.RowCacheKey)"], ["int", "org.apache.cassandra.cache.OHCProvider$KeySerializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.cache.OHCProvider$KeySerializer.deserialize(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.cache.OHCProvider$KeySerializer.serialize(java.lang.Object, java.nio.ByteBuffer)"], ["org.apache.cassandra.cache.OHCProvider$OHCacheAdapter", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter(org.caffinitas.ohc.OHCache<org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry>)"], ["long", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.capacity()"], ["void", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.setCapacity(long)"], ["void", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.put(org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry)"], ["boolean", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.putIfAbsent(org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry)"], ["boolean", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.replace(org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry, org.apache.cassandra.cache.IRowCacheEntry)"], ["org.apache.cassandra.cache.IRowCacheEntry", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.get(org.apache.cassandra.cache.RowCacheKey)"], ["void", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.remove(org.apache.cassandra.cache.RowCacheKey)"], ["int", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.size()"], ["long", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.weightedSize()"], ["void", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.clear()"], ["boolean", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.containsKey(org.apache.cassandra.cache.RowCacheKey)"], ["boolean", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.containsKey(java.lang.Object)"], ["void", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.remove(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.get(java.lang.Object)"], ["boolean", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.replace(java.lang.Object, java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.putIfAbsent(java.lang.Object, java.lang.Object)"], ["void", "org.apache.cassandra.cache.OHCProvider$OHCacheAdapter.put(java.lang.Object, java.lang.Object)"], ["void", "org.apache.cassandra.cache.OHCProvider$ValueSerializer.serialize(org.apache.cassandra.cache.IRowCacheEntry, java.nio.ByteBuffer)"], ["org.apache.cassandra.cache.IRowCacheEntry", "org.apache.cassandra.cache.OHCProvider$ValueSerializer.deserialize(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.cache.OHCProvider$ValueSerializer.serializedSize(org.apache.cassandra.cache.IRowCacheEntry)"], ["int", "org.apache.cassandra.cache.OHCProvider$ValueSerializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.cache.OHCProvider$ValueSerializer.deserialize(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.cache.OHCProvider$ValueSerializer.serialize(java.lang.Object, java.nio.ByteBuffer)"], ["org.apache.cassandra.cache.OHCProvider", "org.apache.cassandra.cache.OHCProvider()"], ["org.apache.cassandra.cache.ICache<org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry>", "org.apache.cassandra.cache.OHCProvider.create()"], ["org.apache.cassandra.cache.RefCountedMemory", "org.apache.cassandra.cache.RefCountedMemory(long)"], ["boolean", "org.apache.cassandra.cache.RefCountedMemory.reference()"], ["void", "org.apache.cassandra.cache.RefCountedMemory.unreference()"], ["org.apache.cassandra.cache.RefCountedMemory", "org.apache.cassandra.cache.RefCountedMemory.copy(long)"], ["void", "org.apache.cassandra.cache.RefCountedMemory.free()"], ["void", "org.apache.cassandra.cache.RefCountedMemory.close()"], ["org.apache.cassandra.io.util.Memory", "org.apache.cassandra.cache.RefCountedMemory.copy(long)"], ["org.apache.cassandra.cache.RowCacheKey", "org.apache.cassandra.cache.RowCacheKey(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>, byte[])"], ["org.apache.cassandra.cache.RowCacheKey", "org.apache.cassandra.cache.RowCacheKey(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.cache.RowCacheKey", "org.apache.cassandra.cache.RowCacheKey(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>, java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.cache.RowCacheKey.unsharedHeapSize()"], ["boolean", "org.apache.cassandra.cache.RowCacheKey.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cache.RowCacheKey.hashCode()"], ["java.lang.String", "org.apache.cassandra.cache.RowCacheKey.toString()"], ["org.apache.cassandra.cache.RowCacheSentinel", "org.apache.cassandra.cache.RowCacheSentinel()"], ["boolean", "org.apache.cassandra.cache.RowCacheSentinel.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cache.RowCacheSentinel.hashCode()"], ["void", "org.apache.cassandra.cache.SerializingCache$1.onEviction(K, org.apache.cassandra.cache.RefCountedMemory)"], ["void", "org.apache.cassandra.cache.SerializingCache$1.onEviction(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.cache.SerializingCache$2.weightOf(org.apache.cassandra.cache.RefCountedMemory)"], ["int", "org.apache.cassandra.cache.SerializingCache$2.weightOf(java.lang.Object)"], ["<K, V> org.apache.cassandra.cache.SerializingCache<K, V>", "org.apache.cassandra.cache.SerializingCache.create(long, com.googlecode.concurrentlinkedhashmap.Weigher<org.apache.cassandra.cache.RefCountedMemory>, org.apache.cassandra.io.ISerializer<V>)"], ["<K, V> org.apache.cassandra.cache.SerializingCache<K, V>", "org.apache.cassandra.cache.SerializingCache.create(long, org.apache.cassandra.io.ISerializer<V>)"], ["long", "org.apache.cassandra.cache.SerializingCache.capacity()"], ["void", "org.apache.cassandra.cache.SerializingCache.setCapacity(long)"], ["boolean", "org.apache.cassandra.cache.SerializingCache.isEmpty()"], ["int", "org.apache.cassandra.cache.SerializingCache.size()"], ["long", "org.apache.cassandra.cache.SerializingCache.weightedSize()"], ["void", "org.apache.cassandra.cache.SerializingCache.clear()"], ["V", "org.apache.cassandra.cache.SerializingCache.get(K)"], ["void", "org.apache.cassandra.cache.SerializingCache.put(K, V)"], ["boolean", "org.apache.cassandra.cache.SerializingCache.putIfAbsent(K, V)"], ["boolean", "org.apache.cassandra.cache.SerializingCache.replace(K, V, V)"], ["void", "org.apache.cassandra.cache.SerializingCache.remove(K)"], ["boolean", "org.apache.cassandra.cache.SerializingCache.containsKey(K)"], ["void", "org.apache.cassandra.cache.SerializingCacheProvider$RowCacheSerializer.serialize(org.apache.cassandra.cache.IRowCacheEntry, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.cache.IRowCacheEntry", "org.apache.cassandra.cache.SerializingCacheProvider$RowCacheSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.cache.SerializingCacheProvider$RowCacheSerializer.serializedSize(org.apache.cassandra.cache.IRowCacheEntry)"], ["long", "org.apache.cassandra.cache.SerializingCacheProvider$RowCacheSerializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.cache.SerializingCacheProvider$RowCacheSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.cache.SerializingCacheProvider$RowCacheSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.cache.SerializingCacheProvider", "org.apache.cassandra.cache.SerializingCacheProvider()"], ["org.apache.cassandra.cache.ICache<org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry>", "org.apache.cassandra.cache.SerializingCacheProvider.create()"], ["org.apache.cassandra.client.RingCache", "org.apache.cassandra.client.RingCache(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.client.RingCache.refreshEndpointMap()"], ["org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask(java.util.concurrent.Callable<T>)"], ["org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask(java.lang.Runnable, T)"], ["void", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run()"], ["boolean", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.cancel(boolean)"], ["boolean", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.isCancelled()"], ["boolean", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.isDone()"], ["T", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.get()"], ["T", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.get(long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask(java.util.concurrent.Callable<T>, org.apache.cassandra.concurrent.ExecutorLocals)"], ["org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask(java.lang.Runnable, T, org.apache.cassandra.concurrent.ExecutorLocals)"], ["void", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run()"], ["org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService()"], ["<T> org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask<T>", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.submit(java.util.concurrent.Callable<T>)"], ["<T> org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask<T>", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.submit(java.lang.Runnable, T)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> T", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["void", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.execute(java.lang.Runnable)"], ["void", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.execute(java.lang.Runnable, org.apache.cassandra.concurrent.ExecutorLocals)"], ["java.util.concurrent.Future", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.submit(java.lang.Runnable)"], ["java.util.concurrent.Future", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService.submit(java.util.concurrent.Callable)"], ["void", "org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$1.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)"], ["org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable", "org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable(java.lang.Runnable)"], ["void", "org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable.run()"], ["org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor(int, java.lang.String, int)"], ["org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory)"], ["org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor(java.lang.String)"], ["void", "org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.afterExecute(java.lang.Runnable, java.lang.Throwable)"], ["void", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)"], ["org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper(java.util.concurrent.Callable<T>)"], ["org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper(java.lang.Runnable, org.apache.cassandra.concurrent.ExecutorLocals)"], ["org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor(java.lang.String, int)"], ["org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor(int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory)"], ["org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory)"], ["org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createCachedThreadpoolWithMaxSize(java.lang.String)"], ["org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createWithFixedPoolSize(java.lang.String, int)"], ["org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createWithMaximumPoolSize(java.lang.String, int, int, java.util.concurrent.TimeUnit)"], ["void", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(java.lang.Runnable, org.apache.cassandra.concurrent.ExecutorLocals)"], ["void", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.maybeExecuteImmediately(java.lang.Runnable)"], ["void", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(java.lang.Runnable)"], ["void", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.logExceptionsAfterExecute(java.lang.Runnable, java.lang.Throwable)"], ["void", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.handleOrLog(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.extractThrowable(java.lang.Runnable)"], ["org.apache.cassandra.concurrent.ExecutorLocals", "org.apache.cassandra.concurrent.ExecutorLocals.create()"], ["org.apache.cassandra.concurrent.ExecutorLocals", "org.apache.cassandra.concurrent.ExecutorLocals.create(org.apache.cassandra.tracing.TraceState)"], ["void", "org.apache.cassandra.concurrent.ExecutorLocals.set(org.apache.cassandra.concurrent.ExecutorLocals)"], ["org.apache.cassandra.concurrent.InfiniteLoopExecutor", "org.apache.cassandra.concurrent.InfiniteLoopExecutor(java.lang.String, org.apache.cassandra.concurrent.InfiniteLoopExecutor$InterruptibleRunnable)"], ["org.apache.cassandra.concurrent.InfiniteLoopExecutor", "org.apache.cassandra.concurrent.InfiniteLoopExecutor.start()"], ["void", "org.apache.cassandra.concurrent.InfiniteLoopExecutor.shutdown()"], ["void", "org.apache.cassandra.concurrent.InfiniteLoopExecutor.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutor", "org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutor(int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, org.apache.cassandra.concurrent.NamedThreadFactory, java.lang.String)"], ["org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor(java.lang.String)"], ["org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor(java.lang.String, java.lang.String)"], ["org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor(java.lang.String, int)"], ["org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor(org.apache.cassandra.concurrent.NamedThreadFactory, java.lang.String)"], ["org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor(int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, org.apache.cassandra.concurrent.NamedThreadFactory, java.lang.String)"], ["org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, org.apache.cassandra.concurrent.NamedThreadFactory, java.lang.String)"], ["org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor(org.apache.cassandra.concurrent.Stage)"], ["synchronized", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.void shutdown()"], ["int", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getTotalBlockedTasks()"], ["int", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getCurrentlyBlockedTasks()"], ["int", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getCoreThreads()"], ["void", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.setCoreThreads(int)"], ["int", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getMaximumThreads()"], ["void", "org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.setMaximumThreads(int)"], ["org.apache.cassandra.concurrent.NamedThreadFactory", "org.apache.cassandra.concurrent.NamedThreadFactory(java.lang.String)"], ["org.apache.cassandra.concurrent.NamedThreadFactory", "org.apache.cassandra.concurrent.NamedThreadFactory(java.lang.String, int)"], ["org.apache.cassandra.concurrent.NamedThreadFactory", "org.apache.cassandra.concurrent.NamedThreadFactory(java.lang.String, int, java.lang.ClassLoader, java.lang.ThreadGroup)"], ["java.lang.Thread", "org.apache.cassandra.concurrent.NamedThreadFactory.newThread(java.lang.Runnable)"], ["java.lang.Runnable", "org.apache.cassandra.concurrent.NamedThreadFactory.threadLocalDeallocator(java.lang.Runnable)"], ["java.lang.Thread", "org.apache.cassandra.concurrent.NamedThreadFactory.createThread(java.lang.Runnable)"], ["java.lang.Thread", "org.apache.cassandra.concurrent.NamedThreadFactory.createThread(java.lang.Runnable, java.lang.String)"], ["java.lang.Thread", "org.apache.cassandra.concurrent.NamedThreadFactory.createThread(java.lang.Runnable, java.lang.String, boolean)"], ["java.lang.Thread", "org.apache.cassandra.concurrent.NamedThreadFactory.createThread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)"], ["java.lang.Thread", "org.apache.cassandra.concurrent.NamedThreadFactory.createThread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, boolean)"], ["void", "org.apache.cassandra.concurrent.SEPExecutor.maybeExecuteImmediately(java.lang.Runnable)"], ["synchronized", "org.apache.cassandra.concurrent.SEPExecutor.void shutdown()"], ["boolean", "org.apache.cassandra.concurrent.SEPExecutor.isShutdown()"], ["boolean", "org.apache.cassandra.concurrent.SEPExecutor.isTerminated()"], ["boolean", "org.apache.cassandra.concurrent.SEPExecutor.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["long", "org.apache.cassandra.concurrent.SEPExecutor.getPendingTasks()"], ["long", "org.apache.cassandra.concurrent.SEPExecutor.getCompletedTasks()"], ["int", "org.apache.cassandra.concurrent.SEPExecutor.getActiveCount()"], ["void", "org.apache.cassandra.concurrent.SEPWorker.run()"], ["org.apache.cassandra.concurrent.ScheduledExecutors", "org.apache.cassandra.concurrent.ScheduledExecutors()"], ["void", "org.apache.cassandra.concurrent.ScheduledExecutors.shutdownAndWait()"], ["org.apache.cassandra.concurrent.SharedExecutorPool", "org.apache.cassandra.concurrent.SharedExecutorPool(java.lang.String)"], ["org.apache.cassandra.concurrent.LocalAwareExecutorService", "org.apache.cassandra.concurrent.SharedExecutorPool.newExecutor(int, int, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.concurrent.SharedExecutorPool.shutdown()"], ["boolean", "org.apache.cassandra.concurrent.Stage$1.apply(org.apache.cassandra.concurrent.Stage)"], ["boolean", "org.apache.cassandra.concurrent.Stage$1.apply(java.lang.Object)"], ["org.apache.cassandra.concurrent.Stage[]", "org.apache.cassandra.concurrent.Stage.values()"], ["org.apache.cassandra.concurrent.Stage", "org.apache.cassandra.concurrent.Stage.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.concurrent.Stage.getJmxType()"], ["java.lang.String", "org.apache.cassandra.concurrent.Stage.getJmxName()"], ["void", "org.apache.cassandra.concurrent.StageManager$1.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)"], ["org.apache.cassandra.concurrent.StageManager$TracingExecutor", "org.apache.cassandra.concurrent.StageManager$TracingExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)"], ["void", "org.apache.cassandra.concurrent.StageManager$TracingExecutor.execute(java.lang.Runnable, org.apache.cassandra.concurrent.ExecutorLocals)"], ["void", "org.apache.cassandra.concurrent.StageManager$TracingExecutor.maybeExecuteImmediately(java.lang.Runnable)"], ["org.apache.cassandra.concurrent.StageManager", "org.apache.cassandra.concurrent.StageManager()"], ["org.apache.cassandra.concurrent.LocalAwareExecutorService", "org.apache.cassandra.concurrent.StageManager.getStage(org.apache.cassandra.concurrent.Stage)"], ["void", "org.apache.cassandra.concurrent.StageManager.shutdownNow()"], ["void", "org.apache.cassandra.concurrent.StageManager.shutdownAndWait()"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.create(java.lang.String, java.lang.String)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.create(java.lang.String, java.lang.String, boolean, boolean, boolean)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.create(java.lang.String, java.lang.String, boolean, boolean, boolean, boolean)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.createView(java.lang.String, java.lang.String)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.createDense(java.lang.String, java.lang.String, boolean, boolean)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.createSuper(java.lang.String, java.lang.String, boolean)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.withPartitioner(org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.withId(java.util.UUID)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.addPartitionKey(java.lang.String, org.apache.cassandra.db.marshal.AbstractType)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.addPartitionKey(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.db.marshal.AbstractType)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.addClusteringColumn(java.lang.String, org.apache.cassandra.db.marshal.AbstractType)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.addClusteringColumn(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.db.marshal.AbstractType)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.addRegularColumn(java.lang.String, org.apache.cassandra.db.marshal.AbstractType)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.addRegularColumn(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.db.marshal.AbstractType)"], ["boolean", "org.apache.cassandra.config.CFMetaData$Builder.hasRegulars()"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.addStaticColumn(java.lang.String, org.apache.cassandra.db.marshal.AbstractType)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.config.CFMetaData$Builder.addStaticColumn(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.db.marshal.AbstractType)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData$Builder.build()"], ["org.apache.cassandra.config.CFMetaData$DroppedColumn", "org.apache.cassandra.config.CFMetaData$DroppedColumn(java.lang.String, org.apache.cassandra.db.marshal.AbstractType<?>, long)"], ["boolean", "org.apache.cassandra.config.CFMetaData$DroppedColumn.equals(java.lang.Object)"], ["int", "org.apache.cassandra.config.CFMetaData$DroppedColumn.hashCode()"], ["java.lang.String", "org.apache.cassandra.config.CFMetaData$DroppedColumn.toString()"], ["org.apache.cassandra.config.CFMetaData$Flag[]", "org.apache.cassandra.config.CFMetaData$Flag.values()"], ["org.apache.cassandra.config.CFMetaData$Flag", "org.apache.cassandra.config.CFMetaData$Flag.valueOf(java.lang.String)"], ["org.apache.cassandra.config.CFMetaData$Serializer", "org.apache.cassandra.config.CFMetaData$Serializer()"], ["void", "org.apache.cassandra.config.CFMetaData$Serializer.serialize(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.config.CFMetaData$Serializer.serializedSize(org.apache.cassandra.config.CFMetaData, int)"], ["boolean", "org.apache.cassandra.config.CFMetaData.isSuperColumnKeyColumn(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.config.CFMetaData.isSuperColumnValueColumn(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.CFMetaData.superColumnValueColumn()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.CFMetaData.superColumnKeyColumn()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.params(org.apache.cassandra.schema.TableParams)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.bloomFilterFpChance(double)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.caching(org.apache.cassandra.schema.CachingParams)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.comment(java.lang.String)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.compaction(org.apache.cassandra.schema.CompactionParams)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.compression(org.apache.cassandra.schema.CompressionParams)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.dcLocalReadRepairChance(double)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.defaultTimeToLive(int)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.gcGraceSeconds(int)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.maxIndexInterval(int)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.memtableFlushPeriod(int)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.minIndexInterval(int)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.readRepairChance(double)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.crcCheckChance(double)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.speculativeRetry(org.apache.cassandra.schema.SpeculativeRetryParam)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.extensions(java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.droppedColumns(java.util.Map<java.nio.ByteBuffer, org.apache.cassandra.config.CFMetaData$DroppedColumn>)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.triggers(org.apache.cassandra.schema.Triggers)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.indexes(org.apache.cassandra.schema.Indexes)"], ["org.apache.cassandra.schema.Indexes", "org.apache.cassandra.config.CFMetaData.getIndexes()"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.config.CFMetaData.getAllColumnFilter()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.create(java.lang.String, java.lang.String, java.util.UUID, boolean, boolean, boolean, boolean, boolean, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.createFake(java.lang.String, java.lang.String)"], ["org.apache.cassandra.schema.Triggers", "org.apache.cassandra.config.CFMetaData.getTriggers()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.compile(java.lang.String, java.lang.String)"], ["java.util.UUID", "org.apache.cassandra.config.CFMetaData.generateLegacyCfId(java.lang.String, java.lang.String)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.reloadIndexMetadataProperties(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.asNonCompact()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.copy()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.copy(java.util.UUID)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.copy(org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.copyOpts(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.config.CFMetaData.indexColumnFamilyName(org.apache.cassandra.schema.IndexMetadata)"], ["boolean", "org.apache.cassandra.config.CFMetaData.isIndex()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.config.CFMetaData.decorateKey(java.nio.ByteBuffer)"], ["java.util.Map<java.nio.ByteBuffer, org.apache.cassandra.config.ColumnDefinition>", "org.apache.cassandra.config.CFMetaData.getColumnMetadata()"], ["java.lang.String", "org.apache.cassandra.config.CFMetaData.getParentColumnFamilyName()"], ["org.apache.cassandra.config.ReadRepairDecision", "org.apache.cassandra.config.CFMetaData.newReadRepairDecision()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.config.CFMetaData.partitionColumns()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.CFMetaData.compactValueColumn()"], ["org.apache.cassandra.db.ClusteringComparator", "org.apache.cassandra.config.CFMetaData.getKeyValidatorAsClusteringComparator()"], ["java.nio.ByteBuffer", "org.apache.cassandra.config.CFMetaData.serializePartitionKey(org.apache.cassandra.db.ClusteringPrefix)"], ["java.util.Map<java.nio.ByteBuffer, org.apache.cassandra.config.CFMetaData$DroppedColumn>", "org.apache.cassandra.config.CFMetaData.getDroppedColumns()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.CFMetaData.getDroppedColumnDefinition(java.nio.ByteBuffer)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.CFMetaData.getDroppedColumnDefinition(java.nio.ByteBuffer, boolean)"], ["boolean", "org.apache.cassandra.config.CFMetaData.equals(java.lang.Object)"], ["int", "org.apache.cassandra.config.CFMetaData.hashCode()"], ["boolean", "org.apache.cassandra.config.CFMetaData.apply(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.config.CFMetaData.validateCompatibility(org.apache.cassandra.config.CFMetaData)"], ["java.lang.Class<? extends org.apache.cassandra.db.compaction.AbstractCompactionStrategy>", "org.apache.cassandra.config.CFMetaData.createCompactionStrategy(java.lang.String)"], ["org.apache.cassandra.db.compaction.AbstractCompactionStrategy", "org.apache.cassandra.config.CFMetaData.createCompactionStrategyInstance(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.CompactionParams)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.CFMetaData.getColumnDefinition(org.apache.cassandra.cql3.ColumnIdentifier)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.CFMetaData.getColumnDefinition(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.config.CFMetaData.isNameValid(java.lang.String)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.validate()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.addColumnDefinition(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.CFMetaData.addOrReplaceColumnDefinition(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.config.CFMetaData.removeColumnDefinition(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.config.CFMetaData.recordColumnDrop(org.apache.cassandra.config.ColumnDefinition, long)"], ["void", "org.apache.cassandra.config.CFMetaData.renameColumn(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.cql3.ColumnIdentifier)"], ["boolean", "org.apache.cassandra.config.CFMetaData.isCQLTable()"], ["boolean", "org.apache.cassandra.config.CFMetaData.isCompactTable()"], ["boolean", "org.apache.cassandra.config.CFMetaData.isStaticCompactTable()"], ["boolean", "org.apache.cassandra.config.CFMetaData.isThriftCompatible()"], ["boolean", "org.apache.cassandra.config.CFMetaData.hasStaticColumns()"], ["boolean", "org.apache.cassandra.config.CFMetaData.hasCollectionColumns()"], ["boolean", "org.apache.cassandra.config.CFMetaData.hasComplexColumns()"], ["boolean", "org.apache.cassandra.config.CFMetaData.hasDroppedCollectionColumns()"], ["boolean", "org.apache.cassandra.config.CFMetaData.isSuper()"], ["boolean", "org.apache.cassandra.config.CFMetaData.isCounter()"], ["boolean", "org.apache.cassandra.config.CFMetaData.isDense()"], ["boolean", "org.apache.cassandra.config.CFMetaData.isCompound()"], ["boolean", "org.apache.cassandra.config.CFMetaData.isView()"], ["boolean", "org.apache.cassandra.config.CFMetaData.enforceStrictLiveness()"], ["org.apache.cassandra.db.Serializers", "org.apache.cassandra.config.CFMetaData.serializers()"], ["java.lang.String", "org.apache.cassandra.config.CFMetaData.toString()"], ["int", "org.apache.cassandra.config.ColumnDefinition$1.compare(org.apache.cassandra.db.rows.CellPath, org.apache.cassandra.db.rows.CellPath)"], ["int", "org.apache.cassandra.config.ColumnDefinition$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.config.ColumnDefinition$2.apply(org.apache.cassandra.config.ColumnDefinition)"], ["java.lang.Object", "org.apache.cassandra.config.ColumnDefinition$2.apply(java.lang.Object)"], ["org.apache.cassandra.config.ColumnDefinition$ClusteringOrder[]", "org.apache.cassandra.config.ColumnDefinition$ClusteringOrder.values()"], ["org.apache.cassandra.config.ColumnDefinition$ClusteringOrder", "org.apache.cassandra.config.ColumnDefinition$ClusteringOrder.valueOf(java.lang.String)"], ["org.apache.cassandra.config.ColumnDefinition$Kind[]", "org.apache.cassandra.config.ColumnDefinition$Kind.values()"], ["org.apache.cassandra.config.ColumnDefinition$Kind", "org.apache.cassandra.config.ColumnDefinition$Kind.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.config.ColumnDefinition$Kind.isPrimaryKeyKind()"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn.getIdentifier(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn.prepare(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn.rawText()"], ["java.lang.String", "org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn.toString()"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.config.ColumnDefinition$Raw$Literal", "org.apache.cassandra.config.ColumnDefinition$Raw$Literal(java.lang.String, boolean)"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.config.ColumnDefinition$Raw$Literal.getIdentifier(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition$Raw$Literal.prepare(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.config.ColumnDefinition$Raw$Literal.rawText()"], ["java.lang.String", "org.apache.cassandra.config.ColumnDefinition$Raw$Literal.toString()"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.config.ColumnDefinition$Raw$Literal.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.config.ColumnDefinition$Raw()"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.config.ColumnDefinition$Raw.forUnquoted(java.lang.String)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.config.ColumnDefinition$Raw.forQuoted(java.lang.String)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.config.ColumnDefinition$Raw.forColumn(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.config.ColumnDefinition$Raw.processesSelection()"], ["int", "org.apache.cassandra.config.ColumnDefinition$Raw.hashCode()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition$Raw.equals(java.lang.Object)"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.config.ColumnDefinition$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.partitionKeyDef(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>, int)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.partitionKeyDef(java.lang.String, java.lang.String, java.lang.String, org.apache.cassandra.db.marshal.AbstractType<?>, int)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.clusteringDef(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>, int)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.clusteringDef(java.lang.String, java.lang.String, java.lang.String, org.apache.cassandra.db.marshal.AbstractType<?>, int)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.regularDef(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.regularDef(java.lang.String, java.lang.String, java.lang.String, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.staticDef(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>, int, org.apache.cassandra.config.ColumnDefinition$Kind)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition(java.lang.String, java.lang.String, org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.db.marshal.AbstractType<?>, int, org.apache.cassandra.config.ColumnDefinition$Kind)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.copy()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.withNewName(org.apache.cassandra.cql3.ColumnIdentifier)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.config.ColumnDefinition.withNewType(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isPartitionKey()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isClusteringColumn()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isStatic()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isRegular()"], ["org.apache.cassandra.config.ColumnDefinition$ClusteringOrder", "org.apache.cassandra.config.ColumnDefinition.clusteringOrder()"], ["int", "org.apache.cassandra.config.ColumnDefinition.position()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.equals(java.lang.Object)"], ["int", "org.apache.cassandra.config.ColumnDefinition.hashCode()"], ["java.lang.String", "org.apache.cassandra.config.ColumnDefinition.toString()"], ["java.lang.String", "org.apache.cassandra.config.ColumnDefinition.debugString()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isPrimaryKeyColumn()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isPartOfCellName(boolean, boolean)"], ["int", "org.apache.cassandra.config.ColumnDefinition.compareTo(org.apache.cassandra.config.ColumnDefinition)"], ["java.util.Comparator<? super org.apache.cassandra.db.rows.Cell>", "org.apache.cassandra.config.ColumnDefinition.cellComparator()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isComplex()"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isSimple()"], ["org.apache.cassandra.db.rows.CellPath$Serializer", "org.apache.cassandra.config.ColumnDefinition.cellPathSerializer()"], ["void", "org.apache.cassandra.config.ColumnDefinition.validateCell(org.apache.cassandra.db.rows.Cell)"], ["java.lang.String", "org.apache.cassandra.config.ColumnDefinition.toCQLString(java.lang.Iterable<org.apache.cassandra.config.ColumnDefinition>)"], ["java.lang.String", "org.apache.cassandra.config.ColumnDefinition.toCQLString(java.util.Iterator<org.apache.cassandra.config.ColumnDefinition>)"], ["boolean", "org.apache.cassandra.config.ColumnDefinition.isCounterColumn()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.config.ColumnDefinition.newSelectorFactory(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.marshal.AbstractType<?>, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["int", "org.apache.cassandra.config.ColumnDefinition.compareTo(java.lang.Object)"], ["org.apache.cassandra.config.Config$CommitFailurePolicy[]", "org.apache.cassandra.config.Config$CommitFailurePolicy.values()"], ["org.apache.cassandra.config.Config$CommitFailurePolicy", "org.apache.cassandra.config.Config$CommitFailurePolicy.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config$CommitLogSync[]", "org.apache.cassandra.config.Config$CommitLogSync.values()"], ["org.apache.cassandra.config.Config$CommitLogSync", "org.apache.cassandra.config.Config$CommitLogSync.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config$DiskAccessMode[]", "org.apache.cassandra.config.Config$DiskAccessMode.values()"], ["org.apache.cassandra.config.Config$DiskAccessMode", "org.apache.cassandra.config.Config$DiskAccessMode.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config$DiskFailurePolicy[]", "org.apache.cassandra.config.Config$DiskFailurePolicy.values()"], ["org.apache.cassandra.config.Config$DiskFailurePolicy", "org.apache.cassandra.config.Config$DiskFailurePolicy.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config$DiskOptimizationStrategy[]", "org.apache.cassandra.config.Config$DiskOptimizationStrategy.values()"], ["org.apache.cassandra.config.Config$DiskOptimizationStrategy", "org.apache.cassandra.config.Config$DiskOptimizationStrategy.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config$InternodeCompression[]", "org.apache.cassandra.config.Config$InternodeCompression.values()"], ["org.apache.cassandra.config.Config$InternodeCompression", "org.apache.cassandra.config.Config$InternodeCompression.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config$MemtableAllocationType[]", "org.apache.cassandra.config.Config$MemtableAllocationType.values()"], ["org.apache.cassandra.config.Config$MemtableAllocationType", "org.apache.cassandra.config.Config$MemtableAllocationType.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config$RequestSchedulerId[]", "org.apache.cassandra.config.Config$RequestSchedulerId.values()"], ["org.apache.cassandra.config.Config$RequestSchedulerId", "org.apache.cassandra.config.Config$RequestSchedulerId.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy[]", "org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy.values()"], ["org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy", "org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy.valueOf(java.lang.String)"], ["org.apache.cassandra.config.Config", "org.apache.cassandra.config.Config()"], ["boolean", "org.apache.cassandra.config.Config.isClientMode()"], ["void", "org.apache.cassandra.config.Config.setClientMode(boolean)"], ["void", "org.apache.cassandra.config.Config.log(org.apache.cassandra.config.Config)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor$1.compare(java.net.InetAddress, java.net.InetAddress)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.config.DatabaseDescriptor", "org.apache.cassandra.config.DatabaseDescriptor()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(java.util.function.Supplier<org.apache.cassandra.config.Config>)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.toolInitialization()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.toolInitialization(boolean)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.clientInitialization()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.clientInitialization(boolean)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isClientInitialized()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isToolInitialized()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isClientOrToolInitialized()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isDaemonInitialized()"], ["org.apache.cassandra.config.Config", "org.apache.cassandra.config.DatabaseDescriptor.getRawConfig()"], ["org.apache.cassandra.config.Config", "org.apache.cassandra.config.DatabaseDescriptor.loadConfig()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applyAddressConfig()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applyAddressConfig(org.apache.cassandra.config.Config)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applyThriftHSHA()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applyEncryptionContext()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applySeedProvider()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applyInitialTokens()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applyRequestScheduler()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applySnitch()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.applyPartitioner()"], ["org.apache.cassandra.locator.IEndpointSnitch", "org.apache.cassandra.config.DatabaseDescriptor.createEndpointSnitch(boolean, java.lang.String)"], ["org.apache.cassandra.auth.IAuthenticator", "org.apache.cassandra.config.DatabaseDescriptor.getAuthenticator()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setAuthenticator(org.apache.cassandra.auth.IAuthenticator)"], ["org.apache.cassandra.auth.IAuthorizer", "org.apache.cassandra.config.DatabaseDescriptor.getAuthorizer()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setAuthorizer(org.apache.cassandra.auth.IAuthorizer)"], ["org.apache.cassandra.auth.IRoleManager", "org.apache.cassandra.config.DatabaseDescriptor.getRoleManager()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setRoleManager(org.apache.cassandra.auth.IRoleManager)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getPermissionsValidity()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setPermissionsValidity(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getPermissionsUpdateInterval()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setPermissionsUpdateInterval(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getPermissionsCacheMaxEntries()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.setPermissionsCacheMaxEntries(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getRolesValidity()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setRolesValidity(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getRolesUpdateInterval()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setRolesUpdateInterval(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getRolesCacheMaxEntries()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.setRolesCacheMaxEntries(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCredentialsValidity()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCredentialsValidity(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCredentialsUpdateInterval()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCredentialsUpdateInterval(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCredentialsCacheMaxEntries()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.setCredentialsCacheMaxEntries(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getThriftFramedTransportSize()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getMaxValueSize()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setMaxValueSize(int)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.createAllDirectories()"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.config.DatabaseDescriptor.getPartitioner()"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getPartitionerName()"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.config.DatabaseDescriptor.setPartitionerUnsafe(org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.locator.IEndpointSnitch", "org.apache.cassandra.config.DatabaseDescriptor.getEndpointSnitch()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setEndpointSnitch(org.apache.cassandra.locator.IEndpointSnitch)"], ["org.apache.cassandra.scheduler.IRequestScheduler", "org.apache.cassandra.config.DatabaseDescriptor.getRequestScheduler()"], ["org.apache.cassandra.config.RequestSchedulerOptions", "org.apache.cassandra.config.DatabaseDescriptor.getRequestSchedulerOptions()"], ["org.apache.cassandra.config.Config$RequestSchedulerId", "org.apache.cassandra.config.DatabaseDescriptor.getRequestSchedulerId()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getColumnIndexSize()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setColumnIndexSize(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getColumnIndexCacheSize()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setColumnIndexCacheSize(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeWarnThreshold()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeFailThreshold()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeFailThresholdInKB()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getUnloggedBatchAcrossPartitionsWarnThreshold()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setBatchSizeWarnThresholdInKB(int)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setBatchSizeFailThresholdInKB(int)"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getAllocateTokensForKeyspace()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getNumTokens()"], ["java.net.InetAddress", "org.apache.cassandra.config.DatabaseDescriptor.getReplaceAddress()"], ["java.util.UUID", "org.apache.cassandra.config.DatabaseDescriptor.getReplaceNode()"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getClusterName()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getStoragePort()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getSSLStoragePort()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getRpcPort()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getRpcListenBacklog()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getRpcTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setRpcTimeout(long)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getReadRpcTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setReadRpcTimeout(long)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getRangeRpcTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setRangeRpcTimeout(long)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getWriteRpcTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setWriteRpcTimeout(long)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getCounterWriteRpcTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCounterWriteRpcTimeout(long)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getCasContentionTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCasContentionTimeout(long)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getTruncateRpcTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setTruncateRpcTimeout(long)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.hasCrossNodeTimeout()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getSlowQueryTimeout()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getMinRpcTimeout()"], ["double", "org.apache.cassandra.config.DatabaseDescriptor.getPhiConvictThreshold()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setPhiConvictThreshold(double)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getConcurrentReaders()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getConcurrentWriters()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getConcurrentCounterWriters()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getConcurrentViewWriters()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getFlushWriters()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getConcurrentCompactors()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setConcurrentCompactors(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCompactionThroughputMbPerSec()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCompactionThroughputMbPerSec(int)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getCompactionLargePartitionWarningThreshold()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getMinFreeSpacePerDriveInBytes()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.getDisableSTCSInL0()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getStreamThroughputOutboundMegabitsPerSec()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getInterDCStreamThroughputOutboundMegabitsPerSec()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(int)"], ["java.lang.String[]", "org.apache.cassandra.config.DatabaseDescriptor.getAllDataFileLocations()"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getCommitLogLocation()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCommitLogLocation(java.lang.String)"], ["org.apache.cassandra.config.ParameterizedClass", "org.apache.cassandra.config.DatabaseDescriptor.getCommitLogCompression()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCommitLogCompression(org.apache.cassandra.config.ParameterizedClass)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCommitLogMaxCompressionBuffersInPool()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCommitLogMaxCompressionBuffersPerPool(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getMaxMutationSize()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getTombstoneWarnThreshold()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setTombstoneWarnThreshold(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getTombstoneFailureThreshold()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setTombstoneFailureThreshold(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSegmentSize()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSegmentSize(int)"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getSavedCachesLocation()"], ["java.net.InetAddress", "org.apache.cassandra.config.DatabaseDescriptor.getListenAddress()"], ["java.net.InetAddress", "org.apache.cassandra.config.DatabaseDescriptor.getBroadcastAddress()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.shouldListenOnBroadcastAddress()"], ["org.apache.cassandra.auth.IInternodeAuthenticator", "org.apache.cassandra.config.DatabaseDescriptor.getInternodeAuthenticator()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setInternodeAuthenticator(org.apache.cassandra.auth.IInternodeAuthenticator)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setBroadcastAddress(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.startRpc()"], ["java.net.InetAddress", "org.apache.cassandra.config.DatabaseDescriptor.getRpcAddress()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setBroadcastRpcAddress(java.net.InetAddress)"], ["java.net.InetAddress", "org.apache.cassandra.config.DatabaseDescriptor.getBroadcastRpcAddress()"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getRpcServerType()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.getRpcKeepAlive()"], ["java.lang.Integer", "org.apache.cassandra.config.DatabaseDescriptor.getRpcMinThreads()"], ["java.lang.Integer", "org.apache.cassandra.config.DatabaseDescriptor.getRpcMaxThreads()"], ["java.lang.Integer", "org.apache.cassandra.config.DatabaseDescriptor.getRpcSendBufferSize()"], ["java.lang.Integer", "org.apache.cassandra.config.DatabaseDescriptor.getRpcRecvBufferSize()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getInternodeSendBufferSize()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getInternodeRecvBufferSize()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.startNativeTransport()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportPort()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportPort(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportPortSSL()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportPortSSL(java.lang.Integer)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxThreads()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxFrameSize()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxConcurrentConnections()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportMaxConcurrentConnections(long)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportMaxConcurrentConnectionsPerIp(long)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.useNativeTransportLegacyFlusher()"], ["double", "org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSyncBatchWindow()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSyncBatchWindow(double)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSyncPeriod()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSyncPeriod(int)"], ["org.apache.cassandra.config.Config$CommitLogSync", "org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSync()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSync(org.apache.cassandra.config.Config$CommitLogSync)"], ["org.apache.cassandra.config.Config$DiskAccessMode", "org.apache.cassandra.config.DatabaseDescriptor.getDiskAccessMode()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setDiskAccessMode(org.apache.cassandra.config.Config$DiskAccessMode)"], ["org.apache.cassandra.config.Config$DiskAccessMode", "org.apache.cassandra.config.DatabaseDescriptor.getIndexAccessMode()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setIndexAccessMode(org.apache.cassandra.config.Config$DiskAccessMode)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setDiskFailurePolicy(org.apache.cassandra.config.Config$DiskFailurePolicy)"], ["org.apache.cassandra.config.Config$DiskFailurePolicy", "org.apache.cassandra.config.DatabaseDescriptor.getDiskFailurePolicy()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCommitFailurePolicy(org.apache.cassandra.config.Config$CommitFailurePolicy)"], ["org.apache.cassandra.config.Config$CommitFailurePolicy", "org.apache.cassandra.config.DatabaseDescriptor.getCommitFailurePolicy()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isSnapshotBeforeCompaction()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isAutoSnapshot()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setAutoSnapshot(boolean)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.getAutoSnapshot()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isAutoBootstrap()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setHintedHandoffEnabled(boolean)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.hintedHandoffEnabled()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.enableHintsForDC(java.lang.String)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.disableHintsForDC(java.lang.String)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setMaxHintWindow(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getMaxHintWindow()"], ["java.io.File", "org.apache.cassandra.config.DatabaseDescriptor.getHintsDirectory()"], ["java.io.File", "org.apache.cassandra.config.DatabaseDescriptor.getSerializedCachePath(org.apache.cassandra.service.CacheService$CacheType, java.lang.String, java.lang.String)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getDynamicUpdateInterval()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setDynamicUpdateInterval(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getDynamicResetInterval()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setDynamicResetInterval(int)"], ["double", "org.apache.cassandra.config.DatabaseDescriptor.getDynamicBadnessThreshold()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setDynamicBadnessThreshold(double)"], ["org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions", "org.apache.cassandra.config.DatabaseDescriptor.getServerEncryptionOptions()"], ["org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions", "org.apache.cassandra.config.DatabaseDescriptor.getClientEncryptionOptions()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getHintedHandoffThrottleInKB()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getBatchlogReplayThrottleInKB()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setHintedHandoffThrottleInKB(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getMaxHintsDeliveryThreads()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getHintsFlushPeriodInMS()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getMaxHintsFileSize()"], ["org.apache.cassandra.config.ParameterizedClass", "org.apache.cassandra.config.DatabaseDescriptor.getHintsCompression()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setHintsCompression(org.apache.cassandra.config.ParameterizedClass)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isIncrementalBackupsEnabled()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setIncrementalBackupsEnabled(boolean)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getFileCacheSizeInMB()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.getFileCacheRoundUp()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.getBufferPoolUseHeapIfExhausted()"], ["org.apache.cassandra.io.util.DiskOptimizationStrategy", "org.apache.cassandra.config.DatabaseDescriptor.getDiskOptimizationStrategy()"], ["double", "org.apache.cassandra.config.DatabaseDescriptor.getDiskOptimizationEstimatePercentile()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getTotalCommitlogSpaceInMB()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getSSTablePreempiveOpenIntervalInMB()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setSSTablePreempiveOpenIntervalInMB(int)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.getTrickleFsync()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getTrickleFsyncIntervalInKb()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheSizeInMB()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getIndexSummaryCapacityInMB()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheSavePeriod()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setKeyCacheSavePeriod(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheKeysToSave()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setKeyCacheKeysToSave(int)"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getRowCacheClassName()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getRowCacheSizeInMB()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setRowCacheSizeInMB(long)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getRowCacheSavePeriod()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setRowCacheSavePeriod(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getRowCacheKeysToSave()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheSizeInMB()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setRowCacheKeysToSave(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheSavePeriod()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCounterCacheSavePeriod(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheKeysToSave()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCounterCacheKeysToSave(int)"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setStreamingSocketTimeout(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getStreamingSocketTimeout()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getStreamingKeepAlivePeriod()"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getLocalDataCenter()"], ["org.apache.cassandra.config.Config$InternodeCompression", "org.apache.cassandra.config.DatabaseDescriptor.internodeCompression()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.getInterDCTcpNoDelay()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getMemtableHeapSpaceInMb()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getMemtableOffheapSpaceInMb()"], ["org.apache.cassandra.config.Config$MemtableAllocationType", "org.apache.cassandra.config.DatabaseDescriptor.getMemtableAllocationType()"], ["java.lang.Float", "org.apache.cassandra.config.DatabaseDescriptor.getMemtableCleanupThreshold()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getIndexSummaryResizeIntervalInMinutes()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.hasLargeAddressSpace()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getTracetypeRepairTTL()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getTracetypeQueryTTL()"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getOtcCoalescingStrategy()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getOtcCoalescingWindow()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getOtcCoalescingEnoughCoalescedMessages()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setOtcCoalescingEnoughCoalescedMessages(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getOtcBacklogExpirationInterval()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setOtcBacklogExpirationInterval(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getWindowsTimerInterval()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getPreparedStatementsCacheSizeMB()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getThriftPreparedStatementsCacheSizeMB()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.enableUserDefinedFunctions()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.enableScriptedUserDefinedFunctions()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.enableScriptedUserDefinedFunctions(boolean)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.enableUserDefinedFunctionsThreads()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getUserDefinedFunctionWarnTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setUserDefinedFunctionWarnTimeout(long)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.enableMaterializedViews()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getUserDefinedFunctionFailTimeout()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setUserDefinedFunctionFailTimeout(long)"], ["org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy", "org.apache.cassandra.config.DatabaseDescriptor.getUserFunctionTimeoutPolicy()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setUserFunctionTimeoutPolicy(org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy)"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getGCLogThreshold()"], ["org.apache.cassandra.security.EncryptionContext", "org.apache.cassandra.config.DatabaseDescriptor.getEncryptionContext()"], ["long", "org.apache.cassandra.config.DatabaseDescriptor.getGCWarnThreshold()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isCDCEnabled()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCDCEnabled(boolean)"], ["java.lang.String", "org.apache.cassandra.config.DatabaseDescriptor.getCDCLogLocation()"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCDCSpaceInMB()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setCDCSpaceInMB(int)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.getCDCDiskCheckInterval()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setEncryptionContext(org.apache.cassandra.security.EncryptionContext)"], ["int", "org.apache.cassandra.config.DatabaseDescriptor.searchConcurrencyFactor()"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.isUnsafeSystem()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setBackPressureEnabled(boolean)"], ["boolean", "org.apache.cassandra.config.DatabaseDescriptor.backPressureEnabled()"], ["void", "org.apache.cassandra.config.DatabaseDescriptor.setBackPressureStrategy(org.apache.cassandra.net.BackPressureStrategy)"], ["org.apache.cassandra.net.BackPressureStrategy", "org.apache.cassandra.config.DatabaseDescriptor.getBackPressureStrategy()"], ["org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions", "org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions()"], ["org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions$InternodeEncryption[]", "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions$InternodeEncryption.values()"], ["org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions$InternodeEncryption", "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions$InternodeEncryption.valueOf(java.lang.String)"], ["org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions", "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions()"], ["org.apache.cassandra.config.EncryptionOptions", "org.apache.cassandra.config.EncryptionOptions()"], ["org.apache.cassandra.config.ParameterizedClass", "org.apache.cassandra.config.ParameterizedClass(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.config.ParameterizedClass", "org.apache.cassandra.config.ParameterizedClass(java.util.Map<java.lang.String, ?>)"], ["boolean", "org.apache.cassandra.config.ParameterizedClass.equals(java.lang.Object)"], ["boolean", "org.apache.cassandra.config.ParameterizedClass.equals(org.apache.cassandra.config.ParameterizedClass)"], ["java.lang.String", "org.apache.cassandra.config.ParameterizedClass.toString()"], ["org.apache.cassandra.config.ReadRepairDecision[]", "org.apache.cassandra.config.ReadRepairDecision.values()"], ["org.apache.cassandra.config.ReadRepairDecision", "org.apache.cassandra.config.ReadRepairDecision.valueOf(java.lang.String)"], ["org.apache.cassandra.config.RequestSchedulerOptions", "org.apache.cassandra.config.RequestSchedulerOptions()"], ["org.apache.cassandra.config.Schema", "org.apache.cassandra.config.Schema()"], ["org.apache.cassandra.config.Schema", "org.apache.cassandra.config.Schema.loadFromDisk()"], ["org.apache.cassandra.config.Schema", "org.apache.cassandra.config.Schema.loadFromDisk(boolean)"], ["org.apache.cassandra.config.Schema", "org.apache.cassandra.config.Schema.load(java.lang.Iterable<org.apache.cassandra.schema.KeyspaceMetadata>)"], ["org.apache.cassandra.config.Schema", "org.apache.cassandra.config.Schema.load(org.apache.cassandra.schema.KeyspaceMetadata)"], ["org.apache.cassandra.db.Keyspace", "org.apache.cassandra.config.Schema.getKeyspaceInstance(java.lang.String)"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.config.Schema.getColumnFamilyStoreIncludingIndexes(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.config.Schema.getColumnFamilyStoreInstance(java.util.UUID)"], ["void", "org.apache.cassandra.config.Schema.storeKeyspaceInstance(org.apache.cassandra.db.Keyspace)"], ["org.apache.cassandra.db.Keyspace", "org.apache.cassandra.config.Schema.removeKeyspaceInstance(java.lang.String)"], ["void", "org.apache.cassandra.config.Schema.clearKeyspaceMetadata(org.apache.cassandra.schema.KeyspaceMetadata)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.Schema.getCFMetaData(java.lang.String, java.lang.String)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.Schema.getCFMetaData(java.util.UUID)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.Schema.getCFMetaData(org.apache.cassandra.io.sstable.Descriptor)"], ["int", "org.apache.cassandra.config.Schema.getNumberOfTables()"], ["org.apache.cassandra.config.ViewDefinition", "org.apache.cassandra.config.Schema.getView(java.lang.String, java.lang.String)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.config.Schema.getKSMetaData(java.lang.String)"], ["org.apache.cassandra.schema.Keyspaces", "org.apache.cassandra.config.Schema.getReplicatedKeyspaces()"], ["org.apache.cassandra.schema.Keyspaces", "org.apache.cassandra.config.Schema.getKeyspaces(java.util.Set<java.lang.String>)"], ["void", "org.apache.cassandra.config.Schema.setKeyspaceMetadata(org.apache.cassandra.schema.KeyspaceMetadata)"], ["org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>", "org.apache.cassandra.config.Schema.getCF(java.util.UUID)"], ["boolean", "org.apache.cassandra.config.Schema.hasCF(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>)"], ["java.util.UUID", "org.apache.cassandra.config.Schema.getId(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.config.Schema.load(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.config.Schema.load(org.apache.cassandra.config.ViewDefinition)"], ["void", "org.apache.cassandra.config.Schema.unload(org.apache.cassandra.config.CFMetaData)"], ["java.util.UUID", "org.apache.cassandra.config.Schema.getVersion()"], ["java.util.UUID", "org.apache.cassandra.config.Schema.getRealVersion()"], ["java.util.UUID", "org.apache.cassandra.config.Schema.getAltVersion()"], ["boolean", "org.apache.cassandra.config.Schema.isSameVersion(java.util.UUID)"], ["boolean", "org.apache.cassandra.config.Schema.isEmpty()"], ["void", "org.apache.cassandra.config.Schema.updateVersion()"], ["void", "org.apache.cassandra.config.Schema.updateVersionAndAnnounce()"], ["synchronized", "org.apache.cassandra.config.Schema.void clear()"], ["void", "org.apache.cassandra.config.Schema.addKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)"], ["void", "org.apache.cassandra.config.Schema.updateKeyspace(java.lang.String, org.apache.cassandra.schema.KeyspaceParams)"], ["void", "org.apache.cassandra.config.Schema.dropKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.config.Schema.addTable(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.config.Schema.updateTable(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.config.Schema.dropTable(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.config.Schema.addView(org.apache.cassandra.config.ViewDefinition)"], ["void", "org.apache.cassandra.config.Schema.updateView(org.apache.cassandra.config.ViewDefinition)"], ["void", "org.apache.cassandra.config.Schema.dropView(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.config.Schema.addType(org.apache.cassandra.db.marshal.UserType)"], ["void", "org.apache.cassandra.config.Schema.updateType(org.apache.cassandra.db.marshal.UserType)"], ["void", "org.apache.cassandra.config.Schema.dropType(org.apache.cassandra.db.marshal.UserType)"], ["void", "org.apache.cassandra.config.Schema.addFunction(org.apache.cassandra.cql3.functions.UDFunction)"], ["void", "org.apache.cassandra.config.Schema.updateFunction(org.apache.cassandra.cql3.functions.UDFunction)"], ["void", "org.apache.cassandra.config.Schema.dropFunction(org.apache.cassandra.cql3.functions.UDFunction)"], ["void", "org.apache.cassandra.config.Schema.addAggregate(org.apache.cassandra.cql3.functions.UDAggregate)"], ["void", "org.apache.cassandra.config.Schema.updateAggregate(org.apache.cassandra.cql3.functions.UDAggregate)"], ["void", "org.apache.cassandra.config.Schema.dropAggregate(org.apache.cassandra.cql3.functions.UDAggregate)"], ["java.lang.String", "org.apache.cassandra.config.Schema.schemaVersionToString(java.util.UUID)"], ["org.apache.cassandra.config.SchemaConstants", "org.apache.cassandra.config.SchemaConstants()"], ["boolean", "org.apache.cassandra.config.SchemaConstants.isLocalSystemKeyspace(java.lang.String)"], ["boolean", "org.apache.cassandra.config.SchemaConstants.isReplicatedSystemKeyspace(java.lang.String)"], ["org.apache.cassandra.config.TransparentDataEncryptionOptions", "org.apache.cassandra.config.TransparentDataEncryptionOptions()"], ["org.apache.cassandra.config.TransparentDataEncryptionOptions", "org.apache.cassandra.config.TransparentDataEncryptionOptions(boolean)"], ["org.apache.cassandra.config.TransparentDataEncryptionOptions", "org.apache.cassandra.config.TransparentDataEncryptionOptions(java.lang.String, java.lang.String, org.apache.cassandra.config.ParameterizedClass)"], ["org.apache.cassandra.config.TransparentDataEncryptionOptions", "org.apache.cassandra.config.TransparentDataEncryptionOptions(boolean, java.lang.String, java.lang.String, org.apache.cassandra.config.ParameterizedClass)"], ["java.lang.String", "org.apache.cassandra.config.TransparentDataEncryptionOptions.get(java.lang.String)"], ["void", "org.apache.cassandra.config.TransparentDataEncryptionOptions.remove(java.lang.String)"], ["boolean", "org.apache.cassandra.config.TransparentDataEncryptionOptions.equals(java.lang.Object)"], ["boolean", "org.apache.cassandra.config.TransparentDataEncryptionOptions.equals(org.apache.cassandra.config.TransparentDataEncryptionOptions)"], ["org.apache.cassandra.config.ViewDefinition", "org.apache.cassandra.config.ViewDefinition(org.apache.cassandra.config.ViewDefinition)"], ["org.apache.cassandra.config.ViewDefinition", "org.apache.cassandra.config.ViewDefinition(java.lang.String, java.lang.String, java.util.UUID, java.lang.String, boolean, org.apache.cassandra.cql3.statements.SelectStatement$RawStatement, java.lang.String, org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.config.ViewDefinition.includes(org.apache.cassandra.cql3.ColumnIdentifier)"], ["org.apache.cassandra.config.ViewDefinition", "org.apache.cassandra.config.ViewDefinition.copy()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.config.ViewDefinition.baseTableMetadata()"], ["boolean", "org.apache.cassandra.config.ViewDefinition.equals(java.lang.Object)"], ["int", "org.apache.cassandra.config.ViewDefinition.hashCode()"], ["java.lang.String", "org.apache.cassandra.config.ViewDefinition.toString()"], ["void", "org.apache.cassandra.config.ViewDefinition.renameColumn(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.cql3.ColumnIdentifier)"], ["void", "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker$1.set(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker$1.get(java.lang.Object)"], ["org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker", "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker()"], ["org.yaml.snakeyaml.introspector.Property", "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker.getProperty(java.lang.Class<? extends java.lang.Object>, java.lang.String)"], ["void", "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker.check()"], ["org.apache.cassandra.config.YamlConfigurationLoader", "org.apache.cassandra.config.YamlConfigurationLoader()"], ["org.apache.cassandra.config.Config", "org.apache.cassandra.config.YamlConfigurationLoader.loadConfig()"], ["org.apache.cassandra.config.Config", "org.apache.cassandra.config.YamlConfigurationLoader.loadConfig(java.net.URL)"], ["void", "org.apache.cassandra.cql3.AbstractConditions.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.AbstractConditions.isEmpty()"], ["boolean", "org.apache.cassandra.cql3.AbstractConditions.appliesToStaticColumns()"], ["boolean", "org.apache.cassandra.cql3.AbstractConditions.appliesToRegularColumns()"], ["boolean", "org.apache.cassandra.cql3.AbstractConditions.isIfExists()"], ["boolean", "org.apache.cassandra.cql3.AbstractConditions.isIfNotExists()"], ["org.apache.cassandra.cql3.AbstractMarker$INRaw", "org.apache.cassandra.cql3.AbstractMarker$INRaw(int)"], ["org.apache.cassandra.cql3.AbstractMarker", "org.apache.cassandra.cql3.AbstractMarker$INRaw.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.Term$NonTerminal", "org.apache.cassandra.cql3.AbstractMarker$INRaw.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.AbstractMarker$INRaw.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw", "org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw(int)"], ["org.apache.cassandra.cql3.Term$NonTerminal", "org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw.getText()"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AbstractMarker$Raw", "org.apache.cassandra.cql3.AbstractMarker$Raw(int)"], ["org.apache.cassandra.cql3.Term$NonTerminal", "org.apache.cassandra.cql3.AbstractMarker$Raw.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.AbstractMarker$Raw.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.AbstractMarker$Raw.getText()"], ["int", "org.apache.cassandra.cql3.AbstractMarker$Raw.bindIndex()"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.AbstractMarker$Raw.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["void", "org.apache.cassandra.cql3.AbstractMarker.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["boolean", "org.apache.cassandra.cql3.AbstractMarker.containsBindMarker()"], ["void", "org.apache.cassandra.cql3.AbstractMarker.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult[]", "org.apache.cassandra.cql3.AssignmentTestable$TestResult.values()"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.AssignmentTestable$TestResult.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.cql3.AssignmentTestable$TestResult.isAssignable()"], ["boolean", "org.apache.cassandra.cql3.AssignmentTestable$TestResult.isExactMatch()"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.AssignmentTestable$TestResult.testAll(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification, java.util.Collection<? extends org.apache.cassandra.cql3.AssignmentTestable>)"], ["org.apache.cassandra.cql3.Attributes$Raw", "org.apache.cassandra.cql3.Attributes$Raw()"], ["org.apache.cassandra.cql3.Attributes", "org.apache.cassandra.cql3.Attributes$Raw.prepare(java.lang.String, java.lang.String)"], ["org.apache.cassandra.cql3.Attributes", "org.apache.cassandra.cql3.Attributes.none()"], ["void", "org.apache.cassandra.cql3.Attributes.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.Attributes.isTimestampSet()"], ["boolean", "org.apache.cassandra.cql3.Attributes.isTimeToLiveSet()"], ["long", "org.apache.cassandra.cql3.Attributes.getTimestamp(long, org.apache.cassandra.cql3.QueryOptions)"], ["int", "org.apache.cassandra.cql3.Attributes.getTimeToLive(org.apache.cassandra.cql3.QueryOptions, org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.cql3.Attributes.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.BatchQueryOptions$WithPerStatementVariables.forStatement(int)"], ["void", "org.apache.cassandra.cql3.BatchQueryOptions$WithPerStatementVariables.prepareStatement(int, java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.BatchQueryOptions$WithoutPerStatementVariables.forStatement(int)"], ["org.apache.cassandra.cql3.BatchQueryOptions", "org.apache.cassandra.cql3.BatchQueryOptions.withoutPerStatementVariables(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.BatchQueryOptions", "org.apache.cassandra.cql3.BatchQueryOptions.withPerStatementVariables(org.apache.cassandra.cql3.QueryOptions, java.util.List<java.util.List<java.nio.ByteBuffer>>, java.util.List<java.lang.Object>)"], ["void", "org.apache.cassandra.cql3.BatchQueryOptions.prepareStatement(int, java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.cql3.BatchQueryOptions.getConsistency()"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.cql3.BatchQueryOptions.getSerialConsistency()"], ["long", "org.apache.cassandra.cql3.BatchQueryOptions.getTimestamp(org.apache.cassandra.service.QueryState)"], ["org.apache.cassandra.cql3.CFName", "org.apache.cassandra.cql3.CFName()"], ["void", "org.apache.cassandra.cql3.CFName.setColumnFamily(java.lang.String, boolean)"], ["java.lang.String", "org.apache.cassandra.cql3.CFName.getColumnFamily()"], ["java.lang.String", "org.apache.cassandra.cql3.CFName.toString()"], ["org.apache.cassandra.cql3.CQL3Type$Collection", "org.apache.cassandra.cql3.CQL3Type$Collection(org.apache.cassandra.db.marshal.CollectionType)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Collection.isCollection()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Collection.toCQLLiteral(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Collection.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.CQL3Type$Collection.hashCode()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Collection.toString()"], ["org.apache.cassandra.cql3.CQL3Type$Custom", "org.apache.cassandra.cql3.CQL3Type$Custom(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type$Custom", "org.apache.cassandra.cql3.CQL3Type$Custom(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Custom.toCQLLiteral(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Custom.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.CQL3Type$Custom.hashCode()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Custom.toString()"], ["org.apache.cassandra.cql3.CQL3Type$Native[]", "org.apache.cassandra.cql3.CQL3Type$Native.values()"], ["org.apache.cassandra.cql3.CQL3Type$Native", "org.apache.cassandra.cql3.CQL3Type$Native.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Native.toCQLLiteral(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Native.toString()"], ["void", "org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.freeze()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.supportsFreezing()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.isCollection()"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.prepare(java.lang.String, org.apache.cassandra.schema.Types)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.prepareInternal(java.lang.String, org.apache.cassandra.schema.Types)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.prepare(java.lang.String, org.apache.cassandra.schema.Types, boolean)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.referencesUserType(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.toString()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple.supportsFreezing()"], ["void", "org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple.freeze()"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple.prepare(java.lang.String, org.apache.cassandra.schema.Types)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple.referencesUserType(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple.toString()"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CQL3Type$Raw$RawType.prepare(java.lang.String, org.apache.cassandra.schema.Types)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawType.supportsFreezing()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawType.isCounter()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawType.isDuration()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Raw$RawType.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Raw$RawUT.keyspace()"], ["void", "org.apache.cassandra.cql3.CQL3Type$Raw$RawUT.freeze()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawUT.canBeNonFrozen()"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CQL3Type$Raw$RawUT.prepare(java.lang.String, org.apache.cassandra.schema.Types)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawUT.referencesUserType(java.lang.String)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawUT.supportsFreezing()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw$RawUT.isUDT()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Raw$RawUT.toString()"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CQL3Type$Raw()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw.isFrozen()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw.canBeNonFrozen()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw.isDuration()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw.isCounter()"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw.isUDT()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Raw.keyspace()"], ["void", "org.apache.cassandra.cql3.CQL3Type$Raw.freeze()"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CQL3Type$Raw.prepare(java.lang.String)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CQL3Type$Raw.prepareInternal(java.lang.String, org.apache.cassandra.schema.Types)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Raw.referencesUserType(java.lang.String)"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CQL3Type$Raw.from(org.apache.cassandra.cql3.CQL3Type)"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CQL3Type$Raw.userType(org.apache.cassandra.cql3.UTName)"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CQL3Type$Raw.map(org.apache.cassandra.cql3.CQL3Type$Raw, org.apache.cassandra.cql3.CQL3Type$Raw)"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CQL3Type$Raw.list(org.apache.cassandra.cql3.CQL3Type$Raw)"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CQL3Type$Raw.set(org.apache.cassandra.cql3.CQL3Type$Raw)"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CQL3Type$Raw.tuple(java.util.List<org.apache.cassandra.cql3.CQL3Type$Raw>)"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CQL3Type$Raw.frozen(org.apache.cassandra.cql3.CQL3Type$Raw)"], ["org.apache.cassandra.cql3.CQL3Type$Tuple", "org.apache.cassandra.cql3.CQL3Type$Tuple.create(org.apache.cassandra.db.marshal.TupleType)"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Tuple.toCQLLiteral(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$Tuple.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.CQL3Type$Tuple.hashCode()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$Tuple.toString()"], ["org.apache.cassandra.cql3.CQL3Type$UserDefined", "org.apache.cassandra.cql3.CQL3Type$UserDefined.create(org.apache.cassandra.db.marshal.UserType)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$UserDefined.isUDT()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$UserDefined.toCQLLiteral(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.cql3.CQL3Type$UserDefined.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.CQL3Type$UserDefined.hashCode()"], ["java.lang.String", "org.apache.cassandra.cql3.CQL3Type$UserDefined.toString()"], ["default", "org.apache.cassandra.cql3.CQL3Type.boolean isCollection()"], ["default", "org.apache.cassandra.cql3.CQL3Type.boolean isUDT()"], ["org.apache.cassandra.cql3.CQLFragmentParser", "org.apache.cassandra.cql3.CQLFragmentParser()"], ["<R> R", "org.apache.cassandra.cql3.CQLFragmentParser.parseAny(org.apache.cassandra.cql3.CQLFragmentParser$CQLParserFunction<R>, java.lang.String, java.lang.String)"], ["<R> R", "org.apache.cassandra.cql3.CQLFragmentParser.parseAnyUnhandled(org.apache.cassandra.cql3.CQLFragmentParser$CQLParserFunction<R>, java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.ColumnCondition$Bound.getCollectionElementValue()"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$CollectionBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$CollectionInBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$ElementAccessBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.ColumnCondition$ElementAccessBound.getCollectionElementValue()"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$ElementAccessInBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.simpleCondition(org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.simpleInCondition(java.util.List<org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.simpleInCondition(org.apache.cassandra.cql3.AbstractMarker$INRaw)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.collectionCondition(org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.collectionInCondition(org.apache.cassandra.cql3.Term$Raw, java.util.List<org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.collectionInCondition(org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.AbstractMarker$INRaw)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.udtFieldCondition(org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.udtFieldInCondition(org.apache.cassandra.cql3.FieldIdentifier, java.util.List<org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.cql3.ColumnCondition$Raw", "org.apache.cassandra.cql3.ColumnCondition$Raw.udtFieldInCondition(org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.AbstractMarker$INRaw)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition$Raw.prepare(java.lang.String, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$SimpleBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$SimpleInBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$UDTBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$UDTFieldAccessBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$UDTFieldAccessInBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.cql3.ColumnCondition$UDTInBound.appliesTo(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.ColumnCondition.value()"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.condition(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.condition(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.condition(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.inCondition(org.apache.cassandra.config.ColumnDefinition, java.util.List<org.apache.cassandra.cql3.Term>)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.inCondition(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, java.util.List<org.apache.cassandra.cql3.Term>)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.inCondition(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.FieldIdentifier, java.util.List<org.apache.cassandra.cql3.Term>)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.inCondition(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.inCondition(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term)"], ["org.apache.cassandra.cql3.ColumnCondition", "org.apache.cassandra.cql3.ColumnCondition.inCondition(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.ColumnCondition.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["void", "org.apache.cassandra.cql3.ColumnCondition.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.ColumnCondition$Bound", "org.apache.cassandra.cql3.ColumnCondition.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.ColumnConditions$Builder", "org.apache.cassandra.cql3.ColumnConditions$Builder.add(org.apache.cassandra.cql3.ColumnCondition)"], ["org.apache.cassandra.cql3.ColumnConditions", "org.apache.cassandra.cql3.ColumnConditions$Builder.build()"], ["boolean", "org.apache.cassandra.cql3.ColumnConditions.appliesToStaticColumns()"], ["boolean", "org.apache.cassandra.cql3.ColumnConditions.appliesToRegularColumns()"], ["boolean", "org.apache.cassandra.cql3.ColumnConditions.isEmpty()"], ["void", "org.apache.cassandra.cql3.ColumnConditions.addConditionsTo(org.apache.cassandra.cql3.statements.CQL3CasRequest, org.apache.cassandra.db.Clustering, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.ColumnConditions.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.ColumnConditions$Builder", "org.apache.cassandra.cql3.ColumnConditions.newBuilder()"], ["boolean", "org.apache.cassandra.cql3.ColumnConditions.isIfNotExists()"], ["boolean", "org.apache.cassandra.cql3.ColumnConditions.isIfExists()"], ["java.lang.Iterable", "org.apache.cassandra.cql3.ColumnConditions.getColumns()"], ["boolean", "org.apache.cassandra.cql3.ColumnIdentifier$InternedKey.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.ColumnIdentifier$InternedKey.hashCode()"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.ColumnIdentifier(java.lang.String, boolean)"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.ColumnIdentifier(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.ColumnIdentifier(java.nio.ByteBuffer, java.lang.String)"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.ColumnIdentifier.getInterned(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.ColumnIdentifier.getInterned(java.lang.String, boolean)"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.ColumnIdentifier.getInterned(org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer, java.lang.String)"], ["boolean", "org.apache.cassandra.cql3.ColumnIdentifier.isInterned()"], ["int", "org.apache.cassandra.cql3.ColumnIdentifier.hashCode()"], ["boolean", "org.apache.cassandra.cql3.ColumnIdentifier.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.cql3.ColumnIdentifier.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.ColumnIdentifier.toCQLString()"], ["long", "org.apache.cassandra.cql3.ColumnIdentifier.unsharedHeapSize()"], ["long", "org.apache.cassandra.cql3.ColumnIdentifier.unsharedHeapSizeExcludingData()"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.ColumnIdentifier.clone(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["int", "org.apache.cassandra.cql3.ColumnIdentifier.compareTo(org.apache.cassandra.cql3.ColumnIdentifier)"], ["java.lang.String", "org.apache.cassandra.cql3.ColumnIdentifier.maybeQuote(java.lang.String)"], ["int", "org.apache.cassandra.cql3.ColumnIdentifier.compareTo(java.lang.Object)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.ColumnSpecification(java.lang.String, java.lang.String, org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.ColumnSpecification.withAlias(org.apache.cassandra.cql3.ColumnIdentifier)"], ["boolean", "org.apache.cassandra.cql3.ColumnSpecification.isReversedType()"], ["boolean", "org.apache.cassandra.cql3.ColumnSpecification.allInSameTable(java.util.Collection<org.apache.cassandra.cql3.ColumnSpecification>)"], ["boolean", "org.apache.cassandra.cql3.ColumnSpecification.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.ColumnSpecification.hashCode()"], ["java.lang.String", "org.apache.cassandra.cql3.ColumnSpecification.toString()"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Constants$1.bind(org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.Constants$1.toString()"], ["org.apache.cassandra.cql3.Constants$Adder", "org.apache.cassandra.cql3.Constants$Adder(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Constants$Adder.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Constants$Deleter", "org.apache.cassandra.cql3.Constants$Deleter(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.cql3.Constants$Deleter.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.Constants$Literal.string(java.lang.String)"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.Constants$Literal.integer(java.lang.String)"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.Constants$Literal.floatingPoint(java.lang.String)"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.Constants$Literal.uuid(java.lang.String)"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.Constants$Literal.bool(java.lang.String)"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.Constants$Literal.hex(java.lang.String)"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.Constants$Literal.duration(java.lang.String)"], ["org.apache.cassandra.cql3.Constants$Value", "org.apache.cassandra.cql3.Constants$Literal.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Constants$Literal.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Constants$Literal.getRawText()"], ["java.lang.String", "org.apache.cassandra.cql3.Constants$Literal.getText()"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Constants$Literal.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.Constants$Marker", "org.apache.cassandra.cql3.Constants$Marker(int, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Constants$Marker.bindAndGet(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Constants$Value", "org.apache.cassandra.cql3.Constants$Marker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Constants$Marker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Constants$NullLiteral.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Constants$NullLiteral.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Constants$NullLiteral.getText()"], ["org.apache.cassandra.cql3.Constants$Setter", "org.apache.cassandra.cql3.Constants$Setter(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Constants$Setter.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Constants$Substracter", "org.apache.cassandra.cql3.Constants$Substracter(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Constants$Substracter.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Constants$Type[]", "org.apache.cassandra.cql3.Constants$Type.values()"], ["org.apache.cassandra.cql3.Constants$Type", "org.apache.cassandra.cql3.Constants$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Constants$UnsetLiteral.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Constants$UnsetLiteral.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Constants$UnsetLiteral.getText()"], ["org.apache.cassandra.cql3.Constants$Value", "org.apache.cassandra.cql3.Constants$Value(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Constants$Value.get(org.apache.cassandra.transport.ProtocolVersion)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Constants$Value.bindAndGet(org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.Constants$Value.toString()"], ["org.apache.cassandra.cql3.Constants", "org.apache.cassandra.cql3.Constants()"], ["org.apache.cassandra.cql3.CqlLexer$DFA1", "org.apache.cassandra.cql3.CqlLexer$DFA1(org.apache.cassandra.cql3.CqlLexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.CqlLexer$DFA1.getDescription()"], ["void", "org.apache.cassandra.cql3.CqlLexer.emit(org.antlr.runtime.Token)"], ["org.antlr.runtime.Token", "org.apache.cassandra.cql3.CqlLexer.nextToken()"], ["void", "org.apache.cassandra.cql3.CqlLexer.addErrorListener(org.apache.cassandra.cql3.ErrorListener)"], ["void", "org.apache.cassandra.cql3.CqlLexer.removeErrorListener(org.apache.cassandra.cql3.ErrorListener)"], ["void", "org.apache.cassandra.cql3.CqlLexer.displayRecognitionError(java.lang.String[], org.antlr.runtime.RecognitionException)"], ["org.antlr.runtime.Lexer[]", "org.apache.cassandra.cql3.CqlLexer.getDelegates()"], ["org.apache.cassandra.cql3.CqlLexer", "org.apache.cassandra.cql3.CqlLexer()"], ["org.apache.cassandra.cql3.CqlLexer", "org.apache.cassandra.cql3.CqlLexer(org.antlr.runtime.CharStream)"], ["org.apache.cassandra.cql3.CqlLexer", "org.apache.cassandra.cql3.CqlLexer(org.antlr.runtime.CharStream, org.antlr.runtime.RecognizerSharedState)"], ["java.lang.String", "org.apache.cassandra.cql3.CqlLexer.getGrammarFileName()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__183()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__184()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__185()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__186()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__187()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__188()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__189()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__190()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__191()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__192()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__193()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__194()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__195()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__196()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__197()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__198()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__199()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__200()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__201()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__202()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__203()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mT__204()"], ["void", "org.apache.cassandra.cql3.CqlLexer.mTokens()"], ["org.antlr.runtime.Parser[]", "org.apache.cassandra.cql3.CqlParser.getDelegates()"], ["org.apache.cassandra.cql3.CqlParser", "org.apache.cassandra.cql3.CqlParser(org.antlr.runtime.TokenStream)"], ["org.apache.cassandra.cql3.CqlParser", "org.apache.cassandra.cql3.CqlParser(org.antlr.runtime.TokenStream, org.antlr.runtime.RecognizerSharedState)"], ["java.lang.String[]", "org.apache.cassandra.cql3.CqlParser.getTokenNames()"], ["java.lang.String", "org.apache.cassandra.cql3.CqlParser.getGrammarFileName()"], ["void", "org.apache.cassandra.cql3.CqlParser.addErrorListener(org.apache.cassandra.cql3.ErrorListener)"], ["void", "org.apache.cassandra.cql3.CqlParser.removeErrorListener(org.apache.cassandra.cql3.ErrorListener)"], ["void", "org.apache.cassandra.cql3.CqlParser.displayRecognitionError(java.lang.String[], org.antlr.runtime.RecognitionException)"], ["void", "org.apache.cassandra.cql3.CqlParser.recover(org.antlr.runtime.IntStream, org.antlr.runtime.RecognitionException)"], ["org.apache.cassandra.cql3.statements.ParsedStatement", "org.apache.cassandra.cql3.CqlParser.query()"], ["org.apache.cassandra.cql3.RoleName", "org.apache.cassandra.cql3.CqlParser.userOrRoleName()"], ["org.apache.cassandra.cql3.selection.Selectable$Raw", "org.apache.cassandra.cql3.CqlParser.unaliasedSelector()"], ["org.apache.cassandra.cql3.statements.AlterTableStatement", "org.apache.cassandra.cql3.CqlParser.alterTableStatement()"], ["org.apache.cassandra.cql3.Operation$RawDeletion", "org.apache.cassandra.cql3.CqlParser.deleteOp()"], ["org.apache.cassandra.cql3.statements.CreateFunctionStatement", "org.apache.cassandra.cql3.CqlParser.createFunctionStatement()"], ["boolean", "org.apache.cassandra.cql3.CqlParser.cfisStatic()"], ["org.apache.cassandra.cql3.Maps$Literal", "org.apache.cassandra.cql3.CqlParser.mapLiteral()"], ["void", "org.apache.cassandra.cql3.CqlParser.userPassword(org.apache.cassandra.auth.RoleOptions)"], ["org.apache.cassandra.cql3.IndexName", "org.apache.cassandra.cql3.CqlParser.indexName()"], ["void", "org.apache.cassandra.cql3.CqlParser.shorthandColumnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.statements.CreateTriggerStatement", "org.apache.cassandra.cql3.CqlParser.createTriggerStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.roleName(org.apache.cassandra.cql3.RoleName)"], ["void", "org.apache.cassandra.cql3.CqlParser.roleOptions(org.apache.cassandra.auth.RoleOptions)"], ["void", "org.apache.cassandra.cql3.CqlParser.columnOperationDifferentiator(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.statements.RevokeRoleStatement", "org.apache.cassandra.cql3.CqlParser.revokeRoleStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.udtColumnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.FieldIdentifier)"], ["void", "org.apache.cassandra.cql3.CqlParser.cfamProperty(org.apache.cassandra.cql3.statements.CFProperties)"], ["org.apache.cassandra.cql3.statements.ListPermissionsStatement", "org.apache.cassandra.cql3.CqlParser.listPermissionsStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.usingClauseObjective(org.apache.cassandra.cql3.Attributes$Raw)"], ["org.apache.cassandra.cql3.Tuples$Literal", "org.apache.cassandra.cql3.CqlParser.tupleLiteral()"], ["org.apache.cassandra.cql3.statements.GrantPermissionsStatement", "org.apache.cassandra.cql3.CqlParser.grantPermissionsStatement()"], ["org.apache.cassandra.cql3.statements.BatchStatement$Parsed", "org.apache.cassandra.cql3.CqlParser.batchStatement()"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CqlParser.tuple_type()"], ["org.apache.cassandra.cql3.CFName", "org.apache.cassandra.cql3.CqlParser.columnFamilyName()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.CqlParser.intValue()"], ["org.apache.cassandra.cql3.statements.UseStatement", "org.apache.cassandra.cql3.CqlParser.useStatement()"], ["org.apache.cassandra.cql3.statements.DeleteStatement$Parsed", "org.apache.cassandra.cql3.CqlParser.deleteStatement()"], ["org.apache.cassandra.cql3.statements.CreateKeyspaceStatement", "org.apache.cassandra.cql3.CqlParser.createKeyspaceStatement()"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedUpdate", "org.apache.cassandra.cql3.CqlParser.updateStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.idxName(org.apache.cassandra.cql3.IndexName)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.CqlParser.term()"], ["org.apache.cassandra.cql3.FieldIdentifier", "org.apache.cassandra.cql3.CqlParser.fident()"], ["org.apache.cassandra.cql3.statements.CreateRoleStatement", "org.apache.cassandra.cql3.CqlParser.createUserStatement()"], ["org.apache.cassandra.auth.Permission", "org.apache.cassandra.cql3.CqlParser.permission()"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.CqlParser.non_type_ident()"], ["org.apache.cassandra.cql3.UserTypes$Literal", "org.apache.cassandra.cql3.CqlParser.usertypeLiteral()"], ["void", "org.apache.cassandra.cql3.CqlParser.columnCondition(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.ColumnCondition$Raw>>)"], ["org.apache.cassandra.cql3.AbstractMarker$INRaw", "org.apache.cassandra.cql3.CqlParser.inMarker()"], ["void", "org.apache.cassandra.cql3.CqlParser.cfamDefinition(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.CqlParser.setOrMapLiteral(org.apache.cassandra.cql3.Term$Raw)"], ["void", "org.apache.cassandra.cql3.CqlParser.cfamColumns(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)"], ["org.apache.cassandra.cql3.WhereClause$Builder", "org.apache.cassandra.cql3.CqlParser.whereClause()"], ["org.apache.cassandra.cql3.statements.AlterRoleStatement", "org.apache.cassandra.cql3.CqlParser.alterUserStatement()"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.CqlParser.native_type()"], ["java.lang.String", "org.apache.cassandra.cql3.CqlParser.propertyValue()"], ["org.apache.cassandra.auth.DataResource", "org.apache.cassandra.cql3.CqlParser.dataResource()"], ["org.apache.cassandra.cql3.statements.AlterTypeStatement", "org.apache.cassandra.cql3.CqlParser.alterTypeStatement()"], ["org.apache.cassandra.cql3.statements.DropTypeStatement", "org.apache.cassandra.cql3.CqlParser.dropTypeStatement()"], ["org.apache.cassandra.cql3.statements.CreateViewStatement", "org.apache.cassandra.cql3.CqlParser.createMaterializedViewStatement()"], ["org.apache.cassandra.cql3.statements.SelectStatement$RawStatement", "org.apache.cassandra.cql3.CqlParser.selectStatement()"], ["java.lang.String", "org.apache.cassandra.cql3.CqlParser.unreserved_keyword()"], ["org.apache.cassandra.cql3.Tuples$Raw", "org.apache.cassandra.cql3.CqlParser.markerForTuple()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.CqlParser.function()"], ["org.apache.cassandra.cql3.statements.ListRolesStatement", "org.apache.cassandra.cql3.CqlParser.listUsersStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.indexIdent(java.util.List<org.apache.cassandra.cql3.statements.IndexTarget$Raw>)"], ["org.apache.cassandra.auth.FunctionResource", "org.apache.cassandra.cql3.CqlParser.functionResource()"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.CqlParser.cident()"], ["java.lang.String", "org.apache.cassandra.cql3.CqlParser.unreserved_function_keyword()"], ["void", "org.apache.cassandra.cql3.CqlParser.usingClause(org.apache.cassandra.cql3.Attributes$Raw)"], ["void", "org.apache.cassandra.cql3.CqlParser.cfName(org.apache.cassandra.cql3.CFName)"], ["org.apache.cassandra.cql3.statements.CreateIndexStatement", "org.apache.cassandra.cql3.CqlParser.createIndexStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.pkDef(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)"], ["void", "org.apache.cassandra.cql3.CqlParser.property(org.apache.cassandra.cql3.statements.PropertyDefinitions)"], ["void", "org.apache.cassandra.cql3.CqlParser.usingClauseDelete(org.apache.cassandra.cql3.Attributes$Raw)"], ["java.lang.String", "org.apache.cassandra.cql3.CqlParser.allowedFunctionName()"], ["org.apache.cassandra.cql3.statements.ParsedStatement", "org.apache.cassandra.cql3.CqlParser.cqlStatement()"], ["org.apache.cassandra.cql3.statements.DropKeyspaceStatement", "org.apache.cassandra.cql3.CqlParser.dropKeyspaceStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.relation(org.apache.cassandra.cql3.WhereClause$Builder)"], ["void", "org.apache.cassandra.cql3.CqlParser.collectionColumnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsert", "org.apache.cassandra.cql3.CqlParser.normalInsertStatement(org.apache.cassandra.cql3.CFName)"], ["void", "org.apache.cassandra.cql3.CqlParser.columnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>)"], ["void", "org.apache.cassandra.cql3.CqlParser.typeColumns(org.apache.cassandra.cql3.statements.CreateTypeStatement)"], ["java.lang.String", "org.apache.cassandra.cql3.CqlParser.keyspaceName()"], ["org.apache.cassandra.cql3.functions.FunctionName", "org.apache.cassandra.cql3.CqlParser.functionName()"], ["void", "org.apache.cassandra.cql3.CqlParser.cfamOrdering(org.apache.cassandra.cql3.statements.CFProperties)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.CqlParser.schema_cident()"], ["org.apache.cassandra.cql3.statements.DropViewStatement", "org.apache.cassandra.cql3.CqlParser.dropMaterializedViewStatement()"], ["org.apache.cassandra.cql3.statements.DropFunctionStatement", "org.apache.cassandra.cql3.CqlParser.dropFunctionStatement()"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CqlParser.comparatorType()"], ["org.apache.cassandra.cql3.statements.CreateTypeStatement", "org.apache.cassandra.cql3.CqlParser.createTypeStatement()"], ["org.apache.cassandra.cql3.statements.ListRolesStatement", "org.apache.cassandra.cql3.CqlParser.listRolesStatement()"], ["org.apache.cassandra.cql3.Cql_Parser$username_return", "org.apache.cassandra.cql3.CqlParser.username()"], ["org.apache.cassandra.cql3.statements.DropIndexStatement", "org.apache.cassandra.cql3.CqlParser.dropIndexStatement()"], ["org.apache.cassandra.cql3.statements.TruncateStatement", "org.apache.cassandra.cql3.CqlParser.truncateStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.orderByClause(java.util.Map<org.apache.cassandra.config.ColumnDefinition$Raw, java.lang.Boolean>)"], ["org.apache.cassandra.cql3.statements.CreateAggregateStatement", "org.apache.cassandra.cql3.CqlParser.createAggregateStatement()"], ["org.apache.cassandra.cql3.statements.GrantRoleStatement", "org.apache.cassandra.cql3.CqlParser.grantRoleStatement()"], ["org.apache.cassandra.auth.JMXResource", "org.apache.cassandra.cql3.CqlParser.jmxResource()"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.CqlParser.ident()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.CqlParser.collectionLiteral()"], ["org.apache.cassandra.cql3.selection.RawSelector", "org.apache.cassandra.cql3.CqlParser.selector()"], ["org.apache.cassandra.cql3.statements.ModificationStatement$Parsed", "org.apache.cassandra.cql3.CqlParser.batchStatementObjective()"], ["void", "org.apache.cassandra.cql3.CqlParser.normalColumnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsertJson", "org.apache.cassandra.cql3.CqlParser.jsonInsertStatement(org.apache.cassandra.cql3.CFName)"], ["org.apache.cassandra.cql3.statements.DropRoleStatement", "org.apache.cassandra.cql3.CqlParser.dropRoleStatement()"], ["org.apache.cassandra.cql3.statements.DropTableStatement", "org.apache.cassandra.cql3.CqlParser.dropTableStatement()"], ["org.apache.cassandra.cql3.statements.RevokePermissionsStatement", "org.apache.cassandra.cql3.CqlParser.revokePermissionsStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.relationOrExpression(org.apache.cassandra.cql3.WhereClause$Builder)"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.CqlParser.noncol_ident()"], ["java.lang.String", "org.apache.cassandra.cql3.CqlParser.basic_unreserved_keyword()"], ["org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement", "org.apache.cassandra.cql3.CqlParser.createTableStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.ksName(org.apache.cassandra.cql3.KeyspaceElementName)"], ["org.apache.cassandra.cql3.statements.DropTriggerStatement", "org.apache.cassandra.cql3.CqlParser.dropTriggerStatement()"], ["org.apache.cassandra.cql3.statements.CreateRoleStatement", "org.apache.cassandra.cql3.CqlParser.createRoleStatement()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.CqlParser.value()"], ["org.apache.cassandra.cql3.statements.AlterRoleStatement", "org.apache.cassandra.cql3.CqlParser.alterRoleStatement()"], ["org.apache.cassandra.cql3.Json$Raw", "org.apache.cassandra.cql3.CqlParser.jsonValue()"], ["void", "org.apache.cassandra.cql3.CqlParser.roleOption(org.apache.cassandra.auth.RoleOptions)"], ["org.apache.cassandra.cql3.Tuples$INRaw", "org.apache.cassandra.cql3.CqlParser.inMarkerForTuple()"], ["org.apache.cassandra.cql3.statements.DropRoleStatement", "org.apache.cassandra.cql3.CqlParser.dropUserStatement()"], ["org.apache.cassandra.auth.IResource", "org.apache.cassandra.cql3.CqlParser.resource()"], ["org.apache.cassandra.cql3.statements.DropAggregateStatement", "org.apache.cassandra.cql3.CqlParser.dropAggregateStatement()"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.CqlParser.collection_type()"], ["org.apache.cassandra.cql3.UTName", "org.apache.cassandra.cql3.CqlParser.userTypeName()"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.CqlParser.constant()"], ["org.apache.cassandra.cql3.Operator", "org.apache.cassandra.cql3.CqlParser.relationType()"], ["org.apache.cassandra.cql3.statements.ModificationStatement$Parsed", "org.apache.cassandra.cql3.CqlParser.insertStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.customIndexExpression(org.apache.cassandra.cql3.WhereClause$Builder)"], ["void", "org.apache.cassandra.cql3.CqlParser.properties(org.apache.cassandra.cql3.statements.PropertyDefinitions)"], ["org.apache.cassandra.cql3.statements.AlterViewStatement", "org.apache.cassandra.cql3.CqlParser.alterMaterializedViewStatement()"], ["void", "org.apache.cassandra.cql3.CqlParser.groupByClause(java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>)"], ["org.apache.cassandra.cql3.statements.AlterKeyspaceStatement", "org.apache.cassandra.cql3.CqlParser.alterKeyspaceStatement()"], ["org.apache.cassandra.auth.RoleResource", "org.apache.cassandra.cql3.CqlParser.roleResource()"], ["org.apache.cassandra.cql3.Cql_Parser$mbean_return", "org.apache.cassandra.cql3.CqlParser.mbean()"], ["java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.ColumnCondition$Raw>>", "org.apache.cassandra.cql3.CqlParser.updateConditions()"], ["org.apache.cassandra.cql3.Cql_Lexer$DFA14", "org.apache.cassandra.cql3.Cql_Lexer$DFA14(org.apache.cassandra.cql3.Cql_Lexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer$DFA14.getDescription()"], ["org.apache.cassandra.cql3.Cql_Lexer$DFA22", "org.apache.cassandra.cql3.Cql_Lexer$DFA22(org.apache.cassandra.cql3.Cql_Lexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer$DFA22.getDescription()"], ["org.apache.cassandra.cql3.Cql_Lexer$DFA24", "org.apache.cassandra.cql3.Cql_Lexer$DFA24(org.apache.cassandra.cql3.Cql_Lexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer$DFA24.getDescription()"], ["org.apache.cassandra.cql3.Cql_Lexer$DFA28", "org.apache.cassandra.cql3.Cql_Lexer$DFA28(org.apache.cassandra.cql3.Cql_Lexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer$DFA28.getDescription()"], ["org.apache.cassandra.cql3.Cql_Lexer$DFA30", "org.apache.cassandra.cql3.Cql_Lexer$DFA30(org.apache.cassandra.cql3.Cql_Lexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer$DFA30.getDescription()"], ["org.apache.cassandra.cql3.Cql_Lexer$DFA37", "org.apache.cassandra.cql3.Cql_Lexer$DFA37(org.apache.cassandra.cql3.Cql_Lexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer$DFA37.getDescription()"], ["org.apache.cassandra.cql3.Cql_Lexer$DFA44", "org.apache.cassandra.cql3.Cql_Lexer$DFA44(org.apache.cassandra.cql3.Cql_Lexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer$DFA44.getDescription()"], ["int", "org.apache.cassandra.cql3.Cql_Lexer$DFA44.specialStateTransition(int, org.antlr.runtime.IntStream)"], ["org.apache.cassandra.cql3.Cql_Lexer$DFA9", "org.apache.cassandra.cql3.Cql_Lexer$DFA9(org.apache.cassandra.cql3.Cql_Lexer, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer$DFA9.getDescription()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.emit(org.antlr.runtime.Token)"], ["org.antlr.runtime.Token", "org.apache.cassandra.cql3.Cql_Lexer.nextToken()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.addErrorListener(org.apache.cassandra.cql3.ErrorListener)"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.removeErrorListener(org.apache.cassandra.cql3.ErrorListener)"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.displayRecognitionError(java.lang.String[], org.antlr.runtime.RecognitionException)"], ["org.antlr.runtime.Lexer[]", "org.apache.cassandra.cql3.Cql_Lexer.getDelegates()"], ["org.apache.cassandra.cql3.Cql_Lexer", "org.apache.cassandra.cql3.Cql_Lexer()"], ["org.apache.cassandra.cql3.Cql_Lexer", "org.apache.cassandra.cql3.Cql_Lexer(org.antlr.runtime.CharStream, org.apache.cassandra.cql3.CqlLexer)"], ["org.apache.cassandra.cql3.Cql_Lexer", "org.apache.cassandra.cql3.Cql_Lexer(org.antlr.runtime.CharStream, org.antlr.runtime.RecognizerSharedState, org.apache.cassandra.cql3.CqlLexer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Lexer.getGrammarFileName()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_SELECT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_FROM()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_AS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_WHERE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_AND()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_KEY()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_KEYS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ENTRIES()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_FULL()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_INSERT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_UPDATE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_WITH()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_LIMIT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_PER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_PARTITION()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_USING()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_USE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DISTINCT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_COUNT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_SET()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_BEGIN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_UNLOGGED()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_BATCH()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_APPLY()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TRUNCATE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DELETE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_IN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_CREATE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_KEYSPACE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_KEYSPACES()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_COLUMNFAMILY()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_MATERIALIZED()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_VIEW()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_INDEX()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_CUSTOM()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ON()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TO()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DROP()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_PRIMARY()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_INTO()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_VALUES()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TIMESTAMP()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TTL()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_CAST()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ALTER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_RENAME()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ADD()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TYPE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_COMPACT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_STORAGE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ORDER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_BY()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ASC()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DESC()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ALLOW()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_FILTERING()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_IF()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_IS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_CONTAINS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_GROUP()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_GRANT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ALL()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_PERMISSION()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_PERMISSIONS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_OF()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_REVOKE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_MODIFY()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_AUTHORIZE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DESCRIBE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_EXECUTE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_NORECURSIVE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_MBEAN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_MBEANS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_USER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_USERS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ROLE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ROLES()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_SUPERUSER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_NOSUPERUSER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_PASSWORD()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_LOGIN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_NOLOGIN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_OPTIONS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_CLUSTERING()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_ASCII()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_BIGINT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_BLOB()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_BOOLEAN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_COUNTER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DECIMAL()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DOUBLE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DURATION()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_FLOAT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_INET()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_INT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_SMALLINT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TINYINT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TEXT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_UUID()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_VARCHAR()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_VARINT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TIMEUUID()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TOKEN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_WRITETIME()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DATE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TIME()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_NULL()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_NOT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_EXISTS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_MAP()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_LIST()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_NAN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_INFINITY()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TUPLE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_TRIGGER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_STATIC()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_FROZEN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_FUNCTION()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_FUNCTIONS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_AGGREGATE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_SFUNC()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_STYPE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_FINALFUNC()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_INITCOND()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_RETURNS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_CALLED()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_INPUT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_LANGUAGE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_OR()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_REPLACE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_JSON()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_DEFAULT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_UNSET()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK_LIKE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mA()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mB()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mC()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mD()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mE()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mF()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mG()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mH()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mI()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mJ()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mK()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mL()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mM()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mO()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mP()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mQ()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mR()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mU()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mV()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mW()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mX()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mY()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mZ()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mSTRING_LITERAL()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mQUOTED_NAME()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mEMPTY_QUOTED_NAME()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mDIGIT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mLETTER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mHEX()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mEXPONENT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mDURATION_UNIT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mINTEGER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mQMARK()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mFLOAT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mBOOLEAN()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mDURATION()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mIDENT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mHEXNUMBER()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mUUID()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mWS()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mCOMMENT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mMULTILINE_COMMENT()"], ["void", "org.apache.cassandra.cql3.Cql_Lexer.mTokens()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA1", "org.apache.cassandra.cql3.Cql_Parser$DFA1(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA1.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA15", "org.apache.cassandra.cql3.Cql_Parser$DFA15(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA15.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA154", "org.apache.cassandra.cql3.Cql_Parser$DFA154(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA154.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA155", "org.apache.cassandra.cql3.Cql_Parser$DFA155(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA155.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA173", "org.apache.cassandra.cql3.Cql_Parser$DFA173(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA173.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA175", "org.apache.cassandra.cql3.Cql_Parser$DFA175(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA175.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA177", "org.apache.cassandra.cql3.Cql_Parser$DFA177(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA177.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA179", "org.apache.cassandra.cql3.Cql_Parser$DFA179(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA179.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA182", "org.apache.cassandra.cql3.Cql_Parser$DFA182(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA182.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA190", "org.apache.cassandra.cql3.Cql_Parser$DFA190(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA190.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA195", "org.apache.cassandra.cql3.Cql_Parser$DFA195(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA195.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA196", "org.apache.cassandra.cql3.Cql_Parser$DFA196(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA196.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA205", "org.apache.cassandra.cql3.Cql_Parser$DFA205(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA205.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$DFA44", "org.apache.cassandra.cql3.Cql_Parser$DFA44(org.apache.cassandra.cql3.Cql_Parser, org.antlr.runtime.BaseRecognizer)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser$DFA44.getDescription()"], ["org.apache.cassandra.cql3.Cql_Parser$mbean_return", "org.apache.cassandra.cql3.Cql_Parser$mbean_return()"], ["org.apache.cassandra.cql3.Cql_Parser$username_return", "org.apache.cassandra.cql3.Cql_Parser$username_return()"], ["org.antlr.runtime.Parser[]", "org.apache.cassandra.cql3.Cql_Parser.getDelegates()"], ["org.apache.cassandra.cql3.Cql_Parser", "org.apache.cassandra.cql3.Cql_Parser(org.antlr.runtime.TokenStream, org.apache.cassandra.cql3.CqlParser)"], ["org.apache.cassandra.cql3.Cql_Parser", "org.apache.cassandra.cql3.Cql_Parser(org.antlr.runtime.TokenStream, org.antlr.runtime.RecognizerSharedState, org.apache.cassandra.cql3.CqlParser)"], ["java.lang.String[]", "org.apache.cassandra.cql3.Cql_Parser.getTokenNames()"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser.getGrammarFileName()"], ["org.apache.cassandra.cql3.AbstractMarker$Raw", "org.apache.cassandra.cql3.Cql_Parser.newBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)"], ["org.apache.cassandra.cql3.AbstractMarker$INRaw", "org.apache.cassandra.cql3.Cql_Parser.newINBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)"], ["org.apache.cassandra.cql3.Tuples$Raw", "org.apache.cassandra.cql3.Cql_Parser.newTupleBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)"], ["org.apache.cassandra.cql3.Tuples$INRaw", "org.apache.cassandra.cql3.Cql_Parser.newTupleINBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)"], ["org.apache.cassandra.cql3.Json$Marker", "org.apache.cassandra.cql3.Cql_Parser.newJsonBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.addErrorListener(org.apache.cassandra.cql3.ErrorListener)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.removeErrorListener(org.apache.cassandra.cql3.ErrorListener)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.displayRecognitionError(java.lang.String[], org.antlr.runtime.RecognitionException)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.cql3.Cql_Parser.convertPropertyMap(org.apache.cassandra.cql3.Maps$Literal)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.addRawUpdate(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser.canonicalizeObjectName(java.lang.String, boolean)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.recover(org.antlr.runtime.IntStream, org.antlr.runtime.RecognitionException)"], ["org.apache.cassandra.cql3.statements.ParsedStatement", "org.apache.cassandra.cql3.Cql_Parser.cqlStatement()"], ["org.apache.cassandra.cql3.statements.UseStatement", "org.apache.cassandra.cql3.Cql_Parser.useStatement()"], ["org.apache.cassandra.cql3.statements.SelectStatement$RawStatement", "org.apache.cassandra.cql3.Cql_Parser.selectStatement()"], ["org.apache.cassandra.cql3.selection.RawSelector", "org.apache.cassandra.cql3.Cql_Parser.selector()"], ["org.apache.cassandra.cql3.selection.Selectable$Raw", "org.apache.cassandra.cql3.Cql_Parser.unaliasedSelector()"], ["org.apache.cassandra.cql3.WhereClause$Builder", "org.apache.cassandra.cql3.Cql_Parser.whereClause()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.relationOrExpression(org.apache.cassandra.cql3.WhereClause$Builder)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.customIndexExpression(org.apache.cassandra.cql3.WhereClause$Builder)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.orderByClause(java.util.Map<org.apache.cassandra.config.ColumnDefinition$Raw, java.lang.Boolean>)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.groupByClause(java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>)"], ["org.apache.cassandra.cql3.statements.ModificationStatement$Parsed", "org.apache.cassandra.cql3.Cql_Parser.insertStatement()"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsert", "org.apache.cassandra.cql3.Cql_Parser.normalInsertStatement(org.apache.cassandra.cql3.CFName)"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsertJson", "org.apache.cassandra.cql3.Cql_Parser.jsonInsertStatement(org.apache.cassandra.cql3.CFName)"], ["org.apache.cassandra.cql3.Json$Raw", "org.apache.cassandra.cql3.Cql_Parser.jsonValue()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.usingClause(org.apache.cassandra.cql3.Attributes$Raw)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.usingClauseObjective(org.apache.cassandra.cql3.Attributes$Raw)"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedUpdate", "org.apache.cassandra.cql3.Cql_Parser.updateStatement()"], ["java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.ColumnCondition$Raw>>", "org.apache.cassandra.cql3.Cql_Parser.updateConditions()"], ["org.apache.cassandra.cql3.statements.DeleteStatement$Parsed", "org.apache.cassandra.cql3.Cql_Parser.deleteStatement()"], ["org.apache.cassandra.cql3.Operation$RawDeletion", "org.apache.cassandra.cql3.Cql_Parser.deleteOp()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.usingClauseDelete(org.apache.cassandra.cql3.Attributes$Raw)"], ["org.apache.cassandra.cql3.statements.BatchStatement$Parsed", "org.apache.cassandra.cql3.Cql_Parser.batchStatement()"], ["org.apache.cassandra.cql3.statements.ModificationStatement$Parsed", "org.apache.cassandra.cql3.Cql_Parser.batchStatementObjective()"], ["org.apache.cassandra.cql3.statements.CreateAggregateStatement", "org.apache.cassandra.cql3.Cql_Parser.createAggregateStatement()"], ["org.apache.cassandra.cql3.statements.DropAggregateStatement", "org.apache.cassandra.cql3.Cql_Parser.dropAggregateStatement()"], ["org.apache.cassandra.cql3.statements.CreateFunctionStatement", "org.apache.cassandra.cql3.Cql_Parser.createFunctionStatement()"], ["org.apache.cassandra.cql3.statements.DropFunctionStatement", "org.apache.cassandra.cql3.Cql_Parser.dropFunctionStatement()"], ["org.apache.cassandra.cql3.statements.CreateKeyspaceStatement", "org.apache.cassandra.cql3.Cql_Parser.createKeyspaceStatement()"], ["org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement", "org.apache.cassandra.cql3.Cql_Parser.createTableStatement()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.cfamDefinition(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.cfamColumns(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.pkDef(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.cfamProperty(org.apache.cassandra.cql3.statements.CFProperties)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.cfamOrdering(org.apache.cassandra.cql3.statements.CFProperties)"], ["org.apache.cassandra.cql3.statements.CreateTypeStatement", "org.apache.cassandra.cql3.Cql_Parser.createTypeStatement()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.typeColumns(org.apache.cassandra.cql3.statements.CreateTypeStatement)"], ["org.apache.cassandra.cql3.statements.CreateIndexStatement", "org.apache.cassandra.cql3.Cql_Parser.createIndexStatement()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.indexIdent(java.util.List<org.apache.cassandra.cql3.statements.IndexTarget$Raw>)"], ["org.apache.cassandra.cql3.statements.CreateViewStatement", "org.apache.cassandra.cql3.Cql_Parser.createMaterializedViewStatement()"], ["org.apache.cassandra.cql3.statements.CreateTriggerStatement", "org.apache.cassandra.cql3.Cql_Parser.createTriggerStatement()"], ["org.apache.cassandra.cql3.statements.DropTriggerStatement", "org.apache.cassandra.cql3.Cql_Parser.dropTriggerStatement()"], ["org.apache.cassandra.cql3.statements.AlterKeyspaceStatement", "org.apache.cassandra.cql3.Cql_Parser.alterKeyspaceStatement()"], ["org.apache.cassandra.cql3.statements.AlterTableStatement", "org.apache.cassandra.cql3.Cql_Parser.alterTableStatement()"], ["boolean", "org.apache.cassandra.cql3.Cql_Parser.cfisStatic()"], ["org.apache.cassandra.cql3.statements.AlterViewStatement", "org.apache.cassandra.cql3.Cql_Parser.alterMaterializedViewStatement()"], ["org.apache.cassandra.cql3.statements.AlterTypeStatement", "org.apache.cassandra.cql3.Cql_Parser.alterTypeStatement()"], ["org.apache.cassandra.cql3.statements.DropKeyspaceStatement", "org.apache.cassandra.cql3.Cql_Parser.dropKeyspaceStatement()"], ["org.apache.cassandra.cql3.statements.DropTableStatement", "org.apache.cassandra.cql3.Cql_Parser.dropTableStatement()"], ["org.apache.cassandra.cql3.statements.DropTypeStatement", "org.apache.cassandra.cql3.Cql_Parser.dropTypeStatement()"], ["org.apache.cassandra.cql3.statements.DropIndexStatement", "org.apache.cassandra.cql3.Cql_Parser.dropIndexStatement()"], ["org.apache.cassandra.cql3.statements.DropViewStatement", "org.apache.cassandra.cql3.Cql_Parser.dropMaterializedViewStatement()"], ["org.apache.cassandra.cql3.statements.TruncateStatement", "org.apache.cassandra.cql3.Cql_Parser.truncateStatement()"], ["org.apache.cassandra.cql3.statements.GrantPermissionsStatement", "org.apache.cassandra.cql3.Cql_Parser.grantPermissionsStatement()"], ["org.apache.cassandra.cql3.statements.RevokePermissionsStatement", "org.apache.cassandra.cql3.Cql_Parser.revokePermissionsStatement()"], ["org.apache.cassandra.cql3.statements.GrantRoleStatement", "org.apache.cassandra.cql3.Cql_Parser.grantRoleStatement()"], ["org.apache.cassandra.cql3.statements.RevokeRoleStatement", "org.apache.cassandra.cql3.Cql_Parser.revokeRoleStatement()"], ["org.apache.cassandra.cql3.statements.ListPermissionsStatement", "org.apache.cassandra.cql3.Cql_Parser.listPermissionsStatement()"], ["org.apache.cassandra.auth.Permission", "org.apache.cassandra.cql3.Cql_Parser.permission()"], ["org.apache.cassandra.auth.IResource", "org.apache.cassandra.cql3.Cql_Parser.resource()"], ["org.apache.cassandra.auth.DataResource", "org.apache.cassandra.cql3.Cql_Parser.dataResource()"], ["org.apache.cassandra.auth.JMXResource", "org.apache.cassandra.cql3.Cql_Parser.jmxResource()"], ["org.apache.cassandra.auth.RoleResource", "org.apache.cassandra.cql3.Cql_Parser.roleResource()"], ["org.apache.cassandra.auth.FunctionResource", "org.apache.cassandra.cql3.Cql_Parser.functionResource()"], ["org.apache.cassandra.cql3.statements.CreateRoleStatement", "org.apache.cassandra.cql3.Cql_Parser.createUserStatement()"], ["org.apache.cassandra.cql3.statements.AlterRoleStatement", "org.apache.cassandra.cql3.Cql_Parser.alterUserStatement()"], ["org.apache.cassandra.cql3.statements.DropRoleStatement", "org.apache.cassandra.cql3.Cql_Parser.dropUserStatement()"], ["org.apache.cassandra.cql3.statements.ListRolesStatement", "org.apache.cassandra.cql3.Cql_Parser.listUsersStatement()"], ["org.apache.cassandra.cql3.statements.CreateRoleStatement", "org.apache.cassandra.cql3.Cql_Parser.createRoleStatement()"], ["org.apache.cassandra.cql3.statements.AlterRoleStatement", "org.apache.cassandra.cql3.Cql_Parser.alterRoleStatement()"], ["org.apache.cassandra.cql3.statements.DropRoleStatement", "org.apache.cassandra.cql3.Cql_Parser.dropRoleStatement()"], ["org.apache.cassandra.cql3.statements.ListRolesStatement", "org.apache.cassandra.cql3.Cql_Parser.listRolesStatement()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.roleOptions(org.apache.cassandra.auth.RoleOptions)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.roleOption(org.apache.cassandra.auth.RoleOptions)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.userPassword(org.apache.cassandra.auth.RoleOptions)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.Cql_Parser.cident()"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.Cql_Parser.schema_cident()"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.Cql_Parser.ident()"], ["org.apache.cassandra.cql3.FieldIdentifier", "org.apache.cassandra.cql3.Cql_Parser.fident()"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.Cql_Parser.noncol_ident()"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser.keyspaceName()"], ["org.apache.cassandra.cql3.IndexName", "org.apache.cassandra.cql3.Cql_Parser.indexName()"], ["org.apache.cassandra.cql3.CFName", "org.apache.cassandra.cql3.Cql_Parser.columnFamilyName()"], ["org.apache.cassandra.cql3.UTName", "org.apache.cassandra.cql3.Cql_Parser.userTypeName()"], ["org.apache.cassandra.cql3.RoleName", "org.apache.cassandra.cql3.Cql_Parser.userOrRoleName()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.ksName(org.apache.cassandra.cql3.KeyspaceElementName)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.cfName(org.apache.cassandra.cql3.CFName)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.idxName(org.apache.cassandra.cql3.IndexName)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.roleName(org.apache.cassandra.cql3.RoleName)"], ["org.apache.cassandra.cql3.Constants$Literal", "org.apache.cassandra.cql3.Cql_Parser.constant()"], ["org.apache.cassandra.cql3.Maps$Literal", "org.apache.cassandra.cql3.Cql_Parser.mapLiteral()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Cql_Parser.setOrMapLiteral(org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Cql_Parser.collectionLiteral()"], ["org.apache.cassandra.cql3.UserTypes$Literal", "org.apache.cassandra.cql3.Cql_Parser.usertypeLiteral()"], ["org.apache.cassandra.cql3.Tuples$Literal", "org.apache.cassandra.cql3.Cql_Parser.tupleLiteral()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Cql_Parser.value()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Cql_Parser.intValue()"], ["org.apache.cassandra.cql3.functions.FunctionName", "org.apache.cassandra.cql3.Cql_Parser.functionName()"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser.allowedFunctionName()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Cql_Parser.function()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Cql_Parser.term()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.columnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.columnOperationDifferentiator(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.normalColumnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.shorthandColumnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.collectionColumnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Term$Raw)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.udtColumnOperation(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.FieldIdentifier)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.columnCondition(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.ColumnCondition$Raw>>)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.properties(org.apache.cassandra.cql3.statements.PropertyDefinitions)"], ["void", "org.apache.cassandra.cql3.Cql_Parser.property(org.apache.cassandra.cql3.statements.PropertyDefinitions)"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser.propertyValue()"], ["org.apache.cassandra.cql3.Operator", "org.apache.cassandra.cql3.Cql_Parser.relationType()"], ["void", "org.apache.cassandra.cql3.Cql_Parser.relation(org.apache.cassandra.cql3.WhereClause$Builder)"], ["org.apache.cassandra.cql3.AbstractMarker$INRaw", "org.apache.cassandra.cql3.Cql_Parser.inMarker()"], ["org.apache.cassandra.cql3.Tuples$Raw", "org.apache.cassandra.cql3.Cql_Parser.markerForTuple()"], ["org.apache.cassandra.cql3.Tuples$INRaw", "org.apache.cassandra.cql3.Cql_Parser.inMarkerForTuple()"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.Cql_Parser.comparatorType()"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.cql3.Cql_Parser.native_type()"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.Cql_Parser.collection_type()"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.Cql_Parser.tuple_type()"], ["org.apache.cassandra.cql3.Cql_Parser$username_return", "org.apache.cassandra.cql3.Cql_Parser.username()"], ["org.apache.cassandra.cql3.Cql_Parser$mbean_return", "org.apache.cassandra.cql3.Cql_Parser.mbean()"], ["org.apache.cassandra.cql3.ColumnIdentifier", "org.apache.cassandra.cql3.Cql_Parser.non_type_ident()"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser.unreserved_keyword()"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser.unreserved_function_keyword()"], ["java.lang.String", "org.apache.cassandra.cql3.Cql_Parser.basic_unreserved_keyword()"], ["org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler", "org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.process(java.lang.String, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, java.util.Map<java.lang.String, java.nio.ByteBuffer>, long)"], ["org.apache.cassandra.transport.messages.ResultMessage$Prepared", "org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.prepare(java.lang.String, org.apache.cassandra.service.QueryState, java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.getPrepared(org.apache.cassandra.utils.MD5Digest)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.getPreparedForThrift(java.lang.Integer)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.processPrepared(org.apache.cassandra.cql3.CQLStatement, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, java.util.Map<java.lang.String, java.nio.ByteBuffer>, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.processBatch(org.apache.cassandra.cql3.statements.BatchStatement, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.BatchQueryOptions, java.util.Map<java.lang.String, java.nio.ByteBuffer>, long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder(boolean)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addYears(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addMonths(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addWeeks(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addDays(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addHours(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addMinutes(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addSeconds(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addMillis(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addMicros(long)"], ["org.apache.cassandra.cql3.Duration$Builder", "org.apache.cassandra.cql3.Duration$Builder.addNanos(long)"], ["org.apache.cassandra.cql3.Duration", "org.apache.cassandra.cql3.Duration$Builder.build()"], ["org.apache.cassandra.cql3.Duration", "org.apache.cassandra.cql3.Duration.newInstance(int, int, long)"], ["org.apache.cassandra.cql3.Duration", "org.apache.cassandra.cql3.Duration.from(java.lang.String)"], ["int", "org.apache.cassandra.cql3.Duration.getMonths()"], ["int", "org.apache.cassandra.cql3.Duration.getDays()"], ["long", "org.apache.cassandra.cql3.Duration.getNanoseconds()"], ["int", "org.apache.cassandra.cql3.Duration.hashCode()"], ["boolean", "org.apache.cassandra.cql3.Duration.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.cql3.Duration.toString()"], ["org.apache.cassandra.cql3.ErrorCollector", "org.apache.cassandra.cql3.ErrorCollector(java.lang.String)"], ["void", "org.apache.cassandra.cql3.ErrorCollector.syntaxError(org.antlr.runtime.BaseRecognizer, java.lang.String[], org.antlr.runtime.RecognitionException)"], ["void", "org.apache.cassandra.cql3.ErrorCollector.syntaxError(org.antlr.runtime.BaseRecognizer, java.lang.String)"], ["void", "org.apache.cassandra.cql3.ErrorCollector.throwFirstSyntaxError()"], ["org.apache.cassandra.cql3.FieldIdentifier", "org.apache.cassandra.cql3.FieldIdentifier(java.nio.ByteBuffer)"], ["org.apache.cassandra.cql3.FieldIdentifier", "org.apache.cassandra.cql3.FieldIdentifier.forUnquoted(java.lang.String)"], ["org.apache.cassandra.cql3.FieldIdentifier", "org.apache.cassandra.cql3.FieldIdentifier.forQuoted(java.lang.String)"], ["org.apache.cassandra.cql3.FieldIdentifier", "org.apache.cassandra.cql3.FieldIdentifier.forInternalString(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.FieldIdentifier.toString()"], ["int", "org.apache.cassandra.cql3.FieldIdentifier.hashCode()"], ["boolean", "org.apache.cassandra.cql3.FieldIdentifier.equals(java.lang.Object)"], ["void", "org.apache.cassandra.cql3.IfExistsCondition.addConditionsTo(org.apache.cassandra.cql3.statements.CQL3CasRequest, org.apache.cassandra.db.Clustering, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.IfExistsCondition.isIfExists()"], ["void", "org.apache.cassandra.cql3.IfNotExistsCondition.addConditionsTo(org.apache.cassandra.cql3.statements.CQL3CasRequest, org.apache.cassandra.db.Clustering, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.IfNotExistsCondition.isIfNotExists()"], ["org.apache.cassandra.cql3.IndexName", "org.apache.cassandra.cql3.IndexName()"], ["void", "org.apache.cassandra.cql3.IndexName.setIndex(java.lang.String, boolean)"], ["java.lang.String", "org.apache.cassandra.cql3.IndexName.getIdx()"], ["org.apache.cassandra.cql3.CFName", "org.apache.cassandra.cql3.IndexName.getCfName()"], ["java.lang.String", "org.apache.cassandra.cql3.IndexName.toString()"], ["org.apache.cassandra.cql3.Json$ColumnValue", "org.apache.cassandra.cql3.Json$ColumnValue(org.apache.cassandra.cql3.Term)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Json$ColumnValue.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Json$ColumnValue.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Json$ColumnValue.getText()"], ["org.apache.cassandra.cql3.Json$DelayedColumnValue", "org.apache.cassandra.cql3.Json$DelayedColumnValue(org.apache.cassandra.cql3.Json$PreparedMarker, org.apache.cassandra.config.ColumnDefinition, boolean)"], ["void", "org.apache.cassandra.cql3.Json$DelayedColumnValue.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["boolean", "org.apache.cassandra.cql3.Json$DelayedColumnValue.containsBindMarker()"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Json$DelayedColumnValue.bind(org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.Json$DelayedColumnValue.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.Json$Literal", "org.apache.cassandra.cql3.Json$Literal(java.lang.String)"], ["org.apache.cassandra.cql3.Json$Prepared", "org.apache.cassandra.cql3.Json$Literal.prepareAndCollectMarkers(org.apache.cassandra.config.CFMetaData, java.util.Collection<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Json$Marker", "org.apache.cassandra.cql3.Json$Marker(int)"], ["org.apache.cassandra.cql3.Json$Prepared", "org.apache.cassandra.cql3.Json$Marker.prepareAndCollectMarkers(org.apache.cassandra.config.CFMetaData, java.util.Collection<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Json$Prepared", "org.apache.cassandra.cql3.Json$Prepared()"], ["org.apache.cassandra.cql3.Json$PreparedLiteral", "org.apache.cassandra.cql3.Json$PreparedLiteral(java.util.Map<org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.cql3.Term>)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Json$PreparedLiteral.getRawTermForColumn(org.apache.cassandra.config.ColumnDefinition, boolean)"], ["org.apache.cassandra.cql3.Json$PreparedMarker", "org.apache.cassandra.cql3.Json$PreparedMarker(int, java.util.Collection<org.apache.cassandra.config.ColumnDefinition>)"], ["org.apache.cassandra.cql3.Json$RawDelayedColumnValue", "org.apache.cassandra.cql3.Json$PreparedMarker.getRawTermForColumn(org.apache.cassandra.config.ColumnDefinition, boolean)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Json$PreparedMarker.getRawTermForColumn(org.apache.cassandra.config.ColumnDefinition, boolean)"], ["org.apache.cassandra.cql3.Json$RawDelayedColumnValue", "org.apache.cassandra.cql3.Json$RawDelayedColumnValue(org.apache.cassandra.cql3.Json$PreparedMarker, org.apache.cassandra.config.ColumnDefinition, boolean)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Json$RawDelayedColumnValue.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Json$RawDelayedColumnValue.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Json$RawDelayedColumnValue.getText()"], ["org.apache.cassandra.cql3.Json", "org.apache.cassandra.cql3.Json()"], ["java.lang.String", "org.apache.cassandra.cql3.Json.quoteAsJsonString(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.cql3.Json.decodeJson(java.lang.String)"], ["java.util.Map<org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.cql3.Term>", "org.apache.cassandra.cql3.Json.parseJson(java.lang.String, java.util.Collection<org.apache.cassandra.config.ColumnDefinition>)"], ["void", "org.apache.cassandra.cql3.Json.handleCaseSensitivity(java.util.Map<java.lang.String, java.lang.Object>)"], ["void", "org.apache.cassandra.cql3.KeyspaceElementName.setKeyspace(java.lang.String, boolean)"], ["boolean", "org.apache.cassandra.cql3.KeyspaceElementName.hasKeyspace()"], ["java.lang.String", "org.apache.cassandra.cql3.KeyspaceElementName.getKeyspace()"], ["java.lang.String", "org.apache.cassandra.cql3.KeyspaceElementName.toString()"], ["org.apache.cassandra.cql3.Lists$Appender", "org.apache.cassandra.cql3.Lists$Appender(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Lists$Appender.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Lists$DelayedValue", "org.apache.cassandra.cql3.Lists$DelayedValue(java.util.List<org.apache.cassandra.cql3.Term>)"], ["boolean", "org.apache.cassandra.cql3.Lists$DelayedValue.containsBindMarker()"], ["void", "org.apache.cassandra.cql3.Lists$DelayedValue.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Lists$DelayedValue.bind(org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.Lists$DelayedValue.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.Lists$Discarder", "org.apache.cassandra.cql3.Lists$Discarder(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["boolean", "org.apache.cassandra.cql3.Lists$Discarder.requiresRead()"], ["void", "org.apache.cassandra.cql3.Lists$Discarder.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Lists$DiscarderByIndex", "org.apache.cassandra.cql3.Lists$DiscarderByIndex(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["boolean", "org.apache.cassandra.cql3.Lists$DiscarderByIndex.requiresRead()"], ["void", "org.apache.cassandra.cql3.Lists$DiscarderByIndex.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Lists$Literal", "org.apache.cassandra.cql3.Lists$Literal(java.util.List<org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Lists$Literal.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Lists$Literal.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Lists$Literal.getText()"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Lists$Marker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Lists$Prepender", "org.apache.cassandra.cql3.Lists$Prepender(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Lists$Prepender.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Lists$Setter", "org.apache.cassandra.cql3.Lists$Setter(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Lists$Setter.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Lists$SetterByIndex", "org.apache.cassandra.cql3.Lists$SetterByIndex(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term)"], ["boolean", "org.apache.cassandra.cql3.Lists$SetterByIndex.requiresRead()"], ["void", "org.apache.cassandra.cql3.Lists$SetterByIndex.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["void", "org.apache.cassandra.cql3.Lists$SetterByIndex.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Lists$Value", "org.apache.cassandra.cql3.Lists$Value(java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.Lists$Value", "org.apache.cassandra.cql3.Lists$Value.fromSerialized(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.ListType, org.apache.cassandra.transport.ProtocolVersion)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Lists$Value.get(org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.cql3.Lists$Value.equals(org.apache.cassandra.db.marshal.ListType, org.apache.cassandra.cql3.Lists$Value)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.Lists.indexSpecOf(org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.Lists.valueSpecOf(org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.Maps$AdderByKey", "org.apache.cassandra.cql3.Maps$AdderByKey(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Maps$AdderByKey.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["void", "org.apache.cassandra.cql3.Maps$AdderByKey.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Maps$DelayedValue", "org.apache.cassandra.cql3.Maps$DelayedValue(java.util.Comparator<java.nio.ByteBuffer>, java.util.Map<org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term>)"], ["boolean", "org.apache.cassandra.cql3.Maps$DelayedValue.containsBindMarker()"], ["void", "org.apache.cassandra.cql3.Maps$DelayedValue.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Maps$DelayedValue.bind(org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.Maps$DelayedValue.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.Maps$DiscarderByKey", "org.apache.cassandra.cql3.Maps$DiscarderByKey(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Maps$DiscarderByKey.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Maps$Literal", "org.apache.cassandra.cql3.Maps$Literal(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Term$Raw>>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Maps$Literal.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Maps$Literal.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Maps$Literal.getText()"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Maps$Marker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Maps$Putter", "org.apache.cassandra.cql3.Maps$Putter(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Maps$Putter.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Maps$Setter", "org.apache.cassandra.cql3.Maps$Setter(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Maps$Setter.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Maps$SetterByKey", "org.apache.cassandra.cql3.Maps$SetterByKey(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Maps$SetterByKey.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["void", "org.apache.cassandra.cql3.Maps$SetterByKey.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Maps$SubtracterByKey", "org.apache.cassandra.cql3.Maps$SubtracterByKey(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Maps$SubtracterByKey.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["void", "org.apache.cassandra.cql3.Maps$SubtracterByKey.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Maps$Value", "org.apache.cassandra.cql3.Maps$Value(java.util.Map<java.nio.ByteBuffer, java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.Maps$Value", "org.apache.cassandra.cql3.Maps$Value.fromSerialized(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.MapType, org.apache.cassandra.transport.ProtocolVersion)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Maps$Value.get(org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.cql3.Maps$Value.equals(org.apache.cassandra.db.marshal.MapType, org.apache.cassandra.cql3.Maps$Value)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.Maps.keySpecOf(org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.Maps.valueSpecOf(org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.MultiColumnRelation$SuperColumnMultiColumnRelation.getValue()"], ["org.apache.cassandra.cql3.MultiColumnRelation", "org.apache.cassandra.cql3.MultiColumnRelation.createNonInRelation(java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, org.apache.cassandra.cql3.Operator, org.apache.cassandra.cql3.Term$MultiColumnRaw)"], ["org.apache.cassandra.cql3.MultiColumnRelation", "org.apache.cassandra.cql3.MultiColumnRelation.createInRelation(java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, java.util.List<? extends org.apache.cassandra.cql3.Term$MultiColumnRaw>)"], ["org.apache.cassandra.cql3.MultiColumnRelation", "org.apache.cassandra.cql3.MultiColumnRelation.createSingleMarkerInRelation(java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, org.apache.cassandra.cql3.Tuples$INRaw)"], ["org.apache.cassandra.cql3.Term$MultiColumnRaw", "org.apache.cassandra.cql3.MultiColumnRelation.getValue()"], ["java.util.List<? extends org.apache.cassandra.cql3.Term$Raw>", "org.apache.cassandra.cql3.MultiColumnRelation.getInValues()"], ["boolean", "org.apache.cassandra.cql3.MultiColumnRelation.isMultiColumn()"], ["org.apache.cassandra.cql3.Relation", "org.apache.cassandra.cql3.MultiColumnRelation.renameIdentifier(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["java.lang.String", "org.apache.cassandra.cql3.MultiColumnRelation.toString()"], ["org.apache.cassandra.cql3.Relation", "org.apache.cassandra.cql3.MultiColumnRelation.toSuperColumnAdapter()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.MultiColumnRelation.getValue()"], ["org.apache.cassandra.cql3.Operation$Addition", "org.apache.cassandra.cql3.Operation$Addition(org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$Addition.prepare(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.Operation$Addition.isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Operation$Addition.value()"], ["org.apache.cassandra.cql3.Operation$ColumnDeletion", "org.apache.cassandra.cql3.Operation$ColumnDeletion(org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.Operation$ColumnDeletion.affectedColumn()"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$ColumnDeletion.prepare(java.lang.String, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.Operation$ElementAddition", "org.apache.cassandra.cql3.Operation$ElementAddition(org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$ElementAddition.prepare(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.Operation$ElementAddition.isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)"], ["org.apache.cassandra.cql3.Operation$ElementDeletion", "org.apache.cassandra.cql3.Operation$ElementDeletion(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.Operation$ElementDeletion.affectedColumn()"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$ElementDeletion.prepare(java.lang.String, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.Operation$ElementSubtraction", "org.apache.cassandra.cql3.Operation$ElementSubtraction(org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$ElementSubtraction.prepare(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.Operation$ElementSubtraction.isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)"], ["org.apache.cassandra.cql3.Operation$FieldDeletion", "org.apache.cassandra.cql3.Operation$FieldDeletion(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.FieldIdentifier)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.Operation$FieldDeletion.affectedColumn()"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$FieldDeletion.prepare(java.lang.String, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.Operation$Prepend", "org.apache.cassandra.cql3.Operation$Prepend(org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$Prepend.prepare(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.Operation$Prepend.isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)"], ["org.apache.cassandra.cql3.Operation$SetElement", "org.apache.cassandra.cql3.Operation$SetElement(org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$SetElement.prepare(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.Operation$SetElement.isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)"], ["org.apache.cassandra.cql3.Operation$SetField", "org.apache.cassandra.cql3.Operation$SetField(org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$SetField.prepare(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.Operation$SetField.isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)"], ["org.apache.cassandra.cql3.Operation$SetValue", "org.apache.cassandra.cql3.Operation$SetValue(org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$SetValue.prepare(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.Operation$SetValue.isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Operation$SetValue.value()"], ["org.apache.cassandra.cql3.Operation$Substraction", "org.apache.cassandra.cql3.Operation$Substraction(org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Operation", "org.apache.cassandra.cql3.Operation$Substraction.prepare(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.Operation$Substraction.isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Operation$Substraction.value()"], ["void", "org.apache.cassandra.cql3.Operation.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.Operation.requiresRead()"], ["void", "org.apache.cassandra.cql3.Operation.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Operations", "org.apache.cassandra.cql3.Operations(org.apache.cassandra.cql3.statements.StatementType)"], ["boolean", "org.apache.cassandra.cql3.Operations.appliesToStaticColumns()"], ["boolean", "org.apache.cassandra.cql3.Operations.appliesToRegularColumns()"], ["void", "org.apache.cassandra.cql3.Operations.add(org.apache.cassandra.cql3.Operation)"], ["boolean", "org.apache.cassandra.cql3.Operations.requiresRead()"], ["boolean", "org.apache.cassandra.cql3.Operations.isEmpty()"], ["void", "org.apache.cassandra.cql3.Operations.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$1.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$10.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$11.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$12.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$13.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$14.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$15.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$2.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$3.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$4.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$5.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$8.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator$9.toString()"], ["org.apache.cassandra.cql3.Operator[]", "org.apache.cassandra.cql3.Operator.values()"], ["org.apache.cassandra.cql3.Operator", "org.apache.cassandra.cql3.Operator.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.cql3.Operator.writeTo(java.io.DataOutput)"], ["int", "org.apache.cassandra.cql3.Operator.getValue()"], ["org.apache.cassandra.cql3.Operator", "org.apache.cassandra.cql3.Operator.readFrom(java.io.DataInput)"], ["boolean", "org.apache.cassandra.cql3.Operator.isSatisfiedBy(org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.cql3.Operator.serializedSize()"], ["boolean", "org.apache.cassandra.cql3.Operator.isSlice()"], ["java.lang.String", "org.apache.cassandra.cql3.Operator.toString()"], ["org.apache.cassandra.cql3.QueryOptions$Codec$Flag[]", "org.apache.cassandra.cql3.QueryOptions$Codec$Flag.values()"], ["org.apache.cassandra.cql3.QueryOptions$Codec$Flag", "org.apache.cassandra.cql3.QueryOptions$Codec$Flag.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.cql3.QueryOptions$Codec$Flag.serialize(java.util.EnumSet<org.apache.cassandra.cql3.QueryOptions$Codec$Flag>)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions$Codec.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.QueryOptions$Codec.encode(org.apache.cassandra.cql3.QueryOptions, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.cql3.QueryOptions$Codec.encodedSize(org.apache.cassandra.cql3.QueryOptions, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.cql3.QueryOptions$Codec.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.QueryOptions$Codec.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.cql3.QueryOptions$Codec.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.cql3.QueryOptions$DefaultQueryOptions.getConsistency()"], ["boolean", "org.apache.cassandra.cql3.QueryOptions$DefaultQueryOptions.skipMetadata()"], ["org.apache.cassandra.transport.ProtocolVersion", "org.apache.cassandra.cql3.QueryOptions$DefaultQueryOptions.getProtocolVersion()"], ["boolean", "org.apache.cassandra.cql3.QueryOptions$OptionsWithColumnSpecifications.hasColumnSpecifications()"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions$OptionsWithNames.prepare(java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.cql3.QueryOptions$QueryOptionsWrapper.getConsistency()"], ["boolean", "org.apache.cassandra.cql3.QueryOptions$QueryOptionsWrapper.skipMetadata()"], ["org.apache.cassandra.transport.ProtocolVersion", "org.apache.cassandra.cql3.QueryOptions$QueryOptionsWrapper.getProtocolVersion()"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions$QueryOptionsWrapper.prepare(java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions()"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions.fromThrift(org.apache.cassandra.db.ConsistencyLevel, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions.forInternalCalls(org.apache.cassandra.db.ConsistencyLevel, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions.forInternalCalls(java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions.forProtocolVersion(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions.create(org.apache.cassandra.db.ConsistencyLevel, java.util.List<java.nio.ByteBuffer>, boolean, int, org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions.addColumnSpecifications(org.apache.cassandra.cql3.QueryOptions, java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.QueryOptions.getJsonColumnValue(int, org.apache.cassandra.cql3.ColumnIdentifier, java.util.Collection<org.apache.cassandra.config.ColumnDefinition>)"], ["boolean", "org.apache.cassandra.cql3.QueryOptions.hasColumnSpecifications()"], ["int", "org.apache.cassandra.cql3.QueryOptions.getPageSize()"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.cql3.QueryOptions.getPagingState()"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.cql3.QueryOptions.getSerialConsistency()"], ["long", "org.apache.cassandra.cql3.QueryOptions.getTimestamp(org.apache.cassandra.service.QueryState)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryOptions.prepare(java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.QueryProcessor$InternalStateInstance[]", "org.apache.cassandra.cql3.QueryProcessor$InternalStateInstance.values()"], ["org.apache.cassandra.cql3.QueryProcessor$InternalStateInstance", "org.apache.cassandra.cql3.QueryProcessor$InternalStateInstance.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onCreateFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onCreateAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onUpdateColumnFamily(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onUpdateFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onUpdateAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onDropKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onDropColumnFamily(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onDropFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber.onDropAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["int", "org.apache.cassandra.cql3.QueryProcessor.preparedStatementsCount()"], ["void", "org.apache.cassandra.cql3.QueryProcessor.preloadPreparedStatement()"], ["void", "org.apache.cassandra.cql3.QueryProcessor.clearPreparedStatements(boolean)"], ["org.apache.cassandra.service.QueryState", "org.apache.cassandra.cql3.QueryProcessor.internalQueryState()"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.QueryProcessor.getPrepared(org.apache.cassandra.utils.MD5Digest)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.QueryProcessor.getPreparedForThrift(java.lang.Integer)"], ["void", "org.apache.cassandra.cql3.QueryProcessor.validateKey(java.nio.ByteBuffer)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.QueryProcessor.processStatement(org.apache.cassandra.cql3.CQLStatement, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.QueryProcessor.process(java.lang.String, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.QueryState, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.QueryProcessor.process(java.lang.String, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, java.util.Map<java.lang.String, java.nio.ByteBuffer>, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.QueryProcessor.process(java.lang.String, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.QueryProcessor.parseStatement(java.lang.String, org.apache.cassandra.service.QueryState)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.process(java.lang.String, org.apache.cassandra.db.ConsistencyLevel)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.process(java.lang.String, org.apache.cassandra.db.ConsistencyLevel, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.QueryOptions", "org.apache.cassandra.cql3.QueryProcessor.makeInternalOptions(org.apache.cassandra.cql3.statements.ParsedStatement$Prepared, java.lang.Object[])"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.QueryProcessor.prepareInternal(java.lang.String)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.executeInternal(java.lang.String, java.lang.Object...)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.execute(java.lang.String, org.apache.cassandra.db.ConsistencyLevel, java.lang.Object...)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.execute(java.lang.String, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.QueryState, java.lang.Object...)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.executeInternalWithPaging(java.lang.String, int, java.lang.Object...)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.executeOnceInternal(java.lang.String, java.lang.Object...)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.executeInternalWithNow(int, long, java.lang.String, java.lang.Object...)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.resultify(java.lang.String, org.apache.cassandra.db.rows.RowIterator)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.QueryProcessor.resultify(java.lang.String, org.apache.cassandra.db.partitions.PartitionIterator)"], ["org.apache.cassandra.transport.messages.ResultMessage$Prepared", "org.apache.cassandra.cql3.QueryProcessor.prepare(java.lang.String, org.apache.cassandra.service.QueryState, java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["org.apache.cassandra.transport.messages.ResultMessage$Prepared", "org.apache.cassandra.cql3.QueryProcessor.prepare(java.lang.String, org.apache.cassandra.service.QueryState)"], ["org.apache.cassandra.transport.messages.ResultMessage$Prepared", "org.apache.cassandra.cql3.QueryProcessor.prepare(java.lang.String, org.apache.cassandra.service.ClientState, boolean)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.QueryProcessor.processPrepared(org.apache.cassandra.cql3.CQLStatement, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, java.util.Map<java.lang.String, java.nio.ByteBuffer>, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.QueryProcessor.processPrepared(org.apache.cassandra.cql3.CQLStatement, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.QueryProcessor.processBatch(org.apache.cassandra.cql3.statements.BatchStatement, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.BatchQueryOptions, java.util.Map<java.lang.String, java.nio.ByteBuffer>, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.QueryProcessor.processBatch(org.apache.cassandra.cql3.statements.BatchStatement, org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.BatchQueryOptions, long)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.QueryProcessor.getStatement(java.lang.String, org.apache.cassandra.service.ClientState)"], ["<T extends org.apache.cassandra.cql3.statements.ParsedStatement> T", "org.apache.cassandra.cql3.QueryProcessor.parseStatement(java.lang.String, java.lang.Class<T>, java.lang.String)"], ["org.apache.cassandra.cql3.statements.ParsedStatement", "org.apache.cassandra.cql3.QueryProcessor.parseStatement(java.lang.String)"], ["void", "org.apache.cassandra.cql3.QueryProcessor.clearInternalStatementsCache()"], ["org.apache.cassandra.cql3.Relation", "org.apache.cassandra.cql3.Relation()"], ["org.apache.cassandra.cql3.Operator", "org.apache.cassandra.cql3.Relation.operator()"], ["boolean", "org.apache.cassandra.cql3.Relation.isMultiColumn()"], ["boolean", "org.apache.cassandra.cql3.Relation.onToken()"], ["boolean", "org.apache.cassandra.cql3.Relation.isContains()"], ["boolean", "org.apache.cassandra.cql3.Relation.isContainsKey()"], ["boolean", "org.apache.cassandra.cql3.Relation.isIN()"], ["boolean", "org.apache.cassandra.cql3.Relation.isEQ()"], ["boolean", "org.apache.cassandra.cql3.Relation.isLIKE()"], ["boolean", "org.apache.cassandra.cql3.Relation.isSlice()"], ["org.apache.cassandra.cql3.restrictions.Restriction", "org.apache.cassandra.cql3.Relation.toRestriction(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Relation", "org.apache.cassandra.cql3.Relation.toSuperColumnAdapter()"], ["org.apache.cassandra.cql3.ResultSet$Codec", "org.apache.cassandra.cql3.ResultSet$Codec()"], ["org.apache.cassandra.cql3.ResultSet", "org.apache.cassandra.cql3.ResultSet$Codec.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.ResultSet$Codec.encode(org.apache.cassandra.cql3.ResultSet, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.cql3.ResultSet$Codec.encodedSize(org.apache.cassandra.cql3.ResultSet, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.cql3.ResultSet$Codec.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.ResultSet$Codec.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.cql3.ResultSet$Codec.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.ResultSet$Flag[]", "org.apache.cassandra.cql3.ResultSet$Flag.values()"], ["org.apache.cassandra.cql3.ResultSet$Flag", "org.apache.cassandra.cql3.ResultSet$Flag.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.cql3.ResultSet$Flag.serialize(java.util.EnumSet<org.apache.cassandra.cql3.ResultSet$Flag>)"], ["org.apache.cassandra.cql3.ResultSet$PreparedMetadata", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata$Codec.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata$Codec.encode(org.apache.cassandra.cql3.ResultSet$PreparedMetadata, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata$Codec.encodedSize(org.apache.cassandra.cql3.ResultSet$PreparedMetadata, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata$Codec.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata$Codec.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata$Codec.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.ResultSet$PreparedMetadata", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata(java.util.List<org.apache.cassandra.cql3.ColumnSpecification>, short[])"], ["org.apache.cassandra.cql3.ResultSet$PreparedMetadata", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata.copy()"], ["boolean", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata.hashCode()"], ["java.lang.String", "org.apache.cassandra.cql3.ResultSet$PreparedMetadata.toString()"], ["org.apache.cassandra.cql3.ResultSet$ResultMetadata", "org.apache.cassandra.cql3.ResultSet$ResultMetadata$Codec.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.ResultSet$ResultMetadata$Codec.encode(org.apache.cassandra.cql3.ResultSet$ResultMetadata, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.cql3.ResultSet$ResultMetadata$Codec.encodedSize(org.apache.cassandra.cql3.ResultSet$ResultMetadata, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.cql3.ResultSet$ResultMetadata$Codec.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.ResultSet$ResultMetadata$Codec.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.cql3.ResultSet$ResultMetadata$Codec.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.ResultSet$ResultMetadata", "org.apache.cassandra.cql3.ResultSet$ResultMetadata(java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.ResultSet$ResultMetadata", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.copy()"], ["int", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.getColumnCount()"], ["int", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.valueCount()"], ["void", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.addNonSerializedColumn(org.apache.cassandra.cql3.ColumnSpecification)"], ["void", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.setHasMorePages(org.apache.cassandra.service.pager.PagingState)"], ["void", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.setSkipMetadata()"], ["boolean", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.hashCode()"], ["java.lang.String", "org.apache.cassandra.cql3.ResultSet$ResultMetadata.toString()"], ["org.apache.cassandra.cql3.ResultSet", "org.apache.cassandra.cql3.ResultSet(java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.ResultSet", "org.apache.cassandra.cql3.ResultSet(org.apache.cassandra.cql3.ResultSet$ResultMetadata, java.util.List<java.util.List<java.nio.ByteBuffer>>)"], ["int", "org.apache.cassandra.cql3.ResultSet.size()"], ["boolean", "org.apache.cassandra.cql3.ResultSet.isEmpty()"], ["void", "org.apache.cassandra.cql3.ResultSet.addRow(java.util.List<java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.cql3.ResultSet.addColumnValue(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.cql3.ResultSet.reverse()"], ["void", "org.apache.cassandra.cql3.ResultSet.trim(int)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.cql3.ResultSet.toThriftResult()"], ["java.lang.String", "org.apache.cassandra.cql3.ResultSet.toString()"], ["org.apache.cassandra.cql3.RoleName", "org.apache.cassandra.cql3.RoleName()"], ["void", "org.apache.cassandra.cql3.RoleName.setName(java.lang.String, boolean)"], ["boolean", "org.apache.cassandra.cql3.RoleName.hasName()"], ["java.lang.String", "org.apache.cassandra.cql3.RoleName.getName()"], ["java.lang.String", "org.apache.cassandra.cql3.RoleName.toString()"], ["org.apache.cassandra.cql3.Sets$Adder", "org.apache.cassandra.cql3.Sets$Adder(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Sets$Adder.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Sets$DelayedValue", "org.apache.cassandra.cql3.Sets$DelayedValue(java.util.Comparator<java.nio.ByteBuffer>, java.util.Set<org.apache.cassandra.cql3.Term>)"], ["boolean", "org.apache.cassandra.cql3.Sets$DelayedValue.containsBindMarker()"], ["void", "org.apache.cassandra.cql3.Sets$DelayedValue.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Sets$DelayedValue.bind(org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.Sets$DelayedValue.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.Sets$Discarder", "org.apache.cassandra.cql3.Sets$Discarder(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Sets$Discarder.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Sets$ElementDiscarder", "org.apache.cassandra.cql3.Sets$ElementDiscarder(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Sets$ElementDiscarder.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Sets$Literal", "org.apache.cassandra.cql3.Sets$Literal(java.util.List<org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Sets$Literal.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Sets$Literal.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Sets$Literal.getText()"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Sets$Marker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Sets$Setter", "org.apache.cassandra.cql3.Sets$Setter(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.Sets$Setter.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.Sets$Value", "org.apache.cassandra.cql3.Sets$Value(java.util.SortedSet<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.Sets$Value", "org.apache.cassandra.cql3.Sets$Value.fromSerialized(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.SetType, org.apache.cassandra.transport.ProtocolVersion)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Sets$Value.get(org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.cql3.Sets$Value.equals(org.apache.cassandra.db.marshal.SetType, org.apache.cassandra.cql3.Sets$Value)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.Sets.valueSpecOf(org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.restrictions.Restriction", "org.apache.cassandra.cql3.SingleColumnRelation$SuperColumnSingleColumnRelation.newSliceRestriction(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.VariableSpecifications, org.apache.cassandra.cql3.statements.Bound, boolean)"], ["org.apache.cassandra.cql3.SingleColumnRelation", "org.apache.cassandra.cql3.SingleColumnRelation(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Operator, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.SingleColumnRelation", "org.apache.cassandra.cql3.SingleColumnRelation(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operator, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.SingleColumnRelation.getValue()"], ["java.util.List<? extends org.apache.cassandra.cql3.Term$Raw>", "org.apache.cassandra.cql3.SingleColumnRelation.getInValues()"], ["org.apache.cassandra.cql3.SingleColumnRelation", "org.apache.cassandra.cql3.SingleColumnRelation.createInRelation(org.apache.cassandra.config.ColumnDefinition$Raw, java.util.List<org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.SingleColumnRelation.getEntity()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.SingleColumnRelation.getMapKey()"], ["org.apache.cassandra.cql3.SingleColumnRelation", "org.apache.cassandra.cql3.SingleColumnRelation.withNonStrictOperator()"], ["org.apache.cassandra.cql3.Relation", "org.apache.cassandra.cql3.SingleColumnRelation.renameIdentifier(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["java.lang.String", "org.apache.cassandra.cql3.SingleColumnRelation.toString()"], ["org.apache.cassandra.cql3.Relation", "org.apache.cassandra.cql3.SingleColumnRelation.toSuperColumnAdapter()"], ["org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions", "org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions(java.util.Iterator<org.apache.cassandra.cql3.restrictions.SingleRestriction>)"], ["org.apache.cassandra.cql3.SuperColumnCompatibility", "org.apache.cassandra.cql3.SuperColumnCompatibility()"], ["boolean", "org.apache.cassandra.cql3.SuperColumnCompatibility.recalculateIsDense(org.apache.cassandra.db.Columns)"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.cql3.SuperColumnCompatibility.getColumnFilter(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.QueryOptions, org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions)"], ["void", "org.apache.cassandra.cql3.SuperColumnCompatibility.processPartition(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.selection.Selection, org.apache.cassandra.db.rows.RowIterator, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder, org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.SuperColumnCompatibility.prepareInsertOperations(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, org.apache.cassandra.cql3.WhereClause$Builder, java.util.List<org.apache.cassandra.cql3.Term$Raw>, org.apache.cassandra.cql3.VariableSpecifications, org.apache.cassandra.cql3.Operations)"], ["void", "org.apache.cassandra.cql3.SuperColumnCompatibility.prepareInsertJSONOperations(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications, org.apache.cassandra.cql3.Json$Prepared, org.apache.cassandra.cql3.WhereClause$Builder, org.apache.cassandra.cql3.Operations)"], ["org.apache.cassandra.cql3.WhereClause", "org.apache.cassandra.cql3.SuperColumnCompatibility.prepareUpdateOperations(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.WhereClause, java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.cql3.VariableSpecifications, org.apache.cassandra.cql3.Operations)"], ["org.apache.cassandra.cql3.Conditions", "org.apache.cassandra.cql3.SuperColumnCompatibility.rebuildLWTColumnConditions(org.apache.cassandra.cql3.Conditions, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.WhereClause)"], ["org.apache.cassandra.cql3.WhereClause", "org.apache.cassandra.cql3.SuperColumnCompatibility.prepareDeleteOperations(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.WhereClause, org.apache.cassandra.cql3.VariableSpecifications, org.apache.cassandra.cql3.Operations)"], ["org.apache.cassandra.db.CompactTables$DefaultNames", "org.apache.cassandra.cql3.SuperColumnCompatibility.columnNameGenerator(java.util.List<org.apache.cassandra.config.ColumnDefinition>, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.db.PartitionColumns)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.SuperColumnCompatibility.getSuperCfKeyColumn(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.db.CompactTables$DefaultNames)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.SuperColumnCompatibility.getSuperCfValueColumn(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.PartitionColumns, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.CompactTables$DefaultNames)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.SuperColumnCompatibility.getSuperCfSschemaRepresentation(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.SuperColumnCompatibility.isSuperColumnMapColumn(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.SuperColumnCompatibility.getCompactValueColumn(org.apache.cassandra.db.PartitionColumns)"], ["org.apache.cassandra.cql3.Term$MultiColumnRaw", "org.apache.cassandra.cql3.Term$MultiColumnRaw()"], ["org.apache.cassandra.cql3.Term$MultiItemTerminal", "org.apache.cassandra.cql3.Term$MultiItemTerminal()"], ["org.apache.cassandra.cql3.Term$NonTerminal", "org.apache.cassandra.cql3.Term$NonTerminal()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Term$NonTerminal.bindAndGet(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.Term$Raw()"], ["java.lang.String", "org.apache.cassandra.cql3.Term$Raw.toString()"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Term$Terminal()"], ["void", "org.apache.cassandra.cql3.Term$Terminal.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Term$Terminal.bind(org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.Term$Terminal.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.Term$Terminal.containsBindMarker()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Term$Terminal.bindAndGet(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Terms", "org.apache.cassandra.cql3.Terms()"], ["void", "org.apache.cassandra.cql3.Terms.addFunctions(java.lang.Iterable<org.apache.cassandra.cql3.Term>, java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Terms.asBytes(java.lang.String, java.lang.String, org.apache.cassandra.db.marshal.AbstractType)"], ["org.apache.cassandra.cql3.TokenRelation", "org.apache.cassandra.cql3.TokenRelation(java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, org.apache.cassandra.cql3.Operator, org.apache.cassandra.cql3.Term$Raw)"], ["boolean", "org.apache.cassandra.cql3.TokenRelation.onToken()"], ["org.apache.cassandra.cql3.Term$Raw", "org.apache.cassandra.cql3.TokenRelation.getValue()"], ["java.util.List<? extends org.apache.cassandra.cql3.Term$Raw>", "org.apache.cassandra.cql3.TokenRelation.getInValues()"], ["org.apache.cassandra.cql3.Relation", "org.apache.cassandra.cql3.TokenRelation.renameIdentifier(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.config.ColumnDefinition$Raw)"], ["java.lang.String", "org.apache.cassandra.cql3.TokenRelation.toString()"], ["org.apache.cassandra.cql3.Tuples$DelayedValue", "org.apache.cassandra.cql3.Tuples$DelayedValue(org.apache.cassandra.db.marshal.TupleType, java.util.List<org.apache.cassandra.cql3.Term>)"], ["boolean", "org.apache.cassandra.cql3.Tuples$DelayedValue.containsBindMarker()"], ["void", "org.apache.cassandra.cql3.Tuples$DelayedValue.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Tuples$Value", "org.apache.cassandra.cql3.Tuples$DelayedValue.bind(org.apache.cassandra.cql3.QueryOptions)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Tuples$DelayedValue.bindAndGet(org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.Tuples$DelayedValue.toString()"], ["void", "org.apache.cassandra.cql3.Tuples$DelayedValue.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Tuples$DelayedValue.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Tuples$INRaw", "org.apache.cassandra.cql3.Tuples$INRaw(int)"], ["org.apache.cassandra.cql3.AbstractMarker", "org.apache.cassandra.cql3.Tuples$INRaw.prepare(java.lang.String, java.util.List<? extends org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Tuples$INRaw.prepare(java.lang.String, java.util.List)"], ["org.apache.cassandra.cql3.Tuples$InValue", "org.apache.cassandra.cql3.Tuples$InMarker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Tuples$InMarker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Tuples$InValue", "org.apache.cassandra.cql3.Tuples$InValue(java.util.List<java.util.List<java.nio.ByteBuffer>>)"], ["org.apache.cassandra.cql3.Tuples$InValue", "org.apache.cassandra.cql3.Tuples$InValue.fromSerialized(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.ListType, org.apache.cassandra.cql3.QueryOptions)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Tuples$InValue.get(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.Tuples$Literal", "org.apache.cassandra.cql3.Tuples$Literal(java.util.List<org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Tuples$Literal.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Tuples$Literal.prepare(java.lang.String, java.util.List<? extends org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.Tuples$Literal.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.Tuples$Literal.getText()"], ["org.apache.cassandra.cql3.Tuples$Marker", "org.apache.cassandra.cql3.Tuples$Marker(int, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.Tuples$Value", "org.apache.cassandra.cql3.Tuples$Marker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.Tuples$Marker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Tuples$Raw", "org.apache.cassandra.cql3.Tuples$Raw(int)"], ["org.apache.cassandra.cql3.AbstractMarker", "org.apache.cassandra.cql3.Tuples$Raw.prepare(java.lang.String, java.util.List<? extends org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.Tuples$Raw.prepare(java.lang.String, java.util.List)"], ["org.apache.cassandra.cql3.Tuples$Value", "org.apache.cassandra.cql3.Tuples$Value(java.nio.ByteBuffer[])"], ["org.apache.cassandra.cql3.Tuples$Value", "org.apache.cassandra.cql3.Tuples$Value.fromSerialized(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.TupleType)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.Tuples$Value.get(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.Tuples.componentSpecOf(org.apache.cassandra.cql3.ColumnSpecification, int)"], ["java.lang.String", "org.apache.cassandra.cql3.Tuples.tupleToString(java.util.List<?>)"], ["boolean", "org.apache.cassandra.cql3.Tuples.checkIfTupleType(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.db.marshal.TupleType", "org.apache.cassandra.cql3.Tuples.getTupleType(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.TypeCast", "org.apache.cassandra.cql3.TypeCast(org.apache.cassandra.cql3.CQL3Type$Raw, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.TypeCast.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.TypeCast.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.TypeCast.getText()"], ["org.apache.cassandra.cql3.UTName", "org.apache.cassandra.cql3.UTName(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.cql3.ColumnIdentifier)"], ["boolean", "org.apache.cassandra.cql3.UTName.hasKeyspace()"], ["void", "org.apache.cassandra.cql3.UTName.setKeyspace(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.UTName.getKeyspace()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.UTName.getUserTypeName()"], ["java.lang.String", "org.apache.cassandra.cql3.UTName.getStringTypeName()"], ["java.lang.String", "org.apache.cassandra.cql3.UTName.toString()"], ["int", "org.apache.cassandra.cql3.UntypedResultSet$FromPager.size()"], ["org.apache.cassandra.cql3.UntypedResultSet$Row", "org.apache.cassandra.cql3.UntypedResultSet$FromPager.one()"], ["int", "org.apache.cassandra.cql3.UntypedResultSet$FromResultList.size()"], ["org.apache.cassandra.cql3.UntypedResultSet$Row", "org.apache.cassandra.cql3.UntypedResultSet$FromResultList.one()"], ["int", "org.apache.cassandra.cql3.UntypedResultSet$FromResultSet.size()"], ["org.apache.cassandra.cql3.UntypedResultSet$Row", "org.apache.cassandra.cql3.UntypedResultSet$FromResultSet.one()"], ["org.apache.cassandra.cql3.UntypedResultSet$Row", "org.apache.cassandra.cql3.UntypedResultSet$Row(java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.UntypedResultSet$Row", "org.apache.cassandra.cql3.UntypedResultSet$Row(java.util.List<org.apache.cassandra.cql3.ColumnSpecification>, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.UntypedResultSet$Row", "org.apache.cassandra.cql3.UntypedResultSet$Row.fromInternalRow(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.cql3.UntypedResultSet$Row.has(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.UntypedResultSet$Row.getBlob(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.UntypedResultSet$Row.getString(java.lang.String)"], ["boolean", "org.apache.cassandra.cql3.UntypedResultSet$Row.getBoolean(java.lang.String)"], ["byte", "org.apache.cassandra.cql3.UntypedResultSet$Row.getByte(java.lang.String)"], ["short", "org.apache.cassandra.cql3.UntypedResultSet$Row.getShort(java.lang.String)"], ["int", "org.apache.cassandra.cql3.UntypedResultSet$Row.getInt(java.lang.String)"], ["double", "org.apache.cassandra.cql3.UntypedResultSet$Row.getDouble(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.UntypedResultSet$Row.getBytes(java.lang.String)"], ["java.net.InetAddress", "org.apache.cassandra.cql3.UntypedResultSet$Row.getInetAddress(java.lang.String)"], ["java.util.UUID", "org.apache.cassandra.cql3.UntypedResultSet$Row.getUUID(java.lang.String)"], ["java.util.Date", "org.apache.cassandra.cql3.UntypedResultSet$Row.getTimestamp(java.lang.String)"], ["long", "org.apache.cassandra.cql3.UntypedResultSet$Row.getLong(java.lang.String)"], ["<T> java.util.Set<T>", "org.apache.cassandra.cql3.UntypedResultSet$Row.getSet(java.lang.String, org.apache.cassandra.db.marshal.AbstractType<T>)"], ["<T> java.util.List<T>", "org.apache.cassandra.cql3.UntypedResultSet$Row.getList(java.lang.String, org.apache.cassandra.db.marshal.AbstractType<T>)"], ["<K, V> java.util.Map<K, V>", "org.apache.cassandra.cql3.UntypedResultSet$Row.getMap(java.lang.String, org.apache.cassandra.db.marshal.AbstractType<K>, org.apache.cassandra.db.marshal.AbstractType<V>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.cql3.UntypedResultSet$Row.getTextMap(java.lang.String)"], ["<T> java.util.Set<T>", "org.apache.cassandra.cql3.UntypedResultSet$Row.getFrozenSet(java.lang.String, org.apache.cassandra.db.marshal.AbstractType<T>)"], ["<T> java.util.List<T>", "org.apache.cassandra.cql3.UntypedResultSet$Row.getFrozenList(java.lang.String, org.apache.cassandra.db.marshal.AbstractType<T>)"], ["<K, V> java.util.Map<K, V>", "org.apache.cassandra.cql3.UntypedResultSet$Row.getFrozenMap(java.lang.String, org.apache.cassandra.db.marshal.AbstractType<K>, org.apache.cassandra.db.marshal.AbstractType<V>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.cql3.UntypedResultSet$Row.getFrozenTextMap(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.UntypedResultSet$Row.toString()"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.UntypedResultSet()"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.UntypedResultSet.create(org.apache.cassandra.cql3.ResultSet)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.UntypedResultSet.create(java.util.List<java.util.Map<java.lang.String, java.nio.ByteBuffer>>)"], ["org.apache.cassandra.cql3.UntypedResultSet", "org.apache.cassandra.cql3.UntypedResultSet.create(org.apache.cassandra.cql3.statements.SelectStatement, org.apache.cassandra.service.pager.QueryPager, int)"], ["boolean", "org.apache.cassandra.cql3.UntypedResultSet.isEmpty()"], ["org.apache.cassandra.cql3.UpdateParameters", "org.apache.cassandra.cql3.UpdateParameters(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.PartitionColumns, org.apache.cassandra.cql3.QueryOptions, long, int, java.util.Map<org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.partitions.Partition>)"], ["void", "org.apache.cassandra.cql3.UpdateParameters.newRow(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.cql3.UpdateParameters.currentClustering()"], ["void", "org.apache.cassandra.cql3.UpdateParameters.addPrimaryKeyLivenessInfo()"], ["void", "org.apache.cassandra.cql3.UpdateParameters.addRowDeletion()"], ["void", "org.apache.cassandra.cql3.UpdateParameters.addTombstone(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.cql3.UpdateParameters.addTombstone(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath)"], ["void", "org.apache.cassandra.cql3.UpdateParameters.addCell(org.apache.cassandra.config.ColumnDefinition, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.cql3.UpdateParameters.addCell(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.cql3.UpdateParameters.addCounter(org.apache.cassandra.config.ColumnDefinition, long)"], ["void", "org.apache.cassandra.cql3.UpdateParameters.addCounter(org.apache.cassandra.config.ColumnDefinition, long, org.apache.cassandra.db.rows.CellPath)"], ["void", "org.apache.cassandra.cql3.UpdateParameters.setComplexDeletionTime(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.cql3.UpdateParameters.setComplexDeletionTimeForOverwrite(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.cql3.UpdateParameters.buildRow()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.cql3.UpdateParameters.deletionTime()"], ["org.apache.cassandra.db.RangeTombstone", "org.apache.cassandra.cql3.UpdateParameters.makeRangeTombstone(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.RangeTombstone", "org.apache.cassandra.cql3.UpdateParameters.makeRangeTombstone(org.apache.cassandra.db.Slice)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.cql3.UpdateParameters.getPrefetchedRow(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.cql3.UserTypes$DelayedValue", "org.apache.cassandra.cql3.UserTypes$DelayedValue(org.apache.cassandra.db.marshal.UserType, java.util.List<org.apache.cassandra.cql3.Term>)"], ["void", "org.apache.cassandra.cql3.UserTypes$DelayedValue.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.UserTypes$DelayedValue.containsBindMarker()"], ["void", "org.apache.cassandra.cql3.UserTypes$DelayedValue.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.UserTypes$Value", "org.apache.cassandra.cql3.UserTypes$DelayedValue.bind(org.apache.cassandra.cql3.QueryOptions)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.UserTypes$DelayedValue.bindAndGet(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.UserTypes$DelayedValue.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.UserTypes$DeleterByField", "org.apache.cassandra.cql3.UserTypes$DeleterByField(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.FieldIdentifier)"], ["void", "org.apache.cassandra.cql3.UserTypes$DeleterByField.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.UserTypes$Literal", "org.apache.cassandra.cql3.UserTypes$Literal(java.util.Map<org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.UserTypes$Literal.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.UserTypes$Literal.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.UserTypes$Literal.getText()"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.UserTypes$Marker.bind(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.UserTypes$Setter", "org.apache.cassandra.cql3.UserTypes$Setter(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.UserTypes$Setter.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.UserTypes$SetterByField", "org.apache.cassandra.cql3.UserTypes$SetterByField(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.UserTypes$SetterByField.execute(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.UserTypes$Value", "org.apache.cassandra.cql3.UserTypes$Value(org.apache.cassandra.db.marshal.UserType, java.nio.ByteBuffer[])"], ["org.apache.cassandra.cql3.UserTypes$Value", "org.apache.cassandra.cql3.UserTypes$Value.fromSerialized(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.UserType)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.UserTypes$Value.get(org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.cql3.UserTypes$Value.equals(org.apache.cassandra.db.marshal.UserType, org.apache.cassandra.cql3.UserTypes$Value)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.UserTypes.fieldSpecOf(org.apache.cassandra.cql3.ColumnSpecification, int)"], ["org.apache.cassandra.cql3.VariableSpecifications", "org.apache.cassandra.cql3.VariableSpecifications(java.util.List<org.apache.cassandra.cql3.ColumnIdentifier>)"], ["org.apache.cassandra.cql3.VariableSpecifications", "org.apache.cassandra.cql3.VariableSpecifications.empty()"], ["int", "org.apache.cassandra.cql3.VariableSpecifications.size()"], ["short[]", "org.apache.cassandra.cql3.VariableSpecifications.getPartitionKeyBindIndexes(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.cql3.VariableSpecifications.add(int, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.VariableSpecifications.toString()"], ["org.apache.cassandra.cql3.WhereClause$Builder", "org.apache.cassandra.cql3.WhereClause$Builder()"], ["org.apache.cassandra.cql3.WhereClause$Builder", "org.apache.cassandra.cql3.WhereClause$Builder.add(org.apache.cassandra.cql3.Relation)"], ["org.apache.cassandra.cql3.WhereClause$Builder", "org.apache.cassandra.cql3.WhereClause$Builder.add(org.apache.cassandra.cql3.restrictions.CustomIndexExpression)"], ["org.apache.cassandra.cql3.WhereClause", "org.apache.cassandra.cql3.WhereClause$Builder.build()"], ["org.apache.cassandra.cql3.WhereClause", "org.apache.cassandra.cql3.WhereClause.empty()"], ["org.apache.cassandra.cql3.WhereClause", "org.apache.cassandra.cql3.WhereClause.copy(java.util.List<org.apache.cassandra.cql3.Relation>)"], ["boolean", "org.apache.cassandra.cql3.WhereClause.containsCustomExpressions()"], ["org.apache.cassandra.cql3.functions.FunctionName", "org.apache.cassandra.cql3.functions.AbstractFunction.name()"], ["boolean", "org.apache.cassandra.cql3.functions.AbstractFunction.equals(java.lang.Object)"], ["void", "org.apache.cassandra.cql3.functions.AbstractFunction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.functions.AbstractFunction.hasReferenceTo(org.apache.cassandra.cql3.functions.Function)"], ["int", "org.apache.cassandra.cql3.functions.AbstractFunction.hashCode()"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.functions.AbstractFunction.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.functions.AbstractFunction.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.functions.AbstractFunction.columnName(java.util.List<java.lang.String>)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$1$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$1$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$1$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$1.newAggregate()"], ["java.lang.String", "org.apache.cassandra.cql3.functions.AggregateFcts$1.columnName(java.util.List<java.lang.String>)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$10$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$10$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$10$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$10.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$11$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$11.newAggregate()"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$12.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$13$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$13.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$14$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$14.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$15$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$15.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$16$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$16.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$17$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$17.newAggregate()"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$18.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$19$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$19.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$2$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$2$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$2$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$2.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$20$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$20$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$20$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$20.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$21$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$21$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$21$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$21.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$22$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$22$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$22$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$22.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$23$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$23$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$23$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$23.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$24$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$24$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$24$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$24.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$3$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$3$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$3$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$3.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$4$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$4$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$4$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$4.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$5$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$5$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$5$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$5.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$6$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$6$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$6$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$6.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$7$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$7.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$8$1.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$8$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$8$1.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$8.newAggregate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$9$1.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$9.newAggregate()"], ["org.apache.cassandra.cql3.functions.AggregateFcts$AvgAggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$AvgAggregate(org.apache.cassandra.db.marshal.AbstractType)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$AvgAggregate.reset()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$AvgAggregate.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate(org.apache.cassandra.db.marshal.AbstractType)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate.reset()"], ["double", "org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate.computeInternal()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate", "org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate(org.apache.cassandra.db.marshal.AbstractType)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate.reset()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["double", "org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate.computeInternal()"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$LongSumAggregate.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.AggregateFcts$LongSumAggregate.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.AggregateFcts$LongSumAggregate.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFcts", "org.apache.cassandra.cql3.functions.AggregateFcts()"], ["org.apache.cassandra.cql3.functions.AggregateFunction", "org.apache.cassandra.cql3.functions.AggregateFcts.makeMaxFunction(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction", "org.apache.cassandra.cql3.functions.AggregateFcts.makeMinFunction(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction", "org.apache.cassandra.cql3.functions.AggregateFcts.makeCountFunction(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.BytesConversionFcts$1.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.BytesConversionFcts$2.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.BytesConversionFcts$3.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.BytesConversionFcts$4.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.BytesConversionFcts", "org.apache.cassandra.cql3.functions.BytesConversionFcts()"], ["org.apache.cassandra.cql3.functions.Function", "org.apache.cassandra.cql3.functions.BytesConversionFcts.makeToBlobFunction(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.functions.Function", "org.apache.cassandra.cql3.functions.BytesConversionFcts.makeFromBlobFunction(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["<I, O> org.apache.cassandra.cql3.functions.CastFcts$CassandraFunctionWrapper<I, O>", "org.apache.cassandra.cql3.functions.CastFcts$CassandraFunctionWrapper.create(org.apache.cassandra.db.marshal.AbstractType<I>, org.apache.cassandra.db.marshal.AbstractType<O>, org.apache.cassandra.cql3.functions.NativeScalarFunction)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.CastFcts$CassandraFunctionWrapper.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["<I> org.apache.cassandra.cql3.functions.CastFcts$CastAsTextFunction<I>", "org.apache.cassandra.cql3.functions.CastFcts$CastAsTextFunction.create(org.apache.cassandra.db.marshal.AbstractType<I>, org.apache.cassandra.db.marshal.AbstractType<java.lang.String>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.CastFcts$CastAsTextFunction.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.CastFcts$CastFunction", "org.apache.cassandra.cql3.functions.CastFcts$CastFunction(org.apache.cassandra.db.marshal.AbstractType<I>, org.apache.cassandra.db.marshal.AbstractType<O>)"], ["java.lang.String", "org.apache.cassandra.cql3.functions.CastFcts$CastFunction.columnName(java.util.List<java.lang.String>)"], ["<O> org.apache.cassandra.cql3.functions.CastFcts$JavaFunctionWrapper<java.lang.Long, O>", "org.apache.cassandra.cql3.functions.CastFcts$JavaCounterFunctionWrapper.create(org.apache.cassandra.db.marshal.AbstractType<O>, java.util.function.Function<java.lang.Long, O>)"], ["<I, O> org.apache.cassandra.cql3.functions.CastFcts$JavaFunctionWrapper<I, O>", "org.apache.cassandra.cql3.functions.CastFcts$JavaFunctionWrapper.create(org.apache.cassandra.db.marshal.AbstractType<I>, org.apache.cassandra.db.marshal.AbstractType<O>, java.util.function.Function<I, O>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.CastFcts$JavaFunctionWrapper.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.lang.String", "org.apache.cassandra.cql3.functions.CastFcts.getFunctionName(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.lang.String", "org.apache.cassandra.cql3.functions.CastFcts.getFunctionName(org.apache.cassandra.cql3.CQL3Type)"], ["org.apache.cassandra.cql3.functions.FromJsonFct", "org.apache.cassandra.cql3.functions.FromJsonFct.getInstance(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.FromJsonFct.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.FunctionCall$Raw", "org.apache.cassandra.cql3.functions.FunctionCall$Raw(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.cql3.Term$Raw>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.functions.FunctionCall$Raw.prepare(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.functions.FunctionCall$Raw.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.functions.FunctionCall$Raw.getText()"], ["void", "org.apache.cassandra.cql3.functions.FunctionCall.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["void", "org.apache.cassandra.cql3.functions.FunctionCall.collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.Term$Terminal", "org.apache.cassandra.cql3.functions.FunctionCall.bind(org.apache.cassandra.cql3.QueryOptions)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.FunctionCall.bindAndGet(org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.functions.FunctionCall.containsBindMarker()"], ["org.apache.cassandra.cql3.functions.FunctionName", "org.apache.cassandra.cql3.functions.FunctionName.nativeFunction(java.lang.String)"], ["org.apache.cassandra.cql3.functions.FunctionName", "org.apache.cassandra.cql3.functions.FunctionName(java.lang.String, java.lang.String)"], ["org.apache.cassandra.cql3.functions.FunctionName", "org.apache.cassandra.cql3.functions.FunctionName.asNativeFunction()"], ["boolean", "org.apache.cassandra.cql3.functions.FunctionName.hasKeyspace()"], ["int", "org.apache.cassandra.cql3.functions.FunctionName.hashCode()"], ["boolean", "org.apache.cassandra.cql3.functions.FunctionName.equals(java.lang.Object)"], ["boolean", "org.apache.cassandra.cql3.functions.FunctionName.equalsNativeFunction(org.apache.cassandra.cql3.functions.FunctionName)"], ["java.lang.String", "org.apache.cassandra.cql3.functions.FunctionName.toString()"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.functions.FunctionResolver.makeArgSpec(java.lang.String, java.lang.String, org.apache.cassandra.cql3.functions.Function, int)"], ["org.apache.cassandra.cql3.functions.Function", "org.apache.cassandra.cql3.functions.FunctionResolver.get(java.lang.String, org.apache.cassandra.cql3.functions.FunctionName, java.util.List<? extends org.apache.cassandra.cql3.AssignmentTestable>, java.lang.String, java.lang.String, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["char[]", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.getFileName()"], ["char[]", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.getContents()"], ["char[]", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.getMainTypeName()"], ["char[][]", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.getPackageName()"], ["boolean", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.ignoreOptionalProblems()"], ["void", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.acceptResult(org.eclipse.jdt.internal.compiler.CompilationResult)"], ["org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.findType(char[][])"], ["org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.findType(char[], char[][])"], ["boolean", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.isPackage(char[][], char[])"], ["void", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit.cleanup()"], ["java.lang.String", "org.apache.cassandra.cql3.functions.JavaBasedUDFunction.javaSourceName(com.google.common.reflect.TypeToken<?>)"], ["boolean", "org.apache.cassandra.cql3.functions.NativeAggregateFunction.isAggregate()"], ["boolean", "org.apache.cassandra.cql3.functions.NativeFunction.isNative()"], ["boolean", "org.apache.cassandra.cql3.functions.NativeScalarFunction.isCalledOnNullInput()"], ["boolean", "org.apache.cassandra.cql3.functions.NativeScalarFunction.isAggregate()"], ["java.lang.Object", "org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper$1.call(java.lang.Object, java.lang.Object...)"], ["java.lang.Object", "org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper$2.call(java.lang.Object, java.lang.Object...)"], ["java.lang.Object", "org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper$3.call(java.lang.Object, java.lang.Object...)"], ["java.lang.Object", "org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper$4.call(java.lang.Object, java.lang.Object...)"], ["java.lang.Object", "org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper.getMember(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.ScriptBasedUDFunction.executeUserDefined(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$1.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$10.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$11.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$12.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$2.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$3.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$4.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$5.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$6.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$7.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$8.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TimeFcts$9.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.TimeFcts", "org.apache.cassandra.cql3.functions.TimeFcts()"], ["org.apache.cassandra.cql3.functions.ToJsonFct", "org.apache.cassandra.cql3.functions.ToJsonFct.getInstance(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.ToJsonFct.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.TokenFct", "org.apache.cassandra.cql3.functions.TokenFct(org.apache.cassandra.config.CFMetaData)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.TokenFct.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.UDAggregate$1.newAggregate()"], ["void", "org.apache.cassandra.cql3.functions.UDAggregate$2.addInput(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.UDAggregate$2.compute(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.functions.UDAggregate$2.reset()"], ["org.apache.cassandra.cql3.functions.UDAggregate", "org.apache.cassandra.cql3.functions.UDAggregate(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.cql3.functions.ScalarFunction, org.apache.cassandra.cql3.functions.ScalarFunction, java.nio.ByteBuffer)"], ["org.apache.cassandra.cql3.functions.UDAggregate", "org.apache.cassandra.cql3.functions.UDAggregate.create(org.apache.cassandra.schema.Functions, org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.cql3.functions.FunctionName, org.apache.cassandra.cql3.functions.FunctionName, org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer)"], ["org.apache.cassandra.cql3.functions.UDAggregate", "org.apache.cassandra.cql3.functions.UDAggregate.createBroken(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer, org.apache.cassandra.exceptions.InvalidRequestException)"], ["boolean", "org.apache.cassandra.cql3.functions.UDAggregate.hasReferenceTo(org.apache.cassandra.cql3.functions.Function)"], ["void", "org.apache.cassandra.cql3.functions.UDAggregate.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.functions.UDAggregate.isAggregate()"], ["boolean", "org.apache.cassandra.cql3.functions.UDAggregate.isNative()"], ["org.apache.cassandra.cql3.functions.ScalarFunction", "org.apache.cassandra.cql3.functions.UDAggregate.stateFunction()"], ["finalFunction()", "org.apache.cassandra.cql3.functions.UDAggregate."], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.UDAggregate.initialCondition()"], ["org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate", "org.apache.cassandra.cql3.functions.UDAggregate.newAggregate()"], ["boolean", "org.apache.cassandra.cql3.functions.UDAggregate.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.functions.UDAggregate.hashCode()"], ["org.objectweb.asm.FieldVisitor", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"], ["org.objectweb.asm.MethodVisitor", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"], ["void", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"], ["void", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)"], ["void", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ConstructorVisitor.visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object...)"], ["void", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ConstructorVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ConstructorVisitor.visitInsn(int)"], ["void", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ExecuteImplVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ExecuteImplVisitor.visitInsn(int)"], ["org.apache.cassandra.cql3.functions.UDFByteCodeVerifier", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier()"], ["org.apache.cassandra.cql3.functions.UDFByteCodeVerifier", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.addDisallowedClass(java.lang.String)"], ["org.apache.cassandra.cql3.functions.UDFByteCodeVerifier", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.addDisallowedMethodCall(java.lang.String, java.lang.String)"], ["org.apache.cassandra.cql3.functions.UDFByteCodeVerifier", "org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.addDisallowedPackage(java.lang.String)"], ["com.datastax.driver.core.UDTValue", "org.apache.cassandra.cql3.functions.UDFContextImpl.newArgUDTValue(java.lang.String)"], ["com.datastax.driver.core.UDTValue", "org.apache.cassandra.cql3.functions.UDFContextImpl.newArgUDTValue(int)"], ["com.datastax.driver.core.UDTValue", "org.apache.cassandra.cql3.functions.UDFContextImpl.newReturnUDTValue()"], ["com.datastax.driver.core.UDTValue", "org.apache.cassandra.cql3.functions.UDFContextImpl.newUDTValue(java.lang.String)"], ["com.datastax.driver.core.TupleValue", "org.apache.cassandra.cql3.functions.UDFContextImpl.newArgTupleValue(java.lang.String)"], ["com.datastax.driver.core.TupleValue", "org.apache.cassandra.cql3.functions.UDFContextImpl.newArgTupleValue(int)"], ["com.datastax.driver.core.TupleValue", "org.apache.cassandra.cql3.functions.UDFContextImpl.newReturnTupleValue()"], ["com.datastax.driver.core.TupleValue", "org.apache.cassandra.cql3.functions.UDFContextImpl.newTupleValue(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.UDFunction$1.executeUserDefined(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.net.URL", "org.apache.cassandra.cql3.functions.UDFunction$UDFClassLoader.getResource(java.lang.String)"], ["org.apache.cassandra.cql3.functions.UDFunction", "org.apache.cassandra.cql3.functions.UDFunction.create(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.cql3.ColumnIdentifier>, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, org.apache.cassandra.db.marshal.AbstractType<?>, boolean, java.lang.String, java.lang.String)"], ["org.apache.cassandra.cql3.functions.UDFunction", "org.apache.cassandra.cql3.functions.UDFunction.createBrokenFunction(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.cql3.ColumnIdentifier>, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, org.apache.cassandra.db.marshal.AbstractType<?>, boolean, java.lang.String, java.lang.String, org.apache.cassandra.exceptions.InvalidRequestException)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.UDFunction.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["java.lang.Object", "org.apache.cassandra.cql3.functions.UDFunction.executeForAggregate(org.apache.cassandra.transport.ProtocolVersion, java.lang.Object, java.util.List<java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.cql3.functions.UDFunction.assertUdfsEnabled(java.lang.String)"], ["boolean", "org.apache.cassandra.cql3.functions.UDFunction.isCallableWrtNullable(java.util.List<java.nio.ByteBuffer>)"], ["boolean", "org.apache.cassandra.cql3.functions.UDFunction.isAggregate()"], ["boolean", "org.apache.cassandra.cql3.functions.UDFunction.isNative()"], ["boolean", "org.apache.cassandra.cql3.functions.UDFunction.isCalledOnNullInput()"], ["java.lang.String", "org.apache.cassandra.cql3.functions.UDFunction.body()"], ["java.lang.String", "org.apache.cassandra.cql3.functions.UDFunction.language()"], ["boolean", "org.apache.cassandra.cql3.functions.UDFunction.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.functions.UDFunction.hashCode()"], ["void", "org.apache.cassandra.cql3.functions.UDFunction.userTypeUpdated(java.lang.String, java.lang.String)"], ["org.apache.cassandra.cql3.functions.UDHelper", "org.apache.cassandra.cql3.functions.UDHelper()"], ["com.datastax.driver.core.DataType[]", "org.apache.cassandra.cql3.functions.UDHelper.driverTypes(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["com.datastax.driver.core.DataType", "org.apache.cassandra.cql3.functions.UDHelper.driverType(org.apache.cassandra.db.marshal.AbstractType)"], ["com.datastax.driver.core.DataType", "org.apache.cassandra.cql3.functions.UDHelper.driverTypeFromAbstractType(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.cql3.functions.UDHelper.deserialize(com.datastax.driver.core.TypeCodec<?>, org.apache.cassandra.transport.ProtocolVersion, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.UDHelper.serialize(com.datastax.driver.core.TypeCodec<?>, org.apache.cassandra.transport.ProtocolVersion, java.lang.Object)"], ["boolean", "org.apache.cassandra.cql3.functions.UDHelper.isNullOrEmpty(org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.functions.UuidFcts$1.execute(org.apache.cassandra.transport.ProtocolVersion, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.cql3.functions.UuidFcts", "org.apache.cassandra.cql3.functions.UuidFcts()"], ["org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions", "org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions", "org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions(org.apache.cassandra.config.CFMetaData, boolean)"], ["org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions", "org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions.mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)"], ["boolean", "org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions.hasContains()"], ["boolean", "org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions.hasSlice()"], ["boolean", "org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions.needFiltering()"], ["void", "org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.CustomIndexExpression", "org.apache.cassandra.cql3.restrictions.CustomIndexExpression(org.apache.cassandra.cql3.IndexName, org.apache.cassandra.cql3.Term$Raw)"], ["void", "org.apache.cassandra.cql3.restrictions.CustomIndexExpression.prepareValue(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.cql3.VariableSpecifications)"], ["void", "org.apache.cassandra.cql3.restrictions.CustomIndexExpression.addToRowFilter(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.IndexRestrictions", "org.apache.cassandra.cql3.restrictions.IndexRestrictions()"], ["void", "org.apache.cassandra.cql3.restrictions.IndexRestrictions.add(org.apache.cassandra.cql3.restrictions.Restrictions)"], ["void", "org.apache.cassandra.cql3.restrictions.IndexRestrictions.add(org.apache.cassandra.cql3.restrictions.CustomIndexExpression)"], ["boolean", "org.apache.cassandra.cql3.restrictions.IndexRestrictions.isEmpty()"], ["org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction(java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction.toString()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction(java.util.List<org.apache.cassandra.config.ColumnDefinition>)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction.isIN()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithMarker", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithMarker(java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.AbstractMarker)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithMarker.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithMarker.toString()"], ["org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithValues", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithValues(java.util.List<org.apache.cassandra.config.ColumnDefinition>, java.util.List<org.apache.cassandra.cql3.Term>)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithValues.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithValues.toString()"], ["org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction(java.util.List<org.apache.cassandra.config.ColumnDefinition>)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction.isNotNull()"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction.toString()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction(java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.statements.Bound, boolean, org.apache.cassandra.cql3.Term)"], ["boolean", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.isSlice()"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.appendBoundTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.statements.Bound, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["void", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction.toString()"], ["org.apache.cassandra.cql3.restrictions.MultiColumnRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction(java.util.List<org.apache.cassandra.config.ColumnDefinition>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.isMultiColumn()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getFirstColumn()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getLastColumn()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.mergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["boolean", "org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)"], ["org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet", "org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet(org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions", "org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet.mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)"], ["boolean", "org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet.hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["boolean", "org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet.isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["void", "org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet.needFiltering(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet.hasUnrestrictedPartitionKeyComponents(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet.hasSlice()"], ["default", "org.apache.cassandra.cql3.restrictions.Restriction.boolean isOnToken()"], ["int", "org.apache.cassandra.cql3.restrictions.RestrictionSet$1.compare(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.config.ColumnDefinition)"], ["int", "org.apache.cassandra.cql3.restrictions.RestrictionSet$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.cql3.restrictions.RestrictionSet$DistinctIterator", "org.apache.cassandra.cql3.restrictions.RestrictionSet$DistinctIterator(java.util.Iterator<E>)"], ["org.apache.cassandra.cql3.restrictions.RestrictionSet", "org.apache.cassandra.cql3.restrictions.RestrictionSet()"], ["void", "org.apache.cassandra.cql3.restrictions.RestrictionSet.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.RestrictionSet.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSet.isEmpty()"], ["int", "org.apache.cassandra.cql3.restrictions.RestrictionSet.size()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSet.hasRestrictionFor(org.apache.cassandra.config.ColumnDefinition$Kind)"], ["org.apache.cassandra.cql3.restrictions.RestrictionSet", "org.apache.cassandra.cql3.restrictions.RestrictionSet.addRestriction(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSet.hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.RestrictionSet.getFirstColumn()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.RestrictionSet.getLastColumn()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSet.hasMultipleContains()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSet.hasIN()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSet.hasContains()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSet.hasSlice()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSet.hasOnlyEqualityRestrictions()"], ["org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper(org.apache.cassandra.cql3.restrictions.RestrictionSet)"], ["void", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.isEmpty()"], ["int", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.size()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.getFirstColumn()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.getLastColumn()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.hasIN()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.hasContains()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.hasSlice()"], ["boolean", "org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper.hasOnlyEqualityRestrictions()"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, boolean)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.isContains()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["int", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.numberOfValues()"], ["int", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.numberOfKeys()"], ["int", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.numberOfEntries()"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.toString()"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.appendBoundTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.statements.Bound, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction.isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction.isEQ()"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction.toString()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction.isIN()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithMarker", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithMarker(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.AbstractMarker)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithMarker.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithMarker.toString()"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithValues", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithValues(org.apache.cassandra.config.ColumnDefinition, java.util.List<org.apache.cassandra.cql3.Term>)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithValues.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithValues.toString()"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction.isNotNull()"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction.toString()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Operator, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction.isEQ()"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction.isLIKE()"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction.canBeConvertedToMultiColumnRestriction()"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction.toString()"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.statements.Bound, boolean, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.isSlice()"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.appendBoundTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.statements.Bound, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction.toString()"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction.bindValue(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction.appendBoundTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.statements.Bound, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestrictionWithMarkers", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestrictionWithMarkers(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.AbstractMarker)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestrictionWithValues", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestrictionWithValues(org.apache.cassandra.config.ColumnDefinition, java.util.List<org.apache.cassandra.cql3.Term>)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.statements.Bound, boolean, org.apache.cassandra.cql3.Term)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction.bindValue(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction.appendBoundTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.statements.Bound, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiEQRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiEQRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Term)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiEQRestriction.appendTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiSliceRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiSliceRestriction(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.statements.Bound, boolean, org.apache.cassandra.cql3.Term)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiSliceRestriction.appendBoundTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.statements.Bound, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.SingleColumnRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.getFirstColumn()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.getLastColumn()"], ["boolean", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)"], ["org.apache.cassandra.cql3.restrictions.SingleRestriction", "org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.mergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean isSlice()"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean isEQ()"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean isLIKE()"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean isIN()"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean isContains()"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean isNotNull()"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean isMultiColumn()"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["default", "org.apache.cassandra.cql3.restrictions.SingleRestriction.org.apache.cassandra.db.MultiCBuilder appendBoundTo(org.apache.cassandra.db.MultiCBuilder, org.apache.cassandra.cql3.statements.Bound, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.restrictions.StatementRestrictions", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.empty(org.apache.cassandra.cql3.statements.StatementType, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.restrictions.StatementRestrictions", "org.apache.cassandra.cql3.restrictions.StatementRestrictions(org.apache.cassandra.cql3.statements.StatementType, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.WhereClause, org.apache.cassandra.cql3.VariableSpecifications, boolean, boolean, boolean, boolean)"], ["void", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.restrictions.IndexRestrictions", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.getIndexRestrictions()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.isRestricted(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.keyIsInRelation()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.isKeyRange()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.isColumnRestrictedByEq(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.usesSecondaryIndexing()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasPartitionKeyRestrictions()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasNonPrimaryKeyRestrictions()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.isPartitionKeyRestrictionsOnToken()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.clusteringKeyRestrictionsHasIN()"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.getRowFilter(org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasClusteringColumnsRestrictions()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.isColumnRange()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.needFiltering()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasAllPKColumnsRestrictedByEqualities()"], ["boolean", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasRegularColumnsRestrictions()"], ["org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions", "org.apache.cassandra.cql3.restrictions.StatementRestrictions.getSuperColumnRestrictions()"], ["org.apache.cassandra.cql3.restrictions.TermSlice", "org.apache.cassandra.cql3.restrictions.TermSlice.newInstance(org.apache.cassandra.cql3.statements.Bound, boolean, org.apache.cassandra.cql3.Term)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.cql3.restrictions.TermSlice.bound(org.apache.cassandra.cql3.statements.Bound)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TermSlice.hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TermSlice.isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["org.apache.cassandra.cql3.restrictions.TermSlice", "org.apache.cassandra.cql3.restrictions.TermSlice.merge(org.apache.cassandra.cql3.restrictions.TermSlice)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.TermSlice.toString()"], ["org.apache.cassandra.cql3.Operator", "org.apache.cassandra.cql3.restrictions.TermSlice.getIndexOperator(org.apache.cassandra.cql3.statements.Bound)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TermSlice.isSupportedBy(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.index.Index)"], ["void", "org.apache.cassandra.cql3.restrictions.TermSlice.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.hasIN()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.hasContains()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.hasOnlyEqualityRestrictions()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.isOnToken()"], ["org.apache.cassandra.cql3.restrictions.TokenFilter", "org.apache.cassandra.cql3.restrictions.TokenFilter(org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions, org.apache.cassandra.cql3.restrictions.TokenRestriction)"], ["org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions", "org.apache.cassandra.cql3.restrictions.TokenFilter.mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.TokenFilter.getFirstColumn()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.TokenFilter.getLastColumn()"], ["void", "org.apache.cassandra.cql3.restrictions.TokenFilter.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)"], ["void", "org.apache.cassandra.cql3.restrictions.TokenFilter.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.isEmpty()"], ["int", "org.apache.cassandra.cql3.restrictions.TokenFilter.size()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.needFiltering(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.hasUnrestrictedPartitionKeyComponents(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenFilter.hasSlice()"], ["org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction", "org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.Term)"], ["void", "org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction.hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction.isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction.hasContains()"], ["org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction", "org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.statements.Bound, boolean, org.apache.cassandra.cql3.Term)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction.hasContains()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction.hasSlice()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction.hasBound(org.apache.cassandra.cql3.statements.Bound)"], ["void", "org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction.isInclusive(org.apache.cassandra.cql3.statements.Bound)"], ["java.lang.String", "org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction.toString()"], ["org.apache.cassandra.cql3.restrictions.TokenRestriction", "org.apache.cassandra.cql3.restrictions.TokenRestriction(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction.hasIN()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction.hasOnlyEqualityRestrictions()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction.isOnToken()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction.needFiltering(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction.hasSlice()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction.hasUnrestrictedPartitionKeyComponents(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.TokenRestriction.getFirstColumn()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.cql3.restrictions.TokenRestriction.getLastColumn()"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction.hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)"], ["void", "org.apache.cassandra.cql3.restrictions.TokenRestriction.addRowFilterTo(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.index.SecondaryIndexManager, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.restrictions.TokenRestriction.isEmpty()"], ["int", "org.apache.cassandra.cql3.restrictions.TokenRestriction.size()"], ["org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions", "org.apache.cassandra.cql3.restrictions.TokenRestriction.mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)"], ["void", "org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.selection.Selector", "org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1.newInstance(org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1.isWritetimeSelectorFactory()"], ["boolean", "org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1.isTTLSelectorFactory()"], ["boolean", "org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1.isAggregateSelectorFactory()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.AbstractFunctionSelector.newFactory(org.apache.cassandra.cql3.functions.Function, org.apache.cassandra.cql3.selection.SelectorFactories)"], ["java.lang.String", "org.apache.cassandra.cql3.selection.AbstractFunctionSelector.toString()"], ["boolean", "org.apache.cassandra.cql3.selection.AggregateFunctionSelector.isAggregate()"], ["void", "org.apache.cassandra.cql3.selection.AggregateFunctionSelector.addInput(org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.selection.AggregateFunctionSelector.getOutput(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.selection.AggregateFunctionSelector.reset()"], ["org.apache.cassandra.cql3.selection.Selector", "org.apache.cassandra.cql3.selection.FieldSelector$1.newInstance(org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.selection.FieldSelector$1.isAggregateSelectorFactory()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.FieldSelector.newFactory(org.apache.cassandra.db.marshal.UserType, int, org.apache.cassandra.cql3.selection.Selector$Factory)"], ["void", "org.apache.cassandra.cql3.selection.FieldSelector.addInput(org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.selection.FieldSelector.getOutput(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.selection.FieldSelector.reset()"], ["java.lang.String", "org.apache.cassandra.cql3.selection.FieldSelector.toString()"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.cql3.selection.RawSelector$1.apply(org.apache.cassandra.cql3.selection.RawSelector)"], ["java.lang.Object", "org.apache.cassandra.cql3.selection.RawSelector$1.apply(java.lang.Object)"], ["org.apache.cassandra.cql3.selection.RawSelector", "org.apache.cassandra.cql3.selection.RawSelector(org.apache.cassandra.cql3.selection.Selectable$Raw, org.apache.cassandra.cql3.ColumnIdentifier)"], ["boolean", "org.apache.cassandra.cql3.selection.RawSelector.processesSelection()"], ["boolean", "org.apache.cassandra.cql3.selection.ScalarFunctionSelector.isAggregate()"], ["void", "org.apache.cassandra.cql3.selection.ScalarFunctionSelector.addInput(org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)"], ["void", "org.apache.cassandra.cql3.selection.ScalarFunctionSelector.reset()"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.selection.ScalarFunctionSelector.getOutput(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.selection.Selectable$Raw", "org.apache.cassandra.cql3.selection.Selectable$Raw()"], ["boolean", "org.apache.cassandra.cql3.selection.Selectable$Raw.processesSelection()"], ["org.apache.cassandra.cql3.selection.Selectable$WithCast$Raw", "org.apache.cassandra.cql3.selection.Selectable$WithCast$Raw(org.apache.cassandra.cql3.selection.Selectable$Raw, org.apache.cassandra.cql3.CQL3Type)"], ["org.apache.cassandra.cql3.selection.Selectable$WithCast", "org.apache.cassandra.cql3.selection.Selectable$WithCast$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.cql3.selection.Selectable$WithCast$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selectable$WithCast", "org.apache.cassandra.cql3.selection.Selectable$WithCast(org.apache.cassandra.cql3.selection.Selectable, org.apache.cassandra.cql3.CQL3Type)"], ["java.lang.String", "org.apache.cassandra.cql3.selection.Selectable$WithCast.toString()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.Selectable$WithCast.newSelectorFactory(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.marshal.AbstractType<?>, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection$Raw", "org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection$Raw(org.apache.cassandra.cql3.selection.Selectable$Raw, org.apache.cassandra.cql3.FieldIdentifier)"], ["org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection", "org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection", "org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection(org.apache.cassandra.cql3.selection.Selectable, org.apache.cassandra.cql3.FieldIdentifier)"], ["java.lang.String", "org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection.toString()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection.newSelectorFactory(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.marshal.AbstractType<?>, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw", "org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.cql3.selection.Selectable$Raw>)"], ["org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw", "org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw.newCountRowsFunction()"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selectable$WithFunction", "org.apache.cassandra.cql3.selection.Selectable$WithFunction(org.apache.cassandra.cql3.functions.Function, java.util.List<org.apache.cassandra.cql3.selection.Selectable>)"], ["java.lang.String", "org.apache.cassandra.cql3.selection.Selectable$WithFunction.toString()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.Selectable$WithFunction.newSelectorFactory(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.marshal.AbstractType<?>, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.selection.Selectable$WithTerm$Raw", "org.apache.cassandra.cql3.selection.Selectable$WithTerm$Raw(org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.cql3.selection.Selectable$WithTerm$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selectable$WithTerm", "org.apache.cassandra.cql3.selection.Selectable$WithTerm(org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.cql3.selection.Selectable$WithTerm.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.Selectable$WithTerm.newSelectorFactory(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.marshal.AbstractType<?>, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["java.lang.String", "org.apache.cassandra.cql3.selection.Selectable$WithTerm.toString()"], ["java.lang.String", "org.apache.cassandra.cql3.selection.Selectable$WithToJSonFunction.toString()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.Selectable$WithToJSonFunction.newSelectorFactory(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.marshal.AbstractType<?>, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL$Raw", "org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL$Raw(org.apache.cassandra.config.ColumnDefinition$Raw, boolean)"], ["org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL", "org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selectable", "org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL", "org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL(org.apache.cassandra.config.ColumnDefinition, boolean)"], ["java.lang.String", "org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL.toString()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL.newSelectorFactory(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.marshal.AbstractType<?>, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["default", "org.apache.cassandra.cql3.selection.Selectable.org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["default", "org.apache.cassandra.cql3.selection.Selectable.int addAndGetIndex(org.apache.cassandra.config.ColumnDefinition, java.util.List<org.apache.cassandra.config.ColumnDefinition>)"], ["boolean", "org.apache.cassandra.cql3.selection.Selection$1.apply(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.selection.Selection$1.apply(java.lang.Object)"], ["void", "org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder.add(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder.add(org.apache.cassandra.db.rows.Cell, int)"], ["void", "org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder.newRow(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.cql3.ResultSet", "org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder.build()"], ["void", "org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing$1.reset()"], ["boolean", "org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing$1.isAggregate()"], ["void", "org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing$1.addInputRow(org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)"], ["org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing", "org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.selection.SelectionColumnMapping, org.apache.cassandra.cql3.selection.SelectorFactories)"], ["void", "org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["int", "org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing.getResultSetIndex(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing.isAggregate()"], ["void", "org.apache.cassandra.cql3.selection.Selection$SimpleSelection$1.reset()"], ["void", "org.apache.cassandra.cql3.selection.Selection$SimpleSelection$1.addInputRow(org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)"], ["boolean", "org.apache.cassandra.cql3.selection.Selection$SimpleSelection$1.isAggregate()"], ["org.apache.cassandra.cql3.selection.Selection$SimpleSelection", "org.apache.cassandra.cql3.selection.Selection$SimpleSelection(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>, boolean)"], ["org.apache.cassandra.cql3.selection.Selection$SimpleSelection", "org.apache.cassandra.cql3.selection.Selection$SimpleSelection(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.selection.SelectionColumnMapping, boolean)"], ["boolean", "org.apache.cassandra.cql3.selection.Selection$SimpleSelection.isWildcard()"], ["boolean", "org.apache.cassandra.cql3.selection.Selection$SimpleSelection.isAggregate()"], ["boolean", "org.apache.cassandra.cql3.selection.Selection.isWildcard()"], ["boolean", "org.apache.cassandra.cql3.selection.Selection.containsStaticColumns()"], ["boolean", "org.apache.cassandra.cql3.selection.Selection.containsOnlyStaticColumns()"], ["boolean", "org.apache.cassandra.cql3.selection.Selection.containsAComplexColumn()"], ["java.util.Map<org.apache.cassandra.config.ColumnDefinition, java.lang.Integer>", "org.apache.cassandra.cql3.selection.Selection.getOrderingIndex(boolean)"], ["org.apache.cassandra.cql3.ResultSet$ResultMetadata", "org.apache.cassandra.cql3.selection.Selection.getResultMetadata(boolean)"], ["org.apache.cassandra.cql3.selection.Selection", "org.apache.cassandra.cql3.selection.Selection.wildcard(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.selection.Selection", "org.apache.cassandra.cql3.selection.Selection.wildcardWithGroupBy(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.VariableSpecifications)"], ["org.apache.cassandra.cql3.selection.Selection", "org.apache.cassandra.cql3.selection.Selection.forColumns(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>)"], ["void", "org.apache.cassandra.cql3.selection.Selection.addColumnForOrdering(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.cql3.selection.Selection.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.selection.Selection", "org.apache.cassandra.cql3.selection.Selection.fromSelectors(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.cql3.selection.RawSelector>, org.apache.cassandra.cql3.VariableSpecifications, boolean)"], ["int", "org.apache.cassandra.cql3.selection.Selection.getResultSetIndex(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.cql3.selection.SelectionColumns", "org.apache.cassandra.cql3.selection.Selection.getColumnMapping()"], ["org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder", "org.apache.cassandra.cql3.selection.Selection.resultSetBuilder(org.apache.cassandra.cql3.QueryOptions, boolean)"], ["org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder", "org.apache.cassandra.cql3.selection.Selection.resultSetBuilder(org.apache.cassandra.cql3.QueryOptions, boolean, org.apache.cassandra.db.aggregation.AggregationSpecification)"], ["java.lang.String", "org.apache.cassandra.cql3.selection.Selection.toString()"], ["com.google.common.collect.Multimap<org.apache.cassandra.cql3.ColumnSpecification, org.apache.cassandra.config.ColumnDefinition>", "org.apache.cassandra.cql3.selection.SelectionColumnMapping.getMappings()"], ["boolean", "org.apache.cassandra.cql3.selection.SelectionColumnMapping.equals(java.lang.Object)"], ["int", "org.apache.cassandra.cql3.selection.SelectionColumnMapping.hashCode()"], ["java.lang.String", "org.apache.cassandra.cql3.selection.SelectionColumnMapping.toString()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.Selector$Factory()"], ["void", "org.apache.cassandra.cql3.selection.Selector$Factory.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.cql3.selection.Selector$Factory.getColumnSpecification(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.cql3.selection.Selector$Factory.isAggregateSelectorFactory()"], ["boolean", "org.apache.cassandra.cql3.selection.Selector$Factory.isWritetimeSelectorFactory()"], ["boolean", "org.apache.cassandra.cql3.selection.Selector$Factory.isTTLSelectorFactory()"], ["boolean", "org.apache.cassandra.cql3.selection.Selector$Factory.isSimpleSelectorFactory(int)"], ["org.apache.cassandra.cql3.selection.Selector", "org.apache.cassandra.cql3.selection.Selector()"], ["boolean", "org.apache.cassandra.cql3.selection.Selector.isAggregate()"], ["java.lang.String", "org.apache.cassandra.cql3.selection.SelectorFactories$1.apply(org.apache.cassandra.cql3.selection.Selector$Factory)"], ["java.lang.Object", "org.apache.cassandra.cql3.selection.SelectorFactories$1.apply(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.cql3.selection.SelectorFactories$2.apply(java.lang.Object)"], ["org.apache.cassandra.cql3.selection.SelectorFactories", "org.apache.cassandra.cql3.selection.SelectorFactories.createFactoriesAndCollectColumnDefinitions(java.util.List<org.apache.cassandra.cql3.selection.Selectable>, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.cql3.VariableSpecifications)"], ["void", "org.apache.cassandra.cql3.selection.SelectorFactories.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.SelectorFactories.get(int)"], ["void", "org.apache.cassandra.cql3.selection.SelectorFactories.addSelectorForOrdering(org.apache.cassandra.config.ColumnDefinition, int)"], ["boolean", "org.apache.cassandra.cql3.selection.SelectorFactories.doesAggregation()"], ["boolean", "org.apache.cassandra.cql3.selection.SelectorFactories.containsWritetimeSelectorFactory()"], ["boolean", "org.apache.cassandra.cql3.selection.SelectorFactories.containsTTLSelectorFactory()"], ["int", "org.apache.cassandra.cql3.selection.SelectorFactories.size()"], ["org.apache.cassandra.cql3.selection.Selector", "org.apache.cassandra.cql3.selection.SimpleSelector$1.newInstance(org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.selection.SimpleSelector$1.isSimpleSelectorFactory(int)"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.SimpleSelector.newFactory(org.apache.cassandra.config.ColumnDefinition, int)"], ["void", "org.apache.cassandra.cql3.selection.SimpleSelector.addInput(org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.selection.SimpleSelector.getOutput(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.selection.SimpleSelector.reset()"], ["java.lang.String", "org.apache.cassandra.cql3.selection.SimpleSelector.toString()"], ["org.apache.cassandra.cql3.selection.Selector", "org.apache.cassandra.cql3.selection.TermSelector$1.newInstance(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.TermSelector.newFactory(java.lang.String, org.apache.cassandra.cql3.Term, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["void", "org.apache.cassandra.cql3.selection.TermSelector.addInput(org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.selection.TermSelector.getOutput(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.selection.TermSelector.reset()"], ["org.apache.cassandra.cql3.selection.Selector", "org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1.newInstance(org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1.isWritetimeSelectorFactory()"], ["boolean", "org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1.isTTLSelectorFactory()"], ["org.apache.cassandra.cql3.selection.Selector$Factory", "org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.newFactory(org.apache.cassandra.config.ColumnDefinition, int, boolean)"], ["void", "org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.addInput(org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.getOutput(org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.reset()"], ["java.lang.String", "org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.toString()"], ["org.apache.cassandra.cql3.statements.AlterKeyspaceStatement", "org.apache.cassandra.cql3.statements.AlterKeyspaceStatement(java.lang.String, org.apache.cassandra.cql3.statements.KeyspaceAttributes)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.keyspace()"], ["void", "org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.AlterRoleStatement", "org.apache.cassandra.cql3.statements.AlterRoleStatement(org.apache.cassandra.cql3.RoleName, org.apache.cassandra.auth.RoleOptions)"], ["void", "org.apache.cassandra.cql3.statements.AlterRoleStatement.validate(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.AlterRoleStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.AlterRoleStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.AlterTableStatement$Type[]", "org.apache.cassandra.cql3.statements.AlterTableStatement$Type.values()"], ["org.apache.cassandra.cql3.statements.AlterTableStatement$Type", "org.apache.cassandra.cql3.statements.AlterTableStatement$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.cql3.statements.AlterTableStatement", "org.apache.cassandra.cql3.statements.AlterTableStatement(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.statements.AlterTableStatement$Type, java.util.List<org.apache.cassandra.cql3.statements.AlterTableStatementColumn>, org.apache.cassandra.cql3.statements.TableAttributes, java.util.Map<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.config.ColumnDefinition$Raw>, java.lang.Long)"], ["void", "org.apache.cassandra.cql3.statements.AlterTableStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.AlterTableStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.AlterTableStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.AlterTableStatement.toString()"], ["org.apache.cassandra.cql3.statements.AlterTableStatementColumn", "org.apache.cassandra.cql3.statements.AlterTableStatementColumn(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.CQL3Type$Raw, boolean)"], ["org.apache.cassandra.cql3.statements.AlterTableStatementColumn", "org.apache.cassandra.cql3.statements.AlterTableStatementColumn(org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.CQL3Type$Raw)"], ["org.apache.cassandra.cql3.statements.AlterTableStatementColumn", "org.apache.cassandra.cql3.statements.AlterTableStatementColumn(org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.CQL3Type$Raw", "org.apache.cassandra.cql3.statements.AlterTableStatementColumn.getColumnType()"], ["org.apache.cassandra.config.ColumnDefinition$Raw", "org.apache.cassandra.cql3.statements.AlterTableStatementColumn.getColumnName()"], ["java.lang.Boolean", "org.apache.cassandra.cql3.statements.AlterTableStatementColumn.getStaticType()"], ["org.apache.cassandra.cql3.statements.AlterTypeStatement$Add", "org.apache.cassandra.cql3.statements.AlterTypeStatement$Add(org.apache.cassandra.cql3.UTName, org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.CQL3Type$Raw)"], ["org.apache.cassandra.cql3.statements.AlterTypeStatement$Renames", "org.apache.cassandra.cql3.statements.AlterTypeStatement$Renames(org.apache.cassandra.cql3.UTName, java.util.Map<org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.FieldIdentifier>)"], ["void", "org.apache.cassandra.cql3.statements.AlterTypeStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.AlterTypeStatement", "org.apache.cassandra.cql3.statements.AlterTypeStatement.addition(org.apache.cassandra.cql3.UTName, org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.CQL3Type$Raw)"], ["org.apache.cassandra.cql3.statements.AlterTypeStatement", "org.apache.cassandra.cql3.statements.AlterTypeStatement.alter(org.apache.cassandra.cql3.UTName, org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.CQL3Type$Raw)"], ["org.apache.cassandra.cql3.statements.AlterTypeStatement", "org.apache.cassandra.cql3.statements.AlterTypeStatement.renames(org.apache.cassandra.cql3.UTName, java.util.Map<org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.FieldIdentifier>)"], ["void", "org.apache.cassandra.cql3.statements.AlterTypeStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.AlterTypeStatement.validate(org.apache.cassandra.service.ClientState)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.AlterTypeStatement.keyspace()"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.AlterTypeStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.AlterViewStatement", "org.apache.cassandra.cql3.statements.AlterViewStatement(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.statements.TableAttributes)"], ["void", "org.apache.cassandra.cql3.statements.AlterViewStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.AlterViewStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.AlterViewStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.AlterViewStatement.toString()"], ["org.apache.cassandra.cql3.statements.AuthenticationStatement", "org.apache.cassandra.cql3.statements.AuthenticationStatement()"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.AuthenticationStatement.prepare(org.apache.cassandra.service.ClientState)"], ["int", "org.apache.cassandra.cql3.statements.AuthenticationStatement.getBoundTerms()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.AuthenticationStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.AuthenticationStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.statements.AuthenticationStatement.checkPermission(org.apache.cassandra.service.ClientState, org.apache.cassandra.auth.Permission, org.apache.cassandra.auth.RoleResource)"], ["org.apache.cassandra.cql3.statements.AuthorizationStatement", "org.apache.cassandra.cql3.statements.AuthorizationStatement()"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.AuthorizationStatement.prepare(org.apache.cassandra.service.ClientState)"], ["int", "org.apache.cassandra.cql3.statements.AuthorizationStatement.getBoundTerms()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.AuthorizationStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.AuthorizationStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.auth.IResource", "org.apache.cassandra.cql3.statements.AuthorizationStatement.maybeCorrectResource(org.apache.cassandra.auth.IResource, org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.BatchStatement$MultiTableColumnsBuilder.addAll(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.PartitionColumns)"], ["java.util.Map<java.util.UUID, org.apache.cassandra.db.PartitionColumns>", "org.apache.cassandra.cql3.statements.BatchStatement$MultiTableColumnsBuilder.build()"], ["org.apache.cassandra.cql3.statements.BatchStatement$Parsed", "org.apache.cassandra.cql3.statements.BatchStatement$Parsed(org.apache.cassandra.cql3.statements.BatchStatement$Type, org.apache.cassandra.cql3.Attributes$Raw, java.util.List<org.apache.cassandra.cql3.statements.ModificationStatement$Parsed>)"], ["void", "org.apache.cassandra.cql3.statements.BatchStatement$Parsed.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.BatchStatement$Parsed.prepare(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.BatchStatement$Type[]", "org.apache.cassandra.cql3.statements.BatchStatement$Type.values()"], ["org.apache.cassandra.cql3.statements.BatchStatement$Type", "org.apache.cassandra.cql3.statements.BatchStatement$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.cql3.statements.BatchStatement", "org.apache.cassandra.cql3.statements.BatchStatement(int, org.apache.cassandra.cql3.statements.BatchStatement$Type, java.util.List<org.apache.cassandra.cql3.statements.ModificationStatement>, org.apache.cassandra.cql3.Attributes)"], ["int", "org.apache.cassandra.cql3.statements.BatchStatement.getBoundTerms()"], ["void", "org.apache.cassandra.cql3.statements.BatchStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.BatchStatement.validate()"], ["void", "org.apache.cassandra.cql3.statements.BatchStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.BatchStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.BatchStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.BatchQueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.BatchStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.BatchStatement.toString()"], ["org.apache.cassandra.cql3.statements.Bound[]", "org.apache.cassandra.cql3.statements.Bound.values()"], ["org.apache.cassandra.cql3.statements.Bound", "org.apache.cassandra.cql3.statements.Bound.valueOf(java.lang.String)"], ["org.apache.cassandra.cql3.statements.Bound", "org.apache.cassandra.cql3.statements.Bound.reverseIfNeeded(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.cql3.statements.Bound", "org.apache.cassandra.cql3.statements.Bound.reverse()"], ["boolean", "org.apache.cassandra.cql3.statements.Bound.isStart()"], ["boolean", "org.apache.cassandra.cql3.statements.Bound.isEnd()"], ["org.apache.cassandra.cql3.statements.CFProperties", "org.apache.cassandra.cql3.statements.CFProperties()"], ["void", "org.apache.cassandra.cql3.statements.CFProperties.validate()"], ["void", "org.apache.cassandra.cql3.statements.CFProperties.setOrdering(org.apache.cassandra.cql3.ColumnIdentifier, boolean)"], ["void", "org.apache.cassandra.cql3.statements.CFProperties.setCompactStorage()"], ["org.apache.cassandra.db.marshal.AbstractType", "org.apache.cassandra.cql3.statements.CFProperties.getReversableType(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["void", "org.apache.cassandra.cql3.statements.CFStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CFStatement.prepareKeyspace(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.CFStatement.keyspace()"], ["java.lang.String", "org.apache.cassandra.cql3.statements.CFStatement.columnFamily()"], ["void", "org.apache.cassandra.cql3.statements.CQL3CasRequest$ColumnsConditions.addConditions(java.util.Collection<org.apache.cassandra.cql3.ColumnCondition>, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.statements.CQL3CasRequest$ColumnsConditions.appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)"], ["boolean", "org.apache.cassandra.cql3.statements.CQL3CasRequest$ExistCondition.appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)"], ["boolean", "org.apache.cassandra.cql3.statements.CQL3CasRequest$NotExistCondition.appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)"], ["void", "org.apache.cassandra.cql3.statements.CQL3CasRequest$RangeDeletion.applyUpdates(org.apache.cassandra.db.partitions.FilteredPartition, org.apache.cassandra.db.partitions.PartitionUpdate)"], ["void", "org.apache.cassandra.cql3.statements.CQL3CasRequest$RowUpdate.applyUpdates(org.apache.cassandra.db.partitions.FilteredPartition, org.apache.cassandra.db.partitions.PartitionUpdate)"], ["org.apache.cassandra.cql3.statements.CQL3CasRequest", "org.apache.cassandra.cql3.statements.CQL3CasRequest(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, boolean, org.apache.cassandra.db.PartitionColumns, boolean, boolean)"], ["void", "org.apache.cassandra.cql3.statements.CQL3CasRequest.addRowUpdate(org.apache.cassandra.db.Clustering, org.apache.cassandra.cql3.statements.ModificationStatement, org.apache.cassandra.cql3.QueryOptions, long)"], ["void", "org.apache.cassandra.cql3.statements.CQL3CasRequest.addRangeDeletion(org.apache.cassandra.db.Slice, org.apache.cassandra.cql3.statements.ModificationStatement, org.apache.cassandra.cql3.QueryOptions, long)"], ["void", "org.apache.cassandra.cql3.statements.CQL3CasRequest.addNotExist(org.apache.cassandra.db.Clustering)"], ["void", "org.apache.cassandra.cql3.statements.CQL3CasRequest.addExist(org.apache.cassandra.db.Clustering)"], ["void", "org.apache.cassandra.cql3.statements.CQL3CasRequest.addConditions(org.apache.cassandra.db.Clustering, java.util.Collection<org.apache.cassandra.cql3.ColumnCondition>, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.cql3.statements.CQL3CasRequest.readCommand(int)"], ["boolean", "org.apache.cassandra.cql3.statements.CQL3CasRequest.appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.cql3.statements.CQL3CasRequest.makeUpdates(org.apache.cassandra.db.partitions.FilteredPartition)"], ["org.apache.cassandra.cql3.statements.CreateAggregateStatement", "org.apache.cassandra.cql3.statements.CreateAggregateStatement(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.cql3.CQL3Type$Raw>, java.lang.String, org.apache.cassandra.cql3.CQL3Type$Raw, java.lang.String, org.apache.cassandra.cql3.Term$Raw, boolean, boolean)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepare(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateAggregateStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateAggregateStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.CreateAggregateStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.CreateFunctionStatement", "org.apache.cassandra.cql3.statements.CreateFunctionStatement(org.apache.cassandra.cql3.functions.FunctionName, java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.cql3.ColumnIdentifier>, java.util.List<org.apache.cassandra.cql3.CQL3Type$Raw>, org.apache.cassandra.cql3.CQL3Type$Raw, boolean, boolean, boolean)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepare(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateFunctionStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateFunctionStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.CreateFunctionStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.CreateIndexStatement", "org.apache.cassandra.cql3.statements.CreateIndexStatement(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.IndexName, java.util.List<org.apache.cassandra.cql3.statements.IndexTarget$Raw>, org.apache.cassandra.cql3.statements.IndexPropDefs, boolean)"], ["void", "org.apache.cassandra.cql3.statements.CreateIndexStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateIndexStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.CreateIndexStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.CreateKeyspaceStatement", "org.apache.cassandra.cql3.statements.CreateKeyspaceStatement(java.lang.String, org.apache.cassandra.cql3.statements.KeyspaceAttributes, boolean)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.keyspace()"], ["void", "org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.CreateRoleStatement", "org.apache.cassandra.cql3.statements.CreateRoleStatement(org.apache.cassandra.cql3.RoleName, org.apache.cassandra.auth.RoleOptions, boolean)"], ["void", "org.apache.cassandra.cql3.statements.CreateRoleStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateRoleStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.CreateRoleStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement", "org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement(org.apache.cassandra.cql3.CFName, boolean)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement.prepare(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement.prepare(org.apache.cassandra.schema.Types)"], ["void", "org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement.addDefinition(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.cql3.CQL3Type$Raw, boolean)"], ["void", "org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement.addKeyAliases(java.util.List<org.apache.cassandra.cql3.ColumnIdentifier>)"], ["void", "org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement.addColumnAlias(org.apache.cassandra.cql3.ColumnIdentifier)"], ["org.apache.cassandra.cql3.statements.CreateTableStatement", "org.apache.cassandra.cql3.statements.CreateTableStatement(org.apache.cassandra.cql3.CFName, org.apache.cassandra.schema.TableParams, boolean, java.util.Set<org.apache.cassandra.cql3.ColumnIdentifier>, java.util.UUID)"], ["void", "org.apache.cassandra.cql3.statements.CreateTableStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateTableStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.CreateTableStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.cql3.statements.CreateTableStatement.metadataBuilder()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.cql3.statements.CreateTableStatement.getCFMetaData()"], ["org.apache.cassandra.schema.TableParams", "org.apache.cassandra.cql3.statements.CreateTableStatement.params()"], ["org.apache.cassandra.cql3.statements.CreateTriggerStatement", "org.apache.cassandra.cql3.statements.CreateTriggerStatement(org.apache.cassandra.cql3.CFName, java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.cql3.statements.CreateTriggerStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateTriggerStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.CreateTriggerStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.CreateTypeStatement", "org.apache.cassandra.cql3.statements.CreateTypeStatement(org.apache.cassandra.cql3.UTName, boolean)"], ["void", "org.apache.cassandra.cql3.statements.CreateTypeStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateTypeStatement.addDefinition(org.apache.cassandra.cql3.FieldIdentifier, org.apache.cassandra.cql3.CQL3Type$Raw)"], ["void", "org.apache.cassandra.cql3.statements.CreateTypeStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateTypeStatement.validate(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateTypeStatement.checkForDuplicateNames(org.apache.cassandra.db.marshal.UserType)"], ["void", "org.apache.cassandra.cql3.statements.CreateTypeStatement.addToRawBuilder(org.apache.cassandra.schema.Types$RawBuilder)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.CreateTypeStatement.keyspace()"], ["org.apache.cassandra.db.marshal.UserType", "org.apache.cassandra.cql3.statements.CreateTypeStatement.createType()"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.CreateTypeStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.CreateViewStatement", "org.apache.cassandra.cql3.statements.CreateViewStatement(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.CFName, java.util.List<org.apache.cassandra.cql3.selection.RawSelector>, org.apache.cassandra.cql3.WhereClause, java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, boolean)"], ["void", "org.apache.cassandra.cql3.statements.CreateViewStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.CreateViewStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.CreateViewStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.DeleteStatement$Parsed", "org.apache.cassandra.cql3.statements.DeleteStatement$Parsed(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.Attributes$Raw, java.util.List<org.apache.cassandra.cql3.Operation$RawDeletion>, org.apache.cassandra.cql3.WhereClause, java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.ColumnCondition$Raw>>, boolean)"], ["void", "org.apache.cassandra.cql3.statements.DeleteStatement.addUpdateForKey(org.apache.cassandra.db.partitions.PartitionUpdate, org.apache.cassandra.db.Clustering, org.apache.cassandra.cql3.UpdateParameters)"], ["void", "org.apache.cassandra.cql3.statements.DeleteStatement.addUpdateForKey(org.apache.cassandra.db.partitions.PartitionUpdate, org.apache.cassandra.db.Slice, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.statements.DropAggregateStatement", "org.apache.cassandra.cql3.statements.DropAggregateStatement(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.cql3.CQL3Type$Raw>, boolean, boolean)"], ["void", "org.apache.cassandra.cql3.statements.DropAggregateStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropAggregateStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropAggregateStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.DropAggregateStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.DropFunctionStatement", "org.apache.cassandra.cql3.statements.DropFunctionStatement(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.cql3.CQL3Type$Raw>, boolean, boolean)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.DropFunctionStatement.prepare(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropFunctionStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropFunctionStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropFunctionStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.DropFunctionStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.DropIndexStatement", "org.apache.cassandra.cql3.statements.DropIndexStatement(org.apache.cassandra.cql3.IndexName, boolean)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.DropIndexStatement.columnFamily()"], ["void", "org.apache.cassandra.cql3.statements.DropIndexStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropIndexStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.DropIndexStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.DropIndexStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.DropKeyspaceStatement", "org.apache.cassandra.cql3.statements.DropKeyspaceStatement(java.lang.String, boolean)"], ["void", "org.apache.cassandra.cql3.statements.DropKeyspaceStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropKeyspaceStatement.validate(org.apache.cassandra.service.ClientState)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.DropKeyspaceStatement.keyspace()"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.DropKeyspaceStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.DropRoleStatement", "org.apache.cassandra.cql3.statements.DropRoleStatement(org.apache.cassandra.cql3.RoleName, boolean)"], ["void", "org.apache.cassandra.cql3.statements.DropRoleStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropRoleStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.DropRoleStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.DropTableStatement", "org.apache.cassandra.cql3.statements.DropTableStatement(org.apache.cassandra.cql3.CFName, boolean)"], ["void", "org.apache.cassandra.cql3.statements.DropTableStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropTableStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.DropTableStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.DropTriggerStatement", "org.apache.cassandra.cql3.statements.DropTriggerStatement(org.apache.cassandra.cql3.CFName, java.lang.String, boolean)"], ["void", "org.apache.cassandra.cql3.statements.DropTriggerStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropTriggerStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.DropTriggerStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.DropTypeStatement", "org.apache.cassandra.cql3.statements.DropTypeStatement(org.apache.cassandra.cql3.UTName, boolean)"], ["void", "org.apache.cassandra.cql3.statements.DropTypeStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropTypeStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropTypeStatement.validate(org.apache.cassandra.service.ClientState)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.DropTypeStatement.keyspace()"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.DropTypeStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.DropViewStatement", "org.apache.cassandra.cql3.statements.DropViewStatement(org.apache.cassandra.cql3.CFName, boolean)"], ["void", "org.apache.cassandra.cql3.statements.DropViewStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.DropViewStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.cql3.statements.DropViewStatement.announceMigration(org.apache.cassandra.service.QueryState, boolean)"], ["org.apache.cassandra.cql3.statements.GrantPermissionsStatement", "org.apache.cassandra.cql3.statements.GrantPermissionsStatement(java.util.Set<org.apache.cassandra.auth.Permission>, org.apache.cassandra.auth.IResource, org.apache.cassandra.cql3.RoleName)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.GrantPermissionsStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.GrantRoleStatement", "org.apache.cassandra.cql3.statements.GrantRoleStatement(org.apache.cassandra.cql3.RoleName, org.apache.cassandra.cql3.RoleName)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.GrantRoleStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.IndexPropDefs", "org.apache.cassandra.cql3.statements.IndexPropDefs()"], ["void", "org.apache.cassandra.cql3.statements.IndexPropDefs.validate()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.cql3.statements.IndexPropDefs.getRawOptions()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.cql3.statements.IndexPropDefs.getOptions()"], ["org.apache.cassandra.cql3.statements.IndexTarget$Raw", "org.apache.cassandra.cql3.statements.IndexTarget$Raw.simpleIndexOn(org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.statements.IndexTarget$Raw", "org.apache.cassandra.cql3.statements.IndexTarget$Raw.valuesOf(org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.statements.IndexTarget$Raw", "org.apache.cassandra.cql3.statements.IndexTarget$Raw.keysOf(org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.statements.IndexTarget$Raw", "org.apache.cassandra.cql3.statements.IndexTarget$Raw.keysAndValuesOf(org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.statements.IndexTarget$Raw", "org.apache.cassandra.cql3.statements.IndexTarget$Raw.fullCollection(org.apache.cassandra.config.ColumnDefinition$Raw)"], ["org.apache.cassandra.cql3.statements.IndexTarget", "org.apache.cassandra.cql3.statements.IndexTarget$Raw.prepare(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.statements.IndexTarget$Type[]", "org.apache.cassandra.cql3.statements.IndexTarget$Type.values()"], ["org.apache.cassandra.cql3.statements.IndexTarget$Type", "org.apache.cassandra.cql3.statements.IndexTarget$Type.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.IndexTarget$Type.toString()"], ["org.apache.cassandra.cql3.statements.IndexTarget$Type", "org.apache.cassandra.cql3.statements.IndexTarget$Type.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.statements.IndexTarget", "org.apache.cassandra.cql3.statements.IndexTarget(org.apache.cassandra.cql3.ColumnIdentifier, org.apache.cassandra.cql3.statements.IndexTarget$Type)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.IndexTarget.asCqlString(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.cql3.statements.KeyspaceAttributes", "org.apache.cassandra.cql3.statements.KeyspaceAttributes()"], ["void", "org.apache.cassandra.cql3.statements.KeyspaceAttributes.validate()"], ["java.lang.String", "org.apache.cassandra.cql3.statements.KeyspaceAttributes.getReplicationStrategyClass()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.cql3.statements.KeyspaceAttributes.getReplicationOptions()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.cql3.statements.KeyspaceAttributes.getAllReplicationOptions()"], ["org.apache.cassandra.schema.KeyspaceParams", "org.apache.cassandra.cql3.statements.KeyspaceAttributes.asNewKeyspaceParams()"], ["org.apache.cassandra.schema.KeyspaceParams", "org.apache.cassandra.cql3.statements.KeyspaceAttributes.asAlteredKeyspaceParams(org.apache.cassandra.schema.KeyspaceParams)"], ["org.apache.cassandra.cql3.statements.ListPermissionsStatement", "org.apache.cassandra.cql3.statements.ListPermissionsStatement(java.util.Set<org.apache.cassandra.auth.Permission>, org.apache.cassandra.auth.IResource, org.apache.cassandra.cql3.RoleName, boolean)"], ["void", "org.apache.cassandra.cql3.statements.ListPermissionsStatement.validate(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.ListPermissionsStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.ListPermissionsStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.ListRolesStatement", "org.apache.cassandra.cql3.statements.ListRolesStatement()"], ["org.apache.cassandra.cql3.statements.ListRolesStatement", "org.apache.cassandra.cql3.statements.ListRolesStatement(org.apache.cassandra.cql3.RoleName, boolean)"], ["void", "org.apache.cassandra.cql3.statements.ListRolesStatement.validate(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.ListRolesStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.ListRolesStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.ListUsersStatement", "org.apache.cassandra.cql3.statements.ListUsersStatement()"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.ModificationStatement$Parsed.prepare(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.ModificationStatement", "org.apache.cassandra.cql3.statements.ModificationStatement$Parsed.prepare(org.apache.cassandra.cql3.VariableSpecifications, org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.ModificationStatement", "org.apache.cassandra.cql3.statements.ModificationStatement(org.apache.cassandra.cql3.statements.StatementType, int, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.cql3.Operations, org.apache.cassandra.cql3.restrictions.StatementRestrictions, org.apache.cassandra.cql3.Conditions, org.apache.cassandra.cql3.Attributes)"], ["void", "org.apache.cassandra.cql3.statements.ModificationStatement.addFunctionsTo(java.util.List<org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.cql3.restrictions.StatementRestrictions", "org.apache.cassandra.cql3.statements.ModificationStatement.getRestrictions()"], ["int", "org.apache.cassandra.cql3.statements.ModificationStatement.getBoundTerms()"], ["java.lang.String", "org.apache.cassandra.cql3.statements.ModificationStatement.keyspace()"], ["java.lang.String", "org.apache.cassandra.cql3.statements.ModificationStatement.columnFamily()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.isCounter()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.isView()"], ["long", "org.apache.cassandra.cql3.statements.ModificationStatement.getTimestamp(long, org.apache.cassandra.cql3.QueryOptions)"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.isTimestampSet()"], ["int", "org.apache.cassandra.cql3.statements.ModificationStatement.getTimeToLive(org.apache.cassandra.cql3.QueryOptions)"], ["void", "org.apache.cassandra.cql3.statements.ModificationStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.ModificationStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.cql3.statements.ModificationStatement.updatedColumns()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.cql3.statements.ModificationStatement.conditionColumns()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.updatesRegularRows()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.updatesStaticRow()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.hasIfNotExistCondition()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.hasIfExistCondition()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.appliesOnlyToStaticColumns(org.apache.cassandra.cql3.Operations, org.apache.cassandra.cql3.Conditions)"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.requiresRead()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.hasConditions()"], ["boolean", "org.apache.cassandra.cql3.statements.ModificationStatement.hasSlices()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.ModificationStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.ModificationStatement.executeWithCondition(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["void", "org.apache.cassandra.cql3.statements.ModificationStatement.addConditions(org.apache.cassandra.db.Clustering, org.apache.cassandra.cql3.statements.CQL3CasRequest, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.ResultSet", "org.apache.cassandra.cql3.statements.ModificationStatement.buildCasResultSet(java.lang.String, java.lang.String, org.apache.cassandra.db.rows.RowIterator, java.lang.Iterable<org.apache.cassandra.config.ColumnDefinition>, boolean, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.ModificationStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithCondition(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.ParsedStatement$Prepared(org.apache.cassandra.cql3.CQLStatement, org.apache.cassandra.cql3.VariableSpecifications, short[])"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.ParsedStatement$Prepared(org.apache.cassandra.cql3.CQLStatement)"], ["org.apache.cassandra.cql3.statements.ParsedStatement", "org.apache.cassandra.cql3.statements.ParsedStatement()"], ["org.apache.cassandra.cql3.VariableSpecifications", "org.apache.cassandra.cql3.statements.ParsedStatement.getBoundVariables()"], ["void", "org.apache.cassandra.cql3.statements.ParsedStatement.setBoundVariables(java.util.List<org.apache.cassandra.cql3.ColumnIdentifier>)"], ["void", "org.apache.cassandra.cql3.statements.ParsedStatement.setBoundVariables(org.apache.cassandra.cql3.VariableSpecifications)"], ["void", "org.apache.cassandra.cql3.statements.PermissionsManagementStatement.validate(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.PermissionsManagementStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.PropertyDefinitions", "org.apache.cassandra.cql3.statements.PropertyDefinitions()"], ["void", "org.apache.cassandra.cql3.statements.PropertyDefinitions.addProperty(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.cql3.statements.PropertyDefinitions.addProperty(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["void", "org.apache.cassandra.cql3.statements.PropertyDefinitions.validate(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>)"], ["java.lang.Boolean", "org.apache.cassandra.cql3.statements.PropertyDefinitions.hasProperty(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.PropertyDefinitions.getString(java.lang.String, java.lang.String)"], ["java.lang.Boolean", "org.apache.cassandra.cql3.statements.PropertyDefinitions.getBoolean(java.lang.String, java.lang.Boolean)"], ["double", "org.apache.cassandra.cql3.statements.PropertyDefinitions.getDouble(java.lang.String, double)"], ["java.lang.Integer", "org.apache.cassandra.cql3.statements.PropertyDefinitions.getInt(java.lang.String, java.lang.Integer)"], ["java.lang.Integer", "org.apache.cassandra.cql3.statements.PropertyDefinitions.toInt(java.lang.String, java.lang.String, java.lang.Integer)"], ["void", "org.apache.cassandra.cql3.statements.RequestValidations.checkTrue(boolean, java.lang.String)"], ["void", "org.apache.cassandra.cql3.statements.RequestValidations.checkTrue(boolean, java.lang.String, java.lang.Object...)"], ["void", "org.apache.cassandra.cql3.statements.RequestValidations.checkContainsNoDuplicates(java.util.List<?>, java.lang.String)"], ["<E> void", "org.apache.cassandra.cql3.statements.RequestValidations.checkContainsOnly(java.util.List<E>, java.util.List<E>, java.lang.String)"], ["void", "org.apache.cassandra.cql3.statements.RequestValidations.checkFalse(boolean, java.lang.String, java.lang.Object...)"], ["void", "org.apache.cassandra.cql3.statements.RequestValidations.checkFalse(boolean, java.lang.String)"], ["<T> T", "org.apache.cassandra.cql3.statements.RequestValidations.checkNotNull(T, java.lang.String, java.lang.Object...)"], ["void", "org.apache.cassandra.cql3.statements.RequestValidations.checkBindValueSet(java.nio.ByteBuffer, java.lang.String, java.lang.Object...)"], ["<T> T", "org.apache.cassandra.cql3.statements.RequestValidations.checkNull(T, java.lang.String, java.lang.Object...)"], ["<T> T", "org.apache.cassandra.cql3.statements.RequestValidations.checkNull(T, java.lang.String)"], ["org.apache.cassandra.exceptions.InvalidRequestException", "org.apache.cassandra.cql3.statements.RequestValidations.invalidRequest(java.lang.String, java.lang.Object...)"], ["org.apache.cassandra.cql3.statements.RevokePermissionsStatement", "org.apache.cassandra.cql3.statements.RevokePermissionsStatement(java.util.Set<org.apache.cassandra.auth.Permission>, org.apache.cassandra.auth.IResource, org.apache.cassandra.cql3.RoleName)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.RevokePermissionsStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.RevokeRoleStatement", "org.apache.cassandra.cql3.statements.RevokeRoleStatement(org.apache.cassandra.cql3.RoleName, org.apache.cassandra.cql3.RoleName)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.RevokeRoleStatement.execute(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.RoleManagementStatement", "org.apache.cassandra.cql3.statements.RoleManagementStatement(org.apache.cassandra.cql3.RoleName, org.apache.cassandra.cql3.RoleName)"], ["void", "org.apache.cassandra.cql3.statements.RoleManagementStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.RoleManagementStatement.validate(org.apache.cassandra.service.ClientState)"], ["int", "org.apache.cassandra.cql3.statements.SchemaAlteringStatement.getBoundTerms()"], ["void", "org.apache.cassandra.cql3.statements.SchemaAlteringStatement.prepareKeyspace(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.SchemaAlteringStatement.prepare(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.SchemaAlteringStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.SchemaAlteringStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["int", "org.apache.cassandra.cql3.statements.SelectStatement$CompositeComparator.compare(java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>)"], ["int", "org.apache.cassandra.cql3.statements.SelectStatement$CompositeComparator.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.cql3.statements.SelectStatement$Pager$InternalPager.fetchPage(int, long)"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.cql3.statements.SelectStatement$Pager$InternalPager.state()"], ["boolean", "org.apache.cassandra.cql3.statements.SelectStatement$Pager$InternalPager.isExhausted()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager.fetchPage(int, long)"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager.state()"], ["boolean", "org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager.isExhausted()"], ["org.apache.cassandra.cql3.statements.SelectStatement$Pager", "org.apache.cassandra.cql3.statements.SelectStatement$Pager.forInternalQuery(org.apache.cassandra.service.pager.QueryPager, org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.cql3.statements.SelectStatement$Pager", "org.apache.cassandra.cql3.statements.SelectStatement$Pager.forDistributedQuery(org.apache.cassandra.service.pager.QueryPager, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState)"], ["boolean", "org.apache.cassandra.cql3.statements.SelectStatement$Pager.isExhausted()"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.cql3.statements.SelectStatement$Pager.state()"], ["org.apache.cassandra.cql3.statements.SelectStatement$Parameters", "org.apache.cassandra.cql3.statements.SelectStatement$Parameters(java.util.Map<org.apache.cassandra.config.ColumnDefinition$Raw, java.lang.Boolean>, java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, boolean, boolean, boolean)"], ["org.apache.cassandra.cql3.statements.SelectStatement$RawStatement", "org.apache.cassandra.cql3.statements.SelectStatement$RawStatement(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.statements.SelectStatement$Parameters, java.util.List<org.apache.cassandra.cql3.selection.RawSelector>, org.apache.cassandra.cql3.WhereClause, org.apache.cassandra.cql3.Term$Raw, org.apache.cassandra.cql3.Term$Raw)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(boolean, org.apache.cassandra.service.ClientState)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.toString()"], ["org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator", "org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator(int, java.util.Comparator<java.nio.ByteBuffer>)"], ["int", "org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator.compare(java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>)"], ["int", "org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.cql3.statements.SelectStatement", "org.apache.cassandra.cql3.statements.SelectStatement(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.cql3.statements.SelectStatement$Parameters, org.apache.cassandra.cql3.selection.Selection, org.apache.cassandra.cql3.restrictions.StatementRestrictions, boolean, org.apache.cassandra.db.aggregation.AggregationSpecification, java.util.Comparator<java.util.List<java.nio.ByteBuffer>>, org.apache.cassandra.cql3.Term, org.apache.cassandra.cql3.Term)"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.cql3.statements.SelectStatement.queriedColumns()"], ["org.apache.cassandra.cql3.ResultSet$ResultMetadata", "org.apache.cassandra.cql3.statements.SelectStatement.getResultMetadata()"], ["int", "org.apache.cassandra.cql3.statements.SelectStatement.getBoundTerms()"], ["void", "org.apache.cassandra.cql3.statements.SelectStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.SelectStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage$Rows", "org.apache.cassandra.cql3.statements.SelectStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.db.ReadQuery", "org.apache.cassandra.cql3.statements.SelectStatement.getQuery(org.apache.cassandra.cql3.QueryOptions, int)"], ["org.apache.cassandra.db.ReadQuery", "org.apache.cassandra.cql3.statements.SelectStatement.getQuery(org.apache.cassandra.cql3.QueryOptions, int, int, int, int)"], ["org.apache.cassandra.transport.messages.ResultMessage$Rows", "org.apache.cassandra.cql3.statements.SelectStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.transport.messages.ResultMessage$Rows", "org.apache.cassandra.cql3.statements.SelectStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, int, long)"], ["org.apache.cassandra.cql3.ResultSet", "org.apache.cassandra.cql3.statements.SelectStatement.process(org.apache.cassandra.db.partitions.PartitionIterator, int)"], ["java.lang.String", "org.apache.cassandra.cql3.statements.SelectStatement.keyspace()"], ["java.lang.String", "org.apache.cassandra.cql3.statements.SelectStatement.columnFamily()"], ["org.apache.cassandra.cql3.selection.Selection", "org.apache.cassandra.cql3.statements.SelectStatement.getSelection()"], ["org.apache.cassandra.cql3.restrictions.StatementRestrictions", "org.apache.cassandra.cql3.statements.SelectStatement.getRestrictions()"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.cql3.statements.SelectStatement.clusteringIndexFilterAsSlices()"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.cql3.statements.SelectStatement.internalReadForView(org.apache.cassandra.db.DecoratedKey, int)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.cql3.statements.SelectStatement.rowFilterForInternalCalls()"], ["int", "org.apache.cassandra.cql3.statements.SelectStatement.getLimit(org.apache.cassandra.cql3.QueryOptions)"], ["int", "org.apache.cassandra.cql3.statements.SelectStatement.getPerPartitionLimit(org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.cql3.statements.SelectStatement.getRowFilter(org.apache.cassandra.cql3.QueryOptions)"], ["java.nio.ByteBuffer[]", "org.apache.cassandra.cql3.statements.SelectStatement.getComponents(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.SelectStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.SelectStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType$1.allowClusteringColumnSlices()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType$2.allowClusteringColumnSlices()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType$4.allowPartitionKeyRanges()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType$4.allowNonPrimaryKeyInWhereClause()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType$4.allowUseOfSecondaryIndices()"], ["org.apache.cassandra.cql3.statements.StatementType[]", "org.apache.cassandra.cql3.statements.StatementType.values()"], ["org.apache.cassandra.cql3.statements.StatementType", "org.apache.cassandra.cql3.statements.StatementType.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType.isInsert()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType.isUpdate()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType.isDelete()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType.isSelect()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType.allowPartitionKeyRanges()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType.allowClusteringColumnSlices()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType.allowNonPrimaryKeyInWhereClause()"], ["boolean", "org.apache.cassandra.cql3.statements.StatementType.allowUseOfSecondaryIndices()"], ["org.apache.cassandra.cql3.statements.TableAttributes", "org.apache.cassandra.cql3.statements.TableAttributes()"], ["void", "org.apache.cassandra.cql3.statements.TableAttributes.validate()"], ["org.apache.cassandra.schema.TableParams", "org.apache.cassandra.cql3.statements.TableAttributes.asNewTableParams()"], ["org.apache.cassandra.schema.TableParams", "org.apache.cassandra.cql3.statements.TableAttributes.asAlteredTableParams(org.apache.cassandra.schema.TableParams)"], ["java.util.UUID", "org.apache.cassandra.cql3.statements.TableAttributes.getId()"], ["org.apache.cassandra.cql3.statements.TruncateStatement", "org.apache.cassandra.cql3.statements.TruncateStatement(org.apache.cassandra.cql3.CFName)"], ["int", "org.apache.cassandra.cql3.statements.TruncateStatement.getBoundTerms()"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.TruncateStatement.prepare(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.TruncateStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.TruncateStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.TruncateStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.TruncateStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsert", "org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsert(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.Attributes$Raw, java.util.List<org.apache.cassandra.config.ColumnDefinition$Raw>, java.util.List<org.apache.cassandra.cql3.Term$Raw>, boolean)"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsertJson", "org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsertJson(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.Attributes$Raw, org.apache.cassandra.cql3.Json$Raw, boolean, boolean)"], ["org.apache.cassandra.cql3.statements.UpdateStatement$ParsedUpdate", "org.apache.cassandra.cql3.statements.UpdateStatement$ParsedUpdate(org.apache.cassandra.cql3.CFName, org.apache.cassandra.cql3.Attributes$Raw, java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.Operation$RawUpdate>>, org.apache.cassandra.cql3.WhereClause, java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition$Raw, org.apache.cassandra.cql3.ColumnCondition$Raw>>, boolean)"], ["boolean", "org.apache.cassandra.cql3.statements.UpdateStatement.requireFullClusteringKey()"], ["void", "org.apache.cassandra.cql3.statements.UpdateStatement.addUpdateForKey(org.apache.cassandra.db.partitions.PartitionUpdate, org.apache.cassandra.db.Clustering, org.apache.cassandra.cql3.UpdateParameters)"], ["void", "org.apache.cassandra.cql3.statements.UpdateStatement.addUpdateForKey(org.apache.cassandra.db.partitions.PartitionUpdate, org.apache.cassandra.db.Slice, org.apache.cassandra.cql3.UpdateParameters)"], ["org.apache.cassandra.cql3.statements.UpdatesCollector", "org.apache.cassandra.cql3.statements.UpdatesCollector(java.util.Map<java.util.UUID, org.apache.cassandra.db.PartitionColumns>, int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.cql3.statements.UpdatesCollector.getPartitionUpdate(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.ConsistencyLevel)"], ["void", "org.apache.cassandra.cql3.statements.UpdatesCollector.validateIndexedColumns()"], ["org.apache.cassandra.cql3.statements.UseStatement", "org.apache.cassandra.cql3.statements.UseStatement(java.lang.String)"], ["int", "org.apache.cassandra.cql3.statements.UseStatement.getBoundTerms()"], ["org.apache.cassandra.cql3.statements.ParsedStatement$Prepared", "org.apache.cassandra.cql3.statements.UseStatement.prepare(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.UseStatement.checkAccess(org.apache.cassandra.service.ClientState)"], ["void", "org.apache.cassandra.cql3.statements.UseStatement.validate(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.UseStatement.execute(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions, long)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.cql3.statements.UseStatement.executeInternal(org.apache.cassandra.service.QueryState, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.AbstractBufferClusteringPrefix.kind()"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.AbstractBufferClusteringPrefix.clustering()"], ["int", "org.apache.cassandra.db.AbstractBufferClusteringPrefix.size()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.AbstractBufferClusteringPrefix.get(int)"], ["java.nio.ByteBuffer[]", "org.apache.cassandra.db.AbstractBufferClusteringPrefix.getRawValues()"], ["long", "org.apache.cassandra.db.AbstractBufferClusteringPrefix.unsharedHeapSize()"], ["long", "org.apache.cassandra.db.AbstractBufferClusteringPrefix.unsharedHeapSizeExcludingData()"], ["org.apache.cassandra.db.AbstractClusteringPrefix", "org.apache.cassandra.db.AbstractClusteringPrefix()"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.AbstractClusteringPrefix.clustering()"], ["int", "org.apache.cassandra.db.AbstractClusteringPrefix.dataSize()"], ["void", "org.apache.cassandra.db.AbstractClusteringPrefix.digest(java.security.MessageDigest)"], ["int", "org.apache.cassandra.db.AbstractClusteringPrefix.hashCode()"], ["boolean", "org.apache.cassandra.db.AbstractClusteringPrefix.equals(java.lang.Object)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder(org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder.fromKeyIncl(java.lang.Object...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder.fromKeyExcl(java.lang.Object...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder.toKeyIncl(java.lang.Object...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder.toKeyExcl(java.lang.Object...)"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.AbstractReadCommandBuilder$PartitionRangeBuilder.build()"], ["org.apache.cassandra.db.AbstractReadCommandBuilder$SinglePartitionBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder$SinglePartitionBuilder(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.AbstractReadCommandBuilder$SinglePartitionBuilder.build()"], ["org.apache.cassandra.db.AbstractReadCommandBuilder$SinglePartitionSliceBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder$SinglePartitionSliceBuilder(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder$SinglePartitionSliceBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder$SinglePartitionSliceBuilder.addSlice(org.apache.cassandra.db.Slice)"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.AbstractReadCommandBuilder$SinglePartitionSliceBuilder.build()"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.withNowInSeconds(int)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.fromIncl(java.lang.Object...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.fromExcl(java.lang.Object...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.toIncl(java.lang.Object...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.toExcl(java.lang.Object...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.includeRow(java.lang.Object...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.reverse()"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.withLimit(int)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.withPagingLimit(int)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.columns(java.lang.String...)"], ["org.apache.cassandra.db.AbstractReadCommandBuilder", "org.apache.cassandra.db.AbstractReadCommandBuilder.filterOn(java.lang.String, org.apache.cassandra.cql3.Operator, java.lang.Object)"], ["void", "org.apache.cassandra.db.BlacklistedDirectories.markUnreadable(java.lang.String)"], ["void", "org.apache.cassandra.db.BlacklistedDirectories.markUnwritable(java.lang.String)"], ["java.io.File", "org.apache.cassandra.db.BlacklistedDirectories.maybeMarkUnreadable(java.io.File)"], ["java.io.File", "org.apache.cassandra.db.BlacklistedDirectories.maybeMarkUnwritable(java.io.File)"], ["int", "org.apache.cassandra.db.BlacklistedDirectories.getDirectoriesVersion()"], ["void", "org.apache.cassandra.db.BlacklistedDirectories.clearUnwritableUnsafe()"], ["boolean", "org.apache.cassandra.db.BlacklistedDirectories.isUnreadable(java.io.File)"], ["boolean", "org.apache.cassandra.db.BlacklistedDirectories.isUnwritable(java.io.File)"], ["org.apache.cassandra.db.BufferDecoratedKey", "org.apache.cassandra.db.BufferDecoratedKey(org.apache.cassandra.dht.Token, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.BufferDecoratedKey.getKey()"], ["int", "org.apache.cassandra.db.CBuilder$1.count()"], ["int", "org.apache.cassandra.db.CBuilder$1.remainingCount()"], ["org.apache.cassandra.db.ClusteringComparator", "org.apache.cassandra.db.CBuilder$1.comparator()"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.db.CBuilder$1.add(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.db.CBuilder$1.add(java.lang.Object)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.CBuilder$1.build()"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.CBuilder$1.buildBound(boolean, boolean)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.CBuilder$1.buildSlice()"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.CBuilder$1.buildWith(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.CBuilder$1.buildWith(java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.CBuilder$1.buildBoundWith(java.nio.ByteBuffer, boolean, boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.CBuilder$1.buildBoundWith(java.util.List<java.nio.ByteBuffer>, boolean, boolean)"], ["org.apache.cassandra.db.CBuilder$ArrayBackedBuilder", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder(org.apache.cassandra.db.ClusteringComparator)"], ["int", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.count()"], ["int", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.remainingCount()"], ["org.apache.cassandra.db.ClusteringComparator", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.comparator()"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.add(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.add(java.lang.Object)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.build()"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.buildBound(boolean, boolean)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.buildSlice()"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.buildWith(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.buildWith(java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.buildBoundWith(java.nio.ByteBuffer, boolean, boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.CBuilder$ArrayBackedBuilder.buildBoundWith(java.util.List<java.nio.ByteBuffer>, boolean, boolean)"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.db.CBuilder()"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.db.CBuilder.create(org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.CachedHashDecoratedKey", "org.apache.cassandra.db.CachedHashDecoratedKey(org.apache.cassandra.dht.Token, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.CachedHashDecoratedKey.filterHash(long[])"], ["org.apache.cassandra.db.ClockAndCount", "org.apache.cassandra.db.ClockAndCount.create(long, long)"], ["long", "org.apache.cassandra.db.ClockAndCount.unsharedHeapSize()"], ["boolean", "org.apache.cassandra.db.ClockAndCount.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.ClockAndCount.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.ClockAndCount.toString()"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.Clustering$1.kind()"], ["java.lang.String", "org.apache.cassandra.db.Clustering$1.toString()"], ["java.lang.String", "org.apache.cassandra.db.Clustering$1.toString(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.Clustering$2.toString(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.Clustering$Serializer", "org.apache.cassandra.db.Clustering$Serializer()"], ["void", "org.apache.cassandra.db.Clustering$Serializer.serialize(org.apache.cassandra.db.Clustering, org.apache.cassandra.io.util.DataOutputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.Clustering$Serializer.serialize(org.apache.cassandra.db.Clustering, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["long", "org.apache.cassandra.db.Clustering$Serializer.serializedSize(org.apache.cassandra.db.Clustering, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.db.Clustering$Serializer.skip(org.apache.cassandra.io.util.DataInputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.Clustering$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.Clustering$Serializer.deserialize(java.nio.ByteBuffer, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["default", "org.apache.cassandra.db.Clustering.org.apache.cassandra.db.Clustering copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["default", "org.apache.cassandra.db.Clustering.java.lang.String toString(org.apache.cassandra.config.CFMetaData)"], ["default", "org.apache.cassandra.db.Clustering.java.lang.String toCQLString(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.Clustering.make(java.nio.ByteBuffer...)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.create(org.apache.cassandra.db.ClusteringPrefix$Kind, java.nio.ByteBuffer[])"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.ClusteringBound.boundKind(boolean, boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.inclusiveStartOf(java.nio.ByteBuffer...)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.inclusiveEndOf(java.nio.ByteBuffer...)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.exclusiveStartOf(java.nio.ByteBuffer...)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.exclusiveEndOf(java.nio.ByteBuffer...)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.inclusiveStartOf(org.apache.cassandra.db.ClusteringPrefix)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.exclusiveStartOf(org.apache.cassandra.db.ClusteringPrefix)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.inclusiveEndOf(org.apache.cassandra.db.ClusteringPrefix)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.create(org.apache.cassandra.db.ClusteringComparator, boolean, boolean, java.lang.Object...)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.invert()"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBound.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["boolean", "org.apache.cassandra.db.ClusteringBound.isStart()"], ["boolean", "org.apache.cassandra.db.ClusteringBound.isEnd()"], ["boolean", "org.apache.cassandra.db.ClusteringBound.isInclusive()"], ["boolean", "org.apache.cassandra.db.ClusteringBound.isExclusive()"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringBound.invert()"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringBound.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer", "org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer()"], ["void", "org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer.serialize(org.apache.cassandra.db.ClusteringBoundOrBoundary, org.apache.cassandra.io.util.DataOutputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["long", "org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer.serializedSize(org.apache.cassandra.db.ClusteringBoundOrBoundary, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer.skipValues(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.ClusteringPrefix$Kind, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer.deserializeValues(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.ClusteringPrefix$Kind, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringBoundOrBoundary.create(org.apache.cassandra.db.ClusteringPrefix$Kind, java.nio.ByteBuffer[])"], ["boolean", "org.apache.cassandra.db.ClusteringBoundOrBoundary.isBoundary()"], ["boolean", "org.apache.cassandra.db.ClusteringBoundOrBoundary.isOpen(boolean)"], ["boolean", "org.apache.cassandra.db.ClusteringBoundOrBoundary.isClose(boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBoundOrBoundary.inclusiveOpen(boolean, java.nio.ByteBuffer[])"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBoundOrBoundary.exclusiveOpen(boolean, java.nio.ByteBuffer[])"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBoundOrBoundary.inclusiveClose(boolean, java.nio.ByteBuffer[])"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBoundOrBoundary.exclusiveClose(boolean, java.nio.ByteBuffer[])"], ["org.apache.cassandra.db.ClusteringBoundary", "org.apache.cassandra.db.ClusteringBoundOrBoundary.inclusiveCloseExclusiveOpen(boolean, java.nio.ByteBuffer[])"], ["org.apache.cassandra.db.ClusteringBoundary", "org.apache.cassandra.db.ClusteringBoundOrBoundary.exclusiveCloseInclusiveOpen(boolean, java.nio.ByteBuffer[])"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringBoundOrBoundary.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["java.lang.String", "org.apache.cassandra.db.ClusteringBoundOrBoundary.toString(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.ClusteringBoundOrBoundary.toString(org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.ClusteringBoundary", "org.apache.cassandra.db.ClusteringBoundary.create(org.apache.cassandra.db.ClusteringPrefix$Kind, java.nio.ByteBuffer[])"], ["org.apache.cassandra.db.ClusteringBoundary", "org.apache.cassandra.db.ClusteringBoundary.invert()"], ["org.apache.cassandra.db.ClusteringBoundary", "org.apache.cassandra.db.ClusteringBoundary.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBoundary.openBound(boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.ClusteringBoundary.closeBound(boolean)"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringBoundary.invert()"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringBoundary.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.ClusteringComparator", "org.apache.cassandra.db.ClusteringComparator(org.apache.cassandra.db.marshal.AbstractType<?>...)"], ["org.apache.cassandra.db.ClusteringComparator", "org.apache.cassandra.db.ClusteringComparator(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["int", "org.apache.cassandra.db.ClusteringComparator.size()"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.ClusteringComparator.make(java.lang.Object...)"], ["int", "org.apache.cassandra.db.ClusteringComparator.compare(org.apache.cassandra.db.Clusterable, org.apache.cassandra.db.Clusterable)"], ["int", "org.apache.cassandra.db.ClusteringComparator.compare(org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.db.ClusteringPrefix)"], ["int", "org.apache.cassandra.db.ClusteringComparator.compare(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.Clustering)"], ["int", "org.apache.cassandra.db.ClusteringComparator.compare(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.Clustering, int)"], ["int", "org.apache.cassandra.db.ClusteringComparator.compareComponent(int, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.ClusteringComparator.isCompatibleWith(org.apache.cassandra.db.ClusteringComparator)"], ["void", "org.apache.cassandra.db.ClusteringComparator.validate(org.apache.cassandra.db.ClusteringPrefix)"], ["java.lang.String", "org.apache.cassandra.db.ClusteringComparator.toString()"], ["boolean", "org.apache.cassandra.db.ClusteringComparator.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.ClusteringComparator.hashCode()"], ["int", "org.apache.cassandra.db.ClusteringComparator.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.ClusteringPrefix$Deserializer", "org.apache.cassandra.db.ClusteringPrefix$Deserializer(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader)"], ["void", "org.apache.cassandra.db.ClusteringPrefix$Deserializer.prepare(int, int)"], ["int", "org.apache.cassandra.db.ClusteringPrefix$Deserializer.compareNextTo(org.apache.cassandra.db.ClusteringBoundOrBoundary)"], ["org.apache.cassandra.db.ClusteringBoundOrBoundary", "org.apache.cassandra.db.ClusteringPrefix$Deserializer.deserializeNextBound()"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.ClusteringPrefix$Deserializer.deserializeNextClustering()"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.ClusteringPrefix$Deserializer.skipNext()"], ["org.apache.cassandra.db.ClusteringPrefix$Kind[]", "org.apache.cassandra.db.ClusteringPrefix$Kind.values()"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.ClusteringPrefix$Kind.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.db.ClusteringPrefix$Kind.compare(org.apache.cassandra.db.ClusteringPrefix$Kind, org.apache.cassandra.db.ClusteringPrefix$Kind)"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.ClusteringPrefix$Kind.invert()"], ["boolean", "org.apache.cassandra.db.ClusteringPrefix$Kind.isBound()"], ["boolean", "org.apache.cassandra.db.ClusteringPrefix$Kind.isBoundary()"], ["boolean", "org.apache.cassandra.db.ClusteringPrefix$Kind.isStart()"], ["boolean", "org.apache.cassandra.db.ClusteringPrefix$Kind.isEnd()"], ["boolean", "org.apache.cassandra.db.ClusteringPrefix$Kind.isOpen(boolean)"], ["boolean", "org.apache.cassandra.db.ClusteringPrefix$Kind.isClose(boolean)"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.ClusteringPrefix$Kind.closeBoundOfBoundary(boolean)"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.ClusteringPrefix$Kind.openBoundOfBoundary(boolean)"], ["org.apache.cassandra.db.ClusteringPrefix$Serializer", "org.apache.cassandra.db.ClusteringPrefix$Serializer()"], ["void", "org.apache.cassandra.db.ClusteringPrefix$Serializer.serialize(org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.io.util.DataOutputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.db.ClusteringPrefix$Serializer.skip(org.apache.cassandra.io.util.DataInputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.ClusteringPrefix$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["long", "org.apache.cassandra.db.ClusteringPrefix$Serializer.serializedSize(org.apache.cassandra.db.ClusteringPrefix, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore$2.run()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore$3.run()"], ["java.lang.Void", "org.apache.cassandra.db.ColumnFamilyStore$4.call()"], ["java.lang.Object", "org.apache.cassandra.db.ColumnFamilyStore$4.call()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore$5.run()"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction", "org.apache.cassandra.db.ColumnFamilyStore$6.call()"], ["java.lang.Object", "org.apache.cassandra.db.ColumnFamilyStore$6.call()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore$Flush$1.runMayThrow()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore$Flush.run()"], ["org.apache.cassandra.db.ColumnFamilyStore$FlushLargestColumnFamily", "org.apache.cassandra.db.ColumnFamilyStore$FlushLargestColumnFamily()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore$FlushLargestColumnFamily.run()"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.ColumnFamilyStore$PostFlush.call()"], ["java.lang.Object", "org.apache.cassandra.db.ColumnFamilyStore$PostFlush.call()"], ["org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment", "org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment(java.util.List<org.apache.cassandra.io.sstable.format.SSTableReader>, java.lang.Iterable<org.apache.cassandra.db.Memtable>, org.apache.cassandra.utils.concurrent.Refs<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment.release()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment.close()"], ["org.apache.cassandra.db.ColumnFamilyStore$ViewFragment", "org.apache.cassandra.db.ColumnFamilyStore$ViewFragment(java.util.List<org.apache.cassandra.io.sstable.format.SSTableReader>, java.lang.Iterable<org.apache.cassandra.db.Memtable>)"], ["synchronized", "org.apache.cassandra.db.ColumnFamilyStore.void addInitialDirectories(org.apache.cassandra.db.Directories$DataDirectory[])"], ["org.apache.cassandra.db.Directories$DataDirectory[]", "org.apache.cassandra.db.ColumnFamilyStore.getInitialDirectories()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.shutdownFlushExecutor()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.shutdownPostFlushExecutor()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.shutdownReclaimExecutor()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.shutdownPerDiskFlushExecutors()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.reload()"], ["java.lang.Runnable", "org.apache.cassandra.db.ColumnFamilyStore.getBackgroundCompactionTaskSubmitter()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.setCompactionParametersJson(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.ColumnFamilyStore.getCompactionParametersJson()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.setCompactionParameters(java.util.Map<java.lang.String, java.lang.String>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.ColumnFamilyStore.getCompactionParameters()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.ColumnFamilyStore.getCompressionParameters()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.setCompressionParameters(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.db.ColumnFamilyStore(org.apache.cassandra.db.Keyspace, java.lang.String, int, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.Directories, boolean, boolean, boolean)"], ["org.apache.cassandra.db.Directories", "org.apache.cassandra.db.ColumnFamilyStore.getDirectories()"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.db.ColumnFamilyStore.createSSTableMultiWriter(org.apache.cassandra.io.sstable.Descriptor, long, long, int, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.db.ColumnFamilyStore.createSSTableMultiWriter(org.apache.cassandra.io.sstable.Descriptor, long, long, org.apache.cassandra.io.sstable.metadata.MetadataCollector, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.supportsEarlyOpen()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.invalidate()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.invalidate(boolean)"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(org.apache.cassandra.db.Keyspace, org.apache.cassandra.config.CFMetaData, boolean)"], ["synchronized", "org.apache.cassandra.db.ColumnFamilyStore.org.apache.cassandra.db.ColumnFamilyStore createColumnFamilyStore(org.apache.cassandra.db.Keyspace, java.lang.String, org.apache.cassandra.config.CFMetaData, boolean)"], ["synchronized", "org.apache.cassandra.db.ColumnFamilyStore.org.apache.cassandra.db.ColumnFamilyStore createColumnFamilyStore(org.apache.cassandra.db.Keyspace, java.lang.String, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.Directories, boolean, boolean, boolean)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.scrubDataDirectories(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.loadNewSSTables(java.lang.String, java.lang.String)"], ["synchronized", "org.apache.cassandra.db.ColumnFamilyStore.void loadNewSSTables()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.rebuildSecondaryIndex(java.lang.String)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.rebuildSecondaryIndex(java.lang.String, java.lang.String, java.lang.String...)"], ["java.lang.String", "org.apache.cassandra.db.ColumnFamilyStore.getColumnFamilyName()"], ["java.lang.String", "org.apache.cassandra.db.ColumnFamilyStore.getTableName()"], ["java.lang.String", "org.apache.cassandra.db.ColumnFamilyStore.getSSTablePath(java.io.File)"], ["java.lang.String", "org.apache.cassandra.db.ColumnFamilyStore.getSSTablePath(java.io.File, org.apache.cassandra.io.sstable.format.SSTableFormat$Type)"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.ColumnFamilyStore.forceBlockingFlush()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.apply(org.apache.cassandra.db.partitions.PartitionUpdate, org.apache.cassandra.index.transactions.UpdateTransaction, org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.addSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.addSSTables(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["long", "org.apache.cassandra.db.ColumnFamilyStore.getExpectedCompactedFileSize(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.compaction.OperationType)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.db.ColumnFamilyStore.getMaxSizeFile(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.ColumnFamilyStore.forceCleanup(int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.ColumnFamilyStore.scrub(boolean, boolean, boolean, boolean, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.ColumnFamilyStore.scrub(boolean, boolean, boolean, boolean, boolean, int)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.rebuildOnFailedScrub(java.lang.Throwable)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.ColumnFamilyStore.verify(boolean)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.ColumnFamilyStore.sstablesRewrite(boolean, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.ColumnFamilyStore.relocateSSTables(int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.ColumnFamilyStore.garbageCollect(org.apache.cassandra.schema.CompactionParams$TombstoneOption, int)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.markObsolete(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.compaction.OperationType)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isValid()"], ["org.apache.cassandra.db.lifecycle.Tracker", "org.apache.cassandra.db.ColumnFamilyStore.getTracker()"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isFilterFullyCoveredBy(org.apache.cassandra.db.filter.ClusteringIndexFilter, org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.db.partitions.CachedPartition, int)"], ["int", "org.apache.cassandra.db.ColumnFamilyStore.gcBefore(int)"], ["org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment", "org.apache.cassandra.db.ColumnFamilyStore.selectAndReference(com.google.common.base.Function<org.apache.cassandra.db.lifecycle.View, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>>)"], ["org.apache.cassandra.db.ColumnFamilyStore$ViewFragment", "org.apache.cassandra.db.ColumnFamilyStore.select(com.google.common.base.Function<org.apache.cassandra.db.lifecycle.View, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>>)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.beginLocalSampling(java.lang.String, int)"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.db.ColumnFamilyStore.finishLocalSampling(java.lang.String, int)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isCompactionDiskSpaceCheckEnabled()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.compactionDiskSpaceCheck(boolean)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.cleanupCache()"], ["org.apache.cassandra.db.ClusteringComparator", "org.apache.cassandra.db.ColumnFamilyStore.getComparator()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.snapshotWithoutFlush(java.lang.String)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.snapshotExists(java.lang.String)"], ["long", "org.apache.cassandra.db.ColumnFamilyStore.getSnapshotCreationTime(java.lang.String)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.clearSnapshot(java.lang.String)"], ["java.util.Map<java.lang.String, org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>", "org.apache.cassandra.db.ColumnFamilyStore.getSnapshotDetails()"], ["org.apache.cassandra.db.partitions.CachedPartition", "org.apache.cassandra.db.ColumnFamilyStore.getRawCachedPartition(org.apache.cassandra.db.DecoratedKey)"], ["int", "org.apache.cassandra.db.ColumnFamilyStore.invalidateRowCache(java.util.Collection<org.apache.cassandra.dht.Bounds<org.apache.cassandra.dht.Token>>)"], ["int", "org.apache.cassandra.db.ColumnFamilyStore.invalidateCounterCache(java.util.Collection<org.apache.cassandra.dht.Bounds<org.apache.cassandra.dht.Token>>)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.containsCachedParition(org.apache.cassandra.db.DecoratedKey)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.invalidateCachedPartition(org.apache.cassandra.cache.RowCacheKey)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.invalidateCachedPartition(org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.ClockAndCount", "org.apache.cassandra.db.ColumnFamilyStore.getCachedCounter(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.putCachedCounter(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath, org.apache.cassandra.db.ClockAndCount)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.forceMajorCompaction()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.forceMajorCompaction(boolean)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.forceCompactionForTokenRange(java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["long", "org.apache.cassandra.db.ColumnFamilyStore.estimatedKeysForRange(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.clearUnsafe()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.truncateBlocking()"], ["<V> V", "org.apache.cassandra.db.ColumnFamilyStore.runWithCompactionsDisabled(java.util.concurrent.Callable<V>, boolean, boolean)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction", "org.apache.cassandra.db.ColumnFamilyStore.markAllCompacting(org.apache.cassandra.db.compaction.OperationType)"], ["java.lang.String", "org.apache.cassandra.db.ColumnFamilyStore.toString()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.disableAutoCompaction()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.enableAutoCompaction()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.enableAutoCompaction(boolean)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isAutoCompactionDisabled()"], ["org.apache.cassandra.db.compaction.CompactionStrategyManager", "org.apache.cassandra.db.ColumnFamilyStore.getCompactionStrategyManager()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.setCrcCheckChance(double)"], ["java.lang.Double", "org.apache.cassandra.db.ColumnFamilyStore.getCrcCheckChance()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.setCompactionThresholds(int, int)"], ["int", "org.apache.cassandra.db.ColumnFamilyStore.getMinimumCompactionThreshold()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.setMinimumCompactionThreshold(int)"], ["int", "org.apache.cassandra.db.ColumnFamilyStore.getMaximumCompactionThreshold()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.setMaximumCompactionThreshold(int)"], ["int", "org.apache.cassandra.db.ColumnFamilyStore.getMeanColumns()"], ["double", "org.apache.cassandra.db.ColumnFamilyStore.getMeanPartitionSize()"], ["long", "org.apache.cassandra.db.ColumnFamilyStore.estimateKeys()"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.db.ColumnFamilyStore.getPartitioner()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.ColumnFamilyStore.decorateKey(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isIndex()"], ["int", "org.apache.cassandra.db.ColumnFamilyStore.getUnleveledSSTables()"], ["int[]", "org.apache.cassandra.db.ColumnFamilyStore.getSSTableCountPerLevel()"], ["int", "org.apache.cassandra.db.ColumnFamilyStore.getLevelFanoutSize()"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isEmpty()"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isRowCacheEnabled()"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isCounterCacheEnabled()"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStore.isKeyCacheEnabled()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.discardSSTables(long)"], ["double", "org.apache.cassandra.db.ColumnFamilyStore.getDroppableTombstoneRatio()"], ["long", "org.apache.cassandra.db.ColumnFamilyStore.trueSnapshotsSize()"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.db.ColumnFamilyStore.getIfExists(java.util.UUID)"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.db.ColumnFamilyStore.getIfExists(java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.TableMetrics", "org.apache.cassandra.db.ColumnFamilyStore.metricsFor(java.util.UUID)"], ["org.apache.cassandra.db.DiskBoundaries", "org.apache.cassandra.db.ColumnFamilyStore.getDiskBoundaries()"], ["void", "org.apache.cassandra.db.ColumnFamilyStore.invalidateDiskBoundaries()"], ["void", "org.apache.cassandra.db.ColumnFamilyStoreCQLHelper$1.accept(java.lang.StringBuilder)"], ["void", "org.apache.cassandra.db.ColumnFamilyStoreCQLHelper$1.accept(java.lang.Object)"], ["org.apache.cassandra.db.ColumnFamilyStoreCQLHelper", "org.apache.cassandra.db.ColumnFamilyStoreCQLHelper()"], ["java.lang.String", "org.apache.cassandra.db.ColumnFamilyStoreCQLHelper.getCFMetadataAsCQL(org.apache.cassandra.config.CFMetaData, boolean)"], ["boolean", "org.apache.cassandra.db.ColumnFamilyStoreCQLHelper.isCqlCompatible(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.ColumnIndex", "org.apache.cassandra.db.ColumnIndex(org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.io.util.SequentialWriter, org.apache.cassandra.io.sstable.format.Version, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableFlushObserver>, org.apache.cassandra.io.ISerializer<org.apache.cassandra.io.sstable.IndexInfo>)"], ["void", "org.apache.cassandra.db.ColumnIndex.reset()"], ["void", "org.apache.cassandra.db.ColumnIndex.buildRowIndex(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.ColumnIndex.buffer()"], ["int[]", "org.apache.cassandra.db.ColumnIndex.offsets()"], ["int", "org.apache.cassandra.db.ColumnIndex.indexInfoSerializedSize()"], ["org.apache.cassandra.db.Columns$Serializer", "org.apache.cassandra.db.Columns$Serializer()"], ["void", "org.apache.cassandra.db.Columns$Serializer.serialize(org.apache.cassandra.db.Columns, org.apache.cassandra.io.util.DataOutputPlus)"], ["long", "org.apache.cassandra.db.Columns$Serializer.serializedSize(org.apache.cassandra.db.Columns)"], ["org.apache.cassandra.db.Columns", "org.apache.cassandra.db.Columns$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.Columns$Serializer.serializeSubset(java.util.Collection<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.db.Columns, org.apache.cassandra.io.util.DataOutputPlus)"], ["long", "org.apache.cassandra.db.Columns$Serializer.serializedSubsetSize(java.util.Collection<org.apache.cassandra.config.ColumnDefinition>, org.apache.cassandra.db.Columns)"], ["org.apache.cassandra.db.Columns", "org.apache.cassandra.db.Columns$Serializer.deserializeSubset(org.apache.cassandra.db.Columns, org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.db.Columns", "org.apache.cassandra.db.Columns.of(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.Columns", "org.apache.cassandra.db.Columns.from(java.util.Collection<org.apache.cassandra.config.ColumnDefinition>)"], ["boolean", "org.apache.cassandra.db.Columns.isEmpty()"], ["int", "org.apache.cassandra.db.Columns.simpleColumnCount()"], ["int", "org.apache.cassandra.db.Columns.complexColumnCount()"], ["int", "org.apache.cassandra.db.Columns.size()"], ["boolean", "org.apache.cassandra.db.Columns.hasSimple()"], ["boolean", "org.apache.cassandra.db.Columns.hasComplex()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.Columns.getSimple(int)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.Columns.getComplex(int)"], ["int", "org.apache.cassandra.db.Columns.simpleIdx(org.apache.cassandra.config.ColumnDefinition)"], ["int", "org.apache.cassandra.db.Columns.complexIdx(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.db.Columns.contains(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.Columns", "org.apache.cassandra.db.Columns.mergeTo(org.apache.cassandra.db.Columns)"], ["boolean", "org.apache.cassandra.db.Columns.containsAll(java.util.Collection<?>)"], ["org.apache.cassandra.utils.btree.BTreeSearchIterator<org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.config.ColumnDefinition>", "org.apache.cassandra.db.Columns.iterator()"], ["org.apache.cassandra.db.Columns", "org.apache.cassandra.db.Columns.without(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.db.Columns.digest(java.security.MessageDigest)"], ["void", "org.apache.cassandra.db.Columns.digest(java.security.MessageDigest, java.util.Set<java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.db.Columns.apply(java.util.function.Consumer<org.apache.cassandra.config.ColumnDefinition>, boolean)"], ["boolean", "org.apache.cassandra.db.Columns.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.Columns.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.Columns.toString()"], ["java.util.Iterator", "org.apache.cassandra.db.Columns.iterator()"], ["java.lang.String", "org.apache.cassandra.db.CompactTables$DefaultNames.defaultPartitionKeyName()"], ["java.lang.String", "org.apache.cassandra.db.CompactTables$DefaultNames.defaultClusteringName()"], ["java.lang.String", "org.apache.cassandra.db.CompactTables$DefaultNames.defaultCompactValueName()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.CompactTables.getCompactValueColumn(org.apache.cassandra.db.PartitionColumns)"], ["boolean", "org.apache.cassandra.db.CompactTables.hasEmptyCompactValue(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.CompactTables$DefaultNames", "org.apache.cassandra.db.CompactTables.defaultNameGenerator(java.util.Set<java.lang.String>)"], ["org.apache.cassandra.db.CompactTables$DefaultNames", "org.apache.cassandra.db.CompactTables.defaultNameGenerator(java.lang.Iterable<org.apache.cassandra.config.ColumnDefinition>)"], ["org.apache.cassandra.db.Conflicts$Resolution[]", "org.apache.cassandra.db.Conflicts$Resolution.values()"], ["org.apache.cassandra.db.Conflicts$Resolution", "org.apache.cassandra.db.Conflicts$Resolution.valueOf(java.lang.String)"], ["org.apache.cassandra.db.Conflicts$Resolution", "org.apache.cassandra.db.Conflicts.resolveRegular(long, boolean, int, java.nio.ByteBuffer, long, boolean, int, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.Conflicts$Resolution", "org.apache.cassandra.db.Conflicts.resolveCounter(long, boolean, java.nio.ByteBuffer, long, boolean, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.Conflicts.mergeCounterValues(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.ConsistencyLevel[]", "org.apache.cassandra.db.ConsistencyLevel.values()"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.db.ConsistencyLevel.valueOf(java.lang.String)"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.db.ConsistencyLevel.fromCode(int)"], ["int", "org.apache.cassandra.db.ConsistencyLevel.blockFor(org.apache.cassandra.db.Keyspace)"], ["boolean", "org.apache.cassandra.db.ConsistencyLevel.isDatacenterLocal()"], ["boolean", "org.apache.cassandra.db.ConsistencyLevel.isLocal(java.net.InetAddress)"], ["int", "org.apache.cassandra.db.ConsistencyLevel.countLocalEndpoints(java.lang.Iterable<java.net.InetAddress>)"], ["boolean", "org.apache.cassandra.db.ConsistencyLevel.isSufficientLiveNodes(org.apache.cassandra.db.Keyspace, java.lang.Iterable<java.net.InetAddress>)"], ["void", "org.apache.cassandra.db.ConsistencyLevel.assureSufficientLiveNodes(org.apache.cassandra.db.Keyspace, java.lang.Iterable<java.net.InetAddress>)"], ["void", "org.apache.cassandra.db.ConsistencyLevel.validateForRead(java.lang.String)"], ["void", "org.apache.cassandra.db.ConsistencyLevel.validateForWrite(java.lang.String)"], ["void", "org.apache.cassandra.db.ConsistencyLevel.validateForCasCommit(java.lang.String)"], ["void", "org.apache.cassandra.db.ConsistencyLevel.validateForCas()"], ["boolean", "org.apache.cassandra.db.ConsistencyLevel.isSerialConsistency()"], ["void", "org.apache.cassandra.db.ConsistencyLevel.validateCounterForWrite(org.apache.cassandra.config.CFMetaData)"], ["java.lang.Object", "org.apache.cassandra.db.CounterMutation$1$1$1.apply(org.apache.cassandra.db.rows.ColumnData)"], ["java.lang.Object", "org.apache.cassandra.db.CounterMutation$1$1$1.apply(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.CounterMutation$1$1.apply(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.CounterMutation$1.apply(java.lang.Object)"], ["org.apache.cassandra.db.CounterMutation$CounterMutationSerializer", "org.apache.cassandra.db.CounterMutation$CounterMutationSerializer()"], ["void", "org.apache.cassandra.db.CounterMutation$CounterMutationSerializer.serialize(org.apache.cassandra.db.CounterMutation, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.CounterMutation", "org.apache.cassandra.db.CounterMutation$CounterMutationSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.CounterMutation$CounterMutationSerializer.serializedSize(org.apache.cassandra.db.CounterMutation, int)"], ["long", "org.apache.cassandra.db.CounterMutation$CounterMutationSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.CounterMutation$CounterMutationSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.CounterMutation$CounterMutationSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.CounterMutation", "org.apache.cassandra.db.CounterMutation(org.apache.cassandra.db.Mutation, org.apache.cassandra.db.ConsistencyLevel)"], ["java.lang.String", "org.apache.cassandra.db.CounterMutation.getKeyspaceName()"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.CounterMutation.getMutation()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.CounterMutation.key()"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.db.CounterMutation.consistency()"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.CounterMutation.applyCounterMutation()"], ["void", "org.apache.cassandra.db.CounterMutation.apply()"], ["long", "org.apache.cassandra.db.CounterMutation.getTimeout()"], ["java.lang.String", "org.apache.cassandra.db.CounterMutation.toString()"], ["java.lang.String", "org.apache.cassandra.db.CounterMutation.toString(boolean)"], ["void", "org.apache.cassandra.db.CounterMutationVerbHandler$1.run()"], ["org.apache.cassandra.db.CounterMutationVerbHandler", "org.apache.cassandra.db.CounterMutationVerbHandler()"], ["void", "org.apache.cassandra.db.CounterMutationVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.CounterMutation>, int)"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.DataRange$Paging.clusteringIndexFilter(org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange$Paging.forSubRange(org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.DataRange$Paging.getLastReturned()"], ["boolean", "org.apache.cassandra.db.DataRange$Paging.isPaging()"], ["boolean", "org.apache.cassandra.db.DataRange$Paging.isUnrestricted()"], ["java.lang.String", "org.apache.cassandra.db.DataRange$Paging.toString(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.DataRange$Serializer", "org.apache.cassandra.db.DataRange$Serializer()"], ["void", "org.apache.cassandra.db.DataRange$Serializer.serialize(org.apache.cassandra.db.DataRange, org.apache.cassandra.io.util.DataOutputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.db.DataRange$Serializer.serializedSize(org.apache.cassandra.db.DataRange, int, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange(org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>, org.apache.cassandra.db.filter.ClusteringIndexFilter)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange.allData(org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange.forTokenRange(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange.forKeyRange(org.apache.cassandra.dht.Range<org.apache.cassandra.db.PartitionPosition>)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange.allData(org.apache.cassandra.dht.IPartitioner, org.apache.cassandra.db.filter.ClusteringIndexFilter)"], ["org.apache.cassandra.db.PartitionPosition", "org.apache.cassandra.db.DataRange.startKey()"], ["org.apache.cassandra.db.PartitionPosition", "org.apache.cassandra.db.DataRange.stopKey()"], ["boolean", "org.apache.cassandra.db.DataRange.isNamesQuery()"], ["boolean", "org.apache.cassandra.db.DataRange.isPaging()"], ["boolean", "org.apache.cassandra.db.DataRange.isWrapAround()"], ["boolean", "org.apache.cassandra.db.DataRange.contains(org.apache.cassandra.db.PartitionPosition)"], ["boolean", "org.apache.cassandra.db.DataRange.isUnrestricted()"], ["boolean", "org.apache.cassandra.db.DataRange.selectsAllPartition()"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.DataRange.clusteringIndexFilter(org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange.forPaging(org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>, org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.DataRange.forSubRange(org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>)"], ["java.lang.String", "org.apache.cassandra.db.DataRange.toString(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.DataRange.toCQLString(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.DataRange.appendKeyString(java.lang.StringBuilder, org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.DecoratedKey$1.compare(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.DecoratedKey)"], ["int", "org.apache.cassandra.db.DecoratedKey$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.DecoratedKey(org.apache.cassandra.dht.Token)"], ["int", "org.apache.cassandra.db.DecoratedKey.hashCode()"], ["boolean", "org.apache.cassandra.db.DecoratedKey.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.DecoratedKey.compareTo(org.apache.cassandra.db.PartitionPosition)"], ["int", "org.apache.cassandra.db.DecoratedKey.compareTo(org.apache.cassandra.dht.IPartitioner, java.nio.ByteBuffer, org.apache.cassandra.db.PartitionPosition)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.db.DecoratedKey.getPartitioner()"], ["org.apache.cassandra.dht.Token$KeyBound", "org.apache.cassandra.db.DecoratedKey.minValue()"], ["boolean", "org.apache.cassandra.db.DecoratedKey.isMinimum()"], ["org.apache.cassandra.db.PartitionPosition$Kind", "org.apache.cassandra.db.DecoratedKey.kind()"], ["java.lang.String", "org.apache.cassandra.db.DecoratedKey.toString()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.db.DecoratedKey.getToken()"], ["void", "org.apache.cassandra.db.DecoratedKey.filterHash(long[])"], ["org.apache.cassandra.dht.RingPosition", "org.apache.cassandra.db.DecoratedKey.minValue()"], ["int", "org.apache.cassandra.db.DecoratedKey.compareTo(java.lang.Object)"], ["void", "org.apache.cassandra.db.DefinitionsUpdateVerbHandler$1.runMayThrow()"], ["org.apache.cassandra.db.DefinitionsUpdateVerbHandler", "org.apache.cassandra.db.DefinitionsUpdateVerbHandler()"], ["void", "org.apache.cassandra.db.DefinitionsUpdateVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<java.util.Collection<org.apache.cassandra.db.Mutation>>, int)"], ["default", "org.apache.cassandra.db.DeletionPurger.boolean shouldPurge(org.apache.cassandra.db.DeletionTime)"], ["default", "org.apache.cassandra.db.DeletionPurger.boolean shouldPurge(org.apache.cassandra.db.LivenessInfo, int)"], ["org.apache.cassandra.db.DeletionTime$Serializer", "org.apache.cassandra.db.DeletionTime$Serializer()"], ["void", "org.apache.cassandra.db.DeletionTime$Serializer.serialize(org.apache.cassandra.db.DeletionTime, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.DeletionTime$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.DeletionTime$Serializer.skip(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.db.DeletionTime$Serializer.serializedSize(org.apache.cassandra.db.DeletionTime)"], ["long", "org.apache.cassandra.db.DeletionTime$Serializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.DeletionTime$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.DeletionTime$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.DeletionTime(long, int)"], ["long", "org.apache.cassandra.db.DeletionTime.markedForDeleteAt()"], ["int", "org.apache.cassandra.db.DeletionTime.localDeletionTime()"], ["boolean", "org.apache.cassandra.db.DeletionTime.isLive()"], ["void", "org.apache.cassandra.db.DeletionTime.digest(java.security.MessageDigest)"], ["boolean", "org.apache.cassandra.db.DeletionTime.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.DeletionTime.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.DeletionTime.toString()"], ["int", "org.apache.cassandra.db.DeletionTime.compareTo(org.apache.cassandra.db.DeletionTime)"], ["boolean", "org.apache.cassandra.db.DeletionTime.supersedes(org.apache.cassandra.db.DeletionTime)"], ["boolean", "org.apache.cassandra.db.DeletionTime.deletes(org.apache.cassandra.db.LivenessInfo)"], ["boolean", "org.apache.cassandra.db.DeletionTime.deletes(org.apache.cassandra.db.rows.Cell)"], ["boolean", "org.apache.cassandra.db.DeletionTime.deletes(long)"], ["int", "org.apache.cassandra.db.DeletionTime.dataSize()"], ["long", "org.apache.cassandra.db.DeletionTime.unsharedHeapSize()"], ["int", "org.apache.cassandra.db.DeletionTime.compareTo(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.Directories$1.apply(java.io.File)"], ["boolean", "org.apache.cassandra.db.Directories$1.apply(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.Directories$2.accept(java.io.File)"], ["int", "org.apache.cassandra.db.Directories$3.compare(org.apache.cassandra.db.Directories$DataDirectory, org.apache.cassandra.db.Directories$DataDirectory)"], ["int", "org.apache.cassandra.db.Directories$3.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.Directories$DataDirectory", "org.apache.cassandra.db.Directories$DataDirectory(java.io.File)"], ["long", "org.apache.cassandra.db.Directories$DataDirectory.getAvailableSpace()"], ["boolean", "org.apache.cassandra.db.Directories$DataDirectory.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.Directories$DataDirectory.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.Directories$DataDirectory.toString()"], ["org.apache.cassandra.db.Directories$DataDirectoryCandidate", "org.apache.cassandra.db.Directories$DataDirectoryCandidate(org.apache.cassandra.db.Directories$DataDirectory)"], ["int", "org.apache.cassandra.db.Directories$DataDirectoryCandidate.compareTo(org.apache.cassandra.db.Directories$DataDirectoryCandidate)"], ["int", "org.apache.cassandra.db.Directories$DataDirectoryCandidate.compareTo(java.lang.Object)"], ["org.apache.cassandra.db.Directories$FileAction[]", "org.apache.cassandra.db.Directories$FileAction.values()"], ["org.apache.cassandra.db.Directories$FileAction", "org.apache.cassandra.db.Directories$FileAction.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.db.Directories$FileAction.hasPrivilege(java.io.File, org.apache.cassandra.db.Directories$FileAction)"], ["org.apache.cassandra.db.Directories$FileType[]", "org.apache.cassandra.db.Directories$FileType.values()"], ["org.apache.cassandra.db.Directories$FileType", "org.apache.cassandra.db.Directories$FileType.valueOf(java.lang.String)"], ["org.apache.cassandra.db.Directories$OnTxnErr[]", "org.apache.cassandra.db.Directories$OnTxnErr.values()"], ["org.apache.cassandra.db.Directories$OnTxnErr", "org.apache.cassandra.db.Directories$OnTxnErr.valueOf(java.lang.String)"], ["org.apache.cassandra.db.Directories$SSTableLister", "org.apache.cassandra.db.Directories$SSTableLister.skipTemporary(boolean)"], ["org.apache.cassandra.db.Directories$SSTableLister", "org.apache.cassandra.db.Directories$SSTableLister.includeBackups(boolean)"], ["org.apache.cassandra.db.Directories$SSTableLister", "org.apache.cassandra.db.Directories$SSTableLister.onlyBackups(boolean)"], ["org.apache.cassandra.db.Directories$SSTableLister", "org.apache.cassandra.db.Directories$SSTableLister.snapshots(java.lang.String)"], ["java.util.Map<org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>>", "org.apache.cassandra.db.Directories$SSTableLister.list()"], ["boolean", "org.apache.cassandra.db.Directories$SSTableSizeSummer.isAcceptable(java.nio.file.Path)"], ["boolean", "org.apache.cassandra.db.Directories.verifyFullPermissions(java.io.File, java.lang.String)"], ["org.apache.cassandra.db.Directories", "org.apache.cassandra.db.Directories(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.Directories", "org.apache.cassandra.db.Directories(org.apache.cassandra.config.CFMetaData, java.util.Collection<org.apache.cassandra.db.Directories$DataDirectory>)"], ["org.apache.cassandra.db.Directories", "org.apache.cassandra.db.Directories(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.Directories$DataDirectory[])"], ["java.io.File", "org.apache.cassandra.db.Directories.getLocationForDisk(org.apache.cassandra.db.Directories$DataDirectory)"], ["org.apache.cassandra.db.Directories$DataDirectory", "org.apache.cassandra.db.Directories.getDataDirectoryForFile(java.io.File)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.db.Directories.find(java.lang.String)"], ["java.io.File", "org.apache.cassandra.db.Directories.getDirectoryForNewSSTables()"], ["java.io.File", "org.apache.cassandra.db.Directories.getWriteableLocationAsFile(long)"], ["java.io.File", "org.apache.cassandra.db.Directories.getTemporaryWriteableDirectoryAsFile(long)"], ["void", "org.apache.cassandra.db.Directories.removeTemporaryDirectories()"], ["org.apache.cassandra.db.Directories$DataDirectory", "org.apache.cassandra.db.Directories.getWriteableLocation(long)"], ["boolean", "org.apache.cassandra.db.Directories.hasAvailableDiskSpace(long, long)"], ["org.apache.cassandra.db.Directories$DataDirectory[]", "org.apache.cassandra.db.Directories.getWriteableLocations()"], ["java.io.File", "org.apache.cassandra.db.Directories.getSnapshotDirectory(org.apache.cassandra.io.sstable.Descriptor, java.lang.String)"], ["java.io.File", "org.apache.cassandra.db.Directories.getSnapshotDirectory(java.io.File, java.lang.String)"], ["java.io.File", "org.apache.cassandra.db.Directories.getSnapshotManifestFile(java.lang.String)"], ["java.io.File", "org.apache.cassandra.db.Directories.getSnapshotSchemaFile(java.lang.String)"], ["java.io.File", "org.apache.cassandra.db.Directories.getNewEphemeralSnapshotMarkerFile(java.lang.String)"], ["java.io.File", "org.apache.cassandra.db.Directories.getBackupsDirectory(org.apache.cassandra.io.sstable.Descriptor)"], ["java.io.File", "org.apache.cassandra.db.Directories.getBackupsDirectory(java.io.File)"], ["org.apache.cassandra.db.Directories$SSTableLister", "org.apache.cassandra.db.Directories.sstableLister(org.apache.cassandra.db.Directories$OnTxnErr)"], ["java.util.Map<java.lang.String, org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>", "org.apache.cassandra.db.Directories.getSnapshotDetails()"], ["boolean", "org.apache.cassandra.db.Directories.snapshotExists(java.lang.String)"], ["void", "org.apache.cassandra.db.Directories.clearSnapshot(java.lang.String, java.util.List<java.io.File>)"], ["long", "org.apache.cassandra.db.Directories.snapshotCreationTime(java.lang.String)"], ["long", "org.apache.cassandra.db.Directories.trueSnapshotsSize()"], ["long", "org.apache.cassandra.db.Directories.getRawDiretoriesSize()"], ["long", "org.apache.cassandra.db.Directories.getTrueAllocatedSizeIn(java.io.File)"], ["org.apache.cassandra.db.DiskBoundaries", "org.apache.cassandra.db.DiskBoundaries(org.apache.cassandra.db.Directories$DataDirectory[], int)"], ["org.apache.cassandra.db.DiskBoundaries", "org.apache.cassandra.db.DiskBoundaries(org.apache.cassandra.db.Directories$DataDirectory[], java.util.List<org.apache.cassandra.db.PartitionPosition>, long, int)"], ["boolean", "org.apache.cassandra.db.DiskBoundaries.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.DiskBoundaries.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.DiskBoundaries.toString()"], ["boolean", "org.apache.cassandra.db.DiskBoundaries.isOutOfDate()"], ["void", "org.apache.cassandra.db.DiskBoundaries.invalidate()"], ["int", "org.apache.cassandra.db.DiskBoundaries.getDiskIndex(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.db.Directories$DataDirectory", "org.apache.cassandra.db.DiskBoundaries.getCorrectDiskForSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.db.DiskBoundaryManager", "org.apache.cassandra.db.DiskBoundaryManager()"], ["org.apache.cassandra.db.DiskBoundaries", "org.apache.cassandra.db.DiskBoundaryManager.getDiskBoundaries(org.apache.cassandra.db.ColumnFamilyStore)"], ["void", "org.apache.cassandra.db.DiskBoundaryManager.invalidate()"], ["void", "org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator.close()"], ["boolean", "org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator.hasNext()"], ["R", "org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator.next()"], ["java.lang.Object", "org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator.next()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.metadata()"], ["boolean", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.isReverseOrder()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.columns()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.partitionKey()"], ["staticRow()", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator."], ["void", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.close()"], ["boolean", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.isEmpty()"], ["boolean", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.hasNext()"], ["U", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.next()"], ["java.lang.Object", "org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator.next()"], ["org.apache.cassandra.db.EmptyIterators$EmptyRowIterator", "org.apache.cassandra.db.EmptyIterators$EmptyRowIterator(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, boolean, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredPartitionIterator", "org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredPartitionIterator(org.apache.cassandra.config.CFMetaData, boolean)"], ["boolean", "org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredPartitionIterator.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredPartitionIterator.metadata()"], ["org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator", "org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator(org.apache.cassandra.db.PartitionColumns, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, boolean, org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.DeletionTime)"], ["boolean", "org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator.isEmpty()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator.partitionLevelDeletion()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator.stats()"], ["org.apache.cassandra.db.EmptyIterators", "org.apache.cassandra.db.EmptyIterators()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.EmptyIterators.unfilteredPartition(org.apache.cassandra.config.CFMetaData, boolean)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.EmptyIterators.partition()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.EmptyIterators.unfilteredRow(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, boolean, org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.EmptyIterators.unfilteredRow(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, boolean)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.EmptyIterators.row(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, boolean)"], ["org.apache.cassandra.db.ExpirationDateOverflowHandling$ExpirationDateOverflowPolicy[]", "org.apache.cassandra.db.ExpirationDateOverflowHandling$ExpirationDateOverflowPolicy.values()"], ["org.apache.cassandra.db.ExpirationDateOverflowHandling$ExpirationDateOverflowPolicy", "org.apache.cassandra.db.ExpirationDateOverflowHandling$ExpirationDateOverflowPolicy.valueOf(java.lang.String)"], ["org.apache.cassandra.db.ExpirationDateOverflowHandling", "org.apache.cassandra.db.ExpirationDateOverflowHandling()"], ["void", "org.apache.cassandra.db.ExpirationDateOverflowHandling.maybeApplyExpirationDateOverflowPolicy(org.apache.cassandra.config.CFMetaData, int, boolean)"], ["int", "org.apache.cassandra.db.ExpirationDateOverflowHandling.computeLocalExpirationTime(int, int)"], ["void", "org.apache.cassandra.db.HintedHandOffManager.registerMBean()"], ["void", "org.apache.cassandra.db.HintedHandOffManager.deleteHintsForEndpoint(java.lang.String)"], ["void", "org.apache.cassandra.db.HintedHandOffManager.truncateAllHints()"], ["void", "org.apache.cassandra.db.HintedHandOffManager.scheduleHintDelivery(java.lang.String)"], ["void", "org.apache.cassandra.db.HintedHandOffManager.pauseHintsDelivery(boolean)"], ["org.apache.cassandra.db.Keyspace", "org.apache.cassandra.db.Keyspace$1.apply(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.db.Keyspace$1.apply(java.lang.Object)"], ["void", "org.apache.cassandra.db.Keyspace.setInitialized()"], ["org.apache.cassandra.db.Keyspace", "org.apache.cassandra.db.Keyspace.open(java.lang.String)"], ["org.apache.cassandra.db.Keyspace", "org.apache.cassandra.db.Keyspace.openWithoutSSTables(java.lang.String)"], ["org.apache.cassandra.db.Keyspace", "org.apache.cassandra.db.Keyspace.clear(java.lang.String)"], ["org.apache.cassandra.db.Keyspace", "org.apache.cassandra.db.Keyspace.clear(java.lang.String, org.apache.cassandra.config.Schema)"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.db.Keyspace.openAndGetStore(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.Keyspace.removeUnreadableSSTables(java.io.File)"], ["void", "org.apache.cassandra.db.Keyspace.setMetadata(org.apache.cassandra.schema.KeyspaceMetadata)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.db.Keyspace.getMetadata()"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.db.Keyspace.getColumnFamilyStore(java.lang.String)"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.db.Keyspace.getColumnFamilyStore(java.util.UUID)"], ["boolean", "org.apache.cassandra.db.Keyspace.hasColumnFamilyStore(java.util.UUID)"], ["void", "org.apache.cassandra.db.Keyspace.snapshot(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.db.Keyspace.snapshot(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.Keyspace.getTimestampedSnapshotName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.Keyspace.getTimestampedSnapshotNameWithPrefix(java.lang.String, java.lang.String)"], ["boolean", "org.apache.cassandra.db.Keyspace.snapshotExists(java.lang.String)"], ["void", "org.apache.cassandra.db.Keyspace.clearSnapshot(java.lang.String, java.lang.String)"], ["org.apache.cassandra.db.Keyspace", "org.apache.cassandra.db.Keyspace.mockKS(org.apache.cassandra.schema.KeyspaceMetadata)"], ["void", "org.apache.cassandra.db.Keyspace.dropCf(java.util.UUID)"], ["void", "org.apache.cassandra.db.Keyspace.initCfCustom(org.apache.cassandra.db.ColumnFamilyStore)"], ["void", "org.apache.cassandra.db.Keyspace.initCf(org.apache.cassandra.config.CFMetaData, boolean)"], ["void", "org.apache.cassandra.db.Keyspace.apply(org.apache.cassandra.db.Mutation, boolean, boolean)"], ["void", "org.apache.cassandra.db.Keyspace.apply(org.apache.cassandra.db.Mutation, boolean)"], ["void", "org.apache.cassandra.db.Keyspace.apply(org.apache.cassandra.db.Mutation, boolean, boolean, boolean)"], ["org.apache.cassandra.locator.AbstractReplicationStrategy", "org.apache.cassandra.db.Keyspace.getReplicationStrategy()"], ["java.lang.String", "org.apache.cassandra.db.Keyspace.toString()"], ["java.lang.String", "org.apache.cassandra.db.Keyspace.getName()"], ["org.apache.cassandra.db.KeyspaceNotDefinedException", "org.apache.cassandra.db.KeyspaceNotDefinedException(java.lang.String)"], ["void", "org.apache.cassandra.db.LegacyLayout$1.reduce(int, org.apache.cassandra.db.LegacyLayout$LegacyAtom)"], ["void", "org.apache.cassandra.db.LegacyLayout$1.reduce(int, java.lang.Object)"], ["int", "org.apache.cassandra.db.LegacyLayout$5.compare(org.apache.cassandra.db.LegacyLayout$LegacyCell, org.apache.cassandra.db.LegacyLayout$LegacyCell)"], ["int", "org.apache.cassandra.db.LegacyLayout$5.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.db.LegacyLayout$6.compare(org.apache.cassandra.db.LegacyLayout$LegacyCellName, org.apache.cassandra.db.LegacyLayout$LegacyCellName)"], ["int", "org.apache.cassandra.db.LegacyLayout$6.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.LegacyLayout$CellGrouper", "org.apache.cassandra.db.LegacyLayout$CellGrouper(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.rows.SerializationHelper)"], ["org.apache.cassandra.db.LegacyLayout$CellGrouper", "org.apache.cassandra.db.LegacyLayout$CellGrouper.staticGrouper(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.rows.SerializationHelper)"], ["void", "org.apache.cassandra.db.LegacyLayout$CellGrouper.reset()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$CellGrouper.addAtom(org.apache.cassandra.db.LegacyLayout$LegacyAtom)"], ["boolean", "org.apache.cassandra.db.LegacyLayout$CellGrouper.addCell(org.apache.cassandra.db.LegacyLayout$LegacyCell)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.LegacyLayout$CellGrouper.getRow()"], ["org.apache.cassandra.db.LegacyLayout$LegacyBound", "org.apache.cassandra.db.LegacyLayout$LegacyBound(org.apache.cassandra.db.ClusteringBound, boolean, org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.LegacyLayout$LegacyBound.getAsClustering(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.LegacyLayout$LegacyBound.toString()"], ["org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator", "org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator(org.apache.cassandra.db.ClusteringComparator)"], ["int", "org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator.compare(org.apache.cassandra.db.LegacyLayout$LegacyBound, org.apache.cassandra.db.LegacyLayout$LegacyBound)"], ["int", "org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell$Kind[]", "org.apache.cassandra.db.LegacyLayout$LegacyCell$Kind.values()"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell$Kind", "org.apache.cassandra.db.LegacyLayout$LegacyCell$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout$LegacyCell.regular(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, long)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout$LegacyCell.expiring(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, long, int, int)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout$LegacyCell.tombstone(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, java.nio.ByteBuffer, long, int)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout$LegacyCell.counterUpdate(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, java.nio.ByteBuffer, long)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout$LegacyCell.counter(org.apache.cassandra.db.LegacyLayout$LegacyCellName, java.nio.ByteBuffer)"], ["byte", "org.apache.cassandra.db.LegacyLayout$LegacyCell.serializationFlags()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyCell.isCounterUpdate()"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.LegacyLayout$LegacyCell.clustering()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyCell.isStatic()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyCell.isCell()"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout$LegacyCell.asCell()"], ["org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone", "org.apache.cassandra.db.LegacyLayout$LegacyCell.asRangeTombstone()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyCell.isCounter()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyCell.isExpiring()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyCell.isTombstone()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyCell.isLive(int)"], ["java.lang.String", "org.apache.cassandra.db.LegacyLayout$LegacyCell.toString()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.LegacyLayout$LegacyCellName.encode(org.apache.cassandra.config.CFMetaData)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.LegacyLayout$LegacyCellName.superColumnSubName()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.LegacyLayout$LegacyCellName.superColumnName()"], ["java.lang.String", "org.apache.cassandra.db.LegacyLayout$LegacyCellName.toString()"], ["org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo", "org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo.live()"], ["void", "org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo.add(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo.add(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)"], ["void", "org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo.add(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.RangeTombstone)"], ["org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo", "org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo.deserialize(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone(org.apache.cassandra.db.LegacyLayout$LegacyBound, org.apache.cassandra.db.LegacyLayout$LegacyBound, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.clustering()"], ["org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.withNewStart(org.apache.cassandra.db.LegacyLayout$LegacyBound)"], ["org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.withNewEnd(org.apache.cassandra.db.LegacyLayout$LegacyBound)"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.isCell()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.isStatic()"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.asCell()"], ["org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.asRangeTombstone()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.isCollectionTombstone()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.isRowDeletion(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone.toString()"], ["org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList(org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator, int)"], ["java.lang.String", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList.toString()"], ["boolean", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList.isEmpty()"], ["int", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList.size()"], ["void", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList.add(org.apache.cassandra.db.LegacyLayout$LegacyBound, org.apache.cassandra.db.LegacyLayout$LegacyBound, long, int)"], ["void", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList.addAll(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList)"], ["void", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList.updateDigest(java.security.MessageDigest)"], ["void", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList.serialize(org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList.serializedSize(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.LegacyLayout$LegacyUnfilteredPartition.digest(org.apache.cassandra.config.CFMetaData, java.security.MessageDigest)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCellName", "org.apache.cassandra.db.LegacyLayout.decodeCellName(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCellName", "org.apache.cassandra.db.LegacyLayout.decodeCellName(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCellName", "org.apache.cassandra.db.LegacyLayout.decodeCellName(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, boolean)"], ["org.apache.cassandra.db.LegacyLayout$LegacyBound", "org.apache.cassandra.db.LegacyLayout.decodeSliceBound(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, boolean)"], ["org.apache.cassandra.db.LegacyLayout$LegacyBound", "org.apache.cassandra.db.LegacyLayout.decodeTombstoneBound(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, boolean)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.LegacyLayout.encodeBound(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.ClusteringBound, boolean)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.LegacyLayout.encodeCellName(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.ClusteringPrefix, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.LegacyLayout.decodeClustering(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.LegacyLayout.encodeClustering(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.ClusteringPrefix)"], ["org.apache.cassandra.db.LegacyLayout$LegacyUnfilteredPartition", "org.apache.cassandra.db.LegacyLayout.fromUnfilteredRowIterator(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["void", "org.apache.cassandra.db.LegacyLayout.serializeAsLegacyPartition(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.LegacyLayout.deserializeLegacyPartition(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.rows.SerializationHelper$Flag, java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.db.LegacyLayout.serializedSizeAsLegacyPartition(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.rows.UnfilteredRowIterator, int)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.LegacyLayout.toUnfilteredRowIterator(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo, java.util.Iterator<org.apache.cassandra.db.LegacyLayout$LegacyCell>)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.LegacyLayout.onWireCellstoUnfilteredRowIterator(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo, java.util.Iterator<org.apache.cassandra.db.LegacyLayout$LegacyCell>, boolean, org.apache.cassandra.db.rows.SerializationHelper)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.LegacyLayout.extractStaticColumns(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.Columns)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList, java.util.Iterator<org.apache.cassandra.db.LegacyLayout$LegacyCell>>", "org.apache.cassandra.db.LegacyLayout.fromRowIterator(org.apache.cassandra.db.rows.RowIterator)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.LegacyLayout.toRowIterator(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, java.util.Iterator<org.apache.cassandra.db.LegacyLayout$LegacyCell>, int)"], ["org.apache.cassandra.db.LegacyLayout$LegacyAtom", "org.apache.cassandra.db.LegacyLayout.readLegacyAtom(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataInputPlus, boolean)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout.readLegacyCell(org.apache.cassandra.config.CFMetaData, java.io.DataInput, org.apache.cassandra.db.rows.SerializationHelper$Flag)"], ["org.apache.cassandra.db.LegacyLayout$LegacyCell", "org.apache.cassandra.db.LegacyLayout.readLegacyCellBody(org.apache.cassandra.config.CFMetaData, java.io.DataInput, java.nio.ByteBuffer, int, org.apache.cassandra.db.rows.SerializationHelper$Flag, boolean)"], ["org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone", "org.apache.cassandra.db.LegacyLayout.readLegacyRangeTombstoneBody(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataInputPlus, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.LivenessInfo$ExpiredLivenessInfo.isExpired()"], ["boolean", "org.apache.cassandra.db.LivenessInfo$ExpiredLivenessInfo.isLive(int)"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.LivenessInfo$ExpiredLivenessInfo.withUpdatedTimestamp(long)"], ["int", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.ttl()"], ["int", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.localExpirationTime()"], ["boolean", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.isExpiring()"], ["boolean", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.isLive(int)"], ["void", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.digest(java.security.MessageDigest)"], ["void", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.validate()"], ["int", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.dataSize()"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.withUpdatedTimestamp(long)"], ["java.lang.String", "org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo.toString()"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.LivenessInfo.create(long, int)"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.LivenessInfo.expiring(long, int, int)"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.LivenessInfo.create(long, int, int)"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.LivenessInfo.withExpirationTime(long, int, int)"], ["boolean", "org.apache.cassandra.db.LivenessInfo.isEmpty()"], ["long", "org.apache.cassandra.db.LivenessInfo.timestamp()"], ["boolean", "org.apache.cassandra.db.LivenessInfo.isExpiring()"], ["int", "org.apache.cassandra.db.LivenessInfo.ttl()"], ["int", "org.apache.cassandra.db.LivenessInfo.localExpirationTime()"], ["boolean", "org.apache.cassandra.db.LivenessInfo.isLive(int)"], ["void", "org.apache.cassandra.db.LivenessInfo.digest(java.security.MessageDigest)"], ["void", "org.apache.cassandra.db.LivenessInfo.validate()"], ["int", "org.apache.cassandra.db.LivenessInfo.dataSize()"], ["boolean", "org.apache.cassandra.db.LivenessInfo.supersedes(org.apache.cassandra.db.LivenessInfo)"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.LivenessInfo.withUpdatedTimestamp(long)"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.LivenessInfo.withUpdatedTimestampAndLocalDeletionTime(long, int)"], ["java.lang.String", "org.apache.cassandra.db.LivenessInfo.toString()"], ["boolean", "org.apache.cassandra.db.LivenessInfo.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.LivenessInfo.hashCode()"], ["void", "org.apache.cassandra.db.Memtable$ColumnsCollector.update(org.apache.cassandra.db.PartitionColumns)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.Memtable$ColumnsCollector.get()"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.db.Memtable$FlushRunnable.createFlushWriter(org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.lang.String, org.apache.cassandra.db.PartitionColumns, org.apache.cassandra.db.rows.EncodingStats)"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.db.Memtable$FlushRunnable.call()"], ["java.lang.Object", "org.apache.cassandra.db.Memtable$FlushRunnable.call()"], ["org.apache.cassandra.db.Memtable$LastCommitLogPosition", "org.apache.cassandra.db.Memtable$LastCommitLogPosition(org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator", "org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator(org.apache.cassandra.db.ColumnFamilyStore, java.util.Iterator<java.util.Map$Entry<org.apache.cassandra.db.PartitionPosition, org.apache.cassandra.db.partitions.AtomicBTreePartition>>, boolean, int, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.DataRange)"], ["boolean", "org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator.isForThrift()"], ["int", "org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator.getMinLocalDeletionTime()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator.metadata()"], ["boolean", "org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator.next()"], ["java.lang.Object", "org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator.next()"], ["void", "org.apache.cassandra.db.Memtable$StatsCollector.update(org.apache.cassandra.db.rows.EncodingStats)"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.Memtable$StatsCollector.get()"], ["int", "org.apache.cassandra.db.Memtable.compareTo(org.apache.cassandra.db.Memtable)"], ["org.apache.cassandra.db.Memtable", "org.apache.cassandra.db.Memtable(java.util.concurrent.atomic.AtomicReference<org.apache.cassandra.db.commitlog.CommitLogPosition>, org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.db.Memtable", "org.apache.cassandra.db.Memtable(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.utils.memory.MemtableAllocator", "org.apache.cassandra.db.Memtable.getAllocator()"], ["long", "org.apache.cassandra.db.Memtable.getLiveDataSize()"], ["long", "org.apache.cassandra.db.Memtable.getOperations()"], ["void", "org.apache.cassandra.db.Memtable.setDiscarding(org.apache.cassandra.utils.concurrent.OpOrder$Barrier, java.util.concurrent.atomic.AtomicReference<org.apache.cassandra.db.commitlog.CommitLogPosition>)"], ["boolean", "org.apache.cassandra.db.Memtable.accepts(org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.Memtable.getCommitLogLowerBound()"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.Memtable.getCommitLogUpperBound()"], ["boolean", "org.apache.cassandra.db.Memtable.isLive()"], ["boolean", "org.apache.cassandra.db.Memtable.isClean()"], ["boolean", "org.apache.cassandra.db.Memtable.mayContainDataBefore(org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["boolean", "org.apache.cassandra.db.Memtable.isExpired()"], ["int", "org.apache.cassandra.db.Memtable.partitionCount()"], ["java.lang.Throwable", "org.apache.cassandra.db.Memtable.abortRunnables(java.util.List<org.apache.cassandra.db.Memtable$FlushRunnable>, java.lang.Throwable)"], ["java.lang.String", "org.apache.cassandra.db.Memtable.toString()"], ["org.apache.cassandra.db.Memtable$MemtableUnfilteredPartitionIterator", "org.apache.cassandra.db.Memtable.makePartitionIterator(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.DataRange, boolean)"], ["org.apache.cassandra.db.partitions.Partition", "org.apache.cassandra.db.Memtable.getPartition(org.apache.cassandra.db.DecoratedKey)"], ["long", "org.apache.cassandra.db.Memtable.getMinTimestamp()"], ["void", "org.apache.cassandra.db.Memtable.makeUnflushable()"], ["int", "org.apache.cassandra.db.Memtable.compareTo(java.lang.Object)"], ["org.apache.cassandra.db.MigrationRequestVerbHandler", "org.apache.cassandra.db.MigrationRequestVerbHandler()"], ["void", "org.apache.cassandra.db.MigrationRequestVerbHandler.doVerb(org.apache.cassandra.net.MessageIn, int)"], ["org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder", "org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder(org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder.addElementToAll(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder.addEachElementToAll(java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder.addAllElementsToAll(java.util.List<java.util.List<java.nio.ByteBuffer>>)"], ["org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder", "org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder(org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder.addElementToAll(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder.addEachElementToAll(java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder.addAllElementsToAll(java.util.List<java.util.List<java.nio.ByteBuffer>>)"], ["org.apache.cassandra.db.MultiCBuilder", "org.apache.cassandra.db.MultiCBuilder.create(org.apache.cassandra.db.ClusteringComparator, boolean)"], ["int", "org.apache.cassandra.db.MultiCBuilder.remainingCount()"], ["boolean", "org.apache.cassandra.db.MultiCBuilder.containsNull()"], ["boolean", "org.apache.cassandra.db.MultiCBuilder.containsUnset()"], ["boolean", "org.apache.cassandra.db.MultiCBuilder.hasMissingElements()"], ["boolean", "org.apache.cassandra.db.MultiCBuilder.hasRemaining()"], ["void", "org.apache.cassandra.db.MutableDeletionInfo$Builder.add(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["org.apache.cassandra.db.MutableDeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo$Builder.build()"], ["org.apache.cassandra.db.MutableDeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo(long, int)"], ["org.apache.cassandra.db.MutableDeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo(org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.MutableDeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo(org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.RangeTombstoneList)"], ["org.apache.cassandra.db.MutableDeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo.live()"], ["org.apache.cassandra.db.MutableDeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo.mutableCopy()"], ["org.apache.cassandra.db.MutableDeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["boolean", "org.apache.cassandra.db.MutableDeletionInfo.isLive()"], ["void", "org.apache.cassandra.db.MutableDeletionInfo.add(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.MutableDeletionInfo.add(org.apache.cassandra.db.RangeTombstone, org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.DeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo.add(org.apache.cassandra.db.DeletionInfo)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.MutableDeletionInfo.getPartitionDeletion()"], ["org.apache.cassandra.db.RangeTombstone", "org.apache.cassandra.db.MutableDeletionInfo.rangeCovering(org.apache.cassandra.db.Clustering)"], ["int", "org.apache.cassandra.db.MutableDeletionInfo.dataSize()"], ["boolean", "org.apache.cassandra.db.MutableDeletionInfo.hasRanges()"], ["int", "org.apache.cassandra.db.MutableDeletionInfo.rangeCount()"], ["long", "org.apache.cassandra.db.MutableDeletionInfo.maxTimestamp()"], ["boolean", "org.apache.cassandra.db.MutableDeletionInfo.mayModify(org.apache.cassandra.db.DeletionInfo)"], ["java.lang.String", "org.apache.cassandra.db.MutableDeletionInfo.toString()"], ["org.apache.cassandra.db.DeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo.updateAllTimestamp(long)"], ["boolean", "org.apache.cassandra.db.MutableDeletionInfo.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.MutableDeletionInfo.hashCode()"], ["long", "org.apache.cassandra.db.MutableDeletionInfo.unsharedHeapSize()"], ["void", "org.apache.cassandra.db.MutableDeletionInfo.collectStats(org.apache.cassandra.db.rows.EncodingStats$Collector)"], ["org.apache.cassandra.db.MutableDeletionInfo$Builder", "org.apache.cassandra.db.MutableDeletionInfo.builder(org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.ClusteringComparator, boolean)"], ["org.apache.cassandra.db.DeletionInfo", "org.apache.cassandra.db.MutableDeletionInfo.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.Mutation$MutationSerializer", "org.apache.cassandra.db.Mutation$MutationSerializer()"], ["void", "org.apache.cassandra.db.Mutation$MutationSerializer.serialize(org.apache.cassandra.db.Mutation, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation$MutationSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.rows.SerializationHelper$Flag)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation$MutationSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.Mutation$MutationSerializer.serializedSize(org.apache.cassandra.db.Mutation, int)"], ["long", "org.apache.cassandra.db.Mutation$MutationSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.Mutation$MutationSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.Mutation$MutationSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation(java.lang.String, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation(org.apache.cassandra.db.partitions.PartitionUpdate)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation.copy()"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation.without(java.util.Set<java.util.UUID>)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation.without(java.util.UUID)"], ["java.lang.String", "org.apache.cassandra.db.Mutation.getKeyspaceName()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.Mutation.key()"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.Mutation.getPartitionUpdate(java.util.UUID)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation.add(org.apache.cassandra.db.partitions.PartitionUpdate)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.Mutation.get(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.db.Mutation.isEmpty()"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.Mutation.merge(java.util.List<org.apache.cassandra.db.Mutation>)"], ["void", "org.apache.cassandra.db.Mutation.apply(boolean, boolean)"], ["void", "org.apache.cassandra.db.Mutation.apply(boolean)"], ["void", "org.apache.cassandra.db.Mutation.apply()"], ["void", "org.apache.cassandra.db.Mutation.applyUnsafe()"], ["long", "org.apache.cassandra.db.Mutation.getTimeout()"], ["int", "org.apache.cassandra.db.Mutation.smallestGCGS()"], ["boolean", "org.apache.cassandra.db.Mutation.trackedByCDC()"], ["java.lang.String", "org.apache.cassandra.db.Mutation.toString()"], ["java.lang.String", "org.apache.cassandra.db.Mutation.toString(boolean)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.db.Mutation.simpleBuilder(java.lang.String, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.MutationVerbHandler", "org.apache.cassandra.db.MutationVerbHandler()"], ["void", "org.apache.cassandra.db.MutationVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.Mutation>, int)"], ["org.apache.cassandra.db.NativeClustering", "org.apache.cassandra.db.NativeClustering(org.apache.cassandra.utils.memory.NativeAllocator, org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.ClusteringPrefix$Kind", "org.apache.cassandra.db.NativeClustering.kind()"], ["int", "org.apache.cassandra.db.NativeClustering.size()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.NativeClustering.get(int)"], ["java.nio.ByteBuffer[]", "org.apache.cassandra.db.NativeClustering.getRawValues()"], ["long", "org.apache.cassandra.db.NativeClustering.unsharedHeapSize()"], ["long", "org.apache.cassandra.db.NativeClustering.unsharedHeapSizeExcludingData()"], ["org.apache.cassandra.db.NativeDecoratedKey", "org.apache.cassandra.db.NativeDecoratedKey(org.apache.cassandra.dht.Token, org.apache.cassandra.utils.memory.NativeAllocator, org.apache.cassandra.utils.concurrent.OpOrder$Group, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.NativeDecoratedKey.getKey()"], ["org.apache.cassandra.db.PartitionColumns$Builder", "org.apache.cassandra.db.PartitionColumns$Builder()"], ["org.apache.cassandra.db.PartitionColumns$Builder", "org.apache.cassandra.db.PartitionColumns$Builder.add(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.PartitionColumns$Builder", "org.apache.cassandra.db.PartitionColumns$Builder.addAll(java.lang.Iterable<org.apache.cassandra.config.ColumnDefinition>)"], ["org.apache.cassandra.db.PartitionColumns$Builder", "org.apache.cassandra.db.PartitionColumns$Builder.addAll(org.apache.cassandra.db.PartitionColumns)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.PartitionColumns$Builder.build()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.PartitionColumns(org.apache.cassandra.db.Columns, org.apache.cassandra.db.Columns)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.PartitionColumns.of(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.PartitionColumns.without(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.PartitionColumns.withoutStatics()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.PartitionColumns.mergeTo(org.apache.cassandra.db.PartitionColumns)"], ["boolean", "org.apache.cassandra.db.PartitionColumns.isEmpty()"], ["org.apache.cassandra.db.Columns", "org.apache.cassandra.db.PartitionColumns.columns(boolean)"], ["boolean", "org.apache.cassandra.db.PartitionColumns.contains(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.db.PartitionColumns.includes(org.apache.cassandra.db.PartitionColumns)"], ["int", "org.apache.cassandra.db.PartitionColumns.size()"], ["java.lang.String", "org.apache.cassandra.db.PartitionColumns.toString()"], ["boolean", "org.apache.cassandra.db.PartitionColumns.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.PartitionColumns.hashCode()"], ["org.apache.cassandra.db.PartitionColumns$Builder", "org.apache.cassandra.db.PartitionColumns.builder()"], ["org.apache.cassandra.db.PartitionPosition$ForKey", "org.apache.cassandra.db.PartitionPosition$ForKey()"], ["org.apache.cassandra.db.PartitionPosition", "org.apache.cassandra.db.PartitionPosition$ForKey.get(java.nio.ByteBuffer, org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.db.PartitionPosition$Kind[]", "org.apache.cassandra.db.PartitionPosition$Kind.values()"], ["org.apache.cassandra.db.PartitionPosition$Kind", "org.apache.cassandra.db.PartitionPosition$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.db.PartitionPosition$RowPositionSerializer", "org.apache.cassandra.db.PartitionPosition$RowPositionSerializer()"], ["void", "org.apache.cassandra.db.PartitionPosition$RowPositionSerializer.serialize(org.apache.cassandra.db.PartitionPosition, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.PartitionPosition", "org.apache.cassandra.db.PartitionPosition$RowPositionSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["long", "org.apache.cassandra.db.PartitionPosition$RowPositionSerializer.serializedSize(org.apache.cassandra.db.PartitionPosition, int)"], ["long", "org.apache.cassandra.db.PartitionPosition$RowPositionSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.PartitionPosition$RowPositionSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["void", "org.apache.cassandra.db.PartitionPosition$RowPositionSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["void", "org.apache.cassandra.db.PartitionRangeReadCommand$1.onScanningStarted(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.db.PartitionRangeReadCommand$1CacheFilter.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand$Deserializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, boolean, int, boolean, org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.db.PartitionRangeReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.create(boolean, org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.db.DataRange)"], ["org.apache.cassandra.db.PartitionRangeReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.allDataRead(org.apache.cassandra.config.CFMetaData, int)"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.db.PartitionRangeReadCommand.dataRange()"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.PartitionRangeReadCommand.clusteringIndexFilter(org.apache.cassandra.db.DecoratedKey)"], ["boolean", "org.apache.cassandra.db.PartitionRangeReadCommand.isNamesQuery()"], ["org.apache.cassandra.db.PartitionRangeReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.forSubRange(org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>, boolean)"], ["org.apache.cassandra.db.PartitionRangeReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.copy()"], ["org.apache.cassandra.db.PartitionRangeReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.copyAsDigestQuery()"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.db.PartitionRangeReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.withUpdatedDataRange(org.apache.cassandra.db.DataRange)"], ["org.apache.cassandra.db.PartitionRangeReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.withUpdatedLimitsAndDataRange(org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.db.DataRange)"], ["long", "org.apache.cassandra.db.PartitionRangeReadCommand.getTimeout()"], ["boolean", "org.apache.cassandra.db.PartitionRangeReadCommand.selectsKey(org.apache.cassandra.db.DecoratedKey)"], ["boolean", "org.apache.cassandra.db.PartitionRangeReadCommand.selectsClustering(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.PartitionRangeReadCommand.execute(org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.db.PartitionRangeReadCommand.getPager(org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.PartitionRangeReadCommand.queryStorage(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.PartitionRangeReadCommand.postReconciliationProcessing(org.apache.cassandra.db.partitions.PartitionIterator)"], ["boolean", "org.apache.cassandra.db.PartitionRangeReadCommand.selectsFullPartition()"], ["java.lang.String", "org.apache.cassandra.db.PartitionRangeReadCommand.toString()"], ["boolean", "org.apache.cassandra.db.PartitionRangeReadCommand.isLimitedToOnePartition()"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.copyAsDigestQuery()"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.PartitionRangeReadCommand.copy()"], ["org.apache.cassandra.db.PreHashedDecoratedKey", "org.apache.cassandra.db.PreHashedDecoratedKey(org.apache.cassandra.dht.Token, java.nio.ByteBuffer, long, long)"], ["void", "org.apache.cassandra.db.PreHashedDecoratedKey.filterHash(long[])"], ["org.apache.cassandra.db.RangeSliceVerbHandler", "org.apache.cassandra.db.RangeSliceVerbHandler()"], ["org.apache.cassandra.db.RangeTombstone", "org.apache.cassandra.db.RangeTombstone(org.apache.cassandra.db.Slice, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.RangeTombstone.deletedSlice()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.RangeTombstone.deletionTime()"], ["java.lang.String", "org.apache.cassandra.db.RangeTombstone.toString(org.apache.cassandra.db.ClusteringComparator)"], ["boolean", "org.apache.cassandra.db.RangeTombstone.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.RangeTombstone.hashCode()"], ["org.apache.cassandra.db.RangeTombstoneList", "org.apache.cassandra.db.RangeTombstoneList(org.apache.cassandra.db.ClusteringComparator, int)"], ["boolean", "org.apache.cassandra.db.RangeTombstoneList.isEmpty()"], ["int", "org.apache.cassandra.db.RangeTombstoneList.size()"], ["org.apache.cassandra.db.ClusteringComparator", "org.apache.cassandra.db.RangeTombstoneList.comparator()"], ["org.apache.cassandra.db.RangeTombstoneList", "org.apache.cassandra.db.RangeTombstoneList.copy()"], ["org.apache.cassandra.db.RangeTombstoneList", "org.apache.cassandra.db.RangeTombstoneList.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["void", "org.apache.cassandra.db.RangeTombstoneList.add(org.apache.cassandra.db.RangeTombstone)"], ["void", "org.apache.cassandra.db.RangeTombstoneList.add(org.apache.cassandra.db.ClusteringBound, org.apache.cassandra.db.ClusteringBound, long, int)"], ["void", "org.apache.cassandra.db.RangeTombstoneList.addAll(org.apache.cassandra.db.RangeTombstoneList)"], ["boolean", "org.apache.cassandra.db.RangeTombstoneList.isDeleted(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Cell)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.RangeTombstoneList.searchDeletionTime(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.RangeTombstone", "org.apache.cassandra.db.RangeTombstoneList.search(org.apache.cassandra.db.Clustering)"], ["int", "org.apache.cassandra.db.RangeTombstoneList.dataSize()"], ["long", "org.apache.cassandra.db.RangeTombstoneList.maxMarkedAt()"], ["void", "org.apache.cassandra.db.RangeTombstoneList.collectStats(org.apache.cassandra.db.rows.EncodingStats$Collector)"], ["void", "org.apache.cassandra.db.RangeTombstoneList.updateAllTimestamp(long)"], ["boolean", "org.apache.cassandra.db.RangeTombstoneList.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.RangeTombstoneList.hashCode()"], ["long", "org.apache.cassandra.db.RangeTombstoneList.unsharedHeapSize()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.ReadCommand$1MetricRecording.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.ReadCommand$1MetricRecording.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.ReadCommand$1MetricRecording.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.ReadCommand$1MetricRecording.applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["void", "org.apache.cassandra.db.ReadCommand$1MetricRecording.onClose()"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.db.ReadCommand$1MetricRecording.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["org.apache.cassandra.db.ReadCommand$1WithoutPurgeableTombstones", "org.apache.cassandra.db.ReadCommand$1WithoutPurgeableTombstones()"], ["org.apache.cassandra.db.ReadCommand$Kind[]", "org.apache.cassandra.db.ReadCommand$Kind.values()"], ["org.apache.cassandra.db.ReadCommand$Kind", "org.apache.cassandra.db.ReadCommand$Kind.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer.serialize(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer.serializedSize(org.apache.cassandra.db.ReadCommand, int)"], ["long", "org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["void", "org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer.serialize(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer.serializedSize(org.apache.cassandra.db.ReadCommand, int)"], ["long", "org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["void", "org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer.serialize(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer.serializedSize(org.apache.cassandra.db.ReadCommand, int)"], ["long", "org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.ReadCommand$LegacyType[]", "org.apache.cassandra.db.ReadCommand$LegacyType.values()"], ["org.apache.cassandra.db.ReadCommand$LegacyType", "org.apache.cassandra.db.ReadCommand$LegacyType.valueOf(java.lang.String)"], ["org.apache.cassandra.db.ReadCommand$LegacyType", "org.apache.cassandra.db.ReadCommand$LegacyType.fromPartitionFilterKind(org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind)"], ["org.apache.cassandra.db.ReadCommand$LegacyType", "org.apache.cassandra.db.ReadCommand$LegacyType.fromSerializedValue(byte)"], ["void", "org.apache.cassandra.db.ReadCommand$Serializer.serialize(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.ReadCommand$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.ReadCommand$Serializer.serializedSize(org.apache.cassandra.db.ReadCommand, int)"], ["long", "org.apache.cassandra.db.ReadCommand$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.ReadCommand$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.ReadCommand$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.ReadCommand.metadata()"], ["int", "org.apache.cassandra.db.ReadCommand.nowInSec()"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.db.ReadCommand.columnFilter()"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.db.ReadCommand.rowFilter()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.ReadCommand.limits()"], ["boolean", "org.apache.cassandra.db.ReadCommand.isDigestQuery()"], ["int", "org.apache.cassandra.db.ReadCommand.digestVersion()"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.ReadCommand.setDigestVersion(int)"], ["boolean", "org.apache.cassandra.db.ReadCommand.isForThrift()"], ["org.apache.cassandra.schema.IndexMetadata", "org.apache.cassandra.db.ReadCommand.indexMetadata()"], ["org.apache.cassandra.db.ReadResponse", "org.apache.cassandra.db.ReadCommand.createResponse(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)"], ["org.apache.cassandra.index.Index", "org.apache.cassandra.db.ReadCommand.getIndex(org.apache.cassandra.db.ColumnFamilyStore)"], ["void", "org.apache.cassandra.db.ReadCommand.maybeValidateIndex()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.ReadCommand.executeLocally(org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.ReadCommand.executeInternal(org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.db.ReadCommand.executionController()"], ["java.lang.String", "org.apache.cassandra.db.ReadCommand.toCQLString()"], ["java.lang.String", "org.apache.cassandra.db.ReadCommand.name()"], ["org.apache.cassandra.db.ReadCommandVerbHandler", "org.apache.cassandra.db.ReadCommandVerbHandler()"], ["void", "org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.ReadCommand>, int)"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.db.ReadExecutionController.indexReadController()"], ["org.apache.cassandra.utils.concurrent.OpOrder$Group", "org.apache.cassandra.db.ReadExecutionController.writeOpOrderGroup()"], ["boolean", "org.apache.cassandra.db.ReadExecutionController.validForReadOn(org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.db.ReadExecutionController.empty()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.ReadExecutionController.metaData()"], ["void", "org.apache.cassandra.db.ReadExecutionController.close()"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.db.ReadQuery$1.executionController()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.ReadQuery$1.execute(org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.ReadQuery$1.executeInternal(org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.ReadQuery$1.executeLocally(org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.ReadQuery$1.limits()"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.db.ReadQuery$1.getPager(org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.ReadQuery$1.selectsKey(org.apache.cassandra.db.DecoratedKey)"], ["boolean", "org.apache.cassandra.db.ReadQuery$1.selectsClustering(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["boolean", "org.apache.cassandra.db.ReadQuery$1.selectsFullPartition()"], ["org.apache.cassandra.db.ReadRepairVerbHandler", "org.apache.cassandra.db.ReadRepairVerbHandler()"], ["void", "org.apache.cassandra.db.ReadRepairVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.Mutation>, int)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.ReadResponse$DataResponse.makeIterator(org.apache.cassandra.db.ReadCommand)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.ReadResponse$DataResponse.digest(org.apache.cassandra.db.ReadCommand)"], ["boolean", "org.apache.cassandra.db.ReadResponse$DataResponse.isDigestResponse()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.ReadResponse$DigestResponse.makeIterator(org.apache.cassandra.db.ReadCommand)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.ReadResponse$DigestResponse.digest(org.apache.cassandra.db.ReadCommand)"], ["boolean", "org.apache.cassandra.db.ReadResponse$DigestResponse.isDigestResponse()"], ["void", "org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer.serialize(org.apache.cassandra.db.ReadResponse, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.ReadResponse", "org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer.serializedSize(org.apache.cassandra.db.ReadResponse, int)"], ["long", "org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["boolean", "org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1.metadata()"], ["boolean", "org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1.next()"], ["java.lang.Object", "org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1.next()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse.makeIterator(org.apache.cassandra.db.ReadCommand)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse.digest(org.apache.cassandra.db.ReadCommand)"], ["boolean", "org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse.isDigestResponse()"], ["void", "org.apache.cassandra.db.ReadResponse$Serializer.serialize(org.apache.cassandra.db.ReadResponse, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.ReadResponse", "org.apache.cassandra.db.ReadResponse$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.ReadResponse$Serializer.serializedSize(org.apache.cassandra.db.ReadResponse, int)"], ["long", "org.apache.cassandra.db.ReadResponse$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.ReadResponse$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.ReadResponse$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.ReadResponse", "org.apache.cassandra.db.ReadResponse.createDataResponse(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.ReadCommand)"], ["org.apache.cassandra.db.ReadResponse", "org.apache.cassandra.db.ReadResponse.createRemoteDataResponse(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.ReadCommand)"], ["org.apache.cassandra.db.ReadResponse", "org.apache.cassandra.db.ReadResponse.createDigestResponse(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.ReadCommand)"], ["java.lang.String", "org.apache.cassandra.db.ReadResponse.toDebugString(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.io.sstable.IndexInfo", "org.apache.cassandra.db.RowIndexEntry$FileIndexInfoRetriever.columnsIndex(int)"], ["void", "org.apache.cassandra.db.RowIndexEntry$FileIndexInfoRetriever.close()"], ["org.apache.cassandra.io.sstable.IndexInfo", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry$1.columnsIndex(int)"], ["void", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry$1.close()"], ["boolean", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry.indexOnHeap()"], ["int", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry.columnsIndexCount()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry.deletionTime()"], ["long", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry.headerLength()"], ["org.apache.cassandra.db.RowIndexEntry$IndexInfoRetriever", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry.openWithIndex(org.apache.cassandra.io.util.FileHandle)"], ["long", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry.unsharedHeapSize()"], ["void", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry.serialize(org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.io.sstable.IndexInfo$Serializer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.RowIndexEntry$IndexedEntry.serializeForCache(org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry.deletionTime()"], ["long", "org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry.headerLength()"], ["long", "org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry.unsharedHeapSize()"], ["int", "org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry.columnsIndexCount()"], ["void", "org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry.serialize(org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.io.sstable.IndexInfo$Serializer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry.serializeForCache(org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.RowIndexEntry$IndexInfoRetriever", "org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry.openWithIndex(org.apache.cassandra.io.util.FileHandle)"], ["org.apache.cassandra.db.RowIndexEntry$Serializer", "org.apache.cassandra.db.RowIndexEntry$Serializer(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.io.sstable.IndexInfo$Serializer", "org.apache.cassandra.db.RowIndexEntry$Serializer.indexInfoSerializer()"], ["void", "org.apache.cassandra.db.RowIndexEntry$Serializer.serialize(org.apache.cassandra.db.RowIndexEntry<org.apache.cassandra.io.sstable.IndexInfo>, org.apache.cassandra.io.util.DataOutputPlus, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.RowIndexEntry$Serializer.serializeForCache(org.apache.cassandra.db.RowIndexEntry<org.apache.cassandra.io.sstable.IndexInfo>, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.db.RowIndexEntry$Serializer.skipForCache(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.io.sstable.format.Version)"], ["long", "org.apache.cassandra.db.RowIndexEntry$Serializer.deserializePositionAndSkip(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.db.RowIndexEntry$Serializer.readPosition(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.io.sstable.format.Version)"], ["void", "org.apache.cassandra.db.RowIndexEntry$Serializer.skip(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.io.sstable.format.Version)"], ["void", "org.apache.cassandra.db.RowIndexEntry$Serializer.serializeOffsets(org.apache.cassandra.io.util.DataOutputBuffer, int[], int)"], ["org.apache.cassandra.io.ISerializer", "org.apache.cassandra.db.RowIndexEntry$Serializer.indexInfoSerializer()"], ["int", "org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry.columnsIndexCount()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry.deletionTime()"], ["long", "org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry.headerLength()"], ["org.apache.cassandra.db.RowIndexEntry$IndexInfoRetriever", "org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry.openWithIndex(org.apache.cassandra.io.util.FileHandle)"], ["long", "org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry.unsharedHeapSize()"], ["void", "org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry.serialize(org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.io.sstable.IndexInfo$Serializer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry.serializeForCache(org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.RowIndexEntry", "org.apache.cassandra.db.RowIndexEntry(long)"], ["boolean", "org.apache.cassandra.db.RowIndexEntry.isIndexed()"], ["boolean", "org.apache.cassandra.db.RowIndexEntry.indexOnHeap()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.RowIndexEntry.deletionTime()"], ["long", "org.apache.cassandra.db.RowIndexEntry.headerLength()"], ["int", "org.apache.cassandra.db.RowIndexEntry.columnsIndexCount()"], ["long", "org.apache.cassandra.db.RowIndexEntry.unsharedHeapSize()"], ["org.apache.cassandra.db.RowIndexEntry$IndexInfoRetriever", "org.apache.cassandra.db.RowIndexEntry.openWithIndex(org.apache.cassandra.io.util.FileHandle)"], ["void", "org.apache.cassandra.db.RowIndexEntry.serialize(org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.io.sstable.IndexInfo$Serializer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.RowIndexEntry.serializeForCache(org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.SchemaCheckVerbHandler", "org.apache.cassandra.db.SchemaCheckVerbHandler()"], ["void", "org.apache.cassandra.db.SchemaCheckVerbHandler.doVerb(org.apache.cassandra.net.MessageIn, int)"], ["org.apache.cassandra.io.sstable.metadata.MetadataType", "org.apache.cassandra.db.SerializationHeader$Component.getType()"], ["org.apache.cassandra.db.SerializationHeader", "org.apache.cassandra.db.SerializationHeader$Component.toHeader(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.db.SerializationHeader$Component.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.SerializationHeader$Component.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.SerializationHeader$Component.toString()"], ["java.util.Map<java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>>", "org.apache.cassandra.db.SerializationHeader$Component.getStaticColumns()"], ["java.util.Map<java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>>", "org.apache.cassandra.db.SerializationHeader$Component.getRegularColumns()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.SerializationHeader$Component.getEncodingStats()"], ["org.apache.cassandra.db.SerializationHeader$Serializer", "org.apache.cassandra.db.SerializationHeader$Serializer()"], ["void", "org.apache.cassandra.db.SerializationHeader$Serializer.serializeForMessaging(org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.io.util.DataOutputPlus, boolean)"], ["org.apache.cassandra.db.SerializationHeader", "org.apache.cassandra.db.SerializationHeader$Serializer.deserializeForMessaging(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.filter.ColumnFilter, boolean)"], ["long", "org.apache.cassandra.db.SerializationHeader$Serializer.serializedSizeForMessaging(org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.filter.ColumnFilter, boolean)"], ["void", "org.apache.cassandra.db.SerializationHeader$Serializer.serialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.db.SerializationHeader$Component, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.SerializationHeader$Component", "org.apache.cassandra.db.SerializationHeader$Serializer.deserialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.util.DataInputPlus)"], ["int", "org.apache.cassandra.db.SerializationHeader$Serializer.serializedSize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.db.SerializationHeader$Component)"], ["org.apache.cassandra.io.sstable.metadata.MetadataComponent", "org.apache.cassandra.db.SerializationHeader$Serializer.deserialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.SerializationHeader$Serializer.serialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.MetadataComponent, org.apache.cassandra.io.util.DataOutputPlus)"], ["int", "org.apache.cassandra.db.SerializationHeader$Serializer.serializedSize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.MetadataComponent)"], ["org.apache.cassandra.db.SerializationHeader", "org.apache.cassandra.db.SerializationHeader.makeWithoutStats(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.SerializationHeader", "org.apache.cassandra.db.SerializationHeader.make(org.apache.cassandra.config.CFMetaData, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.SerializationHeader", "org.apache.cassandra.db.SerializationHeader(boolean, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.PartitionColumns, org.apache.cassandra.db.rows.EncodingStats)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.SerializationHeader.columns()"], ["boolean", "org.apache.cassandra.db.SerializationHeader.hasStatic()"], ["boolean", "org.apache.cassandra.db.SerializationHeader.isForSSTable()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.SerializationHeader.stats()"], ["org.apache.cassandra.db.Columns", "org.apache.cassandra.db.SerializationHeader.columns(boolean)"], ["void", "org.apache.cassandra.db.SerializationHeader.writeTimestamp(long, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.db.SerializationHeader.writeLocalDeletionTime(int, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.db.SerializationHeader.writeTTL(int, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.db.SerializationHeader.writeDeletionTime(org.apache.cassandra.db.DeletionTime, org.apache.cassandra.io.util.DataOutputPlus)"], ["long", "org.apache.cassandra.db.SerializationHeader.readTimestamp(org.apache.cassandra.io.util.DataInputPlus)"], ["int", "org.apache.cassandra.db.SerializationHeader.readLocalDeletionTime(org.apache.cassandra.io.util.DataInputPlus)"], ["int", "org.apache.cassandra.db.SerializationHeader.readTTL(org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.SerializationHeader.readDeletionTime(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.db.SerializationHeader.timestampSerializedSize(long)"], ["long", "org.apache.cassandra.db.SerializationHeader.localDeletionTimeSerializedSize(int)"], ["long", "org.apache.cassandra.db.SerializationHeader.ttlSerializedSize(int)"], ["long", "org.apache.cassandra.db.SerializationHeader.deletionTimeSerializedSize(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.SerializationHeader.skipTimestamp(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.SerializationHeader.skipLocalDeletionTime(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.SerializationHeader.skipTTL(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.SerializationHeader.skipDeletionTime(org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.db.SerializationHeader$Component", "org.apache.cassandra.db.SerializationHeader.toComponent()"], ["java.lang.String", "org.apache.cassandra.db.SerializationHeader.toString()"], ["void", "org.apache.cassandra.db.Serializers$1.serialize(org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.db.Serializers$1.skip(org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.Serializers$1.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.db.Serializers$1.serializedSize(org.apache.cassandra.db.ClusteringPrefix)"], ["long", "org.apache.cassandra.db.Serializers$1.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.Serializers$1.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.Serializers$1.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.db.Serializers$NewFormatSerializer.serialize(org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.db.Serializers$NewFormatSerializer.skip(org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.Serializers$NewFormatSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.db.Serializers$NewFormatSerializer.serializedSize(org.apache.cassandra.db.ClusteringPrefix)"], ["long", "org.apache.cassandra.db.Serializers$NewFormatSerializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.Serializers$NewFormatSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.Serializers$NewFormatSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.Serializers", "org.apache.cassandra.db.Serializers(org.apache.cassandra.config.CFMetaData)"], ["T", "org.apache.cassandra.db.SimpleBuilders$AbstractBuilder.timestamp(long)"], ["T", "org.apache.cassandra.db.SimpleBuilders$AbstractBuilder.ttl(int)"], ["T", "org.apache.cassandra.db.SimpleBuilders$AbstractBuilder.nowInSec(int)"], ["org.apache.cassandra.db.SimpleBuilders$MutationBuilder", "org.apache.cassandra.db.SimpleBuilders$MutationBuilder(java.lang.String, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$MutationBuilder.update(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$MutationBuilder.update(java.lang.String)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.SimpleBuilders$MutationBuilder.build()"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$MutationBuilder.ttl(int)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$MutationBuilder.timestamp(long)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder$RangeTombstoneBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder$RTBuilder.start(java.lang.Object...)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder$RangeTombstoneBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder$RTBuilder.end(java.lang.Object...)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder$RangeTombstoneBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder$RTBuilder.inclStart()"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder$RangeTombstoneBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder$RTBuilder.exclStart()"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder$RangeTombstoneBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder$RTBuilder.inclEnd()"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder$RangeTombstoneBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder$RTBuilder.exclEnd()"], ["org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder(org.apache.cassandra.config.CFMetaData, java.lang.Object...)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.metadata()"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.row(java.lang.Object...)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.delete()"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder$RangeTombstoneBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.addRangeTombstone()"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.build()"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.buildAsMutation()"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.nowInSec(int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.ttl(int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder.timestamp(long)"], ["org.apache.cassandra.db.SimpleBuilders$RowBuilder", "org.apache.cassandra.db.SimpleBuilders$RowBuilder(org.apache.cassandra.config.CFMetaData, java.lang.Object...)"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$RowBuilder.add(java.lang.String, java.lang.Object)"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$RowBuilder.appendAll(java.lang.String, java.lang.Object)"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$RowBuilder.delete()"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$RowBuilder.delete(java.lang.String)"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$RowBuilder.noPrimaryKeyLivenessInfo()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.SimpleBuilders$RowBuilder.build()"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$RowBuilder.ttl(int)"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.SimpleBuilders$RowBuilder.timestamp(long)"], ["boolean", "org.apache.cassandra.db.SinglePartitionReadCommand$1.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.SinglePartitionReadCommand$1.next()"], ["java.lang.Object", "org.apache.cassandra.db.SinglePartitionReadCommand$1.next()"], ["void", "org.apache.cassandra.db.SinglePartitionReadCommand$1UpdateSstablesIterated.onPartitionClose()"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand$Deserializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, boolean, int, boolean, org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.db.SinglePartitionReadCommand$Group", "org.apache.cassandra.db.SinglePartitionReadCommand$Group(java.util.List<org.apache.cassandra.db.SinglePartitionReadCommand>, org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.db.SinglePartitionReadCommand$Group", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.one(org.apache.cassandra.db.SinglePartitionReadCommand)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.execute(org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["int", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.nowInSec()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.limits()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.metadata()"], ["boolean", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.selectsFullPartition()"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.executionController()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.executeInternal(org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.executeLocally(org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.getPager(org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.selectsKey(org.apache.cassandra.db.DecoratedKey)"], ["boolean", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.selectsClustering(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["java.lang.String", "org.apache.cassandra.db.SinglePartitionReadCommand$Group.toString()"], ["void", "org.apache.cassandra.db.SinglePartitionReadCommand$SSTableReadMetricsCollector.onSSTableSelected(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.RowIndexEntry<?>, org.apache.cassandra.io.sstable.format.SSTableReadsListener$SelectionReason)"], ["int", "org.apache.cassandra.db.SinglePartitionReadCommand$SSTableReadMetricsCollector.getMergedSSTables()"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(boolean, org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.filter.ClusteringIndexFilter, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.filter.ClusteringIndexFilter)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(boolean, org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.filter.ClusteringIndexFilter)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.filter.ClusteringIndexFilter)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.fullPartitionRead(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.fullPartitionRead(org.apache.cassandra.config.CFMetaData, int, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Slice)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Slices)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(org.apache.cassandra.config.CFMetaData, int, java.nio.ByteBuffer, org.apache.cassandra.db.Slices)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.DecoratedKey, java.util.NavigableSet<org.apache.cassandra.db.Clustering>)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.create(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.copy()"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.copyAsDigestQuery()"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.withUpdatedClusteringIndexFilter(org.apache.cassandra.db.filter.ClusteringIndexFilter)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.SinglePartitionReadCommand.partitionKey()"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.SinglePartitionReadCommand.clusteringIndexFilter()"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.SinglePartitionReadCommand.clusteringIndexFilter(org.apache.cassandra.db.DecoratedKey)"], ["long", "org.apache.cassandra.db.SinglePartitionReadCommand.getTimeout()"], ["boolean", "org.apache.cassandra.db.SinglePartitionReadCommand.selectsKey(org.apache.cassandra.db.DecoratedKey)"], ["boolean", "org.apache.cassandra.db.SinglePartitionReadCommand.selectsClustering(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.forPaging(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.SinglePartitionReadCommand.execute(org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.service.pager.SinglePartitionPager", "org.apache.cassandra.db.SinglePartitionReadCommand.getPager(org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.ReadExecutionController)"], ["boolean", "org.apache.cassandra.db.SinglePartitionReadCommand.selectsFullPartition()"], ["java.lang.String", "org.apache.cassandra.db.SinglePartitionReadCommand.toString()"], ["boolean", "org.apache.cassandra.db.SinglePartitionReadCommand.isLimitedToOnePartition()"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.copyAsDigestQuery()"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.copy()"], ["org.apache.cassandra.db.ReadCommand", "org.apache.cassandra.db.SinglePartitionReadCommand.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.db.SinglePartitionReadCommand.getPager(org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.db.SizeEstimatesRecorder.run()"], ["void", "org.apache.cassandra.db.SizeEstimatesRecorder.onDropColumnFamily(java.lang.String, java.lang.String)"], ["boolean", "org.apache.cassandra.db.Slice$1.includes(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.ClusteringPrefix)"], ["boolean", "org.apache.cassandra.db.Slice$1.intersects(org.apache.cassandra.db.ClusteringComparator, java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>)"], ["java.lang.String", "org.apache.cassandra.db.Slice$1.toString(org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.Slice$Serializer", "org.apache.cassandra.db.Slice$Serializer()"], ["void", "org.apache.cassandra.db.Slice$Serializer.serialize(org.apache.cassandra.db.Slice, org.apache.cassandra.io.util.DataOutputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["long", "org.apache.cassandra.db.Slice$Serializer.serializedSize(org.apache.cassandra.db.Slice, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slice$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slice.make(org.apache.cassandra.db.ClusteringBound, org.apache.cassandra.db.ClusteringBound)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slice.make(org.apache.cassandra.db.ClusteringComparator, java.lang.Object...)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slice.make(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slice.make(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.Slice.start()"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.Slice.end()"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.Slice.open(boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.Slice.close(boolean)"], ["boolean", "org.apache.cassandra.db.Slice.isEmpty(org.apache.cassandra.db.ClusteringComparator)"], ["boolean", "org.apache.cassandra.db.Slice.isEmpty(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.ClusteringBound, org.apache.cassandra.db.ClusteringBound)"], ["boolean", "org.apache.cassandra.db.Slice.includes(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.ClusteringPrefix)"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slice.forPaging(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean, boolean)"], ["boolean", "org.apache.cassandra.db.Slice.intersects(org.apache.cassandra.db.ClusteringComparator, java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>)"], ["java.lang.String", "org.apache.cassandra.db.Slice.toString(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.Slice.toString(org.apache.cassandra.db.ClusteringComparator)"], ["boolean", "org.apache.cassandra.db.Slice.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.Slice.hashCode()"], ["org.apache.cassandra.db.Slices$ArrayBackedSlices$ComponentOfSlice", "org.apache.cassandra.db.Slices$ArrayBackedSlices$ComponentOfSlice.fromSlice(int, org.apache.cassandra.db.Slice)"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices$ComponentOfSlice.isEQ()"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices$InForwardOrderTester.includes(org.apache.cassandra.db.Clustering)"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices$InForwardOrderTester.isDone()"], ["org.apache.cassandra.db.Slices$ArrayBackedSlices$InReverseOrderTester", "org.apache.cassandra.db.Slices$ArrayBackedSlices$InReverseOrderTester(org.apache.cassandra.db.Slices$ArrayBackedSlices)"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices$InReverseOrderTester.includes(org.apache.cassandra.db.Clustering)"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices$InReverseOrderTester.isDone()"], ["int", "org.apache.cassandra.db.Slices$ArrayBackedSlices.size()"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices.hasLowerBound()"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices.hasUpperBound()"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slices$ArrayBackedSlices.get(int)"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices.selects(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.Slices$InOrderTester", "org.apache.cassandra.db.Slices$ArrayBackedSlices.inOrderTester(boolean)"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.Slices$ArrayBackedSlices.forPaging(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean, boolean)"], ["boolean", "org.apache.cassandra.db.Slices$ArrayBackedSlices.intersects(java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>)"], ["java.lang.String", "org.apache.cassandra.db.Slices$ArrayBackedSlices.toString()"], ["java.lang.String", "org.apache.cassandra.db.Slices$ArrayBackedSlices.toCQLString(org.apache.cassandra.config.CFMetaData)"], ["int", "org.apache.cassandra.db.Slices$Builder$1.compare(org.apache.cassandra.db.Slice, org.apache.cassandra.db.Slice)"], ["int", "org.apache.cassandra.db.Slices$Builder$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.Slices$Builder", "org.apache.cassandra.db.Slices$Builder(org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.Slices$Builder", "org.apache.cassandra.db.Slices$Builder(org.apache.cassandra.db.ClusteringComparator, int)"], ["org.apache.cassandra.db.Slices$Builder", "org.apache.cassandra.db.Slices$Builder.add(org.apache.cassandra.db.ClusteringBound, org.apache.cassandra.db.ClusteringBound)"], ["org.apache.cassandra.db.Slices$Builder", "org.apache.cassandra.db.Slices$Builder.add(org.apache.cassandra.db.Slice)"], ["org.apache.cassandra.db.Slices$Builder", "org.apache.cassandra.db.Slices$Builder.addAll(org.apache.cassandra.db.Slices)"], ["int", "org.apache.cassandra.db.Slices$Builder.size()"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.Slices$Builder.build()"], ["boolean", "org.apache.cassandra.db.Slices$SelectAllSlices$1.includes(org.apache.cassandra.db.Clustering)"], ["boolean", "org.apache.cassandra.db.Slices$SelectAllSlices$1.isDone()"], ["int", "org.apache.cassandra.db.Slices$SelectAllSlices.size()"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slices$SelectAllSlices.get(int)"], ["boolean", "org.apache.cassandra.db.Slices$SelectAllSlices.hasLowerBound()"], ["boolean", "org.apache.cassandra.db.Slices$SelectAllSlices.hasUpperBound()"], ["boolean", "org.apache.cassandra.db.Slices$SelectAllSlices.selects(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.Slices$SelectAllSlices.forPaging(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean, boolean)"], ["org.apache.cassandra.db.Slices$InOrderTester", "org.apache.cassandra.db.Slices$SelectAllSlices.inOrderTester(boolean)"], ["boolean", "org.apache.cassandra.db.Slices$SelectAllSlices.intersects(java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>)"], ["java.lang.String", "org.apache.cassandra.db.Slices$SelectAllSlices.toString()"], ["java.lang.String", "org.apache.cassandra.db.Slices$SelectAllSlices.toCQLString(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.db.Slices$SelectNoSlices$1.includes(org.apache.cassandra.db.Clustering)"], ["boolean", "org.apache.cassandra.db.Slices$SelectNoSlices$1.isDone()"], ["int", "org.apache.cassandra.db.Slices$SelectNoSlices.size()"], ["org.apache.cassandra.db.Slice", "org.apache.cassandra.db.Slices$SelectNoSlices.get(int)"], ["boolean", "org.apache.cassandra.db.Slices$SelectNoSlices.hasLowerBound()"], ["boolean", "org.apache.cassandra.db.Slices$SelectNoSlices.hasUpperBound()"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.Slices$SelectNoSlices.forPaging(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean, boolean)"], ["boolean", "org.apache.cassandra.db.Slices$SelectNoSlices.selects(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.Slices$InOrderTester", "org.apache.cassandra.db.Slices$SelectNoSlices.inOrderTester(boolean)"], ["boolean", "org.apache.cassandra.db.Slices$SelectNoSlices.intersects(java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>)"], ["java.lang.String", "org.apache.cassandra.db.Slices$SelectNoSlices.toString()"], ["java.lang.String", "org.apache.cassandra.db.Slices$SelectNoSlices.toCQLString(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.Slices$Serializer", "org.apache.cassandra.db.Slices$Serializer()"], ["void", "org.apache.cassandra.db.Slices$Serializer.serialize(org.apache.cassandra.db.Slices, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["long", "org.apache.cassandra.db.Slices$Serializer.serializedSize(org.apache.cassandra.db.Slices, int)"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.Slices$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.Slices.with(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Slice)"], ["boolean", "org.apache.cassandra.db.Slices.isEmpty()"], ["org.apache.cassandra.db.SnapshotCommand", "org.apache.cassandra.db.SnapshotCommand(java.lang.String, java.lang.String, java.lang.String, boolean)"], ["org.apache.cassandra.net.MessageOut", "org.apache.cassandra.db.SnapshotCommand.createMessage()"], ["java.lang.String", "org.apache.cassandra.db.SnapshotCommand.toString()"], ["void", "org.apache.cassandra.db.SnapshotCommandSerializer.serialize(org.apache.cassandra.db.SnapshotCommand, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.SnapshotCommand", "org.apache.cassandra.db.SnapshotCommandSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.SnapshotCommandSerializer.serializedSize(org.apache.cassandra.db.SnapshotCommand, int)"], ["long", "org.apache.cassandra.db.SnapshotCommandSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.SnapshotCommandSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.SnapshotCommandSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.SnapshotDetailsTabularData", "org.apache.cassandra.db.SnapshotDetailsTabularData()"], ["void", "org.apache.cassandra.db.SnapshotDetailsTabularData.from(java.lang.String, java.lang.String, java.lang.String, java.util.Map$Entry<java.lang.String, org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>, javax.management.openmbean.TabularDataSupport)"], ["void", "org.apache.cassandra.db.StorageHook$1.reportWrite(java.util.UUID, org.apache.cassandra.db.partitions.PartitionUpdate)"], ["void", "org.apache.cassandra.db.StorageHook$1.reportRead(java.util.UUID, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound", "org.apache.cassandra.db.StorageHook$1.makeRowIteratorWithLowerBound(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.filter.ClusteringIndexFilter, org.apache.cassandra.db.filter.ColumnFilter, boolean, int, boolean, org.apache.cassandra.io.sstable.format.SSTableReadsListener)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.StorageHook$1.makeRowIterator(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Slices, org.apache.cassandra.db.filter.ColumnFilter, boolean, boolean, org.apache.cassandra.io.sstable.format.SSTableReadsListener)"], ["org.apache.cassandra.db.StorageHook", "org.apache.cassandra.db.StorageHook.createHook()"], ["org.apache.cassandra.db.SystemKeyspace$BootstrapState[]", "org.apache.cassandra.db.SystemKeyspace$BootstrapState.values()"], ["org.apache.cassandra.db.SystemKeyspace$BootstrapState", "org.apache.cassandra.db.SystemKeyspace$BootstrapState.valueOf(java.lang.String)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.db.SystemKeyspace.metadata()"], ["void", "org.apache.cassandra.db.SystemKeyspace.finishStartup()"], ["void", "org.apache.cassandra.db.SystemKeyspace.persistLocalMetadata()"], ["void", "org.apache.cassandra.db.SystemKeyspace.updateCompactionHistory(java.lang.String, java.lang.String, long, long, long, java.util.Map<java.lang.Integer, java.lang.Long>)"], ["javax.management.openmbean.TabularData", "org.apache.cassandra.db.SystemKeyspace.getCompactionHistory()"], ["boolean", "org.apache.cassandra.db.SystemKeyspace.isViewBuilt(java.lang.String, java.lang.String)"], ["boolean", "org.apache.cassandra.db.SystemKeyspace.isViewStatusReplicated(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.db.SystemKeyspace.setViewBuilt(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.db.SystemKeyspace.setViewRemoved(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.db.SystemKeyspace.beginViewBuild(java.lang.String, java.lang.String, int)"], ["void", "org.apache.cassandra.db.SystemKeyspace.finishViewBuildStatus(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.db.SystemKeyspace.setViewBuiltReplicated(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.db.SystemKeyspace.updateViewBuildStatus(java.lang.String, java.lang.String, org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.utils.Pair<java.lang.Integer, org.apache.cassandra.dht.Token>", "org.apache.cassandra.db.SystemKeyspace.getViewBuildStatus(java.lang.String, java.lang.String)"], ["synchronized", "org.apache.cassandra.db.SystemKeyspace.void saveTruncationRecord(org.apache.cassandra.db.ColumnFamilyStore, long, org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["synchronized", "org.apache.cassandra.db.SystemKeyspace.void removeTruncationRecord(java.util.UUID)"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.SystemKeyspace.getTruncatedPosition(java.util.UUID)"], ["long", "org.apache.cassandra.db.SystemKeyspace.getTruncatedAt(java.util.UUID)"], ["void", "org.apache.cassandra.db.SystemKeyspace.updatePreferredIP(java.net.InetAddress, java.net.InetAddress)"], ["synchronized", "org.apache.cassandra.db.SystemKeyspace.void updateHintsDropped(java.net.InetAddress, java.util.UUID, int)"], ["synchronized", "org.apache.cassandra.db.SystemKeyspace.void updateSchemaVersion(java.util.UUID)"], ["void", "org.apache.cassandra.db.SystemKeyspace.removeEndpoint(java.net.InetAddress)"], ["synchronized", "org.apache.cassandra.db.SystemKeyspace.void updateTokens(java.util.Collection<org.apache.cassandra.dht.Token>)"], ["void", "org.apache.cassandra.db.SystemKeyspace.forceBlockingFlush(java.lang.String)"], ["com.google.common.collect.SetMultimap<java.net.InetAddress, org.apache.cassandra.dht.Token>", "org.apache.cassandra.db.SystemKeyspace.loadTokens()"], ["java.util.Map<java.net.InetAddress, java.util.UUID>", "org.apache.cassandra.db.SystemKeyspace.loadHostIds()"], ["java.net.InetAddress", "org.apache.cassandra.db.SystemKeyspace.getPreferredIP(java.net.InetAddress)"], ["java.util.Map<java.net.InetAddress, java.util.Map<java.lang.String, java.lang.String>>", "org.apache.cassandra.db.SystemKeyspace.loadDcRackInfo()"], ["org.apache.cassandra.utils.CassandraVersion", "org.apache.cassandra.db.SystemKeyspace.getReleaseVersion(java.net.InetAddress)"], ["void", "org.apache.cassandra.db.SystemKeyspace.checkHealth()"], ["int", "org.apache.cassandra.db.SystemKeyspace.incrementAndGetGeneration()"], ["org.apache.cassandra.db.SystemKeyspace$BootstrapState", "org.apache.cassandra.db.SystemKeyspace.getBootstrapState()"], ["boolean", "org.apache.cassandra.db.SystemKeyspace.bootstrapComplete()"], ["boolean", "org.apache.cassandra.db.SystemKeyspace.bootstrapInProgress()"], ["boolean", "org.apache.cassandra.db.SystemKeyspace.wasDecommissioned()"], ["void", "org.apache.cassandra.db.SystemKeyspace.setBootstrapState(org.apache.cassandra.db.SystemKeyspace$BootstrapState)"], ["boolean", "org.apache.cassandra.db.SystemKeyspace.isIndexBuilt(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.db.SystemKeyspace.setIndexBuilt(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.db.SystemKeyspace.setIndexRemoved(java.lang.String, java.lang.String)"], ["java.util.UUID", "org.apache.cassandra.db.SystemKeyspace.getLocalHostId()"], ["java.util.UUID", "org.apache.cassandra.db.SystemKeyspace.setLocalHostId(java.util.UUID)"], ["java.lang.String", "org.apache.cassandra.db.SystemKeyspace.getRack()"], ["java.lang.String", "org.apache.cassandra.db.SystemKeyspace.getDatacenter()"], ["org.apache.cassandra.service.paxos.PaxosState", "org.apache.cassandra.db.SystemKeyspace.loadPaxosState(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.config.CFMetaData, int)"], ["void", "org.apache.cassandra.db.SystemKeyspace.savePaxosPromise(org.apache.cassandra.service.paxos.Commit)"], ["void", "org.apache.cassandra.db.SystemKeyspace.savePaxosProposal(org.apache.cassandra.service.paxos.Commit)"], ["int", "org.apache.cassandra.db.SystemKeyspace.paxosTtlSec(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.SystemKeyspace.savePaxosCommit(org.apache.cassandra.service.paxos.Commit)"], ["org.apache.cassandra.metrics.RestorableMeter", "org.apache.cassandra.db.SystemKeyspace.getSSTableReadMeter(java.lang.String, java.lang.String, int)"], ["void", "org.apache.cassandra.db.SystemKeyspace.persistSSTableReadMeter(java.lang.String, java.lang.String, int, org.apache.cassandra.metrics.RestorableMeter)"], ["void", "org.apache.cassandra.db.SystemKeyspace.clearSSTableReadMeter(java.lang.String, java.lang.String, int)"], ["void", "org.apache.cassandra.db.SystemKeyspace.updateSizeEstimates(java.lang.String, java.lang.String, java.util.Map<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>)"], ["void", "org.apache.cassandra.db.SystemKeyspace.clearSizeEstimates(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.db.SystemKeyspace.clearSizeEstimates(java.lang.String)"], ["com.google.common.collect.SetMultimap<java.lang.String, java.lang.String>", "org.apache.cassandra.db.SystemKeyspace.getTablesWithSizeEstimates()"], ["synchronized", "org.apache.cassandra.db.SystemKeyspace.void updateAvailableRanges(java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["void", "org.apache.cassandra.db.SystemKeyspace.resetAvailableRanges()"], ["synchronized", "org.apache.cassandra.db.SystemKeyspace.void updateTransferredRanges(java.lang.String, java.net.InetAddress, java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["java.util.Map<java.net.InetAddress, java.util.Set<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>>", "org.apache.cassandra.db.SystemKeyspace.getTransferredRanges(java.lang.String, java.lang.String, org.apache.cassandra.dht.IPartitioner)"], ["boolean", "org.apache.cassandra.db.SystemKeyspace.snapshotOnVersionChange()"], ["void", "org.apache.cassandra.db.SystemKeyspace.migrateDataDirs()"], ["void", "org.apache.cassandra.db.SystemKeyspace.writePreparedStatement(java.lang.String, org.apache.cassandra.utils.MD5Digest, java.lang.String)"], ["void", "org.apache.cassandra.db.SystemKeyspace.removePreparedStatement(org.apache.cassandra.utils.MD5Digest)"], ["void", "org.apache.cassandra.db.SystemKeyspace.resetPreparedStatements()"], ["java.util.List<org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>>", "org.apache.cassandra.db.SystemKeyspace.loadPreparedStatements()"], ["org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer", "org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer()"], ["void", "org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer.serialize(org.apache.cassandra.db.TruncateResponse, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.TruncateResponse", "org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer.serializedSize(org.apache.cassandra.db.TruncateResponse, int)"], ["long", "org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.TruncateResponse", "org.apache.cassandra.db.TruncateResponse(java.lang.String, java.lang.String, boolean)"], ["org.apache.cassandra.db.TruncateVerbHandler", "org.apache.cassandra.db.TruncateVerbHandler()"], ["void", "org.apache.cassandra.db.TruncateVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.Truncation>, int)"], ["org.apache.cassandra.db.Truncation", "org.apache.cassandra.db.Truncation(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.Truncation.toString()"], ["void", "org.apache.cassandra.db.TruncationSerializer.serialize(org.apache.cassandra.db.Truncation, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.Truncation", "org.apache.cassandra.db.TruncationSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.TruncationSerializer.serializedSize(org.apache.cassandra.db.Truncation, int)"], ["long", "org.apache.cassandra.db.TruncationSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.TruncationSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.TruncationSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeof(java.lang.String)"], ["int", "org.apache.cassandra.db.TypeSizes.encodedUTF8Length(java.lang.String)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeofWithShortLength(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeofWithLength(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeofWithVIntLength(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeof(boolean)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeof(byte)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeof(short)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeof(int)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeof(long)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeof(java.util.UUID)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeofVInt(long)"], ["int", "org.apache.cassandra.db.TypeSizes.sizeofUnsignedVInt(long)"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.hasNext()"], ["int", "org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.compareNextTo(org.apache.cassandra.db.ClusteringBound)"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.nextIsRow()"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.nextIsStatic()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.readNext()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.skipNext()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.clearState()"], ["long", "org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.bytesReadForUnconsumedData()"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator.hasNext()"], ["org.apache.cassandra.db.LegacyLayout$LegacyAtom", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator.next()"], ["org.apache.cassandra.db.LegacyLayout$LegacyAtom", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator.peek()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator.clearState()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator.remove()"], ["java.lang.Object", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator.next()"], ["java.lang.Object", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator.peek()"], ["org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator, org.apache.cassandra.db.DeletionTime)"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.isShadowed(org.apache.cassandra.db.LegacyLayout$LegacyAtom)"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.hasOpeningMarkerBefore(org.apache.cassandra.db.LegacyLayout$LegacyAtom)"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.popOpeningMarker()"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.hasClosingMarkerBefore(org.apache.cassandra.db.LegacyLayout$LegacyAtom)"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.popClosingMarker()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.popMarker()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.openNew(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.hasOpenTombstones()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker.clearState()"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.next()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.peek()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.clearState()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.remove()"], ["java.lang.Object", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.next()"], ["java.lang.Object", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.peek()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.setSkipStatic()"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.hasNext()"], ["int", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.compareNextTo(org.apache.cassandra.db.ClusteringBound)"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.nextIsRow()"], ["boolean", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.nextIsStatic()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.readNext()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.skipNext()"], ["long", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.bytesReadForUnconsumedData()"], ["void", "org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.clearState()"], ["org.apache.cassandra.db.UnfilteredDeserializer", "org.apache.cassandra.db.UnfilteredDeserializer.create(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper, org.apache.cassandra.db.DeletionTime, boolean)"], ["org.apache.cassandra.db.UnknownColumnException", "org.apache.cassandra.db.UnknownColumnException(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.UnknownColumnFamilyException", "org.apache.cassandra.db.UnknownColumnFamilyException(java.lang.String, java.util.UUID)"], ["org.apache.cassandra.db.WindowsFailedSnapshotTracker", "org.apache.cassandra.db.WindowsFailedSnapshotTracker()"], ["void", "org.apache.cassandra.db.WindowsFailedSnapshotTracker.deleteOldSnapshots()"], ["synchronized", "org.apache.cassandra.db.WindowsFailedSnapshotTracker.void handleFailedSnapshot(java.io.File)"], ["void", "org.apache.cassandra.db.WindowsFailedSnapshotTracker.resetForTests()"], ["org.apache.cassandra.db.WriteResponse$Serializer", "org.apache.cassandra.db.WriteResponse$Serializer()"], ["void", "org.apache.cassandra.db.WriteResponse$Serializer.serialize(org.apache.cassandra.db.WriteResponse, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.WriteResponse", "org.apache.cassandra.db.WriteResponse$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.db.WriteResponse$Serializer.serializedSize(org.apache.cassandra.db.WriteResponse, int)"], ["long", "org.apache.cassandra.db.WriteResponse$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.db.WriteResponse$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.WriteResponse$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.WriteType[]", "org.apache.cassandra.db.WriteType.values()"], ["org.apache.cassandra.db.WriteType", "org.apache.cassandra.db.WriteType.valueOf(java.lang.String)"], ["org.apache.cassandra.db.aggregation.GroupMaker", "org.apache.cassandra.db.aggregation.AggregationSpecification$1.newGroupMaker(org.apache.cassandra.db.aggregation.GroupingState)"], ["org.apache.cassandra.db.aggregation.AggregationSpecification$AggregateByPkPrefix", "org.apache.cassandra.db.aggregation.AggregationSpecification$AggregateByPkPrefix(org.apache.cassandra.db.ClusteringComparator, int)"], ["org.apache.cassandra.db.aggregation.GroupMaker", "org.apache.cassandra.db.aggregation.AggregationSpecification$AggregateByPkPrefix.newGroupMaker(org.apache.cassandra.db.aggregation.GroupingState)"], ["org.apache.cassandra.db.aggregation.AggregationSpecification$Kind[]", "org.apache.cassandra.db.aggregation.AggregationSpecification$Kind.values()"], ["org.apache.cassandra.db.aggregation.AggregationSpecification$Kind", "org.apache.cassandra.db.aggregation.AggregationSpecification$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.db.aggregation.AggregationSpecification$Serializer", "org.apache.cassandra.db.aggregation.AggregationSpecification$Serializer()"], ["void", "org.apache.cassandra.db.aggregation.AggregationSpecification$Serializer.serialize(org.apache.cassandra.db.aggregation.AggregationSpecification, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.aggregation.AggregationSpecification", "org.apache.cassandra.db.aggregation.AggregationSpecification$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.ClusteringComparator)"], ["long", "org.apache.cassandra.db.aggregation.AggregationSpecification$Serializer.serializedSize(org.apache.cassandra.db.aggregation.AggregationSpecification, int)"], ["org.apache.cassandra.db.aggregation.AggregationSpecification$Kind", "org.apache.cassandra.db.aggregation.AggregationSpecification.kind()"], ["org.apache.cassandra.db.aggregation.GroupMaker", "org.apache.cassandra.db.aggregation.AggregationSpecification.newGroupMaker()"], ["org.apache.cassandra.db.aggregation.AggregationSpecification", "org.apache.cassandra.db.aggregation.AggregationSpecification.aggregatePkPrefix(org.apache.cassandra.db.ClusteringComparator, int)"], ["boolean", "org.apache.cassandra.db.aggregation.GroupMaker$1.isNewGroup(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["boolean", "org.apache.cassandra.db.aggregation.GroupMaker$1.returnAtLeastOneRow()"], ["org.apache.cassandra.db.aggregation.GroupMaker$PkPrefixGroupMaker", "org.apache.cassandra.db.aggregation.GroupMaker$PkPrefixGroupMaker(org.apache.cassandra.db.ClusteringComparator, int, org.apache.cassandra.db.aggregation.GroupingState)"], ["org.apache.cassandra.db.aggregation.GroupMaker$PkPrefixGroupMaker", "org.apache.cassandra.db.aggregation.GroupMaker$PkPrefixGroupMaker(org.apache.cassandra.db.ClusteringComparator, int)"], ["boolean", "org.apache.cassandra.db.aggregation.GroupMaker$PkPrefixGroupMaker.isNewGroup(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.aggregation.GroupMaker", "org.apache.cassandra.db.aggregation.GroupMaker()"], ["org.apache.cassandra.db.aggregation.GroupMaker", "org.apache.cassandra.db.aggregation.GroupMaker.newInstance(org.apache.cassandra.db.ClusteringComparator, int, org.apache.cassandra.db.aggregation.GroupingState)"], ["org.apache.cassandra.db.aggregation.GroupMaker", "org.apache.cassandra.db.aggregation.GroupMaker.newInstance(org.apache.cassandra.db.ClusteringComparator, int)"], ["boolean", "org.apache.cassandra.db.aggregation.GroupMaker.returnAtLeastOneRow()"], ["org.apache.cassandra.db.aggregation.GroupingState$Serializer", "org.apache.cassandra.db.aggregation.GroupingState$Serializer()"], ["void", "org.apache.cassandra.db.aggregation.GroupingState$Serializer.serialize(org.apache.cassandra.db.aggregation.GroupingState, org.apache.cassandra.io.util.DataOutputPlus, int, org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.aggregation.GroupingState", "org.apache.cassandra.db.aggregation.GroupingState$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.ClusteringComparator)"], ["long", "org.apache.cassandra.db.aggregation.GroupingState$Serializer.serializedSize(org.apache.cassandra.db.aggregation.GroupingState, int, org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.aggregation.GroupingState", "org.apache.cassandra.db.aggregation.GroupingState(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.aggregation.GroupingState.partitionKey()"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.aggregation.GroupingState.clustering()"], ["boolean", "org.apache.cassandra.db.aggregation.GroupingState.hasClustering()"], ["org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState(org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader, org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.RowIndexEntry, boolean, org.apache.cassandra.io.util.FileHandle)"], ["boolean", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.isDone()"], ["void", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.setToBlock(int)"], ["int", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.blocksCount()"], ["void", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.updateBlock()"], ["boolean", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.isPastCurrentBlock()"], ["int", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.currentBlockIdx()"], ["org.apache.cassandra.io.sstable.IndexInfo", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.currentIndex()"], ["org.apache.cassandra.io.sstable.IndexInfo", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.index(int)"], ["int", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.findBlockIndex(org.apache.cassandra.db.ClusteringBound, int)"], ["int", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.indexFor(org.apache.cassandra.db.ClusteringPrefix, int)"], ["java.lang.String", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.toString()"], ["void", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState.close()"], ["void", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$NoRowsReader.setForSlice(org.apache.cassandra.db.Slice)"], ["boolean", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.next()"], ["void", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.close()"], ["java.lang.Object", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.next()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.metadata()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.columns()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.partitionKey()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.partitionLevelDeletion()"], ["staticRow()", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator."], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.stats()"], ["boolean", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.next()"], ["void", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.remove()"], ["void", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.close()"], ["java.lang.Object", "org.apache.cassandra.db.columniterator.AbstractSSTableIterator.next()"], ["void", "org.apache.cassandra.db.columniterator.SSTableIterator$ForwardIndexedReader.close()"], ["void", "org.apache.cassandra.db.columniterator.SSTableIterator$ForwardIndexedReader.setForSlice(org.apache.cassandra.db.Slice)"], ["void", "org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.setForSlice(org.apache.cassandra.db.Slice)"], ["org.apache.cassandra.db.columniterator.SSTableIterator", "org.apache.cassandra.db.columniterator.SSTableIterator(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.util.FileDataInput, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.RowIndexEntry, org.apache.cassandra.db.Slices, org.apache.cassandra.db.filter.ColumnFilter, boolean, org.apache.cassandra.io.util.FileHandle)"], ["boolean", "org.apache.cassandra.db.columniterator.SSTableIterator.isReverseOrder()"], ["void", "org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData.add(org.apache.cassandra.db.rows.Unfiltered)"], ["void", "org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData.reset()"], ["void", "org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData.build()"], ["void", "org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader.close()"], ["void", "org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader.setForSlice(org.apache.cassandra.db.Slice)"], ["void", "org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader.setForSlice(org.apache.cassandra.db.Slice)"], ["org.apache.cassandra.db.columniterator.SSTableReversedIterator", "org.apache.cassandra.db.columniterator.SSTableReversedIterator(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.util.FileDataInput, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.RowIndexEntry, org.apache.cassandra.db.Slices, org.apache.cassandra.db.filter.ColumnFilter, boolean, org.apache.cassandra.io.util.FileHandle)"], ["boolean", "org.apache.cassandra.db.columniterator.SSTableReversedIterator.isReverseOrder()"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$1.runMayThrow()"], ["long", "org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.onDiskSize()"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.stopUnsafe(boolean)"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.shutdown()"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.awaitTermination()"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.sync(boolean)"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogService$SyncRunnable.run()"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogService.finishWriteFor(org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation)"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogService.shutdown()"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogService.syncBlocking()"], ["void", "org.apache.cassandra.db.commitlog.AbstractCommitLogService.awaitTermination()"], ["long", "org.apache.cassandra.db.commitlog.AbstractCommitLogService.getCompletedTasks()"], ["long", "org.apache.cassandra.db.commitlog.AbstractCommitLogService.getPendingTasks()"], ["org.apache.cassandra.db.commitlog.BatchCommitLogService", "org.apache.cassandra.db.commitlog.BatchCommitLogService(org.apache.cassandra.db.commitlog.CommitLog)"], ["org.apache.cassandra.db.commitlog.CommitLog$Configuration", "org.apache.cassandra.db.commitlog.CommitLog$Configuration(org.apache.cassandra.config.ParameterizedClass, org.apache.cassandra.security.EncryptionContext)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLog$Configuration.useCompression()"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLog$Configuration.useEncryption()"], ["org.apache.cassandra.io.compress.ICompressor", "org.apache.cassandra.db.commitlog.CommitLog$Configuration.getCompressor()"], ["org.apache.cassandra.config.ParameterizedClass", "org.apache.cassandra.db.commitlog.CommitLog$Configuration.getCompressorClass()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLog$Configuration.getCompressorName()"], ["org.apache.cassandra.security.EncryptionContext", "org.apache.cassandra.db.commitlog.CommitLog$Configuration.getEncryptionContext()"], ["int", "org.apache.cassandra.db.commitlog.CommitLog.recoverSegmentsOnDisk()"], ["int", "org.apache.cassandra.db.commitlog.CommitLog.recoverFiles(java.io.File...)"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.recoverPath(java.lang.String)"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.recover(java.lang.String)"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.commitlog.CommitLog.getCurrentPosition()"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.forceRecycleAllSegments(java.lang.Iterable<java.util.UUID>)"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.forceRecycleAllSegments()"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.sync(boolean)"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.requestExtraSync()"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.commitlog.CommitLog.add(org.apache.cassandra.db.Mutation)"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.discardCompletedSegments(java.util.UUID, org.apache.cassandra.db.commitlog.CommitLogPosition, org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLog.getArchiveCommand()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLog.getRestoreCommand()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLog.getRestoreDirectories()"], ["long", "org.apache.cassandra.db.commitlog.CommitLog.getRestorePointInTime()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLog.getRestorePrecision()"], ["long", "org.apache.cassandra.db.commitlog.CommitLog.getActiveContentSize()"], ["long", "org.apache.cassandra.db.commitlog.CommitLog.getActiveOnDiskSize()"], ["java.util.Map<java.lang.String, java.lang.Double>", "org.apache.cassandra.db.commitlog.CommitLog.getActiveSegmentCompressionRatios()"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.shutdownBlocking()"], ["int", "org.apache.cassandra.db.commitlog.CommitLog.resetUnsafe(boolean)"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.resetConfiguration()"], ["void", "org.apache.cassandra.db.commitlog.CommitLog.stopUnsafe(boolean)"], ["int", "org.apache.cassandra.db.commitlog.CommitLog.restartUnsafe()"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLog.handleCommitError(java.lang.String, java.lang.Throwable)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogArchiver$2.run()"], ["org.apache.cassandra.db.commitlog.CommitLogArchiver", "org.apache.cassandra.db.commitlog.CommitLogArchiver(java.lang.String, java.lang.String, java.lang.String, long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.db.commitlog.CommitLogArchiver", "org.apache.cassandra.db.commitlog.CommitLogArchiver.disabled()"], ["org.apache.cassandra.db.commitlog.CommitLogArchiver", "org.apache.cassandra.db.commitlog.CommitLogArchiver.construct()"], ["void", "org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeArchive(org.apache.cassandra.db.commitlog.CommitLogSegment)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeArchive(java.lang.String, java.lang.String)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeWaitForArchiving(java.lang.String)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeRestoreArchive()"], ["org.apache.cassandra.db.commitlog.CommitLogDescriptor", "org.apache.cassandra.db.commitlog.CommitLogDescriptor(int, long, org.apache.cassandra.config.ParameterizedClass, org.apache.cassandra.security.EncryptionContext)"], ["org.apache.cassandra.db.commitlog.CommitLogDescriptor", "org.apache.cassandra.db.commitlog.CommitLogDescriptor(long, org.apache.cassandra.config.ParameterizedClass, org.apache.cassandra.security.EncryptionContext)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.writeHeader(java.nio.ByteBuffer, org.apache.cassandra.db.commitlog.CommitLogDescriptor)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.writeHeader(java.nio.ByteBuffer, org.apache.cassandra.db.commitlog.CommitLogDescriptor, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.commitlog.CommitLogDescriptor", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.fromHeader(java.io.File, org.apache.cassandra.security.EncryptionContext)"], ["org.apache.cassandra.db.commitlog.CommitLogDescriptor", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.readHeader(java.io.DataInput, org.apache.cassandra.security.EncryptionContext)"], ["org.apache.cassandra.db.commitlog.CommitLogDescriptor", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.fromFileName(java.lang.String)"], ["int", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.getMessagingVersion()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.fileName()"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.isValid(java.lang.String)"], ["org.apache.cassandra.security.EncryptionContext", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.getEncryptionContext()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.toString()"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.equals(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.equalsIgnoringCompression(org.apache.cassandra.db.commitlog.CommitLogDescriptor)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogDescriptor.equals(org.apache.cassandra.db.commitlog.CommitLogDescriptor)"], ["int", "org.apache.cassandra.db.commitlog.CommitLogPosition$1.compare(org.apache.cassandra.db.commitlog.CommitLogPosition, org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["int", "org.apache.cassandra.db.commitlog.CommitLogPosition$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer", "org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer()"], ["void", "org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer.serialize(org.apache.cassandra.db.commitlog.CommitLogPosition, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer.serializedSize(org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["long", "org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.commitlog.CommitLogPosition(long, int)"], ["int", "org.apache.cassandra.db.commitlog.CommitLogPosition.compareTo(org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogPosition.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.commitlog.CommitLogPosition.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLogPosition.toString()"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.commitlog.CommitLogPosition.clone()"], ["java.lang.Object", "org.apache.cassandra.db.commitlog.CommitLogPosition.clone()"], ["int", "org.apache.cassandra.db.commitlog.CommitLogPosition.compareTo(java.lang.Object)"], ["org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadErrorReason[]", "org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadErrorReason.values()"], ["org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadErrorReason", "org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadErrorReason.valueOf(java.lang.String)"], ["long", "org.apache.cassandra.db.commitlog.CommitLogReader$CommitLogFormat.calculateClaimedChecksum(org.apache.cassandra.io.util.FileDataInput, int)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReader$CommitLogFormat.updateChecksum(java.util.zip.CRC32, int, int)"], ["long", "org.apache.cassandra.db.commitlog.CommitLogReader$CommitLogFormat.calculateClaimedCRC32(org.apache.cassandra.io.util.FileDataInput, int)"], ["org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker", "org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker(int, boolean)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker.addProcessedMutation()"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker.shouldContinue()"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker.requestTermination()"], ["org.apache.cassandra.db.commitlog.CommitLogReader", "org.apache.cassandra.db.commitlog.CommitLogReader()"], ["java.util.Set<java.util.Map$Entry<java.util.UUID, java.util.concurrent.atomic.AtomicInteger>>", "org.apache.cassandra.db.commitlog.CommitLogReader.getInvalidMutations()"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReader.readAllFiles(org.apache.cassandra.db.commitlog.CommitLogReadHandler, java.io.File[])"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReader.readAllFiles(org.apache.cassandra.db.commitlog.CommitLogReadHandler, java.io.File[], org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReader.readCommitLogSegment(org.apache.cassandra.db.commitlog.CommitLogReadHandler, java.io.File, boolean)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReader.readCommitLogSegment(org.apache.cassandra.db.commitlog.CommitLogReadHandler, java.io.File, int, boolean)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReader.readCommitLogSegment(org.apache.cassandra.db.commitlog.CommitLogReadHandler, java.io.File, org.apache.cassandra.db.commitlog.CommitLogPosition, int, boolean)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogReplayer$AlwaysReplayFilter.includes(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.commitlog.CommitLogReplayer$CommitLogReplayException", "org.apache.cassandra.db.commitlog.CommitLogReplayer$CommitLogReplayException(java.lang.String, java.lang.Throwable)"], ["org.apache.cassandra.db.commitlog.CommitLogReplayer$CommitLogReplayException", "org.apache.cassandra.db.commitlog.CommitLogReplayer$CommitLogReplayException(java.lang.String)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter$1.apply(org.apache.cassandra.db.partitions.PartitionUpdate)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter$1.apply(java.lang.Object)"], ["org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter", "org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter(com.google.common.collect.Multimap<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter.includes(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReplayer$MutationInitiator$1.runMayThrow()"], ["org.apache.cassandra.db.commitlog.CommitLogReplayer$MutationInitiator", "org.apache.cassandra.db.commitlog.CommitLogReplayer$MutationInitiator()"], ["org.apache.cassandra.db.commitlog.CommitLogReplayer$ReplayFilter", "org.apache.cassandra.db.commitlog.CommitLogReplayer$ReplayFilter.create()"], ["org.apache.cassandra.db.commitlog.CommitLogReplayer", "org.apache.cassandra.db.commitlog.CommitLogReplayer.construct(org.apache.cassandra.db.commitlog.CommitLog)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReplayer.replayPath(java.io.File, boolean)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReplayer.replayFiles(java.io.File[])"], ["int", "org.apache.cassandra.db.commitlog.CommitLogReplayer.blockForWrites()"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.commitlog.CommitLogReplayer.firstNotCovered(java.util.Collection<org.apache.cassandra.db.commitlog.IntervalSet<org.apache.cassandra.db.commitlog.CommitLogPosition>>)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReplayer.handleMutation(org.apache.cassandra.db.Mutation, int, int, org.apache.cassandra.db.commitlog.CommitLogDescriptor)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogReplayer.shouldSkipSegmentOnError(org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadException)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogReplayer.handleUnrecoverableError(org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadException)"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation.getCommitLogPosition()"], ["org.apache.cassandra.db.commitlog.CommitLogSegment$CDCState[]", "org.apache.cassandra.db.commitlog.CommitLogSegment$CDCState.values()"], ["org.apache.cassandra.db.commitlog.CommitLogSegment$CDCState", "org.apache.cassandra.db.commitlog.CommitLogSegment$CDCState.valueOf(java.lang.String)"], ["org.apache.cassandra.db.commitlog.CommitLogSegment$CommitLogSegmentFileComparator", "org.apache.cassandra.db.commitlog.CommitLogSegment$CommitLogSegmentFileComparator()"], ["int", "org.apache.cassandra.db.commitlog.CommitLogSegment$CommitLogSegmentFileComparator.compare(java.io.File, java.io.File)"], ["int", "org.apache.cassandra.db.commitlog.CommitLogSegment$CommitLogSegmentFileComparator.compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogSegment.isStillAllocating()"], ["org.apache.cassandra.db.commitlog.CommitLogPosition", "org.apache.cassandra.db.commitlog.CommitLogSegment.getCurrentCommitLogPosition()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLogSegment.getPath()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLogSegment.getName()"], ["<K> void", "org.apache.cassandra.db.commitlog.CommitLogSegment.coverInMap(java.util.concurrent.ConcurrentMap<K, org.apache.cassandra.utils.IntegerInterval>, K, int)"], ["synchronized", "org.apache.cassandra.db.commitlog.CommitLogSegment.void markClean(java.util.UUID, org.apache.cassandra.db.commitlog.CommitLogPosition, org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["synchronized", "org.apache.cassandra.db.commitlog.CommitLogSegment.boolean isUnused()"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogSegment.contains(org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLogSegment.dirtyString()"], ["long", "org.apache.cassandra.db.commitlog.CommitLogSegment.contentSize()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.CommitLogSegment.toString()"], ["org.apache.cassandra.db.commitlog.CommitLogSegment$CDCState", "org.apache.cassandra.db.commitlog.CommitLogSegment.getCDCState()"], ["void", "org.apache.cassandra.db.commitlog.CommitLogSegment.setCDCState(org.apache.cassandra.db.commitlog.CommitLogSegment$CDCState)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker.start()"], ["void", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker.submitOverflowSizeRecalculation()"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker.shutdown()"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC(org.apache.cassandra.db.commitlog.CommitLog, java.lang.String)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC.discard(org.apache.cassandra.db.commitlog.CommitLogSegment, boolean)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC.shutdown()"], ["org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC.allocate(org.apache.cassandra.db.Mutation, int)"], ["org.apache.cassandra.db.commitlog.CommitLogSegment", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC.createSegment()"], ["long", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC.updateCDCTotalSize()"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard(org.apache.cassandra.db.commitlog.CommitLog, java.lang.String)"], ["void", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard.discard(org.apache.cassandra.db.commitlog.CommitLogSegment, boolean)"], ["org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard.allocate(org.apache.cassandra.db.Mutation, int)"], ["org.apache.cassandra.db.commitlog.CommitLogSegment", "org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard.createSegment()"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$CompressedSegmenter", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$CompressedSegmenter(org.apache.cassandra.db.commitlog.CommitLogDescriptor, org.apache.cassandra.io.util.RandomAccessReader)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$CompressedSegmenter", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$CompressedSegmenter(org.apache.cassandra.io.compress.ICompressor, org.apache.cassandra.io.util.RandomAccessReader)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$CompressedSegmenter.nextSegment(int, int)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter(org.apache.cassandra.db.commitlog.CommitLogDescriptor, org.apache.cassandra.io.util.RandomAccessReader)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter.nextSegment(int, int)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$NoOpSegmenter", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$NoOpSegmenter(org.apache.cassandra.io.util.RandomAccessReader)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$NoOpSegmenter.nextSegment(int, int)"], ["boolean", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$NoOpSegmenter.tolerateSegmentErrors(int, long)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SegmentReadException", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SegmentReadException(java.lang.String, boolean)"], ["default", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$Segmenter.boolean tolerateSegmentErrors(int, long)"], ["org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment", "org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment(org.apache.cassandra.io.util.FileDataInput, int, int, int, boolean)"], ["long", "org.apache.cassandra.db.commitlog.CompressedSegment.onDiskSize()"], ["org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream", "org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream(java.lang.String, long, int, int, org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream$ChunkProvider)"], ["long", "org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream.getFilePointer()"], ["boolean", "org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream.isEOF()"], ["long", "org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream.bytesRemaining()"], ["void", "org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream.seek(long)"], ["long", "org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream.bytesPastMark(org.apache.cassandra.io.util.DataPosition)"], ["void", "org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream.reBuffer()"], ["org.apache.cassandra.db.commitlog.EncryptedSegment", "org.apache.cassandra.db.commitlog.EncryptedSegment(org.apache.cassandra.db.commitlog.CommitLog, org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)"], ["long", "org.apache.cassandra.db.commitlog.EncryptedSegment.onDiskSize()"], ["void", "org.apache.cassandra.db.commitlog.IntervalSet$1.serialize(org.apache.cassandra.db.commitlog.IntervalSet<T>, org.apache.cassandra.io.util.DataOutputPlus)"], ["long", "org.apache.cassandra.db.commitlog.IntervalSet$1.serializedSize(org.apache.cassandra.db.commitlog.IntervalSet<T>)"], ["long", "org.apache.cassandra.db.commitlog.IntervalSet$1.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.commitlog.IntervalSet$1.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.commitlog.IntervalSet$1.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.commitlog.IntervalSet$Builder", "org.apache.cassandra.db.commitlog.IntervalSet$Builder()"], ["org.apache.cassandra.db.commitlog.IntervalSet$Builder", "org.apache.cassandra.db.commitlog.IntervalSet$Builder(T, T)"], ["void", "org.apache.cassandra.db.commitlog.IntervalSet$Builder.add(T, T)"], ["void", "org.apache.cassandra.db.commitlog.IntervalSet$Builder.addAll(org.apache.cassandra.db.commitlog.IntervalSet<T>)"], ["org.apache.cassandra.db.commitlog.IntervalSet", "org.apache.cassandra.db.commitlog.IntervalSet(T, T)"], ["<T extends java.lang.Comparable<T>> org.apache.cassandra.db.commitlog.IntervalSet<T>", "org.apache.cassandra.db.commitlog.IntervalSet.empty()"], ["boolean", "org.apache.cassandra.db.commitlog.IntervalSet.contains(T)"], ["boolean", "org.apache.cassandra.db.commitlog.IntervalSet.isEmpty()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.IntervalSet.toString()"], ["int", "org.apache.cassandra.db.commitlog.IntervalSet.hashCode()"], ["boolean", "org.apache.cassandra.db.commitlog.IntervalSet.equals(java.lang.Object)"], ["<T extends java.lang.Comparable<T>> org.apache.cassandra.io.ISerializer<org.apache.cassandra.db.commitlog.IntervalSet<T>>", "org.apache.cassandra.db.commitlog.IntervalSet.serializer(org.apache.cassandra.io.ISerializer<T>)"], ["long", "org.apache.cassandra.db.commitlog.MemoryMappedSegment.onDiskSize()"], ["org.apache.cassandra.db.commitlog.PeriodicCommitLogService", "org.apache.cassandra.db.commitlog.PeriodicCommitLogService(org.apache.cassandra.db.commitlog.CommitLog)"], ["org.apache.cassandra.db.commitlog.SimpleCachedBufferPool", "org.apache.cassandra.db.commitlog.SimpleCachedBufferPool(int, int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.commitlog.SimpleCachedBufferPool.createBuffer(org.apache.cassandra.io.compress.BufferType)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.commitlog.SimpleCachedBufferPool.getThreadLocalReusableBuffer(int)"], ["void", "org.apache.cassandra.db.commitlog.SimpleCachedBufferPool.setPreferredReusableBufferType(org.apache.cassandra.io.compress.BufferType)"], ["void", "org.apache.cassandra.db.commitlog.SimpleCachedBufferPool.releaseBuffer(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.commitlog.SimpleCachedBufferPool.shutdown()"], ["boolean", "org.apache.cassandra.db.commitlog.SimpleCachedBufferPool.atLimit()"], ["java.lang.String", "org.apache.cassandra.db.commitlog.SimpleCachedBufferPool.toString()"], ["org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList(java.util.List<org.apache.cassandra.io.sstable.ISSTableScanner>)"], ["long", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList.getTotalBytesScanned()"], ["long", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList.getTotalCompressedSize()"], ["double", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList.getCompressionRatio()"], ["void", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList.close()"], ["org.apache.cassandra.db.Directories", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getDirectories()"], ["synchronized", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.void pause()"], ["synchronized", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.void resume()"], ["void", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.startup()"], ["void", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shutdown()"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getCompactionTask(org.apache.cassandra.db.lifecycle.LifecycleTransaction, int, long)"], ["void", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.enable()"], ["void", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.disable()"], ["boolean", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.isAffectedByMeteredFlusher()"], ["long", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getMemtableReservedSize()"], ["void", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.replaceFlushed(org.apache.cassandra.db.Memtable, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getScanners(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getScanners(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["boolean", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shouldDefragment()"], ["java.lang.String", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getName()"], ["synchronized", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.void replaceSSTables(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["synchronized", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.void addSSTables(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getScanners(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.validateOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shouldBeEnabled()"], ["org.apache.cassandra.db.compaction.CompactionLogger$Strategy", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.strategyLogger()"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.createSSTableMultiWriter(org.apache.cassandra.io.sstable.Descriptor, long, long, org.apache.cassandra.io.sstable.metadata.MetadataCollector, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["boolean", "org.apache.cassandra.db.compaction.AbstractCompactionStrategy.supportsEarlyOpen()"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.AbstractCompactionTask(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["int", "org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutorStatsCollector)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.AbstractCompactionTask.setUserDefined(boolean)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.AbstractCompactionTask.setCompactionType(org.apache.cassandra.db.compaction.OperationType)"], ["java.lang.String", "org.apache.cassandra.db.compaction.AbstractCompactionTask.toString()"], ["org.apache.cassandra.db.compaction.CompactionController", "org.apache.cassandra.db.compaction.CompactionController(org.apache.cassandra.db.ColumnFamilyStore, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, int)"], ["org.apache.cassandra.db.compaction.CompactionController", "org.apache.cassandra.db.compaction.CompactionController(org.apache.cassandra.db.ColumnFamilyStore, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, int, com.google.common.util.concurrent.RateLimiter, org.apache.cassandra.schema.CompactionParams$TombstoneOption)"], ["void", "org.apache.cassandra.db.compaction.CompactionController.maybeRefreshOverlaps()"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionController.getKeyspace()"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionController.getColumnFamily()"], ["void", "org.apache.cassandra.db.compaction.CompactionController.close()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionController.compactingRepaired()"], ["org.apache.cassandra.db.compaction.CompactionHistoryTabularData", "org.apache.cassandra.db.compaction.CompactionHistoryTabularData()"], ["javax.management.openmbean.TabularData", "org.apache.cassandra.db.compaction.CompactionHistoryTabularData.from(org.apache.cassandra.cql3.UntypedResultSet)"], ["org.apache.cassandra.db.compaction.CompactionInfo$Holder", "org.apache.cassandra.db.compaction.CompactionInfo$Holder()"], ["void", "org.apache.cassandra.db.compaction.CompactionInfo$Holder.stop()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionInfo$Holder.isStopRequested()"], ["org.apache.cassandra.db.compaction.CompactionInfo$Unit[]", "org.apache.cassandra.db.compaction.CompactionInfo$Unit.values()"], ["org.apache.cassandra.db.compaction.CompactionInfo$Unit", "org.apache.cassandra.db.compaction.CompactionInfo$Unit.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionInfo$Unit.toString()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionInfo$Unit.isFileSize(java.lang.String)"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.db.compaction.CompactionInfo(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.compaction.OperationType, long, long, java.util.UUID)"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.db.compaction.CompactionInfo(org.apache.cassandra.db.compaction.OperationType, long, long, org.apache.cassandra.db.compaction.CompactionInfo$Unit, java.util.UUID)"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.db.compaction.CompactionInfo(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.compaction.OperationType, long, long, org.apache.cassandra.db.compaction.CompactionInfo$Unit, java.util.UUID)"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.db.compaction.CompactionInfo.forProgress(long, long)"], ["java.util.UUID", "org.apache.cassandra.db.compaction.CompactionInfo.getId()"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionInfo.getKeyspace()"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionInfo.getColumnFamily()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.compaction.CompactionInfo.getCFMetaData()"], ["long", "org.apache.cassandra.db.compaction.CompactionInfo.getCompleted()"], ["long", "org.apache.cassandra.db.compaction.CompactionInfo.getTotal()"], ["org.apache.cassandra.db.compaction.OperationType", "org.apache.cassandra.db.compaction.CompactionInfo.getTaskType()"], ["java.util.UUID", "org.apache.cassandra.db.compaction.CompactionInfo.compactionId()"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionInfo.toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.CompactionInfo.asMap()"], ["org.apache.cassandra.db.compaction.CompactionInterruptedException", "org.apache.cassandra.db.compaction.CompactionInterruptedException(org.apache.cassandra.db.compaction.CompactionInfo)"], ["void", "org.apache.cassandra.db.compaction.CompactionIterator$1$1.onMergedPartitionLevelDeletion(org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime[])"], ["void", "org.apache.cassandra.db.compaction.CompactionIterator$1$1.onMergedRows(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row[])"], ["void", "org.apache.cassandra.db.compaction.CompactionIterator$1$1.onMergedRangeTombstoneMarkers(org.apache.cassandra.db.rows.RangeTombstoneMarker, org.apache.cassandra.db.rows.RangeTombstoneMarker[])"], ["void", "org.apache.cassandra.db.compaction.CompactionIterator$1$1.close()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener", "org.apache.cassandra.db.compaction.CompactionIterator$1.getRowMergeListener(org.apache.cassandra.db.DecoratedKey, java.util.List<org.apache.cassandra.db.rows.UnfilteredRowIterator>)"], ["void", "org.apache.cassandra.db.compaction.CompactionIterator$1.close()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator.partitionLevelDeletion()"], ["void", "org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator.close()"], ["staticRow()", "org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator."], ["boolean", "org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator.next()"], ["java.lang.Object", "org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator.next()"], ["org.apache.cassandra.db.compaction.CompactionIterator", "org.apache.cassandra.db.compaction.CompactionIterator(org.apache.cassandra.db.compaction.OperationType, java.util.List<org.apache.cassandra.io.sstable.ISSTableScanner>, org.apache.cassandra.db.compaction.CompactionController, int, java.util.UUID)"], ["org.apache.cassandra.db.compaction.CompactionIterator", "org.apache.cassandra.db.compaction.CompactionIterator(org.apache.cassandra.db.compaction.OperationType, java.util.List<org.apache.cassandra.io.sstable.ISSTableScanner>, org.apache.cassandra.db.compaction.CompactionController, int, java.util.UUID, org.apache.cassandra.metrics.CompactionMetrics)"], ["boolean", "org.apache.cassandra.db.compaction.CompactionIterator.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.compaction.CompactionIterator.metadata()"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.db.compaction.CompactionIterator.getCompactionInfo()"], ["long[]", "org.apache.cassandra.db.compaction.CompactionIterator.getMergedRowCounts()"], ["long", "org.apache.cassandra.db.compaction.CompactionIterator.getTotalSourceCQLRows()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionIterator.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.compaction.CompactionIterator.next()"], ["void", "org.apache.cassandra.db.compaction.CompactionIterator.remove()"], ["void", "org.apache.cassandra.db.compaction.CompactionIterator.close()"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionIterator.toString()"], ["java.lang.Object", "org.apache.cassandra.db.compaction.CompactionIterator.next()"], ["void", "org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer.writeStart(org.codehaus.jackson.JsonNode, java.lang.Object)"], ["void", "org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer.write(org.codehaus.jackson.JsonNode, org.apache.cassandra.db.compaction.CompactionLogger$StrategySummary, java.lang.Object)"], ["org.codehaus.jackson.JsonNode", "org.apache.cassandra.db.compaction.CompactionLogger$Strategy$1.sstable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.codehaus.jackson.JsonNode", "org.apache.cassandra.db.compaction.CompactionLogger$Strategy$1.options()"], ["org.apache.cassandra.db.compaction.CompactionLogger", "org.apache.cassandra.db.compaction.CompactionLogger(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.compaction.CompactionStrategyManager)"], ["void", "org.apache.cassandra.db.compaction.CompactionLogger.enable()"], ["void", "org.apache.cassandra.db.compaction.CompactionLogger.disable()"], ["void", "org.apache.cassandra.db.compaction.CompactionLogger.flush(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.compaction.CompactionLogger.compaction(long, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, long, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.compaction.CompactionLogger.pending(org.apache.cassandra.db.compaction.AbstractCompactionStrategy, int)"], ["java.lang.Object", "org.apache.cassandra.db.compaction.CompactionManager$13.call()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$14.run()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$15.run()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$16.run()"], ["java.lang.Object", "org.apache.cassandra.db.compaction.CompactionManager$2.call()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$3.execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$4.execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$5.execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$6.execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$7.execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["java.util.Map<java.lang.Integer, java.util.List<org.apache.cassandra.io.sstable.format.SSTableReader>>", "org.apache.cassandra.db.compaction.CompactionManager$8.groupByDiskIndex(java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$8.execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$9.runMayThrow()"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus[]", "org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus.values()"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run()"], ["org.apache.cassandra.db.compaction.CompactionManager$CacheCleanupExecutor", "org.apache.cassandra.db.compaction.CompactionManager$CacheCleanupExecutor()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Bounded$1.run()"], ["org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Bounded", "org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Bounded(org.apache.cassandra.db.ColumnFamilyStore, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, int)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Bounded.getScanner(org.apache.cassandra.io.sstable.format.SSTableReader, com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Bounded.cleanup(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Full", "org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Full(org.apache.cassandra.db.ColumnFamilyStore, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, int)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Full.getScanner(org.apache.cassandra.io.sstable.format.SSTableReader, com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy$Full.cleanup(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy", "org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy.get(org.apache.cassandra.db.ColumnFamilyStore, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor", "org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor.afterExecute(java.lang.Runnable, java.lang.Throwable)"], ["org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController", "org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController(org.apache.cassandra.db.ColumnFamilyStore, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionIterator", "org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionIterator(java.util.List<org.apache.cassandra.io.sstable.ISSTableScanner>, org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController, int, org.apache.cassandra.metrics.CompactionMetrics)"], ["org.apache.cassandra.db.compaction.CompactionManager$ValidationExecutor", "org.apache.cassandra.db.compaction.CompactionManager$ValidationExecutor()"], ["org.apache.cassandra.db.compaction.CompactionManager", "org.apache.cassandra.db.compaction.CompactionManager()"], ["com.google.common.util.concurrent.RateLimiter", "org.apache.cassandra.db.compaction.CompactionManager.getRateLimiter()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.setRate(double)"], ["boolean", "org.apache.cassandra.db.compaction.CompactionManager.isCompacting(java.lang.Iterable<org.apache.cassandra.db.ColumnFamilyStore>)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.forceShutdown()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.finishCompactionsAndShutdown(long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.compaction.CompactionManager.performScrub(org.apache.cassandra.db.ColumnFamilyStore, boolean, boolean, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.compaction.CompactionManager.performScrub(org.apache.cassandra.db.ColumnFamilyStore, boolean, boolean, boolean, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.compaction.CompactionManager.performVerify(org.apache.cassandra.db.ColumnFamilyStore, boolean)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.compaction.CompactionManager.performSSTableRewrite(org.apache.cassandra.db.ColumnFamilyStore, boolean, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.compaction.CompactionManager.performCleanup(org.apache.cassandra.db.ColumnFamilyStore, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.compaction.CompactionManager.performGarbageCollection(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.CompactionParams$TombstoneOption, int)"], ["org.apache.cassandra.db.compaction.CompactionManager$AllSSTableOpStatus", "org.apache.cassandra.db.compaction.CompactionManager.relocateSSTables(org.apache.cassandra.db.ColumnFamilyStore, int)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.performAnticompaction(org.apache.cassandra.db.ColumnFamilyStore, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, org.apache.cassandra.utils.concurrent.Refs<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.lifecycle.LifecycleTransaction, long, java.util.UUID)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.performMaximal(org.apache.cassandra.db.ColumnFamilyStore, boolean)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.forceCompactionForTokenRange(org.apache.cassandra.db.ColumnFamilyStore, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.forceUserDefinedCompaction(java.lang.String)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.forceUserDefinedCleanup(java.lang.String)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.disableAutoCompaction()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionManager.needsCleanup(org.apache.cassandra.io.sstable.format.SSTableReader, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.db.compaction.CompactionManager.createWriter(org.apache.cassandra.db.ColumnFamilyStore, java.io.File, long, long, org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.db.compaction.CompactionManager.createWriterForAntiCompaction(org.apache.cassandra.db.ColumnFamilyStore, java.io.File, int, long, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.lifecycle.LifecycleTransaction)"], ["int", "org.apache.cassandra.db.compaction.CompactionManager.getDefaultGcBefore(org.apache.cassandra.db.ColumnFamilyStore, int)"], ["int", "org.apache.cassandra.db.compaction.CompactionManager.getActiveCompactions()"], ["java.util.List<java.util.Map<java.lang.String, java.lang.String>>", "org.apache.cassandra.db.compaction.CompactionManager.getCompactions()"], ["javax.management.openmbean.TabularData", "org.apache.cassandra.db.compaction.CompactionManager.getCompactionHistory()"], ["long", "org.apache.cassandra.db.compaction.CompactionManager.getTotalBytesCompacted()"], ["long", "org.apache.cassandra.db.compaction.CompactionManager.getTotalCompactionsCompleted()"], ["int", "org.apache.cassandra.db.compaction.CompactionManager.getPendingTasks()"], ["long", "org.apache.cassandra.db.compaction.CompactionManager.getCompletedTasks()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.stopCompaction(java.lang.String)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.stopCompactionById(java.lang.String)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.setConcurrentCompactors(int)"], ["int", "org.apache.cassandra.db.compaction.CompactionManager.getCoreCompactorThreads()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.setCoreCompactorThreads(int)"], ["int", "org.apache.cassandra.db.compaction.CompactionManager.getMaximumCompactorThreads()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.setMaximumCompactorThreads(int)"], ["int", "org.apache.cassandra.db.compaction.CompactionManager.getCoreValidationThreads()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.setCoreValidationThreads(int)"], ["int", "org.apache.cassandra.db.compaction.CompactionManager.getMaximumValidatorThreads()"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.setMaximumValidatorThreads(int)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.interruptCompactionFor(java.lang.Iterable<org.apache.cassandra.config.CFMetaData>, boolean)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.interruptCompactionForCFs(java.lang.Iterable<org.apache.cassandra.db.ColumnFamilyStore>, boolean)"], ["void", "org.apache.cassandra.db.compaction.CompactionManager.waitForCessation(java.lang.Iterable<org.apache.cassandra.db.ColumnFamilyStore>)"], ["java.lang.Object", "org.apache.cassandra.db.compaction.CompactionStrategyManager$1.call()"], ["org.apache.cassandra.db.compaction.CompactionStrategyManager", "org.apache.cassandra.db.compaction.CompactionStrategyManager(org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.db.compaction.CompactionStrategyManager", "org.apache.cassandra.db.compaction.CompactionStrategyManager(org.apache.cassandra.db.ColumnFamilyStore, java.util.function.Supplier<org.apache.cassandra.db.DiskBoundaries>, boolean)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getNextBackgroundTask(int)"], ["boolean", "org.apache.cassandra.db.compaction.CompactionStrategyManager.isEnabled()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionStrategyManager.isActive()"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.resume()"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.pause()"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.shutdown()"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.maybeReload(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.replaceFlushed(org.apache.cassandra.db.Memtable, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["int", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getUnleveledSSTables()"], ["int", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getLevelFanoutSize()"], ["int[]", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getSSTableCountPerLevel()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionStrategyManager.shouldDefragment()"], ["org.apache.cassandra.db.Directories", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getDirectories()"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.handleNotification(org.apache.cassandra.notifications.INotification, java.lang.Object)"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.enable()"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.disable()"], ["org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getScanners(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getScanners(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["long", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getMaxSSTableBytes()"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getCompactionTask(org.apache.cassandra.db.lifecycle.LifecycleTransaction, int, long)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getUserDefinedTask(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, int)"], ["int", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getEstimatedRemainingTasks()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionStrategyManager.shouldBeEnabled()"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getName()"], ["void", "org.apache.cassandra.db.compaction.CompactionStrategyManager.setNewLocalCompactionStrategy(org.apache.cassandra.schema.CompactionParams)"], ["org.apache.cassandra.schema.CompactionParams", "org.apache.cassandra.db.compaction.CompactionStrategyManager.getCompactionParams()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionStrategyManager.onlyPurgeRepairedTombstones()"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.db.compaction.CompactionStrategyManager.createSSTableMultiWriter(org.apache.cassandra.io.sstable.Descriptor, long, long, org.apache.cassandra.io.sstable.metadata.MetadataCollector, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["boolean", "org.apache.cassandra.db.compaction.CompactionStrategyManager.isRepaired(org.apache.cassandra.db.compaction.AbstractCompactionStrategy)"], ["boolean", "org.apache.cassandra.db.compaction.CompactionStrategyManager.supportsEarlyOpen()"], ["boolean", "org.apache.cassandra.db.compaction.CompactionTask$1.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.db.compaction.CompactionTask$1.apply(java.lang.Object)"], ["org.apache.cassandra.db.compaction.CompactionTask", "org.apache.cassandra.db.compaction.CompactionTask(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, int)"], ["org.apache.cassandra.db.compaction.CompactionTask", "org.apache.cassandra.db.compaction.CompactionTask(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, int, boolean, boolean)"], ["org.apache.cassandra.db.compaction.CompactionTask", "org.apache.cassandra.db.compaction.CompactionTask(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, int, boolean)"], ["synchronized", "org.apache.cassandra.db.compaction.CompactionTask.long addToTotalBytesCompacted(long)"], ["boolean", "org.apache.cassandra.db.compaction.CompactionTask.reduceScopeForLimitedSpace(long)"], ["org.apache.cassandra.db.compaction.writers.CompactionAwareWriter", "org.apache.cassandra.db.compaction.CompactionTask.getCompactionAwareWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["java.lang.String", "org.apache.cassandra.db.compaction.CompactionTask.updateCompactionHistory(java.lang.String, java.lang.String, long[], long, long)"], ["long", "org.apache.cassandra.db.compaction.CompactionTask.getMinRepairedAt(java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["long", "org.apache.cassandra.db.compaction.CompactionTask.getMaxDataAge(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["boolean", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$1.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$1.apply(java.lang.Object)"], ["int", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$2.compare(org.apache.cassandra.utils.Pair<T, java.lang.Long>, org.apache.cassandra.utils.Pair<T, java.lang.Long>)"], ["int", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$2.compare(java.lang.Object, java.lang.Object)"], ["org.codehaus.jackson.JsonNode", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$3.sstable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.codehaus.jackson.JsonNode", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$3.options()"], ["org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target(long, long, long)"], ["int", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target.compareToTimestamp(long)"], ["boolean", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target.onTarget(long)"], ["org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target.nextTarget(int)"], ["org.apache.cassandra.db.compaction.DateTieredCompactionStrategy", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy(org.apache.cassandra.db.ColumnFamilyStore, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNextBackgroundTask(int)"], ["java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.io.sstable.format.SSTableReader, java.lang.Long>>", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.createSSTableAndMinTimestampPairs(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["synchronized", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.void addSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["synchronized", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.void removeSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["synchronized", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, int)"], ["int", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getEstimatedRemainingTasks()"], ["long", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getMaxSSTableBytes()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.validateOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.CompactionLogger$Strategy", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.strategyLogger()"], ["java.lang.String", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.toString()"], ["org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions.validateOptions(java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$1.compare(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["int", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$1.compare(java.lang.Object, java.lang.Object)"], ["org.codehaus.jackson.JsonNode", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$2.sstable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.codehaus.jackson.JsonNode", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$2.options()"], ["org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["boolean", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner.metadata()"], ["void", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner.close()"], ["long", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner.getLengthInBytes()"], ["long", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner.getCurrentPosition()"], ["long", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner.getCompressedLengthInBytes()"], ["long", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner.getBytesScanned()"], ["java.lang.String", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy$LeveledScanner.getBackingFiles()"], ["org.apache.cassandra.db.compaction.LeveledCompactionStrategy", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy(org.apache.cassandra.db.ColumnFamilyStore, java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getLevelSize(int)"], ["int[]", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getAllLevelSize()"], ["void", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.startup()"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getNextBackgroundTask(int)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getUserDefinedTask(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, int)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getCompactionTask(org.apache.cassandra.db.lifecycle.LifecycleTransaction, int, long)"], ["int", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getEstimatedRemainingTasks()"], ["long", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getMaxSSTableBytes()"], ["int", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getLevelFanoutSize()"], ["org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getScanners(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["void", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.replaceSSTables(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.addSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["void", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.removeSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["java.lang.String", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.toString()"], ["org.apache.cassandra.db.compaction.CompactionLogger$Strategy", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.strategyLogger()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.LeveledCompactionStrategy.validateOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.LeveledCompactionTask", "org.apache.cassandra.db.compaction.LeveledCompactionTask(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, int, int, long, boolean)"], ["org.apache.cassandra.db.compaction.writers.CompactionAwareWriter", "org.apache.cassandra.db.compaction.LeveledCompactionTask.getCompactionAwareWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["boolean", "org.apache.cassandra.db.compaction.LeveledManifest$1.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.db.compaction.LeveledManifest$1.apply(java.lang.Object)"], ["org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate", "org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, int, long)"], ["org.apache.cassandra.db.compaction.LeveledManifest", "org.apache.cassandra.db.compaction.LeveledManifest.create(org.apache.cassandra.db.ColumnFamilyStore, int, int, java.util.List<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.LeveledManifest", "org.apache.cassandra.db.compaction.LeveledManifest.create(org.apache.cassandra.db.ColumnFamilyStore, int, int, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions)"], ["void", "org.apache.cassandra.db.compaction.LeveledManifest.calculateLastCompactedKeys()"], ["synchronized", "org.apache.cassandra.db.compaction.LeveledManifest.void add(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["synchronized", "org.apache.cassandra.db.compaction.LeveledManifest.void replace(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["synchronized", "org.apache.cassandra.db.compaction.LeveledManifest.void repairOverlappingSSTables(int)"], ["long", "org.apache.cassandra.db.compaction.LeveledManifest.maxBytesForLevel(int, long)"], ["long", "org.apache.cassandra.db.compaction.LeveledManifest.maxBytesForLevel(int, int, long)"], ["synchronized", "org.apache.cassandra.db.compaction.LeveledManifest.org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate getCompactionCandidates()"], ["synchronized", "org.apache.cassandra.db.compaction.LeveledManifest.int getLevelSize(int)"], ["synchronized", "org.apache.cassandra.db.compaction.LeveledManifest.int[] getAllLevelSize()"], ["synchronized", "org.apache.cassandra.db.compaction.LeveledManifest.int remove(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["java.lang.String", "org.apache.cassandra.db.compaction.LeveledManifest.toString()"], ["int", "org.apache.cassandra.db.compaction.LeveledManifest.getLevelCount()"], ["synchronized", "org.apache.cassandra.db.compaction.LeveledManifest.int getEstimatedTasks()"], ["int", "org.apache.cassandra.db.compaction.LeveledManifest.getNextLevel(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.OperationType[]", "org.apache.cassandra.db.compaction.OperationType.values()"], ["org.apache.cassandra.db.compaction.OperationType", "org.apache.cassandra.db.compaction.OperationType.valueOf(java.lang.String)"], ["org.apache.cassandra.db.compaction.OperationType", "org.apache.cassandra.db.compaction.OperationType.fromFileName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.compaction.OperationType.toString()"], ["org.apache.cassandra.db.compaction.SSTableSplitter$SplitController", "org.apache.cassandra.db.compaction.SSTableSplitter$SplitController(org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.db.compaction.SSTableSplitter$SplittingCompactionTask", "org.apache.cassandra.db.compaction.SSTableSplitter$SplittingCompactionTask(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, int)"], ["org.apache.cassandra.db.compaction.writers.CompactionAwareWriter", "org.apache.cassandra.db.compaction.SSTableSplitter$SplittingCompactionTask.getCompactionAwareWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.SSTableSplitter$StatsCollector", "org.apache.cassandra.db.compaction.SSTableSplitter$StatsCollector(org.apache.cassandra.db.compaction.SSTableSplitter)"], ["void", "org.apache.cassandra.db.compaction.SSTableSplitter$StatsCollector.beginCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)"], ["void", "org.apache.cassandra.db.compaction.SSTableSplitter$StatsCollector.finishCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)"], ["org.apache.cassandra.db.compaction.SSTableSplitter", "org.apache.cassandra.db.compaction.SSTableSplitter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, int)"], ["void", "org.apache.cassandra.db.compaction.SSTableSplitter.split()"], ["int", "org.apache.cassandra.db.compaction.Scrubber$1.compare(org.apache.cassandra.db.partitions.Partition, org.apache.cassandra.db.partitions.Partition)"], ["int", "org.apache.cassandra.db.compaction.Scrubber$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.utils.OutputHandler, org.apache.cassandra.db.compaction.Scrubber$NegativeLocalDeletionInfoMetrics)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator.metadata()"], ["boolean", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator.isReverseOrder()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator.columns()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator.partitionKey()"], ["staticRow()", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator."], ["boolean", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator.isEmpty()"], ["void", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator.close()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator.partitionLevelDeletion()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.compaction.Scrubber$FixNegativeLocalDeletionTimeIterator.stats()"], ["org.apache.cassandra.db.compaction.Scrubber$NegativeLocalDeletionInfoMetrics", "org.apache.cassandra.db.compaction.Scrubber$NegativeLocalDeletionInfoMetrics(org.apache.cassandra.db.compaction.Scrubber)"], ["org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.metadata()"], ["boolean", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.isReverseOrder()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.columns()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.partitionKey()"], ["staticRow()", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator."], ["boolean", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.isEmpty()"], ["void", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.close()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.partitionLevelDeletion()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.stats()"], ["boolean", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.hasRowsOutOfOrder()"], ["org.apache.cassandra.db.partitions.Partition", "org.apache.cassandra.db.compaction.Scrubber$OrderCheckerIterator.getRowsOutOfOrder()"], ["boolean", "org.apache.cassandra.db.compaction.Scrubber$RowMergingSSTableIterator.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.compaction.Scrubber$RowMergingSSTableIterator.next()"], ["java.lang.Object", "org.apache.cassandra.db.compaction.Scrubber$RowMergingSSTableIterator.next()"], ["org.apache.cassandra.db.compaction.Scrubber$ScrubInfo", "org.apache.cassandra.db.compaction.Scrubber$ScrubInfo(org.apache.cassandra.io.util.RandomAccessReader, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.db.compaction.Scrubber$ScrubInfo.getCompactionInfo()"], ["org.apache.cassandra.db.compaction.Scrubber$ScrubResult", "org.apache.cassandra.db.compaction.Scrubber$ScrubResult(org.apache.cassandra.db.compaction.Scrubber)"], ["org.apache.cassandra.db.compaction.Scrubber", "org.apache.cassandra.db.compaction.Scrubber(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, boolean, boolean)"], ["org.apache.cassandra.db.compaction.Scrubber", "org.apache.cassandra.db.compaction.Scrubber(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, boolean, boolean, boolean)"], ["org.apache.cassandra.db.compaction.Scrubber", "org.apache.cassandra.db.compaction.Scrubber(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, boolean, org.apache.cassandra.utils.OutputHandler, boolean, boolean)"], ["void", "org.apache.cassandra.db.compaction.Scrubber.scrub()"], ["void", "org.apache.cassandra.db.compaction.Scrubber.close()"], ["org.apache.cassandra.db.compaction.CompactionInfo$Holder", "org.apache.cassandra.db.compaction.Scrubber.getScrubInfo()"], ["org.apache.cassandra.db.compaction.Scrubber$ScrubResult", "org.apache.cassandra.db.compaction.Scrubber.scrubWithResult()"], ["int", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$1.compare(org.apache.cassandra.utils.Pair<java.util.List<org.apache.cassandra.io.sstable.format.SSTableReader>, java.lang.Double>, org.apache.cassandra.utils.Pair<java.util.List<org.apache.cassandra.io.sstable.format.SSTableReader>, java.lang.Double>)"], ["int", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$1.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$2.compare(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["int", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$2.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$3.compare(org.apache.cassandra.utils.Pair<T, java.lang.Long>, org.apache.cassandra.utils.Pair<T, java.lang.Long>)"], ["int", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$3.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$SplittingCompactionTask", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$SplittingCompactionTask(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, int)"], ["org.apache.cassandra.db.compaction.writers.CompactionAwareWriter", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$SplittingCompactionTask.getCompactionAwareWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy(org.apache.cassandra.db.ColumnFamilyStore, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getNextBackgroundTask(int)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getUserDefinedTask(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, int)"], ["int", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getEstimatedRemainingTasks()"], ["java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.io.sstable.format.SSTableReader, java.lang.Long>>", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.createSSTableAndLengthPairs(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["<T> java.util.List<java.util.List<T>>", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getBuckets(java.util.Collection<org.apache.cassandra.utils.Pair<T, java.lang.Long>>, double, double, long)"], ["int", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getEstimatedCompactionsByTasks(org.apache.cassandra.db.ColumnFamilyStore, java.util.List<java.util.List<org.apache.cassandra.io.sstable.format.SSTableReader>>)"], ["long", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getMaxSSTableBytes()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.validateOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.shouldDefragment()"], ["synchronized", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.void addSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["synchronized", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.void removeSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["java.lang.String", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.toString()"], ["org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.validateOptions(java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.TimeWindowCompactionController", "org.apache.cassandra.db.compaction.TimeWindowCompactionController(org.apache.cassandra.db.ColumnFamilyStore, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, int, boolean)"], ["org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy(org.apache.cassandra.db.ColumnFamilyStore, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.AbstractCompactionTask", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.getNextBackgroundTask(int)"], ["synchronized", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.void addSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["synchronized", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.void removeSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.getWindowBoundsInMillis(java.util.concurrent.TimeUnit, int, long)"], ["synchronized", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, int)"], ["int", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.getEstimatedRemainingTasks()"], ["long", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.getMaxSSTableBytes()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.validateOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["java.lang.String", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.toString()"], ["org.apache.cassandra.db.compaction.TimeWindowCompactionStrategyOptions", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategyOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.TimeWindowCompactionStrategyOptions", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategyOptions()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.compaction.TimeWindowCompactionStrategyOptions.validateOptions(java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.db.compaction.TimeWindowCompactionTask", "org.apache.cassandra.db.compaction.TimeWindowCompactionTask(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, int, boolean)"], ["org.apache.cassandra.db.compaction.CompactionController", "org.apache.cassandra.db.compaction.TimeWindowCompactionTask.getCompactionController(java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.Upgrader$UpgradeController", "org.apache.cassandra.db.compaction.Upgrader$UpgradeController(org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.db.compaction.Upgrader", "org.apache.cassandra.db.compaction.Upgrader(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, org.apache.cassandra.utils.OutputHandler)"], ["void", "org.apache.cassandra.db.compaction.Upgrader.upgrade(boolean)"], ["org.apache.cassandra.db.compaction.Verifier$VerifyController", "org.apache.cassandra.db.compaction.Verifier$VerifyController(org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.db.compaction.Verifier$VerifyInfo", "org.apache.cassandra.db.compaction.Verifier$VerifyInfo(org.apache.cassandra.io.util.RandomAccessReader, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.db.compaction.Verifier$VerifyInfo.getCompactionInfo()"], ["org.apache.cassandra.db.compaction.Verifier", "org.apache.cassandra.db.compaction.Verifier(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.io.sstable.format.SSTableReader, boolean)"], ["org.apache.cassandra.db.compaction.Verifier", "org.apache.cassandra.db.compaction.Verifier(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.utils.OutputHandler, boolean)"], ["void", "org.apache.cassandra.db.compaction.Verifier.verify(boolean)"], ["void", "org.apache.cassandra.db.compaction.Verifier.close()"], ["org.apache.cassandra.db.compaction.CompactionInfo$Holder", "org.apache.cassandra.db.compaction.Verifier.getVerifyInfo()"], ["org.apache.cassandra.db.compaction.writers.CompactionAwareWriter", "org.apache.cassandra.db.compaction.writers.CompactionAwareWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, boolean, boolean)"], ["org.apache.cassandra.db.compaction.writers.CompactionAwareWriter", "org.apache.cassandra.db.compaction.writers.CompactionAwareWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, boolean)"], ["long", "org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.estimatedKeys()"], ["boolean", "org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.append(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.Directories", "org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.getDirectories()"], ["org.apache.cassandra.db.Directories$DataDirectory", "org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.getWriteDirectory(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>, long)"], ["org.apache.cassandra.db.compaction.writers.CompactionAwareWriter", "org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.setRepairedAt(long)"], ["java.lang.Object", "org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.finish()"], ["org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter", "org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter", "org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, boolean, boolean, int)"], ["org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter", "org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, boolean, int)"], ["boolean", "org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.realAppend(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["void", "org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.switchCompactionLocation(org.apache.cassandra.db.Directories$DataDirectory)"], ["long", "org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.estimatedKeys()"], ["org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter", "org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, long)"], ["org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter", "org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, long, boolean, boolean)"], ["org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter", "org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, long, boolean)"], ["boolean", "org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.realAppend(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["void", "org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.switchCompactionLocation(org.apache.cassandra.db.Directories$DataDirectory)"], ["org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter", "org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, long, int)"], ["org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter", "org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, long, int, boolean, boolean)"], ["org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter", "org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, long, int, boolean)"], ["void", "org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.switchCompactionLocation(org.apache.cassandra.db.Directories$DataDirectory)"], ["org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter", "org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter", "org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.Directories, org.apache.cassandra.db.lifecycle.LifecycleTransaction, java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>, long)"], ["boolean", "org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.realAppend(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["void", "org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.switchCompactionLocation(org.apache.cassandra.db.Directories$DataDirectory)"], ["org.apache.cassandra.db.context.CounterContext$ContextState", "org.apache.cassandra.db.context.CounterContext$ContextState.wrap(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.context.CounterContext$ContextState", "org.apache.cassandra.db.context.CounterContext$ContextState.allocate(int, int, int)"], ["boolean", "org.apache.cassandra.db.context.CounterContext$ContextState.isGlobal()"], ["boolean", "org.apache.cassandra.db.context.CounterContext$ContextState.isLocal()"], ["boolean", "org.apache.cassandra.db.context.CounterContext$ContextState.isRemote()"], ["boolean", "org.apache.cassandra.db.context.CounterContext$ContextState.hasRemaining()"], ["void", "org.apache.cassandra.db.context.CounterContext$ContextState.moveToNext()"], ["void", "org.apache.cassandra.db.context.CounterContext$ContextState.copyTo(org.apache.cassandra.db.context.CounterContext$ContextState)"], ["int", "org.apache.cassandra.db.context.CounterContext$ContextState.compareIdTo(org.apache.cassandra.db.context.CounterContext$ContextState)"], ["void", "org.apache.cassandra.db.context.CounterContext$ContextState.reset()"], ["int", "org.apache.cassandra.db.context.CounterContext$ContextState.getElementIndex()"], ["org.apache.cassandra.utils.CounterId", "org.apache.cassandra.db.context.CounterContext$ContextState.getCounterId()"], ["long", "org.apache.cassandra.db.context.CounterContext$ContextState.getClock()"], ["long", "org.apache.cassandra.db.context.CounterContext$ContextState.getCount()"], ["void", "org.apache.cassandra.db.context.CounterContext$ContextState.writeGlobal(org.apache.cassandra.utils.CounterId, long, long)"], ["void", "org.apache.cassandra.db.context.CounterContext$ContextState.writeLocal(org.apache.cassandra.utils.CounterId, long, long)"], ["void", "org.apache.cassandra.db.context.CounterContext$ContextState.writeRemote(org.apache.cassandra.utils.CounterId, long, long)"], ["org.apache.cassandra.db.context.CounterContext$Relationship[]", "org.apache.cassandra.db.context.CounterContext$Relationship.values()"], ["org.apache.cassandra.db.context.CounterContext$Relationship", "org.apache.cassandra.db.context.CounterContext$Relationship.valueOf(java.lang.String)"], ["org.apache.cassandra.db.context.CounterContext", "org.apache.cassandra.db.context.CounterContext()"], ["org.apache.cassandra.db.context.CounterContext", "org.apache.cassandra.db.context.CounterContext.instance()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.context.CounterContext.createUpdate(long)"], ["boolean", "org.apache.cassandra.db.context.CounterContext.isUpdate(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.db.context.CounterContext.getUpdateCount(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.context.CounterContext.createGlobal(org.apache.cassandra.utils.CounterId, long, long)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.context.CounterContext.createLocal(long)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.context.CounterContext.createRemote(org.apache.cassandra.utils.CounterId, long, long)"], ["org.apache.cassandra.db.context.CounterContext$Relationship", "org.apache.cassandra.db.context.CounterContext.diff(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.context.CounterContext.merge(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.context.CounterContext.toString(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.db.context.CounterContext.total(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.context.CounterContext.shouldClearLocal(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.context.CounterContext.hasLegacyShards(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.context.CounterContext.markLocalToBeCleared(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.context.CounterContext.clearAllLocal(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.context.CounterContext.validateContext(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.context.CounterContext.updateDigest(java.security.MessageDigest, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.ClockAndCount", "org.apache.cassandra.db.context.CounterContext.getLocalClockAndCount(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.ClockAndCount", "org.apache.cassandra.db.context.CounterContext.getClockAndCountOf(java.nio.ByteBuffer, org.apache.cassandra.utils.CounterId)"], ["int", "org.apache.cassandra.db.context.CounterContext.findPositionOf(java.nio.ByteBuffer, org.apache.cassandra.utils.CounterId)"], ["void", "org.apache.cassandra.db.filter.AbstractClusteringIndexFilter$FilterSerializer.serialize(org.apache.cassandra.db.filter.ClusteringIndexFilter, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.filter.AbstractClusteringIndexFilter$FilterSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.db.filter.AbstractClusteringIndexFilter$FilterSerializer.serializedSize(org.apache.cassandra.db.filter.ClusteringIndexFilter, int)"], ["boolean", "org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.isReversed()"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind[]", "org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind.values()"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind", "org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1FilterNotIndexed.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1FilterNotIndexed.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$NamesDeserializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData, boolean)"], ["org.apache.cassandra.db.filter.ClusteringIndexNamesFilter", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter(java.util.NavigableSet<org.apache.cassandra.db.Clustering>, boolean)"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.selectsAllPartition()"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.selects(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.filter.ClusteringIndexNamesFilter", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.forPaging(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean)"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.isFullyCoveredBy(org.apache.cassandra.db.partitions.CachedPartition)"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.isHeadFilter()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.filterNotIndexed(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.getSlices(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.getUnfilteredRowIterator(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.partitions.Partition)"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.shouldInclude(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["java.lang.String", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.toString(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.toCQLString(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.kind()"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.forPaging(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter$1FilterNotIndexed.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter$1FilterNotIndexed.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter$SliceDeserializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData, boolean)"], ["org.apache.cassandra.db.filter.ClusteringIndexSliceFilter", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter(org.apache.cassandra.db.Slices, boolean)"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.requestedSlices()"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.selectsAllPartition()"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.selects(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.filter.ClusteringIndexSliceFilter", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.forPaging(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean)"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.isFullyCoveredBy(org.apache.cassandra.db.partitions.CachedPartition)"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.isHeadFilter()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.filterNotIndexed(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.Slices", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.getSlices(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.getUnfilteredRowIterator(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.partitions.Partition)"], ["boolean", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.shouldInclude(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["java.lang.String", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.toString(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.toCQLString(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.kind()"], ["org.apache.cassandra.db.filter.ClusteringIndexFilter", "org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.forPaging(org.apache.cassandra.db.ClusteringComparator, org.apache.cassandra.db.Clustering, boolean)"], ["org.apache.cassandra.db.filter.ColumnFilter$Builder", "org.apache.cassandra.db.filter.ColumnFilter$Builder.add(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.filter.ColumnFilter$Builder", "org.apache.cassandra.db.filter.ColumnFilter$Builder.addAll(java.lang.Iterable<org.apache.cassandra.config.ColumnDefinition>)"], ["org.apache.cassandra.db.filter.ColumnFilter$Builder", "org.apache.cassandra.db.filter.ColumnFilter$Builder.slice(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.filter.ColumnFilter$Builder", "org.apache.cassandra.db.filter.ColumnFilter$Builder.select(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.db.filter.ColumnFilter$Builder.build()"], ["org.apache.cassandra.db.filter.ColumnFilter$Serializer", "org.apache.cassandra.db.filter.ColumnFilter$Serializer()"], ["void", "org.apache.cassandra.db.filter.ColumnFilter$Serializer.serialize(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.db.filter.ColumnFilter$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.db.filter.ColumnFilter$Serializer.serializedSize(org.apache.cassandra.db.filter.ColumnFilter, int)"], ["boolean", "org.apache.cassandra.db.filter.ColumnFilter$Tester.fetches(org.apache.cassandra.db.rows.CellPath)"], ["boolean", "org.apache.cassandra.db.filter.ColumnFilter$Tester.fetchedCellIsQueried(org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.db.filter.ColumnFilter.all(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.db.filter.ColumnFilter.selection(org.apache.cassandra.db.PartitionColumns)"], ["org.apache.cassandra.db.filter.ColumnFilter", "org.apache.cassandra.db.filter.ColumnFilter.selection(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.PartitionColumns)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.filter.ColumnFilter.fetchedColumns()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.filter.ColumnFilter.queriedColumns()"], ["boolean", "org.apache.cassandra.db.filter.ColumnFilter.fetchesAllColumns()"], ["boolean", "org.apache.cassandra.db.filter.ColumnFilter.allFetchedColumnsAreQueried()"], ["boolean", "org.apache.cassandra.db.filter.ColumnFilter.fetches(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.db.filter.ColumnFilter.fetchedColumnIsQueried(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.db.filter.ColumnFilter.fetchedCellIsQueried(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.filter.ColumnFilter$Tester", "org.apache.cassandra.db.filter.ColumnFilter.newTester(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.filter.ColumnFilter$Builder", "org.apache.cassandra.db.filter.ColumnFilter.allColumnsBuilder(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.filter.ColumnFilter$Builder", "org.apache.cassandra.db.filter.ColumnFilter.selectionBuilder()"], ["boolean", "org.apache.cassandra.db.filter.ColumnFilter.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.filter.ColumnFilter.toString()"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.filter.ColumnSubselection$Element.comparisonPath()"], ["int", "org.apache.cassandra.db.filter.ColumnSubselection$Element.compareInclusionOf(org.apache.cassandra.db.rows.CellPath)"], ["java.lang.String", "org.apache.cassandra.db.filter.ColumnSubselection$Element.toString()"], ["int", "org.apache.cassandra.db.filter.ColumnSubselection$Element.compareTo(java.lang.Object)"], ["org.apache.cassandra.db.filter.ColumnSubselection$Kind[]", "org.apache.cassandra.db.filter.ColumnSubselection$Kind.values()"], ["org.apache.cassandra.db.filter.ColumnSubselection$Kind", "org.apache.cassandra.db.filter.ColumnSubselection$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.db.filter.ColumnSubselection$Serializer", "org.apache.cassandra.db.filter.ColumnSubselection$Serializer()"], ["void", "org.apache.cassandra.db.filter.ColumnSubselection$Serializer.serialize(org.apache.cassandra.db.filter.ColumnSubselection, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.filter.ColumnSubselection", "org.apache.cassandra.db.filter.ColumnSubselection$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.db.filter.ColumnSubselection$Serializer.serializedSize(org.apache.cassandra.db.filter.ColumnSubselection, int)"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.filter.ColumnSubselection$Slice.comparisonPath()"], ["int", "org.apache.cassandra.db.filter.ColumnSubselection$Slice.compareInclusionOf(org.apache.cassandra.db.rows.CellPath)"], ["java.lang.String", "org.apache.cassandra.db.filter.ColumnSubselection$Slice.toString()"], ["int", "org.apache.cassandra.db.filter.ColumnSubselection$Slice.compareTo(java.lang.Object)"], ["org.apache.cassandra.db.filter.ColumnSubselection", "org.apache.cassandra.db.filter.ColumnSubselection.slice(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.filter.ColumnSubselection", "org.apache.cassandra.db.filter.ColumnSubselection.element(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.filter.ColumnSubselection.column()"], ["int", "org.apache.cassandra.db.filter.ColumnSubselection.compareTo(org.apache.cassandra.db.filter.ColumnSubselection)"], ["int", "org.apache.cassandra.db.filter.ColumnSubselection.compareTo(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$1.hasEnoughLiveData(org.apache.cassandra.db.partitions.CachedPartition, int, boolean, boolean)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.filter.DataLimits$1.filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, int, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.DataLimits$1.filter(org.apache.cassandra.db.rows.UnfilteredRowIterator, int, boolean)"], ["void", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.applyToPartition(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.applyToRow(org.apache.cassandra.db.rows.Row)"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.counted()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.countedInCurrentPartition()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.rowCounted()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.rowCountedInCurrentPartition()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.isDoneForPartition()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.isDone()"], ["void", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.onPartitionClose()"], ["void", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter.onClose()"], ["org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits(int, int, int, org.apache.cassandra.db.aggregation.AggregationSpecification)"], ["org.apache.cassandra.db.filter.DataLimits$Kind", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.kind()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.isGroupByLimit()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.isUnlimited()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.forShortReadRetry(int)"], ["float", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.estimateTotalResults(org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.forPaging(int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.forPaging(int, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.forGroupByInternalPaging(org.apache.cassandra.db.aggregation.GroupingState)"], ["org.apache.cassandra.db.filter.DataLimits$Counter", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.newCounter(int, boolean, boolean, boolean)"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.count()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.perPartitionCount()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.withoutState()"], ["java.lang.String", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.toString()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits.isExhausted(org.apache.cassandra.db.filter.DataLimits$Counter)"], ["void", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits$PagingGroupByAwareCounter.applyToPartition(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits(int, int, int, org.apache.cassandra.db.aggregation.AggregationSpecification, org.apache.cassandra.db.aggregation.GroupingState, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.db.filter.DataLimits$Kind", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits.kind()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits.forPaging(int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits.forPaging(int, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits.forGroupByInternalPaging(org.apache.cassandra.db.aggregation.GroupingState)"], ["org.apache.cassandra.db.filter.DataLimits$Counter", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits.newCounter(int, boolean, boolean, boolean)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits.withoutState()"], ["org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter(org.apache.cassandra.db.filter.DataLimits$CQLLimits, int, boolean, boolean, boolean)"], ["void", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.applyToPartition(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.applyToRow(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.onPartitionClose()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.counted()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.countedInCurrentPartition()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.rowCounted()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.rowCountedInCurrentPartition()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.isDone()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter.isDoneForPartition()"], ["org.apache.cassandra.db.filter.DataLimits$Kind", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.kind()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.isUnlimited()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.isDistinct()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.forPaging(int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.forPaging(int, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.forShortReadRetry(int)"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.hasEnoughLiveData(org.apache.cassandra.db.partitions.CachedPartition, int, boolean, boolean)"], ["org.apache.cassandra.db.filter.DataLimits$Counter", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.newCounter(int, boolean, boolean, boolean)"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.count()"], ["int", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.perPartitionCount()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.withoutState()"], ["float", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.estimateTotalResults(org.apache.cassandra.db.ColumnFamilyStore)"], ["java.lang.String", "org.apache.cassandra.db.filter.DataLimits$CQLLimits.toString()"], ["void", "org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits$PagingAwareCounter.applyToPartition(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits", "org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits(int, int, boolean, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.db.filter.DataLimits$Kind", "org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits.kind()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits.forPaging(int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits.forPaging(int, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits.withoutState()"], ["org.apache.cassandra.db.filter.DataLimits$Counter", "org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits.newCounter(int, boolean, boolean, boolean)"], ["org.apache.cassandra.db.filter.DataLimits$Counter", "org.apache.cassandra.db.filter.DataLimits$Counter.onlyCount()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.filter.DataLimits$Counter.applyTo(org.apache.cassandra.db.partitions.PartitionIterator)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.filter.DataLimits$Counter.applyTo(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.DataLimits$Counter.applyTo(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.filter.DataLimits$Counter.applyTo(org.apache.cassandra.db.rows.RowIterator)"], ["void", "org.apache.cassandra.db.filter.DataLimits$Counter.onClose()"], ["org.apache.cassandra.db.filter.DataLimits$Kind[]", "org.apache.cassandra.db.filter.DataLimits$Kind.values()"], ["org.apache.cassandra.db.filter.DataLimits$Kind", "org.apache.cassandra.db.filter.DataLimits$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.db.filter.DataLimits$Serializer", "org.apache.cassandra.db.filter.DataLimits$Serializer()"], ["void", "org.apache.cassandra.db.filter.DataLimits$Serializer.serialize(org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.io.util.DataOutputPlus, int, org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.ClusteringComparator)"], ["long", "org.apache.cassandra.db.filter.DataLimits$Serializer.serializedSize(org.apache.cassandra.db.filter.DataLimits, int, org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits$SuperColumnCountingCounter", "org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits$SuperColumnCountingCounter(org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits, int, boolean, boolean)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits$SuperColumnCountingCounter.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.filter.DataLimits$Kind", "org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits.kind()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits.forPaging(int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits.forShortReadRetry(int)"], ["org.apache.cassandra.db.filter.DataLimits$Counter", "org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits.newCounter(int, boolean, boolean, boolean)"], ["org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter(org.apache.cassandra.db.filter.DataLimits$ThriftLimits, int, boolean, boolean)"], ["void", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.applyToPartition(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.applyToRow(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.onPartitionClose()"], ["int", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.counted()"], ["int", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.countedInCurrentPartition()"], ["int", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.rowCounted()"], ["int", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.rowCountedInCurrentPartition()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.isDone()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter.isDoneForPartition()"], ["org.apache.cassandra.db.filter.DataLimits$Kind", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.kind()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.isUnlimited()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.isDistinct()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.forPaging(int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.forPaging(int, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.forShortReadRetry(int)"], ["boolean", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.hasEnoughLiveData(org.apache.cassandra.db.partitions.CachedPartition, int, boolean, boolean)"], ["org.apache.cassandra.db.filter.DataLimits$Counter", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.newCounter(int, boolean, boolean, boolean)"], ["int", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.count()"], ["int", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.perPartitionCount()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.withoutState()"], ["float", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.estimateTotalResults(org.apache.cassandra.db.ColumnFamilyStore)"], ["java.lang.String", "org.apache.cassandra.db.filter.DataLimits$ThriftLimits.toString()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits.cqlLimits(int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits.cqlLimits(int, int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits.groupByLimits(int, int, int, org.apache.cassandra.db.aggregation.AggregationSpecification)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits.distinctLimits(int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits.thriftLimits(int, int)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits.superColumnCountingLimits(int, int)"], ["boolean", "org.apache.cassandra.db.filter.DataLimits.isGroupByLimit()"], ["boolean", "org.apache.cassandra.db.filter.DataLimits.isExhausted(org.apache.cassandra.db.filter.DataLimits$Counter)"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.db.filter.DataLimits.forGroupByInternalPaging(org.apache.cassandra.db.aggregation.GroupingState)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.filter.DataLimits.filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, int, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.DataLimits.filter(org.apache.cassandra.db.rows.UnfilteredRowIterator, int, boolean)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.filter.DataLimits.filter(org.apache.cassandra.db.partitions.PartitionIterator, int, boolean, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.RowFilter$CQLFilter$1IsSatisfiedFilter.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.filter.RowFilter$CQLFilter$1IsSatisfiedFilter.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.db.filter.RowFilter$CQLFilter$1IsSatisfiedFilter.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.filter.RowFilter$CQLFilter.filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, int)"], ["org.apache.cassandra.db.filter.RowFilter$CustomExpression", "org.apache.cassandra.db.filter.RowFilter$CustomExpression(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.schema.IndexMetadata, java.nio.ByteBuffer)"], ["org.apache.cassandra.schema.IndexMetadata", "org.apache.cassandra.db.filter.RowFilter$CustomExpression.getTargetIndex()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.filter.RowFilter$CustomExpression.getValue()"], ["java.lang.String", "org.apache.cassandra.db.filter.RowFilter$CustomExpression.toString()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$CustomExpression.isSatisfiedBy(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.filter.RowFilter$Expression$Kind[]", "org.apache.cassandra.db.filter.RowFilter$Expression$Kind.values()"], ["org.apache.cassandra.db.filter.RowFilter$Expression$Kind", "org.apache.cassandra.db.filter.RowFilter$Expression$Kind.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.db.filter.RowFilter$Expression$Serializer.serialize(org.apache.cassandra.db.filter.RowFilter$Expression, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.filter.RowFilter$Expression", "org.apache.cassandra.db.filter.RowFilter$Expression$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.db.filter.RowFilter$Expression$Serializer.serializedSize(org.apache.cassandra.db.filter.RowFilter$Expression, int)"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$Expression.isCustom()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$Expression.isUserDefined()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.filter.RowFilter$Expression.column()"], ["org.apache.cassandra.cql3.Operator", "org.apache.cassandra.db.filter.RowFilter$Expression.operator()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$Expression.isContains()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$Expression.isContainsKey()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.filter.RowFilter$Expression.getIndexValue()"], ["void", "org.apache.cassandra.db.filter.RowFilter$Expression.validate()"], ["void", "org.apache.cassandra.db.filter.RowFilter$Expression.validateForIndexing()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$Expression.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.filter.RowFilter$Expression.hashCode()"], ["org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression", "org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression(org.apache.cassandra.config.ColumnDefinition, java.nio.ByteBuffer, org.apache.cassandra.cql3.Operator, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression.validate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression.getIndexValue()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression.isSatisfiedBy(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["java.lang.String", "org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression.toString()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression.hashCode()"], ["org.apache.cassandra.db.filter.RowFilter$Serializer", "org.apache.cassandra.db.filter.RowFilter$Serializer()"], ["void", "org.apache.cassandra.db.filter.RowFilter$Serializer.serialize(org.apache.cassandra.db.filter.RowFilter, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.db.filter.RowFilter$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.db.filter.RowFilter$Serializer.serializedSize(org.apache.cassandra.db.filter.RowFilter, int)"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$SimpleExpression.isSatisfiedBy(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["java.lang.String", "org.apache.cassandra.db.filter.RowFilter$SimpleExpression.toString()"], ["org.apache.cassandra.db.filter.RowFilter$ThriftExpression", "org.apache.cassandra.db.filter.RowFilter$ThriftExpression(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.cql3.Operator, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.filter.RowFilter$ThriftExpression.isSatisfiedBy(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["java.lang.String", "org.apache.cassandra.db.filter.RowFilter$ThriftExpression.toString()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.filter.RowFilter$ThriftFilter$1IsSatisfiedThriftFilter.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.db.filter.RowFilter$ThriftFilter$1IsSatisfiedThriftFilter.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.filter.RowFilter$ThriftFilter.filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, int)"], ["void", "org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry.registerUserExpressionClass(java.lang.Class<? extends org.apache.cassandra.db.filter.RowFilter$UserExpression>, org.apache.cassandra.db.filter.RowFilter$UserExpression$Deserializer)"], ["java.lang.Integer", "org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry.getId(org.apache.cassandra.db.filter.RowFilter$UserExpression)"], ["org.apache.cassandra.db.filter.RowFilter$UserExpression$Deserializer", "org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry.getDeserializer(int)"], ["void", "org.apache.cassandra.db.filter.RowFilter$UserExpression.register(java.lang.Class<? extends org.apache.cassandra.db.filter.RowFilter$UserExpression>, org.apache.cassandra.db.filter.RowFilter$UserExpression$Deserializer)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.db.filter.RowFilter.create()"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.db.filter.RowFilter.create(int)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.db.filter.RowFilter.forThrift(int)"], ["org.apache.cassandra.db.filter.RowFilter$SimpleExpression", "org.apache.cassandra.db.filter.RowFilter.add(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Operator, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.filter.RowFilter.addMapEquality(org.apache.cassandra.config.ColumnDefinition, java.nio.ByteBuffer, org.apache.cassandra.cql3.Operator, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.filter.RowFilter.addThriftExpression(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.cql3.Operator, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.filter.RowFilter.addCustomIndexExpression(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.schema.IndexMetadata, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.filter.RowFilter.addUserExpression(org.apache.cassandra.db.filter.RowFilter$UserExpression)"], ["boolean", "org.apache.cassandra.db.filter.RowFilter.hasExpressionOnClusteringOrRegularColumns()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter.isSatisfiedBy(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row, int)"], ["boolean", "org.apache.cassandra.db.filter.RowFilter.partitionKeyRestrictionsAreSatisfiedBy(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.filter.RowFilter.clusteringKeyRestrictionsAreSatisfiedBy(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.db.filter.RowFilter.without(org.apache.cassandra.db.filter.RowFilter$Expression)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.db.filter.RowFilter.withoutExpressions()"], ["boolean", "org.apache.cassandra.db.filter.RowFilter.isEmpty()"], ["java.lang.String", "org.apache.cassandra.db.filter.RowFilter.toString()"], ["org.apache.cassandra.db.filter.TombstoneOverwhelmingException", "org.apache.cassandra.db.filter.TombstoneOverwhelmingException(int, java.lang.String, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.ClusteringPrefix)"], ["boolean", "org.apache.cassandra.db.lifecycle.Helpers$1.apply(T)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState$Action[]", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState$Action.values()"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState$Action", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState$Action.valueOf(java.lang.String)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState$Action", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState$Action.get(boolean, boolean)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState(org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState$Action, org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState$Action, org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.sstable.format.SSTableReader, boolean)"], ["boolean", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState.equals(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState.equals(org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState)"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState.toString()"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState.visible(org.apache.cassandra.io.sstable.format.SSTableReader, com.google.common.base.Predicate<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>...)"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LifecycleTransaction$State.toString()"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(org.apache.cassandra.db.compaction.OperationType, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(org.apache.cassandra.db.compaction.OperationType, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(org.apache.cassandra.db.compaction.OperationType)"], ["org.apache.cassandra.db.lifecycle.LogTransaction", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.log()"], ["org.apache.cassandra.db.compaction.OperationType", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.opType()"], ["java.util.UUID", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.opId()"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.doPrepare()"], ["java.lang.Throwable", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.doCommit(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.doAbort(java.lang.Throwable)"], ["boolean", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.isOffline()"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.permitRedundantTransitions()"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.checkpoint()"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.update(org.apache.cassandra.io.sstable.format.SSTableReader, boolean)"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.update(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, boolean)"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.obsolete(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.obsoleteOriginals()"], ["boolean", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.isObsolete(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.current(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.cancel(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.cancel(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.split(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.onlyOne()"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.trackNew(org.apache.cassandra.io.sstable.SSTable)"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.untrackNew(org.apache.cassandra.io.sstable.SSTable)"], ["boolean", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.removeUnfinishedLeftovers(org.apache.cassandra.db.ColumnFamilyStore)"], ["boolean", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.removeUnfinishedLeftovers(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.rescheduleFailedDeletions()"], ["void", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.waitForDeletions()"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction$ReaderState", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.state(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LifecycleTransaction.toString()"], ["void", "org.apache.cassandra.db.lifecycle.LogFile.addAll(org.apache.cassandra.db.lifecycle.LogRecord$Type, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.lifecycle.LogFile.close()"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LogFile.toString()"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LogFile.toString(boolean)"], ["boolean", "org.apache.cassandra.db.lifecycle.LogFile.isEmpty()"], ["org.apache.cassandra.db.lifecycle.LogRecord$Status", "org.apache.cassandra.db.lifecycle.LogRecord$Status()"], ["org.apache.cassandra.db.lifecycle.LogRecord$Type[]", "org.apache.cassandra.db.lifecycle.LogRecord$Type.values()"], ["org.apache.cassandra.db.lifecycle.LogRecord$Type", "org.apache.cassandra.db.lifecycle.LogRecord$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.db.lifecycle.LogRecord$Type", "org.apache.cassandra.db.lifecycle.LogRecord$Type.fromPrefix(java.lang.String)"], ["boolean", "org.apache.cassandra.db.lifecycle.LogRecord$Type.hasFile()"], ["boolean", "org.apache.cassandra.db.lifecycle.LogRecord$Type.matches(org.apache.cassandra.db.lifecycle.LogRecord)"], ["boolean", "org.apache.cassandra.db.lifecycle.LogRecord$Type.isFinal()"], ["org.apache.cassandra.db.lifecycle.LogRecord", "org.apache.cassandra.db.lifecycle.LogRecord.make(java.lang.String)"], ["org.apache.cassandra.db.lifecycle.LogRecord", "org.apache.cassandra.db.lifecycle.LogRecord.makeCommit(long)"], ["org.apache.cassandra.db.lifecycle.LogRecord", "org.apache.cassandra.db.lifecycle.LogRecord.makeAbort(long)"], ["org.apache.cassandra.db.lifecycle.LogRecord", "org.apache.cassandra.db.lifecycle.LogRecord.make(org.apache.cassandra.db.lifecycle.LogRecord$Type, org.apache.cassandra.io.sstable.SSTable)"], ["java.util.Map<org.apache.cassandra.io.sstable.SSTable, org.apache.cassandra.db.lifecycle.LogRecord>", "org.apache.cassandra.db.lifecycle.LogRecord.make(org.apache.cassandra.db.lifecycle.LogRecord$Type, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.lifecycle.LogRecord", "org.apache.cassandra.db.lifecycle.LogRecord.withExistingFiles()"], ["org.apache.cassandra.db.lifecycle.LogRecord", "org.apache.cassandra.db.lifecycle.LogRecord.make(org.apache.cassandra.db.lifecycle.LogRecord$Type, java.util.List<java.io.File>, int, java.lang.String)"], ["java.util.Map<java.lang.String, java.util.List<java.io.File>>", "org.apache.cassandra.db.lifecycle.LogRecord.getExistingFiles(java.util.Set<java.lang.String>)"], ["boolean", "org.apache.cassandra.db.lifecycle.LogRecord.isFinal()"], ["int", "org.apache.cassandra.db.lifecycle.LogRecord.hashCode()"], ["boolean", "org.apache.cassandra.db.lifecycle.LogRecord.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LogRecord.toString()"], ["void", "org.apache.cassandra.db.lifecycle.LogReplica.close()"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LogReplica.toString()"], ["org.apache.cassandra.db.lifecycle.LogReplicaSet", "org.apache.cassandra.db.lifecycle.LogReplicaSet()"], ["void", "org.apache.cassandra.db.lifecycle.LogReplicaSet.close()"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LogReplicaSet.toString()"], ["org.apache.cassandra.db.lifecycle.LogTransaction$CorruptTransactionLogException", "org.apache.cassandra.db.lifecycle.LogTransaction$CorruptTransactionLogException(java.lang.String, org.apache.cassandra.db.lifecycle.LogFile)"], ["org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier", "org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier(org.apache.cassandra.io.sstable.format.SSTableReader, boolean, org.apache.cassandra.db.lifecycle.LogTransaction)"], ["void", "org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier.run()"], ["void", "org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier.abort()"], ["void", "org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier.tidy()"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier.name()"], ["void", "org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier.run()"], ["org.apache.cassandra.db.lifecycle.SSTableIntervalTree", "org.apache.cassandra.db.lifecycle.SSTableIntervalTree.empty()"], ["org.apache.cassandra.db.lifecycle.SSTableIntervalTree", "org.apache.cassandra.db.lifecycle.SSTableIntervalTree.build(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["java.util.List<org.apache.cassandra.utils.Interval<org.apache.cassandra.db.PartitionPosition, org.apache.cassandra.io.sstable.format.SSTableReader>>", "org.apache.cassandra.db.lifecycle.SSTableIntervalTree.buildIntervals(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.db.lifecycle.SSTableSet[]", "org.apache.cassandra.db.lifecycle.SSTableSet.values()"], ["org.apache.cassandra.db.lifecycle.SSTableSet", "org.apache.cassandra.db.lifecycle.SSTableSet.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.db.lifecycle.Tracker$1.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.db.lifecycle.Tracker$1.apply(java.lang.Object)"], ["org.apache.cassandra.db.lifecycle.Tracker", "org.apache.cassandra.db.lifecycle.Tracker(org.apache.cassandra.db.Memtable, boolean)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction", "org.apache.cassandra.db.lifecycle.Tracker.tryModify(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.compaction.OperationType)"], ["org.apache.cassandra.db.lifecycle.LifecycleTransaction", "org.apache.cassandra.db.lifecycle.Tracker.tryModify(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.compaction.OperationType)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.addInitialSSTables(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.addSSTables(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.reset(org.apache.cassandra.db.Memtable)"], ["java.lang.Throwable", "org.apache.cassandra.db.lifecycle.Tracker.dropSSTablesIfInvalid(java.lang.Throwable)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.dropSSTables()"], ["java.lang.Throwable", "org.apache.cassandra.db.lifecycle.Tracker.dropSSTables(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.db.lifecycle.Tracker.dropSSTables(com.google.common.base.Predicate<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.compaction.OperationType, java.lang.Throwable)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.removeUnreadableSSTables(java.io.File)"], ["org.apache.cassandra.db.Memtable", "org.apache.cassandra.db.lifecycle.Tracker.getMemtableFor(org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.db.commitlog.CommitLogPosition)"], ["org.apache.cassandra.db.Memtable", "org.apache.cassandra.db.lifecycle.Tracker.switchMemtable(boolean, org.apache.cassandra.db.Memtable)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.markFlushing(org.apache.cassandra.db.Memtable)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.replaceFlushed(org.apache.cassandra.db.Memtable, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.maybeIncrementallyBackup(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.notifyAdded(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.notifySSTableRepairedStatusChanged(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.notifyDeleting(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.notifyTruncated(long)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.notifyRenewed(org.apache.cassandra.db.Memtable)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.notifySwitched(org.apache.cassandra.db.Memtable)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.notifyDiscarded(org.apache.cassandra.db.Memtable)"], ["boolean", "org.apache.cassandra.db.lifecycle.Tracker.isDummy()"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.subscribe(org.apache.cassandra.notifications.INotificationConsumer)"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.unsubscribe(org.apache.cassandra.notifications.INotificationConsumer)"], ["org.apache.cassandra.db.lifecycle.View", "org.apache.cassandra.db.lifecycle.Tracker.getView()"], ["void", "org.apache.cassandra.db.lifecycle.Tracker.removeUnsafe(java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["boolean", "org.apache.cassandra.db.lifecycle.View$1.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.db.lifecycle.View$1.apply(java.lang.Object)"], ["org.apache.cassandra.db.lifecycle.View", "org.apache.cassandra.db.lifecycle.View$2.apply(org.apache.cassandra.db.lifecycle.View)"], ["java.lang.Object", "org.apache.cassandra.db.lifecycle.View$2.apply(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.lifecycle.View$3.apply(org.apache.cassandra.db.lifecycle.View)"], ["boolean", "org.apache.cassandra.db.lifecycle.View$3.apply(java.lang.Object)"], ["org.apache.cassandra.db.lifecycle.View", "org.apache.cassandra.db.lifecycle.View$4.apply(org.apache.cassandra.db.lifecycle.View)"], ["java.lang.Object", "org.apache.cassandra.db.lifecycle.View$4.apply(java.lang.Object)"], ["org.apache.cassandra.db.lifecycle.View", "org.apache.cassandra.db.lifecycle.View$5.apply(org.apache.cassandra.db.lifecycle.View)"], ["java.lang.Object", "org.apache.cassandra.db.lifecycle.View$5.apply(java.lang.Object)"], ["org.apache.cassandra.db.lifecycle.View", "org.apache.cassandra.db.lifecycle.View$6.apply(org.apache.cassandra.db.lifecycle.View)"], ["java.lang.Object", "org.apache.cassandra.db.lifecycle.View$6.apply(java.lang.Object)"], ["org.apache.cassandra.db.lifecycle.View", "org.apache.cassandra.db.lifecycle.View$7.apply(org.apache.cassandra.db.lifecycle.View)"], ["java.lang.Object", "org.apache.cassandra.db.lifecycle.View$7.apply(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.lifecycle.View$8.apply(T)"], ["boolean", "org.apache.cassandra.db.lifecycle.View$8.apply(java.lang.Object)"], ["org.apache.cassandra.db.Memtable", "org.apache.cassandra.db.lifecycle.View.getCurrentMemtable()"], ["boolean", "org.apache.cassandra.db.lifecycle.View.isEmpty()"], ["java.lang.String", "org.apache.cassandra.db.lifecycle.View.toString()"], ["com.google.common.base.Function<org.apache.cassandra.db.lifecycle.View, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>>", "org.apache.cassandra.db.lifecycle.View.selectFunction(org.apache.cassandra.db.lifecycle.SSTableSet)"], ["com.google.common.base.Function<org.apache.cassandra.db.lifecycle.View, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>>", "org.apache.cassandra.db.lifecycle.View.select(org.apache.cassandra.db.lifecycle.SSTableSet, com.google.common.base.Predicate<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["com.google.common.base.Function<org.apache.cassandra.db.lifecycle.View, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>>", "org.apache.cassandra.db.lifecycle.View.select(org.apache.cassandra.db.lifecycle.SSTableSet, org.apache.cassandra.db.DecoratedKey)"], ["com.google.common.base.Function<org.apache.cassandra.db.lifecycle.View, java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>>", "org.apache.cassandra.db.lifecycle.View.selectLive(org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>)"], ["int", "org.apache.cassandra.db.marshal.AbstractCompositeType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer[]", "org.apache.cassandra.db.marshal.AbstractCompositeType.split(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.AbstractCompositeType.escape(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.marshal.AbstractCompositeType.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.AbstractCompositeType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.AbstractCompositeType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.AbstractCompositeType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.db.marshal.AbstractCompositeType.validate(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.marshal.AbstractCompositeType.referencesUserType(java.lang.String)"], ["org.apache.cassandra.db.marshal.AbstractType$ComparisonType[]", "org.apache.cassandra.db.marshal.AbstractType$ComparisonType.values()"], ["org.apache.cassandra.db.marshal.AbstractType$ComparisonType", "org.apache.cassandra.db.marshal.AbstractType$ComparisonType.valueOf(java.lang.String)"], ["T", "org.apache.cassandra.db.marshal.AbstractType.compose(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.AbstractType.decompose(T)"], ["java.lang.String", "org.apache.cassandra.db.marshal.AbstractType.getString(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.AbstractType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.db.marshal.AbstractType.validate(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.marshal.AbstractType.compare(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.marshal.AbstractType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.marshal.AbstractType.validateCellValue(java.nio.ByteBuffer)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.AbstractType.asCQL3Type()"], ["int", "org.apache.cassandra.db.marshal.AbstractType.compareForCQL(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.AbstractType.getString(java.util.Collection<java.nio.ByteBuffer>)"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isCounter()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isFrozenCollection()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isReversed()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isValueCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.db.marshal.AbstractType.compareCollectionMembers(java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.marshal.AbstractType.validateCollectionMember(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isCollection()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isUDT()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isTuple()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isMultiCell()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isFreezable()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.isEmptyValueMeaningless()"], ["java.lang.String", "org.apache.cassandra.db.marshal.AbstractType.toString(boolean)"], ["int", "org.apache.cassandra.db.marshal.AbstractType.componentsCount()"], ["void", "org.apache.cassandra.db.marshal.AbstractType.writeValue(java.nio.ByteBuffer, org.apache.cassandra.io.util.DataOutputPlus)"], ["long", "org.apache.cassandra.db.marshal.AbstractType.writtenLength(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.AbstractType.readValue(org.apache.cassandra.io.util.DataInputPlus)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.AbstractType.readValue(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.db.marshal.AbstractType.skipValue(org.apache.cassandra.io.util.DataInputPlus)"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.referencesUserType(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.referencesDuration()"], ["java.lang.String", "org.apache.cassandra.db.marshal.AbstractType.toString()"], ["boolean", "org.apache.cassandra.db.marshal.AbstractType.equals(java.lang.Object, boolean)"], ["void", "org.apache.cassandra.db.marshal.AbstractType.checkComparable()"], ["org.apache.cassandra.cql3.AssignmentTestable$TestResult", "org.apache.cassandra.db.marshal.AbstractType.testAssignment(java.lang.String, org.apache.cassandra.cql3.ColumnSpecification)"], ["int", "org.apache.cassandra.db.marshal.AbstractType.compare(java.lang.Object, java.lang.Object)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.AsciiType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.AsciiType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.AsciiType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.AsciiType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.BooleanType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.BooleanType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.BooleanType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.BooleanType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.BooleanType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.BooleanType.asCQL3Type()"], ["int", "org.apache.cassandra.db.marshal.ByteType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.ByteType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.ByteType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ByteType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.ByteType.asCQL3Type()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.BytesType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.BytesType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.BytesType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.BytesType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.BytesType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.BytesType.asCQL3Type()"], ["void", "org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer.serialize(org.apache.cassandra.db.rows.CellPath, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer.serializedSize(org.apache.cassandra.db.rows.CellPath)"], ["void", "org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer.skip(org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.db.marshal.CollectionType$Kind$1.makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification, boolean)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.db.marshal.CollectionType$Kind$2.makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification, boolean)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.db.marshal.CollectionType$Kind$3.makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification, boolean)"], ["org.apache.cassandra.db.marshal.CollectionType$Kind[]", "org.apache.cassandra.db.marshal.CollectionType$Kind.values()"], ["org.apache.cassandra.db.marshal.CollectionType$Kind", "org.apache.cassandra.db.marshal.CollectionType$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.cql3.ColumnSpecification", "org.apache.cassandra.db.marshal.CollectionType.makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification, boolean)"], ["java.lang.String", "org.apache.cassandra.db.marshal.CollectionType.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CollectionType.fromString(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.CollectionType.isCollection()"], ["void", "org.apache.cassandra.db.marshal.CollectionType.validateCellValue(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.marshal.CollectionType.isMap()"], ["boolean", "org.apache.cassandra.db.marshal.CollectionType.isFreezable()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CollectionType.serializeForNativeProtocol(java.util.Iterator<org.apache.cassandra.db.rows.Cell>, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.CollectionType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.CollectionType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.CollectionType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.CollectionType.equals(java.lang.Object, boolean)"], ["java.lang.String", "org.apache.cassandra.db.marshal.CollectionType.toString()"], ["org.apache.cassandra.serializers.TypeSerializer", "org.apache.cassandra.db.marshal.CollectionType.getSerializer()"], ["org.apache.cassandra.db.marshal.ColumnToCollectionType", "org.apache.cassandra.db.marshal.ColumnToCollectionType.getInstance(org.apache.cassandra.db.marshal.TypeParser)"], ["synchronized", "org.apache.cassandra.db.marshal.ColumnToCollectionType.org.apache.cassandra.db.marshal.ColumnToCollectionType getInstance(java.util.Map<java.nio.ByteBuffer, org.apache.cassandra.db.marshal.CollectionType>)"], ["int", "org.apache.cassandra.db.marshal.ColumnToCollectionType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.marshal.ColumnToCollectionType.compareCollectionMembers(java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ColumnToCollectionType.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.ColumnToCollectionType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.ColumnToCollectionType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ColumnToCollectionType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.db.marshal.ColumnToCollectionType.validate(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.marshal.ColumnToCollectionType.validateCollectionMember(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.marshal.ColumnToCollectionType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ColumnToCollectionType.toString()"], ["org.apache.cassandra.db.marshal.CompositeType$Builder", "org.apache.cassandra.db.marshal.CompositeType$Builder(org.apache.cassandra.db.marshal.CompositeType)"], ["org.apache.cassandra.db.marshal.CompositeType$Builder", "org.apache.cassandra.db.marshal.CompositeType$Builder(org.apache.cassandra.db.marshal.CompositeType, boolean)"], ["org.apache.cassandra.db.marshal.CompositeType$Builder", "org.apache.cassandra.db.marshal.CompositeType$Builder.add(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.marshal.CompositeType$Builder", "org.apache.cassandra.db.marshal.CompositeType$Builder.add(org.apache.cassandra.cql3.ColumnIdentifier)"], ["int", "org.apache.cassandra.db.marshal.CompositeType$Builder.componentCount()"], ["int", "org.apache.cassandra.db.marshal.CompositeType$Builder.remainingCount()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType$Builder.get(int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType$Builder.build()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType$Builder.buildAsEndOfRange()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType$Builder.buildForRelation(org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.db.marshal.CompositeType$Builder", "org.apache.cassandra.db.marshal.CompositeType$Builder.copy()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType$Builder.getComponent(int)"], ["java.lang.String", "org.apache.cassandra.db.marshal.CompositeType$StaticParsedComparator.getRemainingPart()"], ["int", "org.apache.cassandra.db.marshal.CompositeType$StaticParsedComparator.getComparatorSerializedSize()"], ["void", "org.apache.cassandra.db.marshal.CompositeType$StaticParsedComparator.serializeComparator(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.marshal.CompositeType", "org.apache.cassandra.db.marshal.CompositeType.getInstance(org.apache.cassandra.db.marshal.TypeParser)"], ["org.apache.cassandra.db.marshal.CompositeType", "org.apache.cassandra.db.marshal.CompositeType.getInstance(org.apache.cassandra.db.marshal.AbstractType...)"], ["org.apache.cassandra.db.marshal.CompositeType", "org.apache.cassandra.db.marshal.CompositeType.getInstance(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType.decompose(java.lang.Object...)"], ["java.nio.ByteBuffer[]", "org.apache.cassandra.db.marshal.CompositeType.split(java.nio.ByteBuffer)"], ["byte", "org.apache.cassandra.db.marshal.CompositeType.lastEOC(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType.extractComponent(java.nio.ByteBuffer, int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType.extractLastComponent(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.marshal.CompositeType.isStaticName(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.marshal.CompositeType.componentsCount()"], ["boolean", "org.apache.cassandra.db.marshal.CompositeType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.CompositeType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.lang.String", "org.apache.cassandra.db.marshal.CompositeType.toString()"], ["org.apache.cassandra.db.marshal.CompositeType$Builder", "org.apache.cassandra.db.marshal.CompositeType.builder()"], ["org.apache.cassandra.db.marshal.CompositeType$Builder", "org.apache.cassandra.db.marshal.CompositeType.builder(boolean)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType.build(java.nio.ByteBuffer...)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CompositeType.build(boolean, java.nio.ByteBuffer...)"], ["boolean", "org.apache.cassandra.db.marshal.CounterColumnType.isEmptyValueMeaningless()"], ["boolean", "org.apache.cassandra.db.marshal.CounterColumnType.isCounter()"], ["java.lang.Long", "org.apache.cassandra.db.marshal.CounterColumnType.compose(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CounterColumnType.decompose(java.lang.Long)"], ["void", "org.apache.cassandra.db.marshal.CounterColumnType.validateCellValue(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.CounterColumnType.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CounterColumnType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.CounterColumnType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.CounterColumnType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.CounterColumnType.asCQL3Type()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.CounterColumnType.decompose(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.marshal.CounterColumnType.compose(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.marshal.DateType.isEmptyValueMeaningless()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.DateType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.DateType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.DateType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.DateType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.DateType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.DateType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.DecimalType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.DecimalType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.DecimalType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.DecimalType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.DecimalType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.DecimalType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.DoubleType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.DoubleType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.DoubleType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.DoubleType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.DoubleType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.DoubleType.asCQL3Type()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.DurationType.fromString(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.DurationType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.DurationType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.DurationType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.DurationType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.DurationType.referencesDuration()"], ["java.lang.String", "org.apache.cassandra.db.marshal.DynamicCompositeType$DynamicParsedComparator.getRemainingPart()"], ["int", "org.apache.cassandra.db.marshal.DynamicCompositeType$DynamicParsedComparator.getComparatorSerializedSize()"], ["void", "org.apache.cassandra.db.marshal.DynamicCompositeType$DynamicParsedComparator.serializeComparator(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator(int)"], ["int", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.Void", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.compose(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.decompose(java.lang.Void)"], ["java.lang.String", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.validate(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.decompose(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.marshal.DynamicCompositeType$FixedValueComparator.compose(java.nio.ByteBuffer)"], ["synchronized", "org.apache.cassandra.db.marshal.DynamicCompositeType.org.apache.cassandra.db.marshal.DynamicCompositeType getInstance(org.apache.cassandra.db.marshal.TypeParser)"], ["synchronized", "org.apache.cassandra.db.marshal.DynamicCompositeType.org.apache.cassandra.db.marshal.DynamicCompositeType getInstance(java.util.Map<java.lang.Byte, org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.DynamicCompositeType.decompose(java.lang.Object...)"], ["boolean", "org.apache.cassandra.db.marshal.DynamicCompositeType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.lang.String", "org.apache.cassandra.db.marshal.DynamicCompositeType.toString()"], ["int", "org.apache.cassandra.db.marshal.EmptyType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.EmptyType.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.EmptyType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.EmptyType.fromJSONObject(java.lang.Object)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.EmptyType.asCQL3Type()"], ["java.lang.String", "org.apache.cassandra.db.marshal.EmptyType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.FloatType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.FloatType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.FloatType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.FloatType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.FloatType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.FloatType.asCQL3Type()"], ["java.lang.String", "org.apache.cassandra.db.marshal.FrozenType.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.FrozenType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.FrozenType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.FrozenType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.InetAddressType.isEmptyValueMeaningless()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.InetAddressType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.InetAddressType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.InetAddressType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.InetAddressType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.Int32Type.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.Int32Type.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.Int32Type.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.Int32Type.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.Int32Type.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.Int32Type.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.IntegerType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.IntegerType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.marshal.IntegerType.compareIntegers(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.IntegerType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.IntegerType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.IntegerType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.IntegerType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.IntegerType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.LexicalUUIDType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.LexicalUUIDType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.LexicalUUIDType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.LexicalUUIDType.fromJSONObject(java.lang.Object)"], ["<T> org.apache.cassandra.db.marshal.ListType<T>", "org.apache.cassandra.db.marshal.ListType.getInstance(org.apache.cassandra.db.marshal.AbstractType<T>, boolean)"], ["boolean", "org.apache.cassandra.db.marshal.ListType.referencesUserType(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.ListType.referencesDuration()"], ["boolean", "org.apache.cassandra.db.marshal.ListType.isMultiCell()"], ["boolean", "org.apache.cassandra.db.marshal.ListType.isCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.ListType.isValueCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType<?>)"], ["int", "org.apache.cassandra.db.marshal.ListType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ListType.toString(boolean)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.ListType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ListType.setOrListToJsonString(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ListType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.serializers.CollectionSerializer", "org.apache.cassandra.db.marshal.ListType.getSerializer()"], ["org.apache.cassandra.serializers.TypeSerializer", "org.apache.cassandra.db.marshal.ListType.getSerializer()"], ["boolean", "org.apache.cassandra.db.marshal.LongType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.LongType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.marshal.LongType.compareLongs(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.LongType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.LongType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.LongType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.LongType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.LongType.asCQL3Type()"], ["org.apache.cassandra.db.marshal.MapType<?, ?>", "org.apache.cassandra.db.marshal.MapType.getInstance(org.apache.cassandra.db.marshal.TypeParser)"], ["<K, V> org.apache.cassandra.db.marshal.MapType<K, V>", "org.apache.cassandra.db.marshal.MapType.getInstance(org.apache.cassandra.db.marshal.AbstractType<K>, org.apache.cassandra.db.marshal.AbstractType<V>, boolean)"], ["boolean", "org.apache.cassandra.db.marshal.MapType.referencesUserType(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.MapType.referencesDuration()"], ["boolean", "org.apache.cassandra.db.marshal.MapType.isMultiCell()"], ["boolean", "org.apache.cassandra.db.marshal.MapType.isCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.MapType.isValueCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType<?>)"], ["int", "org.apache.cassandra.db.marshal.MapType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.marshal.MapType.compareMaps(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["org.apache.cassandra.serializers.MapSerializer<K, V>", "org.apache.cassandra.db.marshal.MapType.getSerializer()"], ["java.lang.String", "org.apache.cassandra.db.marshal.MapType.toString(boolean)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.MapType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.MapType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.serializers.CollectionSerializer", "org.apache.cassandra.db.marshal.MapType.getSerializer()"], ["org.apache.cassandra.serializers.TypeSerializer", "org.apache.cassandra.db.marshal.MapType.getSerializer()"], ["org.apache.cassandra.db.marshal.PartitionerDefinedOrder", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht.IPartitioner)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.compose(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.decompose(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toString()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.decompose(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.marshal.PartitionerDefinedOrder.compose(java.nio.ByteBuffer)"], ["<T> org.apache.cassandra.db.marshal.ReversedType<T>", "org.apache.cassandra.db.marshal.ReversedType.getInstance(org.apache.cassandra.db.marshal.TypeParser)"], ["<T> org.apache.cassandra.db.marshal.ReversedType<T>", "org.apache.cassandra.db.marshal.ReversedType.getInstance(org.apache.cassandra.db.marshal.AbstractType<T>)"], ["boolean", "org.apache.cassandra.db.marshal.ReversedType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.ReversedType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.marshal.ReversedType.compareForCQL(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ReversedType.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.ReversedType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.ReversedType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ReversedType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.ReversedType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.ReversedType.isValueCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.ReversedType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.ReversedType.referencesUserType(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.ReversedType.isReversed()"], ["java.lang.String", "org.apache.cassandra.db.marshal.ReversedType.toString()"], ["<T> org.apache.cassandra.db.marshal.SetType<T>", "org.apache.cassandra.db.marshal.SetType.getInstance(org.apache.cassandra.db.marshal.AbstractType<T>, boolean)"], ["org.apache.cassandra.db.marshal.SetType", "org.apache.cassandra.db.marshal.SetType(org.apache.cassandra.db.marshal.AbstractType<T>, boolean)"], ["boolean", "org.apache.cassandra.db.marshal.SetType.referencesUserType(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.SetType.isMultiCell()"], ["boolean", "org.apache.cassandra.db.marshal.SetType.isCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.SetType.isValueCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType<?>)"], ["int", "org.apache.cassandra.db.marshal.SetType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.db.marshal.SetType.toString(boolean)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.SetType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.SetType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.serializers.CollectionSerializer", "org.apache.cassandra.db.marshal.SetType.getSerializer()"], ["org.apache.cassandra.serializers.TypeSerializer", "org.apache.cassandra.db.marshal.SetType.getSerializer()"], ["int", "org.apache.cassandra.db.marshal.ShortType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.ShortType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.ShortType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.ShortType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.ShortType.asCQL3Type()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.SimpleDateType.fromString(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.SimpleDateType.fromTimeInMillis(long)"], ["long", "org.apache.cassandra.db.marshal.SimpleDateType.toTimeInMillis(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.marshal.SimpleDateType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.SimpleDateType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.SimpleDateType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.SimpleDateType.asCQL3Type()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.TimeType.fromString(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.TimeType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.TimeType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.TimeType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.TimeType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.TimeUUIDType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.TimeUUIDType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.TimeUUIDType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.TimeUUIDType.fromJSONObject(java.lang.Object)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.TimeUUIDType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.TimestampType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.TimestampType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.TimestampType.fromString(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.TimestampType.fromTimeInMillis(long)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.TimestampType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.TimestampType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.TimestampType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.TimestampType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.TimestampType.asCQL3Type()"], ["org.apache.cassandra.db.marshal.TupleType", "org.apache.cassandra.db.marshal.TupleType(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.db.marshal.TupleType", "org.apache.cassandra.db.marshal.TupleType.getInstance(org.apache.cassandra.db.marshal.TypeParser)"], ["boolean", "org.apache.cassandra.db.marshal.TupleType.referencesUserType(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.TupleType.referencesDuration()"], ["int", "org.apache.cassandra.db.marshal.TupleType.size()"], ["int", "org.apache.cassandra.db.marshal.TupleType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer[]", "org.apache.cassandra.db.marshal.TupleType.split(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.TupleType.buildValue(java.nio.ByteBuffer[])"], ["java.lang.String", "org.apache.cassandra.db.marshal.TupleType.getString(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.TupleType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.TupleType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.TupleType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.TupleType.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.TupleType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.db.marshal.TupleType.hashCode()"], ["boolean", "org.apache.cassandra.db.marshal.TupleType.equals(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.marshal.TupleType.isTuple()"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.TupleType.asCQL3Type()"], ["java.lang.String", "org.apache.cassandra.db.marshal.TupleType.toString()"], ["org.apache.cassandra.db.marshal.TypeParser", "org.apache.cassandra.db.marshal.TypeParser(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.db.marshal.TypeParser.getKeyValueParameters()"], ["java.util.Map<java.lang.Byte, org.apache.cassandra.db.marshal.AbstractType<?>>", "org.apache.cassandra.db.marshal.TypeParser.getAliasParameters()"], ["java.util.Map<java.nio.ByteBuffer, org.apache.cassandra.db.marshal.CollectionType>", "org.apache.cassandra.db.marshal.TypeParser.getCollectionsParameters()"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.utils.Pair<java.lang.String, java.nio.ByteBuffer>, java.util.List<org.apache.cassandra.utils.Pair<java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType>>>", "org.apache.cassandra.db.marshal.TypeParser.getUserTypeParameters()"], ["java.lang.String", "org.apache.cassandra.db.marshal.TypeParser.readNextIdentifier()"], ["java.lang.String", "org.apache.cassandra.db.marshal.TypeParser.stringifyAliasesParameters(java.util.Map<java.lang.Byte, org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["java.lang.String", "org.apache.cassandra.db.marshal.TypeParser.stringifyTypeParameters(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["java.lang.String", "org.apache.cassandra.db.marshal.TypeParser.stringifyTypeParameters(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, boolean)"], ["java.lang.String", "org.apache.cassandra.db.marshal.TypeParser.stringifyCollectionsParameters(java.util.Map<java.nio.ByteBuffer, ? extends org.apache.cassandra.db.marshal.CollectionType>)"], ["java.lang.String", "org.apache.cassandra.db.marshal.TypeParser.stringifyUserTypeParameters(java.lang.String, java.nio.ByteBuffer, java.util.List<org.apache.cassandra.cql3.FieldIdentifier>, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, boolean)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.UTF8Type.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.UTF8Type.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.UTF8Type.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.db.marshal.UTF8Type.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.UTF8Type.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.UUIDType.isEmptyValueMeaningless()"], ["int", "org.apache.cassandra.db.marshal.UUIDType.compareCustom(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.db.marshal.UUIDType.isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.UUIDType.fromString(java.lang.String)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.UUIDType.asCQL3Type()"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.UUIDType.fromJSONObject(java.lang.Object)"], ["org.apache.cassandra.db.marshal.UserType", "org.apache.cassandra.db.marshal.UserType(java.lang.String, java.nio.ByteBuffer, java.util.List<org.apache.cassandra.cql3.FieldIdentifier>, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, boolean)"], ["org.apache.cassandra.db.marshal.UserType", "org.apache.cassandra.db.marshal.UserType.getInstance(org.apache.cassandra.db.marshal.TypeParser)"], ["boolean", "org.apache.cassandra.db.marshal.UserType.isUDT()"], ["boolean", "org.apache.cassandra.db.marshal.UserType.isMultiCell()"], ["boolean", "org.apache.cassandra.db.marshal.UserType.isFreezable()"], ["org.apache.cassandra.cql3.FieldIdentifier", "org.apache.cassandra.db.marshal.UserType.fieldName(int)"], ["java.lang.String", "org.apache.cassandra.db.marshal.UserType.fieldNameAsString(int)"], ["java.lang.String", "org.apache.cassandra.db.marshal.UserType.getNameAsString()"], ["int", "org.apache.cassandra.db.marshal.UserType.fieldPosition(org.apache.cassandra.cql3.FieldIdentifier)"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.marshal.UserType.cellPathForField(org.apache.cassandra.cql3.FieldIdentifier)"], ["org.apache.cassandra.db.marshal.ShortType", "org.apache.cassandra.db.marshal.UserType.nameComparator()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.marshal.UserType.serializeForNativeProtocol(java.util.Iterator<org.apache.cassandra.db.rows.Cell>, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.db.marshal.UserType.validateCell(org.apache.cassandra.db.rows.Cell)"], ["org.apache.cassandra.cql3.Term", "org.apache.cassandra.db.marshal.UserType.fromJSONObject(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.db.marshal.UserType.toJSONString(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.db.marshal.UserType", "org.apache.cassandra.db.marshal.UserType.freeze()"], ["int", "org.apache.cassandra.db.marshal.UserType.hashCode()"], ["boolean", "org.apache.cassandra.db.marshal.UserType.isValueCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.db.marshal.UserType.equals(java.lang.Object)"], ["boolean", "org.apache.cassandra.db.marshal.UserType.equals(java.lang.Object, boolean)"], ["org.apache.cassandra.cql3.CQL3Type", "org.apache.cassandra.db.marshal.UserType.asCQL3Type()"], ["boolean", "org.apache.cassandra.db.marshal.UserType.referencesUserType(java.lang.String)"], ["boolean", "org.apache.cassandra.db.marshal.UserType.referencesDuration()"], ["java.lang.String", "org.apache.cassandra.db.marshal.UserType.toString()"], ["boolean", "org.apache.cassandra.db.marshal.UserType.isTuple()"], ["java.lang.String", "org.apache.cassandra.db.marshal.UserType.toString(boolean)"], ["org.apache.cassandra.db.marshal.AbstractType", "org.apache.cassandra.db.marshal.UserType.freeze()"], ["org.apache.cassandra.db.monitoring.ApproximateTime", "org.apache.cassandra.db.monitoring.ApproximateTime()"], ["long", "org.apache.cassandra.db.monitoring.ApproximateTime.currentTimeMillis()"], ["long", "org.apache.cassandra.db.monitoring.ApproximateTime.precision()"], ["void", "org.apache.cassandra.db.monitoring.MonitorableImpl.setMonitoringTime(long, boolean, long, long)"], ["long", "org.apache.cassandra.db.monitoring.MonitorableImpl.constructionTime()"], ["long", "org.apache.cassandra.db.monitoring.MonitorableImpl.timeout()"], ["boolean", "org.apache.cassandra.db.monitoring.MonitorableImpl.isCrossNode()"], ["long", "org.apache.cassandra.db.monitoring.MonitorableImpl.slowTimeout()"], ["boolean", "org.apache.cassandra.db.monitoring.MonitorableImpl.isInProgress()"], ["boolean", "org.apache.cassandra.db.monitoring.MonitorableImpl.isAborted()"], ["boolean", "org.apache.cassandra.db.monitoring.MonitorableImpl.isCompleted()"], ["boolean", "org.apache.cassandra.db.monitoring.MonitorableImpl.isSlow()"], ["boolean", "org.apache.cassandra.db.monitoring.MonitorableImpl.abort()"], ["boolean", "org.apache.cassandra.db.monitoring.MonitorableImpl.complete()"], ["org.apache.cassandra.db.monitoring.MonitoringState[]", "org.apache.cassandra.db.monitoring.MonitoringState.values()"], ["org.apache.cassandra.db.monitoring.MonitoringState", "org.apache.cassandra.db.monitoring.MonitoringState.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations.isEmpty()"], ["long", "org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations.num()"], ["java.lang.String", "org.apache.cassandra.db.monitoring.MonitoringTask$FailedOperation.getLogMessage()"], ["java.lang.String", "org.apache.cassandra.db.monitoring.MonitoringTask$Operation.name()"], ["java.lang.String", "org.apache.cassandra.db.monitoring.MonitoringTask$SlowOperation.getLogMessage()"], ["void", "org.apache.cassandra.db.monitoring.MonitoringTask.cancel()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.partitions.AbstractBTreePartition$1.next(org.apache.cassandra.db.Clustering)"], ["java.lang.Object", "org.apache.cassandra.db.partitions.AbstractBTreePartition$1.next(java.lang.Object)"], ["org.apache.cassandra.db.DeletionInfo", "org.apache.cassandra.db.partitions.AbstractBTreePartition.deletionInfo()"], ["staticRow()", "org.apache.cassandra.db.partitions.AbstractBTreePartition."], ["boolean", "org.apache.cassandra.db.partitions.AbstractBTreePartition.isEmpty()"], ["boolean", "org.apache.cassandra.db.partitions.AbstractBTreePartition.hasRows()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.partitions.AbstractBTreePartition.metadata()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.partitions.AbstractBTreePartition.partitionKey()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.partitions.AbstractBTreePartition.partitionLevelDeletion()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.partitions.AbstractBTreePartition.columns()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.partitions.AbstractBTreePartition.stats()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.partitions.AbstractBTreePartition.getRow(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.utils.SearchIterator<org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row>", "org.apache.cassandra.db.partitions.AbstractBTreePartition.searchIterator(org.apache.cassandra.db.filter.ColumnFilter, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.Slices, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.Slices, boolean)"], ["java.lang.String", "org.apache.cassandra.db.partitions.AbstractBTreePartition.toString()"], ["int", "org.apache.cassandra.db.partitions.AbstractBTreePartition.rowCount()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.partitions.AbstractBTreePartition.lastRow()"], ["org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator", "org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator()"], ["void", "org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator.remove()"], ["void", "org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator.close()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.partitions.AtomicBTreePartition$RowUpdater.apply(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.partitions.AtomicBTreePartition$RowUpdater.apply(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.db.partitions.AtomicBTreePartition$RowUpdater.abortEarly()"], ["void", "org.apache.cassandra.db.partitions.AtomicBTreePartition$RowUpdater.allocated(long)"], ["java.lang.Object", "org.apache.cassandra.db.partitions.AtomicBTreePartition$RowUpdater.apply(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.partitions.AtomicBTreePartition$RowUpdater.apply(java.lang.Object)"], ["org.apache.cassandra.db.partitions.AtomicBTreePartition", "org.apache.cassandra.db.partitions.AtomicBTreePartition(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.utils.memory.MemtableAllocator)"], ["long[]", "org.apache.cassandra.db.partitions.AtomicBTreePartition.addAllWithSizeDelta(org.apache.cassandra.db.partitions.PartitionUpdate, org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.index.transactions.UpdateTransaction)"], ["org.apache.cassandra.db.DeletionInfo", "org.apache.cassandra.db.partitions.AtomicBTreePartition.deletionInfo()"], ["staticRow()", "org.apache.cassandra.db.partitions.AtomicBTreePartition."], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.partitions.AtomicBTreePartition.partitionKey()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.partitions.AtomicBTreePartition.getRow(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.partitions.AtomicBTreePartition.lastRow()"], ["org.apache.cassandra.utils.SearchIterator<org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row>", "org.apache.cassandra.db.partitions.AtomicBTreePartition.searchIterator(org.apache.cassandra.db.filter.ColumnFilter, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.AtomicBTreePartition.unfilteredIterator(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.Slices, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.AtomicBTreePartition.unfilteredIterator()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.AtomicBTreePartition.unfilteredIterator(org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.Slices, boolean)"], ["boolean", "org.apache.cassandra.db.partitions.AtomicBTreePartition.usePessimisticLocking()"], ["void", "org.apache.cassandra.db.partitions.CachedBTreePartition$Serializer.serialize(org.apache.cassandra.db.partitions.CachedPartition, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.partitions.CachedPartition", "org.apache.cassandra.db.partitions.CachedBTreePartition$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.db.partitions.CachedBTreePartition$Serializer.serializedSize(org.apache.cassandra.db.partitions.CachedPartition)"], ["long", "org.apache.cassandra.db.partitions.CachedBTreePartition$Serializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.db.partitions.CachedBTreePartition$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.partitions.CachedBTreePartition$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.db.partitions.CachedBTreePartition", "org.apache.cassandra.db.partitions.CachedBTreePartition.create(org.apache.cassandra.db.rows.UnfilteredRowIterator, int)"], ["org.apache.cassandra.db.partitions.CachedBTreePartition", "org.apache.cassandra.db.partitions.CachedBTreePartition.create(org.apache.cassandra.db.rows.UnfilteredRowIterator, int, int)"], ["int", "org.apache.cassandra.db.partitions.CachedBTreePartition.cachedLiveRows()"], ["int", "org.apache.cassandra.db.partitions.CachedBTreePartition.rowsWithNonExpiringCells()"], ["int", "org.apache.cassandra.db.partitions.CachedBTreePartition.nonTombstoneCellCount()"], ["int", "org.apache.cassandra.db.partitions.CachedBTreePartition.nonExpiringLiveCells()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.partitions.FilteredPartition$1.metadata()"], ["boolean", "org.apache.cassandra.db.partitions.FilteredPartition$1.isReverseOrder()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.partitions.FilteredPartition$1.columns()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.partitions.FilteredPartition$1.partitionKey()"], ["staticRow()", "org.apache.cassandra.db.partitions.FilteredPartition$1."], ["void", "org.apache.cassandra.db.partitions.FilteredPartition$1.close()"], ["boolean", "org.apache.cassandra.db.partitions.FilteredPartition$1.hasNext()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.partitions.FilteredPartition$1.next()"], ["boolean", "org.apache.cassandra.db.partitions.FilteredPartition$1.isEmpty()"], ["java.lang.Object", "org.apache.cassandra.db.partitions.FilteredPartition$1.next()"], ["org.apache.cassandra.db.partitions.FilteredPartition", "org.apache.cassandra.db.partitions.FilteredPartition(org.apache.cassandra.db.rows.RowIterator)"], ["org.apache.cassandra.db.partitions.FilteredPartition", "org.apache.cassandra.db.partitions.FilteredPartition.create(org.apache.cassandra.db.rows.RowIterator)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.partitions.FilteredPartition.rowIterator()"], ["org.apache.cassandra.db.partitions.ImmutableBTreePartition", "org.apache.cassandra.db.partitions.ImmutableBTreePartition(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.PartitionColumns, org.apache.cassandra.db.rows.Row, java.lang.Object[], org.apache.cassandra.db.DeletionInfo, org.apache.cassandra.db.rows.EncodingStats)"], ["org.apache.cassandra.db.partitions.ImmutableBTreePartition", "org.apache.cassandra.db.partitions.ImmutableBTreePartition.create(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.partitions.ImmutableBTreePartition", "org.apache.cassandra.db.partitions.ImmutableBTreePartition.create(org.apache.cassandra.db.rows.UnfilteredRowIterator, boolean)"], ["org.apache.cassandra.db.partitions.ImmutableBTreePartition", "org.apache.cassandra.db.partitions.ImmutableBTreePartition.create(org.apache.cassandra.db.rows.UnfilteredRowIterator, int)"], ["org.apache.cassandra.db.partitions.ImmutableBTreePartition", "org.apache.cassandra.db.partitions.ImmutableBTreePartition.create(org.apache.cassandra.db.rows.UnfilteredRowIterator, int, boolean)"], ["void", "org.apache.cassandra.db.partitions.PartitionIterators$1Close.onPartitionClose()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.partitions.PartitionIterators$1Extend.moreContents()"], ["java.lang.Object", "org.apache.cassandra.db.partitions.PartitionIterators$1Extend.moreContents()"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.partitions.PartitionIterators$1Logger.applyToPartition(org.apache.cassandra.db.rows.RowIterator)"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.db.partitions.PartitionIterators$1Logger.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["void", "org.apache.cassandra.db.partitions.PartitionIterators$SingletonPartitionIterator.close()"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.partitions.PartitionIterators.getOnlyElement(org.apache.cassandra.db.partitions.PartitionIterator, org.apache.cassandra.db.SinglePartitionReadCommand)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.partitions.PartitionIterators.concat(java.util.List<org.apache.cassandra.db.partitions.PartitionIterator>)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.partitions.PartitionIterators.singletonIterator(org.apache.cassandra.db.rows.RowIterator)"], ["void", "org.apache.cassandra.db.partitions.PartitionIterators.consume(org.apache.cassandra.db.partitions.PartitionIterator)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.partitions.PartitionIterators.loggingIterator(org.apache.cassandra.db.partitions.PartitionIterator, java.lang.String)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark.clustering()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark.column()"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark.path()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark.value()"], ["void", "org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark.setValue(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer", "org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer()"], ["void", "org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer.serialize(org.apache.cassandra.db.partitions.PartitionUpdate, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.rows.SerializationHelper$Flag, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.rows.SerializationHelper$Flag, org.apache.cassandra.db.DecoratedKey)"], ["long", "org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer.serializedSize(org.apache.cassandra.db.partitions.PartitionUpdate, int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.PartitionColumns, int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.db.PartitionColumns, int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.emptyUpdate(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.fullPartitionDelete(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, long, int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.singleRowUpdate(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.singleRowUpdate(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.singleRowUpdate(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.fromIterator(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.filter.ColumnFilter)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.fromIterator(org.apache.cassandra.db.rows.RowIterator, org.apache.cassandra.db.filter.ColumnFilter)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.fromBytes(java.nio.ByteBuffer, int, org.apache.cassandra.db.DecoratedKey)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.partitions.PartitionUpdate.toBytes(org.apache.cassandra.db.partitions.PartitionUpdate, int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.fullPartitionDelete(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, long, int)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.db.partitions.PartitionUpdate.merge(java.util.List<org.apache.cassandra.db.partitions.PartitionUpdate>)"], ["org.apache.cassandra.db.DeletionInfo", "org.apache.cassandra.db.partitions.PartitionUpdate.deletionInfo()"], ["void", "org.apache.cassandra.db.partitions.PartitionUpdate.updateAllTimestamp(long)"], ["int", "org.apache.cassandra.db.partitions.PartitionUpdate.operationCount()"], ["int", "org.apache.cassandra.db.partitions.PartitionUpdate.dataSize()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.partitions.PartitionUpdate.columns()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.partitions.PartitionUpdate.stats()"], ["synchronized", "org.apache.cassandra.db.partitions.PartitionUpdate.void allowNewUpdates()"], ["void", "org.apache.cassandra.db.partitions.PartitionUpdate.validate()"], ["long", "org.apache.cassandra.db.partitions.PartitionUpdate.maxTimestamp()"], ["void", "org.apache.cassandra.db.partitions.PartitionUpdate.addPartitionDeletion(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.partitions.PartitionUpdate.add(org.apache.cassandra.db.RangeTombstone)"], ["void", "org.apache.cassandra.db.partitions.PartitionUpdate.add(org.apache.cassandra.db.rows.Row)"], ["java.lang.String", "org.apache.cassandra.db.partitions.PartitionUpdate.toString()"], ["org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder", "org.apache.cassandra.db.partitions.PartitionUpdate.simpleBuilder(org.apache.cassandra.config.CFMetaData, java.lang.Object...)"], ["org.apache.cassandra.db.partitions.PurgeFunction", "org.apache.cassandra.db.partitions.PurgeFunction(boolean, int, int, int, boolean, boolean)"], ["org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator", "org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator(org.apache.cassandra.db.rows.UnfilteredRowIterator, boolean)"], ["boolean", "org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.metadata()"], ["boolean", "org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.next()"], ["void", "org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.remove()"], ["void", "org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.close()"], ["java.lang.Object", "org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.next()"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1.reduce(int, org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1.reduce(int, java.lang.Object)"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Close.onPartitionClose()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Extend.moreContents()"], ["java.lang.Object", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Extend.moreContents()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Logging.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Logging.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["boolean", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2.metadata()"], ["boolean", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2.next()"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2.close()"], ["java.lang.Object", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2.next()"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3.reduce(int, org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3.reduce(int, java.lang.Object)"], ["boolean", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4.metadata()"], ["boolean", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4.next()"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4.close()"], ["java.lang.Object", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4.next()"], ["boolean", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1.metadata()"], ["boolean", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1.next()"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1.close()"], ["java.lang.Object", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1.next()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer()"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer.serialize(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.rows.SerializationHelper$Flag)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.getOnlyElement(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.SinglePartitionReadCommand)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.concat(java.util.List<org.apache.cassandra.db.partitions.UnfilteredPartitionIterator>)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, int)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.merge(java.util.List<? extends org.apache.cassandra.db.partitions.UnfilteredPartitionIterator>, int, org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$MergeListener)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.mergeLazily(java.util.List<? extends org.apache.cassandra.db.partitions.UnfilteredPartitionIterator>, int)"], ["void", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.digest(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, java.security.MessageDigest, int)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.serializerForIntraNode()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.loggingIterator(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, java.lang.String, boolean)"], ["boolean", "org.apache.cassandra.db.rows.AbstractCell.isCounterCell()"], ["boolean", "org.apache.cassandra.db.rows.AbstractCell.isLive(int)"], ["boolean", "org.apache.cassandra.db.rows.AbstractCell.isTombstone()"], ["boolean", "org.apache.cassandra.db.rows.AbstractCell.isExpiring()"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.AbstractCell.markCounterLocalToBeCleared()"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.AbstractCell.purge(org.apache.cassandra.db.DeletionPurger, int)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.AbstractCell.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.AbstractCell.updateAllTimestamp(long)"], ["int", "org.apache.cassandra.db.rows.AbstractCell.dataSize()"], ["void", "org.apache.cassandra.db.rows.AbstractCell.digest(java.security.MessageDigest)"], ["void", "org.apache.cassandra.db.rows.AbstractCell.validate()"], ["long", "org.apache.cassandra.db.rows.AbstractCell.maxTimestamp()"], ["boolean", "org.apache.cassandra.db.rows.AbstractCell.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.rows.AbstractCell.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.rows.AbstractCell.toString()"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.AbstractCell.purge(org.apache.cassandra.db.DeletionPurger, int)"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.AbstractCell.markCounterLocalToBeCleared()"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.AbstractCell.updateAllTimestamp(long)"], ["B", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.clustering()"], ["org.apache.cassandra.db.rows.Unfiltered$Kind", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.kind()"], ["boolean", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isBoundary()"], ["boolean", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isOpen(boolean)"], ["boolean", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isClose(boolean)"], ["void", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.validateData(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.toString(org.apache.cassandra.config.CFMetaData, boolean)"], ["java.lang.String", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.toString(org.apache.cassandra.config.CFMetaData, boolean, boolean)"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.clustering()"], ["org.apache.cassandra.db.rows.AbstractRow", "org.apache.cassandra.db.rows.AbstractRow()"], ["org.apache.cassandra.db.rows.Unfiltered$Kind", "org.apache.cassandra.db.rows.AbstractRow.kind()"], ["boolean", "org.apache.cassandra.db.rows.AbstractRow.hasLiveData(int, boolean)"], ["boolean", "org.apache.cassandra.db.rows.AbstractRow.isStatic()"], ["void", "org.apache.cassandra.db.rows.AbstractRow.digest(java.security.MessageDigest)"], ["void", "org.apache.cassandra.db.rows.AbstractRow.digest(java.security.MessageDigest, java.util.Set<java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.db.rows.AbstractRow.validateData(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.rows.AbstractRow.toString()"], ["java.lang.String", "org.apache.cassandra.db.rows.AbstractRow.toString(org.apache.cassandra.config.CFMetaData)"], ["java.lang.String", "org.apache.cassandra.db.rows.AbstractRow.toString(org.apache.cassandra.config.CFMetaData, boolean)"], ["java.lang.String", "org.apache.cassandra.db.rows.AbstractRow.toString(org.apache.cassandra.config.CFMetaData, boolean, boolean)"], ["boolean", "org.apache.cassandra.db.rows.AbstractRow.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.rows.AbstractRow.hashCode()"], ["int", "org.apache.cassandra.db.rows.AbstractTypeVersionComparator.compare(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.db.rows.AbstractTypeVersionComparator.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.metadata()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.columns()"], ["boolean", "org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.isReverseOrder()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.partitionKey()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.partitionLevelDeletion()"], ["staticRow()", "org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator."], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.stats()"], ["void", "org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.close()"], ["int", "org.apache.cassandra.db.rows.BTreeRow$1.size()"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.BTreeRow$Builder$CellResolver.resolve(java.lang.Object[], int, int)"], ["java.lang.Object", "org.apache.cassandra.db.rows.BTreeRow$Builder$CellResolver.resolve(java.lang.Object[], int, int)"], ["org.apache.cassandra.db.rows.BTreeRow$Builder$ComplexColumnDeletion", "org.apache.cassandra.db.rows.BTreeRow$Builder$ComplexColumnDeletion(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.BTreeRow$Builder", "org.apache.cassandra.db.rows.BTreeRow$Builder.copy()"], ["boolean", "org.apache.cassandra.db.rows.BTreeRow$Builder.isSorted()"], ["void", "org.apache.cassandra.db.rows.BTreeRow$Builder.newRow(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.rows.BTreeRow$Builder.clustering()"], ["void", "org.apache.cassandra.db.rows.BTreeRow$Builder.addPrimaryKeyLivenessInfo(org.apache.cassandra.db.LivenessInfo)"], ["void", "org.apache.cassandra.db.rows.BTreeRow$Builder.addRowDeletion(org.apache.cassandra.db.rows.Row$Deletion)"], ["void", "org.apache.cassandra.db.rows.BTreeRow$Builder.addCell(org.apache.cassandra.db.rows.Cell)"], ["void", "org.apache.cassandra.db.rows.BTreeRow$Builder.addComplexDeletion(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.BTreeRow$Builder.build()"], ["org.apache.cassandra.db.rows.Row$Builder", "org.apache.cassandra.db.rows.BTreeRow$Builder.copy()"], ["org.apache.cassandra.db.rows.BTreeRow", "org.apache.cassandra.db.rows.BTreeRow.create(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.rows.Row$Deletion, java.lang.Object[])"], ["org.apache.cassandra.db.rows.BTreeRow", "org.apache.cassandra.db.rows.BTreeRow.create(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.rows.Row$Deletion, java.lang.Object[], int)"], ["org.apache.cassandra.db.rows.BTreeRow", "org.apache.cassandra.db.rows.BTreeRow.emptyRow(org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.db.rows.BTreeRow", "org.apache.cassandra.db.rows.BTreeRow.singleCellRow(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Cell)"], ["org.apache.cassandra.db.rows.BTreeRow", "org.apache.cassandra.db.rows.BTreeRow.emptyDeletedRow(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row$Deletion)"], ["org.apache.cassandra.db.rows.BTreeRow", "org.apache.cassandra.db.rows.BTreeRow.noCellLiveRow(org.apache.cassandra.db.Clustering, org.apache.cassandra.db.LivenessInfo)"], ["void", "org.apache.cassandra.db.rows.BTreeRow.apply(java.util.function.Consumer<org.apache.cassandra.db.rows.ColumnData>, boolean)"], ["void", "org.apache.cassandra.db.rows.BTreeRow.apply(java.util.function.Consumer<org.apache.cassandra.db.rows.ColumnData>, com.google.common.base.Predicate<org.apache.cassandra.db.rows.ColumnData>, boolean)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.rows.BTreeRow.clustering()"], ["int", "org.apache.cassandra.db.rows.BTreeRow.columnCount()"], ["org.apache.cassandra.db.LivenessInfo", "org.apache.cassandra.db.rows.BTreeRow.primaryKeyLivenessInfo()"], ["boolean", "org.apache.cassandra.db.rows.BTreeRow.isEmpty()"], ["org.apache.cassandra.db.rows.Row$Deletion", "org.apache.cassandra.db.rows.BTreeRow.deletion()"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.BTreeRow.getCell(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.BTreeRow.getCell(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.rows.ComplexColumnData", "org.apache.cassandra.db.rows.BTreeRow.getComplexColumnData(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.utils.btree.BTreeSearchIterator<org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.ColumnData>", "org.apache.cassandra.db.rows.BTreeRow.searchIterator()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.BTreeRow.filter(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.BTreeRow.filter(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.DeletionTime, boolean, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.BTreeRow.withOnlyQueriedData(org.apache.cassandra.db.filter.ColumnFilter)"], ["boolean", "org.apache.cassandra.db.rows.BTreeRow.hasComplex()"], ["boolean", "org.apache.cassandra.db.rows.BTreeRow.hasComplexDeletion()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.BTreeRow.markCounterLocalToBeCleared()"], ["boolean", "org.apache.cassandra.db.rows.BTreeRow.hasDeletion(int)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.BTreeRow.updateAllTimestamp(long)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.BTreeRow.withRowDeletion(org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.BTreeRow.purge(org.apache.cassandra.db.DeletionPurger, int, boolean)"], ["int", "org.apache.cassandra.db.rows.BTreeRow.dataSize()"], ["long", "org.apache.cassandra.db.rows.BTreeRow.unsharedHeapSizeExcludingData()"], ["org.apache.cassandra.db.rows.Row$Builder", "org.apache.cassandra.db.rows.BTreeRow.sortedBuilder()"], ["org.apache.cassandra.db.rows.Row$Builder", "org.apache.cassandra.db.rows.BTreeRow.unsortedBuilder(int)"], ["void", "org.apache.cassandra.db.rows.BTreeRow.setValue(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.CellPath, java.nio.ByteBuffer)"], ["org.apache.cassandra.utils.SearchIterator", "org.apache.cassandra.db.rows.BTreeRow.searchIterator()"], ["org.apache.cassandra.db.ClusteringPrefix", "org.apache.cassandra.db.rows.BTreeRow.clustering()"], ["org.apache.cassandra.db.rows.BufferCell", "org.apache.cassandra.db.rows.BufferCell(org.apache.cassandra.config.ColumnDefinition, long, int, int, java.nio.ByteBuffer, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.rows.BufferCell", "org.apache.cassandra.db.rows.BufferCell.live(org.apache.cassandra.config.ColumnDefinition, long, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.rows.BufferCell", "org.apache.cassandra.db.rows.BufferCell.live(org.apache.cassandra.config.ColumnDefinition, long, java.nio.ByteBuffer, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.rows.BufferCell", "org.apache.cassandra.db.rows.BufferCell.expiring(org.apache.cassandra.config.ColumnDefinition, long, int, int, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.rows.BufferCell", "org.apache.cassandra.db.rows.BufferCell.expiring(org.apache.cassandra.config.ColumnDefinition, long, int, int, java.nio.ByteBuffer, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.rows.BufferCell", "org.apache.cassandra.db.rows.BufferCell.tombstone(org.apache.cassandra.config.ColumnDefinition, long, int)"], ["org.apache.cassandra.db.rows.BufferCell", "org.apache.cassandra.db.rows.BufferCell.tombstone(org.apache.cassandra.config.ColumnDefinition, long, int, org.apache.cassandra.db.rows.CellPath)"], ["long", "org.apache.cassandra.db.rows.BufferCell.timestamp()"], ["int", "org.apache.cassandra.db.rows.BufferCell.ttl()"], ["int", "org.apache.cassandra.db.rows.BufferCell.localDeletionTime()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.rows.BufferCell.value()"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.rows.BufferCell.path()"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.BufferCell.withUpdatedColumn(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.BufferCell.withUpdatedValue(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.BufferCell.withUpdatedTimestampAndLocalDeletionTime(long, int)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.BufferCell.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["long", "org.apache.cassandra.db.rows.BufferCell.unsharedHeapSizeExcludingData()"], ["void", "org.apache.cassandra.db.rows.Cell$Serializer.serialize(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.Cell$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper)"], ["long", "org.apache.cassandra.db.rows.Cell$Serializer.serializedSize(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.SerializationHeader)"], ["boolean", "org.apache.cassandra.db.rows.Cell$Serializer.skip(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.Cell.purge(org.apache.cassandra.db.DeletionPurger, int)"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.Cell.markCounterLocalToBeCleared()"], ["int", "org.apache.cassandra.db.rows.CellPath$EmptyCellPath.size()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.rows.CellPath$EmptyCellPath.get(int)"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.rows.CellPath$EmptyCellPath.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["long", "org.apache.cassandra.db.rows.CellPath$EmptyCellPath.unsharedHeapSizeExcludingData()"], ["int", "org.apache.cassandra.db.rows.CellPath$SingleItemCellPath.size()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.rows.CellPath$SingleItemCellPath.get(int)"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.rows.CellPath$SingleItemCellPath.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["long", "org.apache.cassandra.db.rows.CellPath$SingleItemCellPath.unsharedHeapSizeExcludingData()"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.rows.CellPath()"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.rows.CellPath.create(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.db.rows.CellPath.dataSize()"], ["void", "org.apache.cassandra.db.rows.CellPath.digest(java.security.MessageDigest)"], ["int", "org.apache.cassandra.db.rows.CellPath.hashCode()"], ["boolean", "org.apache.cassandra.db.rows.CellPath.equals(java.lang.Object)"], ["void", "org.apache.cassandra.db.rows.Cells.collectStats(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.partitions.PartitionStatisticsCollector)"], ["long", "org.apache.cassandra.db.rows.Cells.reconcile(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.rows.Row$Builder, int)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.Cells.reconcile(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.rows.Cell, int)"], ["long", "org.apache.cassandra.db.rows.Cells.reconcileComplex(org.apache.cassandra.config.ColumnDefinition, java.util.Iterator<org.apache.cassandra.db.rows.Cell>, java.util.Iterator<org.apache.cassandra.db.rows.Cell>, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.rows.Row$Builder, int)"], ["void", "org.apache.cassandra.db.rows.Cells.addNonShadowed(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.rows.Row$Builder, int)"], ["void", "org.apache.cassandra.db.rows.Cells.addNonShadowedComplex(org.apache.cassandra.config.ColumnDefinition, java.util.Iterator<org.apache.cassandra.db.rows.Cell>, java.util.Iterator<org.apache.cassandra.db.rows.Cell>, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.rows.Row$Builder, int)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.rows.ColumnData.column()"], ["org.apache.cassandra.db.rows.ComplexColumnData$Builder", "org.apache.cassandra.db.rows.ComplexColumnData$Builder()"], ["void", "org.apache.cassandra.db.rows.ComplexColumnData$Builder.newColumn(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.db.rows.ComplexColumnData$Builder.addComplexDeletion(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.rows.ComplexColumnData$Builder.addCell(org.apache.cassandra.db.rows.Cell)"], ["org.apache.cassandra.db.rows.ComplexColumnData", "org.apache.cassandra.db.rows.ComplexColumnData$Builder.build()"], ["boolean", "org.apache.cassandra.db.rows.ComplexColumnData.hasCells()"], ["int", "org.apache.cassandra.db.rows.ComplexColumnData.cellsCount()"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.ComplexColumnData.getCell(org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.ComplexColumnData.getCellByIndex(int)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.ComplexColumnData.complexDeletion()"], ["int", "org.apache.cassandra.db.rows.ComplexColumnData.dataSize()"], ["long", "org.apache.cassandra.db.rows.ComplexColumnData.unsharedHeapSizeExcludingData()"], ["void", "org.apache.cassandra.db.rows.ComplexColumnData.validate()"], ["void", "org.apache.cassandra.db.rows.ComplexColumnData.digest(java.security.MessageDigest)"], ["org.apache.cassandra.db.rows.ComplexColumnData", "org.apache.cassandra.db.rows.ComplexColumnData.markCounterLocalToBeCleared()"], ["org.apache.cassandra.db.rows.ComplexColumnData", "org.apache.cassandra.db.rows.ComplexColumnData.filter(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.config.CFMetaData$DroppedColumn, org.apache.cassandra.db.LivenessInfo)"], ["org.apache.cassandra.db.rows.ComplexColumnData", "org.apache.cassandra.db.rows.ComplexColumnData.purge(org.apache.cassandra.db.DeletionPurger, int)"], ["org.apache.cassandra.db.rows.ComplexColumnData", "org.apache.cassandra.db.rows.ComplexColumnData.withOnlyQueriedData(org.apache.cassandra.db.filter.ColumnFilter)"], ["org.apache.cassandra.db.rows.ComplexColumnData", "org.apache.cassandra.db.rows.ComplexColumnData.updateAllTimestamp(long)"], ["long", "org.apache.cassandra.db.rows.ComplexColumnData.maxTimestamp()"], ["boolean", "org.apache.cassandra.db.rows.ComplexColumnData.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.rows.ComplexColumnData.hashCode()"], ["org.apache.cassandra.db.rows.ComplexColumnData$Builder", "org.apache.cassandra.db.rows.ComplexColumnData.builder()"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.ComplexColumnData.purge(org.apache.cassandra.db.DeletionPurger, int)"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.ComplexColumnData.markCounterLocalToBeCleared()"], ["org.apache.cassandra.db.rows.ColumnData", "org.apache.cassandra.db.rows.ComplexColumnData.updateAllTimestamp(long)"], ["boolean", "org.apache.cassandra.db.rows.CounterCells.hasLegacyShards(org.apache.cassandra.db.rows.Cell)"], ["org.apache.cassandra.db.rows.EncodingStats$Collector", "org.apache.cassandra.db.rows.EncodingStats$Collector()"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Collector.update(org.apache.cassandra.db.LivenessInfo)"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Collector.update(org.apache.cassandra.db.rows.Cell)"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Collector.update(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Collector.updateTimestamp(long)"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Collector.updateLocalDeletionTime(int)"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Collector.updateTTL(int)"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Collector.updateColumnSetPerRow(long)"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Collector.updateHasLegacyCounterShards(boolean)"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.EncodingStats$Collector.get()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.EncodingStats$Collector.collect(org.apache.cassandra.db.rows.Row, java.util.Iterator<org.apache.cassandra.db.rows.Row>, org.apache.cassandra.db.DeletionInfo)"], ["org.apache.cassandra.db.rows.EncodingStats$Serializer", "org.apache.cassandra.db.rows.EncodingStats$Serializer()"], ["void", "org.apache.cassandra.db.rows.EncodingStats$Serializer.serialize(org.apache.cassandra.db.rows.EncodingStats, org.apache.cassandra.io.util.DataOutputPlus)"], ["int", "org.apache.cassandra.db.rows.EncodingStats$Serializer.serializedSize(org.apache.cassandra.db.rows.EncodingStats)"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.EncodingStats$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.EncodingStats(long, int, int)"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.EncodingStats.mergeWith(org.apache.cassandra.db.rows.EncodingStats)"], ["boolean", "org.apache.cassandra.db.rows.EncodingStats.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.rows.EncodingStats.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.rows.EncodingStats.toString()"], ["org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator(org.apache.cassandra.db.DecoratedKey)"], ["boolean", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.initialized()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.metadata()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.columns()"], ["boolean", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.isReverseOrder()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.partitionKey()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.partitionLevelDeletion()"], ["staticRow()", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator."], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.stats()"], ["void", "org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.close()"], ["org.apache.cassandra.db.rows.NativeCell", "org.apache.cassandra.db.rows.NativeCell(org.apache.cassandra.utils.memory.NativeAllocator, org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.db.rows.Cell)"], ["org.apache.cassandra.db.rows.NativeCell", "org.apache.cassandra.db.rows.NativeCell(org.apache.cassandra.utils.memory.NativeAllocator, org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.config.ColumnDefinition, long, int, int, java.nio.ByteBuffer, org.apache.cassandra.db.rows.CellPath)"], ["long", "org.apache.cassandra.db.rows.NativeCell.timestamp()"], ["int", "org.apache.cassandra.db.rows.NativeCell.ttl()"], ["int", "org.apache.cassandra.db.rows.NativeCell.localDeletionTime()"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.rows.NativeCell.value()"], ["org.apache.cassandra.db.rows.CellPath", "org.apache.cassandra.db.rows.NativeCell.path()"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.NativeCell.withUpdatedValue(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.NativeCell.withUpdatedTimestampAndLocalDeletionTime(long, int)"], ["org.apache.cassandra.db.rows.Cell", "org.apache.cassandra.db.rows.NativeCell.withUpdatedColumn(org.apache.cassandra.config.ColumnDefinition)"], ["long", "org.apache.cassandra.db.rows.NativeCell.unsharedHeapSizeExcludingData()"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker(org.apache.cassandra.db.ClusteringBound, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.inclusiveOpen(boolean, java.nio.ByteBuffer[], org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.exclusiveOpen(boolean, java.nio.ByteBuffer[], org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.inclusiveClose(boolean, java.nio.ByteBuffer[], org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.exclusiveClose(boolean, java.nio.ByteBuffer[], org.apache.cassandra.db.DeletionTime)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.isBoundary()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.deletionTime()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openDeletionTime(boolean)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeDeletionTime(boolean)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openIsInclusive(boolean)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeIsInclusive(boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openBound(boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeBound(boolean)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.withNewOpeningDeletionTime(boolean, org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.digest(java.security.MessageDigest)"], ["void", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.digest(java.security.MessageDigest, java.util.Set<java.nio.ByteBuffer>)"], ["java.lang.String", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.toString(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.hashCode()"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.withNewOpeningDeletionTime(boolean, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker(org.apache.cassandra.db.ClusteringBoundary, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.exclusiveCloseInclusiveOpen(boolean, java.nio.ByteBuffer[], org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.inclusiveCloseExclusiveOpen(boolean, java.nio.ByteBuffer[], org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.endDeletionTime()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.startDeletionTime()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeDeletionTime(boolean)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openDeletionTime(boolean)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openIsInclusive(boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openBound(boolean)"], ["org.apache.cassandra.db.ClusteringBound", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeBound(boolean)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeIsInclusive(boolean)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.isOpen(boolean)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.isClose(boolean)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.withNewOpeningDeletionTime(boolean, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.makeBoundary(boolean, org.apache.cassandra.db.ClusteringBound, org.apache.cassandra.db.ClusteringBound, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.createCorrespondingCloseMarker(boolean)"], ["org.apache.cassandra.db.rows.RangeTombstoneBoundMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.createCorrespondingOpenMarker(boolean)"], ["void", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.digest(java.security.MessageDigest)"], ["void", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.digest(java.security.MessageDigest, java.util.Set<java.nio.ByteBuffer>)"], ["java.lang.String", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.toString(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.hashCode()"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.withNewOpeningDeletionTime(boolean, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.copy(org.apache.cassandra.utils.memory.AbstractAllocator)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger", "org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger(int, org.apache.cassandra.db.DeletionTime, boolean)"], ["void", "org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger.clear()"], ["void", "org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger.add(int, org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger.merge()"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker[]", "org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger.mergedMarkers()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger.activeDeletion()"], ["default", "org.apache.cassandra.db.rows.RangeTombstoneMarker.boolean isEmpty()"], ["default", "org.apache.cassandra.db.rows.RangeTombstoneMarker.org.apache.cassandra.db.ClusteringPrefix clustering()"], ["org.apache.cassandra.db.rows.Row$Deletion", "org.apache.cassandra.db.rows.Row$Deletion(org.apache.cassandra.db.DeletionTime, boolean)"], ["org.apache.cassandra.db.rows.Row$Deletion", "org.apache.cassandra.db.rows.Row$Deletion.regular(org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.rows.Row$Deletion", "org.apache.cassandra.db.rows.Row$Deletion.shadowable(org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.Row$Deletion.time()"], ["boolean", "org.apache.cassandra.db.rows.Row$Deletion.isShadowable()"], ["boolean", "org.apache.cassandra.db.rows.Row$Deletion.isLive()"], ["boolean", "org.apache.cassandra.db.rows.Row$Deletion.supersedes(org.apache.cassandra.db.DeletionTime)"], ["boolean", "org.apache.cassandra.db.rows.Row$Deletion.supersedes(org.apache.cassandra.db.rows.Row$Deletion)"], ["boolean", "org.apache.cassandra.db.rows.Row$Deletion.isShadowedBy(org.apache.cassandra.db.LivenessInfo)"], ["boolean", "org.apache.cassandra.db.rows.Row$Deletion.deletes(org.apache.cassandra.db.LivenessInfo)"], ["boolean", "org.apache.cassandra.db.rows.Row$Deletion.deletes(org.apache.cassandra.db.rows.Cell)"], ["void", "org.apache.cassandra.db.rows.Row$Deletion.digest(java.security.MessageDigest)"], ["int", "org.apache.cassandra.db.rows.Row$Deletion.dataSize()"], ["boolean", "org.apache.cassandra.db.rows.Row$Deletion.equals(java.lang.Object)"], ["int", "org.apache.cassandra.db.rows.Row$Deletion.hashCode()"], ["java.lang.String", "org.apache.cassandra.db.rows.Row$Deletion.toString()"], ["org.apache.cassandra.db.rows.Row$Merger$CellReducer", "org.apache.cassandra.db.rows.Row$Merger$CellReducer(int)"], ["void", "org.apache.cassandra.db.rows.Row$Merger$CellReducer.setActiveDeletion(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.rows.Row$Merger$CellReducer.reduce(int, org.apache.cassandra.db.rows.Cell)"], ["void", "org.apache.cassandra.db.rows.Row$Merger$CellReducer.reduce(int, java.lang.Object)"], ["org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer", "org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer(int, int, boolean)"], ["void", "org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer.setActiveDeletion(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer.reduce(int, org.apache.cassandra.db.rows.ColumnData)"], ["void", "org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer.reduce(int, java.lang.Object)"], ["org.apache.cassandra.db.rows.Row$Merger", "org.apache.cassandra.db.rows.Row$Merger(int, int, boolean)"], ["void", "org.apache.cassandra.db.rows.Row$Merger.clear()"], ["void", "org.apache.cassandra.db.rows.Row$Merger.add(int, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.Row$Merger.merge(org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.db.rows.Row$Merger.mergedClustering()"], ["org.apache.cassandra.db.rows.Row[]", "org.apache.cassandra.db.rows.Row$Merger.mergedRows()"], ["default", "org.apache.cassandra.db.rows.Row.org.apache.cassandra.db.ClusteringPrefix clustering()"], ["org.apache.cassandra.db.rows.RowAndDeletionMergeIterator", "org.apache.cassandra.db.rows.RowAndDeletionMergeIterator(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.rows.Row, boolean, org.apache.cassandra.db.rows.EncodingStats, java.util.Iterator<org.apache.cassandra.db.rows.Row>, java.util.Iterator<org.apache.cassandra.db.RangeTombstone>, boolean)"], ["default", "org.apache.cassandra.db.rows.RowIterator.boolean isEmpty()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.RowIterators$1Log.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.RowIterators$1Log.applyToRow(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.db.rows.RowIterators.digest(org.apache.cassandra.db.rows.RowIterator, java.security.MessageDigest, java.security.MessageDigest, java.util.Set<java.nio.ByteBuffer>)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.rows.RowIterators.withOnlyQueriedData(org.apache.cassandra.db.rows.RowIterator, org.apache.cassandra.db.filter.ColumnFilter)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.rows.RowIterators.loggingIterator(org.apache.cassandra.db.rows.RowIterator, java.lang.String)"], ["void", "org.apache.cassandra.db.rows.Rows$1.reduce(int, org.apache.cassandra.db.rows.ColumnData)"], ["void", "org.apache.cassandra.db.rows.Rows$1.reduce(int, java.lang.Object)"], ["org.apache.cassandra.db.rows.Row$Builder", "org.apache.cassandra.db.rows.Rows.copy(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row$Builder)"], ["org.apache.cassandra.db.rows.Row$SimpleBuilder", "org.apache.cassandra.db.rows.Rows.simpleBuilder(org.apache.cassandra.config.CFMetaData, java.lang.Object...)"], ["int", "org.apache.cassandra.db.rows.Rows.collectStats(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.partitions.PartitionStatisticsCollector)"], ["void", "org.apache.cassandra.db.rows.Rows.diff(org.apache.cassandra.db.rows.RowDiffListener, org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row...)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.Rows.merge(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row, int)"], ["long", "org.apache.cassandra.db.rows.Rows.merge(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row$Builder, int)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.Rows.removeShadowedCells(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.DeletionTime, int)"], ["org.apache.cassandra.db.rows.SerializationHelper$Flag[]", "org.apache.cassandra.db.rows.SerializationHelper$Flag.values()"], ["org.apache.cassandra.db.rows.SerializationHelper$Flag", "org.apache.cassandra.db.rows.SerializationHelper$Flag.valueOf(java.lang.String)"], ["org.apache.cassandra.db.rows.SerializationHelper", "org.apache.cassandra.db.rows.SerializationHelper(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.rows.SerializationHelper$Flag, org.apache.cassandra.db.filter.ColumnFilter)"], ["org.apache.cassandra.db.rows.SerializationHelper", "org.apache.cassandra.db.rows.SerializationHelper(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.rows.SerializationHelper$Flag)"], ["boolean", "org.apache.cassandra.db.rows.SerializationHelper.includes(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.db.rows.SerializationHelper.includes(org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.LivenessInfo)"], ["boolean", "org.apache.cassandra.db.rows.SerializationHelper.includes(org.apache.cassandra.db.rows.CellPath)"], ["boolean", "org.apache.cassandra.db.rows.SerializationHelper.canSkipValue(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.db.rows.SerializationHelper.canSkipValue(org.apache.cassandra.db.rows.CellPath)"], ["void", "org.apache.cassandra.db.rows.SerializationHelper.startOfComplexColumn(org.apache.cassandra.config.ColumnDefinition)"], ["void", "org.apache.cassandra.db.rows.SerializationHelper.endOfComplexColumn()"], ["boolean", "org.apache.cassandra.db.rows.SerializationHelper.isDropped(org.apache.cassandra.db.rows.Cell, boolean)"], ["boolean", "org.apache.cassandra.db.rows.SerializationHelper.isDroppedComplexDeletion(org.apache.cassandra.db.DeletionTime)"], ["java.nio.ByteBuffer", "org.apache.cassandra.db.rows.SerializationHelper.maybeClearCounterValue(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.rows.Unfiltered$Kind[]", "org.apache.cassandra.db.rows.Unfiltered$Kind.values()"], ["org.apache.cassandra.db.rows.Unfiltered$Kind", "org.apache.cassandra.db.rows.Unfiltered$Kind.valueOf(java.lang.String)"], ["default", "org.apache.cassandra.db.rows.Unfiltered.void digest(java.security.MessageDigest, java.util.Set<java.nio.ByteBuffer>)"], ["default", "org.apache.cassandra.db.rows.Unfiltered.boolean isRow()"], ["default", "org.apache.cassandra.db.rows.Unfiltered.boolean isRangeTombstoneMarker()"], ["default", "org.apache.cassandra.db.rows.UnfilteredRowIterator.boolean isEmpty()"], ["java.lang.String", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$Header.toString()"], ["org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer()"], ["void", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["void", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.io.util.DataOutputPlus, int, int)"], ["void", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.io.util.DataOutputPlus, int, int)"], ["long", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serializedSize(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.filter.ColumnFilter, int, int)"], ["org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$Header", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserializeHeader(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.db.rows.SerializationHelper$Flag)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.rows.SerializationHelper$Flag, org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$Header)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.rows.SerializationHelper$Flag)"], ["org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.filter.ClusteringIndexFilter, org.apache.cassandra.db.filter.ColumnFilter, boolean, int, boolean, org.apache.cassandra.io.sstable.format.SSTableReadsListener)"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound.lowerBound()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound.metadata()"], ["boolean", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound.isReverseOrder()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound.columns()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound.stats()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound.partitionLevelDeletion()"], ["staticRow()", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound."], ["java.lang.Object", "org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound.lowerBound()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators$1Extend.moreContents()"], ["java.lang.Object", "org.apache.cassandra.db.rows.UnfilteredRowIterators$1Extend.moreContents()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.UnfilteredRowIterators$1Logger.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.UnfilteredRowIterators$1Logger.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.rows.UnfilteredRowIterators$1Logger.applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.UnfilteredRowIterators$1Validator.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.UnfilteredRowIterators$1Validator.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.rows.UnfilteredRowIterators$1Validator.applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["boolean", "org.apache.cassandra.db.rows.UnfilteredRowIterators$2.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.rows.UnfilteredRowIterators$2.next()"], ["java.lang.Object", "org.apache.cassandra.db.rows.UnfilteredRowIterators$2.next()"], ["boolean", "org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer.trivialReduceIsTrivial()"], ["void", "org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer.reduce(int, org.apache.cassandra.db.rows.Unfiltered)"], ["void", "org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer.reduce(int, java.lang.Object)"], ["void", "org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator.close()"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.filter(org.apache.cassandra.db.rows.UnfilteredRowIterator, int)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.merge(java.util.List<org.apache.cassandra.db.rows.UnfilteredRowIterator>, int)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.merge(java.util.List<org.apache.cassandra.db.rows.UnfilteredRowIterator>, int, org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.noRowsIterator(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.DeletionTime, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.singleton(org.apache.cassandra.db.rows.Unfiltered, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.PartitionColumns, org.apache.cassandra.db.rows.Row, boolean, org.apache.cassandra.db.rows.EncodingStats)"], ["void", "org.apache.cassandra.db.rows.UnfilteredRowIterators.digest(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.rows.UnfilteredRowIterator, java.security.MessageDigest, int)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.withOnlyQueriedData(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.filter.ColumnFilter)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.concat(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.concat(org.apache.cassandra.db.rows.Unfiltered, org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.withValidation(org.apache.cassandra.db.rows.UnfilteredRowIterator, java.lang.String)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.rows.UnfilteredRowIterators.loggingIterator(org.apache.cassandra.db.rows.UnfilteredRowIterator, java.lang.String, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredSerializer", "org.apache.cassandra.db.rows.UnfilteredSerializer()"], ["void", "org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(org.apache.cassandra.db.rows.Unfiltered, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["void", "org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(org.apache.cassandra.db.rows.Unfiltered, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.io.util.DataOutputPlus, long, int)"], ["void", "org.apache.cassandra.db.rows.UnfilteredSerializer.serializeStaticRow(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["long", "org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(org.apache.cassandra.db.rows.Unfiltered, org.apache.cassandra.db.SerializationHeader, int)"], ["long", "org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(org.apache.cassandra.db.rows.Unfiltered, org.apache.cassandra.db.SerializationHeader, long, int)"], ["void", "org.apache.cassandra.db.rows.UnfilteredSerializer.writeEndOfPartition(org.apache.cassandra.io.util.DataOutputPlus)"], ["long", "org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSizeEndOfPartition()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.rows.UnfilteredSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper, org.apache.cassandra.db.rows.Row$Builder)"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeTombstonesOnly(org.apache.cassandra.io.util.FileDataInput, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeStaticRow(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeMarkerBody(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.ClusteringBoundOrBoundary)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeRowBody(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper, int, int, org.apache.cassandra.db.rows.Row$Builder)"], ["void", "org.apache.cassandra.db.rows.UnfilteredSerializer.skipRowBody(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.db.rows.UnfilteredSerializer.skipStaticRow(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper)"], ["void", "org.apache.cassandra.db.rows.UnfilteredSerializer.skipMarkerBody(org.apache.cassandra.io.util.DataInputPlus)"], ["boolean", "org.apache.cassandra.db.rows.UnfilteredSerializer.isEndOfPartition(int)"], ["org.apache.cassandra.db.rows.Unfiltered$Kind", "org.apache.cassandra.db.rows.UnfilteredSerializer.kind(int)"], ["boolean", "org.apache.cassandra.db.rows.UnfilteredSerializer.isStatic(int)"], ["int", "org.apache.cassandra.db.rows.UnfilteredSerializer.readExtendedFlags(org.apache.cassandra.io.util.DataInputPlus, int)"], ["boolean", "org.apache.cassandra.db.rows.UnfilteredSerializer.hasExtendedFlags(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.WithOnlyQueriedData", "org.apache.cassandra.db.rows.WithOnlyQueriedData(org.apache.cassandra.db.filter.ColumnFilter)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.metadata()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.columns()"], ["boolean", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.isReverseOrder()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.partitionKey()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.partitionLevelDeletion()"], ["staticRow()", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator."], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.stats()"], ["boolean", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.next()"], ["void", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.close()"], ["java.lang.Object", "org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.next()"], ["void", "org.apache.cassandra.db.transform.BaseIterator.close()"], ["O", "org.apache.cassandra.db.transform.BaseIterator.next()"], ["org.apache.cassandra.db.transform.BasePartitions", "org.apache.cassandra.db.transform.BasePartitions(I)"], ["boolean", "org.apache.cassandra.db.transform.BasePartitions.hasNext()"], ["org.apache.cassandra.db.transform.BaseRows", "org.apache.cassandra.db.transform.BaseRows(I)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.transform.BaseRows.metadata()"], ["boolean", "org.apache.cassandra.db.transform.BaseRows.isReverseOrder()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.transform.BaseRows.columns()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.db.transform.BaseRows.partitionKey()"], ["staticRow()", "org.apache.cassandra.db.transform.BaseRows."], ["boolean", "org.apache.cassandra.db.transform.BaseRows.hasNext()"], ["org.apache.cassandra.db.transform.EmptyPartitionsDiscarder", "org.apache.cassandra.db.transform.EmptyPartitionsDiscarder()"], ["org.apache.cassandra.db.transform.Filter", "org.apache.cassandra.db.transform.Filter(int, boolean)"], ["org.apache.cassandra.db.transform.FilteredPartitions", "org.apache.cassandra.db.transform.FilteredPartitions.filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, int)"], ["org.apache.cassandra.db.transform.FilteredPartitions", "org.apache.cassandra.db.transform.FilteredPartitions.filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.transform.Filter)"], ["boolean", "org.apache.cassandra.db.transform.FilteredRows.isEmpty()"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.transform.FilteredRows.filter(org.apache.cassandra.db.rows.UnfilteredRowIterator, int)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.transform.MorePartitions.extend(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.transform.MorePartitions<? super org.apache.cassandra.db.partitions.UnfilteredPartitionIterator>)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.transform.MorePartitions.extend(org.apache.cassandra.db.partitions.PartitionIterator, org.apache.cassandra.db.transform.MorePartitions<? super org.apache.cassandra.db.partitions.PartitionIterator>)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.transform.MoreRows.extend(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.transform.MoreRows<? super org.apache.cassandra.db.rows.UnfilteredRowIterator>)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.transform.MoreRows.extend(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.transform.MoreRows<? super org.apache.cassandra.db.rows.UnfilteredRowIterator>, org.apache.cassandra.db.PartitionColumns)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.transform.MoreRows.extend(org.apache.cassandra.db.rows.RowIterator, org.apache.cassandra.db.transform.MoreRows<? super org.apache.cassandra.db.rows.RowIterator>)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation.applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation.moreContents()"], ["java.lang.Object", "org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation.moreContents()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.transform.RTBoundCloser.close(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.transform.RTBoundCloser.close(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.transform.RTBoundCloser.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.db.transform.RTBoundCloser.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.db.transform.RTBoundValidator$RowsTransformation.applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["void", "org.apache.cassandra.db.transform.RTBoundValidator$RowsTransformation.onPartitionClose()"], ["org.apache.cassandra.db.transform.RTBoundValidator$Stage[]", "org.apache.cassandra.db.transform.RTBoundValidator$Stage.values()"], ["org.apache.cassandra.db.transform.RTBoundValidator$Stage", "org.apache.cassandra.db.transform.RTBoundValidator$Stage.valueOf(java.lang.String)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.transform.RTBoundValidator.validate(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.transform.RTBoundValidator$Stage, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.transform.RTBoundValidator.validate(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.transform.RTBoundValidator$Stage, boolean)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.transform.RTBoundValidator.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.db.transform.RTBoundValidator.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["org.apache.cassandra.db.transform.StoppingTransformation", "org.apache.cassandra.db.transform.StoppingTransformation()"], ["org.apache.cassandra.db.transform.Transformation", "org.apache.cassandra.db.transform.Transformation()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.db.transform.Transformation.apply(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.db.transform.Transformation<? super org.apache.cassandra.db.rows.UnfilteredRowIterator>)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.db.transform.Transformation.apply(org.apache.cassandra.db.partitions.PartitionIterator, org.apache.cassandra.db.transform.Transformation<? super org.apache.cassandra.db.rows.RowIterator>)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.db.transform.Transformation.apply(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.transform.Transformation<?>)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.db.transform.Transformation.apply(org.apache.cassandra.db.rows.RowIterator, org.apache.cassandra.db.transform.Transformation<?>)"], ["org.apache.cassandra.db.transform.UnfilteredPartitions", "org.apache.cassandra.db.transform.UnfilteredPartitions(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)"], ["boolean", "org.apache.cassandra.db.transform.UnfilteredPartitions.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.transform.UnfilteredPartitions.metadata()"], ["org.apache.cassandra.db.transform.UnfilteredRows", "org.apache.cassandra.db.transform.UnfilteredRows(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.transform.UnfilteredRows", "org.apache.cassandra.db.transform.UnfilteredRows(org.apache.cassandra.db.rows.UnfilteredRowIterator, org.apache.cassandra.db.PartitionColumns)"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.db.transform.UnfilteredRows.columns()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.transform.UnfilteredRows.partitionLevelDeletion()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.db.transform.UnfilteredRows.stats()"], ["boolean", "org.apache.cassandra.db.transform.UnfilteredRows.isEmpty()"], ["boolean", "org.apache.cassandra.db.view.TableViews$1.hasNext()"], ["java.lang.Object", "org.apache.cassandra.db.view.TableViews$1.next()"], ["org.apache.cassandra.db.view.TableViews$DeletionTracker", "org.apache.cassandra.db.view.TableViews$DeletionTracker(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.db.view.TableViews$DeletionTracker.update(org.apache.cassandra.db.rows.Unfiltered)"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.db.view.TableViews$DeletionTracker.currentDeletion()"], ["org.apache.cassandra.db.view.TableViews", "org.apache.cassandra.db.view.TableViews(org.apache.cassandra.config.CFMetaData)"], ["int", "org.apache.cassandra.db.view.TableViews.size()"], ["boolean", "org.apache.cassandra.db.view.TableViews.contains(java.lang.String)"], ["boolean", "org.apache.cassandra.db.view.TableViews.add(org.apache.cassandra.db.view.View)"], ["void", "org.apache.cassandra.db.view.TableViews.forceBlockingFlush()"], ["void", "org.apache.cassandra.db.view.TableViews.dumpMemtables()"], ["void", "org.apache.cassandra.db.view.TableViews.truncateBlocking(org.apache.cassandra.db.commitlog.CommitLogPosition, long)"], ["void", "org.apache.cassandra.db.view.TableViews.removeByName(java.lang.String)"], ["void", "org.apache.cassandra.db.view.TableViews.pushViewReplicaUpdates(org.apache.cassandra.db.partitions.PartitionUpdate, boolean, java.util.concurrent.atomic.AtomicLong)"], ["boolean", "org.apache.cassandra.db.view.TableViews.add(java.lang.Object)"], ["org.apache.cassandra.db.view.View", "org.apache.cassandra.db.view.View(org.apache.cassandra.config.ViewDefinition, org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.config.ViewDefinition", "org.apache.cassandra.db.view.View.getDefinition()"], ["void", "org.apache.cassandra.db.view.View.updateDefinition(org.apache.cassandra.config.ViewDefinition)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.view.View.getViewColumn(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.db.view.View.getBaseColumn(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.db.view.View.mayBeAffectedBy(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.db.view.View.matchesViewFilter(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row, int)"], ["org.apache.cassandra.cql3.statements.SelectStatement", "org.apache.cassandra.db.view.View.getSelectStatement()"], ["org.apache.cassandra.db.ReadQuery", "org.apache.cassandra.db.view.View.getReadQuery()"], ["synchronized", "org.apache.cassandra.db.view.View.void build()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.db.view.View.findBaseTable(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.view.View.buildSelectStatement(java.lang.String, java.util.Collection<org.apache.cassandra.config.ColumnDefinition>, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.db.view.View.relationsToWhereClause(java.util.List<org.apache.cassandra.cql3.Relation>)"], ["boolean", "org.apache.cassandra.db.view.View.hasSamePrimaryKeyColumnsAsBaseTable()"], ["boolean", "org.apache.cassandra.db.view.View.enforceStrictLiveness()"], ["org.apache.cassandra.db.view.ViewBuilder", "org.apache.cassandra.db.view.ViewBuilder(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.view.View)"], ["void", "org.apache.cassandra.db.view.ViewBuilder.run()"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.db.view.ViewBuilder.getCompactionInfo()"], ["void", "org.apache.cassandra.db.view.ViewBuilder.stop()"], ["org.apache.cassandra.db.view.ViewManager", "org.apache.cassandra.db.view.ViewManager(org.apache.cassandra.db.Keyspace)"], ["boolean", "org.apache.cassandra.db.view.ViewManager.updatesAffectView(java.util.Collection<? extends org.apache.cassandra.db.IMutation>, boolean)"], ["void", "org.apache.cassandra.db.view.ViewManager.update(java.lang.String)"], ["void", "org.apache.cassandra.db.view.ViewManager.reload()"], ["void", "org.apache.cassandra.db.view.ViewManager.addView(org.apache.cassandra.config.ViewDefinition)"], ["void", "org.apache.cassandra.db.view.ViewManager.removeView(java.lang.String)"], ["org.apache.cassandra.db.view.View", "org.apache.cassandra.db.view.ViewManager.getByName(java.lang.String)"], ["void", "org.apache.cassandra.db.view.ViewManager.buildAllViews()"], ["org.apache.cassandra.db.view.TableViews", "org.apache.cassandra.db.view.ViewManager.forTable(org.apache.cassandra.config.CFMetaData)"], ["java.util.concurrent.locks.Lock", "org.apache.cassandra.db.view.ViewManager.acquireLockFor(int)"], ["org.apache.cassandra.db.view.ViewUpdateGenerator$UpdateAction[]", "org.apache.cassandra.db.view.ViewUpdateGenerator$UpdateAction.values()"], ["org.apache.cassandra.db.view.ViewUpdateGenerator$UpdateAction", "org.apache.cassandra.db.view.ViewUpdateGenerator$UpdateAction.valueOf(java.lang.String)"], ["org.apache.cassandra.db.view.ViewUpdateGenerator", "org.apache.cassandra.db.view.ViewUpdateGenerator(org.apache.cassandra.db.view.View, org.apache.cassandra.db.DecoratedKey, int)"], ["void", "org.apache.cassandra.db.view.ViewUpdateGenerator.addBaseTableUpdate(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.db.view.ViewUpdateGenerator.clear()"], ["org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer", "org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer(org.apache.cassandra.dht.IPartitionerDependentSerializer<T>)"], ["void", "org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer.serialize(org.apache.cassandra.dht.AbstractBounds<T>, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["long", "org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer.serializedSize(org.apache.cassandra.dht.AbstractBounds<T>, int)"], ["long", "org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["void", "org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.dht.AbstractBounds$Boundary", "org.apache.cassandra.dht.AbstractBounds$Boundary(T, boolean)"], ["org.apache.cassandra.dht.AbstractBounds$Type[]", "org.apache.cassandra.dht.AbstractBounds$Type.values()"], ["org.apache.cassandra.dht.AbstractBounds$Type", "org.apache.cassandra.dht.AbstractBounds$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.dht.AbstractBounds", "org.apache.cassandra.dht.AbstractBounds(T, T)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> boolean", "org.apache.cassandra.dht.AbstractBounds.strictlyWrapsAround(T, T)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> boolean", "org.apache.cassandra.dht.AbstractBounds.noneStrictlyWrapsAround(java.util.Collection<org.apache.cassandra.dht.AbstractBounds<T>>)"], ["int", "org.apache.cassandra.dht.AbstractBounds.hashCode()"], ["boolean", "org.apache.cassandra.dht.AbstractBounds.intersects(java.lang.Iterable<org.apache.cassandra.dht.Range<T>>)"], ["java.lang.String", "org.apache.cassandra.dht.AbstractBounds.getString(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> org.apache.cassandra.dht.AbstractBounds<T>", "org.apache.cassandra.dht.AbstractBounds.bounds(org.apache.cassandra.dht.AbstractBounds$Boundary<T>, org.apache.cassandra.dht.AbstractBounds$Boundary<T>)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> org.apache.cassandra.dht.AbstractBounds<T>", "org.apache.cassandra.dht.AbstractBounds.bounds(T, boolean, T, boolean)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> boolean", "org.apache.cassandra.dht.AbstractBounds.isEmpty(org.apache.cassandra.dht.AbstractBounds$Boundary<T>, org.apache.cassandra.dht.AbstractBounds$Boundary<T>)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> org.apache.cassandra.dht.AbstractBounds$Boundary<T>", "org.apache.cassandra.dht.AbstractBounds.minRight(org.apache.cassandra.dht.AbstractBounds$Boundary<T>, T, boolean)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> org.apache.cassandra.dht.AbstractBounds$Boundary<T>", "org.apache.cassandra.dht.AbstractBounds.minRight(org.apache.cassandra.dht.AbstractBounds$Boundary<T>, org.apache.cassandra.dht.AbstractBounds$Boundary<T>)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> org.apache.cassandra.dht.AbstractBounds$Boundary<T>", "org.apache.cassandra.dht.AbstractBounds.maxLeft(org.apache.cassandra.dht.AbstractBounds$Boundary<T>, T, boolean)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> org.apache.cassandra.dht.AbstractBounds$Boundary<T>", "org.apache.cassandra.dht.AbstractBounds.maxLeft(org.apache.cassandra.dht.AbstractBounds$Boundary<T>, org.apache.cassandra.dht.AbstractBounds$Boundary<T>)"], ["void", "org.apache.cassandra.dht.BootStrapper$1.handleStreamEvent(org.apache.cassandra.streaming.StreamEvent)"], ["void", "org.apache.cassandra.dht.BootStrapper$1.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.dht.BootStrapper$1.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.dht.BootStrapper$1.onSuccess(java.lang.Object)"], ["org.apache.cassandra.dht.BootStrapper$StringSerializer", "org.apache.cassandra.dht.BootStrapper$StringSerializer()"], ["void", "org.apache.cassandra.dht.BootStrapper$StringSerializer.serialize(java.lang.String, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["java.lang.String", "org.apache.cassandra.dht.BootStrapper$StringSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.dht.BootStrapper$StringSerializer.serializedSize(java.lang.String, int)"], ["long", "org.apache.cassandra.dht.BootStrapper$StringSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.dht.BootStrapper$StringSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.dht.BootStrapper$StringSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.dht.BootStrapper", "org.apache.cassandra.dht.BootStrapper(java.net.InetAddress, java.util.Collection<org.apache.cassandra.dht.Token>, org.apache.cassandra.locator.TokenMetadata)"], ["int", "org.apache.cassandra.dht.Bounds$1.compare(org.apache.cassandra.dht.Bounds<T>, org.apache.cassandra.dht.Bounds<T>)"], ["int", "org.apache.cassandra.dht.Bounds$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.dht.Bounds", "org.apache.cassandra.dht.Bounds(T, T)"], ["boolean", "org.apache.cassandra.dht.Bounds.contains(T)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.dht.AbstractBounds<T>, org.apache.cassandra.dht.AbstractBounds<T>>", "org.apache.cassandra.dht.Bounds.split(T)"], ["boolean", "org.apache.cassandra.dht.Bounds.inclusiveLeft()"], ["boolean", "org.apache.cassandra.dht.Bounds.inclusiveRight()"], ["boolean", "org.apache.cassandra.dht.Bounds.intersects(org.apache.cassandra.dht.Bounds<T>)"], ["java.util.List<? extends org.apache.cassandra.dht.AbstractBounds<T>>", "org.apache.cassandra.dht.Bounds.unwrap()"], ["boolean", "org.apache.cassandra.dht.Bounds.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.dht.Bounds.toString()"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> boolean", "org.apache.cassandra.dht.Bounds.isInBounds(T, java.lang.Iterable<org.apache.cassandra.dht.Bounds<T>>)"], ["boolean", "org.apache.cassandra.dht.Bounds.isStartInclusive()"], ["boolean", "org.apache.cassandra.dht.Bounds.isEndInclusive()"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> java.util.Set<org.apache.cassandra.dht.Bounds<T>>", "org.apache.cassandra.dht.Bounds.getNonOverlappingBounds(java.lang.Iterable<org.apache.cassandra.dht.Bounds<T>>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.dht.ByteOrderedPartitioner$1.toByteArray(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner$1.fromByteArray(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.dht.ByteOrderedPartitioner$1.toString(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.dht.ByteOrderedPartitioner$1.validate(java.lang.String)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner$1.fromString(java.lang.String)"], ["org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken(byte[])"], ["java.lang.String", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.toString()"], ["int", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.compareTo(org.apache.cassandra.dht.Token)"], ["int", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.hashCode()"], ["boolean", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.equals(java.lang.Object)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.getPartitioner()"], ["long", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.getHeapSize()"], ["java.lang.Object", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.getTokenValue()"], ["double", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.size(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.increaseSlightly()"], ["int", "org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken.compareTo(java.lang.Object)"], ["org.apache.cassandra.dht.ByteOrderedPartitioner", "org.apache.cassandra.dht.ByteOrderedPartitioner()"], ["org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken", "org.apache.cassandra.dht.ByteOrderedPartitioner.getToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.dht.ByteOrderedPartitioner.decorateKey(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken", "org.apache.cassandra.dht.ByteOrderedPartitioner.midpoint(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner.split(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token, double)"], ["org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken", "org.apache.cassandra.dht.ByteOrderedPartitioner.getMinimumToken()"], ["org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken", "org.apache.cassandra.dht.ByteOrderedPartitioner.getRandomToken()"], ["org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken", "org.apache.cassandra.dht.ByteOrderedPartitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token$TokenFactory", "org.apache.cassandra.dht.ByteOrderedPartitioner.getTokenFactory()"], ["boolean", "org.apache.cassandra.dht.ByteOrderedPartitioner.preservesOrder()"], ["java.util.Map<org.apache.cassandra.dht.Token, java.lang.Float>", "org.apache.cassandra.dht.ByteOrderedPartitioner.describeOwnership(java.util.List<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner.getRandomToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner.getToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner.getMinimumToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ByteOrderedPartitioner.midpoint(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token)"], ["C", "org.apache.cassandra.dht.ComparableObjectToken.getTokenValue()"], ["java.lang.String", "org.apache.cassandra.dht.ComparableObjectToken.toString()"], ["boolean", "org.apache.cassandra.dht.ComparableObjectToken.equals(java.lang.Object)"], ["int", "org.apache.cassandra.dht.ComparableObjectToken.hashCode()"], ["int", "org.apache.cassandra.dht.ComparableObjectToken.compareTo(org.apache.cassandra.dht.Token)"], ["double", "org.apache.cassandra.dht.ComparableObjectToken.size(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.ComparableObjectToken.increaseSlightly()"], ["java.lang.Object", "org.apache.cassandra.dht.ComparableObjectToken.getTokenValue()"], ["int", "org.apache.cassandra.dht.ComparableObjectToken.compareTo(java.lang.Object)"], ["org.apache.cassandra.dht.ExcludingBounds", "org.apache.cassandra.dht.ExcludingBounds(T, T)"], ["boolean", "org.apache.cassandra.dht.ExcludingBounds.contains(T)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.dht.AbstractBounds<T>, org.apache.cassandra.dht.AbstractBounds<T>>", "org.apache.cassandra.dht.ExcludingBounds.split(T)"], ["boolean", "org.apache.cassandra.dht.ExcludingBounds.inclusiveLeft()"], ["boolean", "org.apache.cassandra.dht.ExcludingBounds.inclusiveRight()"], ["java.util.List<? extends org.apache.cassandra.dht.AbstractBounds<T>>", "org.apache.cassandra.dht.ExcludingBounds.unwrap()"], ["boolean", "org.apache.cassandra.dht.ExcludingBounds.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.dht.ExcludingBounds.toString()"], ["boolean", "org.apache.cassandra.dht.ExcludingBounds.isStartInclusive()"], ["boolean", "org.apache.cassandra.dht.ExcludingBounds.isEndInclusive()"], ["default", "org.apache.cassandra.dht.IPartitioner.org.apache.cassandra.dht.Token getMaximumToken()"], ["org.apache.cassandra.dht.IncludingExcludingBounds", "org.apache.cassandra.dht.IncludingExcludingBounds(T, T)"], ["boolean", "org.apache.cassandra.dht.IncludingExcludingBounds.contains(T)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.dht.AbstractBounds<T>, org.apache.cassandra.dht.AbstractBounds<T>>", "org.apache.cassandra.dht.IncludingExcludingBounds.split(T)"], ["boolean", "org.apache.cassandra.dht.IncludingExcludingBounds.inclusiveLeft()"], ["boolean", "org.apache.cassandra.dht.IncludingExcludingBounds.inclusiveRight()"], ["java.util.List<? extends org.apache.cassandra.dht.AbstractBounds<T>>", "org.apache.cassandra.dht.IncludingExcludingBounds.unwrap()"], ["boolean", "org.apache.cassandra.dht.IncludingExcludingBounds.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.dht.IncludingExcludingBounds.toString()"], ["boolean", "org.apache.cassandra.dht.IncludingExcludingBounds.isStartInclusive()"], ["boolean", "org.apache.cassandra.dht.IncludingExcludingBounds.isEndInclusive()"], ["java.nio.ByteBuffer", "org.apache.cassandra.dht.LocalPartitioner$1.toByteArray(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner$1.fromByteArray(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.dht.LocalPartitioner$1.toString(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.dht.LocalPartitioner$1.validate(java.lang.String)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner$1.fromString(java.lang.String)"], ["org.apache.cassandra.dht.LocalPartitioner$LocalToken", "org.apache.cassandra.dht.LocalPartitioner$LocalToken(org.apache.cassandra.dht.LocalPartitioner, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.toString()"], ["int", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.compareTo(org.apache.cassandra.dht.Token)"], ["int", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.hashCode()"], ["boolean", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.equals(java.lang.Object)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.getPartitioner()"], ["long", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.getHeapSize()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.increaseSlightly()"], ["double", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.size(org.apache.cassandra.dht.Token)"], ["int", "org.apache.cassandra.dht.LocalPartitioner$LocalToken.compareTo(java.lang.Object)"], ["org.apache.cassandra.dht.LocalPartitioner", "org.apache.cassandra.dht.LocalPartitioner(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.dht.LocalPartitioner.decorateKey(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner.midpoint(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner.split(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token, double)"], ["org.apache.cassandra.dht.LocalPartitioner$LocalToken", "org.apache.cassandra.dht.LocalPartitioner.getMinimumToken()"], ["org.apache.cassandra.dht.LocalPartitioner$LocalToken", "org.apache.cassandra.dht.LocalPartitioner.getToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.LocalPartitioner$LocalToken", "org.apache.cassandra.dht.LocalPartitioner.getRandomToken()"], ["org.apache.cassandra.dht.LocalPartitioner$LocalToken", "org.apache.cassandra.dht.LocalPartitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token$TokenFactory", "org.apache.cassandra.dht.LocalPartitioner.getTokenFactory()"], ["boolean", "org.apache.cassandra.dht.LocalPartitioner.preservesOrder()"], ["java.util.Map<org.apache.cassandra.dht.Token, java.lang.Float>", "org.apache.cassandra.dht.LocalPartitioner.describeOwnership(java.util.List<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner.getRandomToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner.getToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.LocalPartitioner.getMinimumToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner$1.tokenForValue(java.math.BigInteger)"], ["java.math.BigInteger", "org.apache.cassandra.dht.Murmur3Partitioner$1.valueForToken(org.apache.cassandra.dht.Token)"], ["java.nio.ByteBuffer", "org.apache.cassandra.dht.Murmur3Partitioner$2.toByteArray(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner$2.fromByteArray(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.dht.Murmur3Partitioner$2.toString(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.dht.Murmur3Partitioner$2.validate(java.lang.String)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner$2.fromString(java.lang.String)"], ["org.apache.cassandra.dht.Murmur3Partitioner$LongToken", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken(long)"], ["java.lang.String", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.toString()"], ["boolean", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.equals(java.lang.Object)"], ["int", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.hashCode()"], ["int", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.compareTo(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.getPartitioner()"], ["long", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.getHeapSize()"], ["java.lang.Object", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.getTokenValue()"], ["double", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.size(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.increaseSlightly()"], ["int", "org.apache.cassandra.dht.Murmur3Partitioner$LongToken.compareTo(java.lang.Object)"], ["org.apache.cassandra.dht.Murmur3Partitioner", "org.apache.cassandra.dht.Murmur3Partitioner()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.dht.Murmur3Partitioner.decorateKey(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner.midpoint(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner.split(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token, double)"], ["org.apache.cassandra.dht.Murmur3Partitioner$LongToken", "org.apache.cassandra.dht.Murmur3Partitioner.getMinimumToken()"], ["org.apache.cassandra.dht.Murmur3Partitioner$LongToken", "org.apache.cassandra.dht.Murmur3Partitioner.getToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Murmur3Partitioner$LongToken", "org.apache.cassandra.dht.Murmur3Partitioner.getRandomToken()"], ["org.apache.cassandra.dht.Murmur3Partitioner$LongToken", "org.apache.cassandra.dht.Murmur3Partitioner.getRandomToken(java.util.Random)"], ["boolean", "org.apache.cassandra.dht.Murmur3Partitioner.preservesOrder()"], ["java.util.Map<org.apache.cassandra.dht.Token, java.lang.Float>", "org.apache.cassandra.dht.Murmur3Partitioner.describeOwnership(java.util.List<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.dht.Token$TokenFactory", "org.apache.cassandra.dht.Murmur3Partitioner.getTokenFactory()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner.getMaximumToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner.getRandomToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner.getToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Murmur3Partitioner.getMinimumToken()"], ["java.nio.ByteBuffer", "org.apache.cassandra.dht.OrderPreservingPartitioner$1.toByteArray(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner$1.fromByteArray(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.dht.OrderPreservingPartitioner$1.toString(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.dht.OrderPreservingPartitioner$1.validate(java.lang.String)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner$1.fromString(java.lang.String)"], ["org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken(java.lang.String)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken.getPartitioner()"], ["long", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken.getHeapSize()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken.increaseSlightly()"], ["double", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken.size(org.apache.cassandra.dht.Token)"], ["int", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken.compareTo(org.apache.cassandra.dht.Token)"], ["int", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken.hashCode()"], ["boolean", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken.toString()"], ["org.apache.cassandra.dht.OrderPreservingPartitioner", "org.apache.cassandra.dht.OrderPreservingPartitioner()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.dht.OrderPreservingPartitioner.decorateKey(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken", "org.apache.cassandra.dht.OrderPreservingPartitioner.midpoint(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner.split(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token, double)"], ["org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken", "org.apache.cassandra.dht.OrderPreservingPartitioner.getMinimumToken()"], ["org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken", "org.apache.cassandra.dht.OrderPreservingPartitioner.getRandomToken()"], ["org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken", "org.apache.cassandra.dht.OrderPreservingPartitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token$TokenFactory", "org.apache.cassandra.dht.OrderPreservingPartitioner.getTokenFactory()"], ["boolean", "org.apache.cassandra.dht.OrderPreservingPartitioner.preservesOrder()"], ["org.apache.cassandra.dht.OrderPreservingPartitioner$StringToken", "org.apache.cassandra.dht.OrderPreservingPartitioner.getToken(java.nio.ByteBuffer)"], ["java.util.Map<org.apache.cassandra.dht.Token, java.lang.Float>", "org.apache.cassandra.dht.OrderPreservingPartitioner.describeOwnership(java.util.List<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner.getRandomToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner.getToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner.getMinimumToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.OrderPreservingPartitioner.midpoint(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token)"], ["java.security.MessageDigest", "org.apache.cassandra.dht.RandomPartitioner$1.get()"], ["java.lang.Object", "org.apache.cassandra.dht.RandomPartitioner$1.get()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner$2.tokenForValue(java.math.BigInteger)"], ["java.math.BigInteger", "org.apache.cassandra.dht.RandomPartitioner$2.valueForToken(org.apache.cassandra.dht.Token)"], ["java.nio.ByteBuffer", "org.apache.cassandra.dht.RandomPartitioner$3.toByteArray(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner$3.fromByteArray(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.dht.RandomPartitioner$3.toString(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.dht.RandomPartitioner$3.validate(java.lang.String)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner$3.fromString(java.lang.String)"], ["org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken(java.math.BigInteger)"], ["org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken(java.lang.String)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken.getPartitioner()"], ["long", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken.getHeapSize()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken.increaseSlightly()"], ["double", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken.size(org.apache.cassandra.dht.Token)"], ["int", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken.compareTo(org.apache.cassandra.dht.Token)"], ["int", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken.hashCode()"], ["boolean", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken.toString()"], ["org.apache.cassandra.dht.RandomPartitioner", "org.apache.cassandra.dht.RandomPartitioner()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.dht.RandomPartitioner.decorateKey(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner.midpoint(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner.split(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token, double)"], ["org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken", "org.apache.cassandra.dht.RandomPartitioner.getMinimumToken()"], ["org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken", "org.apache.cassandra.dht.RandomPartitioner.getRandomToken()"], ["org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken", "org.apache.cassandra.dht.RandomPartitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token$TokenFactory", "org.apache.cassandra.dht.RandomPartitioner.getTokenFactory()"], ["boolean", "org.apache.cassandra.dht.RandomPartitioner.preservesOrder()"], ["org.apache.cassandra.dht.RandomPartitioner$BigIntegerToken", "org.apache.cassandra.dht.RandomPartitioner.getToken(java.nio.ByteBuffer)"], ["java.util.Map<org.apache.cassandra.dht.Token, java.lang.Float>", "org.apache.cassandra.dht.RandomPartitioner.describeOwnership(java.util.List<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner.getMaximumToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner.getRandomToken(java.util.Random)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner.getRandomToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner.getToken(java.nio.ByteBuffer)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.RandomPartitioner.getMinimumToken()"], ["int", "org.apache.cassandra.dht.Range$1.compare(org.apache.cassandra.dht.Range<T>, org.apache.cassandra.dht.Range<T>)"], ["int", "org.apache.cassandra.dht.Range$1.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.dht.Range$2.compare(org.apache.cassandra.dht.Range<T>, org.apache.cassandra.dht.Range<T>)"], ["int", "org.apache.cassandra.dht.Range$2.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.dht.Range$OrderedRangeContainmentChecker", "org.apache.cassandra.dht.Range$OrderedRangeContainmentChecker(java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["boolean", "org.apache.cassandra.dht.Range$OrderedRangeContainmentChecker.contains(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Range", "org.apache.cassandra.dht.Range(T, T)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> boolean", "org.apache.cassandra.dht.Range.contains(T, T, T)"], ["boolean", "org.apache.cassandra.dht.Range.contains(org.apache.cassandra.dht.Range<T>)"], ["boolean", "org.apache.cassandra.dht.Range.contains(T)"], ["boolean", "org.apache.cassandra.dht.Range.intersects(org.apache.cassandra.dht.Range<T>)"], ["boolean", "org.apache.cassandra.dht.Range.intersects(org.apache.cassandra.dht.AbstractBounds<T>)"], ["boolean", "org.apache.cassandra.dht.Range.intersects(org.apache.cassandra.dht.Bounds<T>)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> java.util.Set<org.apache.cassandra.dht.Range<T>>", "org.apache.cassandra.dht.Range.rangeSet(org.apache.cassandra.dht.Range<T>...)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> java.util.Set<org.apache.cassandra.dht.Range<T>>", "org.apache.cassandra.dht.Range.rangeSet(org.apache.cassandra.dht.Range<T>)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.dht.AbstractBounds<T>, org.apache.cassandra.dht.AbstractBounds<T>>", "org.apache.cassandra.dht.Range.split(T)"], ["boolean", "org.apache.cassandra.dht.Range.inclusiveLeft()"], ["boolean", "org.apache.cassandra.dht.Range.inclusiveRight()"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> boolean", "org.apache.cassandra.dht.Range.isWrapAround(T, T)"], ["int", "org.apache.cassandra.dht.Range.compareTo(org.apache.cassandra.dht.Range<T>)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> boolean", "org.apache.cassandra.dht.Range.isInRanges(T, java.lang.Iterable<org.apache.cassandra.dht.Range<T>>)"], ["boolean", "org.apache.cassandra.dht.Range.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.dht.Range.toString()"], ["boolean", "org.apache.cassandra.dht.Range.isStartInclusive()"], ["boolean", "org.apache.cassandra.dht.Range.isEndInclusive()"], ["boolean", "org.apache.cassandra.dht.Range.isWrapAround()"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> java.util.List<org.apache.cassandra.dht.Range<T>>", "org.apache.cassandra.dht.Range.normalize(java.util.Collection<org.apache.cassandra.dht.Range<T>>)"], ["<T extends org.apache.cassandra.dht.RingPosition<T>> java.util.List<org.apache.cassandra.dht.Range<T>>", "org.apache.cassandra.dht.Range.sort(java.util.Collection<org.apache.cassandra.dht.Range<T>>)"], ["int", "org.apache.cassandra.dht.Range.compareTo(java.lang.Object)"], ["org.apache.cassandra.dht.RangeStreamer$ExcludeLocalNodeFilter", "org.apache.cassandra.dht.RangeStreamer$ExcludeLocalNodeFilter()"], ["boolean", "org.apache.cassandra.dht.RangeStreamer$ExcludeLocalNodeFilter.shouldInclude(java.net.InetAddress)"], ["org.apache.cassandra.dht.RangeStreamer$FailureDetectorSourceFilter", "org.apache.cassandra.dht.RangeStreamer$FailureDetectorSourceFilter(org.apache.cassandra.gms.IFailureDetector)"], ["boolean", "org.apache.cassandra.dht.RangeStreamer$FailureDetectorSourceFilter.shouldInclude(java.net.InetAddress)"], ["org.apache.cassandra.dht.RangeStreamer$SingleDatacenterFilter", "org.apache.cassandra.dht.RangeStreamer$SingleDatacenterFilter(org.apache.cassandra.locator.IEndpointSnitch, java.lang.String)"], ["boolean", "org.apache.cassandra.dht.RangeStreamer$SingleDatacenterFilter.shouldInclude(java.net.InetAddress)"], ["org.apache.cassandra.dht.RangeStreamer$WhitelistedSourcesFilter", "org.apache.cassandra.dht.RangeStreamer$WhitelistedSourcesFilter(java.util.Set<java.net.InetAddress>)"], ["boolean", "org.apache.cassandra.dht.RangeStreamer$WhitelistedSourcesFilter.shouldInclude(java.net.InetAddress)"], ["org.apache.cassandra.dht.RangeStreamer", "org.apache.cassandra.dht.RangeStreamer(org.apache.cassandra.locator.TokenMetadata, java.util.Collection<org.apache.cassandra.dht.Token>, java.net.InetAddress, java.lang.String, boolean, org.apache.cassandra.locator.IEndpointSnitch, org.apache.cassandra.dht.StreamStateStore, boolean)"], ["void", "org.apache.cassandra.dht.RangeStreamer.addSourceFilter(org.apache.cassandra.dht.RangeStreamer$ISourceFilter)"], ["void", "org.apache.cassandra.dht.RangeStreamer.addRanges(java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["com.google.common.collect.Multimap<java.net.InetAddress, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>", "org.apache.cassandra.dht.RangeStreamer.getWorkMap(com.google.common.collect.Multimap<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, java.net.InetAddress>, java.lang.String, org.apache.cassandra.gms.IFailureDetector, boolean)"], ["org.apache.cassandra.streaming.StreamResultFuture", "org.apache.cassandra.dht.RangeStreamer.fetchAsync()"], ["org.apache.cassandra.dht.StreamStateStore", "org.apache.cassandra.dht.StreamStateStore()"], ["boolean", "org.apache.cassandra.dht.StreamStateStore.isDataAvailable(java.lang.String, org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.dht.StreamStateStore.handleStreamEvent(org.apache.cassandra.streaming.StreamEvent)"], ["void", "org.apache.cassandra.dht.StreamStateStore.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.dht.StreamStateStore.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.dht.StreamStateStore.onSuccess(java.lang.Object)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Token$KeyBound.getToken()"], ["int", "org.apache.cassandra.dht.Token$KeyBound.compareTo(org.apache.cassandra.db.PartitionPosition)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.dht.Token$KeyBound.getPartitioner()"], ["org.apache.cassandra.dht.Token$KeyBound", "org.apache.cassandra.dht.Token$KeyBound.minValue()"], ["boolean", "org.apache.cassandra.dht.Token$KeyBound.isMinimum()"], ["org.apache.cassandra.db.PartitionPosition$Kind", "org.apache.cassandra.dht.Token$KeyBound.kind()"], ["boolean", "org.apache.cassandra.dht.Token$KeyBound.equals(java.lang.Object)"], ["int", "org.apache.cassandra.dht.Token$KeyBound.hashCode()"], ["java.lang.String", "org.apache.cassandra.dht.Token$KeyBound.toString()"], ["org.apache.cassandra.dht.RingPosition", "org.apache.cassandra.dht.Token$KeyBound.minValue()"], ["int", "org.apache.cassandra.dht.Token$KeyBound.compareTo(java.lang.Object)"], ["org.apache.cassandra.dht.Token$TokenFactory", "org.apache.cassandra.dht.Token$TokenFactory()"], ["org.apache.cassandra.dht.Token$TokenSerializer", "org.apache.cassandra.dht.Token$TokenSerializer()"], ["void", "org.apache.cassandra.dht.Token$TokenSerializer.serialize(org.apache.cassandra.dht.Token, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Token$TokenSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["long", "org.apache.cassandra.dht.Token$TokenSerializer.serializedSize(org.apache.cassandra.dht.Token, int)"], ["long", "org.apache.cassandra.dht.Token$TokenSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.dht.Token$TokenSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["void", "org.apache.cassandra.dht.Token$TokenSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Token()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Token.getToken()"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.dht.Token.minValue()"], ["boolean", "org.apache.cassandra.dht.Token.isMinimum()"], ["org.apache.cassandra.dht.Token$KeyBound", "org.apache.cassandra.dht.Token.minKeyBound()"], ["org.apache.cassandra.dht.Token$KeyBound", "org.apache.cassandra.dht.Token.maxKeyBound()"], ["<R extends org.apache.cassandra.dht.RingPosition<R>> R", "org.apache.cassandra.dht.Token.upperBound(java.lang.Class<R>)"], ["org.apache.cassandra.dht.RingPosition", "org.apache.cassandra.dht.Token.minValue()"], ["org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocator", "org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocator(java.util.NavigableMap<org.apache.cassandra.dht.Token, Unit>, org.apache.cassandra.dht.tokenallocator.ReplicationStrategy<Unit>, org.apache.cassandra.dht.IPartitioner)"], ["int", "org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocator.getReplicas()"], ["org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo", "org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo<Unit>, org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo<Unit>)"], ["int", "org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.getReplicas()"], ["int", "org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.unitCount()"], ["java.lang.String", "org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.toString()"], ["int", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$1.replicas()"], ["java.lang.Object", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$1.getGroup(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$1.inAllocationRing(java.net.InetAddress)"], ["java.lang.Object", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$1.getGroup(java.lang.Object)"], ["int", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$2.replicas()"], ["java.lang.Object", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$2.getGroup(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$2.inAllocationRing(java.net.InetAddress)"], ["java.lang.Object", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$2.getGroup(java.lang.Object)"], ["int", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$3.replicas()"], ["java.lang.Object", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$3.getGroup(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$3.inAllocationRing(java.net.InetAddress)"], ["java.lang.Object", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$3.getGroup(java.lang.Object)"], ["int", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$4.replicas()"], ["java.lang.Object", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$4.getGroup(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$4.inAllocationRing(java.net.InetAddress)"], ["java.lang.Object", "org.apache.cassandra.dht.tokenallocator.TokenAllocation$4.getGroup(java.lang.Object)"], ["org.apache.cassandra.dht.tokenallocator.TokenAllocation", "org.apache.cassandra.dht.tokenallocator.TokenAllocation()"], ["java.util.Map<java.net.InetAddress, java.lang.Double>", "org.apache.cassandra.dht.tokenallocator.TokenAllocation.evaluateReplicatedOwnership(org.apache.cassandra.locator.TokenMetadata, org.apache.cassandra.locator.AbstractReplicationStrategy)"], ["java.lang.String", "org.apache.cassandra.dht.tokenallocator.TokenAllocation.statToString(org.apache.commons.math3.stat.descriptive.SummaryStatistics)"], ["org.apache.commons.math3.stat.descriptive.SummaryStatistics", "org.apache.cassandra.dht.tokenallocator.TokenAllocation.replicatedOwnershipStats(org.apache.cassandra.locator.TokenMetadata, org.apache.cassandra.locator.AbstractReplicationStrategy, java.net.InetAddress)"], ["org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$BaseTokenInfo", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$BaseTokenInfo(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo<Unit>)"], ["java.lang.String", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$BaseTokenInfo.toString()"], ["org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo.toString()"], ["org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo<Unit>)"], ["org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo(Unit, double, java.util.Map<java.lang.Object, org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo>, org.apache.cassandra.dht.tokenallocator.ReplicationStrategy<Unit>)"], ["java.lang.String", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo.toString()"], ["org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted(double, T)"], ["int", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted.compareTo(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted<T>)"], ["java.lang.String", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted.toString()"], ["int", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted.compareTo(java.lang.Object)"], ["org.apache.cassandra.dht.tokenallocator.TokenAllocatorFactory", "org.apache.cassandra.dht.tokenallocator.TokenAllocatorFactory()"], ["org.apache.cassandra.exceptions.AlreadyExistsException", "org.apache.cassandra.exceptions.AlreadyExistsException(java.lang.String, java.lang.String)"], ["org.apache.cassandra.exceptions.AlreadyExistsException", "org.apache.cassandra.exceptions.AlreadyExistsException(java.lang.String)"], ["org.apache.cassandra.exceptions.AuthenticationException", "org.apache.cassandra.exceptions.AuthenticationException(java.lang.String)"], ["org.apache.cassandra.exceptions.ExceptionCode", "org.apache.cassandra.exceptions.CassandraException.code()"], ["org.apache.cassandra.exceptions.ConfigurationException", "org.apache.cassandra.exceptions.ConfigurationException(java.lang.String)"], ["org.apache.cassandra.exceptions.ConfigurationException", "org.apache.cassandra.exceptions.ConfigurationException(java.lang.String, boolean)"], ["org.apache.cassandra.exceptions.ConfigurationException", "org.apache.cassandra.exceptions.ConfigurationException(java.lang.String, java.lang.Throwable)"], ["org.apache.cassandra.exceptions.ExceptionCode[]", "org.apache.cassandra.exceptions.ExceptionCode.values()"], ["org.apache.cassandra.exceptions.ExceptionCode", "org.apache.cassandra.exceptions.ExceptionCode.valueOf(java.lang.String)"], ["org.apache.cassandra.exceptions.ExceptionCode", "org.apache.cassandra.exceptions.ExceptionCode.fromValue(int)"], ["org.apache.cassandra.exceptions.FunctionExecutionException", "org.apache.cassandra.exceptions.FunctionExecutionException.create(org.apache.cassandra.cql3.functions.Function, java.lang.Throwable)"], ["org.apache.cassandra.exceptions.FunctionExecutionException", "org.apache.cassandra.exceptions.FunctionExecutionException(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<java.lang.String>, java.lang.String)"], ["org.apache.cassandra.exceptions.InvalidRequestException", "org.apache.cassandra.exceptions.InvalidRequestException(java.lang.String)"], ["org.apache.cassandra.exceptions.IsBootstrappingException", "org.apache.cassandra.exceptions.IsBootstrappingException()"], ["org.apache.cassandra.exceptions.OverloadedException", "org.apache.cassandra.exceptions.OverloadedException(java.lang.String)"], ["org.apache.cassandra.exceptions.PreparedQueryNotFoundException", "org.apache.cassandra.exceptions.PreparedQueryNotFoundException(org.apache.cassandra.utils.MD5Digest)"], ["org.apache.cassandra.exceptions.ReadFailureException", "org.apache.cassandra.exceptions.ReadFailureException(org.apache.cassandra.db.ConsistencyLevel, int, int, boolean, java.util.Map<java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason>)"], ["org.apache.cassandra.exceptions.ReadTimeoutException", "org.apache.cassandra.exceptions.ReadTimeoutException(org.apache.cassandra.db.ConsistencyLevel, int, int, boolean)"], ["org.apache.cassandra.exceptions.RepairException", "org.apache.cassandra.exceptions.RepairException(org.apache.cassandra.repair.RepairJobDesc, java.lang.String)"], ["org.apache.cassandra.exceptions.RepairException", "org.apache.cassandra.exceptions.RepairException(org.apache.cassandra.repair.RepairJobDesc, java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.apache.cassandra.exceptions.RepairException.getMessage()"], ["org.apache.cassandra.exceptions.RequestFailureReason[]", "org.apache.cassandra.exceptions.RequestFailureReason.values()"], ["org.apache.cassandra.exceptions.RequestFailureReason", "org.apache.cassandra.exceptions.RequestFailureReason.valueOf(java.lang.String)"], ["org.apache.cassandra.exceptions.RequestFailureReason", "org.apache.cassandra.exceptions.RequestFailureReason.fromCode(int)"], ["org.apache.cassandra.exceptions.StartupException", "org.apache.cassandra.exceptions.StartupException(int, java.lang.String)"], ["org.apache.cassandra.exceptions.StartupException", "org.apache.cassandra.exceptions.StartupException(int, java.lang.String, java.lang.Throwable)"], ["org.apache.cassandra.exceptions.SyntaxException", "org.apache.cassandra.exceptions.SyntaxException(java.lang.String)"], ["org.apache.cassandra.exceptions.TruncateException", "org.apache.cassandra.exceptions.TruncateException(java.lang.Throwable)"], ["org.apache.cassandra.exceptions.TruncateException", "org.apache.cassandra.exceptions.TruncateException(java.lang.String)"], ["org.apache.cassandra.exceptions.UnauthorizedException", "org.apache.cassandra.exceptions.UnauthorizedException(java.lang.String)"], ["org.apache.cassandra.exceptions.UnavailableException", "org.apache.cassandra.exceptions.UnavailableException(org.apache.cassandra.db.ConsistencyLevel, int, int)"], ["org.apache.cassandra.exceptions.UnavailableException", "org.apache.cassandra.exceptions.UnavailableException(org.apache.cassandra.db.ConsistencyLevel, java.lang.String, int, int)"], ["org.apache.cassandra.exceptions.UnavailableException", "org.apache.cassandra.exceptions.UnavailableException(java.lang.String, org.apache.cassandra.db.ConsistencyLevel, int, int)"], ["org.apache.cassandra.exceptions.WriteFailureException", "org.apache.cassandra.exceptions.WriteFailureException(org.apache.cassandra.db.ConsistencyLevel, int, int, org.apache.cassandra.db.WriteType, java.util.Map<java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason>)"], ["org.apache.cassandra.exceptions.WriteTimeoutException", "org.apache.cassandra.exceptions.WriteTimeoutException(org.apache.cassandra.db.WriteType, org.apache.cassandra.db.ConsistencyLevel, int, int)"], ["org.apache.cassandra.gms.ApplicationState[]", "org.apache.cassandra.gms.ApplicationState.values()"], ["org.apache.cassandra.gms.ApplicationState", "org.apache.cassandra.gms.ApplicationState.valueOf(java.lang.String)"], ["org.apache.cassandra.gms.ArrayBackedBoundedStats", "org.apache.cassandra.gms.ArrayBackedBoundedStats(int)"], ["void", "org.apache.cassandra.gms.ArrayBackedBoundedStats.add(long)"], ["double", "org.apache.cassandra.gms.ArrayBackedBoundedStats.mean()"], ["long[]", "org.apache.cassandra.gms.ArrayBackedBoundedStats.getArrivalIntervals()"], ["java.lang.String", "org.apache.cassandra.gms.ArrivalWindow.toString()"], ["org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer", "org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer()"], ["void", "org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer.serialize(org.apache.cassandra.gms.EchoMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.EchoMessage", "org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer.serializedSize(org.apache.cassandra.gms.EchoMessage, int)"], ["long", "org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.EndpointState.getApplicationState(org.apache.cassandra.gms.ApplicationState)"], ["java.util.Set<java.util.Map$Entry<org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue>>", "org.apache.cassandra.gms.EndpointState.states()"], ["void", "org.apache.cassandra.gms.EndpointState.addApplicationState(org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.gms.EndpointState.addApplicationStates(java.util.Map<org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue>)"], ["void", "org.apache.cassandra.gms.EndpointState.addApplicationStates(java.util.Set<java.util.Map$Entry<org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue>>)"], ["long", "org.apache.cassandra.gms.EndpointState.getUpdateTimestamp()"], ["boolean", "org.apache.cassandra.gms.EndpointState.isAlive()"], ["boolean", "org.apache.cassandra.gms.EndpointState.isRpcReady()"], ["java.lang.String", "org.apache.cassandra.gms.EndpointState.getStatus()"], ["java.util.UUID", "org.apache.cassandra.gms.EndpointState.getSchemaVersion()"], ["org.apache.cassandra.utils.CassandraVersion", "org.apache.cassandra.gms.EndpointState.getReleaseVersion()"], ["java.lang.String", "org.apache.cassandra.gms.EndpointState.toString()"], ["void", "org.apache.cassandra.gms.EndpointStateSerializer.serialize(org.apache.cassandra.gms.EndpointState, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.EndpointState", "org.apache.cassandra.gms.EndpointStateSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.gms.EndpointStateSerializer.serializedSize(org.apache.cassandra.gms.EndpointState, int)"], ["long", "org.apache.cassandra.gms.EndpointStateSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.gms.EndpointStateSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.gms.EndpointStateSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.FailureDetector", "org.apache.cassandra.gms.FailureDetector()"], ["java.lang.String", "org.apache.cassandra.gms.FailureDetector.getAllEndpointStates()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.gms.FailureDetector.getSimpleStates()"], ["int", "org.apache.cassandra.gms.FailureDetector.getDownEndpointCount()"], ["int", "org.apache.cassandra.gms.FailureDetector.getUpEndpointCount()"], ["javax.management.openmbean.TabularData", "org.apache.cassandra.gms.FailureDetector.getPhiValues()"], ["java.lang.String", "org.apache.cassandra.gms.FailureDetector.getEndpointState(java.lang.String)"], ["void", "org.apache.cassandra.gms.FailureDetector.dumpInterArrivalTimes()"], ["void", "org.apache.cassandra.gms.FailureDetector.setPhiConvictThreshold(double)"], ["double", "org.apache.cassandra.gms.FailureDetector.getPhiConvictThreshold()"], ["boolean", "org.apache.cassandra.gms.FailureDetector.isAlive(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.FailureDetector.report(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.FailureDetector.interpret(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.FailureDetector.forceConviction(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.FailureDetector.remove(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.FailureDetector.registerFailureDetectionEventListener(org.apache.cassandra.gms.IFailureDetectionEventListener)"], ["void", "org.apache.cassandra.gms.FailureDetector.unregisterFailureDetectionEventListener(org.apache.cassandra.gms.IFailureDetectionEventListener)"], ["java.lang.String", "org.apache.cassandra.gms.FailureDetector.toString()"], ["int", "org.apache.cassandra.gms.GossipDigest.compareTo(org.apache.cassandra.gms.GossipDigest)"], ["java.lang.String", "org.apache.cassandra.gms.GossipDigest.toString()"], ["int", "org.apache.cassandra.gms.GossipDigest.compareTo(java.lang.Object)"], ["void", "org.apache.cassandra.gms.GossipDigestAck2Serializer.serialize(org.apache.cassandra.gms.GossipDigestAck2, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.GossipDigestAck2", "org.apache.cassandra.gms.GossipDigestAck2Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.gms.GossipDigestAck2Serializer.serializedSize(org.apache.cassandra.gms.GossipDigestAck2, int)"], ["long", "org.apache.cassandra.gms.GossipDigestAck2Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.gms.GossipDigestAck2Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.gms.GossipDigestAck2Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.GossipDigestAck2VerbHandler", "org.apache.cassandra.gms.GossipDigestAck2VerbHandler()"], ["void", "org.apache.cassandra.gms.GossipDigestAck2VerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.gms.GossipDigestAck2>, int)"], ["void", "org.apache.cassandra.gms.GossipDigestAckSerializer.serialize(org.apache.cassandra.gms.GossipDigestAck, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.GossipDigestAck", "org.apache.cassandra.gms.GossipDigestAckSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.gms.GossipDigestAckSerializer.serializedSize(org.apache.cassandra.gms.GossipDigestAck, int)"], ["long", "org.apache.cassandra.gms.GossipDigestAckSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.gms.GossipDigestAckSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.gms.GossipDigestAckSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.GossipDigestAckVerbHandler", "org.apache.cassandra.gms.GossipDigestAckVerbHandler()"], ["void", "org.apache.cassandra.gms.GossipDigestAckVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.gms.GossipDigestAck>, int)"], ["void", "org.apache.cassandra.gms.GossipDigestSerializer.serialize(org.apache.cassandra.gms.GossipDigest, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.GossipDigest", "org.apache.cassandra.gms.GossipDigestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.gms.GossipDigestSerializer.serializedSize(org.apache.cassandra.gms.GossipDigest, int)"], ["long", "org.apache.cassandra.gms.GossipDigestSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.gms.GossipDigestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.gms.GossipDigestSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.GossipDigestSyn", "org.apache.cassandra.gms.GossipDigestSyn(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.gms.GossipDigest>)"], ["void", "org.apache.cassandra.gms.GossipDigestSynSerializer.serialize(org.apache.cassandra.gms.GossipDigestSyn, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.GossipDigestSyn", "org.apache.cassandra.gms.GossipDigestSynSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.gms.GossipDigestSynSerializer.serializedSize(org.apache.cassandra.gms.GossipDigestSyn, int)"], ["long", "org.apache.cassandra.gms.GossipDigestSynSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.gms.GossipDigestSynSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.gms.GossipDigestSynSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.GossipDigestSynVerbHandler", "org.apache.cassandra.gms.GossipDigestSynVerbHandler()"], ["void", "org.apache.cassandra.gms.GossipDigestSynVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.gms.GossipDigestSyn>, int)"], ["org.apache.cassandra.gms.GossipShutdownVerbHandler", "org.apache.cassandra.gms.GossipShutdownVerbHandler()"], ["void", "org.apache.cassandra.gms.GossipShutdownVerbHandler.doVerb(org.apache.cassandra.net.MessageIn, int)"], ["int", "org.apache.cassandra.gms.Gossiper$1.compare(java.net.InetAddress, java.net.InetAddress)"], ["int", "org.apache.cassandra.gms.Gossiper$1.compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.cassandra.gms.Gossiper$3.isLatencyForSnitch()"], ["void", "org.apache.cassandra.gms.Gossiper$3.response(org.apache.cassandra.net.MessageIn)"], ["void", "org.apache.cassandra.gms.Gossiper$GossipTask.run()"], ["void", "org.apache.cassandra.gms.Gossiper.setLastProcessedMessageAt(long)"], ["boolean", "org.apache.cassandra.gms.Gossiper.seenAnySeed()"], ["void", "org.apache.cassandra.gms.Gossiper.register(org.apache.cassandra.gms.IEndpointStateChangeSubscriber)"], ["void", "org.apache.cassandra.gms.Gossiper.unregister(org.apache.cassandra.gms.IEndpointStateChangeSubscriber)"], ["long", "org.apache.cassandra.gms.Gossiper.getEndpointDowntime(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.Gossiper.convict(java.net.InetAddress, double)"], ["void", "org.apache.cassandra.gms.Gossiper.removeEndpoint(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.Gossiper.replacementQuarantine(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.Gossiper.replacedEndpoint(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.Gossiper.advertiseRemoving(java.net.InetAddress, java.util.UUID, java.util.UUID)"], ["void", "org.apache.cassandra.gms.Gossiper.advertiseTokenRemoved(java.net.InetAddress, java.util.UUID)"], ["void", "org.apache.cassandra.gms.Gossiper.unsafeAssassinateEndpoint(java.lang.String)"], ["void", "org.apache.cassandra.gms.Gossiper.assassinateEndpoint(java.lang.String)"], ["boolean", "org.apache.cassandra.gms.Gossiper.isKnownEndpoint(java.net.InetAddress)"], ["int", "org.apache.cassandra.gms.Gossiper.getCurrentGenerationNumber(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.gms.Gossiper.isGossipOnlyMember(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.gms.Gossiper.isSafeForStartup(java.net.InetAddress, java.util.UUID, boolean, java.util.Map<java.net.InetAddress, org.apache.cassandra.gms.EndpointState>)"], ["org.apache.cassandra.gms.EndpointState", "org.apache.cassandra.gms.Gossiper.getEndpointStateForEndpoint(java.net.InetAddress)"], ["java.util.Set<java.util.Map$Entry<java.net.InetAddress, org.apache.cassandra.gms.EndpointState>>", "org.apache.cassandra.gms.Gossiper.getEndpointStates()"], ["java.util.UUID", "org.apache.cassandra.gms.Gossiper.getHostId(java.net.InetAddress)"], ["java.util.UUID", "org.apache.cassandra.gms.Gossiper.getHostId(java.net.InetAddress, java.util.Map<java.net.InetAddress, org.apache.cassandra.gms.EndpointState>)"], ["int", "org.apache.cassandra.gms.Gossiper.compareEndpointStartup(java.net.InetAddress, java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.Gossiper.realMarkAlive(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.gms.Gossiper.markDead(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["boolean", "org.apache.cassandra.gms.Gossiper.isAlive(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.gms.Gossiper.isDeadState(org.apache.cassandra.gms.EndpointState)"], ["boolean", "org.apache.cassandra.gms.Gossiper.isSilentShutdownState(org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.gms.Gossiper.start(int)"], ["void", "org.apache.cassandra.gms.Gossiper.start(int, java.util.Map<org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue>)"], ["java.util.Map<java.net.InetAddress, org.apache.cassandra.gms.EndpointState>", "org.apache.cassandra.gms.Gossiper.doShadowRound()"], ["java.util.Map<java.net.InetAddress, org.apache.cassandra.gms.EndpointState>", "org.apache.cassandra.gms.Gossiper.doShadowRound(java.util.Set<java.net.InetAddress>)"], ["void", "org.apache.cassandra.gms.Gossiper.maybeInitializeLocalState(int)"], ["void", "org.apache.cassandra.gms.Gossiper.forceNewerGeneration()"], ["void", "org.apache.cassandra.gms.Gossiper.addSavedEndpoint(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.Gossiper.addLocalApplicationState(org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.gms.Gossiper.addLocalApplicationStates(java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue>>)"], ["void", "org.apache.cassandra.gms.Gossiper.stop()"], ["boolean", "org.apache.cassandra.gms.Gossiper.isEnabled()"], ["boolean", "org.apache.cassandra.gms.Gossiper.isAnyNodeOn30()"], ["void", "org.apache.cassandra.gms.Gossiper.initializeNodeUnsafe(java.net.InetAddress, java.util.UUID, int)"], ["void", "org.apache.cassandra.gms.Gossiper.injectApplicationState(java.net.InetAddress, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["long", "org.apache.cassandra.gms.Gossiper.getEndpointDowntime(java.lang.String)"], ["int", "org.apache.cassandra.gms.Gossiper.getCurrentGenerationNumber(java.lang.String)"], ["void", "org.apache.cassandra.gms.Gossiper.addExpireTimeForEndpoint(java.net.InetAddress, long)"], ["long", "org.apache.cassandra.gms.Gossiper.computeExpireTime()"], ["org.apache.cassandra.utils.CassandraVersion", "org.apache.cassandra.gms.Gossiper.getReleaseVersion(java.net.InetAddress)"], ["java.util.UUID", "org.apache.cassandra.gms.Gossiper.getSchemaVersion(java.net.InetAddress)"], ["void", "org.apache.cassandra.gms.Gossiper.waitToSettle()"], ["java.lang.String", "org.apache.cassandra.gms.HeartBeatState.toString()"], ["void", "org.apache.cassandra.gms.HeartBeatStateSerializer.serialize(org.apache.cassandra.gms.HeartBeatState, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.HeartBeatState", "org.apache.cassandra.gms.HeartBeatStateSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.gms.HeartBeatStateSerializer.serializedSize(org.apache.cassandra.gms.HeartBeatState, int)"], ["long", "org.apache.cassandra.gms.HeartBeatStateSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.gms.HeartBeatStateSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.gms.HeartBeatStateSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.TokenSerializer", "org.apache.cassandra.gms.TokenSerializer()"], ["void", "org.apache.cassandra.gms.TokenSerializer.serialize(org.apache.cassandra.dht.IPartitioner, java.util.Collection<org.apache.cassandra.dht.Token>, java.io.DataOutput)"], ["org.apache.cassandra.gms.VersionGenerator", "org.apache.cassandra.gms.VersionGenerator()"], ["int", "org.apache.cassandra.gms.VersionGenerator.getNextVersion()"], ["org.apache.cassandra.gms.VersionedValue$VersionedValueFactory", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory(org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.cloneWithHigherVersion(org.apache.cassandra.gms.VersionedValue)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.bootReplacing(java.net.InetAddress)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.bootstrapping(java.util.Collection<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.normal(java.util.Collection<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.load(double)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.schema(java.util.UUID)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.leaving(java.util.Collection<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.left(java.util.Collection<org.apache.cassandra.dht.Token>, long)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.moving(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.hostId(java.util.UUID)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.tokens(java.util.Collection<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.removingNonlocal(java.util.UUID)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.removedNonlocal(java.util.UUID, long)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.removalCoordinator(java.util.UUID)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.hibernate(boolean)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.rpcReady(boolean)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.shutdown(boolean)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.datacenter(java.lang.String)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.rack(java.lang.String)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.rpcaddress(java.net.InetAddress)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.releaseVersion()"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.releaseVersion(java.lang.String)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.networkVersion()"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.internalIP(java.lang.String)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueFactory.severity(double)"], ["void", "org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer.serialize(org.apache.cassandra.gms.VersionedValue, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.gms.VersionedValue", "org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer.serializedSize(org.apache.cassandra.gms.VersionedValue, int)"], ["long", "org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["int", "org.apache.cassandra.gms.VersionedValue.compareTo(org.apache.cassandra.gms.VersionedValue)"], ["java.lang.String", "org.apache.cassandra.gms.VersionedValue.toString()"], ["byte[]", "org.apache.cassandra.gms.VersionedValue.toBytes()"], ["int", "org.apache.cassandra.gms.VersionedValue.compareTo(java.lang.Object)"], ["org.apache.cassandra.hadoop.ColumnFamilySplit", "org.apache.cassandra.hadoop.ColumnFamilySplit(java.lang.String, java.lang.String, java.lang.String[])"], ["org.apache.cassandra.hadoop.ColumnFamilySplit", "org.apache.cassandra.hadoop.ColumnFamilySplit(java.lang.String, java.lang.String, long, java.lang.String[])"], ["java.lang.String", "org.apache.cassandra.hadoop.ColumnFamilySplit.getStartToken()"], ["java.lang.String", "org.apache.cassandra.hadoop.ColumnFamilySplit.getEndToken()"], ["long", "org.apache.cassandra.hadoop.ColumnFamilySplit.getLength()"], ["java.lang.String[]", "org.apache.cassandra.hadoop.ColumnFamilySplit.getLocations()"], ["void", "org.apache.cassandra.hadoop.ColumnFamilySplit.write(java.io.DataOutput)"], ["void", "org.apache.cassandra.hadoop.ColumnFamilySplit.readFields(java.io.DataInput)"], ["java.lang.String", "org.apache.cassandra.hadoop.ColumnFamilySplit.toString()"], ["org.apache.cassandra.hadoop.ColumnFamilySplit", "org.apache.cassandra.hadoop.ColumnFamilySplit.read(java.io.DataInput)"], ["org.apache.cassandra.hadoop.ConfigHelper", "org.apache.cassandra.hadoop.ConfigHelper()"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputColumnFamily(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputColumnFamily(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspace(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputColumnFamily(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputColumnFamily(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setRangeBatchSize(org.apache.hadoop.conf.Configuration, int)"], ["int", "org.apache.cassandra.hadoop.ConfigHelper.getRangeBatchSize(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputSplitSize(org.apache.hadoop.conf.Configuration, int)"], ["int", "org.apache.cassandra.hadoop.ConfigHelper.getInputSplitSize(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputSplitSizeInMb(org.apache.hadoop.conf.Configuration, int)"], ["int", "org.apache.cassandra.hadoop.ConfigHelper.getInputSplitSizeInMb(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputSlicePredicate(org.apache.hadoop.conf.Configuration, org.apache.cassandra.thrift.SlicePredicate)"], ["org.apache.cassandra.thrift.SlicePredicate", "org.apache.cassandra.hadoop.ConfigHelper.getInputSlicePredicate(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputRange(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputRange(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.thrift.IndexExpression>)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputRange(org.apache.hadoop.conf.Configuration, java.util.List<org.apache.cassandra.thrift.IndexExpression>)"], ["org.apache.cassandra.thrift.KeyRange", "org.apache.cassandra.hadoop.ConfigHelper.getInputKeyRange(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspace(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspace(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspaceUserNameAndPassword(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspaceUserName(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspaceUserName(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspacePassword(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspacePassword(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspaceUserNameAndPassword(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspaceUserName(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspaceUserName(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspacePassword(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspacePassword(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getInputColumnFamily(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getOutputColumnFamily(org.apache.hadoop.conf.Configuration)"], ["boolean", "org.apache.cassandra.hadoop.ConfigHelper.getInputIsWide(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getReadConsistencyLevel(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setReadConsistencyLevel(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getWriteConsistencyLevel(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setWriteConsistencyLevel(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["int", "org.apache.cassandra.hadoop.ConfigHelper.getInputRpcPort(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputRpcPort(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getInputInitialAddress(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputInitialAddress(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setInputPartitioner(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.hadoop.ConfigHelper.getInputPartitioner(org.apache.hadoop.conf.Configuration)"], ["int", "org.apache.cassandra.hadoop.ConfigHelper.getOutputRpcPort(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputRpcPort(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getOutputInitialAddress(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputInitialAddress(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputPartitioner(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.hadoop.ConfigHelper.getOutputPartitioner(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getOutputCompressionClass(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.ConfigHelper.getOutputCompressionChunkLength(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputCompressionClass(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputCompressionChunkLength(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setThriftFramedTransportSizeInMb(org.apache.hadoop.conf.Configuration, int)"], ["int", "org.apache.cassandra.hadoop.ConfigHelper.getThriftFramedTransportSize(org.apache.hadoop.conf.Configuration)"], ["boolean", "org.apache.cassandra.hadoop.ConfigHelper.getOutputLocalDCOnly(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.ConfigHelper.setOutputLocalDCOnly(org.apache.hadoop.conf.Configuration, boolean)"], ["org.apache.cassandra.thrift.Cassandra$Client", "org.apache.cassandra.hadoop.ConfigHelper.getClientFromInputAddressList(org.apache.hadoop.conf.Configuration)"], ["org.apache.cassandra.thrift.Cassandra$Client", "org.apache.cassandra.hadoop.ConfigHelper.getClientFromOutputAddressList(org.apache.hadoop.conf.Configuration)"], ["org.apache.cassandra.thrift.Cassandra$Client", "org.apache.cassandra.hadoop.ConfigHelper.createConnection(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.Integer)"], ["org.apache.cassandra.thrift.ITransportFactory", "org.apache.cassandra.hadoop.ConfigHelper.getClientTransportFactory(org.apache.hadoop.conf.Configuration)"], ["org.apache.cassandra.hadoop.HadoopCompat", "org.apache.cassandra.hadoop.HadoopCompat()"], ["boolean", "org.apache.cassandra.hadoop.HadoopCompat.isVersion2x()"], ["org.apache.hadoop.mapreduce.JobContext", "org.apache.cassandra.hadoop.HadoopCompat.newJobContext(org.apache.hadoop.conf.Configuration, org.apache.hadoop.mapreduce.JobID)"], ["org.apache.hadoop.mapreduce.TaskAttemptContext", "org.apache.cassandra.hadoop.HadoopCompat.newTaskAttemptContext(org.apache.hadoop.conf.Configuration, org.apache.hadoop.mapreduce.TaskAttemptID)"], ["org.apache.hadoop.mapreduce.MapContext", "org.apache.cassandra.hadoop.HadoopCompat.newMapContext(org.apache.hadoop.conf.Configuration, org.apache.hadoop.mapreduce.TaskAttemptID, org.apache.hadoop.mapreduce.RecordReader, org.apache.hadoop.mapreduce.RecordWriter, org.apache.hadoop.mapreduce.OutputCommitter, org.apache.hadoop.mapreduce.StatusReporter, org.apache.hadoop.mapreduce.InputSplit)"], ["org.apache.hadoop.mapreduce.Counter", "org.apache.cassandra.hadoop.HadoopCompat.newGenericCounter(java.lang.String, java.lang.String, long)"], ["org.apache.hadoop.conf.Configuration", "org.apache.cassandra.hadoop.HadoopCompat.getConfiguration(org.apache.hadoop.mapreduce.JobContext)"], ["void", "org.apache.cassandra.hadoop.HadoopCompat.setStatus(org.apache.hadoop.mapreduce.TaskAttemptContext, java.lang.String)"], ["org.apache.hadoop.mapreduce.TaskAttemptID", "org.apache.cassandra.hadoop.HadoopCompat.getTaskAttemptID(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["org.apache.hadoop.mapreduce.Counter", "org.apache.cassandra.hadoop.HadoopCompat.getCounter(org.apache.hadoop.mapreduce.TaskInputOutputContext, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.HadoopCompat.progress(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.HadoopCompat.incrementCounter(org.apache.hadoop.mapreduce.Counter, long)"], ["org.apache.cassandra.hadoop.ReporterWrapper", "org.apache.cassandra.hadoop.ReporterWrapper(org.apache.hadoop.mapred.Reporter)"], ["org.apache.hadoop.mapred.Counters$Counter", "org.apache.cassandra.hadoop.ReporterWrapper.getCounter(java.lang.Enum<?>)"], ["org.apache.hadoop.mapred.Counters$Counter", "org.apache.cassandra.hadoop.ReporterWrapper.getCounter(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.ReporterWrapper.incrCounter(java.lang.Enum<?>, long)"], ["void", "org.apache.cassandra.hadoop.ReporterWrapper.incrCounter(java.lang.String, java.lang.String, long)"], ["org.apache.hadoop.mapred.InputSplit", "org.apache.cassandra.hadoop.ReporterWrapper.getInputSplit()"], ["void", "org.apache.cassandra.hadoop.ReporterWrapper.progress()"], ["float", "org.apache.cassandra.hadoop.ReporterWrapper.getProgress()"], ["void", "org.apache.cassandra.hadoop.ReporterWrapper.setStatus(java.lang.String)"], ["org.apache.hadoop.mapreduce.Counter", "org.apache.cassandra.hadoop.ReporterWrapper.getCounter(java.lang.String, java.lang.String)"], ["org.apache.hadoop.mapreduce.Counter", "org.apache.cassandra.hadoop.ReporterWrapper.getCounter(java.lang.Enum)"], ["org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat$NullOutputCommitter", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat$NullOutputCommitter()"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat$NullOutputCommitter.abortTask(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat$NullOutputCommitter.cleanupJob(org.apache.hadoop.mapreduce.JobContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat$NullOutputCommitter.commitTask(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat$NullOutputCommitter.needsTaskCommit(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat$NullOutputCommitter.setupJob(org.apache.hadoop.mapreduce.JobContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat$NullOutputCommitter.setupTask(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat()"], ["org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getRecordWriter(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.mapred.JobConf, java.lang.String, org.apache.hadoop.util.Progressable)"], ["org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getRecordWriter(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.checkOutputSpecs(org.apache.hadoop.mapreduce.JobContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.checkOutputSpecs(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.mapred.JobConf)"], ["org.apache.hadoop.mapreduce.OutputCommitter", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getOutputCommitter(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableSchema(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableInsertStatement(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableSchema(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableInsertStatement(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setDeleteSourceOnSuccess(org.apache.hadoop.conf.Configuration, boolean)"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getDeleteSourceOnSuccess(org.apache.hadoop.conf.Configuration)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableAlias(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableForAlias(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setIgnoreHosts(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setIgnoreHosts(org.apache.hadoop.conf.Configuration, java.lang.String...)"], ["org.apache.hadoop.mapreduce.RecordWriter", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getRecordWriter(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["org.apache.hadoop.mapred.RecordWriter", "org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getRecordWriter(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.mapred.JobConf, java.lang.String, org.apache.hadoop.util.Progressable)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$1.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$1.onSuccess(java.lang.Object)"], ["org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$ExternalClient", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$ExternalClient(org.apache.hadoop.conf.Configuration)"], ["org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$NullOutputHandler", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$NullOutputHandler()"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$NullOutputHandler.output(java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$NullOutputHandler.debug(java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$NullOutputHandler.warn(java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter$NullOutputHandler.warn(java.lang.String, java.lang.Throwable)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.write(java.lang.Object, java.util.List<java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.close(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.close(org.apache.hadoop.mapred.Reporter)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.write(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.hadoop.cql3.CqlConfigHelper", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper()"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputColumns(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCQLPageRowSize(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputWhereClauses(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setOutputCql(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCql(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setUserNameAndPassword(org.apache.hadoop.conf.Configuration, java.lang.String, java.lang.String)"], ["int", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativePort(org.apache.hadoop.conf.Configuration)"], ["int", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputNativePort(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputcolumns(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputWhereClauses(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCql(org.apache.hadoop.conf.Configuration)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCql(org.apache.hadoop.conf.Configuration)"], ["com.datastax.driver.core.Cluster", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCluster(java.lang.String, org.apache.hadoop.conf.Configuration)"], ["com.datastax.driver.core.Cluster", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCluster(java.lang.String[], org.apache.hadoop.conf.Configuration)"], ["com.datastax.driver.core.Cluster", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCluster(java.lang.String, org.apache.hadoop.conf.Configuration)"], ["com.datastax.driver.core.Cluster", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCluster(java.lang.String[], org.apache.hadoop.conf.Configuration)"], ["com.datastax.driver.core.Cluster", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getCluster(java.lang.String[], org.apache.hadoop.conf.Configuration, int)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCoreConnections(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputMaxConnections(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputMaxSimultReqPerConnections(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeConnectionTimeout(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReadConnectionTimeout(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReceiveBufferSize(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSendBufferSize(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSolinger(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeTcpNodelay(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeAuthProvider(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLTruststorePath(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLKeystorePath(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLKeystorePassword(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLTruststorePassword(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLCipherSuites(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReuseAddress(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeKeepAlive(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativePort(org.apache.hadoop.conf.Configuration, java.lang.String)"], ["org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable", "org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable(com.datastax.driver.core.TokenRange, java.util.Set<com.datastax.driver.core.Host>, org.apache.hadoop.conf.Configuration, com.datastax.driver.core.Session)"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable.call()"], ["org.apache.cassandra.hadoop.cql3.CqlInputFormat", "org.apache.cassandra.hadoop.cql3.CqlInputFormat()"], ["org.apache.hadoop.mapred.RecordReader<java.lang.Long, com.datastax.driver.core.Row>", "org.apache.cassandra.hadoop.cql3.CqlInputFormat.getRecordReader(org.apache.hadoop.mapred.InputSplit, org.apache.hadoop.mapred.JobConf, org.apache.hadoop.mapred.Reporter)"], ["org.apache.hadoop.mapreduce.RecordReader<java.lang.Long, com.datastax.driver.core.Row>", "org.apache.cassandra.hadoop.cql3.CqlInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit, org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["org.apache.hadoop.mapred.InputSplit[]", "org.apache.cassandra.hadoop.cql3.CqlInputFormat.getSplits(org.apache.hadoop.mapred.JobConf, int)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat$NullOutputCommitter.abortTask(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat$NullOutputCommitter.cleanupJob(org.apache.hadoop.mapreduce.JobContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat$NullOutputCommitter.commitTask(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat$NullOutputCommitter.needsTaskCommit(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat$NullOutputCommitter.setupJob(org.apache.hadoop.mapreduce.JobContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat$NullOutputCommitter.setupTask(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["org.apache.cassandra.hadoop.cql3.CqlOutputFormat", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat()"], ["void", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat.checkOutputSpecs(org.apache.hadoop.mapreduce.JobContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat.checkOutputSpecs(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.mapred.JobConf)"], ["org.apache.hadoop.mapreduce.OutputCommitter", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getOutputCommitter(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["org.apache.cassandra.hadoop.cql3.CqlRecordWriter", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getRecordWriter(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.mapred.JobConf, java.lang.String, org.apache.hadoop.util.Progressable)"], ["org.apache.cassandra.hadoop.cql3.CqlRecordWriter", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getRecordWriter(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["org.apache.hadoop.mapreduce.RecordWriter", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getRecordWriter(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["org.apache.hadoop.mapred.RecordWriter", "org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getRecordWriter(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.mapred.JobConf, java.lang.String, org.apache.hadoop.util.Progressable)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$1.apply(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$1.apply(java.lang.Object)"], ["org.apache.cassandra.hadoop.cql3.CqlRecordReader$RowIterator", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$RowIterator(org.apache.cassandra.hadoop.cql3.CqlRecordReader)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.setRow(com.datastax.driver.core.Row)"], ["com.datastax.driver.core.ColumnDefinitions", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getColumnDefinitions()"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.isNull(int)"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.isNull(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getObject(int)"], ["<T> T", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.get(int, java.lang.Class<T>)"], ["<T> T", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.get(int, com.google.common.reflect.TypeToken<T>)"], ["<T> T", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.get(int, com.datastax.driver.core.TypeCodec<T>)"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getObject(java.lang.String)"], ["<T> T", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.get(java.lang.String, java.lang.Class<T>)"], ["<T> T", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.get(java.lang.String, com.google.common.reflect.TypeToken<T>)"], ["<T> T", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.get(java.lang.String, com.datastax.driver.core.TypeCodec<T>)"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getBool(int)"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getBool(java.lang.String)"], ["short", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getShort(int)"], ["short", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getShort(java.lang.String)"], ["byte", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getByte(int)"], ["byte", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getByte(java.lang.String)"], ["int", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getInt(int)"], ["int", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getInt(java.lang.String)"], ["long", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getLong(int)"], ["long", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getLong(java.lang.String)"], ["java.util.Date", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getTimestamp(int)"], ["java.util.Date", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getTimestamp(java.lang.String)"], ["com.datastax.driver.core.LocalDate", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getDate(int)"], ["com.datastax.driver.core.LocalDate", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getDate(java.lang.String)"], ["long", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getTime(int)"], ["long", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getTime(java.lang.String)"], ["float", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getFloat(int)"], ["float", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getFloat(java.lang.String)"], ["double", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getDouble(int)"], ["double", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getDouble(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getBytesUnsafe(int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getBytesUnsafe(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getBytes(int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getBytes(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getString(int)"], ["java.lang.String", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getString(java.lang.String)"], ["java.math.BigInteger", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getVarint(int)"], ["java.math.BigInteger", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getVarint(java.lang.String)"], ["java.math.BigDecimal", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getDecimal(int)"], ["java.math.BigDecimal", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getDecimal(java.lang.String)"], ["java.util.UUID", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getUUID(int)"], ["java.util.UUID", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getUUID(java.lang.String)"], ["java.net.InetAddress", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getInet(int)"], ["java.net.InetAddress", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getInet(java.lang.String)"], ["<T> java.util.List<T>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getList(int, java.lang.Class<T>)"], ["<T> java.util.List<T>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getList(int, com.google.common.reflect.TypeToken<T>)"], ["<T> java.util.List<T>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getList(java.lang.String, java.lang.Class<T>)"], ["<T> java.util.List<T>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getList(java.lang.String, com.google.common.reflect.TypeToken<T>)"], ["<T> java.util.Set<T>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getSet(int, java.lang.Class<T>)"], ["<T> java.util.Set<T>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getSet(int, com.google.common.reflect.TypeToken<T>)"], ["<T> java.util.Set<T>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getSet(java.lang.String, java.lang.Class<T>)"], ["<T> java.util.Set<T>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getSet(java.lang.String, com.google.common.reflect.TypeToken<T>)"], ["<K, V> java.util.Map<K, V>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getMap(int, java.lang.Class<K>, java.lang.Class<V>)"], ["<K, V> java.util.Map<K, V>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getMap(int, com.google.common.reflect.TypeToken<K>, com.google.common.reflect.TypeToken<V>)"], ["<K, V> java.util.Map<K, V>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getMap(java.lang.String, java.lang.Class<K>, java.lang.Class<V>)"], ["<K, V> java.util.Map<K, V>", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getMap(java.lang.String, com.google.common.reflect.TypeToken<K>, com.google.common.reflect.TypeToken<V>)"], ["com.datastax.driver.core.UDTValue", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getUDTValue(int)"], ["com.datastax.driver.core.UDTValue", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getUDTValue(java.lang.String)"], ["com.datastax.driver.core.TupleValue", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getTupleValue(int)"], ["com.datastax.driver.core.TupleValue", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getTupleValue(java.lang.String)"], ["com.datastax.driver.core.Token", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getToken(int)"], ["com.datastax.driver.core.Token", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getToken(java.lang.String)"], ["com.datastax.driver.core.Token", "org.apache.cassandra.hadoop.cql3.CqlRecordReader$WrappedRow.getPartitionKeyToken()"], ["org.apache.cassandra.hadoop.cql3.CqlRecordReader", "org.apache.cassandra.hadoop.cql3.CqlRecordReader()"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.initialize(org.apache.hadoop.mapreduce.InputSplit, org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.close()"], ["java.lang.Long", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.getCurrentKey()"], ["com.datastax.driver.core.Row", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.getCurrentValue()"], ["float", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.getProgress()"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.nextKeyValue()"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.next(java.lang.Long, com.datastax.driver.core.Row)"], ["long", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.getPos()"], ["java.lang.Long", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.createKey()"], ["com.datastax.driver.core.Row", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.createValue()"], ["int", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.getNativeProtocolVersion()"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.getCurrentValue()"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.getCurrentKey()"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.createValue()"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.createKey()"], ["boolean", "org.apache.cassandra.hadoop.cql3.CqlRecordReader.next(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.hadoop.cql3.CqlRecordWriter$NativeRingCache", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter$NativeRingCache(org.apache.hadoop.conf.Configuration, com.datastax.driver.core.Metadata)"], ["com.datastax.driver.core.TokenRange", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter$NativeRingCache.getRange(java.nio.ByteBuffer)"], ["org.apache.cassandra.hadoop.cql3.CqlRecordWriter$RangeClient", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter$RangeClient(java.util.List<java.net.InetAddress>)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter$RangeClient.put(java.util.List<java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter$RangeClient.run()"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter$RangeClient.close()"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close(org.apache.hadoop.mapreduce.TaskAttemptContext)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close(org.apache.hadoop.mapred.Reporter)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close()"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter.write(java.util.Map<java.lang.String, java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.hadoop.cql3.CqlRecordWriter.write(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy$1.apply(java.lang.Object)"], ["org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy(java.lang.String[])"], ["void", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.init(com.datastax.driver.core.Cluster, java.util.Collection<com.datastax.driver.core.Host>)"], ["void", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.close()"], ["com.datastax.driver.core.HostDistance", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.distance(com.datastax.driver.core.Host)"], ["void", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onAdd(com.datastax.driver.core.Host)"], ["void", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onUp(com.datastax.driver.core.Host)"], ["void", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onDown(com.datastax.driver.core.Host)"], ["void", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onRemove(com.datastax.driver.core.Host)"], ["void", "org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onSuspected(com.datastax.driver.core.Host)"], ["org.apache.cassandra.hints.ChecksummedDataInput$Position", "org.apache.cassandra.hints.ChecksummedDataInput$Position(long)"], ["long", "org.apache.cassandra.hints.ChecksummedDataInput$Position.subtract(org.apache.cassandra.hints.InputPosition)"], ["org.apache.cassandra.hints.ChecksummedDataInput", "org.apache.cassandra.hints.ChecksummedDataInput.open(java.io.File)"], ["boolean", "org.apache.cassandra.hints.ChecksummedDataInput.isEOF()"], ["org.apache.cassandra.hints.InputPosition", "org.apache.cassandra.hints.ChecksummedDataInput.getSeekPosition()"], ["void", "org.apache.cassandra.hints.ChecksummedDataInput.seek(org.apache.cassandra.hints.InputPosition)"], ["void", "org.apache.cassandra.hints.ChecksummedDataInput.resetCrc()"], ["void", "org.apache.cassandra.hints.ChecksummedDataInput.limit(long)"], ["void", "org.apache.cassandra.hints.ChecksummedDataInput.resetLimit()"], ["void", "org.apache.cassandra.hints.ChecksummedDataInput.checkLimit(int)"], ["long", "org.apache.cassandra.hints.ChecksummedDataInput.bytesPastLimit()"], ["boolean", "org.apache.cassandra.hints.ChecksummedDataInput.checkCrc()"], ["void", "org.apache.cassandra.hints.ChecksummedDataInput.readFully(byte[])"], ["int", "org.apache.cassandra.hints.ChecksummedDataInput.read(byte[], int, int)"], ["void", "org.apache.cassandra.hints.ChecksummedDataInput.tryUncacheRead()"], ["void", "org.apache.cassandra.hints.ChecksummedDataInput.close()"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.hints.ChecksummedDataInput.getChannel()"], ["org.apache.cassandra.hints.CompressedChecksummedDataInput$Position", "org.apache.cassandra.hints.CompressedChecksummedDataInput$Position(long, long, int)"], ["long", "org.apache.cassandra.hints.CompressedChecksummedDataInput$Position.subtract(org.apache.cassandra.hints.InputPosition)"], ["org.apache.cassandra.hints.CompressedChecksummedDataInput", "org.apache.cassandra.hints.CompressedChecksummedDataInput(org.apache.cassandra.io.util.ChannelProxy, org.apache.cassandra.io.compress.ICompressor, long)"], ["boolean", "org.apache.cassandra.hints.CompressedChecksummedDataInput.isEOF()"], ["long", "org.apache.cassandra.hints.CompressedChecksummedDataInput.getSourcePosition()"], ["org.apache.cassandra.hints.InputPosition", "org.apache.cassandra.hints.CompressedChecksummedDataInput.getSeekPosition()"], ["void", "org.apache.cassandra.hints.CompressedChecksummedDataInput.seek(org.apache.cassandra.hints.InputPosition)"], ["void", "org.apache.cassandra.hints.CompressedChecksummedDataInput.close()"], ["org.apache.cassandra.hints.ChecksummedDataInput", "org.apache.cassandra.hints.CompressedChecksummedDataInput.upgradeInput(org.apache.cassandra.hints.ChecksummedDataInput, org.apache.cassandra.io.compress.ICompressor)"], ["org.apache.cassandra.hints.CompressedHintsWriter", "org.apache.cassandra.hints.CompressedHintsWriter(java.io.File, org.apache.cassandra.hints.HintsDescriptor, java.io.File, java.nio.channels.FileChannel, int, java.util.zip.CRC32)"], ["void", "org.apache.cassandra.hints.CompressedHintsWriter.fsync()"], ["void", "org.apache.cassandra.hints.CompressedHintsWriter.close()"], ["long", "org.apache.cassandra.hints.EncodedHintMessage$Serializer.serializedSize(org.apache.cassandra.hints.EncodedHintMessage, int)"], ["void", "org.apache.cassandra.hints.EncodedHintMessage$Serializer.serialize(org.apache.cassandra.hints.EncodedHintMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.hints.EncodedHintMessage", "org.apache.cassandra.hints.EncodedHintMessage$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.hints.EncodedHintMessage$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.hints.EncodedHintMessage$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.hints.EncodedHintMessage$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.hints.EncryptedChecksummedDataInput$Position", "org.apache.cassandra.hints.EncryptedChecksummedDataInput$Position(long, long, int)"], ["long", "org.apache.cassandra.hints.EncryptedChecksummedDataInput$Position.subtract(org.apache.cassandra.hints.InputPosition)"], ["boolean", "org.apache.cassandra.hints.EncryptedChecksummedDataInput.isEOF()"], ["long", "org.apache.cassandra.hints.EncryptedChecksummedDataInput.getSourcePosition()"], ["org.apache.cassandra.hints.InputPosition", "org.apache.cassandra.hints.EncryptedChecksummedDataInput.getSeekPosition()"], ["void", "org.apache.cassandra.hints.EncryptedChecksummedDataInput.seek(org.apache.cassandra.hints.InputPosition)"], ["org.apache.cassandra.hints.ChecksummedDataInput", "org.apache.cassandra.hints.EncryptedChecksummedDataInput.upgradeInput(org.apache.cassandra.hints.ChecksummedDataInput, javax.crypto.Cipher, org.apache.cassandra.io.compress.ICompressor)"], ["void", "org.apache.cassandra.hints.EncryptedHintsWriter.fsync()"], ["void", "org.apache.cassandra.hints.EncryptedHintsWriter.close()"], ["long", "org.apache.cassandra.hints.Hint$Serializer.serializedSize(org.apache.cassandra.hints.Hint, int)"], ["void", "org.apache.cassandra.hints.Hint$Serializer.serialize(org.apache.cassandra.hints.Hint, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.hints.Hint", "org.apache.cassandra.hints.Hint$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.hints.Hint$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.hints.Hint$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.hints.Hint$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.hints.Hint", "org.apache.cassandra.hints.Hint.create(org.apache.cassandra.db.Mutation, long)"], ["org.apache.cassandra.hints.Hint", "org.apache.cassandra.hints.Hint.create(org.apache.cassandra.db.Mutation, long, int)"], ["org.apache.cassandra.hints.HintMessage$Serializer", "org.apache.cassandra.hints.HintMessage$Serializer()"], ["long", "org.apache.cassandra.hints.HintMessage$Serializer.serializedSize(org.apache.cassandra.hints.HintMessage, int)"], ["void", "org.apache.cassandra.hints.HintMessage$Serializer.serialize(org.apache.cassandra.hints.HintMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.hints.HintMessage", "org.apache.cassandra.hints.HintMessage$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.hints.HintMessage$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.hints.HintMessage$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.hints.HintMessage$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["long", "org.apache.cassandra.hints.HintResponse$Serializer.serializedSize(org.apache.cassandra.hints.HintResponse, int)"], ["void", "org.apache.cassandra.hints.HintResponse$Serializer.serialize(org.apache.cassandra.hints.HintResponse, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.hints.HintResponse", "org.apache.cassandra.hints.HintResponse$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.hints.HintResponse$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.hints.HintResponse$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.hints.HintResponse$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.hints.HintVerbHandler", "org.apache.cassandra.hints.HintVerbHandler()"], ["void", "org.apache.cassandra.hints.HintVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.hints.HintMessage>, int)"], ["void", "org.apache.cassandra.hints.HintsBuffer$Allocation.close()"], ["void", "org.apache.cassandra.hints.HintsBufferPool.close()"], ["boolean", "org.apache.cassandra.hints.HintsDescriptor.isCompressed()"], ["boolean", "org.apache.cassandra.hints.HintsDescriptor.isEncrypted()"], ["org.apache.cassandra.io.compress.ICompressor", "org.apache.cassandra.hints.HintsDescriptor.createCompressor()"], ["javax.crypto.Cipher", "org.apache.cassandra.hints.HintsDescriptor.getCipher()"], ["java.lang.String", "org.apache.cassandra.hints.HintsDescriptor.toString()"], ["boolean", "org.apache.cassandra.hints.HintsDescriptor.equals(java.lang.Object)"], ["int", "org.apache.cassandra.hints.HintsDescriptor.hashCode()"], ["void", "org.apache.cassandra.hints.HintsDispatchExecutor$DispatchHintsTask.run()"], ["void", "org.apache.cassandra.hints.HintsDispatchExecutor$TransferHintsTask.run()"], ["void", "org.apache.cassandra.hints.HintsDispatchTrigger.run()"], ["org.apache.cassandra.hints.HintsDispatcher$Action[]", "org.apache.cassandra.hints.HintsDispatcher$Action.values()"], ["org.apache.cassandra.hints.HintsDispatcher$Action", "org.apache.cassandra.hints.HintsDispatcher$Action.valueOf(java.lang.String)"], ["org.apache.cassandra.hints.HintsDispatcher$Callback$Outcome[]", "org.apache.cassandra.hints.HintsDispatcher$Callback$Outcome.values()"], ["org.apache.cassandra.hints.HintsDispatcher$Callback$Outcome", "org.apache.cassandra.hints.HintsDispatcher$Callback$Outcome.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.hints.HintsDispatcher$Callback.onFailure(java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason)"], ["void", "org.apache.cassandra.hints.HintsDispatcher$Callback.response(org.apache.cassandra.net.MessageIn)"], ["boolean", "org.apache.cassandra.hints.HintsDispatcher$Callback.isLatencyForSnitch()"], ["boolean", "org.apache.cassandra.hints.HintsDispatcher$Callback.supportsBackPressure()"], ["void", "org.apache.cassandra.hints.HintsDispatcher.close()"], ["void", "org.apache.cassandra.hints.HintsReader.close()"], ["org.apache.cassandra.hints.HintsDescriptor", "org.apache.cassandra.hints.HintsReader.descriptor()"], ["org.apache.cassandra.hints.ChecksummedDataInput", "org.apache.cassandra.hints.HintsReader.getInput()"], ["void", "org.apache.cassandra.hints.HintsService.registerMBean()"], ["void", "org.apache.cassandra.hints.HintsService.write(java.lang.Iterable<java.util.UUID>, org.apache.cassandra.hints.Hint)"], ["void", "org.apache.cassandra.hints.HintsService.write(java.util.UUID, org.apache.cassandra.hints.Hint)"], ["void", "org.apache.cassandra.hints.HintsService.flushAndFsyncBlockingly(java.lang.Iterable<java.util.UUID>)"], ["synchronized", "org.apache.cassandra.hints.HintsService.void startDispatch()"], ["void", "org.apache.cassandra.hints.HintsService.pauseDispatch()"], ["void", "org.apache.cassandra.hints.HintsService.resumeDispatch()"], ["synchronized", "org.apache.cassandra.hints.HintsService.void shutdownBlocking()"], ["void", "org.apache.cassandra.hints.HintsService.deleteAllHints()"], ["void", "org.apache.cassandra.hints.HintsService.deleteAllHintsForEndpoint(java.lang.String)"], ["void", "org.apache.cassandra.hints.HintsService.deleteAllHintsForEndpoint(java.net.InetAddress)"], ["void", "org.apache.cassandra.hints.HintsService.excise(java.util.UUID)"], ["java.util.concurrent.Future", "org.apache.cassandra.hints.HintsService.transferHints(java.util.function.Supplier<java.util.UUID>)"], ["boolean", "org.apache.cassandra.hints.HintsService.isShutDown()"], ["void", "org.apache.cassandra.hints.HintsWriteExecutor$FlushBufferPoolTask.run()"], ["void", "org.apache.cassandra.hints.HintsWriteExecutor$FlushBufferTask.run()"], ["void", "org.apache.cassandra.hints.HintsWriteExecutor$FsyncWritersTask.run()"], ["void", "org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask.run()"], ["void", "org.apache.cassandra.hints.HintsWriter$Session.close()"], ["void", "org.apache.cassandra.hints.HintsWriter.close()"], ["void", "org.apache.cassandra.hints.HintsWriter.fsync()"], ["org.apache.cassandra.hints.LegacyHintsMigrator", "org.apache.cassandra.hints.LegacyHintsMigrator(java.io.File, long)"], ["void", "org.apache.cassandra.hints.LegacyHintsMigrator.migrate()"], ["org.apache.cassandra.index.Index$CollatedViewIndexBuildingSupport", "org.apache.cassandra.index.Index$CollatedViewIndexBuildingSupport()"], ["org.apache.cassandra.index.SecondaryIndexBuilder", "org.apache.cassandra.index.Index$CollatedViewIndexBuildingSupport.getIndexBuildTask(org.apache.cassandra.db.ColumnFamilyStore, java.util.Set<org.apache.cassandra.index.Index>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["default", "org.apache.cassandra.index.Index.org.apache.cassandra.index.Index$IndexBuildingSupport getBuildTaskSupport()"], ["default", "org.apache.cassandra.index.Index.org.apache.cassandra.io.sstable.format.SSTableFlushObserver getFlushObserver(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.db.compaction.OperationType)"], ["default", "org.apache.cassandra.index.Index.void validate(org.apache.cassandra.db.ReadCommand)"], ["org.apache.cassandra.index.IndexNotAvailableException", "org.apache.cassandra.index.IndexNotAvailableException(org.apache.cassandra.index.Index)"], ["org.apache.cassandra.index.SecondaryIndexBuilder", "org.apache.cassandra.index.SecondaryIndexBuilder()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$CleanupGCTransaction.start()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$CleanupGCTransaction.onPartitionDeletion(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$CleanupGCTransaction.onRowDelete(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$CleanupGCTransaction.commit()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$IndexGCTransaction$1.onPrimaryKeyLivenessInfo(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.LivenessInfo)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$IndexGCTransaction$1.onDeletion(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row$Deletion, org.apache.cassandra.db.rows.Row$Deletion)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$IndexGCTransaction$1.onComplexDeletion(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$IndexGCTransaction$1.onCell(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.rows.Cell)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$IndexGCTransaction.start()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$IndexGCTransaction.onRowMerge(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row...)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$IndexGCTransaction.commit()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction$1.onPrimaryKeyLivenessInfo(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.LivenessInfo)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction$1.onDeletion(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row$Deletion, org.apache.cassandra.db.rows.Row$Deletion)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction$1.onComplexDeletion(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction$1.onCell(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.rows.Cell)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction.start()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction.onPartitionDeletion(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction.onRangeTombstone(org.apache.cassandra.db.RangeTombstone)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction.onInserted(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction.onUpdated(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager$WriteTimeTransaction.commit()"], ["org.apache.cassandra.index.SecondaryIndexManager", "org.apache.cassandra.index.SecondaryIndexManager(org.apache.cassandra.db.ColumnFamilyStore)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.reload()"], ["boolean", "org.apache.cassandra.index.SecondaryIndexManager.isIndexQueryable(org.apache.cassandra.index.Index)"], ["synchronized", "org.apache.cassandra.index.SecondaryIndexManager.void removeIndex(java.lang.String)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.markAllIndexesRemoved()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.rebuildIndexesBlocking(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Set<java.lang.String>)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.buildAllIndexesBlocking(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.buildIndexBlocking(org.apache.cassandra.index.Index)"], ["boolean", "org.apache.cassandra.index.SecondaryIndexManager.isIndexColumnFamilyStore(org.apache.cassandra.db.ColumnFamilyStore)"], ["boolean", "org.apache.cassandra.index.SecondaryIndexManager.isIndexColumnFamily(java.lang.String)"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.index.SecondaryIndexManager.getParentCfs(org.apache.cassandra.db.ColumnFamilyStore)"], ["java.lang.String", "org.apache.cassandra.index.SecondaryIndexManager.getParentCfsName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.index.SecondaryIndexManager.getIndexName(org.apache.cassandra.db.ColumnFamilyStore)"], ["java.lang.String", "org.apache.cassandra.index.SecondaryIndexManager.getIndexName(java.lang.String)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.markIndexBuilt(java.lang.String)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.markIndexRemoved(java.lang.String)"], ["org.apache.cassandra.index.Index", "org.apache.cassandra.index.SecondaryIndexManager.getIndexByName(java.lang.String)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.truncateAllIndexesBlocking(long)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.invalidateAllIndexesBlocking()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.flushAllIndexesBlocking()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.flushIndexesBlocking(java.util.Set<org.apache.cassandra.index.Index>)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.flushAllNonCFSBackedIndexesBlocking()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.executePreJoinTasksBlocking(boolean)"], ["boolean", "org.apache.cassandra.index.SecondaryIndexManager.hasIndexes()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.indexPartition(org.apache.cassandra.db.DecoratedKey, java.util.Set<org.apache.cassandra.index.Index>, int)"], ["int", "org.apache.cassandra.index.SecondaryIndexManager.calculateIndexingPageSize()"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.deletePartition(org.apache.cassandra.db.rows.UnfilteredRowIterator, int)"], ["org.apache.cassandra.index.Index", "org.apache.cassandra.index.SecondaryIndexManager.getBestIndexFor(org.apache.cassandra.db.filter.RowFilter)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.validate(org.apache.cassandra.db.partitions.PartitionUpdate)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.registerIndex(org.apache.cassandra.index.Index)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.unregisterIndex(org.apache.cassandra.index.Index)"], ["org.apache.cassandra.index.Index", "org.apache.cassandra.index.SecondaryIndexManager.getIndex(org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.index.transactions.UpdateTransaction", "org.apache.cassandra.index.SecondaryIndexManager.newUpdateTransaction(org.apache.cassandra.db.partitions.PartitionUpdate, org.apache.cassandra.utils.concurrent.OpOrder$Group, int)"], ["org.apache.cassandra.index.transactions.CompactionTransaction", "org.apache.cassandra.index.SecondaryIndexManager.newCompactionTransaction(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.PartitionColumns, int, int)"], ["org.apache.cassandra.index.transactions.CleanupTransaction", "org.apache.cassandra.index.SecondaryIndexManager.newCleanupTransaction(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.PartitionColumns, int)"], ["void", "org.apache.cassandra.index.SecondaryIndexManager.shutdownExecutors()"], ["org.apache.cassandra.index.TargetParser", "org.apache.cassandra.index.TargetParser()"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.statements.IndexTarget$Type>", "org.apache.cassandra.index.TargetParser.parse(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.statements.IndexTarget$Type>", "org.apache.cassandra.index.TargetParser.parse(org.apache.cassandra.config.CFMetaData, java.lang.String)"], ["void", "org.apache.cassandra.index.internal.CassandraIndex$1.begin()"], ["void", "org.apache.cassandra.index.internal.CassandraIndex$1.partitionDelete(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.index.internal.CassandraIndex$1.rangeTombstone(org.apache.cassandra.db.RangeTombstone)"], ["void", "org.apache.cassandra.index.internal.CassandraIndex$1.insertRow(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.internal.CassandraIndex$1.removeRow(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.internal.CassandraIndex$1.updateRow(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.internal.CassandraIndex$1.finish()"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.index.internal.CassandraIndex.getIndexedColumn()"], ["org.apache.cassandra.db.ClusteringComparator", "org.apache.cassandra.index.internal.CassandraIndex.getIndexComparator()"], ["org.apache.cassandra.db.ColumnFamilyStore", "org.apache.cassandra.index.internal.CassandraIndex.getIndexCfs()"], ["void", "org.apache.cassandra.index.internal.CassandraIndex.register(org.apache.cassandra.index.IndexRegistry)"], ["org.apache.cassandra.schema.IndexMetadata", "org.apache.cassandra.index.internal.CassandraIndex.getIndexMetadata()"], ["void", "org.apache.cassandra.index.internal.CassandraIndex.validate(org.apache.cassandra.db.ReadCommand)"], ["boolean", "org.apache.cassandra.index.internal.CassandraIndex.shouldBuildBlocking()"], ["boolean", "org.apache.cassandra.index.internal.CassandraIndex.dependsOn(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.index.internal.CassandraIndex.supportsExpression(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Operator)"], ["long", "org.apache.cassandra.index.internal.CassandraIndex.getEstimatedResultRows()"], ["java.util.function.BiFunction<org.apache.cassandra.db.partitions.PartitionIterator, org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.partitions.PartitionIterator>", "org.apache.cassandra.index.internal.CassandraIndex.postProcessorFor(org.apache.cassandra.db.ReadCommand)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.index.internal.CassandraIndex.getPostIndexQueryFilter(org.apache.cassandra.db.filter.RowFilter)"], ["org.apache.cassandra.index.Index$Searcher", "org.apache.cassandra.index.internal.CassandraIndex.searcherFor(org.apache.cassandra.db.ReadCommand)"], ["void", "org.apache.cassandra.index.internal.CassandraIndex.validate(org.apache.cassandra.db.partitions.PartitionUpdate)"], ["org.apache.cassandra.index.Index$Indexer", "org.apache.cassandra.index.internal.CassandraIndex.indexerFor(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.PartitionColumns, int, org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.index.transactions.IndexTransaction$Type)"], ["void", "org.apache.cassandra.index.internal.CassandraIndex.deleteStaleEntry(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.index.internal.CassandraIndex.indexCfsMetadata(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.index.internal.CassandraIndex", "org.apache.cassandra.index.internal.CassandraIndex.newIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.index.internal.CassandraIndex", "org.apache.cassandra.index.internal.CassandraIndexFunctions$1.newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.index.internal.CassandraIndex", "org.apache.cassandra.index.internal.CassandraIndexFunctions$2.newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.index.internal.CassandraIndex", "org.apache.cassandra.index.internal.CassandraIndexFunctions$3.newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.index.internal.CassandraIndexFunctions$3.addIndexClusteringColumns(org.apache.cassandra.config.CFMetaData$Builder, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.index.internal.CassandraIndex", "org.apache.cassandra.index.internal.CassandraIndexFunctions$4.newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.index.internal.CassandraIndex", "org.apache.cassandra.index.internal.CassandraIndexFunctions$5.newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.index.internal.CassandraIndex", "org.apache.cassandra.index.internal.CassandraIndexFunctions$6.newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.index.internal.CassandraIndexFunctions$6.addIndexClusteringColumns(org.apache.cassandra.config.CFMetaData$Builder, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.index.internal.CassandraIndex", "org.apache.cassandra.index.internal.CassandraIndexFunctions$7.newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["default", "org.apache.cassandra.index.internal.CassandraIndexFunctions.org.apache.cassandra.config.CFMetaData$Builder addIndexClusteringColumns(org.apache.cassandra.config.CFMetaData$Builder, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.index.internal.CassandraIndexSearcher", "org.apache.cassandra.index.internal.CassandraIndexSearcher(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.filter.RowFilter$Expression, org.apache.cassandra.index.internal.CassandraIndex)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.index.internal.CassandraIndexSearcher.search(org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.index.internal.CollatedViewIndexBuilder", "org.apache.cassandra.index.internal.CollatedViewIndexBuilder(org.apache.cassandra.db.ColumnFamilyStore, java.util.Set<org.apache.cassandra.index.Index>, org.apache.cassandra.io.sstable.ReducingKeyIterator)"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.index.internal.CollatedViewIndexBuilder.getCompactionInfo()"], ["void", "org.apache.cassandra.index.internal.CollatedViewIndexBuilder.build()"], ["org.apache.cassandra.index.internal.IndexEntry", "org.apache.cassandra.index.internal.IndexEntry(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Clustering, long, java.nio.ByteBuffer, org.apache.cassandra.db.Clustering)"], ["org.apache.cassandra.index.internal.composites.ClusteringColumnIndex", "org.apache.cassandra.index.internal.composites.ClusteringColumnIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.getIndexedValue(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.CellPath, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.buildIndexClusteringPrefix(java.nio.ByteBuffer, org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.index.internal.IndexEntry", "org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.decodeEntry(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.isStale(org.apache.cassandra.db.rows.Row, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.index.internal.composites.CollectionEntryIndex", "org.apache.cassandra.index.internal.composites.CollectionEntryIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.internal.composites.CollectionEntryIndex.getIndexedValue(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.CellPath, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.internal.composites.CollectionEntryIndex.isStale(org.apache.cassandra.db.rows.Row, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.index.internal.composites.CollectionKeyIndex", "org.apache.cassandra.index.internal.composites.CollectionKeyIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.internal.composites.CollectionKeyIndex.getIndexedValue(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.CellPath, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.internal.composites.CollectionKeyIndex.isStale(org.apache.cassandra.db.rows.Row, java.nio.ByteBuffer, int)"], ["boolean", "org.apache.cassandra.index.internal.composites.CollectionKeyIndex.supportsOperator(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase", "org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase.buildIndexClusteringPrefix(java.nio.ByteBuffer, org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.index.internal.IndexEntry", "org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase.decodeEntry(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.index.internal.composites.CollectionValueIndex", "org.apache.cassandra.index.internal.composites.CollectionValueIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.internal.composites.CollectionValueIndex.getIndexedValue(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.CellPath, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.index.internal.composites.CollectionValueIndex.buildIndexClusteringPrefix(java.nio.ByteBuffer, org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.index.internal.IndexEntry", "org.apache.cassandra.index.internal.composites.CollectionValueIndex.decodeEntry(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.index.internal.composites.CollectionValueIndex.supportsOperator(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Operator)"], ["boolean", "org.apache.cassandra.index.internal.composites.CollectionValueIndex.isStale(org.apache.cassandra.db.rows.Row, java.nio.ByteBuffer, int)"], ["boolean", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1.metadata()"], ["boolean", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1.next()"], ["void", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1.remove()"], ["void", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1.close()"], ["java.lang.Object", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1.next()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1Transform.applyToRow(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.internal.composites.CompositesSearcher$1Transform.onPartitionClose()"], ["org.apache.cassandra.index.internal.composites.CompositesSearcher", "org.apache.cassandra.index.internal.composites.CompositesSearcher(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.filter.RowFilter$Expression, org.apache.cassandra.index.internal.CassandraIndex)"], ["org.apache.cassandra.index.internal.composites.PartitionKeyIndex", "org.apache.cassandra.index.internal.composites.PartitionKeyIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.internal.composites.PartitionKeyIndex.getIndexedValue(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.CellPath, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.index.internal.composites.PartitionKeyIndex.buildIndexClusteringPrefix(java.nio.ByteBuffer, org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.index.internal.IndexEntry", "org.apache.cassandra.index.internal.composites.PartitionKeyIndex.decodeEntry(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.index.internal.composites.PartitionKeyIndex.isStale(org.apache.cassandra.db.rows.Row, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.index.internal.composites.RegularColumnIndex", "org.apache.cassandra.index.internal.composites.RegularColumnIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.internal.composites.RegularColumnIndex.getIndexedValue(java.nio.ByteBuffer, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.CellPath, java.nio.ByteBuffer)"], ["org.apache.cassandra.db.CBuilder", "org.apache.cassandra.index.internal.composites.RegularColumnIndex.buildIndexClusteringPrefix(java.nio.ByteBuffer, org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.db.rows.CellPath)"], ["org.apache.cassandra.index.internal.IndexEntry", "org.apache.cassandra.index.internal.composites.RegularColumnIndex.decodeEntry(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.index.internal.composites.RegularColumnIndex.isStale(org.apache.cassandra.db.rows.Row, java.nio.ByteBuffer, int)"], ["org.apache.cassandra.index.internal.keys.KeysIndex", "org.apache.cassandra.index.internal.keys.KeysIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.config.CFMetaData$Builder", "org.apache.cassandra.index.internal.keys.KeysIndex.addIndexClusteringColumns(org.apache.cassandra.config.CFMetaData$Builder, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.index.internal.IndexEntry", "org.apache.cassandra.index.internal.keys.KeysIndex.decodeEntry(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["boolean", "org.apache.cassandra.index.internal.keys.KeysIndex.isStale(org.apache.cassandra.db.rows.Row, java.nio.ByteBuffer, int)"], ["boolean", "org.apache.cassandra.index.internal.keys.KeysSearcher$1.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.index.internal.keys.KeysSearcher$1.metadata()"], ["boolean", "org.apache.cassandra.index.internal.keys.KeysSearcher$1.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.index.internal.keys.KeysSearcher$1.next()"], ["void", "org.apache.cassandra.index.internal.keys.KeysSearcher$1.remove()"], ["void", "org.apache.cassandra.index.internal.keys.KeysSearcher$1.close()"], ["java.lang.Object", "org.apache.cassandra.index.internal.keys.KeysSearcher$1.next()"], ["org.apache.cassandra.index.internal.keys.KeysSearcher", "org.apache.cassandra.index.internal.keys.KeysSearcher(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.filter.RowFilter$Expression, org.apache.cassandra.index.internal.CassandraIndex)"], ["void", "org.apache.cassandra.index.sasi.SASIIndex$1.begin()"], ["void", "org.apache.cassandra.index.sasi.SASIIndex$1.partitionDelete(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.index.sasi.SASIIndex$1.rangeTombstone(org.apache.cassandra.db.RangeTombstone)"], ["void", "org.apache.cassandra.index.sasi.SASIIndex$1.insertRow(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.sasi.SASIIndex$1.updateRow(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.sasi.SASIIndex$1.removeRow(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.sasi.SASIIndex$1.finish()"], ["void", "org.apache.cassandra.index.sasi.SASIIndex$1.adjustMemtableSize(long, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["org.apache.cassandra.index.SecondaryIndexBuilder", "org.apache.cassandra.index.sasi.SASIIndex$SASIIndexBuildingSupport.getIndexBuildTask(org.apache.cassandra.db.ColumnFamilyStore, java.util.Set<org.apache.cassandra.index.Index>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.index.sasi.SASIIndex", "org.apache.cassandra.index.sasi.SASIIndex(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.schema.IndexMetadata)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.index.sasi.SASIIndex.validateOptions(java.util.Map<java.lang.String, java.lang.String>, org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.index.sasi.SASIIndex.register(org.apache.cassandra.index.IndexRegistry)"], ["org.apache.cassandra.schema.IndexMetadata", "org.apache.cassandra.index.sasi.SASIIndex.getIndexMetadata()"], ["boolean", "org.apache.cassandra.index.sasi.SASIIndex.shouldBuildBlocking()"], ["boolean", "org.apache.cassandra.index.sasi.SASIIndex.indexes(org.apache.cassandra.db.PartitionColumns)"], ["boolean", "org.apache.cassandra.index.sasi.SASIIndex.dependsOn(org.apache.cassandra.config.ColumnDefinition)"], ["boolean", "org.apache.cassandra.index.sasi.SASIIndex.supportsExpression(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.index.sasi.SASIIndex.getPostIndexQueryFilter(org.apache.cassandra.db.filter.RowFilter)"], ["long", "org.apache.cassandra.index.sasi.SASIIndex.getEstimatedResultRows()"], ["void", "org.apache.cassandra.index.sasi.SASIIndex.validate(org.apache.cassandra.db.partitions.PartitionUpdate)"], ["org.apache.cassandra.index.Index$Indexer", "org.apache.cassandra.index.sasi.SASIIndex.indexerFor(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.PartitionColumns, int, org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.index.transactions.IndexTransaction$Type)"], ["org.apache.cassandra.index.Index$Searcher", "org.apache.cassandra.index.sasi.SASIIndex.searcherFor(org.apache.cassandra.db.ReadCommand)"], ["org.apache.cassandra.io.sstable.format.SSTableFlushObserver", "org.apache.cassandra.index.sasi.SASIIndex.getFlushObserver(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.db.compaction.OperationType)"], ["java.util.function.BiFunction<org.apache.cassandra.db.partitions.PartitionIterator, org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.partitions.PartitionIterator>", "org.apache.cassandra.index.sasi.SASIIndex.postProcessorFor(org.apache.cassandra.db.ReadCommand)"], ["org.apache.cassandra.index.Index$IndexBuildingSupport", "org.apache.cassandra.index.sasi.SASIIndex.getBuildTaskSupport()"], ["void", "org.apache.cassandra.index.sasi.SASIIndex.handleNotification(org.apache.cassandra.notifications.INotification, java.lang.Object)"], ["org.apache.cassandra.index.sasi.conf.ColumnIndex", "org.apache.cassandra.index.sasi.SASIIndex.getIndex()"], ["org.apache.cassandra.index.sasi.SASIIndexBuilder", "org.apache.cassandra.index.sasi.SASIIndexBuilder(org.apache.cassandra.db.ColumnFamilyStore, java.util.SortedMap<org.apache.cassandra.io.sstable.format.SSTableReader, java.util.Map<org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.index.sasi.conf.ColumnIndex>>)"], ["void", "org.apache.cassandra.index.sasi.SASIIndexBuilder.build()"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.index.sasi.SASIIndexBuilder.getCompactionInfo()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.index.sasi.SSTableIndex$DecoratedKeyFetcher.apply(java.lang.Long)"], ["int", "org.apache.cassandra.index.sasi.SSTableIndex$DecoratedKeyFetcher.hashCode()"], ["boolean", "org.apache.cassandra.index.sasi.SSTableIndex$DecoratedKeyFetcher.equals(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.SSTableIndex$DecoratedKeyFetcher.apply(java.lang.Object)"], ["org.apache.cassandra.index.sasi.SSTableIndex", "org.apache.cassandra.index.sasi.SSTableIndex(org.apache.cassandra.index.sasi.conf.ColumnIndex, java.io.File, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode", "org.apache.cassandra.index.sasi.SSTableIndex.mode()"], ["boolean", "org.apache.cassandra.index.sasi.SSTableIndex.hasMarkedPartials()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.SSTableIndex.minTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.SSTableIndex.maxTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.SSTableIndex.minKey()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.SSTableIndex.maxKey()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.SSTableIndex.search(org.apache.cassandra.index.sasi.plan.Expression)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.index.sasi.SSTableIndex.getSSTable()"], ["java.lang.String", "org.apache.cassandra.index.sasi.SSTableIndex.getPath()"], ["boolean", "org.apache.cassandra.index.sasi.SSTableIndex.reference()"], ["void", "org.apache.cassandra.index.sasi.SSTableIndex.release()"], ["void", "org.apache.cassandra.index.sasi.SSTableIndex.markObsolete()"], ["boolean", "org.apache.cassandra.index.sasi.SSTableIndex.isObsolete()"], ["boolean", "org.apache.cassandra.index.sasi.SSTableIndex.equals(java.lang.Object)"], ["int", "org.apache.cassandra.index.sasi.SSTableIndex.hashCode()"], ["java.lang.String", "org.apache.cassandra.index.sasi.SSTableIndex.toString()"], ["org.apache.cassandra.index.sasi.Term", "org.apache.cassandra.index.sasi.Term(org.apache.cassandra.index.sasi.utils.MappedBuffer, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize, boolean)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.Term.getTerm()"], ["boolean", "org.apache.cassandra.index.sasi.Term.isPartial()"], ["long", "org.apache.cassandra.index.sasi.Term.getDataOffset()"], ["int", "org.apache.cassandra.index.sasi.Term.compareTo(org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.index.sasi.Term.compareTo(org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer, boolean)"], ["java.lang.Thread", "org.apache.cassandra.index.sasi.TermIterator$1$1.newThread(java.lang.Runnable)"], ["java.util.concurrent.ExecutorService", "org.apache.cassandra.index.sasi.TermIterator$1.initialValue()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.TermIterator$1.initialValue()"], ["org.apache.cassandra.index.sasi.TermIterator", "org.apache.cassandra.index.sasi.TermIterator.build(org.apache.cassandra.index.sasi.plan.Expression, java.util.Set<org.apache.cassandra.index.sasi.SSTableIndex>)"], ["void", "org.apache.cassandra.index.sasi.TermIterator.close()"], ["org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer", "org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer.next()"], ["void", "org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer.remove()"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer.isTokenizing()"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer.normalize(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer.next()"], ["org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer", "org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer.next()"], ["void", "org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer.init(java.util.Map<java.lang.String, java.lang.String>, org.apache.cassandra.db.marshal.AbstractType)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer.hasNext()"], ["void", "org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer.reset(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer.isTokenizing()"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer.next()"], ["org.apache.cassandra.index.sasi.analyzer.DelimiterTokenizingOptions", "org.apache.cassandra.index.sasi.analyzer.DelimiterTokenizingOptions$OptionsBuilder.build()"], ["org.apache.cassandra.index.sasi.analyzer.NoOpAnalyzer", "org.apache.cassandra.index.sasi.analyzer.NoOpAnalyzer()"], ["void", "org.apache.cassandra.index.sasi.analyzer.NoOpAnalyzer.init(java.util.Map<java.lang.String, java.lang.String>, org.apache.cassandra.db.marshal.AbstractType)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.NoOpAnalyzer.hasNext()"], ["void", "org.apache.cassandra.index.sasi.analyzer.NoOpAnalyzer.reset(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.NoOpAnalyzer.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer()"], ["void", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer.init(java.util.Map<java.lang.String, java.lang.String>, org.apache.cassandra.db.marshal.AbstractType)"], ["void", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer.init(org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions, org.apache.cassandra.db.marshal.AbstractType)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer.hasNext()"], ["void", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer.reset(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder()"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder.caseSensitive(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder.upperCaseOutput(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder.lowerCaseOutput(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions$OptionsBuilder.build()"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions()"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions.isCaseSensitive()"], ["void", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions.setCaseSensitive(boolean)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions.shouldUpperCaseOutput()"], ["void", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions.setUpperCaseOutput(boolean)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions.shouldLowerCaseOutput()"], ["void", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions.setLowerCaseOutput(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions.buildFromMap(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions", "org.apache.cassandra.index.sasi.analyzer.NonTokenizingOptions.getDefaultOptions()"], ["org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer$TokenType[]", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer$TokenType.values()"], ["org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer$TokenType", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer$TokenType.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer$TokenType.getValue()"], ["org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer$TokenType", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer$TokenType.fromValue(int)"], ["org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer()"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.getToken()"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.incrementToken()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.init(java.util.Map<java.lang.String, java.lang.String>, org.apache.cassandra.db.marshal.AbstractType)"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.init(org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions, org.apache.cassandra.db.marshal.AbstractType)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.hasNext()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.reset(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.reset(java.io.InputStream)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.isTokenizing()"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer.isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yychar()"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.getText()"], ["char[]", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.getArray()"], ["byte[]", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.getBytes()"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl(java.io.Reader)"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yyclose()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yyreset(java.io.Reader)"], ["int", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yystate()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yybegin(int)"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yytext()"], ["char", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yycharat(int)"], ["int", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yylength()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.yypushback(int)"], ["int", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerImpl.getNextToken()"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder()"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.stemTerms(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.ignoreStopTerms(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.useLocale(java.util.Locale)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.caseSensitive(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.alwaysUpperCaseTerms(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.alwaysLowerCaseTerms(boolean)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.minTokenLength(int)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.maxTokenLength(int)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions$OptionsBuilder.build()"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions()"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.shouldStemTerms()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.setStemTerms(boolean)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.shouldIgnoreStopTerms()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.setIgnoreStopTerms(boolean)"], ["java.util.Locale", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.getLocale()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.setLocale(java.util.Locale)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.isCaseSensitive()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.setCaseSensitive(boolean)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.shouldUpperCaseTerms()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.setAllTermsToUpperCase(boolean)"], ["boolean", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.shouldLowerCaseTerms()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.setAllTermsToLowerCase(boolean)"], ["int", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.getMinTokenLength()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.setMinTokenLength(int)"], ["int", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.getMaxTokenLength()"], ["void", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.setMaxTokenLength(int)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.buildFromMap(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions", "org.apache.cassandra.index.sasi.analyzer.StandardTokenizerOptions.getDefaultOptions()"], ["org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$LowerCase", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$LowerCase(java.util.Locale)"], ["org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$LowerCase", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$LowerCase()"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$LowerCase.process(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$LowerCase.process(java.lang.Object)"], ["org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$NoOperation", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$NoOperation()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$NoOperation.process(java.lang.Object)"], ["org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$UpperCase", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$UpperCase(java.util.Locale)"], ["org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$UpperCase", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$UpperCase()"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$UpperCase.process(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters$UpperCase.process(java.lang.Object)"], ["org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters", "org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters()"], ["org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineBuilder", "org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineBuilder(org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask<?, ?>)"], ["org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineBuilder", "org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineBuilder.add(java.lang.String, org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask<?, ?>)"], ["org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask<?, ?>", "org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineBuilder.build()"], ["org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineExecutor", "org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineExecutor()"], ["<F, T> T", "org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineExecutor.execute(org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask<F, T>, T)"], ["org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask", "org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask()"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask.getName()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory$1.load(java.lang.Object)"], ["org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory", "org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory()"], ["org.tartarus.snowball.SnowballStemmer", "org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory.getStemmer(java.util.Locale)"], ["org.apache.cassandra.index.sasi.analyzer.filter.StemmingFilters$DefaultStemmingFilter", "org.apache.cassandra.index.sasi.analyzer.filter.StemmingFilters$DefaultStemmingFilter(java.util.Locale)"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.filter.StemmingFilters$DefaultStemmingFilter.process(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.filter.StemmingFilters$DefaultStemmingFilter.process(java.lang.Object)"], ["org.apache.cassandra.index.sasi.analyzer.filter.StemmingFilters", "org.apache.cassandra.index.sasi.analyzer.filter.StemmingFilters()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.filter.StopWordFactory$1.load(java.lang.Object)"], ["org.apache.cassandra.index.sasi.analyzer.filter.StopWordFactory", "org.apache.cassandra.index.sasi.analyzer.filter.StopWordFactory()"], ["org.apache.cassandra.index.sasi.analyzer.filter.StopWordFilters$DefaultStopWordFilter", "org.apache.cassandra.index.sasi.analyzer.filter.StopWordFilters$DefaultStopWordFilter(java.util.Locale)"], ["java.lang.String", "org.apache.cassandra.index.sasi.analyzer.filter.StopWordFilters$DefaultStopWordFilter.process(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.analyzer.filter.StopWordFilters$DefaultStopWordFilter.process(java.lang.Object)"], ["org.apache.cassandra.index.sasi.analyzer.filter.StopWordFilters", "org.apache.cassandra.index.sasi.analyzer.filter.StopWordFilters()"], ["org.apache.cassandra.index.sasi.conf.ColumnIndex", "org.apache.cassandra.index.sasi.conf.ColumnIndex(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.schema.IndexMetadata)"], ["long", "org.apache.cassandra.index.sasi.conf.ColumnIndex.index(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.sasi.conf.ColumnIndex.switchMemtable()"], ["void", "org.apache.cassandra.index.sasi.conf.ColumnIndex.switchMemtable(org.apache.cassandra.db.Memtable)"], ["void", "org.apache.cassandra.index.sasi.conf.ColumnIndex.discardMemtable(org.apache.cassandra.db.Memtable)"], ["org.apache.cassandra.index.sasi.memory.IndexMemtable", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getCurrentMemtable()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.conf.ColumnIndex.searchMemtable(org.apache.cassandra.index.sasi.plan.Expression)"], ["void", "org.apache.cassandra.index.sasi.conf.ColumnIndex.update(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getDefinition()"], ["org.apache.cassandra.io.sstable.Component", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getComponent()"], ["org.apache.cassandra.index.sasi.conf.IndexMode", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getMode()"], ["java.lang.String", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getColumnName()"], ["java.lang.String", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getIndexName()"], ["org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getAnalyzer()"], ["org.apache.cassandra.index.sasi.conf.view.View", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getView()"], ["boolean", "org.apache.cassandra.index.sasi.conf.ColumnIndex.hasSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["void", "org.apache.cassandra.index.sasi.conf.ColumnIndex.dropData(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.index.sasi.conf.ColumnIndex.dropData(long)"], ["boolean", "org.apache.cassandra.index.sasi.conf.ColumnIndex.isIndexed()"], ["boolean", "org.apache.cassandra.index.sasi.conf.ColumnIndex.isLiteral()"], ["boolean", "org.apache.cassandra.index.sasi.conf.ColumnIndex.supports(org.apache.cassandra.cql3.Operator)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.conf.ColumnIndex.getValueOf(org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.rows.Row, int)"], ["org.apache.cassandra.index.sasi.conf.DataTracker", "org.apache.cassandra.index.sasi.conf.DataTracker(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.conf.ColumnIndex)"], ["org.apache.cassandra.index.sasi.conf.view.View", "org.apache.cassandra.index.sasi.conf.DataTracker.getView()"], ["boolean", "org.apache.cassandra.index.sasi.conf.DataTracker.hasSSTable(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["void", "org.apache.cassandra.index.sasi.conf.DataTracker.dropData(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.index.sasi.conf.DataTracker.dropData(long)"], ["org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer", "org.apache.cassandra.index.sasi.conf.IndexMode.getAnalyzer(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["void", "org.apache.cassandra.index.sasi.conf.IndexMode.validateAnalyzer(java.util.Map<java.lang.String, java.lang.String>, org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.index.sasi.conf.IndexMode", "org.apache.cassandra.index.sasi.conf.IndexMode.getMode(org.apache.cassandra.config.ColumnDefinition, java.util.Optional<org.apache.cassandra.schema.IndexMetadata>)"], ["org.apache.cassandra.index.sasi.conf.IndexMode", "org.apache.cassandra.index.sasi.conf.IndexMode.getMode(org.apache.cassandra.config.ColumnDefinition, java.util.Map<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.index.sasi.conf.IndexMode.supports(org.apache.cassandra.index.sasi.plan.Expression$Op)"], ["void", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$Builder.addIndex(org.apache.cassandra.index.sasi.SSTableIndex)"], ["org.apache.cassandra.index.sasi.conf.view.TermTree", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$Builder.build()"], ["org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.compare(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.lengthInBits(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.isBitSet(java.nio.ByteBuffer, int)"], ["int", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.bitIndex(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.isPrefix(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.isPrefix(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.bitIndex(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.isBitSet(java.lang.Object, int)"], ["int", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.lengthInBits(java.lang.Object)"], ["int", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree$ByteBufferKeyAnalyzer.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.index.sasi.conf.view.PrefixTermTree", "org.apache.cassandra.index.sasi.conf.view.PrefixTermTree(java.nio.ByteBuffer, java.nio.ByteBuffer, org.apache.cassandra.index.sasi.utils.trie.Trie<java.nio.ByteBuffer, java.util.Set<org.apache.cassandra.index.sasi.SSTableIndex>>, org.apache.cassandra.utils.IntervalTree<org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term, org.apache.cassandra.index.sasi.SSTableIndex, org.apache.cassandra.utils.Interval<org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term, org.apache.cassandra.index.sasi.SSTableIndex>>, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["void", "org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Builder.addIndex(org.apache.cassandra.index.sasi.SSTableIndex)"], ["org.apache.cassandra.index.sasi.conf.view.TermTree", "org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Builder.build()"], ["org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term", "org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term.compareTo(org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term)"], ["int", "org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term.compareTo(java.lang.Object)"], ["org.apache.cassandra.index.sasi.conf.view.RangeTermTree", "org.apache.cassandra.index.sasi.conf.view.RangeTermTree(java.nio.ByteBuffer, java.nio.ByteBuffer, org.apache.cassandra.utils.IntervalTree<org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term, org.apache.cassandra.index.sasi.SSTableIndex, org.apache.cassandra.utils.Interval<org.apache.cassandra.index.sasi.conf.view.RangeTermTree$Term, org.apache.cassandra.index.sasi.SSTableIndex>>, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.index.sasi.conf.view.RangeTermTree.intervalCount()"], ["void", "org.apache.cassandra.index.sasi.conf.view.TermTree$Builder.add(org.apache.cassandra.index.sasi.SSTableIndex)"], ["org.apache.cassandra.index.sasi.conf.view.View$Key", "org.apache.cassandra.index.sasi.conf.view.View$Key(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.index.sasi.conf.view.View$Key.compareTo(org.apache.cassandra.index.sasi.conf.view.View$Key)"], ["int", "org.apache.cassandra.index.sasi.conf.view.View$Key.compareTo(java.lang.Object)"], ["org.apache.cassandra.index.sasi.conf.view.View", "org.apache.cassandra.index.sasi.conf.view.View(org.apache.cassandra.index.sasi.conf.ColumnIndex, java.util.Set<org.apache.cassandra.index.sasi.SSTableIndex>)"], ["org.apache.cassandra.index.sasi.conf.view.View", "org.apache.cassandra.index.sasi.conf.view.View(org.apache.cassandra.index.sasi.conf.ColumnIndex, java.util.Collection<org.apache.cassandra.index.sasi.SSTableIndex>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Set<org.apache.cassandra.index.sasi.SSTableIndex>)"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$InteriorNode", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$InteriorNode(org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder)"], ["boolean", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$InteriorNode.isSerializable()"], ["void", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$InteriorNode.serialize(long, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$InteriorNode.childCount()"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$InteriorNode.tokenCount()"], ["java.lang.Long", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$InteriorNode.smallestToken()"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$FactoredOffsetLeafEntry", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$FactoredOffsetLeafEntry(org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf, long, long)"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$FactoredOffsetLeafEntry.type()"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$FactoredOffsetLeafEntry.offsetData()"], ["short", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$FactoredOffsetLeafEntry.offsetExtra()"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$LeafEntry", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$LeafEntry(org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf, long)"], ["void", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$LeafEntry.serialize(java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$OverflowCollisionLeafEntry", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$OverflowCollisionLeafEntry(org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf, long, short, short)"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$OverflowCollisionLeafEntry.type()"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$OverflowCollisionLeafEntry.offsetData()"], ["short", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$OverflowCollisionLeafEntry.offsetExtra()"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$PackedCollisionLeafEntry", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$PackedCollisionLeafEntry(org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf, long, long[])"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$PackedCollisionLeafEntry.type()"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$PackedCollisionLeafEntry.offsetData()"], ["short", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$PackedCollisionLeafEntry.offsetExtra()"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$SimpleLeafEntry", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$SimpleLeafEntry(org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf, long, long)"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$SimpleLeafEntry.type()"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$SimpleLeafEntry.offsetData()"], ["short", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf$SimpleLeafEntry.offsetExtra()"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf(org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder, java.lang.Long, java.lang.Long)"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf.childCount()"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf.overflowCollisionCount()"], ["void", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf.serialize(long, java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Node", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$LevelIterator.computeNext()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$LevelIterator.computeNext()"], ["void", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Node$Header.serialize(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Node$RootHeader.serialize(java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Node", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Node(org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder, java.lang.Long, java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Node.smallestToken()"], ["java.lang.Long", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Node.largestToken()"], ["boolean", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Node.isLeaf()"], ["org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder()"], ["void", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder.add(org.apache.cassandra.index.sasi.disk.TokenTreeBuilder)"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder.finish()"], ["long", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder.getTokenCount()"], ["int", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder.serializedSize()"], ["void", "org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder.write(org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.index.sasi.disk.Descriptor$Version", "org.apache.cassandra.index.sasi.disk.Descriptor$Version(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.index.sasi.disk.Descriptor$Version.toString()"], ["org.apache.cassandra.index.sasi.disk.Descriptor", "org.apache.cassandra.index.sasi.disk.Descriptor(java.lang.String)"], ["int", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder$DynamicLeaf.tokenCount()"], ["boolean", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder$DynamicLeaf.isSerializable()"], ["org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder()"], ["org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder(org.apache.cassandra.index.sasi.disk.TokenTreeBuilder)"], ["org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder(java.util.SortedMap<java.lang.Long, com.carrotsearch.hppc.LongSet>)"], ["void", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder.add(java.lang.Long, long)"], ["void", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder.add(java.util.Iterator<org.apache.cassandra.utils.Pair<java.lang.Long, com.carrotsearch.hppc.LongSet>>)"], ["void", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder.add(java.util.SortedMap<java.lang.Long, com.carrotsearch.hppc.LongSet>)"], ["java.util.Iterator<org.apache.cassandra.utils.Pair<java.lang.Long, com.carrotsearch.hppc.LongSet>>", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder.iterator()"], ["boolean", "org.apache.cassandra.index.sasi.disk.DynamicTokenTreeBuilder.isEmpty()"], ["org.apache.cassandra.index.sasi.disk.OnDiskBlock$BlockType[]", "org.apache.cassandra.index.sasi.disk.OnDiskBlock$BlockType.values()"], ["org.apache.cassandra.index.sasi.disk.OnDiskBlock$BlockType", "org.apache.cassandra.index.sasi.disk.OnDiskBlock$BlockType.valueOf(java.lang.String)"], ["org.apache.cassandra.index.sasi.disk.OnDiskBlock$SearchResult", "org.apache.cassandra.index.sasi.disk.OnDiskBlock$SearchResult(T, int, int)"], ["org.apache.cassandra.index.sasi.disk.OnDiskBlock", "org.apache.cassandra.index.sasi.disk.OnDiskBlock(org.apache.cassandra.index.sasi.disk.Descriptor, org.apache.cassandra.index.sasi.utils.MappedBuffer, org.apache.cassandra.index.sasi.disk.OnDiskBlock$BlockType)"], ["org.apache.cassandra.index.sasi.disk.TokenTree", "org.apache.cassandra.index.sasi.disk.OnDiskBlock.getBlockIndex()"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskBlock.minOffset(org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder)"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskBlock.maxOffset(org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataBlock", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataBlock(org.apache.cassandra.index.sasi.disk.OnDiskIndex, org.apache.cassandra.index.sasi.utils.MappedBuffer)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataBlock.getRange(int, int)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataLevel", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataLevel(org.apache.cassandra.index.sasi.disk.OnDiskIndex, long, int)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$OnDiskSuperBlock", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataLevel.getSuperBlock(int)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm.getTokens()"], ["boolean", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm.isSparse()"], ["java.util.NavigableMap<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm.getSparseTokens()"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm.compareTo(org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm)"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm.compareTo(java.lang.Object)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder[]", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder.values()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder.startAt(org.apache.cassandra.index.sasi.disk.OnDiskBlock<org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm>, org.apache.cassandra.index.sasi.plan.Expression)"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder.startAt(org.apache.cassandra.index.sasi.disk.OnDiskBlock$SearchResult<org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm>, boolean)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$Level", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$Level(org.apache.cassandra.index.sasi.disk.OnDiskIndex, long, int)"], ["T", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$Level.getBlock(int)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$OnDiskSuperBlock", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$OnDiskSuperBlock(org.apache.cassandra.index.sasi.disk.OnDiskIndex, org.apache.cassandra.index.sasi.utils.MappedBuffer)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$OnDiskSuperBlock.iterator()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerBlock", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerBlock(org.apache.cassandra.index.sasi.disk.OnDiskIndex, org.apache.cassandra.index.sasi.utils.MappedBuffer)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerLevel", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerLevel(org.apache.cassandra.index.sasi.disk.OnDiskIndex, long, int)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerLevel.getPointer(org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerTerm, java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerTerm(org.apache.cassandra.index.sasi.utils.MappedBuffer, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize, boolean)"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$PointerTerm.getBlock()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$PrefetchedTokensIterator", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$PrefetchedTokensIterator(java.util.NavigableMap<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>)"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$PrefetchedTokensIterator.close()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$TermIterator", "org.apache.cassandra.index.sasi.disk.OnDiskIndex$TermIterator(org.apache.cassandra.index.sasi.disk.OnDiskIndex, int, org.apache.cassandra.index.sasi.plan.Expression, org.apache.cassandra.index.sasi.disk.OnDiskIndex$IteratorOrder)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex", "org.apache.cassandra.index.sasi.disk.OnDiskIndex(java.io.File, org.apache.cassandra.db.marshal.AbstractType<?>, com.google.common.base.Function<java.lang.Long, org.apache.cassandra.db.DecoratedKey>)"], ["boolean", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.hasMarkedPartials()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.mode()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.minTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.maxTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.minKey()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.maxKey()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.min()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.max()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.search(org.apache.cassandra.index.sasi.plan.Expression)"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.close()"], ["java.lang.String", "org.apache.cassandra.index.sasi.disk.OnDiskIndex.getIndexPath()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$DataBuilderLevel", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$DataBuilderLevel(org.apache.cassandra.io.util.SequentialWriter, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableBlock<org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryDataTerm>)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryPointerTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$DataBuilderLevel.add(org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryDataTerm)"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$DataBuilderLevel.flushSuperBlock(boolean)"], ["finalFlush()", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$DataBuilderLevel."], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$DataBuilderLevel.flushMetadata()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryPointerTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$DataBuilderLevel.add(org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryTerm)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryDataTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryDataTerm(org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder, org.apache.cassandra.index.sasi.sa.IndexedTerm, org.apache.cassandra.index.sasi.disk.TokenTreeBuilder)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryPointerTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryPointerTerm(org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder, org.apache.cassandra.index.sasi.sa.IndexedTerm, int)"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryPointerTerm.serializedSize()"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryPointerTerm.serialize(org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryTerm(org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder, org.apache.cassandra.index.sasi.sa.IndexedTerm)"], ["int", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryTerm.serializedSize()"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryTerm.serialize(org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode[]", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode.values()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode.valueOf(java.lang.String)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode.mode(java.lang.String)"], ["boolean", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode.supports(org.apache.cassandra.index.sasi.plan.Expression$Op)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableBlock", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableBlock()"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableBlock.add(T)"], ["boolean", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableBlock.hasSpaceFor(T)"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableBlock.flushAndClear(org.apache.cassandra.io.util.SequentialWriter)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableDataBlock", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableDataBlock(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode)"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableDataBlock.flushAndClear(org.apache.cassandra.io.util.SequentialWriter)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableLevel", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableLevel(org.apache.cassandra.io.util.SequentialWriter, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableBlock<T>)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$InMemoryPointerTerm", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableLevel.add(T)"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableLevel.flush()"], ["finalFlush()", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableLevel."], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$MutableLevel.flushMetadata()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize[]", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize.values()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize.isConstant()"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize.of(int)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$TermSize.sizeOf(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode, boolean)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.add(java.nio.ByteBuffer, org.apache.cassandra.db.DecoratedKey, long)"], ["long", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.estimatedMemoryUse()"], ["boolean", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.isEmpty()"], ["void", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.finish(org.apache.cassandra.utils.Pair<java.nio.ByteBuffer, java.nio.ByteBuffer>, java.io.File, org.apache.cassandra.index.sasi.sa.TermIterator)"], ["boolean", "org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.finish(java.io.File)"], ["org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter$Index", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter$Index(org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter, org.apache.cassandra.index.sasi.conf.ColumnIndex)"], ["void", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter$Index.add(java.nio.ByteBuffer, org.apache.cassandra.db.DecoratedKey, long)"], ["void", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter$Index.complete(java.util.concurrent.CountDownLatch)"], ["java.lang.String", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter$Index.filename(boolean)"], ["org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.db.compaction.OperationType, java.util.Map<org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.index.sasi.conf.ColumnIndex>)"], ["void", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter.begin()"], ["void", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter.startPartition(org.apache.cassandra.db.DecoratedKey, long)"], ["void", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter.nextUnfilteredCluster(org.apache.cassandra.db.rows.Unfiltered)"], ["void", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter.complete()"], ["org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter$Index", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter.getIndex(org.apache.cassandra.config.ColumnDefinition)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter.getDescriptor()"], ["int", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter.hashCode()"], ["boolean", "org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter.equals(java.lang.Object)"], ["org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$PartialLeaf", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$PartialLeaf(org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder, java.lang.Long, java.lang.Long, int)"], ["int", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$PartialLeaf.tokenCount()"], ["void", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$PartialLeaf.serializeData(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$PartialLeaf.isSerializable()"], ["org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$StaticLeaf", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$StaticLeaf(java.util.Iterator<org.apache.cassandra.index.sasi.disk.Token>, org.apache.cassandra.index.sasi.disk.AbstractTokenTreeBuilder$Leaf)"], ["org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$StaticLeaf", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$StaticLeaf(java.util.Iterator<org.apache.cassandra.index.sasi.disk.Token>, java.lang.Long, java.lang.Long, long, boolean)"], ["boolean", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$StaticLeaf.isLastLeaf()"], ["int", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$StaticLeaf.tokenCount()"], ["void", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$StaticLeaf.serializeData(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder$StaticLeaf.isSerializable()"], ["org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder(org.apache.cassandra.index.sasi.utils.CombinedTerm)"], ["void", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder.add(java.lang.Long, long)"], ["void", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder.add(java.util.SortedMap<java.lang.Long, com.carrotsearch.hppc.LongSet>)"], ["void", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder.add(java.util.Iterator<org.apache.cassandra.utils.Pair<java.lang.Long, com.carrotsearch.hppc.LongSet>>)"], ["boolean", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder.isEmpty()"], ["java.util.Iterator<org.apache.cassandra.utils.Pair<java.lang.Long, com.carrotsearch.hppc.LongSet>>", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder.iterator()"], ["long", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder.getTokenCount()"], ["void", "org.apache.cassandra.index.sasi.disk.StaticTokenTreeBuilder.write(org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.index.sasi.disk.Token", "org.apache.cassandra.index.sasi.disk.Token(long)"], ["java.lang.Long", "org.apache.cassandra.index.sasi.disk.Token.get()"], ["int", "org.apache.cassandra.index.sasi.disk.Token.compareTo(org.apache.cassandra.index.sasi.utils.CombinedValue<java.lang.Long>)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.disk.Token.get()"], ["int", "org.apache.cassandra.index.sasi.disk.Token.compareTo(java.lang.Object)"], ["org.apache.cassandra.index.sasi.disk.TokenTree$KeyIterator", "org.apache.cassandra.index.sasi.disk.TokenTree$KeyIterator(com.google.common.base.Function<java.lang.Long, org.apache.cassandra.db.DecoratedKey>, long[])"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.index.sasi.disk.TokenTree$KeyIterator.computeNext()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.disk.TokenTree$KeyIterator.computeNext()"], ["boolean", "org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken$1.trivialReduceIsTrivial()"], ["void", "org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken$1.reduce(int, org.apache.cassandra.db.DecoratedKey)"], ["void", "org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken$1.reduce(int, java.lang.Object)"], ["org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken", "org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken(org.apache.cassandra.index.sasi.utils.MappedBuffer, long, short, com.google.common.base.Function<java.lang.Long, org.apache.cassandra.db.DecoratedKey>)"], ["void", "org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken.merge(org.apache.cassandra.index.sasi.utils.CombinedValue<java.lang.Long>)"], ["com.carrotsearch.hppc.LongSet", "org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken.getOffsets()"], ["org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken", "org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken.getTokenAt(org.apache.cassandra.index.sasi.utils.MappedBuffer, int, short, com.google.common.base.Function<java.lang.Long, org.apache.cassandra.db.DecoratedKey>)"], ["org.apache.cassandra.index.sasi.disk.TokenTree$TokenInfo", "org.apache.cassandra.index.sasi.disk.TokenTree$TokenInfo(org.apache.cassandra.index.sasi.utils.MappedBuffer, long, short, com.google.common.base.Function<java.lang.Long, org.apache.cassandra.db.DecoratedKey>)"], ["int", "org.apache.cassandra.index.sasi.disk.TokenTree$TokenInfo.hashCode()"], ["boolean", "org.apache.cassandra.index.sasi.disk.TokenTree$TokenInfo.equals(java.lang.Object)"], ["void", "org.apache.cassandra.index.sasi.disk.TokenTree$TokenTreeIterator.close()"], ["org.apache.cassandra.index.sasi.disk.TokenTree", "org.apache.cassandra.index.sasi.disk.TokenTree(org.apache.cassandra.index.sasi.disk.Descriptor, org.apache.cassandra.index.sasi.utils.MappedBuffer)"], ["long", "org.apache.cassandra.index.sasi.disk.TokenTree.getCount()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.disk.TokenTree.iterator(com.google.common.base.Function<java.lang.Long, org.apache.cassandra.db.DecoratedKey>)"], ["org.apache.cassandra.index.sasi.disk.TokenTree$OnDiskToken", "org.apache.cassandra.index.sasi.disk.TokenTree.get(long, com.google.common.base.Function<java.lang.Long, org.apache.cassandra.db.DecoratedKey>)"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType[]", "org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType.values()"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType", "org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType.valueOf(java.lang.String)"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType", "org.apache.cassandra.index.sasi.disk.TokenTreeBuilder$EntryType.of(int)"], ["org.apache.cassandra.index.sasi.exceptions.TimeQuotaExceededException", "org.apache.cassandra.index.sasi.exceptions.TimeQuotaExceededException()"], ["org.apache.cassandra.index.sasi.memory.IndexMemtable", "org.apache.cassandra.index.sasi.memory.IndexMemtable(org.apache.cassandra.index.sasi.conf.ColumnIndex)"], ["long", "org.apache.cassandra.index.sasi.memory.IndexMemtable.index(org.apache.cassandra.db.DecoratedKey, java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.memory.IndexMemtable.search(org.apache.cassandra.index.sasi.plan.Expression)"], ["org.apache.cassandra.index.sasi.memory.KeyRangeIterator$DKIterator", "org.apache.cassandra.index.sasi.memory.KeyRangeIterator$DKIterator(java.util.Iterator<org.apache.cassandra.db.DecoratedKey>)"], ["org.apache.cassandra.index.sasi.memory.KeyRangeIterator$DKToken", "org.apache.cassandra.index.sasi.memory.KeyRangeIterator$DKToken(org.apache.cassandra.db.DecoratedKey)"], ["com.carrotsearch.hppc.LongSet", "org.apache.cassandra.index.sasi.memory.KeyRangeIterator$DKToken.getOffsets()"], ["void", "org.apache.cassandra.index.sasi.memory.KeyRangeIterator$DKToken.merge(org.apache.cassandra.index.sasi.utils.CombinedValue<java.lang.Long>)"], ["org.apache.cassandra.index.sasi.memory.KeyRangeIterator", "org.apache.cassandra.index.sasi.memory.KeyRangeIterator(java.util.concurrent.ConcurrentSkipListSet<org.apache.cassandra.db.DecoratedKey>)"], ["void", "org.apache.cassandra.index.sasi.memory.KeyRangeIterator.close()"], ["org.apache.cassandra.index.sasi.memory.MemIndex", "org.apache.cassandra.index.sasi.memory.MemIndex.forColumn(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.conf.ColumnIndex)"], ["org.apache.cassandra.index.sasi.memory.SkipListMemIndex", "org.apache.cassandra.index.sasi.memory.SkipListMemIndex(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.conf.ColumnIndex)"], ["long", "org.apache.cassandra.index.sasi.memory.SkipListMemIndex.add(org.apache.cassandra.db.DecoratedKey, java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.memory.SkipListMemIndex.search(org.apache.cassandra.index.sasi.plan.Expression)"], ["org.apache.cassandra.index.sasi.memory.TrieMemIndex$ConcurrentTrie", "org.apache.cassandra.index.sasi.memory.TrieMemIndex$ConcurrentTrie(org.apache.cassandra.config.ColumnDefinition)"], ["long", "org.apache.cassandra.index.sasi.memory.TrieMemIndex$ConcurrentTrie.add(java.lang.String, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.memory.TrieMemIndex$ConcurrentTrie.search(org.apache.cassandra.index.sasi.plan.Expression)"], ["com.googlecode.concurrenttrees.radix.node.Node", "org.apache.cassandra.index.sasi.memory.TrieMemIndex$SizeEstimatingNodeFactory.createNode(java.lang.CharSequence, java.lang.Object, java.util.List<com.googlecode.concurrenttrees.radix.node.Node>, boolean)"], ["long", "org.apache.cassandra.index.sasi.memory.TrieMemIndex$SizeEstimatingNodeFactory.currentUpdateSize()"], ["void", "org.apache.cassandra.index.sasi.memory.TrieMemIndex$SizeEstimatingNodeFactory.reset()"], ["org.apache.cassandra.index.sasi.memory.TrieMemIndex", "org.apache.cassandra.index.sasi.memory.TrieMemIndex(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.conf.ColumnIndex)"], ["long", "org.apache.cassandra.index.sasi.memory.TrieMemIndex.add(org.apache.cassandra.db.DecoratedKey, java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.memory.TrieMemIndex.search(org.apache.cassandra.index.sasi.plan.Expression)"], ["org.apache.cassandra.index.sasi.plan.Expression$Bound", "org.apache.cassandra.index.sasi.plan.Expression$Bound(java.nio.ByteBuffer, boolean)"], ["boolean", "org.apache.cassandra.index.sasi.plan.Expression$Bound.equals(java.lang.Object)"], ["org.apache.cassandra.index.sasi.plan.Expression$Op[]", "org.apache.cassandra.index.sasi.plan.Expression$Op.values()"], ["org.apache.cassandra.index.sasi.plan.Expression$Op", "org.apache.cassandra.index.sasi.plan.Expression$Op.valueOf(java.lang.String)"], ["org.apache.cassandra.index.sasi.plan.Expression$Op", "org.apache.cassandra.index.sasi.plan.Expression$Op.valueOf(org.apache.cassandra.cql3.Operator)"], ["org.apache.cassandra.index.sasi.plan.Expression", "org.apache.cassandra.index.sasi.plan.Expression(org.apache.cassandra.index.sasi.plan.Expression)"], ["org.apache.cassandra.index.sasi.plan.Expression", "org.apache.cassandra.index.sasi.plan.Expression(org.apache.cassandra.index.sasi.plan.QueryController, org.apache.cassandra.index.sasi.conf.ColumnIndex)"], ["org.apache.cassandra.index.sasi.plan.Expression", "org.apache.cassandra.index.sasi.plan.Expression(java.lang.String, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["org.apache.cassandra.index.sasi.plan.Expression", "org.apache.cassandra.index.sasi.plan.Expression.setLower(org.apache.cassandra.index.sasi.plan.Expression$Bound)"], ["org.apache.cassandra.index.sasi.plan.Expression", "org.apache.cassandra.index.sasi.plan.Expression.setUpper(org.apache.cassandra.index.sasi.plan.Expression$Bound)"], ["org.apache.cassandra.index.sasi.plan.Expression", "org.apache.cassandra.index.sasi.plan.Expression.setOp(org.apache.cassandra.index.sasi.plan.Expression$Op)"], ["org.apache.cassandra.index.sasi.plan.Expression", "org.apache.cassandra.index.sasi.plan.Expression.add(org.apache.cassandra.cql3.Operator, java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.plan.Expression", "org.apache.cassandra.index.sasi.plan.Expression.addExclusion(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.index.sasi.plan.Expression.isSatisfiedBy(java.nio.ByteBuffer)"], ["org.apache.cassandra.index.sasi.plan.Expression$Op", "org.apache.cassandra.index.sasi.plan.Expression.getOp()"], ["void", "org.apache.cassandra.index.sasi.plan.Expression.checkpoint()"], ["boolean", "org.apache.cassandra.index.sasi.plan.Expression.hasLower()"], ["boolean", "org.apache.cassandra.index.sasi.plan.Expression.hasUpper()"], ["boolean", "org.apache.cassandra.index.sasi.plan.Expression.isLowerSatisfiedBy(org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm)"], ["boolean", "org.apache.cassandra.index.sasi.plan.Expression.isUpperSatisfiedBy(org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm)"], ["boolean", "org.apache.cassandra.index.sasi.plan.Expression.isIndexed()"], ["java.lang.String", "org.apache.cassandra.index.sasi.plan.Expression.toString()"], ["int", "org.apache.cassandra.index.sasi.plan.Expression.hashCode()"], ["boolean", "org.apache.cassandra.index.sasi.plan.Expression.equals(java.lang.Object)"], ["org.apache.cassandra.index.sasi.plan.Operation$Builder", "org.apache.cassandra.index.sasi.plan.Operation$Builder(org.apache.cassandra.index.sasi.plan.Operation$OperationType, org.apache.cassandra.index.sasi.plan.QueryController, org.apache.cassandra.db.filter.RowFilter$Expression...)"], ["org.apache.cassandra.index.sasi.plan.Operation$Builder", "org.apache.cassandra.index.sasi.plan.Operation$Builder.setRight(org.apache.cassandra.index.sasi.plan.Operation$Builder)"], ["org.apache.cassandra.index.sasi.plan.Operation$Builder", "org.apache.cassandra.index.sasi.plan.Operation$Builder.setLeft(org.apache.cassandra.index.sasi.plan.Operation$Builder)"], ["void", "org.apache.cassandra.index.sasi.plan.Operation$Builder.add(org.apache.cassandra.db.filter.RowFilter$Expression)"], ["void", "org.apache.cassandra.index.sasi.plan.Operation$Builder.add(java.util.Collection<org.apache.cassandra.db.filter.RowFilter$Expression>)"], ["org.apache.cassandra.index.sasi.plan.Operation", "org.apache.cassandra.index.sasi.plan.Operation$Builder.complete()"], ["org.apache.cassandra.index.sasi.plan.Operation$OperationType[]", "org.apache.cassandra.index.sasi.plan.Operation$OperationType.values()"], ["org.apache.cassandra.index.sasi.plan.Operation$OperationType", "org.apache.cassandra.index.sasi.plan.Operation$OperationType.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.index.sasi.plan.Operation$OperationType.apply(boolean, boolean)"], ["boolean", "org.apache.cassandra.index.sasi.plan.Operation.satisfiedBy(org.apache.cassandra.db.rows.Unfiltered, org.apache.cassandra.db.rows.Row, boolean)"], ["void", "org.apache.cassandra.index.sasi.plan.Operation.close()"], ["org.apache.cassandra.index.sasi.plan.QueryController", "org.apache.cassandra.index.sasi.plan.QueryController(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.PartitionRangeReadCommand, long)"], ["boolean", "org.apache.cassandra.index.sasi.plan.QueryController.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.index.sasi.plan.QueryController.metadata()"], ["org.apache.cassandra.db.DataRange", "org.apache.cassandra.index.sasi.plan.QueryController.dataRange()"], ["org.apache.cassandra.index.sasi.conf.ColumnIndex", "org.apache.cassandra.index.sasi.plan.QueryController.getIndex(org.apache.cassandra.db.filter.RowFilter$Expression)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.index.sasi.plan.QueryController.getPartition(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator$Builder<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.plan.QueryController.getIndexes(org.apache.cassandra.index.sasi.plan.Operation$OperationType, java.util.Collection<org.apache.cassandra.index.sasi.plan.Expression>)"], ["void", "org.apache.cassandra.index.sasi.plan.QueryController.checkpoint()"], ["void", "org.apache.cassandra.index.sasi.plan.QueryController.releaseIndexes(org.apache.cassandra.index.sasi.plan.Operation)"], ["void", "org.apache.cassandra.index.sasi.plan.QueryController.finish()"], ["org.apache.cassandra.index.sasi.plan.QueryPlan$ResultIterator$PartitionIterator", "org.apache.cassandra.index.sasi.plan.QueryPlan$ResultIterator$PartitionIterator(org.apache.cassandra.db.rows.UnfilteredRowIterator, java.util.Collection<org.apache.cassandra.db.rows.Unfiltered>)"], ["org.apache.cassandra.index.sasi.plan.QueryPlan$ResultIterator", "org.apache.cassandra.index.sasi.plan.QueryPlan$ResultIterator(org.apache.cassandra.index.sasi.plan.Operation, org.apache.cassandra.index.sasi.plan.QueryController, org.apache.cassandra.db.ReadExecutionController)"], ["boolean", "org.apache.cassandra.index.sasi.plan.QueryPlan$ResultIterator.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.index.sasi.plan.QueryPlan$ResultIterator.metadata()"], ["void", "org.apache.cassandra.index.sasi.plan.QueryPlan$ResultIterator.close()"], ["org.apache.cassandra.index.sasi.plan.QueryPlan", "org.apache.cassandra.index.sasi.plan.QueryPlan(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.ReadCommand, long)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.index.sasi.plan.QueryPlan.execute(org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.index.sasi.sa.ByteTerm", "org.apache.cassandra.index.sasi.sa.ByteTerm(int, java.nio.ByteBuffer, org.apache.cassandra.index.sasi.disk.TokenTreeBuilder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.ByteTerm.getTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.ByteTerm.getSuffix(int)"], ["int", "org.apache.cassandra.index.sasi.sa.ByteTerm.compareTo(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.sa.Term)"], ["int", "org.apache.cassandra.index.sasi.sa.ByteTerm.length()"], ["org.apache.cassandra.index.sasi.sa.CharTerm", "org.apache.cassandra.index.sasi.sa.CharTerm(int, java.nio.CharBuffer, org.apache.cassandra.index.sasi.disk.TokenTreeBuilder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.CharTerm.getTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.CharTerm.getSuffix(int)"], ["int", "org.apache.cassandra.index.sasi.sa.CharTerm.compareTo(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.sa.Term)"], ["int", "org.apache.cassandra.index.sasi.sa.CharTerm.length()"], ["org.apache.cassandra.index.sasi.sa.IndexedTerm", "org.apache.cassandra.index.sasi.sa.IndexedTerm(java.nio.ByteBuffer, boolean)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.IndexedTerm.getBytes()"], ["boolean", "org.apache.cassandra.index.sasi.sa.IndexedTerm.isPartial()"], ["int", "org.apache.cassandra.index.sasi.sa.IntegralSA$IntegralSuffixIterator$1.compare(org.apache.cassandra.index.sasi.sa.Term<?>, org.apache.cassandra.index.sasi.sa.Term<?>)"], ["int", "org.apache.cassandra.index.sasi.sa.IntegralSA$IntegralSuffixIterator$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.index.sasi.sa.IntegralSA$IntegralSuffixIterator", "org.apache.cassandra.index.sasi.sa.IntegralSA$IntegralSuffixIterator(org.apache.cassandra.index.sasi.sa.IntegralSA)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.IntegralSA$IntegralSuffixIterator.minTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.IntegralSA$IntegralSuffixIterator.maxTerm()"], ["org.apache.cassandra.index.sasi.sa.IntegralSA", "org.apache.cassandra.index.sasi.sa.IntegralSA(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode)"], ["org.apache.cassandra.index.sasi.sa.TermIterator", "org.apache.cassandra.index.sasi.sa.IntegralSA.finish()"], ["org.apache.cassandra.index.sasi.sa.SA", "org.apache.cassandra.index.sasi.sa.SA(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode", "org.apache.cassandra.index.sasi.sa.SA.getMode()"], ["void", "org.apache.cassandra.index.sasi.sa.SA.add(java.nio.ByteBuffer, org.apache.cassandra.index.sasi.disk.TokenTreeBuilder)"], ["org.apache.cassandra.index.sasi.sa.SuffixSA$SASuffixIterator", "org.apache.cassandra.index.sasi.sa.SuffixSA$SASuffixIterator(org.apache.cassandra.index.sasi.sa.SuffixSA)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.SuffixSA$SASuffixIterator.minTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.sa.SuffixSA$SASuffixIterator.maxTerm()"], ["org.apache.cassandra.index.sasi.sa.SuffixSA", "org.apache.cassandra.index.sasi.sa.SuffixSA(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder$Mode)"], ["org.apache.cassandra.index.sasi.sa.TermIterator", "org.apache.cassandra.index.sasi.sa.SuffixSA.finish()"], ["org.apache.cassandra.index.sasi.sa.Term", "org.apache.cassandra.index.sasi.sa.Term(int, T, org.apache.cassandra.index.sasi.disk.TokenTreeBuilder)"], ["int", "org.apache.cassandra.index.sasi.sa.Term.getPosition()"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder", "org.apache.cassandra.index.sasi.sa.Term.getTokens()"], ["org.apache.cassandra.index.sasi.sa.TermIterator", "org.apache.cassandra.index.sasi.sa.TermIterator()"], ["org.apache.cassandra.index.sasi.utils.AbstractIterator$State[]", "org.apache.cassandra.index.sasi.utils.AbstractIterator$State.values()"], ["org.apache.cassandra.index.sasi.utils.AbstractIterator$State", "org.apache.cassandra.index.sasi.utils.AbstractIterator$State.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.index.sasi.utils.AbstractIterator.hasNext()"], ["T", "org.apache.cassandra.index.sasi.utils.AbstractIterator.next()"], ["void", "org.apache.cassandra.index.sasi.utils.AbstractIterator.remove()"], ["T", "org.apache.cassandra.index.sasi.utils.AbstractIterator.peek()"], ["org.apache.cassandra.index.sasi.utils.CombinedTerm", "org.apache.cassandra.index.sasi.utils.CombinedTerm(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.utils.CombinedTerm.getTerm()"], ["boolean", "org.apache.cassandra.index.sasi.utils.CombinedTerm.isPartial()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<java.lang.Long, org.apache.cassandra.index.sasi.disk.Token>", "org.apache.cassandra.index.sasi.utils.CombinedTerm.getTokenIterator()"], ["org.apache.cassandra.index.sasi.disk.TokenTreeBuilder", "org.apache.cassandra.index.sasi.utils.CombinedTerm.getTokenTreeBuilder()"], ["void", "org.apache.cassandra.index.sasi.utils.CombinedTerm.merge(org.apache.cassandra.index.sasi.utils.CombinedValue<org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm>)"], ["org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm", "org.apache.cassandra.index.sasi.utils.CombinedTerm.get()"], ["int", "org.apache.cassandra.index.sasi.utils.CombinedTerm.compareTo(org.apache.cassandra.index.sasi.utils.CombinedValue<org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm>)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.CombinedTerm.get()"], ["int", "org.apache.cassandra.index.sasi.utils.CombinedTerm.compareTo(java.lang.Object)"], ["org.apache.cassandra.index.sasi.utils.CombinedTermIterator", "org.apache.cassandra.index.sasi.utils.CombinedTermIterator(org.apache.cassandra.index.sasi.disk.OnDiskIndex...)"], ["org.apache.cassandra.index.sasi.utils.CombinedTermIterator", "org.apache.cassandra.index.sasi.utils.CombinedTermIterator(org.apache.cassandra.index.sasi.disk.Descriptor, org.apache.cassandra.index.sasi.disk.OnDiskIndex...)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.utils.CombinedTermIterator.minTerm()"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.utils.CombinedTermIterator.maxTerm()"], ["org.apache.cassandra.index.sasi.utils.MappedBuffer", "org.apache.cassandra.index.sasi.utils.MappedBuffer(org.apache.cassandra.io.util.RandomAccessReader)"], ["org.apache.cassandra.index.sasi.utils.MappedBuffer", "org.apache.cassandra.index.sasi.utils.MappedBuffer(org.apache.cassandra.io.util.ChannelProxy)"], ["int", "org.apache.cassandra.index.sasi.utils.MappedBuffer.comparePageTo(long, int, org.apache.cassandra.db.marshal.AbstractType<?>, java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.index.sasi.utils.MappedBuffer.capacity()"], ["long", "org.apache.cassandra.index.sasi.utils.MappedBuffer.position()"], ["org.apache.cassandra.index.sasi.utils.MappedBuffer", "org.apache.cassandra.index.sasi.utils.MappedBuffer.position(long)"], ["long", "org.apache.cassandra.index.sasi.utils.MappedBuffer.limit()"], ["org.apache.cassandra.index.sasi.utils.MappedBuffer", "org.apache.cassandra.index.sasi.utils.MappedBuffer.limit(long)"], ["long", "org.apache.cassandra.index.sasi.utils.MappedBuffer.remaining()"], ["boolean", "org.apache.cassandra.index.sasi.utils.MappedBuffer.hasRemaining()"], ["byte", "org.apache.cassandra.index.sasi.utils.MappedBuffer.get()"], ["byte", "org.apache.cassandra.index.sasi.utils.MappedBuffer.get(long)"], ["short", "org.apache.cassandra.index.sasi.utils.MappedBuffer.getShort()"], ["short", "org.apache.cassandra.index.sasi.utils.MappedBuffer.getShort(long)"], ["int", "org.apache.cassandra.index.sasi.utils.MappedBuffer.getInt()"], ["int", "org.apache.cassandra.index.sasi.utils.MappedBuffer.getInt(long)"], ["long", "org.apache.cassandra.index.sasi.utils.MappedBuffer.getLong()"], ["long", "org.apache.cassandra.index.sasi.utils.MappedBuffer.getLong(long)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.utils.MappedBuffer.getPageRegion(long, int)"], ["org.apache.cassandra.index.sasi.utils.MappedBuffer", "org.apache.cassandra.index.sasi.utils.MappedBuffer.duplicate()"], ["void", "org.apache.cassandra.index.sasi.utils.MappedBuffer.close()"], ["org.apache.cassandra.index.sasi.utils.OnDiskIndexIterator", "org.apache.cassandra.index.sasi.utils.OnDiskIndexIterator(org.apache.cassandra.index.sasi.disk.OnDiskIndex)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<org.apache.cassandra.index.sasi.disk.OnDiskIndex$DataTerm, org.apache.cassandra.index.sasi.utils.CombinedTerm>", "org.apache.cassandra.index.sasi.utils.OnDiskIndexIterator.union(org.apache.cassandra.index.sasi.disk.OnDiskIndex...)"], ["void", "org.apache.cassandra.index.sasi.utils.OnDiskIndexIterator.close()"], ["void", "org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$AbstractIntersectionIterator.close()"], ["org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$Builder", "org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$Builder(org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$Strategy)"], ["org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$Strategy[]", "org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$Strategy.values()"], ["org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$Strategy", "org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$Strategy.valueOf(java.lang.String)"], ["org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator", "org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator()"], ["<K extends java.lang.Comparable<K>, D extends org.apache.cassandra.index.sasi.utils.CombinedValue<K>> org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator$Builder<K, D>", "org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator.builder()"], ["D", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$EmptyRangeIterator.computeNext()"], ["void", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$EmptyRangeIterator.close()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$EmptyRangeIterator.computeNext()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$IteratorType[]", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$IteratorType.values()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$IteratorType", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$IteratorType.valueOf(java.lang.String)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$Statistics", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$Statistics(org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$IteratorType)"], ["void", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$Statistics.update(org.apache.cassandra.index.sasi.utils.RangeIterator<K, D>)"], ["boolean", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$Statistics.isDisjoint()"], ["double", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$Statistics.sizeRatio()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator$Builder", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder(org.apache.cassandra.index.sasi.utils.RangeIterator$Builder$IteratorType)"], ["K", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder.getMinimum()"], ["K", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder.getMaximum()"], ["long", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder.getTokenCount()"], ["int", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder.rangeCount()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator$Builder<K, D>", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder.add(org.apache.cassandra.index.sasi.utils.RangeIterator<K, D>)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator$Builder<K, D>", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder.add(java.util.List<org.apache.cassandra.index.sasi.utils.RangeIterator<K, D>>)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator<K, D>", "org.apache.cassandra.index.sasi.utils.RangeIterator$Builder.build()"], ["org.apache.cassandra.index.sasi.utils.RangeIterator", "org.apache.cassandra.index.sasi.utils.RangeIterator(org.apache.cassandra.index.sasi.utils.RangeIterator<K, T>)"], ["org.apache.cassandra.index.sasi.utils.RangeIterator", "org.apache.cassandra.index.sasi.utils.RangeIterator(K, K, long)"], ["K", "org.apache.cassandra.index.sasi.utils.RangeIterator.getMinimum()"], ["K", "org.apache.cassandra.index.sasi.utils.RangeIterator.getCurrent()"], ["K", "org.apache.cassandra.index.sasi.utils.RangeIterator.getMaximum()"], ["long", "org.apache.cassandra.index.sasi.utils.RangeIterator.getCount()"], ["T", "org.apache.cassandra.index.sasi.utils.RangeIterator.skipTo(K)"], ["org.apache.cassandra.index.sasi.utils.RangeUnionIterator$Builder", "org.apache.cassandra.index.sasi.utils.RangeUnionIterator$Builder()"], ["D", "org.apache.cassandra.index.sasi.utils.RangeUnionIterator.computeNext()"], ["void", "org.apache.cassandra.index.sasi.utils.RangeUnionIterator.close()"], ["<K extends java.lang.Comparable<K>, D extends org.apache.cassandra.index.sasi.utils.CombinedValue<K>> org.apache.cassandra.index.sasi.utils.RangeUnionIterator$Builder<K, D>", "org.apache.cassandra.index.sasi.utils.RangeUnionIterator.builder()"], ["<K extends java.lang.Comparable<K>, D extends org.apache.cassandra.index.sasi.utils.CombinedValue<K>> org.apache.cassandra.index.sasi.utils.RangeIterator<K, D>", "org.apache.cassandra.index.sasi.utils.RangeUnionIterator.build(java.util.List<org.apache.cassandra.index.sasi.utils.RangeIterator<K, D>>)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.RangeUnionIterator.computeNext()"], ["org.apache.cassandra.index.sasi.utils.TypeUtil", "org.apache.cassandra.index.sasi.utils.TypeUtil()"], ["boolean", "org.apache.cassandra.index.sasi.utils.TypeUtil.isValid(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.index.sasi.utils.TypeUtil.tryUpcast(java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["java.util.Map$Entry<K, V>", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$EntrySet$EntryIterator.next()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$EntrySet$EntryIterator.next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$EntrySet.iterator()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$EntrySet.contains(java.lang.Object)"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$EntrySet.remove(java.lang.Object)"], ["int", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$EntrySet.size()"], ["void", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$EntrySet.clear()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$KeySet$KeyIterator.next()"], ["int", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$KeySet.size()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$KeySet.contains(java.lang.Object)"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$KeySet.remove(java.lang.Object)"], ["void", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$KeySet.clear()"], ["void", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$Reference.set(E)"], ["E", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$Reference.get()"], ["org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$TrieEntry", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$TrieEntry(K, V, int)"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$TrieEntry.isEmpty()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$TrieEntry.isInternalNode()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$TrieEntry.isExternalNode()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$TrieIterator.hasNext()"], ["void", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$TrieIterator.remove()"], ["V", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$Values$ValueIterator.next()"], ["int", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$Values.size()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$Values.contains(java.lang.Object)"], ["void", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$Values.clear()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$Values.remove(java.lang.Object)"], ["org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie(org.apache.cassandra.index.sasi.utils.trie.KeyAnalyzer<? super K>)"], ["org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie(org.apache.cassandra.index.sasi.utils.trie.KeyAnalyzer<? super K>, java.util.Map<? extends K, ? extends V>)"], ["void", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.clear()"], ["int", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.size()"], ["V", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.put(K, V)"], ["V", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.get(java.lang.Object)"], ["java.util.Map$Entry<K, V>", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.select(K)"], ["java.util.Map$Entry<K, V>", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.select(K, org.apache.cassandra.index.sasi.utils.trie.Cursor<? super K, ? super V>)"], ["java.util.Map$Entry<K, V>", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.traverse(org.apache.cassandra.index.sasi.utils.trie.Cursor<? super K, ? super V>)"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.containsKey(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.entrySet()"], ["V", "org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie.remove(java.lang.Object)"], ["org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry(K, V)"], ["V", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry.setKeyValue(K, V)"], ["K", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry.getKey()"], ["V", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry.getValue()"], ["V", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry.setValue(V)"], ["int", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry.hashCode()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie$BasicEntry.toString()"], ["org.apache.cassandra.index.sasi.utils.trie.AbstractTrie", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie(org.apache.cassandra.index.sasi.utils.trie.KeyAnalyzer<? super K>)"], ["K", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie.selectKey(K)"], ["V", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie.selectValue(K)"], ["java.lang.String", "org.apache.cassandra.index.sasi.utils.trie.AbstractTrie.toString()"], ["org.apache.cassandra.index.sasi.utils.trie.Cursor$Decision[]", "org.apache.cassandra.index.sasi.utils.trie.Cursor$Decision.values()"], ["org.apache.cassandra.index.sasi.utils.trie.Cursor$Decision", "org.apache.cassandra.index.sasi.utils.trie.Cursor$Decision.valueOf(java.lang.String)"], ["java.util.Map$Entry<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()"], ["void", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()"], ["org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$SingletonIterator", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$SingletonIterator(org.apache.cassandra.index.sasi.utils.trie.AbstractPatriciaTrie$TrieEntry<K, V>)"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$SingletonIterator.hasNext()"], ["java.util.Map$Entry<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$SingletonIterator.next()"], ["void", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$SingletonIterator.remove()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet$SingletonIterator.next()"], ["org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet(org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie<K, V>.PrefixRangeMap)"], ["int", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet.size()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeEntrySet.iterator()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeMap.firstKey()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeMap.lastKey()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeMap.getFromKey()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeMap.getToKey()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeMap.isFromInclusive()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$PrefixRangeMap.isToInclusive()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntryMap.firstKey()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntryMap.lastKey()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntryMap.getFromKey()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntryMap.getToKey()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntryMap.isFromInclusive()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntryMap.isToInclusive()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet$EntryIterator.hasNext()"], ["java.util.Map$Entry<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet$EntryIterator.next()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet$EntryIterator.next()"], ["org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet(org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie<K, V>.RangeMap)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet.iterator()"], ["int", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet.size()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet.isEmpty()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet.contains(java.lang.Object)"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeEntrySet.remove(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.comparator()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.containsKey(java.lang.Object)"], ["V", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.remove(java.lang.Object)"], ["V", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.get(java.lang.Object)"], ["V", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.put(K, V)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.entrySet()"], ["java.util.SortedMap<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.headMap(K)"], ["java.util.SortedMap<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie$RangeMap.tailMap(K)"], ["org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie(org.apache.cassandra.index.sasi.utils.trie.KeyAnalyzer<? super K>)"], ["org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie(org.apache.cassandra.index.sasi.utils.trie.KeyAnalyzer<? super K>, java.util.Map<? extends K, ? extends V>)"], ["java.util.Comparator<? super K>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.comparator()"], ["java.util.SortedMap<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.prefixMap(K)"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.firstKey()"], ["K", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.lastKey()"], ["java.util.SortedMap<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.headMap(K)"], ["java.util.SortedMap<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.tailMap(K)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.remove(java.lang.Object)"], ["java.util.Collection", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.values()"], ["java.util.Set", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.keySet()"], ["java.util.Set", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.entrySet()"], ["boolean", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.containsKey(java.lang.Object)"], ["java.util.Map$Entry", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.traverse(org.apache.cassandra.index.sasi.utils.trie.Cursor)"], ["java.util.Map$Entry", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.select(java.lang.Object, org.apache.cassandra.index.sasi.utils.trie.Cursor)"], ["java.util.Map$Entry", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.select(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.get(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.put(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.size()"], ["void", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.clear()"], ["java.lang.String", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.toString()"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.selectValue(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie.selectKey(java.lang.Object)"], ["org.apache.cassandra.index.sasi.utils.trie.Tries", "org.apache.cassandra.index.sasi.utils.trie.Tries()"], ["void", "org.apache.cassandra.index.transactions.CleanupTransaction$1.start()"], ["void", "org.apache.cassandra.index.transactions.CleanupTransaction$1.onPartitionDeletion(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.index.transactions.CleanupTransaction$1.onRowDelete(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.transactions.CleanupTransaction$1.commit()"], ["void", "org.apache.cassandra.index.transactions.CompactionTransaction$1.start()"], ["void", "org.apache.cassandra.index.transactions.CompactionTransaction$1.onRowMerge(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row...)"], ["void", "org.apache.cassandra.index.transactions.CompactionTransaction$1.commit()"], ["org.apache.cassandra.index.transactions.IndexTransaction$Type[]", "org.apache.cassandra.index.transactions.IndexTransaction$Type.values()"], ["org.apache.cassandra.index.transactions.IndexTransaction$Type", "org.apache.cassandra.index.transactions.IndexTransaction$Type.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.index.transactions.UpdateTransaction$1.start()"], ["void", "org.apache.cassandra.index.transactions.UpdateTransaction$1.onPartitionDeletion(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.index.transactions.UpdateTransaction$1.onRangeTombstone(org.apache.cassandra.db.RangeTombstone)"], ["void", "org.apache.cassandra.index.transactions.UpdateTransaction$1.onInserted(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.transactions.UpdateTransaction$1.onUpdated(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.index.transactions.UpdateTransaction$1.commit()"], ["org.apache.cassandra.io.FSDiskFullWriteError", "org.apache.cassandra.io.FSDiskFullWriteError(java.lang.Throwable, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.io.FSDiskFullWriteError.toString()"], ["org.apache.cassandra.io.FSError", "org.apache.cassandra.io.FSError(java.lang.Throwable, java.io.File)"], ["org.apache.cassandra.io.FSError", "org.apache.cassandra.io.FSError.findNested(java.lang.Throwable)"], ["org.apache.cassandra.io.FSReadError", "org.apache.cassandra.io.FSReadError(java.lang.Throwable, java.io.File)"], ["org.apache.cassandra.io.FSReadError", "org.apache.cassandra.io.FSReadError(java.lang.Throwable, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.io.FSReadError.toString()"], ["org.apache.cassandra.io.FSWriteError", "org.apache.cassandra.io.FSWriteError(java.lang.Throwable, java.io.File)"], ["org.apache.cassandra.io.FSWriteError", "org.apache.cassandra.io.FSWriteError(java.lang.Throwable, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.io.FSWriteError.toString()"], ["void", "org.apache.cassandra.io.ForwardingVersionedSerializer.serialize(T, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["T", "org.apache.cassandra.io.ForwardingVersionedSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.io.ForwardingVersionedSerializer.serializedSize(T, int)"], ["default", "org.apache.cassandra.io.ISerializer.void skip(org.apache.cassandra.io.util.DataInputPlus)"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.compress.BufferType$1.allocate(int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.compress.BufferType$2.allocate(int)"], ["org.apache.cassandra.io.compress.BufferType[]", "org.apache.cassandra.io.compress.BufferType.values()"], ["org.apache.cassandra.io.compress.BufferType", "org.apache.cassandra.io.compress.BufferType.valueOf(java.lang.String)"], ["org.apache.cassandra.io.compress.BufferType", "org.apache.cassandra.io.compress.BufferType.typeOf(java.nio.ByteBuffer)"], ["org.apache.cassandra.io.compress.CompressedSequentialWriter$CompressedFileWriterMark", "org.apache.cassandra.io.compress.CompressedSequentialWriter$CompressedFileWriterMark(long, long, int, int)"], ["org.apache.cassandra.io.compress.CompressedSequentialWriter", "org.apache.cassandra.io.compress.CompressedSequentialWriter(java.io.File, java.lang.String, java.io.File, org.apache.cassandra.io.util.SequentialWriterOption, org.apache.cassandra.schema.CompressionParams, org.apache.cassandra.io.sstable.metadata.MetadataCollector)"], ["long", "org.apache.cassandra.io.compress.CompressedSequentialWriter.getOnDiskFilePointer()"], ["long", "org.apache.cassandra.io.compress.CompressedSequentialWriter.getEstimatedOnDiskBytesWritten()"], ["void", "org.apache.cassandra.io.compress.CompressedSequentialWriter.flush()"], ["org.apache.cassandra.io.compress.CompressionMetadata", "org.apache.cassandra.io.compress.CompressedSequentialWriter.open(long)"], ["org.apache.cassandra.io.util.DataPosition", "org.apache.cassandra.io.compress.CompressedSequentialWriter.mark()"], ["synchronized", "org.apache.cassandra.io.compress.CompressedSequentialWriter.void resetAndTruncate(org.apache.cassandra.io.util.DataPosition)"], ["int", "org.apache.cassandra.io.compress.CompressionMetadata$1.compare(org.apache.cassandra.io.compress.CompressionMetadata$Chunk, org.apache.cassandra.io.compress.CompressionMetadata$Chunk)"], ["int", "org.apache.cassandra.io.compress.CompressionMetadata$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.io.compress.CompressionMetadata$Chunk", "org.apache.cassandra.io.compress.CompressionMetadata$Chunk(long, int)"], ["boolean", "org.apache.cassandra.io.compress.CompressionMetadata$Chunk.equals(java.lang.Object)"], ["int", "org.apache.cassandra.io.compress.CompressionMetadata$Chunk.hashCode()"], ["java.lang.String", "org.apache.cassandra.io.compress.CompressionMetadata$Chunk.toString()"], ["void", "org.apache.cassandra.io.compress.CompressionMetadata$ChunkSerializer.serialize(org.apache.cassandra.io.compress.CompressionMetadata$Chunk, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.io.compress.CompressionMetadata$Chunk", "org.apache.cassandra.io.compress.CompressionMetadata$ChunkSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.io.compress.CompressionMetadata$ChunkSerializer.serializedSize(org.apache.cassandra.io.compress.CompressionMetadata$Chunk, int)"], ["long", "org.apache.cassandra.io.compress.CompressionMetadata$ChunkSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.io.compress.CompressionMetadata$ChunkSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.io.compress.CompressionMetadata$ChunkSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.io.compress.CompressionMetadata$Writer", "org.apache.cassandra.io.compress.CompressionMetadata$Writer.open(org.apache.cassandra.schema.CompressionParams, java.lang.String)"], ["void", "org.apache.cassandra.io.compress.CompressionMetadata$Writer.addOffset(long)"], ["finalizeLength(long,", "org.apache.cassandra.io.compress.CompressionMetadata$Writer.int)"], ["void", "org.apache.cassandra.io.compress.CompressionMetadata$Writer.doPrepare()"], ["org.apache.cassandra.io.compress.CompressionMetadata", "org.apache.cassandra.io.compress.CompressionMetadata$Writer.open(long, long)"], ["long", "org.apache.cassandra.io.compress.CompressionMetadata$Writer.chunkOffsetBy(int)"], ["void", "org.apache.cassandra.io.compress.CompressionMetadata$Writer.resetAndTruncate(int)"], ["org.apache.cassandra.io.compress.CompressionMetadata", "org.apache.cassandra.io.compress.CompressionMetadata.create(java.lang.String)"], ["org.apache.cassandra.io.compress.CompressionMetadata", "org.apache.cassandra.io.compress.CompressionMetadata(java.lang.String, long, org.apache.cassandra.utils.ChecksumType)"], ["org.apache.cassandra.io.compress.ICompressor", "org.apache.cassandra.io.compress.CompressionMetadata.compressor()"], ["int", "org.apache.cassandra.io.compress.CompressionMetadata.chunkLength()"], ["long", "org.apache.cassandra.io.compress.CompressionMetadata.offHeapSize()"], ["void", "org.apache.cassandra.io.compress.CompressionMetadata.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["org.apache.cassandra.io.compress.CompressionMetadata$Chunk", "org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(long)"], ["long", "org.apache.cassandra.io.compress.CompressionMetadata.getTotalSizeForSections(java.util.Collection<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>)"], ["org.apache.cassandra.io.compress.CompressionMetadata$Chunk[]", "org.apache.cassandra.io.compress.CompressionMetadata.getChunksForSections(java.util.Collection<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>)"], ["void", "org.apache.cassandra.io.compress.CompressionMetadata.close()"], ["org.apache.cassandra.io.compress.CorruptBlockException", "org.apache.cassandra.io.compress.CorruptBlockException(java.lang.String, org.apache.cassandra.io.compress.CompressionMetadata$Chunk)"], ["org.apache.cassandra.io.compress.CorruptBlockException", "org.apache.cassandra.io.compress.CorruptBlockException(java.lang.String, org.apache.cassandra.io.compress.CompressionMetadata$Chunk, java.lang.Throwable)"], ["org.apache.cassandra.io.compress.CorruptBlockException", "org.apache.cassandra.io.compress.CorruptBlockException(java.lang.String, long, int)"], ["org.apache.cassandra.io.compress.CorruptBlockException", "org.apache.cassandra.io.compress.CorruptBlockException(java.lang.String, long, int, java.lang.Throwable)"], ["byte[]", "org.apache.cassandra.io.compress.DeflateCompressor.getThreadLocalScratchBuffer()"], ["org.apache.cassandra.io.compress.DeflateCompressor", "org.apache.cassandra.io.compress.DeflateCompressor.create(java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.io.compress.DeflateCompressor.initialCompressedBufferLength(int)"], ["void", "org.apache.cassandra.io.compress.DeflateCompressor.compress(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.io.compress.DeflateCompressor.compressArray(byte[], int, int, byte[], int, int)"], ["void", "org.apache.cassandra.io.compress.DeflateCompressor.compressBuffer(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.compress.DeflateCompressor.uncompress(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.compress.DeflateCompressor.uncompressBuffer(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.io.compress.DeflateCompressor.uncompress(byte[], int, int, byte[], int)"], ["int", "org.apache.cassandra.io.compress.DeflateCompressor.uncompress(byte[], int, int, byte[], int, int)"], ["boolean", "org.apache.cassandra.io.compress.DeflateCompressor.supports(org.apache.cassandra.io.compress.BufferType)"], ["org.apache.cassandra.io.compress.BufferType", "org.apache.cassandra.io.compress.DeflateCompressor.preferredBufferType()"], ["org.apache.cassandra.io.compress.LZ4Compressor", "org.apache.cassandra.io.compress.LZ4Compressor.create(java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.io.compress.LZ4Compressor.initialCompressedBufferLength(int)"], ["void", "org.apache.cassandra.io.compress.LZ4Compressor.compress(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.io.compress.LZ4Compressor.uncompress(byte[], int, int, byte[], int)"], ["void", "org.apache.cassandra.io.compress.LZ4Compressor.uncompress(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.io.compress.LZ4Compressor.validateCompressorType(java.lang.String)"], ["java.lang.Integer", "org.apache.cassandra.io.compress.LZ4Compressor.validateCompressionLevel(java.lang.String)"], ["org.apache.cassandra.io.compress.BufferType", "org.apache.cassandra.io.compress.LZ4Compressor.preferredBufferType()"], ["boolean", "org.apache.cassandra.io.compress.LZ4Compressor.supports(org.apache.cassandra.io.compress.BufferType)"], ["org.apache.cassandra.io.compress.SnappyCompressor", "org.apache.cassandra.io.compress.SnappyCompressor()"], ["org.apache.cassandra.io.compress.SnappyCompressor", "org.apache.cassandra.io.compress.SnappyCompressor.create(java.util.Map<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.io.compress.SnappyCompressor.isAvailable()"], ["int", "org.apache.cassandra.io.compress.SnappyCompressor.initialCompressedBufferLength(int)"], ["void", "org.apache.cassandra.io.compress.SnappyCompressor.compress(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.io.compress.SnappyCompressor.uncompress(byte[], int, int, byte[], int)"], ["void", "org.apache.cassandra.io.compress.SnappyCompressor.uncompress(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["org.apache.cassandra.io.compress.BufferType", "org.apache.cassandra.io.compress.SnappyCompressor.preferredBufferType()"], ["boolean", "org.apache.cassandra.io.compress.SnappyCompressor.supports(org.apache.cassandra.io.compress.BufferType)"], ["boolean", "org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter$1.accept(java.io.File, java.lang.String)"], ["org.apache.cassandra.io.sstable.BloomFilterTracker", "org.apache.cassandra.io.sstable.BloomFilterTracker()"], ["void", "org.apache.cassandra.io.sstable.BloomFilterTracker.addFalsePositive()"], ["void", "org.apache.cassandra.io.sstable.BloomFilterTracker.addTruePositive()"], ["long", "org.apache.cassandra.io.sstable.BloomFilterTracker.getFalsePositiveCount()"], ["long", "org.apache.cassandra.io.sstable.BloomFilterTracker.getRecentFalsePositiveCount()"], ["long", "org.apache.cassandra.io.sstable.BloomFilterTracker.getTruePositiveCount()"], ["long", "org.apache.cassandra.io.sstable.BloomFilterTracker.getRecentTruePositiveCount()"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.inDirectory(java.lang.String)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.inDirectory(java.io.File)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.withType(java.lang.String)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.forTable(java.lang.String)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.withPartitioner(org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.using(java.lang.String)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.withBufferSizeInMB(int)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.sorted()"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter", "org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.build()"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder", "org.apache.cassandra.io.sstable.CQLSSTableWriter.builder()"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter", "org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(java.lang.Object...)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter", "org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(java.util.List<java.lang.Object>)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter", "org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(java.util.Map<java.lang.String, java.lang.Object>)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter", "org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(java.nio.ByteBuffer...)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter", "org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.io.sstable.CQLSSTableWriter", "org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["com.datastax.driver.core.UserType", "org.apache.cassandra.io.sstable.CQLSSTableWriter.getUDType(java.lang.String)"], ["void", "org.apache.cassandra.io.sstable.CQLSSTableWriter.close()"], ["org.apache.cassandra.io.sstable.Component$Type[]", "org.apache.cassandra.io.sstable.Component$Type.values()"], ["org.apache.cassandra.io.sstable.Component$Type", "org.apache.cassandra.io.sstable.Component$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.io.sstable.Component", "org.apache.cassandra.io.sstable.Component.digestFor(org.apache.cassandra.utils.ChecksumType)"], ["org.apache.cassandra.io.sstable.Component", "org.apache.cassandra.io.sstable.Component(org.apache.cassandra.io.sstable.Component$Type)"], ["org.apache.cassandra.io.sstable.Component", "org.apache.cassandra.io.sstable.Component(org.apache.cassandra.io.sstable.Component$Type, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.io.sstable.Component.name()"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.io.sstable.Component>", "org.apache.cassandra.io.sstable.Component.fromFilename(java.io.File, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.io.sstable.Component.toString()"], ["boolean", "org.apache.cassandra.io.sstable.Component.equals(java.lang.Object)"], ["int", "org.apache.cassandra.io.sstable.Component.hashCode()"], ["org.apache.cassandra.io.sstable.CorruptSSTableException", "org.apache.cassandra.io.sstable.CorruptSSTableException(java.lang.Throwable, java.io.File)"], ["org.apache.cassandra.io.sstable.CorruptSSTableException", "org.apache.cassandra.io.sstable.CorruptSSTableException(java.lang.Throwable, java.lang.String)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor(java.io.File, java.lang.String, java.lang.String, int)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor(java.io.File, java.lang.String, java.lang.String, int, org.apache.cassandra.io.sstable.format.SSTableFormat$Type)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor(java.lang.String, java.io.File, java.lang.String, java.lang.String, int, org.apache.cassandra.io.sstable.format.SSTableFormat$Type)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor(org.apache.cassandra.io.sstable.format.Version, java.io.File, java.lang.String, java.lang.String, int, org.apache.cassandra.io.sstable.format.SSTableFormat$Type, org.apache.cassandra.io.sstable.Component)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor.withGeneration(int)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor.withFormatType(org.apache.cassandra.io.sstable.format.SSTableFormat$Type)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor.withDigestComponent(org.apache.cassandra.io.sstable.Component)"], ["java.lang.String", "org.apache.cassandra.io.sstable.Descriptor.tmpFilenameFor(org.apache.cassandra.io.sstable.Component)"], ["java.lang.String", "org.apache.cassandra.io.sstable.Descriptor.filenameFor(org.apache.cassandra.io.sstable.Component)"], ["java.lang.String", "org.apache.cassandra.io.sstable.Descriptor.baseFilename()"], ["java.lang.String", "org.apache.cassandra.io.sstable.Descriptor.relativeFilenameFor(org.apache.cassandra.io.sstable.Component)"], ["org.apache.cassandra.io.sstable.format.SSTableFormat", "org.apache.cassandra.io.sstable.Descriptor.getFormat()"], ["boolean", "org.apache.cassandra.io.sstable.Descriptor.isLegacyFile(java.io.File)"], ["boolean", "org.apache.cassandra.io.sstable.Descriptor.isValidFile(java.lang.String)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor.fromFilename(java.lang.String)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor.fromFilename(java.lang.String, org.apache.cassandra.io.sstable.format.SSTableFormat$Type)"], ["org.apache.cassandra.io.sstable.Descriptor", "org.apache.cassandra.io.sstable.Descriptor.fromFilename(java.lang.String, boolean)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.io.sstable.Descriptor, java.lang.String>", "org.apache.cassandra.io.sstable.Descriptor.fromFilename(java.io.File, java.lang.String)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.io.sstable.Descriptor, java.lang.String>", "org.apache.cassandra.io.sstable.Descriptor.fromFilename(java.io.File, java.lang.String, boolean)"], ["org.apache.cassandra.io.sstable.metadata.IMetadataSerializer", "org.apache.cassandra.io.sstable.Descriptor.getMetadataSerializer()"], ["boolean", "org.apache.cassandra.io.sstable.Descriptor.isCompatible()"], ["java.lang.String", "org.apache.cassandra.io.sstable.Descriptor.toString()"], ["boolean", "org.apache.cassandra.io.sstable.Descriptor.equals(java.lang.Object)"], ["int", "org.apache.cassandra.io.sstable.Descriptor.hashCode()"], ["org.apache.cassandra.io.sstable.Downsampling", "org.apache.cassandra.io.sstable.Downsampling()"], ["int", "org.apache.cassandra.io.sstable.Downsampling.getEffectiveIndexIntervalAfterIndex(int, int, int)"], ["int[]", "org.apache.cassandra.io.sstable.Downsampling.getStartPoints(int, int)"], ["org.apache.cassandra.io.sstable.IndexInfo$Serializer", "org.apache.cassandra.io.sstable.IndexInfo$Serializer(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.ISerializer<org.apache.cassandra.db.ClusteringPrefix>)"], ["void", "org.apache.cassandra.io.sstable.IndexInfo$Serializer.serialize(org.apache.cassandra.io.sstable.IndexInfo, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.io.sstable.IndexInfo$Serializer.skip(org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.io.sstable.IndexInfo", "org.apache.cassandra.io.sstable.IndexInfo$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.io.sstable.IndexInfo$Serializer.serializedSize(org.apache.cassandra.io.sstable.IndexInfo)"], ["long", "org.apache.cassandra.io.sstable.IndexInfo$Serializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.io.sstable.IndexInfo$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.io.sstable.IndexInfo$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.io.sstable.IndexInfo", "org.apache.cassandra.io.sstable.IndexInfo(org.apache.cassandra.db.ClusteringPrefix, org.apache.cassandra.db.ClusteringPrefix, long, long, org.apache.cassandra.db.DeletionTime)"], ["long", "org.apache.cassandra.io.sstable.IndexInfo.unsharedHeapSize()"], ["org.apache.cassandra.io.sstable.IndexSummary$IndexSummarySerializer", "org.apache.cassandra.io.sstable.IndexSummary$IndexSummarySerializer()"], ["void", "org.apache.cassandra.io.sstable.IndexSummary$IndexSummarySerializer.serialize(org.apache.cassandra.io.sstable.IndexSummary, org.apache.cassandra.io.util.DataOutputPlus, boolean)"], ["org.apache.cassandra.io.sstable.IndexSummary", "org.apache.cassandra.io.sstable.IndexSummary$IndexSummarySerializer.deserialize(java.io.DataInputStream, org.apache.cassandra.dht.IPartitioner, boolean, int, int)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.DecoratedKey>", "org.apache.cassandra.io.sstable.IndexSummary$IndexSummarySerializer.deserializeFirstLastKey(java.io.DataInputStream, org.apache.cassandra.dht.IPartitioner, boolean)"], ["org.apache.cassandra.io.sstable.IndexSummary", "org.apache.cassandra.io.sstable.IndexSummary(org.apache.cassandra.dht.IPartitioner, org.apache.cassandra.io.util.Memory, int, org.apache.cassandra.io.util.Memory, long, int, int, int)"], ["int", "org.apache.cassandra.io.sstable.IndexSummary.binarySearch(org.apache.cassandra.db.PartitionPosition)"], ["int", "org.apache.cassandra.io.sstable.IndexSummary.getPositionInSummary(int)"], ["byte[]", "org.apache.cassandra.io.sstable.IndexSummary.getKey(int)"], ["void", "org.apache.cassandra.io.sstable.IndexSummary.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["long", "org.apache.cassandra.io.sstable.IndexSummary.getPosition(int)"], ["long", "org.apache.cassandra.io.sstable.IndexSummary.getEndInSummary(int)"], ["int", "org.apache.cassandra.io.sstable.IndexSummary.getMinIndexInterval()"], ["double", "org.apache.cassandra.io.sstable.IndexSummary.getEffectiveIndexInterval()"], ["long", "org.apache.cassandra.io.sstable.IndexSummary.getEstimatedKeyCount()"], ["int", "org.apache.cassandra.io.sstable.IndexSummary.size()"], ["int", "org.apache.cassandra.io.sstable.IndexSummary.getSamplingLevel()"], ["int", "org.apache.cassandra.io.sstable.IndexSummary.getMaxNumberOfEntries()"], ["long", "org.apache.cassandra.io.sstable.IndexSummary.getOffHeapSize()"], ["int", "org.apache.cassandra.io.sstable.IndexSummary.getEffectiveIndexIntervalAfterIndex(int)"], ["org.apache.cassandra.io.sstable.IndexSummary", "org.apache.cassandra.io.sstable.IndexSummary.sharedCopy()"], ["org.apache.cassandra.utils.concurrent.SharedCloseable", "org.apache.cassandra.io.sstable.IndexSummary.sharedCopy()"], ["org.apache.cassandra.io.sstable.IndexSummaryBuilder$ReadableBoundary", "org.apache.cassandra.io.sstable.IndexSummaryBuilder$ReadableBoundary(org.apache.cassandra.db.DecoratedKey, long, long, int, long)"], ["org.apache.cassandra.io.sstable.IndexSummaryBuilder", "org.apache.cassandra.io.sstable.IndexSummaryBuilder(long, int, int)"], ["void", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.markIndexSynced(long)"], ["void", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.markDataSynced(long)"], ["org.apache.cassandra.io.sstable.IndexSummaryBuilder$ReadableBoundary", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.getLastReadableBoundary()"], ["org.apache.cassandra.io.sstable.IndexSummaryBuilder", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.maybeAddEntry(org.apache.cassandra.db.DecoratedKey, long)"], ["org.apache.cassandra.io.sstable.IndexSummaryBuilder", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.maybeAddEntry(org.apache.cassandra.db.DecoratedKey, long, long, long)"], ["void", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.prepareToCommit()"], ["org.apache.cassandra.io.sstable.IndexSummary", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.build(org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.io.sstable.IndexSummary", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.build(org.apache.cassandra.dht.IPartitioner, org.apache.cassandra.io.sstable.IndexSummaryBuilder$ReadableBoundary)"], ["void", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.close()"], ["java.lang.Throwable", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.close(java.lang.Throwable)"], ["org.apache.cassandra.io.sstable.IndexSummary", "org.apache.cassandra.io.sstable.IndexSummaryBuilder.downsample(org.apache.cassandra.io.sstable.IndexSummary, int, int, org.apache.cassandra.dht.IPartitioner)"], ["int", "org.apache.cassandra.io.sstable.IndexSummaryManager.getResizeIntervalInMinutes()"], ["void", "org.apache.cassandra.io.sstable.IndexSummaryManager.setResizeIntervalInMinutes(int)"], ["long", "org.apache.cassandra.io.sstable.IndexSummaryManager.getMemoryPoolCapacityInMB()"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.apache.cassandra.io.sstable.IndexSummaryManager.getIndexIntervals()"], ["double", "org.apache.cassandra.io.sstable.IndexSummaryManager.getAverageIndexInterval()"], ["void", "org.apache.cassandra.io.sstable.IndexSummaryManager.setMemoryPoolCapacityInMB(long)"], ["double", "org.apache.cassandra.io.sstable.IndexSummaryManager.getMemoryPoolSizeInMB()"], ["void", "org.apache.cassandra.io.sstable.IndexSummaryManager.redistributeSummaries()"], ["int", "org.apache.cassandra.io.sstable.IndexSummaryRedistribution$1.compare(org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry, org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry)"], ["int", "org.apache.cassandra.io.sstable.IndexSummaryRedistribution$1.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ReadRateComparator.compare(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["int", "org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ReadRateComparator.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.io.sstable.IndexSummaryRedistribution", "org.apache.cassandra.io.sstable.IndexSummaryRedistribution(java.util.List<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Map<java.util.UUID, org.apache.cassandra.db.lifecycle.LifecycleTransaction>, long)"], ["org.apache.cassandra.db.compaction.CompactionInfo", "org.apache.cassandra.io.sstable.IndexSummaryRedistribution.getCompactionInfo()"], ["org.apache.cassandra.io.sstable.KeyIterator$In", "org.apache.cassandra.io.sstable.KeyIterator$In(java.io.File)"], ["org.apache.cassandra.io.util.DataInputPlus", "org.apache.cassandra.io.sstable.KeyIterator$In.get()"], ["boolean", "org.apache.cassandra.io.sstable.KeyIterator$In.isEOF()"], ["void", "org.apache.cassandra.io.sstable.KeyIterator$In.close()"], ["long", "org.apache.cassandra.io.sstable.KeyIterator$In.getFilePointer()"], ["long", "org.apache.cassandra.io.sstable.KeyIterator$In.length()"], ["org.apache.cassandra.io.sstable.KeyIterator", "org.apache.cassandra.io.sstable.KeyIterator(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.io.sstable.KeyIterator.close()"], ["long", "org.apache.cassandra.io.sstable.KeyIterator.getBytesRead()"], ["long", "org.apache.cassandra.io.sstable.KeyIterator.getTotalBytes()"], ["long", "org.apache.cassandra.io.sstable.KeyIterator.getKeyPosition()"], ["boolean", "org.apache.cassandra.io.sstable.ReducingKeyIterator$1.trivialReduceIsTrivial()"], ["void", "org.apache.cassandra.io.sstable.ReducingKeyIterator$1.reduce(int, org.apache.cassandra.db.DecoratedKey)"], ["void", "org.apache.cassandra.io.sstable.ReducingKeyIterator$1.reduce(int, java.lang.Object)"], ["org.apache.cassandra.io.sstable.ReducingKeyIterator", "org.apache.cassandra.io.sstable.ReducingKeyIterator(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.io.sstable.ReducingKeyIterator.close()"], ["long", "org.apache.cassandra.io.sstable.ReducingKeyIterator.getTotalBytes()"], ["long", "org.apache.cassandra.io.sstable.ReducingKeyIterator.getBytesRead()"], ["boolean", "org.apache.cassandra.io.sstable.ReducingKeyIterator.hasNext()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.io.sstable.ReducingKeyIterator.next()"], ["void", "org.apache.cassandra.io.sstable.ReducingKeyIterator.remove()"], ["java.lang.Object", "org.apache.cassandra.io.sstable.ReducingKeyIterator.next()"], ["boolean", "org.apache.cassandra.io.sstable.SSTable.delete(org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.io.sstable.SSTable.getPartitioner()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.io.sstable.SSTable.decorateKey(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.io.sstable.SSTable.getMinimalKey(org.apache.cassandra.db.DecoratedKey)"], ["java.lang.String", "org.apache.cassandra.io.sstable.SSTable.getFilename()"], ["java.lang.String", "org.apache.cassandra.io.sstable.SSTable.getIndexFilename()"], ["java.lang.String", "org.apache.cassandra.io.sstable.SSTable.getColumnFamilyName()"], ["java.lang.String", "org.apache.cassandra.io.sstable.SSTable.getKeyspaceName()"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.io.sstable.Component>", "org.apache.cassandra.io.sstable.SSTable.tryComponentFromFilename(java.io.File, java.lang.String)"], ["long", "org.apache.cassandra.io.sstable.SSTable.bytesOnDisk()"], ["java.lang.String", "org.apache.cassandra.io.sstable.SSTable.toString()"], ["synchronized", "org.apache.cassandra.io.sstable.SSTable.void addComponents(java.util.Collection<org.apache.cassandra.io.sstable.Component>)"], ["org.apache.cassandra.io.sstable.SSTableIdentityIterator", "org.apache.cassandra.io.sstable.SSTableIdentityIterator(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.DeletionTime, java.lang.String, org.apache.cassandra.io.sstable.SSTableSimpleIterator)"], ["org.apache.cassandra.io.sstable.SSTableIdentityIterator", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.create(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.util.RandomAccessReader, org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.io.sstable.SSTableIdentityIterator", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.create(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.util.FileDataInput, org.apache.cassandra.db.RowIndexEntry<?>, org.apache.cassandra.db.DecoratedKey, boolean)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.metadata()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.columns()"], ["boolean", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.isReverseOrder()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.partitionKey()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.partitionLevelDeletion()"], ["staticRow()", "org.apache.cassandra.io.sstable.SSTableIdentityIterator."], ["boolean", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.next()"], ["void", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.close()"], ["java.lang.String", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.getPath()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.stats()"], ["int", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.compareTo(org.apache.cassandra.io.sstable.SSTableIdentityIterator)"], ["int", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.compareTo(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.io.sstable.SSTableIdentityIterator.next()"], ["org.apache.cassandra.io.sstable.SSTableLoader$Client", "org.apache.cassandra.io.sstable.SSTableLoader$Client()"], ["void", "org.apache.cassandra.io.sstable.SSTableLoader$Client.stop()"], ["org.apache.cassandra.streaming.StreamConnectionFactory", "org.apache.cassandra.io.sstable.SSTableLoader$Client.getConnectionFactory()"], ["void", "org.apache.cassandra.io.sstable.SSTableLoader$Client.setTableMetadata(org.apache.cassandra.config.CFMetaData)"], ["java.util.Map<java.net.InetAddress, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>>", "org.apache.cassandra.io.sstable.SSTableLoader$Client.getEndpointToRangesMap()"], ["org.apache.cassandra.io.sstable.SSTableLoader", "org.apache.cassandra.io.sstable.SSTableLoader(java.io.File, org.apache.cassandra.io.sstable.SSTableLoader$Client, org.apache.cassandra.utils.OutputHandler)"], ["org.apache.cassandra.io.sstable.SSTableLoader", "org.apache.cassandra.io.sstable.SSTableLoader(java.io.File, org.apache.cassandra.io.sstable.SSTableLoader$Client, org.apache.cassandra.utils.OutputHandler, int)"], ["org.apache.cassandra.streaming.StreamResultFuture", "org.apache.cassandra.io.sstable.SSTableLoader.stream()"], ["org.apache.cassandra.streaming.StreamResultFuture", "org.apache.cassandra.io.sstable.SSTableLoader.stream(java.util.Set<java.net.InetAddress>, org.apache.cassandra.streaming.StreamEventHandler...)"], ["void", "org.apache.cassandra.io.sstable.SSTableLoader.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.io.sstable.SSTableLoader.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.io.sstable.SSTableLoader.handleStreamEvent(org.apache.cassandra.streaming.StreamEvent)"], ["void", "org.apache.cassandra.io.sstable.SSTableLoader.onSuccess(java.lang.Object)"], ["void", "org.apache.cassandra.io.sstable.SSTableMultiWriter.abortOrDie(org.apache.cassandra.io.sstable.SSTableMultiWriter)"], ["void", "org.apache.cassandra.io.sstable.SSTableRewriter$InvalidateKeys.run()"], ["org.apache.cassandra.io.sstable.SSTableRewriter", "org.apache.cassandra.io.sstable.SSTableRewriter(org.apache.cassandra.db.lifecycle.LifecycleTransaction, long, boolean)"], ["org.apache.cassandra.io.sstable.SSTableRewriter", "org.apache.cassandra.io.sstable.SSTableRewriter(org.apache.cassandra.db.lifecycle.LifecycleTransaction, long, boolean, boolean)"], ["org.apache.cassandra.io.sstable.SSTableRewriter", "org.apache.cassandra.io.sstable.SSTableRewriter(org.apache.cassandra.db.lifecycle.LifecycleTransaction, long, long, boolean)"], ["org.apache.cassandra.io.sstable.SSTableRewriter", "org.apache.cassandra.io.sstable.SSTableRewriter.constructKeepingOriginals(org.apache.cassandra.db.lifecycle.LifecycleTransaction, boolean, long, boolean)"], ["org.apache.cassandra.io.sstable.SSTableRewriter", "org.apache.cassandra.io.sstable.SSTableRewriter.constructKeepingOriginals(org.apache.cassandra.db.lifecycle.LifecycleTransaction, boolean, long)"], ["org.apache.cassandra.io.sstable.SSTableRewriter", "org.apache.cassandra.io.sstable.SSTableRewriter.constructWithoutEarlyOpening(org.apache.cassandra.db.lifecycle.LifecycleTransaction, boolean, long)"], ["org.apache.cassandra.io.sstable.SSTableRewriter", "org.apache.cassandra.io.sstable.SSTableRewriter.construct(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.lifecycle.LifecycleTransaction, boolean, long)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.SSTableRewriter.currentWriter()"], ["org.apache.cassandra.db.RowIndexEntry", "org.apache.cassandra.io.sstable.SSTableRewriter.append(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.RowIndexEntry", "org.apache.cassandra.io.sstable.SSTableRewriter.tryAppend(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["void", "org.apache.cassandra.io.sstable.SSTableRewriter.switchWriter(org.apache.cassandra.io.sstable.format.SSTableWriter)"], ["org.apache.cassandra.io.sstable.SSTableRewriter", "org.apache.cassandra.io.sstable.SSTableRewriter.setRepairedAt(long)"], ["void", "org.apache.cassandra.io.sstable.SSTableRewriter.throwDuringPrepare(boolean)"], ["java.lang.Object", "org.apache.cassandra.io.sstable.SSTableRewriter.finish()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatIterator.readStaticRow()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatTombstoneIterator.readStaticRow()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatIterator.readStaticRow()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatTombstoneIterator.readStaticRow()"], ["org.apache.cassandra.io.sstable.SSTableSimpleIterator", "org.apache.cassandra.io.sstable.SSTableSimpleIterator.create(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper, org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.io.sstable.SSTableSimpleIterator", "org.apache.cassandra.io.sstable.SSTableSimpleIterator.createTombstoneOnly(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.SerializationHelper, org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter$1.add(org.apache.cassandra.db.rows.Row)"], ["void", "org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter$DiskWriter.run()"], ["void", "org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.close()"], ["void", "org.apache.cassandra.io.sstable.SSTableSimpleWriter.close()"], ["org.apache.cassandra.io.sstable.SSTableTxnWriter", "org.apache.cassandra.io.sstable.SSTableTxnWriter(org.apache.cassandra.db.lifecycle.LifecycleTransaction, org.apache.cassandra.io.sstable.SSTableMultiWriter)"], ["boolean", "org.apache.cassandra.io.sstable.SSTableTxnWriter.append(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["java.lang.String", "org.apache.cassandra.io.sstable.SSTableTxnWriter.getFilename()"], ["long", "org.apache.cassandra.io.sstable.SSTableTxnWriter.getFilePointer()"], ["org.apache.cassandra.io.sstable.SSTableTxnWriter", "org.apache.cassandra.io.sstable.SSTableTxnWriter.create(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.io.sstable.Descriptor, long, long, int, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.io.sstable.SSTableTxnWriter", "org.apache.cassandra.io.sstable.SSTableTxnWriter.createRangeAware(org.apache.cassandra.config.CFMetaData, long, long, org.apache.cassandra.io.sstable.format.SSTableFormat$Type, int, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.io.sstable.SSTableTxnWriter", "org.apache.cassandra.io.sstable.SSTableTxnWriter.create(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.sstable.Descriptor, long, long, int, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>)"], ["org.apache.cassandra.io.sstable.SSTableTxnWriter", "org.apache.cassandra.io.sstable.SSTableTxnWriter.create(org.apache.cassandra.db.ColumnFamilyStore, java.lang.String, long, long, int, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.io.sstable.SSTableTxnWriter", "org.apache.cassandra.io.sstable.SSTableTxnWriter.create(org.apache.cassandra.db.ColumnFamilyStore, java.lang.String, long, long, org.apache.cassandra.db.SerializationHeader)"], ["boolean", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.append(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.setOpenResult(boolean)"], ["java.lang.String", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getFilename()"], ["long", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getFilePointer()"], ["java.util.UUID", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getCfId()"], ["java.lang.Throwable", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.commit(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.abort(java.lang.Throwable)"], ["void", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.prepareToCommit()"], ["void", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.close()"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.create(org.apache.cassandra.io.sstable.Descriptor, long, long, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.sstable.metadata.MetadataCollector, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["void", "org.apache.cassandra.io.sstable.SnapshotDeletingTask.addFailedSnapshot(java.io.File)"], ["void", "org.apache.cassandra.io.sstable.SnapshotDeletingTask.run()"], ["void", "org.apache.cassandra.io.sstable.SnapshotDeletingTask.rescheduleFailedTasks()"], ["int", "org.apache.cassandra.io.sstable.SnapshotDeletingTask.pendingDeletionCount()"], ["org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter(org.apache.cassandra.db.ColumnFamilyStore, long, long, org.apache.cassandra.io.sstable.format.SSTableFormat$Type, int, long, org.apache.cassandra.db.lifecycle.LifecycleNewTracker, org.apache.cassandra.db.SerializationHeader)"], ["boolean", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.append(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.setOpenResult(boolean)"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.getFilename()"], ["long", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.getFilePointer()"], ["java.util.UUID", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.getCfId()"], ["java.lang.Throwable", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.commit(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.abort(java.lang.Throwable)"], ["void", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.prepareToCommit()"], ["void", "org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.close()"], ["org.apache.cassandra.io.sstable.format.SSTableFormat$Type[]", "org.apache.cassandra.io.sstable.format.SSTableFormat$Type.values()"], ["org.apache.cassandra.io.sstable.format.SSTableFormat$Type", "org.apache.cassandra.io.sstable.format.SSTableFormat$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.io.sstable.format.SSTableFormat$Type", "org.apache.cassandra.io.sstable.format.SSTableFormat$Type.current()"], ["org.apache.cassandra.io.sstable.format.SSTableFormat$Type", "org.apache.cassandra.io.sstable.format.SSTableFormat$Type.validate(java.lang.String)"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader$1.compare(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader$1.compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader$2.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader$2.apply(java.lang.Object)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader$3.run()"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader$4$1.hasNext()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.io.sstable.format.SSTableReader$4$1.next()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader$4$1.remove()"], ["java.lang.Object", "org.apache.cassandra.io.sstable.format.SSTableReader$4$1.next()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader$AndThen.run()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader$DropPageCache.run()"], ["org.apache.cassandra.io.sstable.format.SSTableReader$Factory", "org.apache.cassandra.io.sstable.format.SSTableReader$Factory()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy$1.run()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy.tidy()"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy.name()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1.run()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier.tidy()"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier.name()"], ["org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason[]", "org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason.values()"], ["org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason", "org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader$Operator$Equals.apply(int)"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader$Operator$GreaterThan.apply(int)"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader$Operator$GreaterThanOrEqualTo.apply(int)"], ["org.apache.cassandra.io.sstable.format.SSTableReader$Operator", "org.apache.cassandra.io.sstable.format.SSTableReader$Operator()"], ["org.apache.cassandra.io.sstable.format.SSTableReader$UniqueIdentifier", "org.apache.cassandra.io.sstable.format.SSTableReader$UniqueIdentifier()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getApproximateKeyCount(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["double", "org.apache.cassandra.io.sstable.format.SSTableReader.estimateCompactionGain(java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.open(org.apache.cassandra.io.sstable.Descriptor)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.open(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.open(org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.openNoValidation(org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>, org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.openNoValidation(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.openForBatch(org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.open(org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>, org.apache.cassandra.config.CFMetaData, boolean, boolean)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.logOpenException(org.apache.cassandra.io.sstable.Descriptor, java.io.IOException)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.internalOpen(org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.util.FileHandle, org.apache.cassandra.io.util.FileHandle, org.apache.cassandra.io.sstable.IndexSummary, org.apache.cassandra.utils.IFilter, long, org.apache.cassandra.io.sstable.metadata.StatsMetadata, org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason, org.apache.cassandra.db.SerializationHeader)"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getTotalBytes(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getTotalUncompressedBytes(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.equals(java.lang.Object)"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.hashCode()"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.SSTableReader.getFilename()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.setupOnline()"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.isKeyCacheSetup()"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.loadSummary()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.saveSummary()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.saveSummary(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.io.sstable.IndexSummary)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.saveBloomFilter()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.saveBloomFilter(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.utils.IFilter)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.setReplaced()"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.isReplaced()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.runOnClose(java.lang.Runnable)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithRestoredStart(org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithNewStart(org.apache.cassandra.db.DecoratedKey, java.lang.Runnable)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithNewSummarySamplingLevel(org.apache.cassandra.db.ColumnFamilyStore, int)"], ["org.apache.cassandra.metrics.RestorableMeter", "org.apache.cassandra.io.sstable.format.SSTableReader.getReadMeter()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummarySamplingLevel()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryOffHeapSize()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getMinIndexInterval()"], ["double", "org.apache.cassandra.io.sstable.format.SSTableReader.getEffectiveIndexInterval()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.releaseSummary()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexScanPosition(org.apache.cassandra.db.PartitionPosition)"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexScanPositionFromBinarySearchResult(int, org.apache.cassandra.io.sstable.IndexSummary)"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryIndexFromBinarySearchResult(int)"], ["org.apache.cassandra.io.compress.CompressionMetadata", "org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionMetadata()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionMetadataOffHeapSize()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.forceFilterFailures()"], ["org.apache.cassandra.utils.IFilter", "org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilter()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterSerializedSize()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterOffHeapSize()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.estimatedKeys()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.estimatedKeysForRanges(java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummarySize()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getMaxIndexSummarySize()"], ["byte[]", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryKey(int)"], ["java.util.List<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>", "org.apache.cassandra.io.sstable.format.SSTableReader.getPositionsForRanges(java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["org.apache.cassandra.cache.KeyCacheKey", "org.apache.cassandra.io.sstable.format.SSTableReader.getCacheKey(org.apache.cassandra.db.DecoratedKey)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.cacheKey(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.RowIndexEntry)"], ["org.apache.cassandra.db.RowIndexEntry", "org.apache.cassandra.io.sstable.format.SSTableReader.getCachedPosition(org.apache.cassandra.db.DecoratedKey, boolean)"], ["org.apache.cassandra.db.RowIndexEntry", "org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(org.apache.cassandra.db.PartitionPosition, org.apache.cassandra.io.sstable.format.SSTableReader$Operator)"], ["org.apache.cassandra.db.RowIndexEntry", "org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(org.apache.cassandra.db.PartitionPosition, org.apache.cassandra.io.sstable.format.SSTableReader$Operator, org.apache.cassandra.io.sstable.format.SSTableReadsListener)"], ["org.apache.cassandra.db.RowIndexEntry", "org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(org.apache.cassandra.db.PartitionPosition, org.apache.cassandra.io.sstable.format.SSTableReader$Operator, boolean)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.io.sstable.format.SSTableReader.firstKeyBeyond(org.apache.cassandra.db.PartitionPosition)"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.uncompressedLength()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.onDiskLength()"], ["double", "org.apache.cassandra.io.sstable.format.SSTableReader.getCrcCheckChance()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.setCrcCheckChance(double)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.markObsolete(java.lang.Runnable)"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.isMarkedCompacted()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.markSuspect()"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.isMarkedSuspect()"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.SSTableReader.getScanner()"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.DataRange, boolean, org.apache.cassandra.io.sstable.format.SSTableReadsListener)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.io.util.FileDataInput", "org.apache.cassandra.io.sstable.format.SSTableReader.getFileDataInput(long)"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.newSince(long)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.createLinks(java.lang.String)"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.isRepaired()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.io.sstable.format.SSTableReader.keyAt(long)"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterFalsePositiveCount()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getRecentBloomFilterFalsePositiveCount()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterTruePositiveCount()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getRecentBloomFilterTruePositiveCount()"], ["org.apache.cassandra.cache.InstrumentingCache<org.apache.cassandra.cache.KeyCacheKey, org.apache.cassandra.db.RowIndexEntry>", "org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCache()"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedPartitionSize()"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedColumnCount()"], ["double", "org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedDroppableTombstoneRatio(int)"], ["double", "org.apache.cassandra.io.sstable.format.SSTableReader.getDroppableTombstonesBefore(int)"], ["double", "org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionRatio()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getMinTimestamp()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getMaxTimestamp()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getMinLocalDeletionTime()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getMaxLocalDeletionTime()"], ["boolean", "org.apache.cassandra.io.sstable.format.SSTableReader.mayHaveTombstones()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getMinTTL()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getMaxTTL()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getTotalColumnsSet()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getTotalRows()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getAvgColumnSetPerRow()"], ["int", "org.apache.cassandra.io.sstable.format.SSTableReader.getSSTableLevel()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.reloadSSTableMetadata()"], ["org.apache.cassandra.io.sstable.metadata.StatsMetadata", "org.apache.cassandra.io.sstable.format.SSTableReader.getSSTableMetadata()"], ["org.apache.cassandra.io.util.RandomAccessReader", "org.apache.cassandra.io.sstable.format.SSTableReader.openDataReader(com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.io.util.RandomAccessReader", "org.apache.cassandra.io.sstable.format.SSTableReader.openDataReader()"], ["org.apache.cassandra.io.util.RandomAccessReader", "org.apache.cassandra.io.sstable.format.SSTableReader.openIndexReader()"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.sstable.format.SSTableReader.getDataChannel()"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexChannel()"], ["org.apache.cassandra.io.util.FileHandle", "org.apache.cassandra.io.sstable.format.SSTableReader.getIndexFile()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getCreationTimeFor(org.apache.cassandra.io.sstable.Component)"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCacheHit()"], ["long", "org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCacheRequest()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.incrementReadCount()"], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.io.sstable.format.SSTableReader.stats()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.overrideReadMeter(org.apache.cassandra.metrics.RestorableMeter)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.resetTidying()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableReader.shutdownBlocking()"], ["org.apache.cassandra.io.sstable.format.SSTableReadsListener$SelectionReason[]", "org.apache.cassandra.io.sstable.format.SSTableReadsListener$SelectionReason.values()"], ["org.apache.cassandra.io.sstable.format.SSTableReadsListener$SelectionReason", "org.apache.cassandra.io.sstable.format.SSTableReadsListener$SelectionReason.valueOf(java.lang.String)"], ["org.apache.cassandra.io.sstable.format.SSTableReadsListener$SkippingReason[]", "org.apache.cassandra.io.sstable.format.SSTableReadsListener$SkippingReason.values()"], ["org.apache.cassandra.io.sstable.format.SSTableReadsListener$SkippingReason", "org.apache.cassandra.io.sstable.format.SSTableReadsListener$SkippingReason.valueOf(java.lang.String)"], ["default", "org.apache.cassandra.io.sstable.format.SSTableReadsListener.void onSSTableSkipped(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.sstable.format.SSTableReadsListener$SkippingReason)"], ["default", "org.apache.cassandra.io.sstable.format.SSTableReadsListener.void onSSTableSelected(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.RowIndexEntry<?>, org.apache.cassandra.io.sstable.format.SSTableReadsListener$SelectionReason)"], ["default", "org.apache.cassandra.io.sstable.format.SSTableReadsListener.void onScanningStarted(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter$Factory", "org.apache.cassandra.io.sstable.format.SSTableWriter$Factory()"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.SSTableWriter.create(org.apache.cassandra.io.sstable.Descriptor, java.lang.Long, java.lang.Long, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.sstable.metadata.MetadataCollector, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.SSTableWriter.create(org.apache.cassandra.io.sstable.Descriptor, long, long, int, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.SSTableWriter.create(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.sstable.Descriptor, long, long, int, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.SSTableWriter.create(java.lang.String, long, long, int, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.SSTableWriter.create(java.lang.String, long, long, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.index.Index>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["long", "org.apache.cassandra.io.sstable.format.SSTableWriter.getEstimatedOnDiskBytesWritten()"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.SSTableWriter.setRepairedAt(long)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.SSTableWriter.setMaxDataAge(long)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.SSTableWriter.setOpenResult(boolean)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableWriter.finish(long, long, boolean)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableWriter.finish(boolean)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.SSTableWriter.finished()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableWriter.prepareToCommit()"], ["java.lang.Throwable", "org.apache.cassandra.io.sstable.format.SSTableWriter.commit(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.io.sstable.format.SSTableWriter.abort(java.lang.Throwable)"], ["void", "org.apache.cassandra.io.sstable.format.SSTableWriter.close()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableWriter.abort()"], ["void", "org.apache.cassandra.io.sstable.format.SSTableWriter.rename(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>)"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.Version.getVersion()"], ["org.apache.cassandra.io.sstable.format.SSTableFormat", "org.apache.cassandra.io.sstable.format.Version.getSSTableFormat()"], ["boolean", "org.apache.cassandra.io.sstable.format.Version.validate(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.Version.toString()"], ["boolean", "org.apache.cassandra.io.sstable.format.Version.equals(java.lang.Object)"], ["int", "org.apache.cassandra.io.sstable.format.Version.hashCode()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.isLatestVersion()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasSamplingLevel()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasNewStatsFile()"], ["org.apache.cassandra.utils.ChecksumType", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.compressedChecksumType()"], ["org.apache.cassandra.utils.ChecksumType", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.uncompressedChecksumType()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasRepairedAt()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.tracksLegacyCounterShards()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasOldBfHashOrder()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasCompactionAncestors()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasNewFileName()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasCommitLogLowerBound()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasCommitLogIntervals()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasAccurateMinMax()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.storeRows()"], ["int", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.correspondingMessagingVersion()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.hasBoundaries()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.isCompatible()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion.isCompatibleForStreaming()"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.big.BigFormat$ReaderFactory.open(org.apache.cassandra.io.sstable.Descriptor, java.util.Set<org.apache.cassandra.io.sstable.Component>, org.apache.cassandra.config.CFMetaData, java.lang.Long, org.apache.cassandra.io.sstable.metadata.StatsMetadata, org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter", "org.apache.cassandra.io.sstable.format.big.BigFormat$WriterFactory.open(org.apache.cassandra.io.sstable.Descriptor, long, long, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.sstable.metadata.MetadataCollector, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableFlushObserver>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["org.apache.cassandra.io.sstable.format.Version", "org.apache.cassandra.io.sstable.format.big.BigFormat.getLatestVersion()"], ["org.apache.cassandra.io.sstable.format.Version", "org.apache.cassandra.io.sstable.format.big.BigFormat.getVersion(java.lang.String)"], ["org.apache.cassandra.io.sstable.format.SSTableWriter$Factory", "org.apache.cassandra.io.sstable.format.big.BigFormat.getWriterFactory()"], ["org.apache.cassandra.io.sstable.format.SSTableReader$Factory", "org.apache.cassandra.io.sstable.format.big.BigFormat.getReaderFactory()"], ["org.apache.cassandra.db.RowIndexEntry$IndexSerializer", "org.apache.cassandra.io.sstable.format.big.BigFormat.getIndexSerializer(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.Slices, org.apache.cassandra.db.filter.ColumnFilter, boolean, boolean, org.apache.cassandra.io.sstable.format.SSTableReadsListener)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(org.apache.cassandra.io.util.FileDataInput, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.RowIndexEntry, org.apache.cassandra.db.Slices, org.apache.cassandra.db.filter.ColumnFilter, boolean, boolean)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.DataRange, com.google.common.util.concurrent.RateLimiter, boolean, org.apache.cassandra.io.sstable.format.SSTableReadsListener)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(java.util.Iterator<org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>>)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.io.sstable.format.big.BigTableReader.simpleIterator(org.apache.cassandra.io.util.FileDataInput, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.RowIndexEntry, boolean)"], ["org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.getLengthInBytes()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.getCurrentPosition()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.getBytesScanned()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.getCompressedLengthInBytes()"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.getBackingFiles()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.metadata()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.next()"], ["java.lang.Object", "org.apache.cassandra.io.sstable.format.big.BigTableScanner$EmptySSTableScanner.next()"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(org.apache.cassandra.io.sstable.format.SSTableReader, com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.DataRange, com.google.common.util.concurrent.RateLimiter, boolean, org.apache.cassandra.io.sstable.format.SSTableReadsListener)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(org.apache.cassandra.io.sstable.format.SSTableReader, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.io.sstable.ISSTableScanner", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(org.apache.cassandra.io.sstable.format.SSTableReader, java.util.Iterator<org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>>)"], ["void", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.close()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getLengthInBytes()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getCurrentPosition()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getBytesScanned()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getCompressedLengthInBytes()"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.getBackingFiles()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.isForThrift()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.metadata()"], ["boolean", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.hasNext()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.next()"], ["void", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.remove()"], ["java.lang.String", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.toString()"], ["java.lang.Object", "org.apache.cassandra.io.sstable.format.big.BigTableScanner.next()"], ["void", "org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter.append(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.RowIndexEntry, long, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter.mark()"], ["void", "org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter.resetAndTruncate()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector.applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["void", "org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector.onPartitionClose()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector.applyToDeletion(org.apache.cassandra.db.DeletionTime)"], ["org.apache.cassandra.io.sstable.format.big.BigTableWriter", "org.apache.cassandra.io.sstable.format.big.BigTableWriter(org.apache.cassandra.io.sstable.Descriptor, long, long, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.io.sstable.metadata.MetadataCollector, org.apache.cassandra.db.SerializationHeader, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableFlushObserver>, org.apache.cassandra.db.lifecycle.LifecycleNewTracker)"], ["void", "org.apache.cassandra.io.sstable.format.big.BigTableWriter.mark()"], ["void", "org.apache.cassandra.io.sstable.format.big.BigTableWriter.resetAndTruncate()"], ["org.apache.cassandra.db.RowIndexEntry", "org.apache.cassandra.io.sstable.format.big.BigTableWriter.append(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.big.BigTableWriter.openEarly()"], ["org.apache.cassandra.io.sstable.format.SSTableReader", "org.apache.cassandra.io.sstable.format.big.BigTableWriter.openFinalEarly()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableWriter.getFilePointer()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableWriter.getOnDiskFilePointer()"], ["long", "org.apache.cassandra.io.sstable.format.big.BigTableWriter.getEstimatedOnDiskBytesWritten()"], ["org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer()"], ["int", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.serializedSize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.CompactionMetadata)"], ["void", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.serialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.CompactionMetadata, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.io.sstable.metadata.CompactionMetadata", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.deserialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.io.sstable.metadata.MetadataComponent", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.deserialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.serialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.MetadataComponent, org.apache.cassandra.io.util.DataOutputPlus)"], ["int", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.serializedSize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.MetadataComponent)"], ["org.apache.cassandra.io.sstable.metadata.CompactionMetadata", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata(com.clearspring.analytics.stream.cardinality.ICardinality)"], ["org.apache.cassandra.io.sstable.metadata.MetadataType", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata.getType()"], ["boolean", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata.equals(java.lang.Object)"], ["int", "org.apache.cassandra.io.sstable.metadata.CompactionMetadata.hashCode()"], ["org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer", "org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer()"], ["void", "org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer.serialize(java.util.Map<org.apache.cassandra.io.sstable.metadata.MetadataType, org.apache.cassandra.io.sstable.metadata.MetadataComponent>, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.io.sstable.format.Version)"], ["java.util.Map<org.apache.cassandra.io.sstable.metadata.MetadataType, org.apache.cassandra.io.sstable.metadata.MetadataComponent>", "org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer.deserialize(org.apache.cassandra.io.sstable.Descriptor, java.util.EnumSet<org.apache.cassandra.io.sstable.metadata.MetadataType>)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker()"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker(int, int)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker.update(int)"], ["int", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker.min()"], ["int", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker.max()"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker()"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker(long, long)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker.update(long)"], ["long", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker.min()"], ["long", "org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker.max()"], ["org.apache.cassandra.io.sstable.metadata.StatsMetadata", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultStatsMetadata()"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector(org.apache.cassandra.db.ClusteringComparator)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.ClusteringComparator, int)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.addKey(java.nio.ByteBuffer)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.addPartitionSizeInBytes(long)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.addCellPerPartitionCount(long)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.mergeTombstoneHistogram(org.apache.cassandra.utils.StreamingHistogram)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.addCompressionRatio(long, long)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(org.apache.cassandra.db.LivenessInfo)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(org.apache.cassandra.db.rows.Cell)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateColumnSetPerRow(long)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.commitLogIntervals(org.apache.cassandra.db.commitlog.IntervalSet<org.apache.cassandra.db.commitlog.CommitLogPosition>)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.sstableLevel(int)"], ["org.apache.cassandra.io.sstable.metadata.MetadataCollector", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateClusteringValues(org.apache.cassandra.db.ClusteringPrefix)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateHasLegacyCounterShards(boolean)"], ["java.util.Map<org.apache.cassandra.io.sstable.metadata.MetadataType, org.apache.cassandra.io.sstable.metadata.MetadataComponent>", "org.apache.cassandra.io.sstable.metadata.MetadataCollector.finalizeMetadata(java.lang.String, double, long, org.apache.cassandra.db.SerializationHeader)"], ["org.apache.cassandra.io.sstable.metadata.MetadataComponent", "org.apache.cassandra.io.sstable.metadata.MetadataComponent()"], ["int", "org.apache.cassandra.io.sstable.metadata.MetadataComponent.compareTo(org.apache.cassandra.io.sstable.metadata.MetadataComponent)"], ["int", "org.apache.cassandra.io.sstable.metadata.MetadataComponent.compareTo(java.lang.Object)"], ["org.apache.cassandra.io.sstable.metadata.MetadataSerializer", "org.apache.cassandra.io.sstable.metadata.MetadataSerializer()"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataSerializer.serialize(java.util.Map<org.apache.cassandra.io.sstable.metadata.MetadataType, org.apache.cassandra.io.sstable.metadata.MetadataComponent>, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.io.sstable.format.Version)"], ["java.util.Map<org.apache.cassandra.io.sstable.metadata.MetadataType, org.apache.cassandra.io.sstable.metadata.MetadataComponent>", "org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(org.apache.cassandra.io.sstable.Descriptor, java.util.EnumSet<org.apache.cassandra.io.sstable.metadata.MetadataType>)"], ["org.apache.cassandra.io.sstable.metadata.MetadataComponent", "org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.io.sstable.metadata.MetadataType)"], ["java.util.Map<org.apache.cassandra.io.sstable.metadata.MetadataType, org.apache.cassandra.io.sstable.metadata.MetadataComponent>", "org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(org.apache.cassandra.io.sstable.Descriptor, org.apache.cassandra.io.util.FileDataInput, java.util.EnumSet<org.apache.cassandra.io.sstable.metadata.MetadataType>)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutateLevel(org.apache.cassandra.io.sstable.Descriptor, int)"], ["void", "org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutateRepairedAt(org.apache.cassandra.io.sstable.Descriptor, long)"], ["org.apache.cassandra.io.sstable.metadata.MetadataType[]", "org.apache.cassandra.io.sstable.metadata.MetadataType.values()"], ["org.apache.cassandra.io.sstable.metadata.MetadataType", "org.apache.cassandra.io.sstable.metadata.MetadataType.valueOf(java.lang.String)"], ["org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer", "org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer()"], ["int", "org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer.serializedSize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.StatsMetadata)"], ["void", "org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer.serialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.StatsMetadata, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.io.sstable.metadata.StatsMetadata", "org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer.deserialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.io.sstable.metadata.MetadataComponent", "org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer.deserialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer.serialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.MetadataComponent, org.apache.cassandra.io.util.DataOutputPlus)"], ["int", "org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer.serializedSize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.MetadataComponent)"], ["org.apache.cassandra.io.sstable.metadata.StatsMetadata", "org.apache.cassandra.io.sstable.metadata.StatsMetadata(org.apache.cassandra.utils.EstimatedHistogram, org.apache.cassandra.utils.EstimatedHistogram, org.apache.cassandra.db.commitlog.IntervalSet<org.apache.cassandra.db.commitlog.CommitLogPosition>, long, long, int, int, int, int, double, org.apache.cassandra.utils.StreamingHistogram, int, java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>, boolean, long, long, long)"], ["org.apache.cassandra.io.sstable.metadata.MetadataType", "org.apache.cassandra.io.sstable.metadata.StatsMetadata.getType()"], ["double", "org.apache.cassandra.io.sstable.metadata.StatsMetadata.getEstimatedDroppableTombstoneRatio(int)"], ["double", "org.apache.cassandra.io.sstable.metadata.StatsMetadata.getDroppableTombstonesBefore(int)"], ["org.apache.cassandra.io.sstable.metadata.StatsMetadata", "org.apache.cassandra.io.sstable.metadata.StatsMetadata.mutateLevel(int)"], ["org.apache.cassandra.io.sstable.metadata.StatsMetadata", "org.apache.cassandra.io.sstable.metadata.StatsMetadata.mutateRepairedAt(long)"], ["boolean", "org.apache.cassandra.io.sstable.metadata.StatsMetadata.equals(java.lang.Object)"], ["int", "org.apache.cassandra.io.sstable.metadata.StatsMetadata.hashCode()"], ["org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer()"], ["int", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer.serializedSize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.ValidationMetadata)"], ["void", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer.serialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.ValidationMetadata, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.io.sstable.metadata.ValidationMetadata", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer.deserialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.util.DataInputPlus)"], ["org.apache.cassandra.io.sstable.metadata.MetadataComponent", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer.deserialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer.serialize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.MetadataComponent, org.apache.cassandra.io.util.DataOutputPlus)"], ["int", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer.serializedSize(org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.metadata.MetadataComponent)"], ["org.apache.cassandra.io.sstable.metadata.ValidationMetadata", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata(java.lang.String, double)"], ["org.apache.cassandra.io.sstable.metadata.MetadataType", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata.getType()"], ["boolean", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata.equals(java.lang.Object)"], ["int", "org.apache.cassandra.io.sstable.metadata.ValidationMetadata.hashCode()"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.AbstractReaderFileProxy.channel()"], ["long", "org.apache.cassandra.io.util.AbstractReaderFileProxy.fileLength()"], ["java.lang.String", "org.apache.cassandra.io.util.AbstractReaderFileProxy.toString()"], ["void", "org.apache.cassandra.io.util.AbstractReaderFileProxy.close()"], ["double", "org.apache.cassandra.io.util.AbstractReaderFileProxy.getCrcCheckChance()"], ["org.apache.cassandra.io.util.BufferManagingRebufferer$Aligned", "org.apache.cassandra.io.util.BufferManagingRebufferer$Aligned(org.apache.cassandra.io.util.ChunkReader)"], ["org.apache.cassandra.io.util.BufferManagingRebufferer$Unaligned", "org.apache.cassandra.io.util.BufferManagingRebufferer$Unaligned(org.apache.cassandra.io.util.ChunkReader)"], ["void", "org.apache.cassandra.io.util.BufferManagingRebufferer.closeReader()"], ["void", "org.apache.cassandra.io.util.BufferManagingRebufferer.close()"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.BufferManagingRebufferer.channel()"], ["long", "org.apache.cassandra.io.util.BufferManagingRebufferer.fileLength()"], ["org.apache.cassandra.io.util.Rebufferer$BufferHolder", "org.apache.cassandra.io.util.BufferManagingRebufferer.rebuffer(long)"], ["double", "org.apache.cassandra.io.util.BufferManagingRebufferer.getCrcCheckChance()"], ["java.lang.String", "org.apache.cassandra.io.util.BufferManagingRebufferer.toString()"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.BufferManagingRebufferer.buffer()"], ["long", "org.apache.cassandra.io.util.BufferManagingRebufferer.offset()"], ["void", "org.apache.cassandra.io.util.BufferManagingRebufferer.release()"], ["org.apache.cassandra.io.util.BufferedDataOutputStreamPlus", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus(java.io.RandomAccessFile)"], ["org.apache.cassandra.io.util.BufferedDataOutputStreamPlus", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus(java.io.RandomAccessFile, int)"], ["org.apache.cassandra.io.util.BufferedDataOutputStreamPlus", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus(java.io.FileOutputStream)"], ["org.apache.cassandra.io.util.BufferedDataOutputStreamPlus", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus(java.io.FileOutputStream, int)"], ["org.apache.cassandra.io.util.BufferedDataOutputStreamPlus", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus(java.nio.channels.WritableByteChannel)"], ["org.apache.cassandra.io.util.BufferedDataOutputStreamPlus", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus(java.nio.channels.WritableByteChannel, int)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(byte[])"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(byte[], int, int)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(int)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeBoolean(boolean)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeByte(int)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeShort(int)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeChar(int)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeInt(int)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeLong(long)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeVInt(long)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeUnsignedVInt(long)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeFloat(float)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeDouble(double)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeBytes(java.lang.String)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeChars(java.lang.String)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeUTF(java.lang.String)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(org.apache.cassandra.io.util.Memory, long, long)"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.flush()"], ["void", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.close()"], ["<R> R", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.applyToChannel(com.google.common.base.Function<java.nio.channels.WritableByteChannel, R>)"], ["org.apache.cassandra.io.util.BufferedDataOutputStreamPlus", "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.order(java.nio.ByteOrder)"], ["java.lang.String", "org.apache.cassandra.io.util.ChannelProxy$Cleanup.name()"], ["void", "org.apache.cassandra.io.util.ChannelProxy$Cleanup.tidy()"], ["java.nio.channels.FileChannel", "org.apache.cassandra.io.util.ChannelProxy.openChannel(java.io.File)"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.ChannelProxy(java.lang.String)"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.ChannelProxy(java.io.File)"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.ChannelProxy(java.lang.String, java.nio.channels.FileChannel)"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.ChannelProxy(org.apache.cassandra.io.util.ChannelProxy)"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.ChannelProxy.sharedCopy()"], ["java.lang.String", "org.apache.cassandra.io.util.ChannelProxy.filePath()"], ["int", "org.apache.cassandra.io.util.ChannelProxy.read(java.nio.ByteBuffer, long)"], ["long", "org.apache.cassandra.io.util.ChannelProxy.transferTo(long, long, java.nio.channels.WritableByteChannel)"], ["java.nio.MappedByteBuffer", "org.apache.cassandra.io.util.ChannelProxy.map(java.nio.channels.FileChannel$MapMode, long, long)"], ["long", "org.apache.cassandra.io.util.ChannelProxy.size()"], ["int", "org.apache.cassandra.io.util.ChannelProxy.getFileDescriptor()"], ["java.lang.String", "org.apache.cassandra.io.util.ChannelProxy.toString()"], ["org.apache.cassandra.utils.concurrent.SharedCloseable", "org.apache.cassandra.io.util.ChannelProxy.sharedCopy()"], ["org.apache.cassandra.io.util.ChecksumWriter", "org.apache.cassandra.io.util.ChecksumWriter(java.io.DataOutput)"], ["void", "org.apache.cassandra.io.util.ChecksumWriter.writeChunkSize(int)"], ["void", "org.apache.cassandra.io.util.ChecksumWriter.appendDirect(java.nio.ByteBuffer, boolean)"], ["void", "org.apache.cassandra.io.util.ChecksumWriter.writeFullChecksum(java.io.File)"], ["org.apache.cassandra.io.util.ChecksummedRandomAccessReader", "org.apache.cassandra.io.util.ChecksummedRandomAccessReader()"], ["org.apache.cassandra.io.util.RandomAccessReader", "org.apache.cassandra.io.util.ChecksummedRandomAccessReader.open(java.io.File, java.io.File)"], ["org.apache.cassandra.io.util.Rebufferer$BufferHolder", "org.apache.cassandra.io.util.ChecksummedRebufferer.rebuffer(long)"], ["void", "org.apache.cassandra.io.util.ChecksummedRebufferer.close()"], ["org.apache.cassandra.io.util.ChecksummedSequentialWriter", "org.apache.cassandra.io.util.ChecksummedSequentialWriter(java.io.File, java.io.File, java.io.File, org.apache.cassandra.io.util.SequentialWriterOption)"], ["org.apache.cassandra.io.util.CompressedChunkReader$Mmap", "org.apache.cassandra.io.util.CompressedChunkReader$Mmap(org.apache.cassandra.io.util.ChannelProxy, org.apache.cassandra.io.compress.CompressionMetadata, org.apache.cassandra.io.util.MmappedRegions)"], ["void", "org.apache.cassandra.io.util.CompressedChunkReader$Mmap.readChunk(long, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.util.CompressedChunkReader$Mmap.close()"], ["org.apache.cassandra.io.util.CompressedChunkReader$Standard", "org.apache.cassandra.io.util.CompressedChunkReader$Standard(org.apache.cassandra.io.util.ChannelProxy, org.apache.cassandra.io.compress.CompressionMetadata)"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.CompressedChunkReader$Standard.allocateBuffer()"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.CompressedChunkReader$Standard.allocateBuffer(int)"], ["void", "org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(long, java.nio.ByteBuffer)"], ["double", "org.apache.cassandra.io.util.CompressedChunkReader.getCrcCheckChance()"], ["java.lang.String", "org.apache.cassandra.io.util.CompressedChunkReader.toString()"], ["int", "org.apache.cassandra.io.util.CompressedChunkReader.chunkSize()"], ["org.apache.cassandra.io.compress.BufferType", "org.apache.cassandra.io.util.CompressedChunkReader.preferredBufferType()"], ["org.apache.cassandra.io.util.Rebufferer", "org.apache.cassandra.io.util.CompressedChunkReader.instantiateRebufferer()"], ["org.apache.cassandra.io.util.CorruptFileException", "org.apache.cassandra.io.util.CorruptFileException(java.lang.Exception, java.lang.String)"], ["org.apache.cassandra.io.util.DataInputBuffer", "org.apache.cassandra.io.util.DataInputBuffer(java.nio.ByteBuffer, boolean)"], ["org.apache.cassandra.io.util.DataInputBuffer", "org.apache.cassandra.io.util.DataInputBuffer(byte[], int, int)"], ["org.apache.cassandra.io.util.DataInputBuffer", "org.apache.cassandra.io.util.DataInputBuffer(byte[])"], ["int", "org.apache.cassandra.io.util.DataInputBuffer.available()"], ["void", "org.apache.cassandra.io.util.DataInputBuffer.close()"], ["org.apache.cassandra.io.util.DataInputPlus$DataInputStreamPlus", "org.apache.cassandra.io.util.DataInputPlus$DataInputStreamPlus(java.io.InputStream)"], ["default", "org.apache.cassandra.io.util.DataInputPlus.long readVInt()"], ["default", "org.apache.cassandra.io.util.DataInputPlus.long readUnsignedVInt()"], ["default", "org.apache.cassandra.io.util.DataInputPlus.void skipBytesFully(int)"], ["org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator", "org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator(org.apache.cassandra.io.sstable.Descriptor)"], ["org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator", "org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator(org.apache.cassandra.utils.ChecksumType, org.apache.cassandra.io.util.RandomAccessReader, java.lang.String)"], ["void", "org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator.seek(long)"], ["long", "org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator.chunkStart(long)"], ["void", "org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator.validate(byte[], int, int)"], ["void", "org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator.close()"], ["org.apache.cassandra.io.util.DataIntegrityMetadata$FileDigestValidator", "org.apache.cassandra.io.util.DataIntegrityMetadata$FileDigestValidator(org.apache.cassandra.io.sstable.Descriptor)"], ["void", "org.apache.cassandra.io.util.DataIntegrityMetadata$FileDigestValidator.validate()"], ["void", "org.apache.cassandra.io.util.DataIntegrityMetadata$FileDigestValidator.close()"], ["org.apache.cassandra.io.util.DataIntegrityMetadata", "org.apache.cassandra.io.util.DataIntegrityMetadata()"], ["org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator", "org.apache.cassandra.io.util.DataIntegrityMetadata.checksumValidator(org.apache.cassandra.io.sstable.Descriptor)"], ["org.apache.cassandra.io.util.DataIntegrityMetadata$FileDigestValidator", "org.apache.cassandra.io.util.DataIntegrityMetadata.fileDigestValidator(org.apache.cassandra.io.sstable.Descriptor)"], ["void", "org.apache.cassandra.io.util.DataOutputBuffer$1$1.close()"], ["int", "org.apache.cassandra.io.util.DataOutputBuffer$GrowingChannel.write(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.io.util.DataOutputBuffer$GrowingChannel.isOpen()"], ["void", "org.apache.cassandra.io.util.DataOutputBuffer$GrowingChannel.close()"], ["org.apache.cassandra.io.util.DataOutputBuffer", "org.apache.cassandra.io.util.DataOutputBuffer()"], ["org.apache.cassandra.io.util.DataOutputBuffer", "org.apache.cassandra.io.util.DataOutputBuffer(int)"], ["org.apache.cassandra.io.util.DataOutputBuffer", "org.apache.cassandra.io.util.DataOutputBuffer(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.util.DataOutputBuffer.flush()"], ["void", "org.apache.cassandra.io.util.DataOutputBuffer.clear()"], ["void", "org.apache.cassandra.io.util.DataOutputBuffer.close()"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.DataOutputBuffer.buffer()"], ["byte[]", "org.apache.cassandra.io.util.DataOutputBuffer.getData()"], ["int", "org.apache.cassandra.io.util.DataOutputBuffer.getLength()"], ["boolean", "org.apache.cassandra.io.util.DataOutputBuffer.hasPosition()"], ["long", "org.apache.cassandra.io.util.DataOutputBuffer.position()"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.DataOutputBuffer.asNewBuffer()"], ["byte[]", "org.apache.cassandra.io.util.DataOutputBuffer.toByteArray()"], ["org.apache.cassandra.io.util.DataOutputBufferFixed", "org.apache.cassandra.io.util.DataOutputBufferFixed()"], ["org.apache.cassandra.io.util.DataOutputBufferFixed", "org.apache.cassandra.io.util.DataOutputBufferFixed(int)"], ["org.apache.cassandra.io.util.DataOutputBufferFixed", "org.apache.cassandra.io.util.DataOutputBufferFixed(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.util.DataOutputBufferFixed.clear()"], ["default", "org.apache.cassandra.io.util.DataOutputPlus.void writeVInt(long)"], ["default", "org.apache.cassandra.io.util.DataOutputPlus.void writeUnsignedVInt(long)"], ["default", "org.apache.cassandra.io.util.DataOutputPlus.long position()"], ["default", "org.apache.cassandra.io.util.DataOutputPlus.boolean hasPosition()"], ["byte[]", "org.apache.cassandra.io.util.DataOutputStreamPlus$1.initialValue()"], ["java.lang.Object", "org.apache.cassandra.io.util.DataOutputStreamPlus$1.initialValue()"], ["boolean", "org.apache.cassandra.io.util.DataOutputStreamPlus$2.isOpen()"], ["void", "org.apache.cassandra.io.util.DataOutputStreamPlus$2.close()"], ["int", "org.apache.cassandra.io.util.DataOutputStreamPlus$2.write(java.nio.ByteBuffer)"], ["default", "org.apache.cassandra.io.util.DiskOptimizationStrategy.int roundBufferSize(long)"], ["int", "org.apache.cassandra.io.util.DiskOptimizationStrategy.roundForCaching(int, boolean)"], ["org.apache.cassandra.io.util.FastByteArrayInputStream", "org.apache.cassandra.io.util.FastByteArrayInputStream(byte[])"], ["org.apache.cassandra.io.util.FastByteArrayInputStream", "org.apache.cassandra.io.util.FastByteArrayInputStream(byte[], int, int)"], ["int", "org.apache.cassandra.io.util.FastByteArrayInputStream.available()"], ["void", "org.apache.cassandra.io.util.FastByteArrayInputStream.close()"], ["void", "org.apache.cassandra.io.util.FastByteArrayInputStream.mark(int)"], ["boolean", "org.apache.cassandra.io.util.FastByteArrayInputStream.markSupported()"], ["int", "org.apache.cassandra.io.util.FastByteArrayInputStream.read()"], ["int", "org.apache.cassandra.io.util.FastByteArrayInputStream.read(byte[], int, int)"], ["void", "org.apache.cassandra.io.util.FastByteArrayInputStream.reset()"], ["long", "org.apache.cassandra.io.util.FastByteArrayInputStream.skip(long)"], ["org.apache.cassandra.io.util.FileHandle$Builder", "org.apache.cassandra.io.util.FileHandle$Builder(java.lang.String)"], ["org.apache.cassandra.io.util.FileHandle$Builder", "org.apache.cassandra.io.util.FileHandle$Builder(org.apache.cassandra.io.util.ChannelProxy)"], ["org.apache.cassandra.io.util.FileHandle$Builder", "org.apache.cassandra.io.util.FileHandle$Builder.compressed(boolean)"], ["org.apache.cassandra.io.util.FileHandle$Builder", "org.apache.cassandra.io.util.FileHandle$Builder.withChunkCache(org.apache.cassandra.cache.ChunkCache)"], ["org.apache.cassandra.io.util.FileHandle$Builder", "org.apache.cassandra.io.util.FileHandle$Builder.withCompressionMetadata(org.apache.cassandra.io.compress.CompressionMetadata)"], ["org.apache.cassandra.io.util.FileHandle$Builder", "org.apache.cassandra.io.util.FileHandle$Builder.mmapped(boolean)"], ["org.apache.cassandra.io.util.FileHandle$Builder", "org.apache.cassandra.io.util.FileHandle$Builder.bufferSize(int)"], ["org.apache.cassandra.io.util.FileHandle$Builder", "org.apache.cassandra.io.util.FileHandle$Builder.bufferType(org.apache.cassandra.io.compress.BufferType)"], ["org.apache.cassandra.io.util.FileHandle", "org.apache.cassandra.io.util.FileHandle$Builder.complete()"], ["org.apache.cassandra.io.util.FileHandle", "org.apache.cassandra.io.util.FileHandle$Builder.complete(long)"], ["java.lang.Throwable", "org.apache.cassandra.io.util.FileHandle$Builder.close(java.lang.Throwable)"], ["void", "org.apache.cassandra.io.util.FileHandle$Builder.close()"], ["java.lang.String", "org.apache.cassandra.io.util.FileHandle$Cleanup.name()"], ["void", "org.apache.cassandra.io.util.FileHandle$Cleanup.tidy()"], ["java.lang.String", "org.apache.cassandra.io.util.FileHandle.path()"], ["long", "org.apache.cassandra.io.util.FileHandle.dataLength()"], ["org.apache.cassandra.io.util.RebuffererFactory", "org.apache.cassandra.io.util.FileHandle.rebuffererFactory()"], ["void", "org.apache.cassandra.io.util.FileHandle.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["org.apache.cassandra.io.util.FileHandle", "org.apache.cassandra.io.util.FileHandle.sharedCopy()"], ["org.apache.cassandra.io.util.RandomAccessReader", "org.apache.cassandra.io.util.FileHandle.createReader()"], ["org.apache.cassandra.io.util.RandomAccessReader", "org.apache.cassandra.io.util.FileHandle.createReader(com.google.common.util.concurrent.RateLimiter)"], ["org.apache.cassandra.io.util.FileDataInput", "org.apache.cassandra.io.util.FileHandle.createReader(long)"], ["void", "org.apache.cassandra.io.util.FileHandle.dropPageCache(long)"], ["java.lang.String", "org.apache.cassandra.io.util.FileHandle.toString()"], ["org.apache.cassandra.utils.concurrent.SharedCloseable", "org.apache.cassandra.io.util.FileHandle.sharedCopy()"], ["org.apache.cassandra.io.util.FileSegmentInputStream", "org.apache.cassandra.io.util.FileSegmentInputStream(java.nio.ByteBuffer, java.lang.String, long)"], ["java.lang.String", "org.apache.cassandra.io.util.FileSegmentInputStream.getPath()"], ["boolean", "org.apache.cassandra.io.util.FileSegmentInputStream.isEOF()"], ["long", "org.apache.cassandra.io.util.FileSegmentInputStream.bytesRemaining()"], ["void", "org.apache.cassandra.io.util.FileSegmentInputStream.seek(long)"], ["boolean", "org.apache.cassandra.io.util.FileSegmentInputStream.markSupported()"], ["org.apache.cassandra.io.util.DataPosition", "org.apache.cassandra.io.util.FileSegmentInputStream.mark()"], ["void", "org.apache.cassandra.io.util.FileSegmentInputStream.reset(org.apache.cassandra.io.util.DataPosition)"], ["long", "org.apache.cassandra.io.util.FileSegmentInputStream.bytesPastMark(org.apache.cassandra.io.util.DataPosition)"], ["long", "org.apache.cassandra.io.util.FileSegmentInputStream.getFilePointer()"], ["void", "org.apache.cassandra.io.util.FileUtils$1.run()"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.io.util.FileUtils$2.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.io.util.FileUtils$2.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["org.apache.cassandra.io.util.FileUtils$SafeFileStore", "org.apache.cassandra.io.util.FileUtils$SafeFileStore(java.nio.file.FileStore)"], ["java.lang.String", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.name()"], ["java.lang.String", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.type()"], ["boolean", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.isReadOnly()"], ["long", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.getTotalSpace()"], ["long", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.getUsableSpace()"], ["long", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.getUnallocatedSpace()"], ["boolean", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)"], ["boolean", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.supportsFileAttributeView(java.lang.String)"], ["<V extends java.nio.file.attribute.FileStoreAttributeView> V", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.getFileStoreAttributeView(java.lang.Class<V>)"], ["java.lang.Object", "org.apache.cassandra.io.util.FileUtils$SafeFileStore.getAttribute(java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.createHardLink(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.createHardLink(java.io.File, java.io.File)"], ["java.io.File", "org.apache.cassandra.io.util.FileUtils.createTempFile(java.lang.String, java.lang.String, java.io.File)"], ["java.io.File", "org.apache.cassandra.io.util.FileUtils.createTempFile(java.lang.String, java.lang.String)"], ["java.lang.Throwable", "org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(java.lang.String, boolean, java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(java.io.File, boolean, java.lang.Throwable)"], ["void", "org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(java.io.File)"], ["void", "org.apache.cassandra.io.util.FileUtils.renameWithOutConfirm(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.renameWithConfirm(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.renameWithConfirm(java.io.File, java.io.File)"], ["void", "org.apache.cassandra.io.util.FileUtils.truncate(java.lang.String, long)"], ["void", "org.apache.cassandra.io.util.FileUtils.closeQuietly(java.io.Closeable)"], ["void", "org.apache.cassandra.io.util.FileUtils.closeQuietly(java.lang.AutoCloseable)"], ["void", "org.apache.cassandra.io.util.FileUtils.close(java.io.Closeable...)"], ["void", "org.apache.cassandra.io.util.FileUtils.close(java.lang.Iterable<? extends java.io.Closeable>)"], ["void", "org.apache.cassandra.io.util.FileUtils.closeQuietly(java.lang.Iterable<? extends java.lang.AutoCloseable>)"], ["java.lang.String", "org.apache.cassandra.io.util.FileUtils.getCanonicalPath(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.io.util.FileUtils.getCanonicalPath(java.io.File)"], ["boolean", "org.apache.cassandra.io.util.FileUtils.isContained(java.io.File, java.io.File)"], ["java.lang.String", "org.apache.cassandra.io.util.FileUtils.getRelativePath(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.clean(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.util.FileUtils.createDirectory(java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.createDirectory(java.io.File)"], ["boolean", "org.apache.cassandra.io.util.FileUtils.delete(java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.delete(java.io.File...)"], ["void", "org.apache.cassandra.io.util.FileUtils.deleteAsync(java.lang.String)"], ["void", "org.apache.cassandra.io.util.FileUtils.visitDirectory(java.nio.file.Path, java.util.function.Predicate<? super java.io.File>, java.util.function.Consumer<? super java.io.File>)"], ["java.lang.String", "org.apache.cassandra.io.util.FileUtils.stringifyFileSize(double)"], ["void", "org.apache.cassandra.io.util.FileUtils.deleteRecursive(java.io.File)"], ["void", "org.apache.cassandra.io.util.FileUtils.deleteRecursiveOnExit(java.io.File)"], ["void", "org.apache.cassandra.io.util.FileUtils.handleCorruptSSTable(org.apache.cassandra.io.sstable.CorruptSSTableException)"], ["void", "org.apache.cassandra.io.util.FileUtils.handleFSError(org.apache.cassandra.io.FSError)"], ["long", "org.apache.cassandra.io.util.FileUtils.folderSize(java.io.File)"], ["void", "org.apache.cassandra.io.util.FileUtils.copyTo(java.io.DataInput, java.io.OutputStream, int)"], ["boolean", "org.apache.cassandra.io.util.FileUtils.isSubDirectory(java.io.File, java.io.File)"], ["void", "org.apache.cassandra.io.util.FileUtils.append(java.io.File, java.lang.String...)"], ["void", "org.apache.cassandra.io.util.FileUtils.appendAndSync(java.io.File, java.lang.String...)"], ["void", "org.apache.cassandra.io.util.FileUtils.replace(java.io.File, java.lang.String...)"], ["void", "org.apache.cassandra.io.util.FileUtils.write(java.io.File, java.util.List<java.lang.String>, java.nio.file.StandardOpenOption...)"], ["void", "org.apache.cassandra.io.util.FileUtils.setFSErrorHandler(org.apache.cassandra.io.FSErrorHandler)"], ["long", "org.apache.cassandra.io.util.FileUtils.getTotalSpace(java.io.File)"], ["long", "org.apache.cassandra.io.util.FileUtils.getFreeSpace(java.io.File)"], ["long", "org.apache.cassandra.io.util.FileUtils.getUsableSpace(java.io.File)"], ["java.nio.file.FileStore", "org.apache.cassandra.io.util.FileUtils.getFileStore(java.nio.file.Path)"], ["org.apache.cassandra.io.util.LengthAvailableInputStream", "org.apache.cassandra.io.util.LengthAvailableInputStream(java.io.InputStream, long)"], ["int", "org.apache.cassandra.io.util.LengthAvailableInputStream.read()"], ["int", "org.apache.cassandra.io.util.LengthAvailableInputStream.read(byte[])"], ["int", "org.apache.cassandra.io.util.LengthAvailableInputStream.read(byte[], int, int)"], ["long", "org.apache.cassandra.io.util.LengthAvailableInputStream.skip(long)"], ["int", "org.apache.cassandra.io.util.LengthAvailableInputStream.available()"], ["void", "org.apache.cassandra.io.util.LengthAvailableInputStream.close()"], ["synchronized", "org.apache.cassandra.io.util.LengthAvailableInputStream.void mark(int)"], ["synchronized", "org.apache.cassandra.io.util.LengthAvailableInputStream.void reset()"], ["boolean", "org.apache.cassandra.io.util.LengthAvailableInputStream.markSupported()"], ["org.apache.cassandra.io.util.LimitingRebufferer", "org.apache.cassandra.io.util.LimitingRebufferer(org.apache.cassandra.io.util.Rebufferer, com.google.common.util.concurrent.RateLimiter, int)"], ["org.apache.cassandra.io.util.Rebufferer$BufferHolder", "org.apache.cassandra.io.util.LimitingRebufferer.rebuffer(long)"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.LimitingRebufferer.channel()"], ["long", "org.apache.cassandra.io.util.LimitingRebufferer.fileLength()"], ["double", "org.apache.cassandra.io.util.LimitingRebufferer.getCrcCheckChance()"], ["void", "org.apache.cassandra.io.util.LimitingRebufferer.close()"], ["void", "org.apache.cassandra.io.util.LimitingRebufferer.closeReader()"], ["java.lang.String", "org.apache.cassandra.io.util.LimitingRebufferer.toString()"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.LimitingRebufferer.buffer()"], ["long", "org.apache.cassandra.io.util.LimitingRebufferer.offset()"], ["void", "org.apache.cassandra.io.util.LimitingRebufferer.release()"], ["org.apache.cassandra.io.util.Memory", "org.apache.cassandra.io.util.Memory.allocate(long)"], ["void", "org.apache.cassandra.io.util.Memory.setByte(long, byte)"], ["void", "org.apache.cassandra.io.util.Memory.setMemory(long, long, byte)"], ["void", "org.apache.cassandra.io.util.Memory.setLong(long, long)"], ["void", "org.apache.cassandra.io.util.Memory.setInt(long, int)"], ["void", "org.apache.cassandra.io.util.Memory.setShort(long, short)"], ["void", "org.apache.cassandra.io.util.Memory.setBytes(long, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.util.Memory.setBytes(long, byte[], int, int)"], ["byte", "org.apache.cassandra.io.util.Memory.getByte(long)"], ["long", "org.apache.cassandra.io.util.Memory.getLong(long)"], ["int", "org.apache.cassandra.io.util.Memory.getInt(long)"], ["void", "org.apache.cassandra.io.util.Memory.getBytes(long, byte[], int, int)"], ["void", "org.apache.cassandra.io.util.Memory.put(long, org.apache.cassandra.io.util.Memory, long, long)"], ["org.apache.cassandra.io.util.Memory", "org.apache.cassandra.io.util.Memory.copy(long)"], ["void", "org.apache.cassandra.io.util.Memory.free()"], ["void", "org.apache.cassandra.io.util.Memory.close()"], ["long", "org.apache.cassandra.io.util.Memory.size()"], ["boolean", "org.apache.cassandra.io.util.Memory.equals(java.lang.Object)"], ["java.nio.ByteBuffer[]", "org.apache.cassandra.io.util.Memory.asByteBuffers(long, long)"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.Memory.asByteBuffer(long, int)"], ["void", "org.apache.cassandra.io.util.Memory.setByteBuffer(java.nio.ByteBuffer, long, int)"], ["java.lang.String", "org.apache.cassandra.io.util.Memory.toString()"], ["org.apache.cassandra.io.util.MemoryInputStream", "org.apache.cassandra.io.util.MemoryInputStream(org.apache.cassandra.io.util.Memory)"], ["org.apache.cassandra.io.util.MemoryInputStream", "org.apache.cassandra.io.util.MemoryInputStream(org.apache.cassandra.io.util.Memory, int)"], ["int", "org.apache.cassandra.io.util.MemoryInputStream.available()"], ["org.apache.cassandra.io.util.MemoryOutputStream", "org.apache.cassandra.io.util.MemoryOutputStream(org.apache.cassandra.io.util.Memory)"], ["void", "org.apache.cassandra.io.util.MemoryOutputStream.write(int)"], ["void", "org.apache.cassandra.io.util.MemoryOutputStream.write(byte[], int, int)"], ["int", "org.apache.cassandra.io.util.MemoryOutputStream.position()"], ["org.apache.cassandra.io.util.Rebufferer$BufferHolder", "org.apache.cassandra.io.util.MmapRebufferer.rebuffer(long)"], ["org.apache.cassandra.io.util.Rebufferer", "org.apache.cassandra.io.util.MmapRebufferer.instantiateRebufferer()"], ["void", "org.apache.cassandra.io.util.MmapRebufferer.close()"], ["void", "org.apache.cassandra.io.util.MmapRebufferer.closeReader()"], ["java.lang.String", "org.apache.cassandra.io.util.MmapRebufferer.toString()"], ["org.apache.cassandra.io.util.MmappedRegions$Region", "org.apache.cassandra.io.util.MmappedRegions$Region(long, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.MmappedRegions$Region.buffer()"], ["long", "org.apache.cassandra.io.util.MmappedRegions$Region.offset()"], ["long", "org.apache.cassandra.io.util.MmappedRegions$Region.end()"], ["void", "org.apache.cassandra.io.util.MmappedRegions$Region.release()"], ["java.lang.String", "org.apache.cassandra.io.util.MmappedRegions$Tidier.name()"], ["void", "org.apache.cassandra.io.util.MmappedRegions$Tidier.tidy()"], ["org.apache.cassandra.io.util.MmappedRegions", "org.apache.cassandra.io.util.MmappedRegions.empty(org.apache.cassandra.io.util.ChannelProxy)"], ["org.apache.cassandra.io.util.MmappedRegions", "org.apache.cassandra.io.util.MmappedRegions.map(org.apache.cassandra.io.util.ChannelProxy, org.apache.cassandra.io.compress.CompressionMetadata)"], ["org.apache.cassandra.io.util.MmappedRegions", "org.apache.cassandra.io.util.MmappedRegions.map(org.apache.cassandra.io.util.ChannelProxy, long)"], ["org.apache.cassandra.io.util.MmappedRegions", "org.apache.cassandra.io.util.MmappedRegions.sharedCopy()"], ["void", "org.apache.cassandra.io.util.MmappedRegions.extend(long)"], ["boolean", "org.apache.cassandra.io.util.MmappedRegions.isValid(org.apache.cassandra.io.util.ChannelProxy)"], ["boolean", "org.apache.cassandra.io.util.MmappedRegions.isEmpty()"], ["org.apache.cassandra.io.util.MmappedRegions$Region", "org.apache.cassandra.io.util.MmappedRegions.floor(long)"], ["void", "org.apache.cassandra.io.util.MmappedRegions.closeQuietly()"], ["org.apache.cassandra.utils.concurrent.SharedCloseable", "org.apache.cassandra.io.util.MmappedRegions.sharedCopy()"], ["org.apache.cassandra.io.util.NIODataInputStream", "org.apache.cassandra.io.util.NIODataInputStream(java.nio.channels.ReadableByteChannel, int)"], ["void", "org.apache.cassandra.io.util.NIODataInputStream.close()"], ["int", "org.apache.cassandra.io.util.NIODataInputStream.available()"], ["void", "org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel.close()"], ["void", "org.apache.cassandra.io.util.RandomAccessReader.reBuffer()"], ["long", "org.apache.cassandra.io.util.RandomAccessReader.getFilePointer()"], ["java.lang.String", "org.apache.cassandra.io.util.RandomAccessReader.getPath()"], ["org.apache.cassandra.io.util.ChannelProxy", "org.apache.cassandra.io.util.RandomAccessReader.getChannel()"], ["void", "org.apache.cassandra.io.util.RandomAccessReader.reset()"], ["boolean", "org.apache.cassandra.io.util.RandomAccessReader.markSupported()"], ["long", "org.apache.cassandra.io.util.RandomAccessReader.bytesPastMark()"], ["org.apache.cassandra.io.util.DataPosition", "org.apache.cassandra.io.util.RandomAccessReader.mark()"], ["void", "org.apache.cassandra.io.util.RandomAccessReader.reset(org.apache.cassandra.io.util.DataPosition)"], ["long", "org.apache.cassandra.io.util.RandomAccessReader.bytesPastMark(org.apache.cassandra.io.util.DataPosition)"], ["boolean", "org.apache.cassandra.io.util.RandomAccessReader.isEOF()"], ["long", "org.apache.cassandra.io.util.RandomAccessReader.bytesRemaining()"], ["int", "org.apache.cassandra.io.util.RandomAccessReader.available()"], ["void", "org.apache.cassandra.io.util.RandomAccessReader.close()"], ["java.lang.String", "org.apache.cassandra.io.util.RandomAccessReader.toString()"], ["void", "org.apache.cassandra.io.util.RandomAccessReader.seek(long)"], ["java.lang.String", "org.apache.cassandra.io.util.RandomAccessReader.readLine()"], ["long", "org.apache.cassandra.io.util.RandomAccessReader.length()"], ["long", "org.apache.cassandra.io.util.RandomAccessReader.getPosition()"], ["double", "org.apache.cassandra.io.util.RandomAccessReader.getCrcCheckChance()"], ["org.apache.cassandra.io.util.RandomAccessReader", "org.apache.cassandra.io.util.RandomAccessReader.open(java.io.File)"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.Rebufferer$1.buffer()"], ["long", "org.apache.cassandra.io.util.Rebufferer$1.offset()"], ["void", "org.apache.cassandra.io.util.Rebufferer$1.release()"], ["void", "org.apache.cassandra.io.util.RebufferingInputStream.readFully(byte[])"], ["void", "org.apache.cassandra.io.util.RebufferingInputStream.readFully(byte[], int, int)"], ["int", "org.apache.cassandra.io.util.RebufferingInputStream.read(byte[], int, int)"], ["int", "org.apache.cassandra.io.util.RebufferingInputStream.skipBytes(int)"], ["boolean", "org.apache.cassandra.io.util.RebufferingInputStream.readBoolean()"], ["byte", "org.apache.cassandra.io.util.RebufferingInputStream.readByte()"], ["int", "org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedByte()"], ["short", "org.apache.cassandra.io.util.RebufferingInputStream.readShort()"], ["int", "org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedShort()"], ["char", "org.apache.cassandra.io.util.RebufferingInputStream.readChar()"], ["int", "org.apache.cassandra.io.util.RebufferingInputStream.readInt()"], ["long", "org.apache.cassandra.io.util.RebufferingInputStream.readLong()"], ["long", "org.apache.cassandra.io.util.RebufferingInputStream.readVInt()"], ["long", "org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedVInt()"], ["float", "org.apache.cassandra.io.util.RebufferingInputStream.readFloat()"], ["double", "org.apache.cassandra.io.util.RebufferingInputStream.readDouble()"], ["java.lang.String", "org.apache.cassandra.io.util.RebufferingInputStream.readLine()"], ["java.lang.String", "org.apache.cassandra.io.util.RebufferingInputStream.readUTF()"], ["int", "org.apache.cassandra.io.util.RebufferingInputStream.read()"], ["org.apache.cassandra.io.util.RewindableDataInputStreamPlus", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus(java.io.InputStream, int, int, java.io.File, int)"], ["org.apache.cassandra.io.util.DataPosition", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.mark()"], ["void", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.reset(org.apache.cassandra.io.util.DataPosition)"], ["long", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.bytesPastMark(org.apache.cassandra.io.util.DataPosition)"], ["boolean", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.markSupported()"], ["synchronized", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.void mark(int)"], ["synchronized", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.void reset()"], ["int", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.available()"], ["int", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.read()"], ["int", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.read(byte[], int, int)"], ["int", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.read(byte[])"], ["long", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.skip(long)"], ["void", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.close()"], ["void", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.close(boolean)"], ["void", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readFully(byte[])"], ["void", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readFully(byte[], int, int)"], ["int", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.skipBytes(int)"], ["boolean", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readBoolean()"], ["byte", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readByte()"], ["int", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readUnsignedByte()"], ["short", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readShort()"], ["int", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readUnsignedShort()"], ["char", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readChar()"], ["int", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readInt()"], ["long", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readLong()"], ["float", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readFloat()"], ["double", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readDouble()"], ["java.lang.String", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readLine()"], ["java.lang.String", "org.apache.cassandra.io.util.RewindableDataInputStreamPlus.readUTF()"], ["void", "org.apache.cassandra.io.util.SafeMemory$MemoryTidy.tidy()"], ["java.lang.String", "org.apache.cassandra.io.util.SafeMemory$MemoryTidy.name()"], ["org.apache.cassandra.io.util.SafeMemory", "org.apache.cassandra.io.util.SafeMemory(long)"], ["org.apache.cassandra.io.util.SafeMemory", "org.apache.cassandra.io.util.SafeMemory.sharedCopy()"], ["void", "org.apache.cassandra.io.util.SafeMemory.free()"], ["void", "org.apache.cassandra.io.util.SafeMemory.close()"], ["java.lang.Throwable", "org.apache.cassandra.io.util.SafeMemory.close(java.lang.Throwable)"], ["org.apache.cassandra.io.util.SafeMemory", "org.apache.cassandra.io.util.SafeMemory.copy(long)"], ["void", "org.apache.cassandra.io.util.SafeMemory.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["org.apache.cassandra.io.util.Memory", "org.apache.cassandra.io.util.SafeMemory.copy(long)"], ["org.apache.cassandra.utils.concurrent.SharedCloseable", "org.apache.cassandra.io.util.SafeMemory.sharedCopy()"], ["org.apache.cassandra.io.util.SafeMemoryWriter", "org.apache.cassandra.io.util.SafeMemoryWriter(long)"], ["org.apache.cassandra.io.util.SafeMemory", "org.apache.cassandra.io.util.SafeMemoryWriter.currentBuffer()"], ["void", "org.apache.cassandra.io.util.SafeMemoryWriter.trim()"], ["void", "org.apache.cassandra.io.util.SafeMemoryWriter.close()"], ["java.lang.Throwable", "org.apache.cassandra.io.util.SafeMemoryWriter.close(java.lang.Throwable)"], ["long", "org.apache.cassandra.io.util.SafeMemoryWriter.length()"], ["long", "org.apache.cassandra.io.util.SafeMemoryWriter.capacity()"], ["org.apache.cassandra.io.util.SafeMemoryWriter", "org.apache.cassandra.io.util.SafeMemoryWriter.order(java.nio.ByteOrder)"], ["long", "org.apache.cassandra.io.util.SafeMemoryWriter.validateReallocation(long)"], ["org.apache.cassandra.io.util.BufferedDataOutputStreamPlus", "org.apache.cassandra.io.util.SafeMemoryWriter.order(java.nio.ByteOrder)"], ["org.apache.cassandra.io.util.SequentialWriter$BufferedFileWriterMark", "org.apache.cassandra.io.util.SequentialWriter$BufferedFileWriterMark(long)"], ["org.apache.cassandra.io.util.SequentialWriter", "org.apache.cassandra.io.util.SequentialWriter(java.io.File)"], ["org.apache.cassandra.io.util.SequentialWriter", "org.apache.cassandra.io.util.SequentialWriter(java.io.File, org.apache.cassandra.io.util.SequentialWriterOption)"], ["void", "org.apache.cassandra.io.util.SequentialWriter.skipBytes(int)"], ["void", "org.apache.cassandra.io.util.SequentialWriter.sync()"], ["void", "org.apache.cassandra.io.util.SequentialWriter.setPostFlushListener(java.lang.Runnable)"], ["boolean", "org.apache.cassandra.io.util.SequentialWriter.hasPosition()"], ["long", "org.apache.cassandra.io.util.SequentialWriter.position()"], ["long", "org.apache.cassandra.io.util.SequentialWriter.getOnDiskFilePointer()"], ["long", "org.apache.cassandra.io.util.SequentialWriter.getEstimatedOnDiskBytesWritten()"], ["long", "org.apache.cassandra.io.util.SequentialWriter.length()"], ["java.lang.String", "org.apache.cassandra.io.util.SequentialWriter.getPath()"], ["org.apache.cassandra.io.util.DataPosition", "org.apache.cassandra.io.util.SequentialWriter.mark()"], ["void", "org.apache.cassandra.io.util.SequentialWriter.resetAndTruncate(org.apache.cassandra.io.util.DataPosition)"], ["long", "org.apache.cassandra.io.util.SequentialWriter.getLastFlushOffset()"], ["void", "org.apache.cassandra.io.util.SequentialWriter.truncate(long)"], ["boolean", "org.apache.cassandra.io.util.SequentialWriter.isOpen()"], ["void", "org.apache.cassandra.io.util.SequentialWriter.prepareToCommit()"], ["java.lang.Throwable", "org.apache.cassandra.io.util.SequentialWriter.commit(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.io.util.SequentialWriter.abort(java.lang.Throwable)"], ["void", "org.apache.cassandra.io.util.SequentialWriter.close()"], ["void", "org.apache.cassandra.io.util.SequentialWriter.finish()"], ["org.apache.cassandra.io.util.SequentialWriterOption", "org.apache.cassandra.io.util.SequentialWriterOption$Builder.build()"], ["org.apache.cassandra.io.util.SequentialWriterOption$Builder", "org.apache.cassandra.io.util.SequentialWriterOption$Builder.bufferSize(int)"], ["org.apache.cassandra.io.util.SequentialWriterOption$Builder", "org.apache.cassandra.io.util.SequentialWriterOption$Builder.bufferType(org.apache.cassandra.io.compress.BufferType)"], ["org.apache.cassandra.io.util.SequentialWriterOption$Builder", "org.apache.cassandra.io.util.SequentialWriterOption$Builder.trickleFsync(boolean)"], ["org.apache.cassandra.io.util.SequentialWriterOption$Builder", "org.apache.cassandra.io.util.SequentialWriterOption$Builder.trickleFsyncByteInterval(int)"], ["org.apache.cassandra.io.util.SequentialWriterOption$Builder", "org.apache.cassandra.io.util.SequentialWriterOption$Builder.finishOnClose(boolean)"], ["org.apache.cassandra.io.util.SequentialWriterOption$Builder", "org.apache.cassandra.io.util.SequentialWriterOption.newBuilder()"], ["int", "org.apache.cassandra.io.util.SequentialWriterOption.bufferSize()"], ["org.apache.cassandra.io.compress.BufferType", "org.apache.cassandra.io.util.SequentialWriterOption.bufferType()"], ["boolean", "org.apache.cassandra.io.util.SequentialWriterOption.trickleFsync()"], ["int", "org.apache.cassandra.io.util.SequentialWriterOption.trickleFsyncByteInterval()"], ["boolean", "org.apache.cassandra.io.util.SequentialWriterOption.finishOnClose()"], ["java.nio.ByteBuffer", "org.apache.cassandra.io.util.SequentialWriterOption.allocateBuffer()"], ["void", "org.apache.cassandra.io.util.SimpleChunkReader.readChunk(long, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.io.util.SimpleChunkReader.chunkSize()"], ["org.apache.cassandra.io.compress.BufferType", "org.apache.cassandra.io.util.SimpleChunkReader.preferredBufferType()"], ["org.apache.cassandra.io.util.Rebufferer", "org.apache.cassandra.io.util.SimpleChunkReader.instantiateRebufferer()"], ["java.lang.String", "org.apache.cassandra.io.util.SimpleChunkReader.toString()"], ["org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy", "org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy()"], ["int", "org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy.bufferSize(long)"], ["org.apache.cassandra.io.util.SsdDiskOptimizationStrategy", "org.apache.cassandra.io.util.SsdDiskOptimizationStrategy(double)"], ["int", "org.apache.cassandra.io.util.SsdDiskOptimizationStrategy.bufferSize(long)"], ["org.apache.cassandra.io.util.TrackedDataInputPlus", "org.apache.cassandra.io.util.TrackedDataInputPlus(java.io.DataInput)"], ["long", "org.apache.cassandra.io.util.TrackedDataInputPlus.getBytesRead()"], ["void", "org.apache.cassandra.io.util.TrackedDataInputPlus.reset(long)"], ["boolean", "org.apache.cassandra.io.util.TrackedDataInputPlus.readBoolean()"], ["byte", "org.apache.cassandra.io.util.TrackedDataInputPlus.readByte()"], ["char", "org.apache.cassandra.io.util.TrackedDataInputPlus.readChar()"], ["double", "org.apache.cassandra.io.util.TrackedDataInputPlus.readDouble()"], ["float", "org.apache.cassandra.io.util.TrackedDataInputPlus.readFloat()"], ["void", "org.apache.cassandra.io.util.TrackedDataInputPlus.readFully(byte[], int, int)"], ["void", "org.apache.cassandra.io.util.TrackedDataInputPlus.readFully(byte[])"], ["int", "org.apache.cassandra.io.util.TrackedDataInputPlus.readInt()"], ["java.lang.String", "org.apache.cassandra.io.util.TrackedDataInputPlus.readLine()"], ["long", "org.apache.cassandra.io.util.TrackedDataInputPlus.readLong()"], ["short", "org.apache.cassandra.io.util.TrackedDataInputPlus.readShort()"], ["java.lang.String", "org.apache.cassandra.io.util.TrackedDataInputPlus.readUTF()"], ["int", "org.apache.cassandra.io.util.TrackedDataInputPlus.readUnsignedByte()"], ["int", "org.apache.cassandra.io.util.TrackedDataInputPlus.readUnsignedShort()"], ["int", "org.apache.cassandra.io.util.TrackedDataInputPlus.skipBytes(int)"], ["org.apache.cassandra.io.util.TrackedInputStream", "org.apache.cassandra.io.util.TrackedInputStream(java.io.InputStream)"], ["long", "org.apache.cassandra.io.util.TrackedInputStream.getBytesRead()"], ["void", "org.apache.cassandra.io.util.TrackedInputStream.reset(long)"], ["int", "org.apache.cassandra.io.util.TrackedInputStream.read()"], ["int", "org.apache.cassandra.io.util.TrackedInputStream.read(byte[], int, int)"], ["int", "org.apache.cassandra.io.util.TrackedInputStream.read(byte[])"], ["long", "org.apache.cassandra.io.util.TrackedInputStream.skip(long)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(byte[])"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeBoolean(boolean)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeByte(int)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeBytes(java.lang.String)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeChar(int)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeChars(java.lang.String)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeDouble(double)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeFloat(float)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeInt(int)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeLong(long)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeShort(int)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeUTF(java.lang.String, java.io.DataOutput)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeUTF(java.lang.String)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(org.apache.cassandra.io.util.Memory, long, long)"], ["<R> R", "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.applyToChannel(com.google.common.base.Function<java.nio.channels.WritableByteChannel, R>)"], ["org.apache.cassandra.io.util.WrappedDataOutputStreamPlus", "org.apache.cassandra.io.util.WrappedDataOutputStreamPlus(java.io.OutputStream)"], ["org.apache.cassandra.io.util.WrappedDataOutputStreamPlus", "org.apache.cassandra.io.util.WrappedDataOutputStreamPlus(java.io.OutputStream, java.nio.channels.WritableByteChannel)"], ["void", "org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.write(byte[], int, int)"], ["void", "org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.write(int)"], ["void", "org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.close()"], ["void", "org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.flush()"], ["int", "org.apache.cassandra.locator.AbstractEndpointSnitch$1.compare(java.net.InetAddress, java.net.InetAddress)"], ["int", "org.apache.cassandra.locator.AbstractEndpointSnitch$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.locator.AbstractEndpointSnitch", "org.apache.cassandra.locator.AbstractEndpointSnitch()"], ["void", "org.apache.cassandra.locator.AbstractEndpointSnitch.sortByProximity(java.net.InetAddress, java.util.List<java.net.InetAddress>)"], ["void", "org.apache.cassandra.locator.AbstractEndpointSnitch.gossiperStarting()"], ["boolean", "org.apache.cassandra.locator.AbstractEndpointSnitch.isWorthMergingForRangeQuery(java.util.List<java.net.InetAddress>, java.util.List<java.net.InetAddress>, java.util.List<java.net.InetAddress>)"], ["org.apache.cassandra.locator.AbstractNetworkTopologySnitch", "org.apache.cassandra.locator.AbstractNetworkTopologySnitch()"], ["int", "org.apache.cassandra.locator.AbstractNetworkTopologySnitch.compareEndpoints(java.net.InetAddress, java.net.InetAddress, java.net.InetAddress)"], ["<T> org.apache.cassandra.service.AbstractWriteResponseHandler<T>", "org.apache.cassandra.locator.AbstractReplicationStrategy.getWriteResponseHandler(java.util.Collection<java.net.InetAddress>, java.util.Collection<java.net.InetAddress>, org.apache.cassandra.db.ConsistencyLevel, java.lang.Runnable, org.apache.cassandra.db.WriteType, long)"], ["com.google.common.collect.Multimap<java.net.InetAddress, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>", "org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges(org.apache.cassandra.locator.TokenMetadata)"], ["com.google.common.collect.Multimap<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, java.net.InetAddress>", "org.apache.cassandra.locator.AbstractReplicationStrategy.getRangeAddresses(org.apache.cassandra.locator.TokenMetadata)"], ["com.google.common.collect.Multimap<java.net.InetAddress, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>", "org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges()"], ["org.apache.cassandra.locator.AbstractReplicationStrategy", "org.apache.cassandra.locator.AbstractReplicationStrategy.createReplicationStrategy(java.lang.String, java.lang.Class<? extends org.apache.cassandra.locator.AbstractReplicationStrategy>, org.apache.cassandra.locator.TokenMetadata, org.apache.cassandra.locator.IEndpointSnitch, java.util.Map<java.lang.String, java.lang.String>)"], ["void", "org.apache.cassandra.locator.AbstractReplicationStrategy.validateReplicationStrategy(java.lang.String, java.lang.Class<? extends org.apache.cassandra.locator.AbstractReplicationStrategy>, org.apache.cassandra.locator.TokenMetadata, org.apache.cassandra.locator.IEndpointSnitch, java.util.Map<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.locator.AbstractReplicationStrategy.hasSameSettings(org.apache.cassandra.locator.AbstractReplicationStrategy)"], ["org.apache.cassandra.locator.CloudstackSnitch", "org.apache.cassandra.locator.CloudstackSnitch()"], ["java.lang.String", "org.apache.cassandra.locator.CloudstackSnitch.getRack(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.CloudstackSnitch.getDatacenter(java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.DynamicEndpointSnitch$1.run()"], ["void", "org.apache.cassandra.locator.DynamicEndpointSnitch$2.run()"], ["int", "org.apache.cassandra.locator.DynamicEndpointSnitch$3.compare(java.net.InetAddress, java.net.InetAddress)"], ["int", "org.apache.cassandra.locator.DynamicEndpointSnitch$3.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.locator.DynamicEndpointSnitch", "org.apache.cassandra.locator.DynamicEndpointSnitch(org.apache.cassandra.locator.IEndpointSnitch)"], ["org.apache.cassandra.locator.DynamicEndpointSnitch", "org.apache.cassandra.locator.DynamicEndpointSnitch(org.apache.cassandra.locator.IEndpointSnitch, java.lang.String)"], ["void", "org.apache.cassandra.locator.DynamicEndpointSnitch.applyConfigChanges()"], ["void", "org.apache.cassandra.locator.DynamicEndpointSnitch.close()"], ["void", "org.apache.cassandra.locator.DynamicEndpointSnitch.gossiperStarting()"], ["java.lang.String", "org.apache.cassandra.locator.DynamicEndpointSnitch.getRack(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.DynamicEndpointSnitch.getDatacenter(java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximity(java.net.InetAddress, java.util.List<java.net.InetAddress>)"], ["int", "org.apache.cassandra.locator.DynamicEndpointSnitch.compareEndpoints(java.net.InetAddress, java.net.InetAddress, java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.DynamicEndpointSnitch.receiveTiming(java.net.InetAddress, long)"], ["java.util.Map<java.net.InetAddress, java.lang.Double>", "org.apache.cassandra.locator.DynamicEndpointSnitch.getScores()"], ["int", "org.apache.cassandra.locator.DynamicEndpointSnitch.getUpdateInterval()"], ["int", "org.apache.cassandra.locator.DynamicEndpointSnitch.getResetInterval()"], ["double", "org.apache.cassandra.locator.DynamicEndpointSnitch.getBadnessThreshold()"], ["java.lang.String", "org.apache.cassandra.locator.DynamicEndpointSnitch.getSubsnitchClassName()"], ["void", "org.apache.cassandra.locator.DynamicEndpointSnitch.setSeverity(double)"], ["double", "org.apache.cassandra.locator.DynamicEndpointSnitch.getSeverity()"], ["boolean", "org.apache.cassandra.locator.DynamicEndpointSnitch.isWorthMergingForRangeQuery(java.util.List<java.net.InetAddress>, java.util.List<java.net.InetAddress>, java.util.List<java.net.InetAddress>)"], ["org.apache.cassandra.locator.Ec2MultiRegionSnitch", "org.apache.cassandra.locator.Ec2MultiRegionSnitch()"], ["void", "org.apache.cassandra.locator.Ec2MultiRegionSnitch.gossiperStarting()"], ["org.apache.cassandra.locator.Ec2Snitch", "org.apache.cassandra.locator.Ec2Snitch()"], ["java.lang.String", "org.apache.cassandra.locator.Ec2Snitch.getRack(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.Ec2Snitch.getDatacenter(java.net.InetAddress)"], ["org.apache.cassandra.locator.EndpointSnitchInfo", "org.apache.cassandra.locator.EndpointSnitchInfo()"], ["void", "org.apache.cassandra.locator.EndpointSnitchInfo.create()"], ["java.lang.String", "org.apache.cassandra.locator.EndpointSnitchInfo.getDatacenter(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.locator.EndpointSnitchInfo.getRack(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.locator.EndpointSnitchInfo.getDatacenter()"], ["java.lang.String", "org.apache.cassandra.locator.EndpointSnitchInfo.getRack()"], ["java.lang.String", "org.apache.cassandra.locator.EndpointSnitchInfo.getSnitchName()"], ["org.apache.cassandra.locator.GoogleCloudSnitch", "org.apache.cassandra.locator.GoogleCloudSnitch()"], ["java.lang.String", "org.apache.cassandra.locator.GoogleCloudSnitch.getRack(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.GoogleCloudSnitch.getDatacenter(java.net.InetAddress)"], ["org.apache.cassandra.locator.GossipingPropertyFileSnitch", "org.apache.cassandra.locator.GossipingPropertyFileSnitch()"], ["java.lang.String", "org.apache.cassandra.locator.GossipingPropertyFileSnitch.getDatacenter(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.GossipingPropertyFileSnitch.getRack(java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.GossipingPropertyFileSnitch.gossiperStarting()"], ["boolean", "org.apache.cassandra.locator.InetAddressAndPort.equals(java.lang.Object)"], ["int", "org.apache.cassandra.locator.InetAddressAndPort.hashCode()"], ["int", "org.apache.cassandra.locator.InetAddressAndPort.compareTo(org.apache.cassandra.locator.InetAddressAndPort)"], ["java.lang.String", "org.apache.cassandra.locator.InetAddressAndPort.getHostAddress(boolean)"], ["java.lang.String", "org.apache.cassandra.locator.InetAddressAndPort.toString()"], ["java.lang.String", "org.apache.cassandra.locator.InetAddressAndPort.toString(boolean)"], ["org.apache.cassandra.locator.InetAddressAndPort", "org.apache.cassandra.locator.InetAddressAndPort.getByName(java.lang.String)"], ["org.apache.cassandra.locator.InetAddressAndPort", "org.apache.cassandra.locator.InetAddressAndPort.getByNameOverrideDefaults(java.lang.String, java.lang.Integer)"], ["org.apache.cassandra.locator.InetAddressAndPort", "org.apache.cassandra.locator.InetAddressAndPort.getByAddress(byte[])"], ["org.apache.cassandra.locator.InetAddressAndPort", "org.apache.cassandra.locator.InetAddressAndPort.getByAddress(java.net.InetAddress)"], ["org.apache.cassandra.locator.InetAddressAndPort", "org.apache.cassandra.locator.InetAddressAndPort.getByAddressOverrideDefaults(java.net.InetAddress, java.lang.Integer)"], ["org.apache.cassandra.locator.InetAddressAndPort", "org.apache.cassandra.locator.InetAddressAndPort.getByAddressOverrideDefaults(java.net.InetAddress, byte[], java.lang.Integer)"], ["void", "org.apache.cassandra.locator.InetAddressAndPort.initializeDefaultPort(int)"], ["int", "org.apache.cassandra.locator.InetAddressAndPort.compareTo(java.lang.Object)"], ["org.apache.cassandra.locator.LocalStrategy", "org.apache.cassandra.locator.LocalStrategy(java.lang.String, org.apache.cassandra.locator.TokenMetadata, org.apache.cassandra.locator.IEndpointSnitch, java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.locator.LocalStrategy.getReplicationFactor()"], ["void", "org.apache.cassandra.locator.LocalStrategy.validateOptions()"], ["org.apache.cassandra.locator.NetworkTopologyStrategy", "org.apache.cassandra.locator.NetworkTopologyStrategy(java.lang.String, org.apache.cassandra.locator.TokenMetadata, org.apache.cassandra.locator.IEndpointSnitch, java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.locator.NetworkTopologyStrategy.getReplicationFactor()"], ["int", "org.apache.cassandra.locator.NetworkTopologyStrategy.getReplicationFactor(java.lang.String)"], ["void", "org.apache.cassandra.locator.NetworkTopologyStrategy.validateOptions()"], ["boolean", "org.apache.cassandra.locator.NetworkTopologyStrategy.hasSameSettings(org.apache.cassandra.locator.AbstractReplicationStrategy)"], ["org.apache.cassandra.locator.OldNetworkTopologyStrategy", "org.apache.cassandra.locator.OldNetworkTopologyStrategy(java.lang.String, org.apache.cassandra.locator.TokenMetadata, org.apache.cassandra.locator.IEndpointSnitch, java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.locator.OldNetworkTopologyStrategy.getReplicationFactor()"], ["void", "org.apache.cassandra.locator.OldNetworkTopologyStrategy.validateOptions()"], ["int", "org.apache.cassandra.locator.PendingRangeMaps$1.compare(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["int", "org.apache.cassandra.locator.PendingRangeMaps$1.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.locator.PendingRangeMaps$2.compare(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["int", "org.apache.cassandra.locator.PendingRangeMaps$2.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.locator.PendingRangeMaps$3.compare(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["int", "org.apache.cassandra.locator.PendingRangeMaps$3.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.locator.PendingRangeMaps$4.compare(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["int", "org.apache.cassandra.locator.PendingRangeMaps$4.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.locator.PendingRangeMaps", "org.apache.cassandra.locator.PendingRangeMaps()"], ["void", "org.apache.cassandra.locator.PendingRangeMaps.addPendingRange(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.PendingRangeMaps.printPendingRanges()"], ["java.util.Iterator<java.util.Map$Entry<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, java.util.List<java.net.InetAddress>>>", "org.apache.cassandra.locator.PendingRangeMaps.iterator()"], ["org.apache.cassandra.locator.PropertyFileSnitch", "org.apache.cassandra.locator.PropertyFileSnitch()"], ["org.apache.cassandra.locator.PropertyFileSnitch", "org.apache.cassandra.locator.PropertyFileSnitch(int)"], ["java.lang.String[]", "org.apache.cassandra.locator.PropertyFileSnitch.getEndpointInfo(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.PropertyFileSnitch.getDatacenter(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.PropertyFileSnitch.getRack(java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.PropertyFileSnitch.reloadConfiguration(boolean)"], ["void", "org.apache.cassandra.locator.PropertyFileSnitch.gossiperStarting()"], ["org.apache.cassandra.locator.RackInferringSnitch", "org.apache.cassandra.locator.RackInferringSnitch()"], ["java.lang.String", "org.apache.cassandra.locator.RackInferringSnitch.getRack(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.RackInferringSnitch.getDatacenter(java.net.InetAddress)"], ["org.apache.cassandra.locator.ReconnectableSnitchHelper", "org.apache.cassandra.locator.ReconnectableSnitchHelper(org.apache.cassandra.locator.IEndpointSnitch, java.lang.String, boolean)"], ["void", "org.apache.cassandra.locator.ReconnectableSnitchHelper.beforeChange(java.net.InetAddress, org.apache.cassandra.gms.EndpointState, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.locator.ReconnectableSnitchHelper.onJoin(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.locator.ReconnectableSnitchHelper.onChange(java.net.InetAddress, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.locator.ReconnectableSnitchHelper.onAlive(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.locator.ReconnectableSnitchHelper.onDead(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.locator.ReconnectableSnitchHelper.onRemove(java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.ReconnectableSnitchHelper.onRestart(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["org.apache.cassandra.locator.SimpleSeedProvider", "org.apache.cassandra.locator.SimpleSeedProvider(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.locator.SimpleSnitch", "org.apache.cassandra.locator.SimpleSnitch()"], ["java.lang.String", "org.apache.cassandra.locator.SimpleSnitch.getRack(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.locator.SimpleSnitch.getDatacenter(java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.SimpleSnitch.sortByProximity(java.net.InetAddress, java.util.List<java.net.InetAddress>)"], ["int", "org.apache.cassandra.locator.SimpleSnitch.compareEndpoints(java.net.InetAddress, java.net.InetAddress, java.net.InetAddress)"], ["org.apache.cassandra.locator.SimpleStrategy", "org.apache.cassandra.locator.SimpleStrategy(java.lang.String, org.apache.cassandra.locator.TokenMetadata, org.apache.cassandra.locator.IEndpointSnitch, java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.locator.SimpleStrategy.getReplicationFactor()"], ["void", "org.apache.cassandra.locator.SimpleStrategy.validateOptions()"], ["org.apache.cassandra.locator.SnitchProperties", "org.apache.cassandra.locator.SnitchProperties()"], ["java.lang.String", "org.apache.cassandra.locator.SnitchProperties.get(java.lang.String, java.lang.String)"], ["boolean", "org.apache.cassandra.locator.SnitchProperties.contains(java.lang.String)"], ["int", "org.apache.cassandra.locator.TokenMetadata$1.compare(java.net.InetAddress, java.net.InetAddress)"], ["int", "org.apache.cassandra.locator.TokenMetadata$1.compare(java.lang.Object, java.lang.Object)"], ["com.google.common.collect.Multimap<java.lang.String, java.net.InetAddress>", "org.apache.cassandra.locator.TokenMetadata$Topology.getDatacenterEndpoints()"], ["com.google.common.collect.ImmutableMap<java.lang.String, com.google.common.collect.ImmutableMultimap<java.lang.String, java.net.InetAddress>>", "org.apache.cassandra.locator.TokenMetadata$Topology.getDatacenterRacks()"], ["org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>", "org.apache.cassandra.locator.TokenMetadata$Topology.getLocation(java.net.InetAddress)"], ["org.apache.cassandra.locator.TokenMetadata", "org.apache.cassandra.locator.TokenMetadata()"], ["org.apache.cassandra.locator.TokenMetadata", "org.apache.cassandra.locator.TokenMetadata.cloneWithNewPartitioner(org.apache.cassandra.dht.IPartitioner)"], ["int", "org.apache.cassandra.locator.TokenMetadata.pendingRangeChanges(java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.TokenMetadata.updateNormalToken(org.apache.cassandra.dht.Token, java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.TokenMetadata.updateNormalTokens(java.util.Collection<org.apache.cassandra.dht.Token>, java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.TokenMetadata.updateNormalTokens(com.google.common.collect.Multimap<java.net.InetAddress, org.apache.cassandra.dht.Token>)"], ["void", "org.apache.cassandra.locator.TokenMetadata.updateHostId(java.util.UUID, java.net.InetAddress)"], ["java.util.UUID", "org.apache.cassandra.locator.TokenMetadata.getHostId(java.net.InetAddress)"], ["java.net.InetAddress", "org.apache.cassandra.locator.TokenMetadata.getEndpointForHostId(java.util.UUID)"], ["java.util.Map<java.net.InetAddress, java.util.UUID>", "org.apache.cassandra.locator.TokenMetadata.getEndpointToHostIdMapForReading()"], ["void", "org.apache.cassandra.locator.TokenMetadata.addBootstrapToken(org.apache.cassandra.dht.Token, java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.TokenMetadata.addBootstrapTokens(java.util.Collection<org.apache.cassandra.dht.Token>, java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.TokenMetadata.addReplaceTokens(java.util.Collection<org.apache.cassandra.dht.Token>, java.net.InetAddress, java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.TokenMetadata.removeBootstrapTokens(java.util.Collection<org.apache.cassandra.dht.Token>)"], ["void", "org.apache.cassandra.locator.TokenMetadata.addLeavingEndpoint(java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.TokenMetadata.addMovingEndpoint(org.apache.cassandra.dht.Token, java.net.InetAddress)"], ["void", "org.apache.cassandra.locator.TokenMetadata.removeEndpoint(java.net.InetAddress)"], ["org.apache.cassandra.locator.TokenMetadata$Topology", "org.apache.cassandra.locator.TokenMetadata.updateTopology(java.net.InetAddress)"], ["org.apache.cassandra.locator.TokenMetadata$Topology", "org.apache.cassandra.locator.TokenMetadata.updateTopology()"], ["void", "org.apache.cassandra.locator.TokenMetadata.removeFromMoving(java.net.InetAddress)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.locator.TokenMetadata.getToken(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.locator.TokenMetadata.isMember(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.locator.TokenMetadata.isLeaving(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.locator.TokenMetadata.isMoving(java.net.InetAddress)"], ["org.apache.cassandra.locator.TokenMetadata", "org.apache.cassandra.locator.TokenMetadata.cloneOnlyTokenMap()"], ["org.apache.cassandra.locator.TokenMetadata", "org.apache.cassandra.locator.TokenMetadata.cachedOnlyTokenMap()"], ["org.apache.cassandra.locator.TokenMetadata", "org.apache.cassandra.locator.TokenMetadata.cloneAfterAllLeft()"], ["org.apache.cassandra.locator.TokenMetadata", "org.apache.cassandra.locator.TokenMetadata.cloneAfterAllSettled()"], ["java.net.InetAddress", "org.apache.cassandra.locator.TokenMetadata.getEndpoint(org.apache.cassandra.dht.Token)"], ["com.google.common.collect.Multimap<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, java.net.InetAddress>", "org.apache.cassandra.locator.TokenMetadata.getPendingRangesMM(java.lang.String)"], ["org.apache.cassandra.locator.PendingRangeMaps", "org.apache.cassandra.locator.TokenMetadata.getPendingRanges(java.lang.String)"], ["void", "org.apache.cassandra.locator.TokenMetadata.calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy, java.lang.String)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.locator.TokenMetadata.getPredecessor(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.locator.TokenMetadata.getSuccessor(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.utils.BiMultiValMap<org.apache.cassandra.dht.Token, java.net.InetAddress>", "org.apache.cassandra.locator.TokenMetadata.getBootstrapTokens()"], ["java.util.Set<org.apache.cassandra.utils.Pair<org.apache.cassandra.dht.Token, java.net.InetAddress>>", "org.apache.cassandra.locator.TokenMetadata.getMovingEndpoints()"], ["int", "org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(java.util.ArrayList<org.apache.cassandra.dht.Token>, org.apache.cassandra.dht.Token, boolean)"], ["org.apache.cassandra.dht.Token", "org.apache.cassandra.locator.TokenMetadata.firstToken(java.util.ArrayList<org.apache.cassandra.dht.Token>, org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.locator.TokenMetadata.clearUnsafe()"], ["java.lang.String", "org.apache.cassandra.locator.TokenMetadata.toString()"], ["com.google.common.collect.Multimap<java.net.InetAddress, org.apache.cassandra.dht.Token>", "org.apache.cassandra.locator.TokenMetadata.getEndpointToTokenMapForReading()"], ["java.util.Map<org.apache.cassandra.dht.Token, java.net.InetAddress>", "org.apache.cassandra.locator.TokenMetadata.getNormalAndBootstrappingTokenToEndpointMap()"], ["org.apache.cassandra.locator.TokenMetadata$Topology", "org.apache.cassandra.locator.TokenMetadata.getTopology()"], ["long", "org.apache.cassandra.locator.TokenMetadata.getRingVersion()"], ["void", "org.apache.cassandra.locator.TokenMetadata.invalidateCachedRings()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.locator.TokenMetadata.decorateKey(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.metrics.AuthMetrics.init()"], ["void", "org.apache.cassandra.metrics.AuthMetrics.markSuccess()"], ["void", "org.apache.cassandra.metrics.AuthMetrics.markFailure()"], ["java.lang.Long", "org.apache.cassandra.metrics.BufferPoolMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.BufferPoolMetrics$1.getValue()"], ["org.apache.cassandra.metrics.BufferPoolMetrics", "org.apache.cassandra.metrics.BufferPoolMetrics()"], ["org.apache.cassandra.metrics.CASClientRequestMetrics", "org.apache.cassandra.metrics.CASClientRequestMetrics(java.lang.String)"], ["void", "org.apache.cassandra.metrics.CASClientRequestMetrics.release()"], ["java.lang.Integer", "org.apache.cassandra.metrics.CQLMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CQLMetrics$1.getValue()"], ["com.codahale.metrics.RatioGauge$Ratio", "org.apache.cassandra.metrics.CQLMetrics$2.getRatio()"], ["double", "org.apache.cassandra.metrics.CQLMetrics$2.getNumerator()"], ["double", "org.apache.cassandra.metrics.CQLMetrics$2.getDenominator()"], ["org.apache.cassandra.metrics.CQLMetrics", "org.apache.cassandra.metrics.CQLMetrics()"], ["java.lang.Long", "org.apache.cassandra.metrics.CacheMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CacheMetrics$1.getValue()"], ["com.codahale.metrics.RatioGauge$Ratio", "org.apache.cassandra.metrics.CacheMetrics$2.getRatio()"], ["java.lang.Long", "org.apache.cassandra.metrics.CacheMetrics$6.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CacheMetrics$6.getValue()"], ["java.lang.Integer", "org.apache.cassandra.metrics.CacheMetrics$7.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CacheMetrics$7.getValue()"], ["org.apache.cassandra.metrics.CacheMetrics", "org.apache.cassandra.metrics.CacheMetrics(java.lang.String, org.apache.cassandra.cache.ICache<?, ?>)"], ["com.codahale.metrics.RatioGauge$Ratio", "org.apache.cassandra.metrics.CacheMissMetrics$1.getRatio()"], ["org.apache.cassandra.metrics.CacheMissMetrics", "org.apache.cassandra.metrics.CacheMissMetrics(java.lang.String, org.apache.cassandra.cache.CacheSize)"], ["void", "org.apache.cassandra.metrics.CacheMissMetrics.reset()"], ["javax.management.ObjectName", "org.apache.cassandra.metrics.CassandraMetricsRegistry$AbstractBean.objectName()"], ["long", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxCounter.getCount()"], ["java.lang.Object", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxGauge.getValue()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.get50thPercentile()"], ["long", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.getCount()"], ["long", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.getMin()"], ["long", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.getMax()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.getMean()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.getStdDev()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.get75thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.get95thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.get98thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.get99thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.get999thPercentile()"], ["long[]", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram.values()"], ["long", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter.getCount()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter.getMeanRate()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter.getOneMinuteRate()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter.getFiveMinuteRate()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter.getFifteenMinuteRate()"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter.getRateUnit()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.get50thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.getMin()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.getMax()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.getMean()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.getStdDev()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.get75thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.get95thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.get98thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.get99thPercentile()"], ["double", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.get999thPercentile()"], ["long[]", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.values()"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer.getDurationUnit()"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName(java.lang.Class<?>, java.lang.String)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.getGroup()"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.getType()"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.getName()"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.getMetricName()"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.getScope()"], ["boolean", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.hasScope()"], ["javax.management.ObjectName", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.getMBeanName()"], ["boolean", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.equals(java.lang.Object)"], ["int", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.hashCode()"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.toString()"], ["int", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.compareTo(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.chooseGroup(java.lang.String, java.lang.Class<?>)"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.chooseType(java.lang.String, java.lang.Class<?>)"], ["java.lang.String", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.chooseName(java.lang.String, java.lang.reflect.Method)"], ["int", "org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName.compareTo(java.lang.Object)"], ["com.codahale.metrics.Counter", "org.apache.cassandra.metrics.CassandraMetricsRegistry.counter(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["com.codahale.metrics.Counter", "org.apache.cassandra.metrics.CassandraMetricsRegistry.counter(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["com.codahale.metrics.Meter", "org.apache.cassandra.metrics.CassandraMetricsRegistry.meter(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["com.codahale.metrics.Meter", "org.apache.cassandra.metrics.CassandraMetricsRegistry.meter(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["com.codahale.metrics.Histogram", "org.apache.cassandra.metrics.CassandraMetricsRegistry.histogram(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, boolean)"], ["com.codahale.metrics.Histogram", "org.apache.cassandra.metrics.CassandraMetricsRegistry.histogram(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, boolean)"], ["com.codahale.metrics.Timer", "org.apache.cassandra.metrics.CassandraMetricsRegistry.timer(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["com.codahale.metrics.Timer", "org.apache.cassandra.metrics.CassandraMetricsRegistry.timer(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["<T extends com.codahale.metrics.Metric> T", "org.apache.cassandra.metrics.CassandraMetricsRegistry.register(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, T)"], ["<T extends com.codahale.metrics.Metric> T", "org.apache.cassandra.metrics.CassandraMetricsRegistry.register(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, T)"], ["boolean", "org.apache.cassandra.metrics.CassandraMetricsRegistry.remove(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["boolean", "org.apache.cassandra.metrics.CassandraMetricsRegistry.remove(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName, org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)"], ["void", "org.apache.cassandra.metrics.CassandraMetricsRegistry.registerMBean(com.codahale.metrics.Metric, javax.management.ObjectName)"], ["org.apache.cassandra.metrics.ClearableHistogram", "org.apache.cassandra.metrics.ClearableHistogram(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir)"], ["void", "org.apache.cassandra.metrics.ClearableHistogram.clear()"], ["void", "org.apache.cassandra.metrics.ClientMetrics.addCounter(java.lang.String, java.util.concurrent.Callable<java.lang.Integer>)"], ["com.codahale.metrics.Meter", "org.apache.cassandra.metrics.ClientMetrics.addMeter(java.lang.String)"], ["org.apache.cassandra.metrics.ClientRequestMetrics", "org.apache.cassandra.metrics.ClientRequestMetrics(java.lang.String)"], ["void", "org.apache.cassandra.metrics.ClientRequestMetrics.release()"], ["java.lang.Long", "org.apache.cassandra.metrics.CommitLogMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CommitLogMetrics$1.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.CommitLogMetrics$2.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CommitLogMetrics$2.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.CommitLogMetrics$3.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CommitLogMetrics$3.getValue()"], ["org.apache.cassandra.metrics.CommitLogMetrics", "org.apache.cassandra.metrics.CommitLogMetrics()"], ["void", "org.apache.cassandra.metrics.CommitLogMetrics.attach(org.apache.cassandra.db.commitlog.AbstractCommitLogService, org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)"], ["java.lang.Integer", "org.apache.cassandra.metrics.CompactionMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CompactionMetrics$1.getValue()"], ["java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Integer>>", "org.apache.cassandra.metrics.CompactionMetrics$2.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CompactionMetrics$2.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.CompactionMetrics$3.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.CompactionMetrics$3.getValue()"], ["org.apache.cassandra.metrics.CompactionMetrics", "org.apache.cassandra.metrics.CompactionMetrics(java.util.concurrent.ThreadPoolExecutor...)"], ["void", "org.apache.cassandra.metrics.CompactionMetrics.beginCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)"], ["void", "org.apache.cassandra.metrics.CompactionMetrics.finishCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)"], ["java.lang.Integer", "org.apache.cassandra.metrics.ConnectionMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$1.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.ConnectionMetrics$2.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$2.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.ConnectionMetrics$3.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$3.getValue()"], ["java.lang.Integer", "org.apache.cassandra.metrics.ConnectionMetrics$4.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$4.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.ConnectionMetrics$5.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$5.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.ConnectionMetrics$6.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$6.getValue()"], ["java.lang.Integer", "org.apache.cassandra.metrics.ConnectionMetrics$7.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$7.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.ConnectionMetrics$8.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$8.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.ConnectionMetrics$9.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ConnectionMetrics$9.getValue()"], ["org.apache.cassandra.metrics.ConnectionMetrics", "org.apache.cassandra.metrics.ConnectionMetrics(java.net.InetAddress, org.apache.cassandra.net.OutboundTcpConnectionPool)"], ["void", "org.apache.cassandra.metrics.ConnectionMetrics.release()"], ["org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir, org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir)"], ["double", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot.getValue(double)"], ["long[]", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot.getValues()"], ["int", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot.size()"], ["long", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot.getMax()"], ["double", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot.getMean()"], ["long", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot.getMin()"], ["double", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot.getStdDev()"], ["void", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot.dump(java.io.OutputStream)"], ["org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir()"], ["org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir(boolean)"], ["org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir(boolean, int)"], ["void", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir.update(long)"], ["int", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir.size()"], ["com.codahale.metrics.Snapshot", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir.getSnapshot()"], ["void", "org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir.clear()"], ["org.apache.cassandra.metrics.DefaultNameFactory", "org.apache.cassandra.metrics.DefaultNameFactory(java.lang.String)"], ["org.apache.cassandra.metrics.DefaultNameFactory", "org.apache.cassandra.metrics.DefaultNameFactory(java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.DefaultNameFactory.createMetricName(java.lang.String)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.DefaultNameFactory.createMetricName(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.DroppedMessageMetrics", "org.apache.cassandra.metrics.DroppedMessageMetrics(org.apache.cassandra.net.MessagingService$Verb)"], ["org.apache.cassandra.metrics.DroppedMessageMetrics", "org.apache.cassandra.metrics.DroppedMessageMetrics(org.apache.cassandra.metrics.MetricNameFactory)"], ["org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter", "org.apache.cassandra.metrics.HintedHandoffMetrics$1.load(java.net.InetAddress)"], ["java.lang.Object", "org.apache.cassandra.metrics.HintedHandoffMetrics$1.load(java.lang.Object)"], ["com.codahale.metrics.Counter", "org.apache.cassandra.metrics.HintedHandoffMetrics$2.load(java.net.InetAddress)"], ["java.lang.Object", "org.apache.cassandra.metrics.HintedHandoffMetrics$2.load(java.lang.Object)"], ["org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter", "org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter(java.net.InetAddress)"], ["long", "org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter.difference()"], ["long", "org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter.count()"], ["void", "org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter.mark()"], ["org.apache.cassandra.metrics.HintedHandoffMetrics", "org.apache.cassandra.metrics.HintedHandoffMetrics()"], ["void", "org.apache.cassandra.metrics.HintedHandoffMetrics.incrCreatedHints(java.net.InetAddress)"], ["void", "org.apache.cassandra.metrics.HintedHandoffMetrics.incrPastWindow(java.net.InetAddress)"], ["void", "org.apache.cassandra.metrics.HintedHandoffMetrics.log()"], ["org.apache.cassandra.metrics.HintsServiceMetrics", "org.apache.cassandra.metrics.HintsServiceMetrics()"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$1.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$10.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$11.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$12.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$13.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$14.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$15.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$16.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$17.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.KeyspaceMetrics$17.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$2.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$3.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$4.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$5.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$6.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$7.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$8.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["java.lang.Long", "org.apache.cassandra.metrics.KeyspaceMetrics$9.getValue(org.apache.cassandra.metrics.TableMetrics)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.KeyspaceMetrics$KeyspaceMetricNameFactory.createMetricName(java.lang.String)"], ["org.apache.cassandra.metrics.KeyspaceMetrics", "org.apache.cassandra.metrics.KeyspaceMetrics(org.apache.cassandra.db.Keyspace)"], ["void", "org.apache.cassandra.metrics.KeyspaceMetrics.release()"], ["org.apache.cassandra.metrics.LatencyMetrics", "org.apache.cassandra.metrics.LatencyMetrics(java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.LatencyMetrics", "org.apache.cassandra.metrics.LatencyMetrics(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.LatencyMetrics", "org.apache.cassandra.metrics.LatencyMetrics(org.apache.cassandra.metrics.MetricNameFactory, java.lang.String)"], ["org.apache.cassandra.metrics.LatencyMetrics", "org.apache.cassandra.metrics.LatencyMetrics(org.apache.cassandra.metrics.MetricNameFactory, org.apache.cassandra.metrics.MetricNameFactory, java.lang.String)"], ["org.apache.cassandra.metrics.LatencyMetrics", "org.apache.cassandra.metrics.LatencyMetrics(org.apache.cassandra.metrics.MetricNameFactory, java.lang.String, org.apache.cassandra.metrics.LatencyMetrics...)"], ["void", "org.apache.cassandra.metrics.LatencyMetrics.addNano(long)"], ["void", "org.apache.cassandra.metrics.LatencyMetrics.release()"], ["org.apache.cassandra.metrics.MessagingMetrics", "org.apache.cassandra.metrics.MessagingMetrics()"], ["void", "org.apache.cassandra.metrics.MessagingMetrics.addTimeTaken(java.net.InetAddress, long)"], ["org.apache.cassandra.metrics.ReadRepairMetrics", "org.apache.cassandra.metrics.ReadRepairMetrics()"], ["org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA", "org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA(long)"], ["org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA", "org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA(double, long)"], ["void", "org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA.update(long)"], ["void", "org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA.tick()"], ["double", "org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA.rate()"], ["org.apache.cassandra.metrics.RestorableMeter", "org.apache.cassandra.metrics.RestorableMeter()"], ["org.apache.cassandra.metrics.RestorableMeter", "org.apache.cassandra.metrics.RestorableMeter(double, double)"], ["void", "org.apache.cassandra.metrics.RestorableMeter.mark()"], ["void", "org.apache.cassandra.metrics.RestorableMeter.mark(long)"], ["double", "org.apache.cassandra.metrics.RestorableMeter.fifteenMinuteRate()"], ["double", "org.apache.cassandra.metrics.RestorableMeter.twoHourRate()"], ["long", "org.apache.cassandra.metrics.RestorableMeter.count()"], ["double", "org.apache.cassandra.metrics.RestorableMeter.meanRate()"], ["java.lang.Integer", "org.apache.cassandra.metrics.SEPMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.SEPMetrics$1.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.SEPMetrics$2.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.SEPMetrics$2.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.SEPMetrics$3.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.SEPMetrics$3.getValue()"], ["java.lang.Integer", "org.apache.cassandra.metrics.SEPMetrics$4.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.SEPMetrics$4.getValue()"], ["org.apache.cassandra.metrics.SEPMetrics", "org.apache.cassandra.metrics.SEPMetrics(org.apache.cassandra.concurrent.SEPExecutor, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.metrics.SEPMetrics.release()"], ["org.apache.cassandra.metrics.StorageMetrics", "org.apache.cassandra.metrics.StorageMetrics()"], ["org.apache.cassandra.metrics.StreamingMetrics", "org.apache.cassandra.metrics.StreamingMetrics.get(java.net.InetAddress)"], ["org.apache.cassandra.metrics.StreamingMetrics", "org.apache.cassandra.metrics.StreamingMetrics(java.net.InetAddress)"], ["java.lang.Double", "org.apache.cassandra.metrics.TableMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$1.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$10.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$10.getValue()"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.metrics.TableMetrics$11$1.getHistogram(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["long[]", "org.apache.cassandra.metrics.TableMetrics$11.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$11.getValue()"], ["java.lang.Double", "org.apache.cassandra.metrics.TableMetrics$12.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$12.getValue()"], ["java.lang.Double", "org.apache.cassandra.metrics.TableMetrics$13.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$13.getValue()"], ["java.lang.Double", "org.apache.cassandra.metrics.TableMetrics$14.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$14.getValue()"], ["java.lang.Integer", "org.apache.cassandra.metrics.TableMetrics$15.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$15.getValue()"], ["java.lang.Integer", "org.apache.cassandra.metrics.TableMetrics$16.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$16.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$17.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$17.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$18.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$18.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$19.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$19.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$2.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$2.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$20.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$20.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$21.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$21.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$22.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$22.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$23.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$23.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$24.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$24.getValue()"], ["java.lang.Double", "org.apache.cassandra.metrics.TableMetrics$25.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$25.getValue()"], ["java.lang.Double", "org.apache.cassandra.metrics.TableMetrics$26.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$26.getValue()"], ["java.lang.Double", "org.apache.cassandra.metrics.TableMetrics$27.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$27.getValue()"], ["java.lang.Double", "org.apache.cassandra.metrics.TableMetrics$28.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$28.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$29.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$29.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$3.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$3.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$30.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$30.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$31.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$31.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$32.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$32.getValue()"], ["com.codahale.metrics.RatioGauge$Ratio", "org.apache.cassandra.metrics.TableMetrics$33.getRatio()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$34.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$34.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$35.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$35.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$36.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$36.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$4.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$4.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$5.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$5.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$6.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$6.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$7.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$7.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.TableMetrics$8.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$8.getValue()"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.metrics.TableMetrics$9$1.getHistogram(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["long[]", "org.apache.cassandra.metrics.TableMetrics$9.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.TableMetrics$9.getValue()"], ["org.apache.cassandra.metrics.TableMetrics$AllTableMetricNameFactory", "org.apache.cassandra.metrics.TableMetrics$AllTableMetricNameFactory(java.lang.String)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.TableMetrics$AllTableMetricNameFactory.createMetricName(java.lang.String)"], ["org.apache.cassandra.metrics.TableMetrics$Sampler[]", "org.apache.cassandra.metrics.TableMetrics$Sampler.values()"], ["org.apache.cassandra.metrics.TableMetrics$Sampler", "org.apache.cassandra.metrics.TableMetrics$Sampler.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.metrics.TableMetrics$TableHistogram.update(long)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.TableMetrics$TableMetricNameFactory.createMetricName(java.lang.String)"], ["void", "org.apache.cassandra.metrics.TableMetrics$TableTimer.update(long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.metrics.TableMetrics", "org.apache.cassandra.metrics.TableMetrics(org.apache.cassandra.db.ColumnFamilyStore)"], ["void", "org.apache.cassandra.metrics.TableMetrics.updateSSTableIterated(int)"], ["void", "org.apache.cassandra.metrics.TableMetrics.release()"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName", "org.apache.cassandra.metrics.ThreadPoolMetricNameFactory.createMetricName(java.lang.String)"], ["java.lang.Integer", "org.apache.cassandra.metrics.ThreadPoolMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ThreadPoolMetrics$1.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.ThreadPoolMetrics$2.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ThreadPoolMetrics$2.getValue()"], ["java.lang.Long", "org.apache.cassandra.metrics.ThreadPoolMetrics$3.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ThreadPoolMetrics$3.getValue()"], ["java.lang.Integer", "org.apache.cassandra.metrics.ThreadPoolMetrics$4.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ThreadPoolMetrics$4.getValue()"], ["org.apache.cassandra.metrics.ThreadPoolMetrics", "org.apache.cassandra.metrics.ThreadPoolMetrics(java.util.concurrent.ThreadPoolExecutor, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.metrics.ThreadPoolMetrics.release()"], ["java.lang.Object", "org.apache.cassandra.metrics.ThreadPoolMetrics.getJmxMetric(javax.management.MBeanServerConnection, java.lang.String, java.lang.String, java.lang.String)"], ["com.google.common.collect.Multimap<java.lang.String, java.lang.String>", "org.apache.cassandra.metrics.ThreadPoolMetrics.getJmxThreadPools(javax.management.MBeanServerConnection)"], ["java.lang.Long", "org.apache.cassandra.metrics.ViewWriteMetrics$1.getValue()"], ["java.lang.Object", "org.apache.cassandra.metrics.ViewWriteMetrics$1.getValue()"], ["org.apache.cassandra.metrics.ViewWriteMetrics", "org.apache.cassandra.metrics.ViewWriteMetrics(java.lang.String)"], ["void", "org.apache.cassandra.metrics.ViewWriteMetrics.release()"], ["org.apache.cassandra.net.AsyncOneResponse", "org.apache.cassandra.net.AsyncOneResponse()"], ["T", "org.apache.cassandra.net.AsyncOneResponse.get(long, java.util.concurrent.TimeUnit)"], ["synchronized", "org.apache.cassandra.net.AsyncOneResponse.void response(org.apache.cassandra.net.MessageIn<T>)"], ["boolean", "org.apache.cassandra.net.AsyncOneResponse.isLatencyForSnitch()"], ["org.apache.cassandra.net.CallbackInfo", "org.apache.cassandra.net.CallbackInfo(java.net.InetAddress, org.apache.cassandra.net.IAsyncCallback, org.apache.cassandra.io.IVersionedSerializer<?>, boolean)"], ["boolean", "org.apache.cassandra.net.CallbackInfo.shouldHint()"], ["boolean", "org.apache.cassandra.net.CallbackInfo.isFailureCallback()"], ["java.lang.String", "org.apache.cassandra.net.CallbackInfo.toString()"], ["org.apache.cassandra.net.CompactEndpointSerializationHelper", "org.apache.cassandra.net.CompactEndpointSerializationHelper()"], ["void", "org.apache.cassandra.net.CompactEndpointSerializationHelper.serialize(java.net.InetAddress, java.io.DataOutput)"], ["java.net.InetAddress", "org.apache.cassandra.net.CompactEndpointSerializationHelper.deserialize(java.io.DataInput)"], ["int", "org.apache.cassandra.net.CompactEndpointSerializationHelper.serializedSize(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.net.IAsyncCallback$1.apply(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.net.IAsyncCallback$1.apply(java.lang.Object)"], ["default", "org.apache.cassandra.net.IAsyncCallback.boolean supportsBackPressure()"], ["org.apache.cassandra.net.IncomingStreamingConnection", "org.apache.cassandra.net.IncomingStreamingConnection(int, java.net.Socket, java.util.Set<java.io.Closeable>)"], ["void", "org.apache.cassandra.net.IncomingStreamingConnection.run()"], ["void", "org.apache.cassandra.net.IncomingStreamingConnection.close()"], ["org.apache.cassandra.net.IncomingTcpConnection", "org.apache.cassandra.net.IncomingTcpConnection(int, boolean, java.net.Socket, java.util.Set<java.io.Closeable>)"], ["void", "org.apache.cassandra.net.IncomingTcpConnection.run()"], ["void", "org.apache.cassandra.net.IncomingTcpConnection.close()"], ["org.apache.cassandra.net.MessageDeliveryTask", "org.apache.cassandra.net.MessageDeliveryTask(org.apache.cassandra.net.MessageIn, int)"], ["void", "org.apache.cassandra.net.MessageDeliveryTask.run()"], ["<T> org.apache.cassandra.net.MessageIn<T>", "org.apache.cassandra.net.MessageIn.create(java.net.InetAddress, T, java.util.Map<java.lang.String, byte[]>, org.apache.cassandra.net.MessagingService$Verb, int, long)"], ["<T> org.apache.cassandra.net.MessageIn<T>", "org.apache.cassandra.net.MessageIn.create(java.net.InetAddress, T, java.util.Map<java.lang.String, byte[]>, org.apache.cassandra.net.MessagingService$Verb, int)"], ["<T2> org.apache.cassandra.net.MessageIn<T2>", "org.apache.cassandra.net.MessageIn.read(org.apache.cassandra.io.util.DataInputPlus, int, int)"], ["<T2> org.apache.cassandra.net.MessageIn<T2>", "org.apache.cassandra.net.MessageIn.read(org.apache.cassandra.io.util.DataInputPlus, int, int, long)"], ["long", "org.apache.cassandra.net.MessageIn.readConstructionTime(java.net.InetAddress, org.apache.cassandra.io.util.DataInputPlus, long)"], ["long", "org.apache.cassandra.net.MessageIn.getLifetimeInMS()"], ["boolean", "org.apache.cassandra.net.MessageIn.isCrossNode()"], ["org.apache.cassandra.concurrent.Stage", "org.apache.cassandra.net.MessageIn.getMessageType()"], ["boolean", "org.apache.cassandra.net.MessageIn.doCallbackOnFailure()"], ["boolean", "org.apache.cassandra.net.MessageIn.isFailureResponse()"], ["boolean", "org.apache.cassandra.net.MessageIn.containsFailureReason()"], ["org.apache.cassandra.exceptions.RequestFailureReason", "org.apache.cassandra.net.MessageIn.getFailureReason()"], ["long", "org.apache.cassandra.net.MessageIn.getTimeout()"], ["long", "org.apache.cassandra.net.MessageIn.getSlowQueryTimeout()"], ["java.lang.String", "org.apache.cassandra.net.MessageIn.toString()"], ["org.apache.cassandra.net.MessageOut", "org.apache.cassandra.net.MessageOut(org.apache.cassandra.net.MessagingService$Verb)"], ["org.apache.cassandra.net.MessageOut", "org.apache.cassandra.net.MessageOut(org.apache.cassandra.net.MessagingService$Verb, T, org.apache.cassandra.io.IVersionedSerializer<T>)"], ["org.apache.cassandra.net.MessageOut", "org.apache.cassandra.net.MessageOut(java.net.InetAddress, org.apache.cassandra.net.MessagingService$Verb, T, org.apache.cassandra.io.IVersionedSerializer<T>, java.util.Map<java.lang.String, byte[]>)"], ["org.apache.cassandra.concurrent.Stage", "org.apache.cassandra.net.MessageOut.getStage()"], ["long", "org.apache.cassandra.net.MessageOut.getTimeout()"], ["java.lang.String", "org.apache.cassandra.net.MessageOut.toString()"], ["void", "org.apache.cassandra.net.MessageOut.serialize(org.apache.cassandra.io.util.DataOutputPlus, int)"], ["int", "org.apache.cassandra.net.MessageOut.serializedSize(int)"], ["long", "org.apache.cassandra.net.MessageOut.payloadSize(int)"], ["void", "org.apache.cassandra.net.MessagingService$4.run()"], ["void", "org.apache.cassandra.net.MessagingService$5$1.run()"], ["java.lang.Object", "org.apache.cassandra.net.MessagingService$5.apply(org.apache.cassandra.utils.Pair<java.lang.Integer, org.apache.cassandra.utils.ExpiringMap$CacheableObject<org.apache.cassandra.net.CallbackInfo>>)"], ["java.lang.Object", "org.apache.cassandra.net.MessagingService$5.apply(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.net.MessagingService$CallbackDeterminedSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.net.MessagingService$CallbackDeterminedSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["long", "org.apache.cassandra.net.MessagingService$CallbackDeterminedSerializer.serializedSize(java.lang.Object, int)"], ["void", "org.apache.cassandra.net.MessagingService$SocketThread.run()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$1.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$10.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$11.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$12.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$13.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$2.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$3.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$4.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$5.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$6.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$7.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$8.getTimeout()"], ["long", "org.apache.cassandra.net.MessagingService$Verb$9.getTimeout()"], ["org.apache.cassandra.net.MessagingService$Verb[]", "org.apache.cassandra.net.MessagingService$Verb.values()"], ["org.apache.cassandra.net.MessagingService$Verb", "org.apache.cassandra.net.MessagingService$Verb.valueOf(java.lang.String)"], ["org.apache.cassandra.net.MessagingService$Verb", "org.apache.cassandra.net.MessagingService$Verb.convertForMessagingServiceVersion(org.apache.cassandra.net.MessagingService$Verb, int)"], ["long", "org.apache.cassandra.net.MessagingService$Verb.getTimeout()"], ["void", "org.apache.cassandra.net.MessagingService.resetDroppedMessagesMap(java.lang.String)"], ["org.apache.cassandra.net.MessagingService", "org.apache.cassandra.net.MessagingService.instance()"], ["void", "org.apache.cassandra.net.MessagingService.addMessageSink(org.apache.cassandra.net.IMessageSink)"], ["void", "org.apache.cassandra.net.MessagingService.removeMessageSink(org.apache.cassandra.net.IMessageSink)"], ["void", "org.apache.cassandra.net.MessagingService.clearMessageSinks()"], ["void", "org.apache.cassandra.net.MessagingService.updateBackPressureOnSend(java.net.InetAddress, org.apache.cassandra.net.IAsyncCallback, org.apache.cassandra.net.MessageOut<?>)"], ["void", "org.apache.cassandra.net.MessagingService.updateBackPressureOnReceive(java.net.InetAddress, org.apache.cassandra.net.IAsyncCallback, boolean)"], ["void", "org.apache.cassandra.net.MessagingService.applyBackPressure(java.lang.Iterable<java.net.InetAddress>, long)"], ["void", "org.apache.cassandra.net.MessagingService.maybeAddLatency(org.apache.cassandra.net.IAsyncCallback, java.net.InetAddress, long)"], ["void", "org.apache.cassandra.net.MessagingService.addLatency(java.net.InetAddress, long)"], ["void", "org.apache.cassandra.net.MessagingService.convict(java.net.InetAddress)"], ["void", "org.apache.cassandra.net.MessagingService.listen()"], ["void", "org.apache.cassandra.net.MessagingService.waitUntilListening()"], ["boolean", "org.apache.cassandra.net.MessagingService.isListening()"], ["void", "org.apache.cassandra.net.MessagingService.destroyConnectionPool(java.net.InetAddress)"], ["org.apache.cassandra.net.OutboundTcpConnectionPool", "org.apache.cassandra.net.MessagingService.getConnectionPool(java.net.InetAddress)"], ["org.apache.cassandra.net.OutboundTcpConnection", "org.apache.cassandra.net.MessagingService.getConnection(java.net.InetAddress, org.apache.cassandra.net.MessageOut)"], ["void", "org.apache.cassandra.net.MessagingService.registerVerbHandlers(org.apache.cassandra.net.MessagingService$Verb, org.apache.cassandra.net.IVerbHandler)"], ["org.apache.cassandra.net.IVerbHandler", "org.apache.cassandra.net.MessagingService.getVerbHandler(org.apache.cassandra.net.MessagingService$Verb)"], ["int", "org.apache.cassandra.net.MessagingService.addCallback(org.apache.cassandra.net.IAsyncCallback, org.apache.cassandra.net.MessageOut, java.net.InetAddress, long, boolean)"], ["int", "org.apache.cassandra.net.MessagingService.addCallback(org.apache.cassandra.net.IAsyncCallback, org.apache.cassandra.net.MessageOut<?>, java.net.InetAddress, long, org.apache.cassandra.db.ConsistencyLevel, boolean)"], ["int", "org.apache.cassandra.net.MessagingService.sendRR(org.apache.cassandra.net.MessageOut, java.net.InetAddress, org.apache.cassandra.net.IAsyncCallback)"], ["int", "org.apache.cassandra.net.MessagingService.sendRRWithFailure(org.apache.cassandra.net.MessageOut, java.net.InetAddress, org.apache.cassandra.net.IAsyncCallbackWithFailure)"], ["int", "org.apache.cassandra.net.MessagingService.sendRR(org.apache.cassandra.net.MessageOut, java.net.InetAddress, org.apache.cassandra.net.IAsyncCallback, long, boolean)"], ["int", "org.apache.cassandra.net.MessagingService.sendRR(org.apache.cassandra.net.MessageOut<?>, java.net.InetAddress, org.apache.cassandra.service.AbstractWriteResponseHandler<?>, boolean)"], ["void", "org.apache.cassandra.net.MessagingService.sendOneWay(org.apache.cassandra.net.MessageOut, java.net.InetAddress)"], ["void", "org.apache.cassandra.net.MessagingService.sendReply(org.apache.cassandra.net.MessageOut, int, java.net.InetAddress)"], ["void", "org.apache.cassandra.net.MessagingService.sendOneWay(org.apache.cassandra.net.MessageOut, int, java.net.InetAddress)"], ["<T> org.apache.cassandra.net.AsyncOneResponse<T>", "org.apache.cassandra.net.MessagingService.sendRR(org.apache.cassandra.net.MessageOut, java.net.InetAddress)"], ["void", "org.apache.cassandra.net.MessagingService.register(org.apache.cassandra.locator.ILatencySubscriber)"], ["void", "org.apache.cassandra.net.MessagingService.clearCallbacksUnsafe()"], ["void", "org.apache.cassandra.net.MessagingService.shutdown()"], ["void", "org.apache.cassandra.net.MessagingService.receive(org.apache.cassandra.net.MessageIn, int)"], ["void", "org.apache.cassandra.net.MessagingService.setCallbackForTests(int, org.apache.cassandra.net.CallbackInfo)"], ["org.apache.cassandra.net.CallbackInfo", "org.apache.cassandra.net.MessagingService.getRegisteredCallback(int)"], ["org.apache.cassandra.net.CallbackInfo", "org.apache.cassandra.net.MessagingService.removeRegisteredCallback(int)"], ["long", "org.apache.cassandra.net.MessagingService.getRegisteredCallbackAge(int)"], ["void", "org.apache.cassandra.net.MessagingService.validateMagic(int)"], ["int", "org.apache.cassandra.net.MessagingService.getBits(int, int, int)"], ["boolean", "org.apache.cassandra.net.MessagingService.areAllNodesAtLeast22()"], ["boolean", "org.apache.cassandra.net.MessagingService.areAllNodesAtLeast30()"], ["int", "org.apache.cassandra.net.MessagingService.setVersion(java.net.InetAddress, int)"], ["void", "org.apache.cassandra.net.MessagingService.resetVersion(java.net.InetAddress)"], ["int", "org.apache.cassandra.net.MessagingService.getVersion(java.net.InetAddress)"], ["int", "org.apache.cassandra.net.MessagingService.getVersion(java.lang.String)"], ["int", "org.apache.cassandra.net.MessagingService.getRawVersion(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.net.MessagingService.knowsVersion(java.net.InetAddress)"], ["void", "org.apache.cassandra.net.MessagingService.incrementDroppedMutations(java.util.Optional<org.apache.cassandra.db.IMutation>, long)"], ["void", "org.apache.cassandra.net.MessagingService.incrementDroppedMessages(org.apache.cassandra.net.MessagingService$Verb)"], ["void", "org.apache.cassandra.net.MessagingService.incrementDroppedMessages(org.apache.cassandra.net.MessagingService$Verb, long)"], ["void", "org.apache.cassandra.net.MessagingService.incrementDroppedMessages(org.apache.cassandra.net.MessageIn, long)"], ["void", "org.apache.cassandra.net.MessagingService.incrementDroppedMessages(org.apache.cassandra.net.MessagingService$Verb, long, boolean)"], ["void", "org.apache.cassandra.net.MessagingService.incrementDroppedMessages(org.apache.cassandra.net.MessagingService$Verb, boolean)"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.apache.cassandra.net.MessagingService.getLargeMessagePendingTasks()"], ["int", "org.apache.cassandra.net.MessagingService.getLargeMessagePendingTasks(java.net.InetAddress)"], ["java.util.Map<java.lang.String, java.lang.Long>", "org.apache.cassandra.net.MessagingService.getLargeMessageCompletedTasks()"], ["java.util.Map<java.lang.String, java.lang.Long>", "org.apache.cassandra.net.MessagingService.getLargeMessageDroppedTasks()"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.apache.cassandra.net.MessagingService.getSmallMessagePendingTasks()"], ["java.util.Map<java.lang.String, java.lang.Long>", "org.apache.cassandra.net.MessagingService.getSmallMessageCompletedTasks()"], ["java.util.Map<java.lang.String, java.lang.Long>", "org.apache.cassandra.net.MessagingService.getSmallMessageDroppedTasks()"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.apache.cassandra.net.MessagingService.getGossipMessagePendingTasks()"], ["java.util.Map<java.lang.String, java.lang.Long>", "org.apache.cassandra.net.MessagingService.getGossipMessageCompletedTasks()"], ["java.util.Map<java.lang.String, java.lang.Long>", "org.apache.cassandra.net.MessagingService.getGossipMessageDroppedTasks()"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.apache.cassandra.net.MessagingService.getDroppedMessages()"], ["long", "org.apache.cassandra.net.MessagingService.getTotalTimeouts()"], ["java.util.Map<java.lang.String, java.lang.Long>", "org.apache.cassandra.net.MessagingService.getTimeoutsPerHost()"], ["java.util.Map<java.lang.String, java.lang.Double>", "org.apache.cassandra.net.MessagingService.getBackPressurePerHost()"], ["void", "org.apache.cassandra.net.MessagingService.setBackPressureEnabled(boolean)"], ["boolean", "org.apache.cassandra.net.MessagingService.isBackPressureEnabled()"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.net.MessagingService.globalPartitioner()"], ["void", "org.apache.cassandra.net.MessagingService.validatePartitioner(java.util.Collection<? extends org.apache.cassandra.dht.AbstractBounds<?>>)"], ["void", "org.apache.cassandra.net.MessagingService.validatePartitioner(org.apache.cassandra.dht.AbstractBounds<?>)"], ["long", "org.apache.cassandra.net.OutboundTcpConnection$QueuedMessage.timestampNanos()"], ["org.apache.cassandra.net.OutboundTcpConnection", "org.apache.cassandra.net.OutboundTcpConnection(org.apache.cassandra.net.OutboundTcpConnectionPool, java.lang.String)"], ["void", "org.apache.cassandra.net.OutboundTcpConnection.enqueue(org.apache.cassandra.net.MessageOut<?>, int)"], ["int", "org.apache.cassandra.net.OutboundTcpConnection.getTargetVersion()"], ["void", "org.apache.cassandra.net.OutboundTcpConnection.run()"], ["int", "org.apache.cassandra.net.OutboundTcpConnection.getPendingMessages()"], ["long", "org.apache.cassandra.net.OutboundTcpConnection.getCompletedMesssages()"], ["long", "org.apache.cassandra.net.OutboundTcpConnection.getDroppedMessages()"], ["org.apache.cassandra.net.BackPressureState", "org.apache.cassandra.net.OutboundTcpConnectionPool.getBackPressureState()"], ["void", "org.apache.cassandra.net.OutboundTcpConnectionPool.resetToNewerVersion(int)"], ["void", "org.apache.cassandra.net.OutboundTcpConnectionPool.reset(java.net.InetAddress)"], ["long", "org.apache.cassandra.net.OutboundTcpConnectionPool.getTimeouts()"], ["void", "org.apache.cassandra.net.OutboundTcpConnectionPool.incrementTimeout()"], ["java.net.Socket", "org.apache.cassandra.net.OutboundTcpConnectionPool.newSocket()"], ["java.net.Socket", "org.apache.cassandra.net.OutboundTcpConnectionPool.newSocket(java.net.InetAddress)"], ["java.net.InetAddress", "org.apache.cassandra.net.OutboundTcpConnectionPool.endPoint()"], ["boolean", "org.apache.cassandra.net.OutboundTcpConnectionPool.isEncryptedChannel(java.net.InetAddress)"], ["void", "org.apache.cassandra.net.OutboundTcpConnectionPool.start()"], ["void", "org.apache.cassandra.net.OutboundTcpConnectionPool.waitForStarted()"], ["void", "org.apache.cassandra.net.OutboundTcpConnectionPool.close()"], ["org.apache.cassandra.net.PingMessage$PingMessageSerializer", "org.apache.cassandra.net.PingMessage$PingMessageSerializer()"], ["void", "org.apache.cassandra.net.PingMessage$PingMessageSerializer.serialize(org.apache.cassandra.net.PingMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.net.PingMessage", "org.apache.cassandra.net.PingMessage$PingMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.net.PingMessage$PingMessageSerializer.serializedSize(org.apache.cassandra.net.PingMessage, int)"], ["long", "org.apache.cassandra.net.PingMessage$PingMessageSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.net.PingMessage$PingMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.net.PingMessage$PingMessageSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.net.PingMessage", "org.apache.cassandra.net.PingMessage()"], ["org.apache.cassandra.net.RateBasedBackPressure$Flow[]", "org.apache.cassandra.net.RateBasedBackPressure$Flow.values()"], ["org.apache.cassandra.net.RateBasedBackPressure$Flow", "org.apache.cassandra.net.RateBasedBackPressure$Flow.valueOf(java.lang.String)"], ["org.apache.cassandra.config.ParameterizedClass", "org.apache.cassandra.net.RateBasedBackPressure.withDefaultParams()"], ["org.apache.cassandra.net.RateBasedBackPressure", "org.apache.cassandra.net.RateBasedBackPressure(java.util.Map<java.lang.String, java.lang.Object>)"], ["org.apache.cassandra.net.RateBasedBackPressure", "org.apache.cassandra.net.RateBasedBackPressure(java.util.Map<java.lang.String, java.lang.Object>, org.apache.cassandra.utils.TimeSource, long)"], ["void", "org.apache.cassandra.net.RateBasedBackPressure.apply(java.util.Set<org.apache.cassandra.net.RateBasedBackPressureState>, long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.net.RateBasedBackPressureState", "org.apache.cassandra.net.RateBasedBackPressure.newState(java.net.InetAddress)"], ["org.apache.cassandra.net.BackPressureState", "org.apache.cassandra.net.RateBasedBackPressure.newState(java.net.InetAddress)"], ["void", "org.apache.cassandra.net.RateBasedBackPressureState.onMessageSent(org.apache.cassandra.net.MessageOut<?>)"], ["void", "org.apache.cassandra.net.RateBasedBackPressureState.onResponseReceived()"], ["void", "org.apache.cassandra.net.RateBasedBackPressureState.onResponseTimeout()"], ["double", "org.apache.cassandra.net.RateBasedBackPressureState.getBackPressureRateLimit()"], ["java.net.InetAddress", "org.apache.cassandra.net.RateBasedBackPressureState.getHost()"], ["boolean", "org.apache.cassandra.net.RateBasedBackPressureState.equals(java.lang.Object)"], ["int", "org.apache.cassandra.net.RateBasedBackPressureState.hashCode()"], ["java.lang.String", "org.apache.cassandra.net.RateBasedBackPressureState.toString()"], ["org.apache.cassandra.net.ResponseVerbHandler", "org.apache.cassandra.net.ResponseVerbHandler()"], ["void", "org.apache.cassandra.net.ResponseVerbHandler.doVerb(org.apache.cassandra.net.MessageIn, int)"], ["org.apache.cassandra.net.WriteCallbackInfo", "org.apache.cassandra.net.WriteCallbackInfo(java.net.InetAddress, org.apache.cassandra.net.IAsyncCallback, org.apache.cassandra.net.MessageOut, org.apache.cassandra.io.IVersionedSerializer<?>, org.apache.cassandra.db.ConsistencyLevel, boolean)"], ["boolean", "org.apache.cassandra.net.WriteCallbackInfo.shouldHint()"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.net.WriteCallbackInfo.mutation()"], ["org.apache.cassandra.notifications.MemtableDiscardedNotification", "org.apache.cassandra.notifications.MemtableDiscardedNotification(org.apache.cassandra.db.Memtable)"], ["org.apache.cassandra.notifications.MemtableRenewedNotification", "org.apache.cassandra.notifications.MemtableRenewedNotification(org.apache.cassandra.db.Memtable)"], ["org.apache.cassandra.notifications.MemtableSwitchedNotification", "org.apache.cassandra.notifications.MemtableSwitchedNotification(org.apache.cassandra.db.Memtable)"], ["org.apache.cassandra.notifications.SSTableAddedNotification", "org.apache.cassandra.notifications.SSTableAddedNotification(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.notifications.SSTableDeletingNotification", "org.apache.cassandra.notifications.SSTableDeletingNotification(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["org.apache.cassandra.notifications.SSTableListChangedNotification", "org.apache.cassandra.notifications.SSTableListChangedNotification(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>, org.apache.cassandra.db.compaction.OperationType)"], ["org.apache.cassandra.notifications.SSTableRepairStatusChanged", "org.apache.cassandra.notifications.SSTableRepairStatusChanged(java.util.Collection<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["org.apache.cassandra.notifications.TruncationNotification", "org.apache.cassandra.notifications.TruncationNotification(long)"], ["org.apache.cassandra.repair.AnticompactionTask$AnticompactionCallback", "org.apache.cassandra.repair.AnticompactionTask$AnticompactionCallback(org.apache.cassandra.repair.AnticompactionTask, org.apache.cassandra.repair.AnticompactionTask)"], ["void", "org.apache.cassandra.repair.AnticompactionTask$AnticompactionCallback.response(org.apache.cassandra.net.MessageIn)"], ["boolean", "org.apache.cassandra.repair.AnticompactionTask$AnticompactionCallback.isLatencyForSnitch()"], ["void", "org.apache.cassandra.repair.AnticompactionTask$AnticompactionCallback.onFailure(java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason)"], ["org.apache.cassandra.repair.AnticompactionTask", "org.apache.cassandra.repair.AnticompactionTask(java.util.UUID, java.net.InetAddress, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["void", "org.apache.cassandra.repair.AnticompactionTask.run()"], ["void", "org.apache.cassandra.repair.AnticompactionTask.onJoin(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.repair.AnticompactionTask.beforeChange(java.net.InetAddress, org.apache.cassandra.gms.EndpointState, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.repair.AnticompactionTask.onChange(java.net.InetAddress, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.repair.AnticompactionTask.onAlive(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.repair.AnticompactionTask.onDead(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.repair.AnticompactionTask.onRemove(java.net.InetAddress)"], ["void", "org.apache.cassandra.repair.AnticompactionTask.onRestart(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.repair.AnticompactionTask.convict(java.net.InetAddress, double)"], ["org.apache.cassandra.repair.LocalSyncTask", "org.apache.cassandra.repair.LocalSyncTask(org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.repair.TreeResponse, org.apache.cassandra.repair.TreeResponse, long, boolean)"], ["void", "org.apache.cassandra.repair.LocalSyncTask.handleStreamEvent(org.apache.cassandra.streaming.StreamEvent)"], ["void", "org.apache.cassandra.repair.LocalSyncTask.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.repair.LocalSyncTask.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.LocalSyncTask.onSuccess(java.lang.Object)"], ["org.apache.cassandra.repair.NodePair$NodePairSerializer", "org.apache.cassandra.repair.NodePair$NodePairSerializer()"], ["void", "org.apache.cassandra.repair.NodePair$NodePairSerializer.serialize(org.apache.cassandra.repair.NodePair, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.NodePair", "org.apache.cassandra.repair.NodePair$NodePairSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.NodePair$NodePairSerializer.serializedSize(org.apache.cassandra.repair.NodePair, int)"], ["long", "org.apache.cassandra.repair.NodePair$NodePairSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.NodePair$NodePairSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.NodePair$NodePairSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.NodePair", "org.apache.cassandra.repair.NodePair(java.net.InetAddress, java.net.InetAddress)"], ["boolean", "org.apache.cassandra.repair.NodePair.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.NodePair.hashCode()"], ["org.apache.cassandra.repair.RemoteSyncTask", "org.apache.cassandra.repair.RemoteSyncTask(org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.repair.TreeResponse, org.apache.cassandra.repair.TreeResponse)"], ["void", "org.apache.cassandra.repair.RemoteSyncTask.syncComplete(boolean)"], ["com.google.common.util.concurrent.ListenableFuture", "org.apache.cassandra.repair.RepairJob$1.apply(java.lang.Object)"], ["com.google.common.util.concurrent.ListenableFuture", "org.apache.cassandra.repair.RepairJob$2.apply(java.lang.Object)"], ["void", "org.apache.cassandra.repair.RepairJob$3.onSuccess(java.util.List<org.apache.cassandra.repair.SyncStat>)"], ["void", "org.apache.cassandra.repair.RepairJob$3.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.RepairJob$3.onSuccess(java.lang.Object)"], ["void", "org.apache.cassandra.repair.RepairJob$4.onSuccess(org.apache.cassandra.repair.TreeResponse)"], ["void", "org.apache.cassandra.repair.RepairJob$4.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.RepairJob$4.onSuccess(java.lang.Object)"], ["void", "org.apache.cassandra.repair.RepairJob$5.onSuccess(org.apache.cassandra.repair.TreeResponse)"], ["void", "org.apache.cassandra.repair.RepairJob$5.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.RepairJob$5.onSuccess(java.lang.Object)"], ["org.apache.cassandra.repair.RepairJob", "org.apache.cassandra.repair.RepairJob(org.apache.cassandra.repair.RepairSession, java.lang.String)"], ["void", "org.apache.cassandra.repair.RepairJob.run()"], ["void", "org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer.serialize(org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.RepairJobDesc", "org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer.serializedSize(org.apache.cassandra.repair.RepairJobDesc, int)"], ["long", "org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.RepairJobDesc", "org.apache.cassandra.repair.RepairJobDesc(java.util.UUID, java.util.UUID, java.lang.String, java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["java.lang.String", "org.apache.cassandra.repair.RepairJobDesc.toString()"], ["boolean", "org.apache.cassandra.repair.RepairJobDesc.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.RepairJobDesc.hashCode()"], ["boolean", "org.apache.cassandra.repair.RepairMessageVerbHandler$1.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.repair.RepairMessageVerbHandler$1.apply(java.lang.Object)"], ["void", "org.apache.cassandra.repair.RepairMessageVerbHandler$2.run()"], ["org.apache.cassandra.repair.RepairMessageVerbHandler", "org.apache.cassandra.repair.RepairMessageVerbHandler()"], ["void", "org.apache.cassandra.repair.RepairMessageVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.repair.messages.RepairMessage>, int)"], ["org.apache.cassandra.repair.RepairParallelism[]", "org.apache.cassandra.repair.RepairParallelism.values()"], ["org.apache.cassandra.repair.RepairParallelism", "org.apache.cassandra.repair.RepairParallelism.valueOf(java.lang.String)"], ["org.apache.cassandra.repair.RepairParallelism", "org.apache.cassandra.repair.RepairParallelism.fromName(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.repair.RepairParallelism.getName()"], ["java.lang.String", "org.apache.cassandra.repair.RepairParallelism.toString()"], ["org.apache.cassandra.repair.RepairResult", "org.apache.cassandra.repair.RepairResult(org.apache.cassandra.repair.RepairJobDesc, java.util.List<org.apache.cassandra.repair.SyncStat>)"], ["void", "org.apache.cassandra.repair.RepairRunnable$1.onSuccess(org.apache.cassandra.repair.RepairSessionResult)"], ["void", "org.apache.cassandra.repair.RepairRunnable$1.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.RepairRunnable$1.onSuccess(java.lang.Object)"], ["com.google.common.util.concurrent.ListenableFuture", "org.apache.cassandra.repair.RepairRunnable$2.apply(java.util.List<org.apache.cassandra.repair.RepairSessionResult>)"], ["com.google.common.util.concurrent.ListenableFuture", "org.apache.cassandra.repair.RepairRunnable$2.apply(java.lang.Object)"], ["void", "org.apache.cassandra.repair.RepairRunnable$3.onSuccess(java.lang.Object)"], ["void", "org.apache.cassandra.repair.RepairRunnable$3.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.RepairRunnable$4.runMayThrow()"], ["org.apache.cassandra.repair.RepairRunnable", "org.apache.cassandra.repair.RepairRunnable(org.apache.cassandra.service.StorageService, int, org.apache.cassandra.repair.messages.RepairOption, java.lang.String)"], ["void", "org.apache.cassandra.repair.RepairRunnable.addProgressListener(org.apache.cassandra.utils.progress.ProgressListener)"], ["void", "org.apache.cassandra.repair.RepairRunnable.removeProgressListener(org.apache.cassandra.utils.progress.ProgressListener)"], ["void", "org.apache.cassandra.repair.RepairSession$1.onSuccess(java.util.List<org.apache.cassandra.repair.RepairResult>)"], ["void", "org.apache.cassandra.repair.RepairSession$1.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.RepairSession$1.onSuccess(java.lang.Object)"], ["org.apache.cassandra.repair.RepairSession", "org.apache.cassandra.repair.RepairSession(java.util.UUID, java.util.UUID, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.lang.String, org.apache.cassandra.repair.RepairParallelism, java.util.Set<java.net.InetAddress>, long, boolean, java.lang.String...)"], ["java.util.UUID", "org.apache.cassandra.repair.RepairSession.getId()"], ["void", "org.apache.cassandra.repair.RepairSession.waitForValidation(org.apache.cassandra.utils.Pair<org.apache.cassandra.repair.RepairJobDesc, java.net.InetAddress>, org.apache.cassandra.repair.ValidationTask)"], ["void", "org.apache.cassandra.repair.RepairSession.waitForSync(org.apache.cassandra.utils.Pair<org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.repair.NodePair>, org.apache.cassandra.repair.RemoteSyncTask)"], ["void", "org.apache.cassandra.repair.RepairSession.validationComplete(org.apache.cassandra.repair.RepairJobDesc, java.net.InetAddress, org.apache.cassandra.utils.MerkleTrees)"], ["void", "org.apache.cassandra.repair.RepairSession.syncComplete(org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.repair.NodePair, boolean)"], ["void", "org.apache.cassandra.repair.RepairSession.start(com.google.common.util.concurrent.ListeningExecutorService)"], ["void", "org.apache.cassandra.repair.RepairSession.terminate()"], ["void", "org.apache.cassandra.repair.RepairSession.forceShutdown(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.RepairSession.onJoin(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.repair.RepairSession.beforeChange(java.net.InetAddress, org.apache.cassandra.gms.EndpointState, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.repair.RepairSession.onChange(java.net.InetAddress, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.repair.RepairSession.onAlive(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.repair.RepairSession.onDead(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.repair.RepairSession.onRemove(java.net.InetAddress)"], ["void", "org.apache.cassandra.repair.RepairSession.onRestart(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.repair.RepairSession.convict(java.net.InetAddress, double)"], ["org.apache.cassandra.repair.RepairSessionResult", "org.apache.cassandra.repair.RepairSessionResult(java.util.UUID, java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.util.Collection<org.apache.cassandra.repair.RepairResult>)"], ["void", "org.apache.cassandra.repair.SnapshotTask$SnapshotCallback.response(org.apache.cassandra.net.MessageIn)"], ["boolean", "org.apache.cassandra.repair.SnapshotTask$SnapshotCallback.isLatencyForSnitch()"], ["void", "org.apache.cassandra.repair.SnapshotTask$SnapshotCallback.onFailure(java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason)"], ["org.apache.cassandra.repair.SnapshotTask", "org.apache.cassandra.repair.SnapshotTask(org.apache.cassandra.repair.RepairJobDesc, java.net.InetAddress)"], ["void", "org.apache.cassandra.repair.SnapshotTask.run()"], ["org.apache.cassandra.repair.StreamingRepairTask", "org.apache.cassandra.repair.StreamingRepairTask(org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.repair.messages.SyncRequest, long)"], ["void", "org.apache.cassandra.repair.StreamingRepairTask.run()"], ["void", "org.apache.cassandra.repair.StreamingRepairTask.handleStreamEvent(org.apache.cassandra.streaming.StreamEvent)"], ["void", "org.apache.cassandra.repair.StreamingRepairTask.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.repair.StreamingRepairTask.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.StreamingRepairTask.onSuccess(java.lang.Object)"], ["org.apache.cassandra.repair.SyncStat", "org.apache.cassandra.repair.SyncStat(org.apache.cassandra.repair.NodePair, long)"], ["org.apache.cassandra.repair.SyncTask", "org.apache.cassandra.repair.SyncTask(org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.repair.TreeResponse, org.apache.cassandra.repair.TreeResponse)"], ["void", "org.apache.cassandra.repair.SyncTask.run()"], ["org.apache.cassandra.repair.SyncStat", "org.apache.cassandra.repair.SyncTask.getCurrentStat()"], ["org.apache.cassandra.repair.SystemDistributedKeyspace$BuildStatus[]", "org.apache.cassandra.repair.SystemDistributedKeyspace$BuildStatus.values()"], ["org.apache.cassandra.repair.SystemDistributedKeyspace$BuildStatus", "org.apache.cassandra.repair.SystemDistributedKeyspace$BuildStatus.valueOf(java.lang.String)"], ["org.apache.cassandra.repair.SystemDistributedKeyspace$RepairState[]", "org.apache.cassandra.repair.SystemDistributedKeyspace$RepairState.values()"], ["org.apache.cassandra.repair.SystemDistributedKeyspace$RepairState", "org.apache.cassandra.repair.SystemDistributedKeyspace$RepairState.valueOf(java.lang.String)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.repair.SystemDistributedKeyspace.metadata()"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.startParentRepair(java.util.UUID, java.lang.String, java.lang.String[], org.apache.cassandra.repair.messages.RepairOption)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.failParentRepair(java.util.UUID, java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.successfulParentRepair(java.util.UUID, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.startRepairs(java.util.UUID, java.util.UUID, java.lang.String, java.lang.String[], java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.lang.Iterable<java.net.InetAddress>)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.failRepairs(java.util.UUID, java.lang.String, java.lang.String[], java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.successfulRepairJob(java.util.UUID, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.failedRepairJob(java.util.UUID, java.lang.String, java.lang.String, java.lang.Throwable)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.startViewBuild(java.lang.String, java.lang.String, java.util.UUID)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.successfulViewBuild(java.lang.String, java.lang.String, java.util.UUID)"], ["java.util.Map<java.util.UUID, java.lang.String>", "org.apache.cassandra.repair.SystemDistributedKeyspace.viewStatus(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.setViewRemoved(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.repair.SystemDistributedKeyspace.forceBlockingFlush(java.lang.String)"], ["org.apache.cassandra.repair.TreeResponse", "org.apache.cassandra.repair.TreeResponse(java.net.InetAddress, org.apache.cassandra.utils.MerkleTrees)"], ["org.apache.cassandra.repair.ValidationTask", "org.apache.cassandra.repair.ValidationTask(org.apache.cassandra.repair.RepairJobDesc, java.net.InetAddress, int)"], ["void", "org.apache.cassandra.repair.ValidationTask.run()"], ["void", "org.apache.cassandra.repair.ValidationTask.treesReceived(org.apache.cassandra.utils.MerkleTrees)"], ["org.apache.cassandra.repair.Validator$CountingDigest", "org.apache.cassandra.repair.Validator$CountingDigest(java.security.MessageDigest)"], ["org.apache.cassandra.repair.Validator", "org.apache.cassandra.repair.Validator(org.apache.cassandra.repair.RepairJobDesc, java.net.InetAddress, int)"], ["org.apache.cassandra.repair.Validator", "org.apache.cassandra.repair.Validator(org.apache.cassandra.repair.RepairJobDesc, java.net.InetAddress, int, boolean)"], ["void", "org.apache.cassandra.repair.Validator.prepare(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.utils.MerkleTrees)"], ["void", "org.apache.cassandra.repair.Validator.add(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["boolean", "org.apache.cassandra.repair.Validator.findCorrectRange(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.repair.Validator.complete()"], ["void", "org.apache.cassandra.repair.Validator.completeTree()"], ["void", "org.apache.cassandra.repair.Validator.fail()"], ["void", "org.apache.cassandra.repair.Validator.run()"], ["org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer", "org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer()"], ["void", "org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer.serialize(org.apache.cassandra.repair.messages.AnticompactionRequest, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.AnticompactionRequest", "org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer.serializedSize(org.apache.cassandra.repair.messages.AnticompactionRequest, int)"], ["long", "org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.AnticompactionRequest", "org.apache.cassandra.repair.messages.AnticompactionRequest(java.util.UUID, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["boolean", "org.apache.cassandra.repair.messages.AnticompactionRequest.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.messages.AnticompactionRequest.hashCode()"], ["java.lang.String", "org.apache.cassandra.repair.messages.AnticompactionRequest.toString()"], ["org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer", "org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer()"], ["void", "org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer.serialize(org.apache.cassandra.repair.messages.CleanupMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.CleanupMessage", "org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer.serializedSize(org.apache.cassandra.repair.messages.CleanupMessage, int)"], ["long", "org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.CleanupMessage", "org.apache.cassandra.repair.messages.CleanupMessage(java.util.UUID)"], ["boolean", "org.apache.cassandra.repair.messages.CleanupMessage.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.messages.CleanupMessage.hashCode()"], ["org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer", "org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer()"], ["void", "org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer.serialize(org.apache.cassandra.repair.messages.PrepareMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.PrepareMessage", "org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer.serializedSize(org.apache.cassandra.repair.messages.PrepareMessage, int)"], ["long", "org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.PrepareMessage", "org.apache.cassandra.repair.messages.PrepareMessage(java.util.UUID, java.util.List<java.util.UUID>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, boolean, long, boolean)"], ["boolean", "org.apache.cassandra.repair.messages.PrepareMessage.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.messages.PrepareMessage.hashCode()"], ["java.lang.String", "org.apache.cassandra.repair.messages.PrepareMessage.toString()"], ["org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer", "org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer()"], ["void", "org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer.serialize(org.apache.cassandra.repair.messages.RepairMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.RepairMessage", "org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer.serializedSize(org.apache.cassandra.repair.messages.RepairMessage, int)"], ["long", "org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.RepairMessage$Type[]", "org.apache.cassandra.repair.messages.RepairMessage$Type.values()"], ["org.apache.cassandra.repair.messages.RepairMessage$Type", "org.apache.cassandra.repair.messages.RepairMessage$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.repair.messages.RepairMessage$Type", "org.apache.cassandra.repair.messages.RepairMessage$Type.fromByte(byte)"], ["org.apache.cassandra.repair.messages.RepairOption", "org.apache.cassandra.repair.messages.RepairOption.parse(java.util.Map<java.lang.String, java.lang.String>, org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.repair.messages.RepairOption", "org.apache.cassandra.repair.messages.RepairOption(org.apache.cassandra.repair.RepairParallelism, boolean, boolean, boolean, int, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, boolean, boolean)"], ["org.apache.cassandra.repair.RepairParallelism", "org.apache.cassandra.repair.messages.RepairOption.getParallelism()"], ["boolean", "org.apache.cassandra.repair.messages.RepairOption.isPrimaryRange()"], ["boolean", "org.apache.cassandra.repair.messages.RepairOption.isIncremental()"], ["boolean", "org.apache.cassandra.repair.messages.RepairOption.isTraced()"], ["boolean", "org.apache.cassandra.repair.messages.RepairOption.isPullRepair()"], ["int", "org.apache.cassandra.repair.messages.RepairOption.getJobThreads()"], ["boolean", "org.apache.cassandra.repair.messages.RepairOption.isGlobal()"], ["boolean", "org.apache.cassandra.repair.messages.RepairOption.isSubrangeRepair()"], ["boolean", "org.apache.cassandra.repair.messages.RepairOption.isInLocalDCOnly()"], ["java.lang.String", "org.apache.cassandra.repair.messages.RepairOption.toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.repair.messages.RepairOption.asMap()"], ["org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer", "org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer()"], ["void", "org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer.serialize(org.apache.cassandra.repair.messages.SnapshotMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.SnapshotMessage", "org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer.serializedSize(org.apache.cassandra.repair.messages.SnapshotMessage, int)"], ["long", "org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.SnapshotMessage", "org.apache.cassandra.repair.messages.SnapshotMessage(org.apache.cassandra.repair.RepairJobDesc)"], ["boolean", "org.apache.cassandra.repair.messages.SnapshotMessage.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.messages.SnapshotMessage.hashCode()"], ["void", "org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer.serialize(org.apache.cassandra.repair.messages.SyncComplete, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.SyncComplete", "org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer.serializedSize(org.apache.cassandra.repair.messages.SyncComplete, int)"], ["long", "org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.SyncComplete", "org.apache.cassandra.repair.messages.SyncComplete(org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.repair.NodePair, boolean)"], ["org.apache.cassandra.repair.messages.SyncComplete", "org.apache.cassandra.repair.messages.SyncComplete(org.apache.cassandra.repair.RepairJobDesc, java.net.InetAddress, java.net.InetAddress, boolean)"], ["boolean", "org.apache.cassandra.repair.messages.SyncComplete.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.messages.SyncComplete.hashCode()"], ["org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer", "org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer()"], ["void", "org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer.serialize(org.apache.cassandra.repair.messages.SyncRequest, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.SyncRequest", "org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer.serializedSize(org.apache.cassandra.repair.messages.SyncRequest, int)"], ["long", "org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.SyncRequest", "org.apache.cassandra.repair.messages.SyncRequest(org.apache.cassandra.repair.RepairJobDesc, java.net.InetAddress, java.net.InetAddress, java.net.InetAddress, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["boolean", "org.apache.cassandra.repair.messages.SyncRequest.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.messages.SyncRequest.hashCode()"], ["java.lang.String", "org.apache.cassandra.repair.messages.SyncRequest.toString()"], ["void", "org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer.serialize(org.apache.cassandra.repair.messages.ValidationComplete, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.ValidationComplete", "org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer.serializedSize(org.apache.cassandra.repair.messages.ValidationComplete, int)"], ["long", "org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.ValidationComplete", "org.apache.cassandra.repair.messages.ValidationComplete(org.apache.cassandra.repair.RepairJobDesc)"], ["org.apache.cassandra.repair.messages.ValidationComplete", "org.apache.cassandra.repair.messages.ValidationComplete(org.apache.cassandra.repair.RepairJobDesc, org.apache.cassandra.utils.MerkleTrees)"], ["boolean", "org.apache.cassandra.repair.messages.ValidationComplete.success()"], ["boolean", "org.apache.cassandra.repair.messages.ValidationComplete.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.messages.ValidationComplete.hashCode()"], ["org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer", "org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer()"], ["void", "org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer.serialize(org.apache.cassandra.repair.messages.ValidationRequest, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.ValidationRequest", "org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer.serializedSize(org.apache.cassandra.repair.messages.ValidationRequest, int)"], ["long", "org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.repair.messages.ValidationRequest", "org.apache.cassandra.repair.messages.ValidationRequest(org.apache.cassandra.repair.RepairJobDesc, int)"], ["java.lang.String", "org.apache.cassandra.repair.messages.ValidationRequest.toString()"], ["boolean", "org.apache.cassandra.repair.messages.ValidationRequest.equals(java.lang.Object)"], ["int", "org.apache.cassandra.repair.messages.ValidationRequest.hashCode()"], ["org.apache.cassandra.scheduler.NoScheduler", "org.apache.cassandra.scheduler.NoScheduler(org.apache.cassandra.config.RequestSchedulerOptions)"], ["org.apache.cassandra.scheduler.NoScheduler", "org.apache.cassandra.scheduler.NoScheduler()"], ["void", "org.apache.cassandra.scheduler.NoScheduler.queue(java.lang.Thread, java.lang.String, long)"], ["void", "org.apache.cassandra.scheduler.NoScheduler.release()"], ["org.apache.cassandra.scheduler.RoundRobinScheduler", "org.apache.cassandra.scheduler.RoundRobinScheduler(org.apache.cassandra.config.RequestSchedulerOptions)"], ["void", "org.apache.cassandra.scheduler.RoundRobinScheduler.queue(java.lang.Thread, java.lang.String, long)"], ["void", "org.apache.cassandra.scheduler.RoundRobinScheduler.release()"], ["org.apache.cassandra.scheduler.WeightedQueue$Entry", "org.apache.cassandra.scheduler.WeightedQueue$Entry(java.lang.Thread)"], ["org.apache.cassandra.scheduler.WeightedQueue", "org.apache.cassandra.scheduler.WeightedQueue(java.lang.String, int)"], ["void", "org.apache.cassandra.scheduler.WeightedQueue.put(java.lang.Thread, long)"], ["java.lang.Thread", "org.apache.cassandra.scheduler.WeightedQueue.poll()"], ["java.lang.String", "org.apache.cassandra.scheduler.WeightedQueue.toString()"], ["org.apache.cassandra.schema.CQLTypeParser", "org.apache.cassandra.schema.CQLTypeParser()"], ["org.apache.cassandra.schema.CachingParams$Option[]", "org.apache.cassandra.schema.CachingParams$Option.values()"], ["org.apache.cassandra.schema.CachingParams$Option", "org.apache.cassandra.schema.CachingParams$Option.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.schema.CachingParams$Option.toString()"], ["org.apache.cassandra.schema.CachingParams", "org.apache.cassandra.schema.CachingParams(boolean, int)"], ["boolean", "org.apache.cassandra.schema.CachingParams.cacheKeys()"], ["boolean", "org.apache.cassandra.schema.CachingParams.cacheRows()"], ["boolean", "org.apache.cassandra.schema.CachingParams.cacheAllRows()"], ["int", "org.apache.cassandra.schema.CachingParams.rowsPerPartitionToCache()"], ["org.apache.cassandra.schema.CachingParams", "org.apache.cassandra.schema.CachingParams.fromMap(java.util.Map<java.lang.String, java.lang.String>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.schema.CachingParams.asMap()"], ["java.lang.String", "org.apache.cassandra.schema.CachingParams.toString()"], ["boolean", "org.apache.cassandra.schema.CachingParams.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.CachingParams.hashCode()"], ["org.apache.cassandra.schema.CompactionParams$Option[]", "org.apache.cassandra.schema.CompactionParams$Option.values()"], ["org.apache.cassandra.schema.CompactionParams$Option", "org.apache.cassandra.schema.CompactionParams$Option.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.schema.CompactionParams$Option.toString()"], ["org.apache.cassandra.schema.CompactionParams$TombstoneOption[]", "org.apache.cassandra.schema.CompactionParams$TombstoneOption.values()"], ["org.apache.cassandra.schema.CompactionParams$TombstoneOption", "org.apache.cassandra.schema.CompactionParams$TombstoneOption.valueOf(java.lang.String)"], ["org.apache.cassandra.schema.CompactionParams", "org.apache.cassandra.schema.CompactionParams.create(java.lang.Class<? extends org.apache.cassandra.db.compaction.AbstractCompactionStrategy>, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.schema.CompactionParams", "org.apache.cassandra.schema.CompactionParams.scts(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.schema.CompactionParams", "org.apache.cassandra.schema.CompactionParams.lcs(java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.schema.CompactionParams.minCompactionThreshold()"], ["int", "org.apache.cassandra.schema.CompactionParams.maxCompactionThreshold()"], ["org.apache.cassandra.schema.CompactionParams$TombstoneOption", "org.apache.cassandra.schema.CompactionParams.tombstoneOption()"], ["void", "org.apache.cassandra.schema.CompactionParams.validate()"], ["java.lang.Class<? extends org.apache.cassandra.db.compaction.AbstractCompactionStrategy>", "org.apache.cassandra.schema.CompactionParams.klass()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.schema.CompactionParams.options()"], ["boolean", "org.apache.cassandra.schema.CompactionParams.isEnabled()"], ["org.apache.cassandra.schema.CompactionParams", "org.apache.cassandra.schema.CompactionParams.fromMap(java.util.Map<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.schema.CompactionParams.supportsThresholdParams(java.lang.Class<? extends org.apache.cassandra.db.compaction.AbstractCompactionStrategy>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.schema.CompactionParams.asMap()"], ["java.lang.String", "org.apache.cassandra.schema.CompactionParams.toString()"], ["boolean", "org.apache.cassandra.schema.CompactionParams.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.CompactionParams.hashCode()"], ["void", "org.apache.cassandra.schema.CompressionParams$Serializer.serialize(org.apache.cassandra.schema.CompressionParams, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.schema.CompressionParams$Serializer.serializedSize(org.apache.cassandra.schema.CompressionParams, int)"], ["long", "org.apache.cassandra.schema.CompressionParams$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.schema.CompressionParams$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.schema.CompressionParams$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.fromMap(java.util.Map<java.lang.String, java.lang.String>)"], ["java.lang.Class<? extends org.apache.cassandra.io.compress.ICompressor>", "org.apache.cassandra.schema.CompressionParams.klass()"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.noCompression()"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.snappy()"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.snappy(java.lang.Integer)"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.deflate()"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.deflate(java.lang.Integer)"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.lz4()"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.lz4(java.lang.Integer)"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams(java.lang.String, java.lang.Integer, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.schema.CompressionParams", "org.apache.cassandra.schema.CompressionParams.copy()"], ["boolean", "org.apache.cassandra.schema.CompressionParams.isEnabled()"], ["org.apache.cassandra.io.compress.ICompressor", "org.apache.cassandra.schema.CompressionParams.getSstableCompressor()"], ["com.google.common.collect.ImmutableMap<java.lang.String, java.lang.String>", "org.apache.cassandra.schema.CompressionParams.getOtherOptions()"], ["int", "org.apache.cassandra.schema.CompressionParams.chunkLength()"], ["org.apache.cassandra.io.compress.ICompressor", "org.apache.cassandra.schema.CompressionParams.createCompressor(org.apache.cassandra.config.ParameterizedClass)"], ["boolean", "org.apache.cassandra.schema.CompressionParams.containsSstableCompressionClass(java.util.Map<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.schema.CompressionParams.isEnabled(java.util.Map<java.lang.String, java.lang.String>)"], ["void", "org.apache.cassandra.schema.CompressionParams.validate()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.schema.CompressionParams.asMap()"], ["java.lang.String", "org.apache.cassandra.schema.CompressionParams.chunkLengthInKB()"], ["void", "org.apache.cassandra.schema.CompressionParams.setCrcCheckChance(double)"], ["double", "org.apache.cassandra.schema.CompressionParams.getCrcCheckChance()"], ["boolean", "org.apache.cassandra.schema.CompressionParams.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.CompressionParams.hashCode()"], ["org.apache.cassandra.schema.Functions", "org.apache.cassandra.schema.Functions$Builder.build()"], ["org.apache.cassandra.schema.Functions$Builder", "org.apache.cassandra.schema.Functions$Builder.add(org.apache.cassandra.cql3.functions.Function)"], ["org.apache.cassandra.schema.Functions$Builder", "org.apache.cassandra.schema.Functions$Builder.add(org.apache.cassandra.cql3.functions.Function...)"], ["org.apache.cassandra.schema.Functions$Builder", "org.apache.cassandra.schema.Functions$Builder.add(java.lang.Iterable<? extends org.apache.cassandra.cql3.functions.Function>)"], ["org.apache.cassandra.schema.Functions$Builder", "org.apache.cassandra.schema.Functions.builder()"], ["org.apache.cassandra.schema.Functions", "org.apache.cassandra.schema.Functions.none()"], ["org.apache.cassandra.schema.Functions", "org.apache.cassandra.schema.Functions.of(org.apache.cassandra.cql3.functions.Function...)"], ["boolean", "org.apache.cassandra.schema.Functions.typesMatch(org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.db.marshal.AbstractType<?>)"], ["boolean", "org.apache.cassandra.schema.Functions.typesMatch(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["int", "org.apache.cassandra.schema.Functions.typeHashCode(org.apache.cassandra.db.marshal.AbstractType<?>)"], ["int", "org.apache.cassandra.schema.Functions.typeHashCode(java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.schema.Functions", "org.apache.cassandra.schema.Functions.with(org.apache.cassandra.cql3.functions.Function)"], ["org.apache.cassandra.schema.Functions", "org.apache.cassandra.schema.Functions.without(org.apache.cassandra.cql3.functions.FunctionName, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["boolean", "org.apache.cassandra.schema.Functions.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.Functions.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.Functions.toString()"], ["org.apache.cassandra.schema.IndexMetadata$Kind[]", "org.apache.cassandra.schema.IndexMetadata$Kind.values()"], ["org.apache.cassandra.schema.IndexMetadata$Kind", "org.apache.cassandra.schema.IndexMetadata$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.schema.IndexMetadata$Serializer", "org.apache.cassandra.schema.IndexMetadata$Serializer()"], ["void", "org.apache.cassandra.schema.IndexMetadata$Serializer.serialize(org.apache.cassandra.schema.IndexMetadata, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.schema.IndexMetadata", "org.apache.cassandra.schema.IndexMetadata$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.schema.IndexMetadata$Serializer.serializedSize(org.apache.cassandra.schema.IndexMetadata, int)"], ["org.apache.cassandra.schema.IndexMetadata", "org.apache.cassandra.schema.IndexMetadata.fromLegacyMetadata(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition, java.lang.String, org.apache.cassandra.schema.IndexMetadata$Kind, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.schema.IndexMetadata", "org.apache.cassandra.schema.IndexMetadata.fromSchemaMetadata(java.lang.String, org.apache.cassandra.schema.IndexMetadata$Kind, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.schema.IndexMetadata", "org.apache.cassandra.schema.IndexMetadata.fromIndexTargets(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.cql3.statements.IndexTarget>, java.lang.String, org.apache.cassandra.schema.IndexMetadata$Kind, java.util.Map<java.lang.String, java.lang.String>)"], ["boolean", "org.apache.cassandra.schema.IndexMetadata.isNameValid(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.schema.IndexMetadata.getDefaultIndexName(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.schema.IndexMetadata.validate(org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.schema.IndexMetadata.isCustom()"], ["boolean", "org.apache.cassandra.schema.IndexMetadata.isKeys()"], ["boolean", "org.apache.cassandra.schema.IndexMetadata.isComposites()"], ["int", "org.apache.cassandra.schema.IndexMetadata.hashCode()"], ["boolean", "org.apache.cassandra.schema.IndexMetadata.equalsWithoutName(org.apache.cassandra.schema.IndexMetadata)"], ["boolean", "org.apache.cassandra.schema.IndexMetadata.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.schema.IndexMetadata.toString()"], ["org.apache.cassandra.schema.Indexes", "org.apache.cassandra.schema.Indexes$Builder.build()"], ["org.apache.cassandra.schema.Indexes$Builder", "org.apache.cassandra.schema.Indexes$Builder.add(org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.schema.Indexes$Builder", "org.apache.cassandra.schema.Indexes$Builder.add(java.lang.Iterable<org.apache.cassandra.schema.IndexMetadata>)"], ["org.apache.cassandra.schema.Indexes$Builder", "org.apache.cassandra.schema.Indexes.builder()"], ["org.apache.cassandra.schema.Indexes", "org.apache.cassandra.schema.Indexes.none()"], ["int", "org.apache.cassandra.schema.Indexes.size()"], ["boolean", "org.apache.cassandra.schema.Indexes.isEmpty()"], ["boolean", "org.apache.cassandra.schema.Indexes.has(java.lang.String)"], ["boolean", "org.apache.cassandra.schema.Indexes.has(java.util.UUID)"], ["org.apache.cassandra.schema.Indexes", "org.apache.cassandra.schema.Indexes.with(org.apache.cassandra.schema.IndexMetadata)"], ["org.apache.cassandra.schema.Indexes", "org.apache.cassandra.schema.Indexes.without(java.lang.String)"], ["org.apache.cassandra.schema.Indexes", "org.apache.cassandra.schema.Indexes.replace(org.apache.cassandra.schema.IndexMetadata)"], ["boolean", "org.apache.cassandra.schema.Indexes.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.Indexes.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.Indexes.toString()"], ["java.lang.String", "org.apache.cassandra.schema.Indexes.getAvailableIndexName(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.KeyspaceMetadata.create(java.lang.String, org.apache.cassandra.schema.KeyspaceParams)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.KeyspaceMetadata.create(java.lang.String, org.apache.cassandra.schema.KeyspaceParams, org.apache.cassandra.schema.Tables)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.KeyspaceMetadata.create(java.lang.String, org.apache.cassandra.schema.KeyspaceParams, org.apache.cassandra.schema.Tables, org.apache.cassandra.schema.Views, org.apache.cassandra.schema.Types, org.apache.cassandra.schema.Functions)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(org.apache.cassandra.schema.KeyspaceParams)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(org.apache.cassandra.schema.Tables)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(org.apache.cassandra.schema.Views)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(org.apache.cassandra.schema.Types)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(org.apache.cassandra.schema.Functions)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.schema.KeyspaceMetadata.getTableOrViewNullable(java.lang.String)"], ["int", "org.apache.cassandra.schema.KeyspaceMetadata.hashCode()"], ["boolean", "org.apache.cassandra.schema.KeyspaceMetadata.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.schema.KeyspaceMetadata.toString()"], ["void", "org.apache.cassandra.schema.KeyspaceMetadata.validate()"], ["org.apache.cassandra.schema.KeyspaceParams$Option[]", "org.apache.cassandra.schema.KeyspaceParams$Option.values()"], ["org.apache.cassandra.schema.KeyspaceParams$Option", "org.apache.cassandra.schema.KeyspaceParams$Option.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.schema.KeyspaceParams$Option.toString()"], ["org.apache.cassandra.schema.KeyspaceParams", "org.apache.cassandra.schema.KeyspaceParams(boolean, org.apache.cassandra.schema.ReplicationParams)"], ["org.apache.cassandra.schema.KeyspaceParams", "org.apache.cassandra.schema.KeyspaceParams.create(boolean, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.schema.KeyspaceParams", "org.apache.cassandra.schema.KeyspaceParams.local()"], ["org.apache.cassandra.schema.KeyspaceParams", "org.apache.cassandra.schema.KeyspaceParams.simple(int)"], ["org.apache.cassandra.schema.KeyspaceParams", "org.apache.cassandra.schema.KeyspaceParams.simpleTransient(int)"], ["org.apache.cassandra.schema.KeyspaceParams", "org.apache.cassandra.schema.KeyspaceParams.nts(java.lang.Object...)"], ["void", "org.apache.cassandra.schema.KeyspaceParams.validate(java.lang.String)"], ["boolean", "org.apache.cassandra.schema.KeyspaceParams.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.KeyspaceParams.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.KeyspaceParams.toString()"], ["org.apache.cassandra.schema.Keyspaces", "org.apache.cassandra.schema.Keyspaces$Builder.build()"], ["org.apache.cassandra.schema.Keyspaces$Builder", "org.apache.cassandra.schema.Keyspaces$Builder.add(org.apache.cassandra.schema.KeyspaceMetadata)"], ["org.apache.cassandra.schema.Keyspaces$Builder", "org.apache.cassandra.schema.Keyspaces$Builder.add(org.apache.cassandra.schema.KeyspaceMetadata...)"], ["org.apache.cassandra.schema.Keyspaces$Builder", "org.apache.cassandra.schema.Keyspaces$Builder.add(java.lang.Iterable<org.apache.cassandra.schema.KeyspaceMetadata>)"], ["org.apache.cassandra.schema.Keyspaces$Builder", "org.apache.cassandra.schema.Keyspaces.builder()"], ["org.apache.cassandra.schema.Keyspaces", "org.apache.cassandra.schema.Keyspaces.none()"], ["org.apache.cassandra.schema.Keyspaces", "org.apache.cassandra.schema.Keyspaces.of(org.apache.cassandra.schema.KeyspaceMetadata...)"], ["org.apache.cassandra.schema.Keyspaces", "org.apache.cassandra.schema.Keyspaces.filter(java.util.function.Predicate<org.apache.cassandra.schema.KeyspaceMetadata>)"], ["boolean", "org.apache.cassandra.schema.Keyspaces.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.Keyspaces.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.Keyspaces.toString()"], ["void", "org.apache.cassandra.schema.LegacySchemaMigrator.migrate()"], ["org.apache.cassandra.schema.CachingParams", "org.apache.cassandra.schema.LegacySchemaMigrator.cachingFromRow(java.lang.String)"], ["void", "org.apache.cassandra.schema.ReplicationParams.validate(java.lang.String)"], ["org.apache.cassandra.schema.ReplicationParams", "org.apache.cassandra.schema.ReplicationParams.fromMap(java.util.Map<java.lang.String, java.lang.String>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.schema.ReplicationParams.asMap()"], ["boolean", "org.apache.cassandra.schema.ReplicationParams.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.ReplicationParams.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.ReplicationParams.toString()"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.schema.SchemaKeyspace.metadata()"], ["void", "org.apache.cassandra.schema.SchemaKeyspace.saveSystemKeyspacesSchema()"], ["void", "org.apache.cassandra.schema.SchemaKeyspace.truncate()"], ["org.apache.cassandra.utils.Pair<java.util.UUID, java.util.UUID>", "org.apache.cassandra.schema.SchemaKeyspace.calculateSchemaDigest()"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeCreateKeyspaceMutation(java.lang.String, org.apache.cassandra.schema.KeyspaceParams, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeCreateKeyspaceMutation(org.apache.cassandra.schema.KeyspaceMetadata, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeDropKeyspaceMutation(org.apache.cassandra.schema.KeyspaceMetadata, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeCreateTypeMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.db.marshal.UserType, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.dropTypeFromSchemaMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.db.marshal.UserType, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeCreateTableMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.config.CFMetaData, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeUpdateTableMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.CFMetaData, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeDropTableMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.config.CFMetaData, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeCreateViewMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.config.ViewDefinition, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeDropViewMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.config.ViewDefinition, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeUpdateViewMutation(org.apache.cassandra.db.Mutation$SimpleBuilder, org.apache.cassandra.config.ViewDefinition, org.apache.cassandra.config.ViewDefinition)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeCreateFunctionMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.cql3.functions.UDFunction, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeDropFunctionMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.cql3.functions.UDFunction, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeCreateAggregateMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.cql3.functions.UDAggregate, long)"], ["org.apache.cassandra.db.Mutation$SimpleBuilder", "org.apache.cassandra.schema.SchemaKeyspace.makeDropAggregateMutation(org.apache.cassandra.schema.KeyspaceMetadata, org.apache.cassandra.cql3.functions.UDAggregate, long)"], ["org.apache.cassandra.schema.Keyspaces", "org.apache.cassandra.schema.SchemaKeyspace.fetchNonSystemKeyspaces()"], ["org.apache.cassandra.schema.TableParams", "org.apache.cassandra.schema.SchemaKeyspace.createTableParamsFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.schema.SchemaKeyspace.createColumnFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row, org.apache.cassandra.schema.Types)"], ["synchronized", "org.apache.cassandra.schema.SchemaKeyspace.void reloadSchemaAndAnnounceVersion()"], ["synchronized", "org.apache.cassandra.schema.SchemaKeyspace.void mergeSchemaAndAnnounceVersion(java.util.Collection<org.apache.cassandra.db.Mutation>)"], ["synchronized", "org.apache.cassandra.schema.SchemaKeyspace.void mergeSchema(java.util.Collection<org.apache.cassandra.db.Mutation>)"], ["org.apache.cassandra.schema.SpeculativeRetryParam$Kind[]", "org.apache.cassandra.schema.SpeculativeRetryParam$Kind.values()"], ["org.apache.cassandra.schema.SpeculativeRetryParam$Kind", "org.apache.cassandra.schema.SpeculativeRetryParam$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.schema.SpeculativeRetryParam$Kind", "org.apache.cassandra.schema.SpeculativeRetryParam.kind()"], ["double", "org.apache.cassandra.schema.SpeculativeRetryParam.threshold()"], ["org.apache.cassandra.schema.SpeculativeRetryParam", "org.apache.cassandra.schema.SpeculativeRetryParam.none()"], ["org.apache.cassandra.schema.SpeculativeRetryParam", "org.apache.cassandra.schema.SpeculativeRetryParam.always()"], ["org.apache.cassandra.schema.SpeculativeRetryParam", "org.apache.cassandra.schema.SpeculativeRetryParam.custom(double)"], ["org.apache.cassandra.schema.SpeculativeRetryParam", "org.apache.cassandra.schema.SpeculativeRetryParam.percentile(double)"], ["org.apache.cassandra.schema.SpeculativeRetryParam", "org.apache.cassandra.schema.SpeculativeRetryParam.fromString(java.lang.String)"], ["boolean", "org.apache.cassandra.schema.SpeculativeRetryParam.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.SpeculativeRetryParam.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.SpeculativeRetryParam.toString()"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder()"], ["org.apache.cassandra.schema.TableParams", "org.apache.cassandra.schema.TableParams$Builder.build()"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.comment(java.lang.String)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.readRepairChance(double)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.dcLocalReadRepairChance(double)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.bloomFilterFpChance(double)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.crcCheckChance(double)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.gcGraceSeconds(int)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.defaultTimeToLive(int)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.memtableFlushPeriodInMs(int)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.minIndexInterval(int)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.maxIndexInterval(int)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.speculativeRetry(org.apache.cassandra.schema.SpeculativeRetryParam)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.caching(org.apache.cassandra.schema.CachingParams)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.compaction(org.apache.cassandra.schema.CompactionParams)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.compression(org.apache.cassandra.schema.CompressionParams)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.cdc(boolean)"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams$Builder.extensions(java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["org.apache.cassandra.schema.TableParams$Option[]", "org.apache.cassandra.schema.TableParams$Option.values()"], ["org.apache.cassandra.schema.TableParams$Option", "org.apache.cassandra.schema.TableParams$Option.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.schema.TableParams$Option.toString()"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams.builder()"], ["org.apache.cassandra.schema.TableParams$Builder", "org.apache.cassandra.schema.TableParams.builder(org.apache.cassandra.schema.TableParams)"], ["void", "org.apache.cassandra.schema.TableParams.validate()"], ["boolean", "org.apache.cassandra.schema.TableParams.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.TableParams.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.TableParams.toString()"], ["org.apache.cassandra.schema.Tables", "org.apache.cassandra.schema.Tables$Builder.build()"], ["org.apache.cassandra.schema.Tables$Builder", "org.apache.cassandra.schema.Tables$Builder.add(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.schema.Tables$Builder", "org.apache.cassandra.schema.Tables$Builder.add(org.apache.cassandra.config.CFMetaData...)"], ["org.apache.cassandra.schema.Tables$Builder", "org.apache.cassandra.schema.Tables$Builder.add(java.lang.Iterable<org.apache.cassandra.config.CFMetaData>)"], ["org.apache.cassandra.schema.Tables$Builder", "org.apache.cassandra.schema.Tables.builder()"], ["org.apache.cassandra.schema.Tables", "org.apache.cassandra.schema.Tables.none()"], ["org.apache.cassandra.schema.Tables", "org.apache.cassandra.schema.Tables.of(org.apache.cassandra.config.CFMetaData...)"], ["org.apache.cassandra.schema.Tables", "org.apache.cassandra.schema.Tables.of(java.lang.Iterable<org.apache.cassandra.config.CFMetaData>)"], ["int", "org.apache.cassandra.schema.Tables.size()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.schema.Tables.getNullable(java.lang.String)"], ["org.apache.cassandra.schema.Tables", "org.apache.cassandra.schema.Tables.with(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.schema.Tables", "org.apache.cassandra.schema.Tables.without(java.lang.String)"], ["boolean", "org.apache.cassandra.schema.Tables.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.Tables.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.Tables.toString()"], ["org.apache.cassandra.schema.TriggerMetadata", "org.apache.cassandra.schema.TriggerMetadata(java.lang.String, java.lang.String)"], ["org.apache.cassandra.schema.TriggerMetadata", "org.apache.cassandra.schema.TriggerMetadata.create(java.lang.String, java.lang.String)"], ["boolean", "org.apache.cassandra.schema.TriggerMetadata.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.TriggerMetadata.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.TriggerMetadata.toString()"], ["org.apache.cassandra.schema.Triggers", "org.apache.cassandra.schema.Triggers$Builder.build()"], ["org.apache.cassandra.schema.Triggers$Builder", "org.apache.cassandra.schema.Triggers$Builder.add(org.apache.cassandra.schema.TriggerMetadata)"], ["org.apache.cassandra.schema.Triggers$Builder", "org.apache.cassandra.schema.Triggers$Builder.add(java.lang.Iterable<org.apache.cassandra.schema.TriggerMetadata>)"], ["org.apache.cassandra.schema.Triggers$Builder", "org.apache.cassandra.schema.Triggers.builder()"], ["org.apache.cassandra.schema.Triggers", "org.apache.cassandra.schema.Triggers.none()"], ["int", "org.apache.cassandra.schema.Triggers.size()"], ["boolean", "org.apache.cassandra.schema.Triggers.isEmpty()"], ["org.apache.cassandra.schema.Triggers", "org.apache.cassandra.schema.Triggers.with(org.apache.cassandra.schema.TriggerMetadata)"], ["org.apache.cassandra.schema.Triggers", "org.apache.cassandra.schema.Triggers.without(java.lang.String)"], ["boolean", "org.apache.cassandra.schema.Triggers.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.Triggers.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.Triggers.toString()"], ["org.apache.cassandra.schema.Types", "org.apache.cassandra.schema.Types$Builder.build()"], ["org.apache.cassandra.schema.Types$Builder", "org.apache.cassandra.schema.Types$Builder.add(org.apache.cassandra.db.marshal.UserType)"], ["org.apache.cassandra.schema.Types$Builder", "org.apache.cassandra.schema.Types$Builder.add(org.apache.cassandra.db.marshal.UserType...)"], ["org.apache.cassandra.schema.Types$Builder", "org.apache.cassandra.schema.Types$Builder.add(java.lang.Iterable<org.apache.cassandra.db.marshal.UserType>)"], ["int", "org.apache.cassandra.schema.Types$RawBuilder$RawUDT.hashCode()"], ["boolean", "org.apache.cassandra.schema.Types$RawBuilder$RawUDT.equals(java.lang.Object)"], ["org.apache.cassandra.schema.Types", "org.apache.cassandra.schema.Types$RawBuilder.build()"], ["void", "org.apache.cassandra.schema.Types$RawBuilder.add(java.lang.String, java.util.List<java.lang.String>, java.util.List<java.lang.String>)"], ["org.apache.cassandra.schema.Types$Builder", "org.apache.cassandra.schema.Types.builder()"], ["org.apache.cassandra.schema.Types$RawBuilder", "org.apache.cassandra.schema.Types.rawBuilder(java.lang.String)"], ["org.apache.cassandra.schema.Types", "org.apache.cassandra.schema.Types.none()"], ["org.apache.cassandra.schema.Types", "org.apache.cassandra.schema.Types.of(org.apache.cassandra.db.marshal.UserType...)"], ["org.apache.cassandra.db.marshal.UserType", "org.apache.cassandra.schema.Types.getNullable(java.nio.ByteBuffer)"], ["org.apache.cassandra.schema.Types", "org.apache.cassandra.schema.Types.with(org.apache.cassandra.db.marshal.UserType)"], ["org.apache.cassandra.schema.Types", "org.apache.cassandra.schema.Types.without(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.schema.Types.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.Types.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.Types.toString()"], ["org.apache.cassandra.schema.UnknownIndexException", "org.apache.cassandra.schema.UnknownIndexException(org.apache.cassandra.config.CFMetaData, java.util.UUID)"], ["org.apache.cassandra.schema.Views", "org.apache.cassandra.schema.Views$Builder.build()"], ["org.apache.cassandra.schema.Views$Builder", "org.apache.cassandra.schema.Views$Builder.add(org.apache.cassandra.config.ViewDefinition)"], ["org.apache.cassandra.schema.Views$Builder", "org.apache.cassandra.schema.Views$Builder.add(java.lang.Iterable<org.apache.cassandra.config.ViewDefinition>)"], ["org.apache.cassandra.schema.Views$Builder", "org.apache.cassandra.schema.Views.builder()"], ["org.apache.cassandra.schema.Views", "org.apache.cassandra.schema.Views.none()"], ["int", "org.apache.cassandra.schema.Views.size()"], ["boolean", "org.apache.cassandra.schema.Views.isEmpty()"], ["org.apache.cassandra.config.ViewDefinition", "org.apache.cassandra.schema.Views.getNullable(java.lang.String)"], ["org.apache.cassandra.schema.Views", "org.apache.cassandra.schema.Views.with(org.apache.cassandra.config.ViewDefinition)"], ["org.apache.cassandra.schema.Views", "org.apache.cassandra.schema.Views.without(java.lang.String)"], ["org.apache.cassandra.schema.Views", "org.apache.cassandra.schema.Views.replace(org.apache.cassandra.config.ViewDefinition, org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.schema.Views.equals(java.lang.Object)"], ["int", "org.apache.cassandra.schema.Views.hashCode()"], ["java.lang.String", "org.apache.cassandra.schema.Views.toString()"], ["java.security.Key", "org.apache.cassandra.security.CipherFactory$1.load(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.security.CipherFactory$1.load(java.lang.Object)"], ["void", "org.apache.cassandra.security.CipherFactory$2.onRemoval(com.google.common.cache.RemovalNotification<java.lang.String, java.security.Key>)"], ["org.apache.cassandra.security.CipherFactory", "org.apache.cassandra.security.CipherFactory(org.apache.cassandra.config.TransparentDataEncryptionOptions)"], ["javax.crypto.Cipher", "org.apache.cassandra.security.CipherFactory.getEncryptor(java.lang.String, java.lang.String)"], ["javax.crypto.Cipher", "org.apache.cassandra.security.CipherFactory.getDecryptor(java.lang.String, java.lang.String, byte[])"], ["org.apache.cassandra.security.EncryptionContext", "org.apache.cassandra.security.EncryptionContext()"], ["org.apache.cassandra.security.EncryptionContext", "org.apache.cassandra.security.EncryptionContext(org.apache.cassandra.config.TransparentDataEncryptionOptions)"], ["org.apache.cassandra.security.EncryptionContext", "org.apache.cassandra.security.EncryptionContext(org.apache.cassandra.config.TransparentDataEncryptionOptions, byte[], boolean)"], ["org.apache.cassandra.io.compress.ICompressor", "org.apache.cassandra.security.EncryptionContext.getCompressor()"], ["javax.crypto.Cipher", "org.apache.cassandra.security.EncryptionContext.getEncryptor()"], ["javax.crypto.Cipher", "org.apache.cassandra.security.EncryptionContext.getDecryptor()"], ["boolean", "org.apache.cassandra.security.EncryptionContext.isEnabled()"], ["int", "org.apache.cassandra.security.EncryptionContext.getChunkLength()"], ["byte[]", "org.apache.cassandra.security.EncryptionContext.getIV()"], ["org.apache.cassandra.config.TransparentDataEncryptionOptions", "org.apache.cassandra.security.EncryptionContext.getTransparentDataEncryptionOptions()"], ["boolean", "org.apache.cassandra.security.EncryptionContext.equals(java.lang.Object)"], ["boolean", "org.apache.cassandra.security.EncryptionContext.equals(org.apache.cassandra.security.EncryptionContext)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.security.EncryptionContext.toHeaderParameters()"], ["org.apache.cassandra.security.EncryptionContext", "org.apache.cassandra.security.EncryptionContext.createFromMap(java.util.Map<?, ?>, org.apache.cassandra.security.EncryptionContext)"], ["int", "org.apache.cassandra.security.EncryptionUtils$ChannelAdapter.write(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.security.EncryptionUtils$ChannelAdapter.isOpen()"], ["void", "org.apache.cassandra.security.EncryptionUtils$ChannelAdapter.close()"], ["org.apache.cassandra.security.EncryptionUtils$ChannelProxyReadChannel", "org.apache.cassandra.security.EncryptionUtils$ChannelProxyReadChannel(org.apache.cassandra.io.util.ChannelProxy, long)"], ["int", "org.apache.cassandra.security.EncryptionUtils$ChannelProxyReadChannel.read(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.security.EncryptionUtils$ChannelProxyReadChannel.getCurrentPosition()"], ["boolean", "org.apache.cassandra.security.EncryptionUtils$ChannelProxyReadChannel.isOpen()"], ["void", "org.apache.cassandra.security.EncryptionUtils$ChannelProxyReadChannel.close()"], ["void", "org.apache.cassandra.security.EncryptionUtils$ChannelProxyReadChannel.setPosition(long)"], ["int", "org.apache.cassandra.security.EncryptionUtils$DataInputReadChannel.read(java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.security.EncryptionUtils$DataInputReadChannel.isOpen()"], ["void", "org.apache.cassandra.security.EncryptionUtils$DataInputReadChannel.close()"], ["org.apache.cassandra.security.EncryptionUtils", "org.apache.cassandra.security.EncryptionUtils()"], ["java.nio.ByteBuffer", "org.apache.cassandra.security.EncryptionUtils.compress(java.nio.ByteBuffer, java.nio.ByteBuffer, boolean, org.apache.cassandra.io.compress.ICompressor)"], ["java.nio.ByteBuffer", "org.apache.cassandra.security.EncryptionUtils.encryptAndWrite(java.nio.ByteBuffer, java.nio.channels.WritableByteChannel, boolean, javax.crypto.Cipher)"], ["java.nio.ByteBuffer", "org.apache.cassandra.security.EncryptionUtils.encrypt(java.nio.ByteBuffer, java.nio.ByteBuffer, boolean, javax.crypto.Cipher)"], ["java.nio.ByteBuffer", "org.apache.cassandra.security.EncryptionUtils.decrypt(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer, boolean, javax.crypto.Cipher)"], ["java.nio.ByteBuffer", "org.apache.cassandra.security.EncryptionUtils.decrypt(org.apache.cassandra.io.util.FileDataInput, java.nio.ByteBuffer, boolean, javax.crypto.Cipher)"], ["java.nio.ByteBuffer", "org.apache.cassandra.security.EncryptionUtils.uncompress(java.nio.ByteBuffer, java.nio.ByteBuffer, boolean, org.apache.cassandra.io.compress.ICompressor)"], ["int", "org.apache.cassandra.security.EncryptionUtils.uncompress(byte[], int, int, byte[], int, org.apache.cassandra.io.compress.ICompressor)"], ["org.apache.cassandra.security.JKSKeyProvider", "org.apache.cassandra.security.JKSKeyProvider(org.apache.cassandra.config.TransparentDataEncryptionOptions)"], ["java.security.Key", "org.apache.cassandra.security.JKSKeyProvider.getSecretKey(java.lang.String)"], ["org.apache.cassandra.security.SSLFactory", "org.apache.cassandra.security.SSLFactory()"], ["javax.net.ssl.SSLServerSocket", "org.apache.cassandra.security.SSLFactory.getServerSocket(org.apache.cassandra.config.EncryptionOptions, java.net.InetAddress, int)"], ["javax.net.ssl.SSLSocket", "org.apache.cassandra.security.SSLFactory.getSocket(org.apache.cassandra.config.EncryptionOptions, java.net.InetAddress, int, java.net.InetAddress, int)"], ["javax.net.ssl.SSLSocket", "org.apache.cassandra.security.SSLFactory.getSocket(org.apache.cassandra.config.EncryptionOptions, java.net.InetAddress, int)"], ["javax.net.ssl.SSLSocket", "org.apache.cassandra.security.SSLFactory.getSocket(org.apache.cassandra.config.EncryptionOptions)"], ["javax.net.ssl.SSLContext", "org.apache.cassandra.security.SSLFactory.createSSLContext(org.apache.cassandra.config.EncryptionOptions, boolean)"], ["java.lang.String[]", "org.apache.cassandra.security.SSLFactory.filterCipherSuites(java.lang.String[], java.lang.String[])"], ["org.apache.cassandra.security.SecurityThreadGroup", "org.apache.cassandra.security.SecurityThreadGroup(java.lang.String, java.util.Set<java.lang.String>, org.apache.cassandra.security.SecurityThreadGroup$ThreadInitializer)"], ["void", "org.apache.cassandra.security.SecurityThreadGroup.initializeThread()"], ["boolean", "org.apache.cassandra.security.SecurityThreadGroup.isPackageAllowed(java.lang.String)"], ["void", "org.apache.cassandra.security.ThreadAwareSecurityManager$1.add(java.security.Permission)"], ["boolean", "org.apache.cassandra.security.ThreadAwareSecurityManager$1.implies(java.security.Permission)"], ["java.security.PermissionCollection", "org.apache.cassandra.security.ThreadAwareSecurityManager$2.getPermissions(java.security.CodeSource)"], ["java.security.PermissionCollection", "org.apache.cassandra.security.ThreadAwareSecurityManager$2.getPermissions(java.security.ProtectionDomain)"], ["boolean", "org.apache.cassandra.security.ThreadAwareSecurityManager$2.implies(java.security.ProtectionDomain, java.security.Permission)"], ["void", "org.apache.cassandra.security.ThreadAwareSecurityManager.install()"], ["boolean", "org.apache.cassandra.security.ThreadAwareSecurityManager.isSecuredThread()"], ["void", "org.apache.cassandra.security.ThreadAwareSecurityManager.checkAccess(java.lang.Thread)"], ["void", "org.apache.cassandra.security.ThreadAwareSecurityManager.checkAccess(java.lang.ThreadGroup)"], ["void", "org.apache.cassandra.security.ThreadAwareSecurityManager.checkPermission(java.security.Permission)"], ["void", "org.apache.cassandra.security.ThreadAwareSecurityManager.checkPermission(java.security.Permission, java.lang.Object)"], ["void", "org.apache.cassandra.security.ThreadAwareSecurityManager.checkPackageAccess(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.serializers.AbstractTextSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.AbstractTextSerializer.serialize(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.serializers.AbstractTextSerializer.toString(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.serializers.AbstractTextSerializer.toCQLLiteral(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.AbstractTextSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.AbstractTextSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.AbstractTextSerializer.serialize(java.lang.Object)"], ["void", "org.apache.cassandra.serializers.AsciiSerializer.validate(java.nio.ByteBuffer)"], ["org.apache.cassandra.serializers.BooleanSerializer", "org.apache.cassandra.serializers.BooleanSerializer()"], ["java.lang.Boolean", "org.apache.cassandra.serializers.BooleanSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.BooleanSerializer.serialize(java.lang.Boolean)"], ["void", "org.apache.cassandra.serializers.BooleanSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.BooleanSerializer.toString(java.lang.Boolean)"], ["java.lang.String", "org.apache.cassandra.serializers.BooleanSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.BooleanSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.BooleanSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.ByteSerializer", "org.apache.cassandra.serializers.ByteSerializer()"], ["java.lang.Byte", "org.apache.cassandra.serializers.ByteSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.ByteSerializer.serialize(java.lang.Byte)"], ["void", "org.apache.cassandra.serializers.ByteSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.ByteSerializer.toString(java.lang.Byte)"], ["java.lang.String", "org.apache.cassandra.serializers.ByteSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.ByteSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.ByteSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.BytesSerializer", "org.apache.cassandra.serializers.BytesSerializer()"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.BytesSerializer.serialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.BytesSerializer.deserialize(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.serializers.BytesSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.BytesSerializer.toString(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.BytesSerializer.toCQLLiteral(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.BytesSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.BytesSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.BytesSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.CollectionSerializer", "org.apache.cassandra.serializers.CollectionSerializer()"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.CollectionSerializer.serialize(T)"], ["T", "org.apache.cassandra.serializers.CollectionSerializer.deserialize(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.serializers.CollectionSerializer.validate(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.CollectionSerializer.pack(java.util.Collection<java.nio.ByteBuffer>, int, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.serializers.CollectionSerializer.readCollectionSize(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.serializers.CollectionSerializer.writeValue(java.nio.ByteBuffer, java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.CollectionSerializer.readValue(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.serializers.CollectionSerializer.sizeOfValue(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.serializers.CounterSerializer", "org.apache.cassandra.serializers.CounterSerializer()"], ["org.apache.cassandra.serializers.DecimalSerializer", "org.apache.cassandra.serializers.DecimalSerializer()"], ["java.math.BigDecimal", "org.apache.cassandra.serializers.DecimalSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.DecimalSerializer.serialize(java.math.BigDecimal)"], ["void", "org.apache.cassandra.serializers.DecimalSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.DecimalSerializer.toString(java.math.BigDecimal)"], ["java.lang.String", "org.apache.cassandra.serializers.DecimalSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.DecimalSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.DecimalSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.DoubleSerializer", "org.apache.cassandra.serializers.DoubleSerializer()"], ["java.lang.Double", "org.apache.cassandra.serializers.DoubleSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.DoubleSerializer.serialize(java.lang.Double)"], ["void", "org.apache.cassandra.serializers.DoubleSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.DoubleSerializer.toString(java.lang.Double)"], ["java.lang.String", "org.apache.cassandra.serializers.DoubleSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.DoubleSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.DoubleSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.DurationSerializer", "org.apache.cassandra.serializers.DurationSerializer()"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.DurationSerializer.serialize(org.apache.cassandra.cql3.Duration)"], ["org.apache.cassandra.cql3.Duration", "org.apache.cassandra.serializers.DurationSerializer.deserialize(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.serializers.DurationSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.DurationSerializer.toString(org.apache.cassandra.cql3.Duration)"], ["java.lang.String", "org.apache.cassandra.serializers.DurationSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.DurationSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.DurationSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.EmptySerializer", "org.apache.cassandra.serializers.EmptySerializer()"], ["java.lang.Void", "org.apache.cassandra.serializers.EmptySerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.EmptySerializer.serialize(java.lang.Void)"], ["void", "org.apache.cassandra.serializers.EmptySerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.EmptySerializer.toString(java.lang.Void)"], ["java.lang.String", "org.apache.cassandra.serializers.EmptySerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.EmptySerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.EmptySerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.FloatSerializer", "org.apache.cassandra.serializers.FloatSerializer()"], ["java.lang.Float", "org.apache.cassandra.serializers.FloatSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.FloatSerializer.serialize(java.lang.Float)"], ["void", "org.apache.cassandra.serializers.FloatSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.FloatSerializer.toString(java.lang.Float)"], ["java.lang.String", "org.apache.cassandra.serializers.FloatSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.FloatSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.FloatSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.InetAddressSerializer", "org.apache.cassandra.serializers.InetAddressSerializer()"], ["java.net.InetAddress", "org.apache.cassandra.serializers.InetAddressSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.InetAddressSerializer.serialize(java.net.InetAddress)"], ["void", "org.apache.cassandra.serializers.InetAddressSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.InetAddressSerializer.toString(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.serializers.InetAddressSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.InetAddressSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.InetAddressSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.Int32Serializer", "org.apache.cassandra.serializers.Int32Serializer()"], ["java.lang.Integer", "org.apache.cassandra.serializers.Int32Serializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.Int32Serializer.serialize(java.lang.Integer)"], ["void", "org.apache.cassandra.serializers.Int32Serializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.Int32Serializer.toString(java.lang.Integer)"], ["java.lang.String", "org.apache.cassandra.serializers.Int32Serializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.Int32Serializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.Int32Serializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.IntegerSerializer", "org.apache.cassandra.serializers.IntegerSerializer()"], ["java.math.BigInteger", "org.apache.cassandra.serializers.IntegerSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.IntegerSerializer.serialize(java.math.BigInteger)"], ["void", "org.apache.cassandra.serializers.IntegerSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.IntegerSerializer.toString(java.math.BigInteger)"], ["java.lang.String", "org.apache.cassandra.serializers.IntegerSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.IntegerSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.IntegerSerializer.serialize(java.lang.Object)"], ["<T> org.apache.cassandra.serializers.ListSerializer<T>", "org.apache.cassandra.serializers.ListSerializer.getInstance(org.apache.cassandra.serializers.TypeSerializer<T>)"], ["int", "org.apache.cassandra.serializers.ListSerializer.getElementCount(java.util.List<T>)"], ["void", "org.apache.cassandra.serializers.ListSerializer.validateForNativeProtocol(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.ListSerializer.getElement(java.nio.ByteBuffer, int)"], ["java.lang.String", "org.apache.cassandra.serializers.ListSerializer.toString(java.util.List<T>)"], ["java.lang.Object", "org.apache.cassandra.serializers.ListSerializer.deserializeForNativeProtocol(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.serializers.ListSerializer.getElementCount(java.lang.Object)"], ["java.util.List", "org.apache.cassandra.serializers.ListSerializer.serializeValues(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.serializers.ListSerializer.toString(java.lang.Object)"], ["org.apache.cassandra.serializers.LongSerializer", "org.apache.cassandra.serializers.LongSerializer()"], ["java.lang.Long", "org.apache.cassandra.serializers.LongSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.LongSerializer.serialize(java.lang.Long)"], ["void", "org.apache.cassandra.serializers.LongSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.LongSerializer.toString(java.lang.Long)"], ["java.lang.String", "org.apache.cassandra.serializers.LongSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.LongSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.LongSerializer.serialize(java.lang.Object)"], ["<K, V> org.apache.cassandra.serializers.MapSerializer<K, V>", "org.apache.cassandra.serializers.MapSerializer.getInstance(org.apache.cassandra.serializers.TypeSerializer<K>, org.apache.cassandra.serializers.TypeSerializer<V>, java.util.Comparator<java.nio.ByteBuffer>)"], ["int", "org.apache.cassandra.serializers.MapSerializer.getElementCount(java.util.Map<K, V>)"], ["void", "org.apache.cassandra.serializers.MapSerializer.validateForNativeProtocol(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["java.util.Map<K, V>", "org.apache.cassandra.serializers.MapSerializer.deserializeForNativeProtocol(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.MapSerializer.getSerializedValue(java.nio.ByteBuffer, java.nio.ByteBuffer, org.apache.cassandra.db.marshal.AbstractType)"], ["java.lang.String", "org.apache.cassandra.serializers.MapSerializer.toString(java.util.Map<K, V>)"], ["java.lang.Class<java.util.Map<K, V>>", "org.apache.cassandra.serializers.MapSerializer.getType()"], ["java.lang.Object", "org.apache.cassandra.serializers.MapSerializer.deserializeForNativeProtocol(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.serializers.MapSerializer.getElementCount(java.lang.Object)"], ["java.util.List", "org.apache.cassandra.serializers.MapSerializer.serializeValues(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.serializers.MapSerializer.toString(java.lang.Object)"], ["org.apache.cassandra.serializers.MarshalException", "org.apache.cassandra.serializers.MarshalException(java.lang.String)"], ["org.apache.cassandra.serializers.MarshalException", "org.apache.cassandra.serializers.MarshalException(java.lang.String, java.lang.Throwable)"], ["<T> org.apache.cassandra.serializers.SetSerializer<T>", "org.apache.cassandra.serializers.SetSerializer.getInstance(org.apache.cassandra.serializers.TypeSerializer<T>, java.util.Comparator<java.nio.ByteBuffer>)"], ["int", "org.apache.cassandra.serializers.SetSerializer.getElementCount(java.util.Set<T>)"], ["void", "org.apache.cassandra.serializers.SetSerializer.validateForNativeProtocol(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.String", "org.apache.cassandra.serializers.SetSerializer.toString(java.util.Set<T>)"], ["java.lang.Object", "org.apache.cassandra.serializers.SetSerializer.deserializeForNativeProtocol(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.serializers.SetSerializer.getElementCount(java.lang.Object)"], ["java.util.List", "org.apache.cassandra.serializers.SetSerializer.serializeValues(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.serializers.SetSerializer.toString(java.lang.Object)"], ["org.apache.cassandra.serializers.ShortSerializer", "org.apache.cassandra.serializers.ShortSerializer()"], ["java.lang.Short", "org.apache.cassandra.serializers.ShortSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.ShortSerializer.serialize(java.lang.Short)"], ["void", "org.apache.cassandra.serializers.ShortSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.ShortSerializer.toString(java.lang.Short)"], ["java.lang.String", "org.apache.cassandra.serializers.ShortSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.ShortSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.ShortSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.SimpleDateSerializer", "org.apache.cassandra.serializers.SimpleDateSerializer()"], ["java.lang.Integer", "org.apache.cassandra.serializers.SimpleDateSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.SimpleDateSerializer.serialize(java.lang.Integer)"], ["int", "org.apache.cassandra.serializers.SimpleDateSerializer.dateStringToDays(java.lang.String)"], ["int", "org.apache.cassandra.serializers.SimpleDateSerializer.timeInMillisToDay(long)"], ["long", "org.apache.cassandra.serializers.SimpleDateSerializer.dayToTimeInMillis(int)"], ["void", "org.apache.cassandra.serializers.SimpleDateSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.SimpleDateSerializer.toString(java.lang.Integer)"], ["java.lang.String", "org.apache.cassandra.serializers.SimpleDateSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.SimpleDateSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.SimpleDateSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.TimeSerializer", "org.apache.cassandra.serializers.TimeSerializer()"], ["java.lang.Long", "org.apache.cassandra.serializers.TimeSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.TimeSerializer.serialize(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.serializers.TimeSerializer.timeStringToLong(java.lang.String)"], ["void", "org.apache.cassandra.serializers.TimeSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.TimeSerializer.toString(java.lang.Long)"], ["java.lang.String", "org.apache.cassandra.serializers.TimeSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.TimeSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.TimeSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.TimeUUIDSerializer", "org.apache.cassandra.serializers.TimeUUIDSerializer()"], ["void", "org.apache.cassandra.serializers.TimeUUIDSerializer.validate(java.nio.ByteBuffer)"], ["org.apache.cassandra.serializers.TimestampSerializer", "org.apache.cassandra.serializers.TimestampSerializer()"], ["java.util.Date", "org.apache.cassandra.serializers.TimestampSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.TimestampSerializer.serialize(java.util.Date)"], ["long", "org.apache.cassandra.serializers.TimestampSerializer.dateStringToTimestamp(java.lang.String)"], ["java.text.SimpleDateFormat", "org.apache.cassandra.serializers.TimestampSerializer.getJsonDateFormatter()"], ["void", "org.apache.cassandra.serializers.TimestampSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.TimestampSerializer.toString(java.util.Date)"], ["java.lang.String", "org.apache.cassandra.serializers.TimestampSerializer.toStringUTC(java.util.Date)"], ["java.lang.String", "org.apache.cassandra.serializers.TimestampSerializer.toCQLLiteral(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.TimestampSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.TimestampSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.TimestampSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.TupleSerializer", "org.apache.cassandra.serializers.TupleSerializer(java.util.List<org.apache.cassandra.serializers.TypeSerializer<?>>)"], ["void", "org.apache.cassandra.serializers.TupleSerializer.validate(java.nio.ByteBuffer)"], ["default", "org.apache.cassandra.serializers.TypeSerializer.java.lang.String toCQLLiteral(java.nio.ByteBuffer)"], ["org.apache.cassandra.serializers.UTF8Serializer$UTF8Validator$State[]", "org.apache.cassandra.serializers.UTF8Serializer$UTF8Validator$State.values()"], ["org.apache.cassandra.serializers.UTF8Serializer$UTF8Validator$State", "org.apache.cassandra.serializers.UTF8Serializer$UTF8Validator$State.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.serializers.UTF8Serializer.validate(java.nio.ByteBuffer)"], ["org.apache.cassandra.serializers.UUIDSerializer", "org.apache.cassandra.serializers.UUIDSerializer()"], ["java.util.UUID", "org.apache.cassandra.serializers.UUIDSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.UUIDSerializer.serialize(java.util.UUID)"], ["void", "org.apache.cassandra.serializers.UUIDSerializer.validate(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.serializers.UUIDSerializer.toString(java.util.UUID)"], ["java.lang.String", "org.apache.cassandra.serializers.UUIDSerializer.toString(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.serializers.UUIDSerializer.deserialize(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.serializers.UUIDSerializer.serialize(java.lang.Object)"], ["org.apache.cassandra.serializers.UserTypeSerializer", "org.apache.cassandra.serializers.UserTypeSerializer(java.util.LinkedHashMap<java.lang.String, org.apache.cassandra.serializers.TypeSerializer<?>>)"], ["void", "org.apache.cassandra.serializers.UserTypeSerializer.validate(java.nio.ByteBuffer)"], ["org.apache.cassandra.service.AbstractReadExecutor$AlwaysSpeculatingReadExecutor", "org.apache.cassandra.service.AbstractReadExecutor$AlwaysSpeculatingReadExecutor(org.apache.cassandra.db.Keyspace, org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.ConsistencyLevel, java.util.List<java.net.InetAddress>, long)"], ["void", "org.apache.cassandra.service.AbstractReadExecutor$AlwaysSpeculatingReadExecutor.maybeTryAdditionalReplicas()"], ["void", "org.apache.cassandra.service.AbstractReadExecutor$AlwaysSpeculatingReadExecutor.executeAsync()"], ["org.apache.cassandra.service.AbstractReadExecutor$NeverSpeculatingReadExecutor", "org.apache.cassandra.service.AbstractReadExecutor$NeverSpeculatingReadExecutor(org.apache.cassandra.db.Keyspace, org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.ConsistencyLevel, java.util.List<java.net.InetAddress>, long)"], ["void", "org.apache.cassandra.service.AbstractReadExecutor$NeverSpeculatingReadExecutor.executeAsync()"], ["void", "org.apache.cassandra.service.AbstractReadExecutor$NeverSpeculatingReadExecutor.maybeTryAdditionalReplicas()"], ["org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor", "org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor(org.apache.cassandra.db.Keyspace, org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.ConsistencyLevel, java.util.List<java.net.InetAddress>, long)"], ["void", "org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor.executeAsync()"], ["void", "org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor.maybeTryAdditionalReplicas()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.AbstractReadExecutor.get()"], ["org.apache.cassandra.service.AbstractReadExecutor", "org.apache.cassandra.service.AbstractReadExecutor.getReadExecutor(org.apache.cassandra.db.SinglePartitionReadCommand, org.apache.cassandra.db.ConsistencyLevel, long)"], ["void", "org.apache.cassandra.service.AbstractWriteResponseHandler.get()"], ["long", "org.apache.cassandra.service.AbstractWriteResponseHandler.currentTimeout()"], ["void", "org.apache.cassandra.service.AbstractWriteResponseHandler.assureSufficientLiveNodes()"], ["void", "org.apache.cassandra.service.AbstractWriteResponseHandler.onFailure(java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason)"], ["boolean", "org.apache.cassandra.service.AbstractWriteResponseHandler.supportsBackPressure()"], ["void", "org.apache.cassandra.service.AbstractWriteResponseHandler.setSupportsBackPressure(boolean)"], ["void", "org.apache.cassandra.service.ActiveRepairService$1.run()"], ["void", "org.apache.cassandra.service.ActiveRepairService$2.run()"], ["void", "org.apache.cassandra.service.ActiveRepairService$3.response(org.apache.cassandra.net.MessageIn)"], ["boolean", "org.apache.cassandra.service.ActiveRepairService$3.isLatencyForSnitch()"], ["void", "org.apache.cassandra.service.ActiveRepairService$3.onFailure(java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason)"], ["void", "org.apache.cassandra.service.ActiveRepairService$4.run()"], ["boolean", "org.apache.cassandra.service.ActiveRepairService$ParentRepairSession$1.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.service.ActiveRepairService$ParentRepairSession$1.apply(java.lang.Object)"], ["org.apache.cassandra.service.ActiveRepairService$ParentRepairSession", "org.apache.cassandra.service.ActiveRepairService$ParentRepairSession(java.net.InetAddress, java.util.List<org.apache.cassandra.db.ColumnFamilyStore>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, boolean, long, boolean)"], ["synchronized", "org.apache.cassandra.service.ActiveRepairService$ParentRepairSession.void markSSTablesRepairing(java.util.UUID, java.util.UUID)"], ["synchronized", "org.apache.cassandra.service.ActiveRepairService$ParentRepairSession.void maybeSnapshot(java.util.UUID, java.util.UUID)"], ["long", "org.apache.cassandra.service.ActiveRepairService$ParentRepairSession.getRepairedAt()"], ["java.lang.String", "org.apache.cassandra.service.ActiveRepairService$ParentRepairSession.toString()"], ["org.apache.cassandra.service.ActiveRepairService$Status[]", "org.apache.cassandra.service.ActiveRepairService$Status.values()"], ["org.apache.cassandra.service.ActiveRepairService$Status", "org.apache.cassandra.service.ActiveRepairService$Status.valueOf(java.lang.String)"], ["org.apache.cassandra.service.ActiveRepairService", "org.apache.cassandra.service.ActiveRepairService(org.apache.cassandra.gms.IFailureDetector, org.apache.cassandra.gms.Gossiper)"], ["org.apache.cassandra.repair.RepairSession", "org.apache.cassandra.service.ActiveRepairService.submitRepairSession(java.util.UUID, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.lang.String, org.apache.cassandra.repair.RepairParallelism, java.util.Set<java.net.InetAddress>, long, boolean, com.google.common.util.concurrent.ListeningExecutorService, java.lang.String...)"], ["synchronized", "org.apache.cassandra.service.ActiveRepairService.void terminateSessions()"], ["java.util.UUID", "org.apache.cassandra.service.ActiveRepairService.prepareForRepair(java.util.UUID, java.net.InetAddress, java.util.Set<java.net.InetAddress>, org.apache.cassandra.repair.messages.RepairOption, java.util.List<org.apache.cassandra.db.ColumnFamilyStore>)"], ["synchronized", "org.apache.cassandra.service.ActiveRepairService.void registerParentRepairSession(java.util.UUID, java.net.InetAddress, java.util.List<org.apache.cassandra.db.ColumnFamilyStore>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, boolean, long, boolean)"], ["synchronized", "org.apache.cassandra.service.ActiveRepairService.com.google.common.util.concurrent.ListenableFuture finishParentSession(java.util.UUID, java.util.Set<java.net.InetAddress>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["org.apache.cassandra.service.ActiveRepairService$ParentRepairSession", "org.apache.cassandra.service.ActiveRepairService.getParentRepairSession(java.util.UUID)"], ["synchronized", "org.apache.cassandra.service.ActiveRepairService.org.apache.cassandra.service.ActiveRepairService$ParentRepairSession removeParentRepairSession(java.util.UUID)"], ["void", "org.apache.cassandra.service.ActiveRepairService.handleMessage(java.net.InetAddress, org.apache.cassandra.repair.messages.RepairMessage)"], ["void", "org.apache.cassandra.service.ActiveRepairService.onJoin(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.ActiveRepairService.beforeChange(java.net.InetAddress, org.apache.cassandra.gms.EndpointState, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.service.ActiveRepairService.onChange(java.net.InetAddress, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.service.ActiveRepairService.onAlive(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.ActiveRepairService.onDead(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.ActiveRepairService.onRemove(java.net.InetAddress)"], ["void", "org.apache.cassandra.service.ActiveRepairService.onRestart(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.ActiveRepairService.convict(java.net.InetAddress, double)"], ["org.apache.cassandra.service.AsyncRepairCallback", "org.apache.cassandra.service.AsyncRepairCallback(org.apache.cassandra.service.DataResolver, int)"], ["void", "org.apache.cassandra.service.AsyncRepairCallback.response(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.ReadResponse>)"], ["boolean", "org.apache.cassandra.service.AsyncRepairCallback.isLatencyForSnitch()"], ["org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup", "org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup(int, org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanupCallback)"], ["void", "org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup.ackMutation()"], ["org.apache.cassandra.service.BatchlogResponseHandler", "org.apache.cassandra.service.BatchlogResponseHandler(org.apache.cassandra.service.AbstractWriteResponseHandler<T>, int, org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup, long)"], ["void", "org.apache.cassandra.service.BatchlogResponseHandler.response(org.apache.cassandra.net.MessageIn<T>)"], ["boolean", "org.apache.cassandra.service.BatchlogResponseHandler.isLatencyForSnitch()"], ["void", "org.apache.cassandra.service.BatchlogResponseHandler.onFailure(java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason)"], ["void", "org.apache.cassandra.service.BatchlogResponseHandler.assureSufficientLiveNodes()"], ["void", "org.apache.cassandra.service.BatchlogResponseHandler.get()"], ["org.apache.cassandra.service.CacheService$CacheType[]", "org.apache.cassandra.service.CacheService$CacheType.values()"], ["org.apache.cassandra.service.CacheService$CacheType", "org.apache.cassandra.service.CacheService$CacheType.valueOf(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.service.CacheService$CacheType.toString()"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.cache.CounterCacheKey, org.apache.cassandra.db.ClockAndCount>", "org.apache.cassandra.service.CacheService$CounterCacheSerializer$1.call()"], ["java.lang.Object", "org.apache.cassandra.service.CacheService$CounterCacheSerializer$1.call()"], ["org.apache.cassandra.service.CacheService$CounterCacheSerializer", "org.apache.cassandra.service.CacheService$CounterCacheSerializer()"], ["void", "org.apache.cassandra.service.CacheService$CounterCacheSerializer.serialize(org.apache.cassandra.cache.CounterCacheKey, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["java.util.concurrent.Future<org.apache.cassandra.utils.Pair<org.apache.cassandra.cache.CounterCacheKey, org.apache.cassandra.db.ClockAndCount>>", "org.apache.cassandra.service.CacheService$CounterCacheSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["void", "org.apache.cassandra.service.CacheService$CounterCacheSerializer.serialize(org.apache.cassandra.cache.CacheKey, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.service.CacheService$KeyCacheSerializer", "org.apache.cassandra.service.CacheService$KeyCacheSerializer()"], ["void", "org.apache.cassandra.service.CacheService$KeyCacheSerializer.serialize(org.apache.cassandra.cache.KeyCacheKey, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["java.util.concurrent.Future<org.apache.cassandra.utils.Pair<org.apache.cassandra.cache.KeyCacheKey, org.apache.cassandra.db.RowIndexEntry>>", "org.apache.cassandra.service.CacheService$KeyCacheSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["void", "org.apache.cassandra.service.CacheService$KeyCacheSerializer.serialize(org.apache.cassandra.cache.CacheKey, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry>", "org.apache.cassandra.service.CacheService$RowCacheSerializer$1.call()"], ["java.lang.Object", "org.apache.cassandra.service.CacheService$RowCacheSerializer$1.call()"], ["org.apache.cassandra.service.CacheService$RowCacheSerializer", "org.apache.cassandra.service.CacheService$RowCacheSerializer()"], ["void", "org.apache.cassandra.service.CacheService$RowCacheSerializer.serialize(org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["java.util.concurrent.Future<org.apache.cassandra.utils.Pair<org.apache.cassandra.cache.RowCacheKey, org.apache.cassandra.cache.IRowCacheEntry>>", "org.apache.cassandra.service.CacheService$RowCacheSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["void", "org.apache.cassandra.service.CacheService$RowCacheSerializer.serialize(org.apache.cassandra.cache.CacheKey, org.apache.cassandra.io.util.DataOutputPlus, org.apache.cassandra.db.ColumnFamilyStore)"], ["int", "org.apache.cassandra.service.CacheService.getRowCacheSavePeriodInSeconds()"], ["void", "org.apache.cassandra.service.CacheService.setRowCacheSavePeriodInSeconds(int)"], ["int", "org.apache.cassandra.service.CacheService.getKeyCacheSavePeriodInSeconds()"], ["void", "org.apache.cassandra.service.CacheService.setKeyCacheSavePeriodInSeconds(int)"], ["int", "org.apache.cassandra.service.CacheService.getCounterCacheSavePeriodInSeconds()"], ["void", "org.apache.cassandra.service.CacheService.setCounterCacheSavePeriodInSeconds(int)"], ["int", "org.apache.cassandra.service.CacheService.getRowCacheKeysToSave()"], ["void", "org.apache.cassandra.service.CacheService.setRowCacheKeysToSave(int)"], ["int", "org.apache.cassandra.service.CacheService.getKeyCacheKeysToSave()"], ["void", "org.apache.cassandra.service.CacheService.setKeyCacheKeysToSave(int)"], ["int", "org.apache.cassandra.service.CacheService.getCounterCacheKeysToSave()"], ["void", "org.apache.cassandra.service.CacheService.setCounterCacheKeysToSave(int)"], ["void", "org.apache.cassandra.service.CacheService.invalidateKeyCache()"], ["void", "org.apache.cassandra.service.CacheService.invalidateKeyCacheForCf(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>)"], ["void", "org.apache.cassandra.service.CacheService.invalidateRowCache()"], ["void", "org.apache.cassandra.service.CacheService.invalidateRowCacheForCf(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>)"], ["void", "org.apache.cassandra.service.CacheService.invalidateCounterCacheForCf(org.apache.cassandra.utils.Pair<java.lang.String, java.lang.String>)"], ["void", "org.apache.cassandra.service.CacheService.invalidateCounterCache()"], ["void", "org.apache.cassandra.service.CacheService.setRowCacheCapacityInMB(long)"], ["void", "org.apache.cassandra.service.CacheService.setKeyCacheCapacityInMB(long)"], ["void", "org.apache.cassandra.service.CacheService.setCounterCacheCapacityInMB(long)"], ["void", "org.apache.cassandra.service.CacheService.saveCaches()"], ["void", "org.apache.cassandra.service.CassandraDaemon$1.onMeterAdded(java.lang.String, com.codahale.metrics.Meter)"], ["void", "org.apache.cassandra.service.CassandraDaemon$2.uncaughtException(java.lang.Thread, java.lang.Throwable)"], ["boolean", "org.apache.cassandra.service.CassandraDaemon$NativeAccess.isAvailable()"], ["boolean", "org.apache.cassandra.service.CassandraDaemon$NativeAccess.isMemoryLockable()"], ["org.apache.cassandra.service.CassandraDaemon", "org.apache.cassandra.service.CassandraDaemon()"], ["org.apache.cassandra.service.CassandraDaemon", "org.apache.cassandra.service.CassandraDaemon(boolean)"], ["void", "org.apache.cassandra.service.CassandraDaemon.completeSetup()"], ["boolean", "org.apache.cassandra.service.CassandraDaemon.setupCompleted()"], ["void", "org.apache.cassandra.service.CassandraDaemon.init(java.lang.String[])"], ["void", "org.apache.cassandra.service.CassandraDaemon.start()"], ["void", "org.apache.cassandra.service.CassandraDaemon.stop()"], ["void", "org.apache.cassandra.service.CassandraDaemon.destroy()"], ["void", "org.apache.cassandra.service.CassandraDaemon.activate()"], ["void", "org.apache.cassandra.service.CassandraDaemon.applyConfig()"], ["void", "org.apache.cassandra.service.CassandraDaemon.startNativeTransport()"], ["void", "org.apache.cassandra.service.CassandraDaemon.stopNativeTransport()"], ["boolean", "org.apache.cassandra.service.CassandraDaemon.isNativeTransportRunning()"], ["void", "org.apache.cassandra.service.CassandraDaemon.deactivate()"], ["void", "org.apache.cassandra.service.CassandraDaemon.stop(java.lang.String[])"], ["void", "org.apache.cassandra.service.CassandraDaemon.main(java.lang.String[])"], ["org.apache.cassandra.service.ClientState", "org.apache.cassandra.service.ClientState.forInternalCalls()"], ["org.apache.cassandra.service.ClientState", "org.apache.cassandra.service.ClientState.forExternalCalls(java.net.SocketAddress)"], ["long", "org.apache.cassandra.service.ClientState.getTimestamp()"], ["long", "org.apache.cassandra.service.ClientState.getTimestampForPaxos(long)"], ["org.apache.cassandra.cql3.QueryHandler", "org.apache.cassandra.service.ClientState.getCQLQueryHandler()"], ["java.net.InetSocketAddress", "org.apache.cassandra.service.ClientState.getRemoteAddress()"], ["java.lang.String", "org.apache.cassandra.service.ClientState.getRawKeyspace()"], ["java.lang.String", "org.apache.cassandra.service.ClientState.getKeyspace()"], ["void", "org.apache.cassandra.service.ClientState.setKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.service.ClientState.setNoCompactMode()"], ["boolean", "org.apache.cassandra.service.ClientState.isNoCompactMode()"], ["void", "org.apache.cassandra.service.ClientState.login(org.apache.cassandra.auth.AuthenticatedUser)"], ["void", "org.apache.cassandra.service.ClientState.hasAllKeyspacesAccess(org.apache.cassandra.auth.Permission)"], ["void", "org.apache.cassandra.service.ClientState.hasKeyspaceAccess(java.lang.String, org.apache.cassandra.auth.Permission)"], ["void", "org.apache.cassandra.service.ClientState.hasColumnFamilyAccess(java.lang.String, java.lang.String, org.apache.cassandra.auth.Permission)"], ["void", "org.apache.cassandra.service.ClientState.hasColumnFamilyAccess(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.auth.Permission)"], ["void", "org.apache.cassandra.service.ClientState.ensureHasPermission(org.apache.cassandra.auth.Permission, org.apache.cassandra.auth.IResource)"], ["void", "org.apache.cassandra.service.ClientState.ensureHasPermission(org.apache.cassandra.auth.Permission, org.apache.cassandra.cql3.functions.Function)"], ["void", "org.apache.cassandra.service.ClientState.validateLogin()"], ["void", "org.apache.cassandra.service.ClientState.ensureNotAnonymous()"], ["void", "org.apache.cassandra.service.ClientState.ensureIsSuper(java.lang.String)"], ["org.apache.cassandra.auth.AuthenticatedUser", "org.apache.cassandra.service.ClientState.getUser()"], ["org.apache.cassandra.utils.CassandraVersion[]", "org.apache.cassandra.service.ClientState.getCQLSupportedVersion()"], ["org.apache.cassandra.service.ClientWarn$State", "org.apache.cassandra.service.ClientWarn$State()"], ["org.apache.cassandra.service.ClientWarn$State", "org.apache.cassandra.service.ClientWarn.get()"], ["void", "org.apache.cassandra.service.ClientWarn.set(org.apache.cassandra.service.ClientWarn$State)"], ["void", "org.apache.cassandra.service.ClientWarn.warn(java.lang.String)"], ["void", "org.apache.cassandra.service.ClientWarn.captureWarnings()"], ["void", "org.apache.cassandra.service.ClientWarn.resetWarnings()"], ["void", "org.apache.cassandra.service.ClientWarn.set(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.service.ClientWarn.get()"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1.onPrimaryKeyLivenessInfo(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.db.LivenessInfo)"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1.onDeletion(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row$Deletion, org.apache.cassandra.db.rows.Row$Deletion)"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1.onComplexDeletion(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.config.ColumnDefinition, org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime)"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1.onCell(int, org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Cell, org.apache.cassandra.db.rows.Cell)"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener.onMergedPartitionLevelDeletion(org.apache.cassandra.db.DeletionTime, org.apache.cassandra.db.DeletionTime[])"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener.onMergedRows(org.apache.cassandra.db.rows.Row, org.apache.cassandra.db.rows.Row[])"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener.onMergedRangeTombstoneMarkers(org.apache.cassandra.db.rows.RangeTombstoneMarker, org.apache.cassandra.db.rows.RangeTombstoneMarker[])"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener.close()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener", "org.apache.cassandra.service.DataResolver$RepairMergeListener.getRowMergeListener(org.apache.cassandra.db.DecoratedKey, java.util.List<org.apache.cassandra.db.rows.UnfilteredRowIterator>)"], ["void", "org.apache.cassandra.service.DataResolver$RepairMergeListener.close()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection.moreContents()"], ["java.lang.Object", "org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection.moreContents()"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection.moreContents()"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["java.lang.Object", "org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection.moreContents()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.DataResolver.getData()"], ["boolean", "org.apache.cassandra.service.DataResolver.isDataPresent()"], ["void", "org.apache.cassandra.service.DataResolver.compareResponses()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.DataResolver.resolve()"], ["org.apache.cassandra.service.DatacenterSyncWriteResponseHandler", "org.apache.cassandra.service.DatacenterSyncWriteResponseHandler(java.util.Collection<java.net.InetAddress>, java.util.Collection<java.net.InetAddress>, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.db.Keyspace, java.lang.Runnable, org.apache.cassandra.db.WriteType, long)"], ["void", "org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.response(org.apache.cassandra.net.MessageIn<T>)"], ["boolean", "org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.isLatencyForSnitch()"], ["org.apache.cassandra.service.DatacenterWriteResponseHandler", "org.apache.cassandra.service.DatacenterWriteResponseHandler(java.util.Collection<java.net.InetAddress>, java.util.Collection<java.net.InetAddress>, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.db.Keyspace, java.lang.Runnable, org.apache.cassandra.db.WriteType, long)"], ["void", "org.apache.cassandra.service.DatacenterWriteResponseHandler.response(org.apache.cassandra.net.MessageIn<T>)"], ["org.apache.cassandra.service.DefaultFSErrorHandler", "org.apache.cassandra.service.DefaultFSErrorHandler()"], ["void", "org.apache.cassandra.service.DefaultFSErrorHandler.handleCorruptSSTable(org.apache.cassandra.io.sstable.CorruptSSTableException)"], ["void", "org.apache.cassandra.service.DefaultFSErrorHandler.handleFSError(org.apache.cassandra.io.FSError)"], ["org.apache.cassandra.service.DigestMismatchException", "org.apache.cassandra.service.DigestMismatchException(org.apache.cassandra.db.DecoratedKey, java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["org.apache.cassandra.service.DigestResolver", "org.apache.cassandra.service.DigestResolver(org.apache.cassandra.db.Keyspace, org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.ConsistencyLevel, int)"], ["void", "org.apache.cassandra.service.DigestResolver.preprocess(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.ReadResponse>)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.DigestResolver.getData()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.DigestResolver.resolve()"], ["void", "org.apache.cassandra.service.DigestResolver.compareResponses()"], ["boolean", "org.apache.cassandra.service.DigestResolver.isDataPresent()"], ["org.apache.cassandra.service.EchoVerbHandler", "org.apache.cassandra.service.EchoVerbHandler()"], ["void", "org.apache.cassandra.service.EchoVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.gms.EchoMessage>, int)"], ["org.apache.cassandra.service.EmbeddedCassandraService", "org.apache.cassandra.service.EmbeddedCassandraService()"], ["void", "org.apache.cassandra.service.EmbeddedCassandraService.start()"], ["org.apache.cassandra.service.GCInspector", "org.apache.cassandra.service.GCInspector()"], ["void", "org.apache.cassandra.service.GCInspector.register()"], ["void", "org.apache.cassandra.service.GCInspector.handleNotification(javax.management.Notification, java.lang.Object)"], ["org.apache.cassandra.service.GCInspector$State", "org.apache.cassandra.service.GCInspector.getTotalSinceLastCheck()"], ["double[]", "org.apache.cassandra.service.GCInspector.getAndResetStats()"], ["void", "org.apache.cassandra.service.LoadBroadcaster$1.run()"], ["void", "org.apache.cassandra.service.LoadBroadcaster.onChange(java.net.InetAddress, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.service.LoadBroadcaster.onJoin(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.LoadBroadcaster.beforeChange(java.net.InetAddress, org.apache.cassandra.gms.EndpointState, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.service.LoadBroadcaster.onAlive(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.LoadBroadcaster.onDead(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.LoadBroadcaster.onRestart(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.LoadBroadcaster.onRemove(java.net.InetAddress)"], ["java.util.Map<java.net.InetAddress, java.lang.Double>", "org.apache.cassandra.service.LoadBroadcaster.getLoadInfo()"], ["void", "org.apache.cassandra.service.LoadBroadcaster.startBroadcasting()"], ["org.apache.cassandra.service.MigrationListener", "org.apache.cassandra.service.MigrationListener()"], ["void", "org.apache.cassandra.service.MigrationListener.onCreateKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onCreateColumnFamily(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onCreateView(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onCreateUserType(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onCreateFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.service.MigrationListener.onCreateAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.service.MigrationListener.onUpdateKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onUpdateColumnFamily(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.service.MigrationListener.onUpdateView(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.service.MigrationListener.onUpdateUserType(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onUpdateFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.service.MigrationListener.onUpdateAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.service.MigrationListener.onDropKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onDropColumnFamily(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onDropView(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onDropUserType(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationListener.onDropFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.service.MigrationListener.onDropAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.service.MigrationManager$MigrationsSerializer", "org.apache.cassandra.service.MigrationManager$MigrationsSerializer()"], ["void", "org.apache.cassandra.service.MigrationManager$MigrationsSerializer.serialize(java.util.Collection<org.apache.cassandra.db.Mutation>, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["long", "org.apache.cassandra.service.MigrationManager$MigrationsSerializer.serializedSize(java.util.Collection<org.apache.cassandra.db.Mutation>, int)"], ["long", "org.apache.cassandra.service.MigrationManager$MigrationsSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.service.MigrationManager$MigrationsSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.service.MigrationManager$MigrationsSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["void", "org.apache.cassandra.service.MigrationManager.register(org.apache.cassandra.service.MigrationListener)"], ["void", "org.apache.cassandra.service.MigrationManager.unregister(org.apache.cassandra.service.MigrationListener)"], ["void", "org.apache.cassandra.service.MigrationManager.scheduleSchemaPull(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["boolean", "org.apache.cassandra.service.MigrationManager.shouldPullSchemaFrom(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.service.MigrationManager.isReadyForBootstrap()"], ["void", "org.apache.cassandra.service.MigrationManager.waitUntilReadyForBootstrap()"], ["void", "org.apache.cassandra.service.MigrationManager.notifyCreateKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyCreateColumnFamily(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyCreateView(org.apache.cassandra.config.ViewDefinition)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyCreateUserType(org.apache.cassandra.db.marshal.UserType)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyCreateFunction(org.apache.cassandra.cql3.functions.UDFunction)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyCreateAggregate(org.apache.cassandra.cql3.functions.UDAggregate)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyUpdateKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyUpdateColumnFamily(org.apache.cassandra.config.CFMetaData, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyUpdateView(org.apache.cassandra.config.ViewDefinition, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyUpdateUserType(org.apache.cassandra.db.marshal.UserType)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyUpdateFunction(org.apache.cassandra.cql3.functions.UDFunction)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyUpdateAggregate(org.apache.cassandra.cql3.functions.UDAggregate)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyDropKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyDropColumnFamily(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyDropView(org.apache.cassandra.config.ViewDefinition)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyDropUserType(org.apache.cassandra.db.marshal.UserType)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyDropFunction(org.apache.cassandra.cql3.functions.UDFunction)"], ["void", "org.apache.cassandra.service.MigrationManager.notifyDropAggregate(org.apache.cassandra.cql3.functions.UDAggregate)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewKeyspace(org.apache.cassandra.schema.KeyspaceMetadata, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewKeyspace(org.apache.cassandra.schema.KeyspaceMetadata, long, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(org.apache.cassandra.config.CFMetaData, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.forceAnnounceNewColumnFamily(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewView(org.apache.cassandra.config.ViewDefinition, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewType(org.apache.cassandra.db.marshal.UserType, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewFunction(org.apache.cassandra.cql3.functions.UDFunction, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceNewAggregate(org.apache.cassandra.cql3.functions.UDAggregate, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceKeyspaceUpdate(org.apache.cassandra.schema.KeyspaceMetadata)"], ["void", "org.apache.cassandra.service.MigrationManager.announceKeyspaceUpdate(org.apache.cassandra.schema.KeyspaceMetadata, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceColumnFamilyUpdate(org.apache.cassandra.config.CFMetaData)"], ["void", "org.apache.cassandra.service.MigrationManager.announceColumnFamilyUpdate(org.apache.cassandra.config.CFMetaData, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceColumnFamilyUpdate(org.apache.cassandra.config.CFMetaData, java.util.Collection<org.apache.cassandra.config.ViewDefinition>, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceViewUpdate(org.apache.cassandra.config.ViewDefinition, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceTypeUpdate(org.apache.cassandra.db.marshal.UserType, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceKeyspaceDrop(java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationManager.announceKeyspaceDrop(java.lang.String, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceColumnFamilyDrop(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.MigrationManager.announceColumnFamilyDrop(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceViewDrop(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceTypeDrop(org.apache.cassandra.db.marshal.UserType)"], ["void", "org.apache.cassandra.service.MigrationManager.announceTypeDrop(org.apache.cassandra.db.marshal.UserType, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceFunctionDrop(org.apache.cassandra.cql3.functions.UDFunction, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.announceAggregateDrop(org.apache.cassandra.cql3.functions.UDAggregate, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.passiveAnnounce(java.util.UUID, boolean)"], ["void", "org.apache.cassandra.service.MigrationManager.resetLocalSchema()"], ["void", "org.apache.cassandra.service.MigrationTask$1.response(org.apache.cassandra.net.MessageIn<java.util.Collection<org.apache.cassandra.db.Mutation>>)"], ["boolean", "org.apache.cassandra.service.MigrationTask$1.isLatencyForSnitch()"], ["void", "org.apache.cassandra.service.MigrationTask.runMayThrow()"], ["org.apache.cassandra.service.NativeTransportService", "org.apache.cassandra.service.NativeTransportService()"], ["void", "org.apache.cassandra.service.NativeTransportService.start()"], ["void", "org.apache.cassandra.service.NativeTransportService.stop()"], ["void", "org.apache.cassandra.service.NativeTransportService.destroy()"], ["boolean", "org.apache.cassandra.service.NativeTransportService.useEpoll()"], ["boolean", "org.apache.cassandra.service.NativeTransportService.isRunning()"], ["void", "org.apache.cassandra.service.PendingRangeCalculatorService$1.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)"], ["void", "org.apache.cassandra.service.PendingRangeCalculatorService$PendingRangeTask.run()"], ["org.apache.cassandra.service.PendingRangeCalculatorService", "org.apache.cassandra.service.PendingRangeCalculatorService()"], ["void", "org.apache.cassandra.service.PendingRangeCalculatorService.update()"], ["void", "org.apache.cassandra.service.PendingRangeCalculatorService.blockUntilFinished()"], ["void", "org.apache.cassandra.service.PendingRangeCalculatorService.calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy, java.lang.String)"], ["void", "org.apache.cassandra.service.PendingRangeCalculatorService.shutdownExecutor()"], ["org.apache.cassandra.service.QueryState", "org.apache.cassandra.service.QueryState(org.apache.cassandra.service.ClientState)"], ["org.apache.cassandra.service.QueryState", "org.apache.cassandra.service.QueryState.forInternalCalls()"], ["org.apache.cassandra.service.ClientState", "org.apache.cassandra.service.QueryState.getClientState()"], ["long", "org.apache.cassandra.service.QueryState.getTimestamp()"], ["boolean", "org.apache.cassandra.service.QueryState.traceNextQuery()"], ["void", "org.apache.cassandra.service.QueryState.prepareTracingSession(java.util.UUID)"], ["void", "org.apache.cassandra.service.QueryState.createTracingSession(java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["java.net.InetAddress", "org.apache.cassandra.service.QueryState.getClientAddress()"], ["org.apache.cassandra.service.ReadCallback$AsyncRepairRunner", "org.apache.cassandra.service.ReadCallback$AsyncRepairRunner(org.apache.cassandra.service.ReadCallback, org.apache.cassandra.tracing.TraceState, long)"], ["void", "org.apache.cassandra.service.ReadCallback$AsyncRepairRunner.run()"], ["org.apache.cassandra.service.ReadCallback", "org.apache.cassandra.service.ReadCallback(org.apache.cassandra.service.ResponseResolver, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.db.ReadCommand, java.util.List<java.net.InetAddress>, long)"], ["org.apache.cassandra.service.ReadCallback", "org.apache.cassandra.service.ReadCallback(org.apache.cassandra.service.ResponseResolver, org.apache.cassandra.db.ConsistencyLevel, int, org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.Keyspace, java.util.List<java.net.InetAddress>, long)"], ["boolean", "org.apache.cassandra.service.ReadCallback.await(long, java.util.concurrent.TimeUnit)"], ["void", "org.apache.cassandra.service.ReadCallback.awaitResults()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.ReadCallback.get()"], ["int", "org.apache.cassandra.service.ReadCallback.blockFor()"], ["void", "org.apache.cassandra.service.ReadCallback.response(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.ReadResponse>)"], ["int", "org.apache.cassandra.service.ReadCallback.getReceivedCount()"], ["void", "org.apache.cassandra.service.ReadCallback.response(org.apache.cassandra.db.ReadResponse)"], ["void", "org.apache.cassandra.service.ReadCallback.assureSufficientLiveNodes()"], ["boolean", "org.apache.cassandra.service.ReadCallback.isLatencyForSnitch()"], ["void", "org.apache.cassandra.service.ReadCallback.onFailure(java.net.InetAddress, org.apache.cassandra.exceptions.RequestFailureReason)"], ["org.apache.cassandra.service.ResponseResolver", "org.apache.cassandra.service.ResponseResolver(org.apache.cassandra.db.Keyspace, org.apache.cassandra.db.ReadCommand, org.apache.cassandra.db.ConsistencyLevel, int)"], ["void", "org.apache.cassandra.service.ResponseResolver.preprocess(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.ReadResponse>)"], ["org.apache.cassandra.service.SnapshotVerbHandler", "org.apache.cassandra.service.SnapshotVerbHandler()"], ["void", "org.apache.cassandra.service.SnapshotVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.SnapshotCommand>, int)"], ["void", "org.apache.cassandra.service.StartupChecks$1.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$10.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$11.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$12.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$2.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$3.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$4.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$5.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$6.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$7.execute()"], ["void", "org.apache.cassandra.service.StartupChecks$8.execute()"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.service.StartupChecks$9$1.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.service.StartupChecks$9$1.preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.service.StartupChecks$9$1.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.service.StartupChecks$9$1.preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["void", "org.apache.cassandra.service.StartupChecks$9.execute()"], ["org.apache.cassandra.service.StartupChecks", "org.apache.cassandra.service.StartupChecks()"], ["org.apache.cassandra.service.StartupChecks", "org.apache.cassandra.service.StartupChecks.withDefaultTests()"], ["org.apache.cassandra.service.StartupChecks", "org.apache.cassandra.service.StartupChecks.withTest(org.apache.cassandra.service.StartupCheck)"], ["void", "org.apache.cassandra.service.StartupChecks.verify()"], ["java.util.concurrent.atomic.AtomicInteger", "org.apache.cassandra.service.StorageProxy$1.load(java.net.InetAddress)"], ["java.lang.Object", "org.apache.cassandra.service.StorageProxy$1.load(java.lang.Object)"], ["void", "org.apache.cassandra.service.StorageProxy$10.response(org.apache.cassandra.net.MessageIn<java.util.UUID>)"], ["boolean", "org.apache.cassandra.service.StorageProxy$10.isLatencyForSnitch()"], ["void", "org.apache.cassandra.service.StorageProxy$11.runMayThrow()"], ["void", "org.apache.cassandra.service.StorageProxy$2.apply(org.apache.cassandra.db.IMutation, java.lang.Iterable<java.net.InetAddress>, org.apache.cassandra.service.AbstractWriteResponseHandler<org.apache.cassandra.db.IMutation>, java.lang.String, org.apache.cassandra.db.ConsistencyLevel)"], ["void", "org.apache.cassandra.service.StorageProxy$3.apply(org.apache.cassandra.db.IMutation, java.lang.Iterable<java.net.InetAddress>, org.apache.cassandra.service.AbstractWriteResponseHandler<org.apache.cassandra.db.IMutation>, java.lang.String, org.apache.cassandra.db.ConsistencyLevel)"], ["void", "org.apache.cassandra.service.StorageProxy$4.apply(org.apache.cassandra.db.IMutation, java.lang.Iterable<java.net.InetAddress>, org.apache.cassandra.service.AbstractWriteResponseHandler<org.apache.cassandra.db.IMutation>, java.lang.String, org.apache.cassandra.db.ConsistencyLevel)"], ["boolean", "org.apache.cassandra.service.StorageProxy$5.apply(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.service.StorageProxy$5.apply(java.lang.Object)"], ["void", "org.apache.cassandra.service.StorageProxy$6.runMayThrow()"], ["void", "org.apache.cassandra.service.StorageProxy$7.runMayThrow()"], ["void", "org.apache.cassandra.service.StorageProxy$8.runMayThrow()"], ["void", "org.apache.cassandra.service.StorageProxy$9.runMayThrow()"], ["org.apache.cassandra.service.StorageProxy$DroppableRunnable", "org.apache.cassandra.service.StorageProxy$DroppableRunnable(org.apache.cassandra.net.MessagingService$Verb)"], ["void", "org.apache.cassandra.service.StorageProxy$DroppableRunnable.run()"], ["void", "org.apache.cassandra.service.StorageProxy$HintRunnable.run()"], ["org.apache.cassandra.service.StorageProxy$LocalMutationRunnable", "org.apache.cassandra.service.StorageProxy$LocalMutationRunnable(java.util.Optional<org.apache.cassandra.db.IMutation>)"], ["org.apache.cassandra.service.StorageProxy$LocalMutationRunnable", "org.apache.cassandra.service.StorageProxy$LocalMutationRunnable()"], ["void", "org.apache.cassandra.service.StorageProxy$LocalMutationRunnable.run()"], ["org.apache.cassandra.service.StorageProxy$RangeCommandIterator", "org.apache.cassandra.service.StorageProxy$RangeCommandIterator(org.apache.cassandra.service.StorageProxy$RangeIterator, org.apache.cassandra.db.PartitionRangeReadCommand, int, org.apache.cassandra.db.Keyspace, org.apache.cassandra.db.ConsistencyLevel, long)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.service.StorageProxy$RangeCommandIterator.computeNext()"], ["void", "org.apache.cassandra.service.StorageProxy$RangeCommandIterator.close()"], ["java.lang.Object", "org.apache.cassandra.service.StorageProxy$RangeCommandIterator.computeNext()"], ["org.apache.cassandra.service.StorageProxy$RangeForQuery", "org.apache.cassandra.service.StorageProxy$RangeForQuery(org.apache.cassandra.dht.AbstractBounds<org.apache.cassandra.db.PartitionPosition>, java.util.List<java.net.InetAddress>, java.util.List<java.net.InetAddress>)"], ["org.apache.cassandra.service.StorageProxy$RangeIterator", "org.apache.cassandra.service.StorageProxy$RangeIterator(org.apache.cassandra.db.PartitionRangeReadCommand, org.apache.cassandra.db.Keyspace, org.apache.cassandra.db.ConsistencyLevel)"], ["int", "org.apache.cassandra.service.StorageProxy$RangeIterator.rangeCount()"], ["void", "org.apache.cassandra.service.StorageProxy$SingleRangeResponse.close()"], ["org.apache.cassandra.service.StorageProxy$ViewWriteMetricsWrapped", "org.apache.cassandra.service.StorageProxy$ViewWriteMetricsWrapped(org.apache.cassandra.service.AbstractWriteResponseHandler<org.apache.cassandra.db.IMutation>, int, org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup, long)"], ["void", "org.apache.cassandra.service.StorageProxy$ViewWriteMetricsWrapped.response(org.apache.cassandra.net.MessageIn<org.apache.cassandra.db.IMutation>)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.service.StorageProxy.cas(java.lang.String, java.lang.String, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.service.CASRequest, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["void", "org.apache.cassandra.service.StorageProxy.mutate(java.util.Collection<? extends org.apache.cassandra.db.IMutation>, org.apache.cassandra.db.ConsistencyLevel, long)"], ["boolean", "org.apache.cassandra.service.StorageProxy.appliesLocally(org.apache.cassandra.db.Mutation)"], ["void", "org.apache.cassandra.service.StorageProxy.mutateMV(java.nio.ByteBuffer, java.util.Collection<org.apache.cassandra.db.Mutation>, boolean, java.util.concurrent.atomic.AtomicLong, long)"], ["void", "org.apache.cassandra.service.StorageProxy.mutateWithTriggers(java.util.Collection<? extends org.apache.cassandra.db.IMutation>, org.apache.cassandra.db.ConsistencyLevel, boolean, long)"], ["void", "org.apache.cassandra.service.StorageProxy.mutateAtomically(java.util.Collection<org.apache.cassandra.db.Mutation>, org.apache.cassandra.db.ConsistencyLevel, boolean, long)"], ["boolean", "org.apache.cassandra.service.StorageProxy.canDoLocalRequest(java.net.InetAddress)"], ["void", "org.apache.cassandra.service.StorageProxy.sendToHintedEndpoints(org.apache.cassandra.db.Mutation, java.lang.Iterable<java.net.InetAddress>, org.apache.cassandra.service.AbstractWriteResponseHandler<org.apache.cassandra.db.IMutation>, java.lang.String, org.apache.cassandra.concurrent.Stage)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.service.StorageProxy.readOne(org.apache.cassandra.db.SinglePartitionReadCommand, org.apache.cassandra.db.ConsistencyLevel, long)"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.service.StorageProxy.readOne(org.apache.cassandra.db.SinglePartitionReadCommand, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.StorageProxy.read(org.apache.cassandra.db.SinglePartitionReadCommand$Group, org.apache.cassandra.db.ConsistencyLevel, long)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.StorageProxy.read(org.apache.cassandra.db.SinglePartitionReadCommand$Group, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.StorageProxy.getRangeSlice(org.apache.cassandra.db.PartitionRangeReadCommand, org.apache.cassandra.db.ConsistencyLevel, long)"], ["java.util.Map<java.lang.String, java.util.List<java.lang.String>>", "org.apache.cassandra.service.StorageProxy.getSchemaVersions()"], ["java.util.Map<java.lang.String, java.util.List<java.lang.String>>", "org.apache.cassandra.service.StorageProxy.describeSchemaVersions()"], ["boolean", "org.apache.cassandra.service.StorageProxy.getHintedHandoffEnabled()"], ["void", "org.apache.cassandra.service.StorageProxy.setHintedHandoffEnabled(boolean)"], ["void", "org.apache.cassandra.service.StorageProxy.enableHintsForDC(java.lang.String)"], ["void", "org.apache.cassandra.service.StorageProxy.disableHintsForDC(java.lang.String)"], ["int", "org.apache.cassandra.service.StorageProxy.getMaxHintWindow()"], ["void", "org.apache.cassandra.service.StorageProxy.setMaxHintWindow(int)"], ["boolean", "org.apache.cassandra.service.StorageProxy.shouldHint(java.net.InetAddress)"], ["void", "org.apache.cassandra.service.StorageProxy.truncateBlocking(java.lang.String, java.lang.String)"], ["long", "org.apache.cassandra.service.StorageProxy.getTotalHints()"], ["int", "org.apache.cassandra.service.StorageProxy.getMaxHintsInProgress()"], ["void", "org.apache.cassandra.service.StorageProxy.setMaxHintsInProgress(int)"], ["int", "org.apache.cassandra.service.StorageProxy.getHintsInProgress()"], ["void", "org.apache.cassandra.service.StorageProxy.verifyNoHintsInProgress()"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageProxy.setRpcTimeout(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getReadRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageProxy.setReadRpcTimeout(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getWriteRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageProxy.setWriteRpcTimeout(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getCounterWriteRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageProxy.setCounterWriteRpcTimeout(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getCasContentionTimeout()"], ["void", "org.apache.cassandra.service.StorageProxy.setCasContentionTimeout(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getRangeRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageProxy.setRangeRpcTimeout(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getTruncateRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageProxy.setTruncateRpcTimeout(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getNativeTransportMaxConcurrentConnections()"], ["void", "org.apache.cassandra.service.StorageProxy.setNativeTransportMaxConcurrentConnections(java.lang.Long)"], ["java.lang.Long", "org.apache.cassandra.service.StorageProxy.getNativeTransportMaxConcurrentConnectionsPerIp()"], ["void", "org.apache.cassandra.service.StorageProxy.setNativeTransportMaxConcurrentConnectionsPerIp(java.lang.Long)"], ["void", "org.apache.cassandra.service.StorageProxy.reloadTriggerClasses()"], ["long", "org.apache.cassandra.service.StorageProxy.getReadRepairAttempted()"], ["long", "org.apache.cassandra.service.StorageProxy.getReadRepairRepairedBlocking()"], ["long", "org.apache.cassandra.service.StorageProxy.getReadRepairRepairedBackground()"], ["int", "org.apache.cassandra.service.StorageProxy.getNumberOfTables()"], ["int", "org.apache.cassandra.service.StorageProxy.getOtcBacklogExpirationInterval()"], ["void", "org.apache.cassandra.service.StorageProxy.setOtcBacklogExpirationInterval(int)"], ["void", "org.apache.cassandra.service.StorageService$1.runMayThrow()"], ["void", "org.apache.cassandra.service.StorageService$2.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.service.StorageService$2.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.service.StorageService$2.onSuccess(java.lang.Object)"], ["void", "org.apache.cassandra.service.StorageService$3.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.service.StorageService$3.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.service.StorageService$3.onSuccess(java.lang.Object)"], ["boolean", "org.apache.cassandra.service.StorageService$4.apply(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.service.StorageService$4.apply(java.lang.Object)"], ["void", "org.apache.cassandra.service.StorageService$5.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.service.StorageService$5.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.service.StorageService$5.onSuccess(java.lang.Object)"], ["void", "org.apache.cassandra.service.StorageService$6.run()"], ["void", "org.apache.cassandra.service.StorageService$7.init(java.lang.String)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.service.StorageService$7.getTableMetadata(java.lang.String)"], ["org.apache.cassandra.service.StorageService$Mode[]", "org.apache.cassandra.service.StorageService$Mode.values()"], ["org.apache.cassandra.service.StorageService$Mode", "org.apache.cassandra.service.StorageService$Mode.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.service.StorageService$RangeRelocator.streamsNeeded()"], ["boolean", "org.apache.cassandra.service.StorageService.isInShutdownHook()"], ["boolean", "org.apache.cassandra.service.StorageService.isShutdown()"], ["boolean", "org.apache.cassandra.service.StorageService.isSurveyMode()"], ["boolean", "org.apache.cassandra.service.StorageService.hasJoined()"], ["void", "org.apache.cassandra.service.StorageService.setTokens(java.util.Collection<org.apache.cassandra.dht.Token>)"], ["void", "org.apache.cassandra.service.StorageService.setGossipTokens(java.util.Collection<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.service.StorageService", "org.apache.cassandra.service.StorageService()"], ["void", "org.apache.cassandra.service.StorageService.registerDaemon(org.apache.cassandra.service.CassandraDaemon)"], ["void", "org.apache.cassandra.service.StorageService.register(org.apache.cassandra.service.IEndpointLifecycleSubscriber)"], ["void", "org.apache.cassandra.service.StorageService.unregister(org.apache.cassandra.service.IEndpointLifecycleSubscriber)"], ["void", "org.apache.cassandra.service.StorageService.stopGossiping()"], ["synchronized", "org.apache.cassandra.service.StorageService.void startGossiping()"], ["boolean", "org.apache.cassandra.service.StorageService.isGossipRunning()"], ["synchronized", "org.apache.cassandra.service.StorageService.void startRPCServer()"], ["void", "org.apache.cassandra.service.StorageService.stopRPCServer()"], ["boolean", "org.apache.cassandra.service.StorageService.isRPCServerRunning()"], ["synchronized", "org.apache.cassandra.service.StorageService.void startNativeTransport()"], ["void", "org.apache.cassandra.service.StorageService.stopNativeTransport()"], ["boolean", "org.apache.cassandra.service.StorageService.isNativeTransportRunning()"], ["void", "org.apache.cassandra.service.StorageService.stopTransports()"], ["void", "org.apache.cassandra.service.StorageService.stopClient()"], ["boolean", "org.apache.cassandra.service.StorageService.isInitialized()"], ["boolean", "org.apache.cassandra.service.StorageService.isGossipActive()"], ["boolean", "org.apache.cassandra.service.StorageService.isDaemonSetupCompleted()"], ["void", "org.apache.cassandra.service.StorageService.stopDaemon()"], ["void", "org.apache.cassandra.service.StorageService.unsafeInitialize()"], ["void", "org.apache.cassandra.service.StorageService.populateTokenMetadata()"], ["synchronized", "org.apache.cassandra.service.StorageService.void initServer()"], ["synchronized", "org.apache.cassandra.service.StorageService.void initServer(int)"], ["void", "org.apache.cassandra.service.StorageService.removeShutdownHook()"], ["boolean", "org.apache.cassandra.service.StorageService.isSeed()"], ["void", "org.apache.cassandra.service.StorageService.waitForSchema(int)"], ["boolean", "org.apache.cassandra.service.StorageService.isReplacingSameAddress()"], ["void", "org.apache.cassandra.service.StorageService.gossipSnitchInfo()"], ["void", "org.apache.cassandra.service.StorageService.joinRing()"], ["boolean", "org.apache.cassandra.service.StorageService.isAuthSetupComplete()"], ["boolean", "org.apache.cassandra.service.StorageService.isJoined()"], ["void", "org.apache.cassandra.service.StorageService.rebuild(java.lang.String)"], ["void", "org.apache.cassandra.service.StorageService.rebuild(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.StorageService.setRpcTimeout(long)"], ["long", "org.apache.cassandra.service.StorageService.getRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageService.setReadRpcTimeout(long)"], ["long", "org.apache.cassandra.service.StorageService.getReadRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageService.setRangeRpcTimeout(long)"], ["long", "org.apache.cassandra.service.StorageService.getRangeRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageService.setWriteRpcTimeout(long)"], ["long", "org.apache.cassandra.service.StorageService.getWriteRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageService.setCounterWriteRpcTimeout(long)"], ["long", "org.apache.cassandra.service.StorageService.getCounterWriteRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageService.setCasContentionTimeout(long)"], ["long", "org.apache.cassandra.service.StorageService.getCasContentionTimeout()"], ["void", "org.apache.cassandra.service.StorageService.setTruncateRpcTimeout(long)"], ["long", "org.apache.cassandra.service.StorageService.getTruncateRpcTimeout()"], ["void", "org.apache.cassandra.service.StorageService.setStreamingSocketTimeout(int)"], ["int", "org.apache.cassandra.service.StorageService.getStreamingSocketTimeout()"], ["void", "org.apache.cassandra.service.StorageService.setStreamThroughputMbPerSec(int)"], ["int", "org.apache.cassandra.service.StorageService.getStreamThroughputMbPerSec()"], ["void", "org.apache.cassandra.service.StorageService.setInterDCStreamThroughputMbPerSec(int)"], ["int", "org.apache.cassandra.service.StorageService.getInterDCStreamThroughputMbPerSec()"], ["int", "org.apache.cassandra.service.StorageService.getCompactionThroughputMbPerSec()"], ["void", "org.apache.cassandra.service.StorageService.setCompactionThroughputMbPerSec(int)"], ["int", "org.apache.cassandra.service.StorageService.getConcurrentCompactors()"], ["void", "org.apache.cassandra.service.StorageService.setConcurrentCompactors(int)"], ["boolean", "org.apache.cassandra.service.StorageService.isIncrementalBackupsEnabled()"], ["void", "org.apache.cassandra.service.StorageService.setIncrementalBackupsEnabled(boolean)"], ["boolean", "org.apache.cassandra.service.StorageService.resumeBootstrap()"], ["boolean", "org.apache.cassandra.service.StorageService.isBootstrapMode()"], ["org.apache.cassandra.locator.TokenMetadata", "org.apache.cassandra.service.StorageService.getTokenMetadata()"], ["java.util.Map<java.util.List<java.lang.String>, java.util.List<java.lang.String>>", "org.apache.cassandra.service.StorageService.getRangeToEndpointMap(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getRpcaddress(java.net.InetAddress)"], ["java.util.Map<java.util.List<java.lang.String>, java.util.List<java.lang.String>>", "org.apache.cassandra.service.StorageService.getRangeToRpcaddressMap(java.lang.String)"], ["java.util.Map<java.util.List<java.lang.String>, java.util.List<java.lang.String>>", "org.apache.cassandra.service.StorageService.getPendingRangeToEndpointMap(java.lang.String)"], ["java.util.Map<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, java.util.List<java.net.InetAddress>>", "org.apache.cassandra.service.StorageService.getRangeToAddressMap(java.lang.String)"], ["java.util.Map<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, java.util.List<java.net.InetAddress>>", "org.apache.cassandra.service.StorageService.getRangeToAddressMapInLocalDC(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.service.StorageService.getTokenToEndpointMap()"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getLocalHostId()"], ["java.util.UUID", "org.apache.cassandra.service.StorageService.getLocalHostUUID()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.service.StorageService.getHostIdMap()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.service.StorageService.getEndpointToHostId()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.service.StorageService.getHostIdToEndpoint()"], ["void", "org.apache.cassandra.service.StorageService.beforeChange(java.net.InetAddress, org.apache.cassandra.gms.EndpointState, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.service.StorageService.onChange(java.net.InetAddress, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.service.StorageService.updateTopology(java.net.InetAddress)"], ["void", "org.apache.cassandra.service.StorageService.updateTopology()"], ["boolean", "org.apache.cassandra.service.StorageService.isRpcReady(java.net.InetAddress)"], ["void", "org.apache.cassandra.service.StorageService.setRpcReady(boolean)"], ["void", "org.apache.cassandra.service.StorageService.onJoin(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.StorageService.onAlive(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.StorageService.onRemove(java.net.InetAddress)"], ["void", "org.apache.cassandra.service.StorageService.onDead(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.service.StorageService.onRestart(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getLoadString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.service.StorageService.getLoadMap()"], ["void", "org.apache.cassandra.service.StorageService.deliverHints(java.lang.String)"], ["java.net.InetAddress", "org.apache.cassandra.service.StorageService.getEndpointForHostId(java.util.UUID)"], ["java.util.UUID", "org.apache.cassandra.service.StorageService.getHostIdForEndpoint(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getReleaseVersion()"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getSchemaVersion()"], ["java.lang.String[]", "org.apache.cassandra.service.StorageService.getAllDataFileLocations()"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getCommitLogLocation()"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getSavedCachesLocation()"], ["int", "org.apache.cassandra.service.StorageService.getCurrentGenerationNumber()"], ["int", "org.apache.cassandra.service.StorageService.forceKeyspaceCleanup(java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.forceKeyspaceCleanup(int, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.scrub(boolean, boolean, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.scrub(boolean, boolean, boolean, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.scrub(boolean, boolean, boolean, int, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.scrub(boolean, boolean, boolean, boolean, int, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.verify(boolean, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.upgradeSSTables(java.lang.String, boolean, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.upgradeSSTables(java.lang.String, boolean, int, java.lang.String...)"], ["void", "org.apache.cassandra.service.StorageService.forceKeyspaceCompaction(boolean, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.relocateSSTables(java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.relocateSSTables(int, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.garbageCollect(java.lang.String, int, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.service.StorageService.takeSnapshot(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.String...)"], ["void", "org.apache.cassandra.service.StorageService.takeTableSnapshot(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.StorageService.forceKeyspaceCompactionForTokenRange(java.lang.String, java.lang.String, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.service.StorageService.takeSnapshot(java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.service.StorageService.takeMultipleTableSnapshot(java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.service.StorageService.clearSnapshot(java.lang.String, java.lang.String...)"], ["java.util.Map<java.lang.String, javax.management.openmbean.TabularData>", "org.apache.cassandra.service.StorageService.getSnapshotDetails()"], ["long", "org.apache.cassandra.service.StorageService.trueSnapshotsSize()"], ["void", "org.apache.cassandra.service.StorageService.refreshSizeEstimates()"], ["void", "org.apache.cassandra.service.StorageService.cleanupSizeEstimates()"], ["void", "org.apache.cassandra.service.StorageService.forceKeyspaceFlush(java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.repairAsync(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["int", "org.apache.cassandra.service.StorageService.forceRepairAsync(java.lang.String, boolean, java.util.Collection<java.lang.String>, java.util.Collection<java.lang.String>, boolean, boolean, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.forceRepairAsync(java.lang.String, int, java.util.Collection<java.lang.String>, java.util.Collection<java.lang.String>, boolean, boolean, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.forceRepairAsync(java.lang.String, boolean, boolean, boolean, boolean, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.forceRepairRangeAsync(java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Collection<java.lang.String>, java.util.Collection<java.lang.String>, boolean, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.forceRepairRangeAsync(java.lang.String, java.lang.String, java.lang.String, int, java.util.Collection<java.lang.String>, java.util.Collection<java.lang.String>, boolean, java.lang.String...)"], ["int", "org.apache.cassandra.service.StorageService.forceRepairRangeAsync(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String...)"], ["org.apache.cassandra.dht.Token$TokenFactory", "org.apache.cassandra.service.StorageService.getTokenFactory()"], ["int", "org.apache.cassandra.service.StorageService.forceRepairAsync(java.lang.String, org.apache.cassandra.repair.messages.RepairOption, boolean)"], ["void", "org.apache.cassandra.service.StorageService.forceTerminateAllRepairSessions()"], ["void", "org.apache.cassandra.service.StorageService.getLiveNaturalEndpoints(org.apache.cassandra.db.Keyspace, org.apache.cassandra.dht.RingPosition, java.util.List<java.net.InetAddress>)"], ["void", "org.apache.cassandra.service.StorageService.setLoggingLevel(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.service.StorageService.getLoggingLevels()"], ["java.util.List<org.apache.cassandra.utils.Pair<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, java.lang.Long>>", "org.apache.cassandra.service.StorageService.getSplits(java.lang.String, java.lang.String, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, int)"], ["void", "org.apache.cassandra.service.StorageService.decommission()"], ["void", "org.apache.cassandra.service.StorageService.move(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getRemovalStatus()"], ["void", "org.apache.cassandra.service.StorageService.forceRemoveCompletion()"], ["void", "org.apache.cassandra.service.StorageService.removeNode(java.lang.String)"], ["void", "org.apache.cassandra.service.StorageService.confirmReplication(java.net.InetAddress)"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getOperationMode()"], ["boolean", "org.apache.cassandra.service.StorageService.isStarting()"], ["boolean", "org.apache.cassandra.service.StorageService.isMoving()"], ["boolean", "org.apache.cassandra.service.StorageService.isJoining()"], ["boolean", "org.apache.cassandra.service.StorageService.isDrained()"], ["boolean", "org.apache.cassandra.service.StorageService.isDraining()"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getDrainProgress()"], ["synchronized", "org.apache.cassandra.service.StorageService.void drain()"], ["synchronized", "org.apache.cassandra.service.StorageService.boolean addPreShutdownHook(java.lang.Runnable)"], ["synchronized", "org.apache.cassandra.service.StorageService.boolean removePreShutdownHook(java.lang.Runnable)"], ["synchronized", "org.apache.cassandra.service.StorageService.boolean addPostShutdownHook(java.lang.Runnable)"], ["synchronized", "org.apache.cassandra.service.StorageService.boolean removePostShutdownHook(java.lang.Runnable)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.service.StorageService.setPartitionerUnsafe(org.apache.cassandra.dht.IPartitioner)"], ["void", "org.apache.cassandra.service.StorageService.truncate(java.lang.String, java.lang.String)"], ["java.util.Map<java.net.InetAddress, java.lang.Float>", "org.apache.cassandra.service.StorageService.getOwnership()"], ["java.util.LinkedHashMap<java.net.InetAddress, java.lang.Float>", "org.apache.cassandra.service.StorageService.effectiveOwnership(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.service.StorageService.getViewBuildStatuses(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.StorageService.setDynamicUpdateInterval(int)"], ["int", "org.apache.cassandra.service.StorageService.getDynamicUpdateInterval()"], ["void", "org.apache.cassandra.service.StorageService.updateSnitch(java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Double)"], ["org.apache.cassandra.utils.Pair<java.util.Set<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.util.Set<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>>", "org.apache.cassandra.service.StorageService.calculateStreamAndFetchRanges(java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["void", "org.apache.cassandra.service.StorageService.bulkLoad(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.service.StorageService.bulkLoadAsync(java.lang.String)"], ["void", "org.apache.cassandra.service.StorageService.rescheduleFailedDeletions()"], ["void", "org.apache.cassandra.service.StorageService.loadNewSSTables(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.service.StorageService.rebuildSecondaryIndex(java.lang.String, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.service.StorageService.resetLocalSchema()"], ["void", "org.apache.cassandra.service.StorageService.reloadLocalSchema()"], ["void", "org.apache.cassandra.service.StorageService.setTraceProbability(double)"], ["double", "org.apache.cassandra.service.StorageService.getTraceProbability()"], ["void", "org.apache.cassandra.service.StorageService.disableAutoCompaction(java.lang.String, java.lang.String...)"], ["synchronized", "org.apache.cassandra.service.StorageService.void enableAutoCompaction(java.lang.String, java.lang.String...)"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getClusterName()"], ["java.lang.String", "org.apache.cassandra.service.StorageService.getPartitionerName()"], ["int", "org.apache.cassandra.service.StorageService.getTombstoneWarnThreshold()"], ["void", "org.apache.cassandra.service.StorageService.setTombstoneWarnThreshold(int)"], ["int", "org.apache.cassandra.service.StorageService.getTombstoneFailureThreshold()"], ["void", "org.apache.cassandra.service.StorageService.setTombstoneFailureThreshold(int)"], ["int", "org.apache.cassandra.service.StorageService.getBatchSizeFailureThreshold()"], ["void", "org.apache.cassandra.service.StorageService.setBatchSizeFailureThreshold(int)"], ["void", "org.apache.cassandra.service.StorageService.setHintedHandoffThrottleInKB(int)"], ["java.util.Map", "org.apache.cassandra.service.StorageService.effectiveOwnership(java.lang.String)"], ["org.apache.cassandra.service.TruncateResponseHandler", "org.apache.cassandra.service.TruncateResponseHandler(int)"], ["void", "org.apache.cassandra.service.TruncateResponseHandler.get()"], ["void", "org.apache.cassandra.service.TruncateResponseHandler.response(org.apache.cassandra.net.MessageIn)"], ["boolean", "org.apache.cassandra.service.TruncateResponseHandler.isLatencyForSnitch()"], ["org.apache.cassandra.service.WriteResponseHandler", "org.apache.cassandra.service.WriteResponseHandler(java.util.Collection<java.net.InetAddress>, java.util.Collection<java.net.InetAddress>, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.db.Keyspace, java.lang.Runnable, org.apache.cassandra.db.WriteType, long)"], ["org.apache.cassandra.service.WriteResponseHandler", "org.apache.cassandra.service.WriteResponseHandler(java.net.InetAddress, org.apache.cassandra.db.WriteType, java.lang.Runnable, long)"], ["org.apache.cassandra.service.WriteResponseHandler", "org.apache.cassandra.service.WriteResponseHandler(java.net.InetAddress, org.apache.cassandra.db.WriteType, long)"], ["void", "org.apache.cassandra.service.WriteResponseHandler.response(org.apache.cassandra.net.MessageIn<T>)"], ["boolean", "org.apache.cassandra.service.WriteResponseHandler.isLatencyForSnitch()"], ["void", "org.apache.cassandra.service.pager.AbstractQueryPager$Pager.onClose()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.service.pager.AbstractQueryPager$Pager.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.service.pager.AbstractQueryPager$Pager.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.service.pager.AbstractQueryPager.executionController()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.AbstractQueryPager.fetchPage(int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.AbstractQueryPager.fetchPageInternal(int, org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.service.pager.AbstractQueryPager.fetchPageUnfiltered(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.ReadExecutionController)"], ["boolean", "org.apache.cassandra.service.pager.AbstractQueryPager.isExhausted()"], ["int", "org.apache.cassandra.service.pager.AbstractQueryPager.maxRemaining()"], ["org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator", "org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator(org.apache.cassandra.service.pager.AggregationQueryPager, int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator", "org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator(org.apache.cassandra.service.pager.AggregationQueryPager, int, org.apache.cassandra.db.ReadExecutionController, long)"], ["org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator(org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator, org.apache.cassandra.db.rows.RowIterator)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.metadata()"], ["boolean", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.isReverseOrder()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.columns()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.partitionKey()"], ["staticRow()", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator."], ["boolean", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.isEmpty()"], ["void", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.close()"], ["boolean", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.hasNext()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.next()"], ["java.lang.Object", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator.next()"], ["org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator(org.apache.cassandra.service.pager.AggregationQueryPager, int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator(org.apache.cassandra.service.pager.AggregationQueryPager, int, org.apache.cassandra.db.ReadExecutionController, long)"], ["void", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator.close()"], ["boolean", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator.hasNext()"], ["org.apache.cassandra.db.rows.RowIterator", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator.next()"], ["java.lang.Object", "org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator.next()"], ["org.apache.cassandra.service.pager.AggregationQueryPager", "org.apache.cassandra.service.pager.AggregationQueryPager(org.apache.cassandra.service.pager.QueryPager, org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.AggregationQueryPager.fetchPage(int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.service.pager.AggregationQueryPager.executionController()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.AggregationQueryPager.fetchPageInternal(int, org.apache.cassandra.db.ReadExecutionController)"], ["boolean", "org.apache.cassandra.service.pager.AggregationQueryPager.isExhausted()"], ["int", "org.apache.cassandra.service.pager.AggregationQueryPager.maxRemaining()"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.service.pager.AggregationQueryPager.state()"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.service.pager.AggregationQueryPager.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.service.pager.MultiPartitionPager$PagersIterator", "org.apache.cassandra.service.pager.MultiPartitionPager$PagersIterator(org.apache.cassandra.service.pager.MultiPartitionPager, int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, org.apache.cassandra.db.ReadExecutionController, long)"], ["void", "org.apache.cassandra.service.pager.MultiPartitionPager$PagersIterator.close()"], ["org.apache.cassandra.service.pager.MultiPartitionPager", "org.apache.cassandra.service.pager.MultiPartitionPager(org.apache.cassandra.db.SinglePartitionReadCommand$Group, org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.service.pager.MultiPartitionPager.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.service.pager.MultiPartitionPager.state()"], ["boolean", "org.apache.cassandra.service.pager.MultiPartitionPager.isExhausted()"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.service.pager.MultiPartitionPager.executionController()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.MultiPartitionPager.fetchPage(int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.MultiPartitionPager.fetchPageInternal(int, org.apache.cassandra.db.ReadExecutionController)"], ["int", "org.apache.cassandra.service.pager.MultiPartitionPager.maxRemaining()"], ["org.apache.cassandra.service.pager.PagingState$RowMark", "org.apache.cassandra.service.pager.PagingState$RowMark.create(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.rows.Row, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.db.Clustering", "org.apache.cassandra.service.pager.PagingState$RowMark.clustering(org.apache.cassandra.config.CFMetaData)"], ["int", "org.apache.cassandra.service.pager.PagingState$RowMark.hashCode()"], ["boolean", "org.apache.cassandra.service.pager.PagingState$RowMark.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.service.pager.PagingState$RowMark.toString()"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.service.pager.PagingState(java.nio.ByteBuffer, org.apache.cassandra.service.pager.PagingState$RowMark, int, int)"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.service.pager.PagingState.deserialize(java.nio.ByteBuffer, org.apache.cassandra.transport.ProtocolVersion)"], ["java.nio.ByteBuffer", "org.apache.cassandra.service.pager.PagingState.serialize(org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.service.pager.PagingState.serializedSize(org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.service.pager.PagingState.hashCode()"], ["boolean", "org.apache.cassandra.service.pager.PagingState.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.service.pager.PagingState.toString()"], ["org.apache.cassandra.service.pager.PartitionRangeQueryPager", "org.apache.cassandra.service.pager.PartitionRangeQueryPager(org.apache.cassandra.db.PartitionRangeReadCommand, org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.service.pager.PartitionRangeQueryPager", "org.apache.cassandra.service.pager.PartitionRangeQueryPager(org.apache.cassandra.db.ReadCommand, org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.service.pager.PagingState$RowMark, int, int)"], ["org.apache.cassandra.service.pager.PartitionRangeQueryPager", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.state()"], ["int", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.maxRemaining()"], ["boolean", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.isExhausted()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.fetchPageUnfiltered(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.fetchPageInternal(int, org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.fetchPage(int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.executionController()"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.service.pager.PartitionRangeQueryPager.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.service.pager.QueryPager$1.executionController()"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.QueryPager$1.fetchPage(int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.QueryPager$1.fetchPageInternal(int, org.apache.cassandra.db.ReadExecutionController)"], ["boolean", "org.apache.cassandra.service.pager.QueryPager$1.isExhausted()"], ["int", "org.apache.cassandra.service.pager.QueryPager$1.maxRemaining()"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.service.pager.QueryPager$1.state()"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.service.pager.QueryPager$1.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["int", "org.apache.cassandra.service.pager.QueryPagers.countPaged(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.filter.ColumnFilter, org.apache.cassandra.db.filter.ClusteringIndexFilter, org.apache.cassandra.db.filter.DataLimits, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, int, int, boolean, long)"], ["org.apache.cassandra.service.pager.SinglePartitionPager", "org.apache.cassandra.service.pager.SinglePartitionPager(org.apache.cassandra.db.SinglePartitionReadCommand, org.apache.cassandra.service.pager.PagingState, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.service.pager.SinglePartitionPager", "org.apache.cassandra.service.pager.SinglePartitionPager.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["java.nio.ByteBuffer", "org.apache.cassandra.service.pager.SinglePartitionPager.key()"], ["org.apache.cassandra.db.filter.DataLimits", "org.apache.cassandra.service.pager.SinglePartitionPager.limits()"], ["org.apache.cassandra.service.pager.PagingState", "org.apache.cassandra.service.pager.SinglePartitionPager.state()"], ["int", "org.apache.cassandra.service.pager.SinglePartitionPager.maxRemaining()"], ["boolean", "org.apache.cassandra.service.pager.SinglePartitionPager.isExhausted()"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.service.pager.SinglePartitionPager.fetchPageUnfiltered(org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.SinglePartitionPager.fetchPageInternal(int, org.apache.cassandra.db.ReadExecutionController)"], ["org.apache.cassandra.db.partitions.PartitionIterator", "org.apache.cassandra.service.pager.SinglePartitionPager.fetchPage(int, org.apache.cassandra.db.ConsistencyLevel, org.apache.cassandra.service.ClientState, long)"], ["org.apache.cassandra.db.ReadExecutionController", "org.apache.cassandra.service.pager.SinglePartitionPager.executionController()"], ["org.apache.cassandra.service.pager.QueryPager", "org.apache.cassandra.service.pager.SinglePartitionPager.withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)"], ["org.apache.cassandra.service.paxos.AbstractPaxosCallback", "org.apache.cassandra.service.paxos.AbstractPaxosCallback(int, org.apache.cassandra.db.ConsistencyLevel, long)"], ["boolean", "org.apache.cassandra.service.paxos.AbstractPaxosCallback.isLatencyForSnitch()"], ["int", "org.apache.cassandra.service.paxos.AbstractPaxosCallback.getResponseCount()"], ["void", "org.apache.cassandra.service.paxos.AbstractPaxosCallback.await()"], ["org.apache.cassandra.service.paxos.Commit$CommitSerializer", "org.apache.cassandra.service.paxos.Commit$CommitSerializer()"], ["void", "org.apache.cassandra.service.paxos.Commit$CommitSerializer.serialize(org.apache.cassandra.service.paxos.Commit, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.service.paxos.Commit", "org.apache.cassandra.service.paxos.Commit$CommitSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.service.paxos.Commit$CommitSerializer.serializedSize(org.apache.cassandra.service.paxos.Commit, int)"], ["long", "org.apache.cassandra.service.paxos.Commit$CommitSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.service.paxos.Commit$CommitSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.service.paxos.Commit$CommitSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.service.paxos.Commit", "org.apache.cassandra.service.paxos.Commit(java.util.UUID, org.apache.cassandra.db.partitions.PartitionUpdate)"], ["org.apache.cassandra.service.paxos.Commit", "org.apache.cassandra.service.paxos.Commit.newPrepare(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.config.CFMetaData, java.util.UUID)"], ["org.apache.cassandra.service.paxos.Commit", "org.apache.cassandra.service.paxos.Commit.newProposal(java.util.UUID, org.apache.cassandra.db.partitions.PartitionUpdate)"], ["org.apache.cassandra.service.paxos.Commit", "org.apache.cassandra.service.paxos.Commit.emptyCommit(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.config.CFMetaData)"], ["boolean", "org.apache.cassandra.service.paxos.Commit.isAfter(org.apache.cassandra.service.paxos.Commit)"], ["boolean", "org.apache.cassandra.service.paxos.Commit.hasBallot(java.util.UUID)"], ["org.apache.cassandra.db.Mutation", "org.apache.cassandra.service.paxos.Commit.makeMutation()"], ["boolean", "org.apache.cassandra.service.paxos.Commit.equals(java.lang.Object)"], ["int", "org.apache.cassandra.service.paxos.Commit.hashCode()"], ["java.lang.String", "org.apache.cassandra.service.paxos.Commit.toString()"], ["org.apache.cassandra.service.paxos.CommitVerbHandler", "org.apache.cassandra.service.paxos.CommitVerbHandler()"], ["void", "org.apache.cassandra.service.paxos.CommitVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.service.paxos.Commit>, int)"], ["org.apache.cassandra.service.paxos.PaxosState", "org.apache.cassandra.service.paxos.PaxosState(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.service.paxos.PaxosState", "org.apache.cassandra.service.paxos.PaxosState(org.apache.cassandra.service.paxos.Commit, org.apache.cassandra.service.paxos.Commit, org.apache.cassandra.service.paxos.Commit)"], ["org.apache.cassandra.service.paxos.PrepareResponse", "org.apache.cassandra.service.paxos.PaxosState.prepare(org.apache.cassandra.service.paxos.Commit)"], ["java.lang.Boolean", "org.apache.cassandra.service.paxos.PaxosState.propose(org.apache.cassandra.service.paxos.Commit)"], ["void", "org.apache.cassandra.service.paxos.PaxosState.commit(org.apache.cassandra.service.paxos.Commit)"], ["boolean", "org.apache.cassandra.service.paxos.PrepareCallback$1.apply(java.net.InetAddress)"], ["boolean", "org.apache.cassandra.service.paxos.PrepareCallback$1.apply(java.lang.Object)"], ["org.apache.cassandra.service.paxos.PrepareCallback", "org.apache.cassandra.service.paxos.PrepareCallback(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.config.CFMetaData, int, org.apache.cassandra.db.ConsistencyLevel, long)"], ["synchronized", "org.apache.cassandra.service.paxos.PrepareCallback.void response(org.apache.cassandra.net.MessageIn<org.apache.cassandra.service.paxos.PrepareResponse>)"], ["org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer", "org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer()"], ["void", "org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer.serialize(org.apache.cassandra.service.paxos.PrepareResponse, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.service.paxos.PrepareResponse", "org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer.serializedSize(org.apache.cassandra.service.paxos.PrepareResponse, int)"], ["long", "org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.service.paxos.PrepareResponse", "org.apache.cassandra.service.paxos.PrepareResponse(boolean, org.apache.cassandra.service.paxos.Commit, org.apache.cassandra.service.paxos.Commit)"], ["java.lang.String", "org.apache.cassandra.service.paxos.PrepareResponse.toString()"], ["org.apache.cassandra.service.paxos.PrepareVerbHandler", "org.apache.cassandra.service.paxos.PrepareVerbHandler()"], ["void", "org.apache.cassandra.service.paxos.PrepareVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.service.paxos.Commit>, int)"], ["org.apache.cassandra.service.paxos.ProposeCallback", "org.apache.cassandra.service.paxos.ProposeCallback(int, int, boolean, org.apache.cassandra.db.ConsistencyLevel, long)"], ["void", "org.apache.cassandra.service.paxos.ProposeCallback.response(org.apache.cassandra.net.MessageIn<java.lang.Boolean>)"], ["int", "org.apache.cassandra.service.paxos.ProposeCallback.getAcceptCount()"], ["boolean", "org.apache.cassandra.service.paxos.ProposeCallback.isSuccessful()"], ["boolean", "org.apache.cassandra.service.paxos.ProposeCallback.isFullyRefused()"], ["org.apache.cassandra.service.paxos.ProposeVerbHandler", "org.apache.cassandra.service.paxos.ProposeVerbHandler()"], ["void", "org.apache.cassandra.service.paxos.ProposeVerbHandler.doVerb(org.apache.cassandra.net.MessageIn<org.apache.cassandra.service.paxos.Commit>, int)"], ["void", "org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.start(java.net.Socket, int, boolean)"], ["void", "org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run()"], ["void", "org.apache.cassandra.streaming.ConnectionHandler$MessageHandler.start(org.apache.cassandra.net.IncomingStreamingConnection, int)"], ["void", "org.apache.cassandra.streaming.ConnectionHandler$MessageHandler.start(java.net.Socket, int, boolean)"], ["boolean", "org.apache.cassandra.streaming.ConnectionHandler$MessageHandler.isClosed()"], ["int", "org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler$1.compare(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.streaming.messages.StreamMessage)"], ["int", "org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler$1.compare(java.lang.Object, java.lang.Object)"], ["void", "org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler.enqueue(org.apache.cassandra.streaming.messages.StreamMessage)"], ["void", "org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler.run()"], ["void", "org.apache.cassandra.streaming.ConnectionHandler.initiate()"], ["void", "org.apache.cassandra.streaming.ConnectionHandler.initiateOnReceivingSide(org.apache.cassandra.net.IncomingStreamingConnection, boolean, int)"], ["void", "org.apache.cassandra.streaming.ConnectionHandler.sendMessages(java.util.Collection<? extends org.apache.cassandra.streaming.messages.StreamMessage>)"], ["void", "org.apache.cassandra.streaming.ConnectionHandler.sendMessage(org.apache.cassandra.streaming.messages.StreamMessage)"], ["boolean", "org.apache.cassandra.streaming.ConnectionHandler.isOutgoingConnected()"], ["org.apache.cassandra.streaming.DefaultConnectionFactory", "org.apache.cassandra.streaming.DefaultConnectionFactory()"], ["java.net.Socket", "org.apache.cassandra.streaming.DefaultConnectionFactory.createConnection(java.net.InetAddress)"], ["org.apache.cassandra.streaming.ProgressInfo$Direction[]", "org.apache.cassandra.streaming.ProgressInfo$Direction.values()"], ["org.apache.cassandra.streaming.ProgressInfo$Direction", "org.apache.cassandra.streaming.ProgressInfo$Direction.valueOf(java.lang.String)"], ["org.apache.cassandra.streaming.ProgressInfo$Direction", "org.apache.cassandra.streaming.ProgressInfo$Direction.fromByte(byte)"], ["org.apache.cassandra.streaming.ProgressInfo", "org.apache.cassandra.streaming.ProgressInfo(java.net.InetAddress, int, java.lang.String, org.apache.cassandra.streaming.ProgressInfo$Direction, long, long)"], ["boolean", "org.apache.cassandra.streaming.ProgressInfo.isCompleted()"], ["boolean", "org.apache.cassandra.streaming.ProgressInfo.equals(java.lang.Object)"], ["int", "org.apache.cassandra.streaming.ProgressInfo.hashCode()"], ["java.lang.String", "org.apache.cassandra.streaming.ProgressInfo.toString()"], ["org.apache.cassandra.streaming.ReplicationFinishedVerbHandler", "org.apache.cassandra.streaming.ReplicationFinishedVerbHandler()"], ["void", "org.apache.cassandra.streaming.ReplicationFinishedVerbHandler.doVerb(org.apache.cassandra.net.MessageIn, int)"], ["boolean", "org.apache.cassandra.streaming.SessionInfo$1.apply(org.apache.cassandra.streaming.ProgressInfo)"], ["boolean", "org.apache.cassandra.streaming.SessionInfo$1.apply(java.lang.Object)"], ["org.apache.cassandra.streaming.SessionInfo", "org.apache.cassandra.streaming.SessionInfo(java.net.InetAddress, int, java.net.InetAddress, java.util.Collection<org.apache.cassandra.streaming.StreamSummary>, java.util.Collection<org.apache.cassandra.streaming.StreamSummary>, org.apache.cassandra.streaming.StreamSession$State)"], ["boolean", "org.apache.cassandra.streaming.SessionInfo.isFailed()"], ["void", "org.apache.cassandra.streaming.SessionInfo.updateProgress(org.apache.cassandra.streaming.ProgressInfo)"], ["long", "org.apache.cassandra.streaming.SessionInfo.getTotalFilesReceived()"], ["long", "org.apache.cassandra.streaming.SessionInfo.getTotalFilesSent()"], ["long", "org.apache.cassandra.streaming.SessionInfo.getTotalSizeReceived()"], ["long", "org.apache.cassandra.streaming.SessionInfo.getTotalSizeSent()"], ["long", "org.apache.cassandra.streaming.SessionInfo.getTotalFilesToReceive()"], ["long", "org.apache.cassandra.streaming.SessionInfo.getTotalFilesToSend()"], ["long", "org.apache.cassandra.streaming.SessionInfo.getTotalSizeToReceive()"], ["long", "org.apache.cassandra.streaming.SessionInfo.getTotalSizeToSend()"], ["void", "org.apache.cassandra.streaming.StreamCoordinator$1.handleStreamEvent(org.apache.cassandra.streaming.StreamEvent)"], ["void", "org.apache.cassandra.streaming.StreamCoordinator$1.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.streaming.StreamCoordinator$1.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.streaming.StreamCoordinator$1.onSuccess(java.lang.Object)"], ["boolean", "org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData.hasActiveSessions()"], ["org.apache.cassandra.streaming.StreamSession", "org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData.getOrCreateNextSession(java.net.InetAddress, java.net.InetAddress)"], ["void", "org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData.connectAllStreamSessions()"], ["org.apache.cassandra.streaming.StreamSession", "org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData.getOrCreateSessionById(java.net.InetAddress, int, java.net.InetAddress)"], ["void", "org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData.updateProgress(org.apache.cassandra.streaming.ProgressInfo)"], ["void", "org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData.addSessionInfo(org.apache.cassandra.streaming.SessionInfo)"], ["org.apache.cassandra.streaming.StreamCoordinator$StreamSessionConnector", "org.apache.cassandra.streaming.StreamCoordinator$StreamSessionConnector(org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.StreamCoordinator$StreamSessionConnector.run()"], ["org.apache.cassandra.streaming.StreamCoordinator", "org.apache.cassandra.streaming.StreamCoordinator(int, boolean, boolean, org.apache.cassandra.streaming.StreamConnectionFactory, boolean)"], ["void", "org.apache.cassandra.streaming.StreamCoordinator.setConnectionFactory(org.apache.cassandra.streaming.StreamConnectionFactory)"], ["synchronized", "org.apache.cassandra.streaming.StreamCoordinator.boolean hasActiveSessions()"], ["boolean", "org.apache.cassandra.streaming.StreamCoordinator.isReceiving()"], ["void", "org.apache.cassandra.streaming.StreamCoordinator.connect(org.apache.cassandra.streaming.StreamResultFuture)"], ["synchronized", "org.apache.cassandra.streaming.StreamCoordinator.org.apache.cassandra.streaming.StreamSession getOrCreateNextSession(java.net.InetAddress, java.net.InetAddress)"], ["synchronized", "org.apache.cassandra.streaming.StreamCoordinator.org.apache.cassandra.streaming.StreamSession getOrCreateSessionById(java.net.InetAddress, int, java.net.InetAddress)"], ["synchronized", "org.apache.cassandra.streaming.StreamCoordinator.void updateProgress(org.apache.cassandra.streaming.ProgressInfo)"], ["synchronized", "org.apache.cassandra.streaming.StreamCoordinator.void addSessionInfo(org.apache.cassandra.streaming.SessionInfo)"], ["synchronized", "org.apache.cassandra.streaming.StreamCoordinator.void transferFiles(java.net.InetAddress, java.util.Collection<org.apache.cassandra.streaming.StreamSession$SSTableStreamingSections>)"], ["org.apache.cassandra.streaming.StreamEvent$ProgressEvent", "org.apache.cassandra.streaming.StreamEvent$ProgressEvent(java.util.UUID, org.apache.cassandra.streaming.ProgressInfo)"], ["java.lang.String", "org.apache.cassandra.streaming.StreamEvent$ProgressEvent.toString()"], ["org.apache.cassandra.streaming.StreamEvent$SessionCompleteEvent", "org.apache.cassandra.streaming.StreamEvent$SessionCompleteEvent(org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.StreamEvent$SessionPreparedEvent", "org.apache.cassandra.streaming.StreamEvent$SessionPreparedEvent(java.util.UUID, org.apache.cassandra.streaming.SessionInfo)"], ["org.apache.cassandra.streaming.StreamEvent$Type[]", "org.apache.cassandra.streaming.StreamEvent$Type.values()"], ["org.apache.cassandra.streaming.StreamEvent$Type", "org.apache.cassandra.streaming.StreamEvent$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.streaming.StreamException", "org.apache.cassandra.streaming.StreamException(org.apache.cassandra.streaming.StreamState, java.lang.String)"], ["org.apache.cassandra.streaming.StreamException", "org.apache.cassandra.streaming.StreamException(org.apache.cassandra.streaming.StreamState, java.lang.String, java.lang.Throwable)"], ["org.apache.cassandra.streaming.messages.OutgoingFileMessage", "org.apache.cassandra.streaming.StreamHook$1.reportOutgoingFile(org.apache.cassandra.streaming.StreamSession, org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.streaming.messages.OutgoingFileMessage)"], ["void", "org.apache.cassandra.streaming.StreamHook$1.reportStreamFuture(org.apache.cassandra.streaming.StreamSession, org.apache.cassandra.streaming.StreamResultFuture)"], ["void", "org.apache.cassandra.streaming.StreamHook$1.reportIncomingFile(org.apache.cassandra.db.ColumnFamilyStore, org.apache.cassandra.io.sstable.SSTableMultiWriter, org.apache.cassandra.streaming.StreamSession, int)"], ["org.apache.cassandra.streaming.StreamHook", "org.apache.cassandra.streaming.StreamHook.createHook()"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.StreamManager$1.apply(org.apache.cassandra.streaming.StreamResultFuture)"], ["java.lang.Object", "org.apache.cassandra.streaming.StreamManager$1.apply(java.lang.Object)"], ["void", "org.apache.cassandra.streaming.StreamManager$2.run()"], ["void", "org.apache.cassandra.streaming.StreamManager$3.run()"], ["org.apache.cassandra.streaming.StreamManager$StreamRateLimiter", "org.apache.cassandra.streaming.StreamManager$StreamRateLimiter(java.net.InetAddress)"], ["void", "org.apache.cassandra.streaming.StreamManager$StreamRateLimiter.acquire(int)"], ["org.apache.cassandra.streaming.StreamManager", "org.apache.cassandra.streaming.StreamManager()"], ["org.apache.cassandra.streaming.StreamManager$StreamRateLimiter", "org.apache.cassandra.streaming.StreamManager.getRateLimiter(java.net.InetAddress)"], ["void", "org.apache.cassandra.streaming.StreamManager.register(org.apache.cassandra.streaming.StreamResultFuture)"], ["void", "org.apache.cassandra.streaming.StreamManager.registerReceiving(org.apache.cassandra.streaming.StreamResultFuture)"], ["org.apache.cassandra.streaming.StreamResultFuture", "org.apache.cassandra.streaming.StreamManager.getReceivingStream(java.util.UUID)"], ["void", "org.apache.cassandra.streaming.StreamManager.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)"], ["void", "org.apache.cassandra.streaming.StreamManager.removeNotificationListener(javax.management.NotificationListener)"], ["void", "org.apache.cassandra.streaming.StreamManager.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)"], ["javax.management.MBeanNotificationInfo[]", "org.apache.cassandra.streaming.StreamManager.getNotificationInfo()"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan(java.lang.String)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan(java.lang.String, boolean, boolean)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan(java.lang.String, long, int, boolean, boolean, boolean)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.requestRanges(java.net.InetAddress, java.net.InetAddress, java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.requestRanges(java.net.InetAddress, java.net.InetAddress, java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.lang.String...)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.transferRanges(java.net.InetAddress, java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.lang.String...)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.transferRanges(java.net.InetAddress, java.net.InetAddress, java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.transferRanges(java.net.InetAddress, java.net.InetAddress, java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.lang.String...)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.transferFiles(java.net.InetAddress, java.util.Collection<org.apache.cassandra.streaming.StreamSession$SSTableStreamingSections>)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.listeners(org.apache.cassandra.streaming.StreamEventHandler, org.apache.cassandra.streaming.StreamEventHandler...)"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.connectionFactory(org.apache.cassandra.streaming.StreamConnectionFactory)"], ["boolean", "org.apache.cassandra.streaming.StreamPlan.isEmpty()"], ["org.apache.cassandra.streaming.StreamResultFuture", "org.apache.cassandra.streaming.StreamPlan.execute()"], ["org.apache.cassandra.streaming.StreamPlan", "org.apache.cassandra.streaming.StreamPlan.flushBeforeTransfer(boolean)"], ["org.apache.cassandra.streaming.StreamReader$StreamDeserializer", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer(org.apache.cassandra.config.CFMetaData, java.io.InputStream, org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.db.SerializationHeader, long, java.util.UUID)"], ["org.apache.cassandra.streaming.StreamReader$StreamDeserializer", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.newPartition()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.metadata()"], ["org.apache.cassandra.db.PartitionColumns", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.columns()"], ["boolean", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.isReverseOrder()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.partitionKey()"], ["org.apache.cassandra.db.DeletionTime", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.partitionLevelDeletion()"], ["staticRow()", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer."], ["org.apache.cassandra.db.rows.EncodingStats", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.stats()"], ["boolean", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.next()"], ["void", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.checkForExceptions()"], ["void", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.close()"], ["void", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.cleanup()"], ["java.lang.Object", "org.apache.cassandra.streaming.StreamReader$StreamDeserializer.next()"], ["org.apache.cassandra.streaming.StreamReader", "org.apache.cassandra.streaming.StreamReader(org.apache.cassandra.streaming.messages.FileMessageHeader, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.streaming.StreamReader.read(java.nio.channels.ReadableByteChannel)"], ["void", "org.apache.cassandra.streaming.StreamReceiveTask$1.trackNew(org.apache.cassandra.io.sstable.SSTable)"], ["void", "org.apache.cassandra.streaming.StreamReceiveTask$1.untrackNew(org.apache.cassandra.io.sstable.SSTable)"], ["org.apache.cassandra.db.compaction.OperationType", "org.apache.cassandra.streaming.StreamReceiveTask$1.opType()"], ["org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable", "org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable(org.apache.cassandra.streaming.StreamReceiveTask)"], ["void", "org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable.run()"], ["org.apache.cassandra.streaming.StreamReceiveTask", "org.apache.cassandra.streaming.StreamReceiveTask(org.apache.cassandra.streaming.StreamSession, java.util.UUID, int, long)"], ["synchronized", "org.apache.cassandra.streaming.StreamReceiveTask.void received(org.apache.cassandra.io.sstable.SSTableMultiWriter)"], ["int", "org.apache.cassandra.streaming.StreamReceiveTask.getTotalNumberOfFiles()"], ["long", "org.apache.cassandra.streaming.StreamReceiveTask.getTotalSize()"], ["synchronized", "org.apache.cassandra.streaming.StreamReceiveTask.org.apache.cassandra.db.lifecycle.LifecycleNewTracker createLifecycleNewTracker()"], ["synchronized", "org.apache.cassandra.streaming.StreamReceiveTask.void abort()"], ["org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer", "org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer()"], ["void", "org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer.serialize(org.apache.cassandra.streaming.StreamRequest, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.StreamRequest", "org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer.serializedSize(org.apache.cassandra.streaming.StreamRequest, int)"], ["long", "org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.StreamRequest", "org.apache.cassandra.streaming.StreamRequest(java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.util.Collection<java.lang.String>, long)"], ["synchronized", "org.apache.cassandra.streaming.StreamResultFuture.org.apache.cassandra.streaming.StreamResultFuture initReceivingSide(int, java.util.UUID, java.lang.String, java.net.InetAddress, org.apache.cassandra.net.IncomingStreamingConnection, boolean, int, boolean, boolean)"], ["void", "org.apache.cassandra.streaming.StreamResultFuture.addEventListener(org.apache.cassandra.streaming.StreamEventHandler)"], ["org.apache.cassandra.streaming.StreamState", "org.apache.cassandra.streaming.StreamResultFuture.getCurrentState()"], ["boolean", "org.apache.cassandra.streaming.StreamResultFuture.equals(java.lang.Object)"], ["int", "org.apache.cassandra.streaming.StreamResultFuture.hashCode()"], ["void", "org.apache.cassandra.streaming.StreamResultFuture.handleProgress(org.apache.cassandra.streaming.ProgressInfo)"], ["void", "org.apache.cassandra.streaming.StreamSession$KeepAliveTask.run()"], ["org.apache.cassandra.streaming.StreamSession$SSTableStreamingSections", "org.apache.cassandra.streaming.StreamSession$SSTableStreamingSections(org.apache.cassandra.utils.concurrent.Ref<org.apache.cassandra.io.sstable.format.SSTableReader>, java.util.List<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>, long, long)"], ["org.apache.cassandra.streaming.StreamSession$State[]", "org.apache.cassandra.streaming.StreamSession$State.values()"], ["org.apache.cassandra.streaming.StreamSession$State", "org.apache.cassandra.streaming.StreamSession$State.valueOf(java.lang.String)"], ["org.apache.cassandra.streaming.StreamSession", "org.apache.cassandra.streaming.StreamSession(java.net.InetAddress, java.net.InetAddress, org.apache.cassandra.streaming.StreamConnectionFactory, int, boolean, boolean)"], ["java.util.UUID", "org.apache.cassandra.streaming.StreamSession.planId()"], ["int", "org.apache.cassandra.streaming.StreamSession.sessionIndex()"], ["java.lang.String", "org.apache.cassandra.streaming.StreamSession.description()"], ["boolean", "org.apache.cassandra.streaming.StreamSession.keepSSTableLevel()"], ["boolean", "org.apache.cassandra.streaming.StreamSession.isIncremental()"], ["void", "org.apache.cassandra.streaming.StreamSession.init(org.apache.cassandra.streaming.StreamResultFuture)"], ["void", "org.apache.cassandra.streaming.StreamSession.start()"], ["java.net.Socket", "org.apache.cassandra.streaming.StreamSession.createConnection()"], ["void", "org.apache.cassandra.streaming.StreamSession.addStreamRequest(java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.util.Collection<java.lang.String>, long)"], ["synchronized", "org.apache.cassandra.streaming.StreamSession.void addTransferRanges(java.lang.String, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>, java.util.Collection<java.lang.String>, boolean, long)"], ["synchronized", "org.apache.cassandra.streaming.StreamSession.void addTransferFiles(java.util.Collection<org.apache.cassandra.streaming.StreamSession$SSTableStreamingSections>)"], ["void", "org.apache.cassandra.streaming.StreamSession.state(org.apache.cassandra.streaming.StreamSession$State)"], ["org.apache.cassandra.streaming.StreamSession$State", "org.apache.cassandra.streaming.StreamSession.state()"], ["boolean", "org.apache.cassandra.streaming.StreamSession.isSuccess()"], ["void", "org.apache.cassandra.streaming.StreamSession.messageReceived(org.apache.cassandra.streaming.messages.StreamMessage)"], ["void", "org.apache.cassandra.streaming.StreamSession.onInitializationComplete()"], ["void", "org.apache.cassandra.streaming.StreamSession.onError(java.lang.Throwable)"], ["void", "org.apache.cassandra.streaming.StreamSession.prepare(java.util.Collection<org.apache.cassandra.streaming.StreamRequest>, java.util.Collection<org.apache.cassandra.streaming.StreamSummary>)"], ["void", "org.apache.cassandra.streaming.StreamSession.fileSent(org.apache.cassandra.streaming.messages.FileMessageHeader)"], ["void", "org.apache.cassandra.streaming.StreamSession.receive(org.apache.cassandra.streaming.messages.IncomingFileMessage)"], ["void", "org.apache.cassandra.streaming.StreamSession.progress(java.lang.String, org.apache.cassandra.streaming.ProgressInfo$Direction, long, long)"], ["void", "org.apache.cassandra.streaming.StreamSession.received(java.util.UUID, int)"], ["synchronized", "org.apache.cassandra.streaming.StreamSession.void complete()"], ["synchronized", "org.apache.cassandra.streaming.StreamSession.void sessionFailed()"], ["org.apache.cassandra.streaming.SessionInfo", "org.apache.cassandra.streaming.StreamSession.getSessionInfo()"], ["synchronized", "org.apache.cassandra.streaming.StreamSession.void taskCompleted(org.apache.cassandra.streaming.StreamReceiveTask)"], ["synchronized", "org.apache.cassandra.streaming.StreamSession.void taskCompleted(org.apache.cassandra.streaming.StreamTransferTask)"], ["void", "org.apache.cassandra.streaming.StreamSession.onJoin(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.streaming.StreamSession.beforeChange(java.net.InetAddress, org.apache.cassandra.gms.EndpointState, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.streaming.StreamSession.onChange(java.net.InetAddress, org.apache.cassandra.gms.ApplicationState, org.apache.cassandra.gms.VersionedValue)"], ["void", "org.apache.cassandra.streaming.StreamSession.onAlive(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.streaming.StreamSession.onDead(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["void", "org.apache.cassandra.streaming.StreamSession.onRemove(java.net.InetAddress)"], ["void", "org.apache.cassandra.streaming.StreamSession.onRestart(java.net.InetAddress, org.apache.cassandra.gms.EndpointState)"], ["boolean", "org.apache.cassandra.streaming.StreamState$1.apply(org.apache.cassandra.streaming.SessionInfo)"], ["boolean", "org.apache.cassandra.streaming.StreamState$1.apply(java.lang.Object)"], ["org.apache.cassandra.streaming.StreamState", "org.apache.cassandra.streaming.StreamState(java.util.UUID, java.lang.String, java.util.Set<org.apache.cassandra.streaming.SessionInfo>)"], ["boolean", "org.apache.cassandra.streaming.StreamState.hasFailedSession()"], ["org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer", "org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer()"], ["void", "org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer.serialize(org.apache.cassandra.streaming.StreamSummary, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.StreamSummary", "org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer.serializedSize(org.apache.cassandra.streaming.StreamSummary, int)"], ["long", "org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.StreamSummary", "org.apache.cassandra.streaming.StreamSummary(java.util.UUID, int, long)"], ["boolean", "org.apache.cassandra.streaming.StreamSummary.equals(java.lang.Object)"], ["int", "org.apache.cassandra.streaming.StreamSummary.hashCode()"], ["java.lang.String", "org.apache.cassandra.streaming.StreamSummary.toString()"], ["org.apache.cassandra.streaming.StreamSummary", "org.apache.cassandra.streaming.StreamTask.getSummary()"], ["void", "org.apache.cassandra.streaming.StreamTransferTask$1.run()"], ["org.apache.cassandra.streaming.StreamTransferTask", "org.apache.cassandra.streaming.StreamTransferTask(org.apache.cassandra.streaming.StreamSession, java.util.UUID)"], ["synchronized", "org.apache.cassandra.streaming.StreamTransferTask.void addTransferFile(org.apache.cassandra.utils.concurrent.Ref<org.apache.cassandra.io.sstable.format.SSTableReader>, long, java.util.List<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>, long)"], ["void", "org.apache.cassandra.streaming.StreamTransferTask.complete(int)"], ["synchronized", "org.apache.cassandra.streaming.StreamTransferTask.void abort()"], ["synchronized", "org.apache.cassandra.streaming.StreamTransferTask.int getTotalNumberOfFiles()"], ["long", "org.apache.cassandra.streaming.StreamTransferTask.getTotalSize()"], ["synchronized", "org.apache.cassandra.streaming.StreamTransferTask.org.apache.cassandra.streaming.messages.OutgoingFileMessage createMessageForRetry(int)"], ["synchronized", "org.apache.cassandra.streaming.StreamTransferTask.java.util.concurrent.ScheduledFuture scheduleTimeout(int, long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.streaming.StreamWriter", "org.apache.cassandra.streaming.StreamWriter(org.apache.cassandra.io.sstable.format.SSTableReader, java.util.Collection<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.StreamWriter.write(org.apache.cassandra.io.util.DataOutputStreamPlus)"], ["org.apache.cassandra.streaming.compress.CompressedInputStream", "org.apache.cassandra.streaming.compress.CompressedInputStream(java.io.InputStream, org.apache.cassandra.streaming.compress.CompressionInfo, org.apache.cassandra.utils.ChecksumType, java.util.function.Supplier<java.lang.Double>)"], ["int", "org.apache.cassandra.streaming.compress.CompressedInputStream.read()"], ["int", "org.apache.cassandra.streaming.compress.CompressedInputStream.read(byte[], int, int)"], ["void", "org.apache.cassandra.streaming.compress.CompressedInputStream.position(long)"], ["long", "org.apache.cassandra.streaming.compress.CompressedInputStream.getTotalCompressedBytesRead()"], ["org.apache.cassandra.streaming.compress.CompressedStreamReader", "org.apache.cassandra.streaming.compress.CompressedStreamReader(org.apache.cassandra.streaming.messages.FileMessageHeader, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.io.sstable.SSTableMultiWriter", "org.apache.cassandra.streaming.compress.CompressedStreamReader.read(java.nio.channels.ReadableByteChannel)"], ["org.apache.cassandra.streaming.compress.CompressedStreamWriter", "org.apache.cassandra.streaming.compress.CompressedStreamWriter(org.apache.cassandra.io.sstable.format.SSTableReader, java.util.Collection<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>, org.apache.cassandra.streaming.compress.CompressionInfo, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.compress.CompressedStreamWriter.write(org.apache.cassandra.io.util.DataOutputStreamPlus)"], ["void", "org.apache.cassandra.streaming.compress.CompressionInfo$CompressionInfoSerializer.serialize(org.apache.cassandra.streaming.compress.CompressionInfo, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.compress.CompressionInfo", "org.apache.cassandra.streaming.compress.CompressionInfo$CompressionInfoSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.streaming.compress.CompressionInfo$CompressionInfoSerializer.serializedSize(org.apache.cassandra.streaming.compress.CompressionInfo, int)"], ["long", "org.apache.cassandra.streaming.compress.CompressionInfo$CompressionInfoSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.streaming.compress.CompressionInfo$CompressionInfoSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.streaming.compress.CompressionInfo$CompressionInfoSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.compress.CompressionInfo", "org.apache.cassandra.streaming.compress.CompressionInfo(org.apache.cassandra.io.compress.CompressionMetadata$Chunk[], org.apache.cassandra.schema.CompressionParams)"], ["org.apache.cassandra.streaming.management.ProgressInfoCompositeData", "org.apache.cassandra.streaming.management.ProgressInfoCompositeData()"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.management.ProgressInfoCompositeData.toCompositeData(java.util.UUID, org.apache.cassandra.streaming.ProgressInfo)"], ["org.apache.cassandra.streaming.ProgressInfo", "org.apache.cassandra.streaming.management.ProgressInfoCompositeData.fromCompositeData(javax.management.openmbean.CompositeData)"], ["org.apache.cassandra.streaming.management.SessionCompleteEventCompositeData", "org.apache.cassandra.streaming.management.SessionCompleteEventCompositeData()"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.management.SessionCompleteEventCompositeData.toCompositeData(org.apache.cassandra.streaming.StreamEvent$SessionCompleteEvent)"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.management.SessionInfoCompositeData$1.apply(org.apache.cassandra.streaming.StreamSummary)"], ["java.lang.Object", "org.apache.cassandra.streaming.management.SessionInfoCompositeData$1.apply(java.lang.Object)"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.management.SessionInfoCompositeData$2.apply(org.apache.cassandra.streaming.ProgressInfo)"], ["java.lang.Object", "org.apache.cassandra.streaming.management.SessionInfoCompositeData$2.apply(java.lang.Object)"], ["org.apache.cassandra.streaming.StreamSummary", "org.apache.cassandra.streaming.management.SessionInfoCompositeData$3.apply(javax.management.openmbean.CompositeData)"], ["java.lang.Object", "org.apache.cassandra.streaming.management.SessionInfoCompositeData$3.apply(java.lang.Object)"], ["org.apache.cassandra.streaming.ProgressInfo", "org.apache.cassandra.streaming.management.SessionInfoCompositeData$4.apply(javax.management.openmbean.CompositeData)"], ["java.lang.Object", "org.apache.cassandra.streaming.management.SessionInfoCompositeData$4.apply(java.lang.Object)"], ["org.apache.cassandra.streaming.management.SessionInfoCompositeData", "org.apache.cassandra.streaming.management.SessionInfoCompositeData()"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.management.SessionInfoCompositeData.toCompositeData(java.util.UUID, org.apache.cassandra.streaming.SessionInfo)"], ["org.apache.cassandra.streaming.SessionInfo", "org.apache.cassandra.streaming.management.SessionInfoCompositeData.fromCompositeData(javax.management.openmbean.CompositeData)"], ["org.apache.cassandra.streaming.management.StreamEventJMXNotifier", "org.apache.cassandra.streaming.management.StreamEventJMXNotifier()"], ["void", "org.apache.cassandra.streaming.management.StreamEventJMXNotifier.handleStreamEvent(org.apache.cassandra.streaming.StreamEvent)"], ["void", "org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onFailure(java.lang.Throwable)"], ["void", "org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onSuccess(java.lang.Object)"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.management.StreamStateCompositeData$1.apply(org.apache.cassandra.streaming.SessionInfo)"], ["java.lang.Object", "org.apache.cassandra.streaming.management.StreamStateCompositeData$1.apply(java.lang.Object)"], ["org.apache.cassandra.streaming.SessionInfo", "org.apache.cassandra.streaming.management.StreamStateCompositeData$2.apply(javax.management.openmbean.CompositeData)"], ["java.lang.Object", "org.apache.cassandra.streaming.management.StreamStateCompositeData$2.apply(java.lang.Object)"], ["org.apache.cassandra.streaming.management.StreamStateCompositeData", "org.apache.cassandra.streaming.management.StreamStateCompositeData()"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.management.StreamStateCompositeData.toCompositeData(org.apache.cassandra.streaming.StreamState)"], ["org.apache.cassandra.streaming.StreamState", "org.apache.cassandra.streaming.management.StreamStateCompositeData.fromCompositeData(javax.management.openmbean.CompositeData)"], ["org.apache.cassandra.streaming.management.StreamSummaryCompositeData", "org.apache.cassandra.streaming.management.StreamSummaryCompositeData()"], ["javax.management.openmbean.CompositeData", "org.apache.cassandra.streaming.management.StreamSummaryCompositeData.toCompositeData(org.apache.cassandra.streaming.StreamSummary)"], ["org.apache.cassandra.streaming.StreamSummary", "org.apache.cassandra.streaming.management.StreamSummaryCompositeData.fromCompositeData(javax.management.openmbean.CompositeData)"], ["org.apache.cassandra.streaming.messages.CompleteMessage", "org.apache.cassandra.streaming.messages.CompleteMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.CompleteMessage$1.serialize(org.apache.cassandra.streaming.messages.CompleteMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.CompleteMessage$1.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.CompleteMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.CompleteMessage", "org.apache.cassandra.streaming.messages.CompleteMessage()"], ["java.lang.String", "org.apache.cassandra.streaming.messages.CompleteMessage.toString()"], ["org.apache.cassandra.streaming.compress.CompressionInfo", "org.apache.cassandra.streaming.messages.FileMessageHeader$FileMessageHeaderSerializer.serialize(org.apache.cassandra.streaming.messages.FileMessageHeader, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.messages.FileMessageHeader", "org.apache.cassandra.streaming.messages.FileMessageHeader$FileMessageHeaderSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.streaming.messages.FileMessageHeader$FileMessageHeaderSerializer.serializedSize(org.apache.cassandra.streaming.messages.FileMessageHeader, int)"], ["org.apache.cassandra.streaming.messages.FileMessageHeader", "org.apache.cassandra.streaming.messages.FileMessageHeader(java.util.UUID, int, org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.format.SSTableFormat$Type, long, java.util.List<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>, org.apache.cassandra.streaming.compress.CompressionInfo, long, int, org.apache.cassandra.db.SerializationHeader$Component)"], ["org.apache.cassandra.streaming.messages.FileMessageHeader", "org.apache.cassandra.streaming.messages.FileMessageHeader(java.util.UUID, int, org.apache.cassandra.io.sstable.format.Version, org.apache.cassandra.io.sstable.format.SSTableFormat$Type, long, java.util.List<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>, org.apache.cassandra.io.compress.CompressionMetadata, long, int, org.apache.cassandra.db.SerializationHeader$Component)"], ["boolean", "org.apache.cassandra.streaming.messages.FileMessageHeader.isCompressed()"], ["long", "org.apache.cassandra.streaming.messages.FileMessageHeader.size()"], ["java.lang.String", "org.apache.cassandra.streaming.messages.FileMessageHeader.toString()"], ["boolean", "org.apache.cassandra.streaming.messages.FileMessageHeader.equals(java.lang.Object)"], ["int", "org.apache.cassandra.streaming.messages.FileMessageHeader.hashCode()"], ["org.apache.cassandra.streaming.messages.IncomingFileMessage", "org.apache.cassandra.streaming.messages.IncomingFileMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.IncomingFileMessage$1.serialize(org.apache.cassandra.streaming.messages.IncomingFileMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.IncomingFileMessage$1.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.IncomingFileMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.IncomingFileMessage", "org.apache.cassandra.streaming.messages.IncomingFileMessage(org.apache.cassandra.io.sstable.SSTableMultiWriter, org.apache.cassandra.streaming.messages.FileMessageHeader)"], ["java.lang.String", "org.apache.cassandra.streaming.messages.IncomingFileMessage.toString()"], ["org.apache.cassandra.streaming.messages.KeepAliveMessage", "org.apache.cassandra.streaming.messages.KeepAliveMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.KeepAliveMessage$1.serialize(org.apache.cassandra.streaming.messages.KeepAliveMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.KeepAliveMessage$1.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.KeepAliveMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.KeepAliveMessage", "org.apache.cassandra.streaming.messages.KeepAliveMessage()"], ["java.lang.String", "org.apache.cassandra.streaming.messages.KeepAliveMessage.toString()"], ["org.apache.cassandra.streaming.messages.OutgoingFileMessage", "org.apache.cassandra.streaming.messages.OutgoingFileMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.OutgoingFileMessage$1.serialize(org.apache.cassandra.streaming.messages.OutgoingFileMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.OutgoingFileMessage$1.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.OutgoingFileMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.OutgoingFileMessage", "org.apache.cassandra.streaming.messages.OutgoingFileMessage(org.apache.cassandra.utils.concurrent.Ref<org.apache.cassandra.io.sstable.format.SSTableReader>, int, long, java.util.List<org.apache.cassandra.utils.Pair<java.lang.Long, java.lang.Long>>, long, boolean)"], ["synchronized", "org.apache.cassandra.streaming.messages.OutgoingFileMessage.void serialize(org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["synchronized", "org.apache.cassandra.streaming.messages.OutgoingFileMessage.void finishTransfer()"], ["synchronized", "org.apache.cassandra.streaming.messages.OutgoingFileMessage.void startTransfer()"], ["synchronized", "org.apache.cassandra.streaming.messages.OutgoingFileMessage.void complete()"], ["java.lang.String", "org.apache.cassandra.streaming.messages.OutgoingFileMessage.toString()"], ["org.apache.cassandra.streaming.messages.PrepareMessage", "org.apache.cassandra.streaming.messages.PrepareMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.PrepareMessage$1.serialize(org.apache.cassandra.streaming.messages.PrepareMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.PrepareMessage$1.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.PrepareMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.PrepareMessage", "org.apache.cassandra.streaming.messages.PrepareMessage()"], ["java.lang.String", "org.apache.cassandra.streaming.messages.PrepareMessage.toString()"], ["org.apache.cassandra.streaming.messages.ReceivedMessage", "org.apache.cassandra.streaming.messages.ReceivedMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.ReceivedMessage$1.serialize(org.apache.cassandra.streaming.messages.ReceivedMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.ReceivedMessage$1.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.ReceivedMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.ReceivedMessage", "org.apache.cassandra.streaming.messages.ReceivedMessage(java.util.UUID, int)"], ["java.lang.String", "org.apache.cassandra.streaming.messages.ReceivedMessage.toString()"], ["org.apache.cassandra.streaming.messages.RetryMessage", "org.apache.cassandra.streaming.messages.RetryMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.RetryMessage$1.serialize(org.apache.cassandra.streaming.messages.RetryMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.RetryMessage$1.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.RetryMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.RetryMessage", "org.apache.cassandra.streaming.messages.RetryMessage(java.util.UUID, int)"], ["java.lang.String", "org.apache.cassandra.streaming.messages.RetryMessage.toString()"], ["org.apache.cassandra.streaming.messages.SessionFailedMessage", "org.apache.cassandra.streaming.messages.SessionFailedMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.SessionFailedMessage$1.serialize(org.apache.cassandra.streaming.messages.SessionFailedMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.SessionFailedMessage$1.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.SessionFailedMessage$1.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.SessionFailedMessage", "org.apache.cassandra.streaming.messages.SessionFailedMessage()"], ["java.lang.String", "org.apache.cassandra.streaming.messages.SessionFailedMessage.toString()"], ["void", "org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer.serialize(org.apache.cassandra.streaming.messages.StreamInitMessage, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.messages.StreamInitMessage", "org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer.serializedSize(org.apache.cassandra.streaming.messages.StreamInitMessage, int)"], ["long", "org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.streaming.messages.StreamInitMessage", "org.apache.cassandra.streaming.messages.StreamInitMessage(java.net.InetAddress, int, java.util.UUID, java.lang.String, boolean, boolean, boolean)"], ["java.nio.ByteBuffer", "org.apache.cassandra.streaming.messages.StreamInitMessage.createMessage(boolean, int)"], ["org.apache.cassandra.streaming.messages.StreamMessage$Type[]", "org.apache.cassandra.streaming.messages.StreamMessage$Type.values()"], ["org.apache.cassandra.streaming.messages.StreamMessage$Type", "org.apache.cassandra.streaming.messages.StreamMessage$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.streaming.messages.StreamMessage$Type", "org.apache.cassandra.streaming.messages.StreamMessage$Type.get(byte)"], ["void", "org.apache.cassandra.streaming.messages.StreamMessage.serialize(org.apache.cassandra.streaming.messages.StreamMessage, org.apache.cassandra.io.util.DataOutputStreamPlus, int, org.apache.cassandra.streaming.StreamSession)"], ["org.apache.cassandra.streaming.messages.StreamMessage", "org.apache.cassandra.streaming.messages.StreamMessage.deserialize(java.nio.channels.ReadableByteChannel, int, org.apache.cassandra.streaming.StreamSession)"], ["void", "org.apache.cassandra.streaming.messages.StreamMessage.sent()"], ["boolean", "org.apache.cassandra.streaming.messages.StreamMessage.wasSent()"], ["int", "org.apache.cassandra.streaming.messages.StreamMessage.getPriority()"], ["java.lang.Integer", "org.apache.cassandra.thrift.CassandraServer$1.call()"], ["java.lang.Object", "org.apache.cassandra.thrift.CassandraServer$1.call()"], ["org.apache.cassandra.db.SinglePartitionReadCommand", "org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest.readCommand(int)"], ["boolean", "org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest.appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest.makeUpdates(org.apache.cassandra.db.partitions.FilteredPartition)"], ["org.apache.cassandra.thrift.CassandraServer", "org.apache.cassandra.thrift.CassandraServer()"], ["org.apache.cassandra.thrift.ThriftClientState", "org.apache.cassandra.thrift.CassandraServer.state()"], ["java.util.Map<java.nio.ByteBuffer, java.util.List<org.apache.cassandra.thrift.ColumnOrSuperColumn>>", "org.apache.cassandra.thrift.CassandraServer.multiget_slice(java.util.List<java.nio.ByteBuffer>, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SlicePredicate, org.apache.cassandra.thrift.ConsistencyLevel)"], ["org.apache.cassandra.thrift.ColumnOrSuperColumn", "org.apache.cassandra.thrift.CassandraServer.get(java.nio.ByteBuffer, org.apache.cassandra.thrift.ColumnPath, org.apache.cassandra.thrift.ConsistencyLevel)"], ["int", "org.apache.cassandra.thrift.CassandraServer.get_count(java.nio.ByteBuffer, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SlicePredicate, org.apache.cassandra.thrift.ConsistencyLevel)"], ["java.util.Map<java.nio.ByteBuffer, java.lang.Integer>", "org.apache.cassandra.thrift.CassandraServer.multiget_count(java.util.List<java.nio.ByteBuffer>, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SlicePredicate, org.apache.cassandra.thrift.ConsistencyLevel)"], ["void", "org.apache.cassandra.thrift.CassandraServer.insert(java.nio.ByteBuffer, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.Column, org.apache.cassandra.thrift.ConsistencyLevel)"], ["org.apache.cassandra.thrift.CASResult", "org.apache.cassandra.thrift.CassandraServer.cas(java.nio.ByteBuffer, java.lang.String, java.util.List<org.apache.cassandra.thrift.Column>, java.util.List<org.apache.cassandra.thrift.Column>, org.apache.cassandra.thrift.ConsistencyLevel, org.apache.cassandra.thrift.ConsistencyLevel)"], ["void", "org.apache.cassandra.thrift.CassandraServer.batch_mutate(java.util.Map<java.nio.ByteBuffer, java.util.Map<java.lang.String, java.util.List<org.apache.cassandra.thrift.Mutation>>>, org.apache.cassandra.thrift.ConsistencyLevel)"], ["void", "org.apache.cassandra.thrift.CassandraServer.atomic_batch_mutate(java.util.Map<java.nio.ByteBuffer, java.util.Map<java.lang.String, java.util.List<org.apache.cassandra.thrift.Mutation>>>, org.apache.cassandra.thrift.ConsistencyLevel)"], ["void", "org.apache.cassandra.thrift.CassandraServer.remove(java.nio.ByteBuffer, org.apache.cassandra.thrift.ColumnPath, long, org.apache.cassandra.thrift.ConsistencyLevel)"], ["org.apache.cassandra.thrift.KsDef", "org.apache.cassandra.thrift.CassandraServer.describe_keyspace(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.describe_cluster_name()"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.describe_version()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.thrift.CassandraServer.describe_token_map()"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.describe_partitioner()"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.describe_snitch()"], ["void", "org.apache.cassandra.thrift.CassandraServer.login(org.apache.cassandra.thrift.AuthenticationRequest)"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.system_add_column_family(org.apache.cassandra.thrift.CfDef)"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.system_drop_column_family(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.system_add_keyspace(org.apache.cassandra.thrift.KsDef)"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.system_drop_keyspace(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.system_update_keyspace(org.apache.cassandra.thrift.KsDef)"], ["java.lang.String", "org.apache.cassandra.thrift.CassandraServer.system_update_column_family(org.apache.cassandra.thrift.CfDef)"], ["void", "org.apache.cassandra.thrift.CassandraServer.truncate(java.lang.String)"], ["void", "org.apache.cassandra.thrift.CassandraServer.set_keyspace(java.lang.String)"], ["java.util.Map<java.lang.String, java.util.List<java.lang.String>>", "org.apache.cassandra.thrift.CassandraServer.describe_schema_versions()"], ["void", "org.apache.cassandra.thrift.CassandraServer.add(java.nio.ByteBuffer, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.CounterColumn, org.apache.cassandra.thrift.ConsistencyLevel)"], ["void", "org.apache.cassandra.thrift.CassandraServer.remove_counter(java.nio.ByteBuffer, org.apache.cassandra.thrift.ColumnPath, org.apache.cassandra.thrift.ConsistencyLevel)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.thrift.CassandraServer.execute_cql_query(java.nio.ByteBuffer, org.apache.cassandra.thrift.Compression)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.thrift.CassandraServer.execute_cql3_query(java.nio.ByteBuffer, org.apache.cassandra.thrift.Compression, org.apache.cassandra.thrift.ConsistencyLevel)"], ["org.apache.cassandra.thrift.CqlPreparedResult", "org.apache.cassandra.thrift.CassandraServer.prepare_cql_query(java.nio.ByteBuffer, org.apache.cassandra.thrift.Compression)"], ["org.apache.cassandra.thrift.CqlPreparedResult", "org.apache.cassandra.thrift.CassandraServer.prepare_cql3_query(java.nio.ByteBuffer, org.apache.cassandra.thrift.Compression)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.thrift.CassandraServer.execute_prepared_cql_query(int, java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.thrift.CassandraServer.execute_prepared_cql3_query(int, java.util.List<java.nio.ByteBuffer>, org.apache.cassandra.thrift.ConsistencyLevel)"], ["void", "org.apache.cassandra.thrift.CassandraServer.set_cql_version(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.thrift.CassandraServer.trace_next_query()"], ["org.apache.cassandra.thrift.CustomTNonBlockingServer$CustomFrameBuffer", "org.apache.cassandra.thrift.CustomTNonBlockingServer$CustomFrameBuffer(org.apache.cassandra.thrift.CustomTNonBlockingServer, org.apache.thrift.transport.TNonblockingTransport, java.nio.channels.SelectionKey, org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)"], ["org.apache.thrift.transport.TNonblockingTransport", "org.apache.cassandra.thrift.CustomTNonBlockingServer$CustomFrameBuffer.getTransport()"], ["org.apache.cassandra.thrift.CustomTNonBlockingServer$Factory", "org.apache.cassandra.thrift.CustomTNonBlockingServer$Factory()"], ["org.apache.thrift.server.TServer", "org.apache.cassandra.thrift.CustomTNonBlockingServer$Factory.buildTServer(org.apache.cassandra.thrift.TServerFactory$Args)"], ["org.apache.cassandra.thrift.CustomTNonBlockingServer", "org.apache.cassandra.thrift.CustomTNonBlockingServer(org.apache.thrift.server.TNonblockingServer$Args)"], ["org.apache.cassandra.thrift.CustomTThreadPoolServer$Factory", "org.apache.cassandra.thrift.CustomTThreadPoolServer$Factory()"], ["org.apache.thrift.server.TServer", "org.apache.cassandra.thrift.CustomTThreadPoolServer$Factory.buildTServer(org.apache.cassandra.thrift.TServerFactory$Args)"], ["void", "org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess.run()"], ["org.apache.cassandra.thrift.CustomTThreadPoolServer", "org.apache.cassandra.thrift.CustomTThreadPoolServer(org.apache.thrift.server.TThreadPoolServer$Args, java.util.concurrent.ExecutorService)"], ["void", "org.apache.cassandra.thrift.CustomTThreadPoolServer.serve()"], ["void", "org.apache.cassandra.thrift.CustomTThreadPoolServer.stop()"], ["org.apache.cassandra.thrift.SSLTransportFactory", "org.apache.cassandra.thrift.SSLTransportFactory()"], ["org.apache.thrift.transport.TTransport", "org.apache.cassandra.thrift.SSLTransportFactory.openTransport(java.lang.String, int)"], ["void", "org.apache.cassandra.thrift.SSLTransportFactory.setOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.thrift.TCustomNonblockingServerSocket", "org.apache.cassandra.thrift.TCustomNonblockingServerSocket(java.net.InetSocketAddress, boolean, java.lang.Integer, java.lang.Integer)"], ["org.apache.cassandra.thrift.TCustomServerSocket", "org.apache.cassandra.thrift.TCustomServerSocket(java.net.InetSocketAddress, boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer)"], ["org.apache.cassandra.thrift.TCustomServerSocket", "org.apache.cassandra.thrift.TCustomServerSocket(java.net.ServerSocket, boolean, java.lang.Integer, java.lang.Integer)"], ["void", "org.apache.cassandra.thrift.TCustomServerSocket.listen()"], ["void", "org.apache.cassandra.thrift.TCustomServerSocket.close()"], ["void", "org.apache.cassandra.thrift.TCustomServerSocket.interrupt()"], ["org.apache.cassandra.thrift.TCustomSocket", "org.apache.cassandra.thrift.TCustomSocket(java.net.Socket)"], ["org.apache.cassandra.thrift.TCustomSocket", "org.apache.cassandra.thrift.TCustomSocket(java.lang.String, int)"], ["org.apache.cassandra.thrift.TCustomSocket", "org.apache.cassandra.thrift.TCustomSocket(java.lang.String, int, int)"], ["void", "org.apache.cassandra.thrift.TCustomSocket.setTimeout(int)"], ["java.net.Socket", "org.apache.cassandra.thrift.TCustomSocket.getSocket()"], ["boolean", "org.apache.cassandra.thrift.TCustomSocket.isOpen()"], ["void", "org.apache.cassandra.thrift.TCustomSocket.open()"], ["void", "org.apache.cassandra.thrift.TCustomSocket.close()"], ["org.apache.cassandra.thrift.THsHaDisruptorServer$Factory", "org.apache.cassandra.thrift.THsHaDisruptorServer$Factory()"], ["org.apache.thrift.server.TServer", "org.apache.cassandra.thrift.THsHaDisruptorServer$Factory.buildTServer(org.apache.cassandra.thrift.TServerFactory$Args)"], ["org.apache.cassandra.thrift.THsHaDisruptorServer", "org.apache.cassandra.thrift.THsHaDisruptorServer(com.thinkaurelius.thrift.TDisruptorServer$Args)"], ["void", "org.apache.cassandra.thrift.THsHaDisruptorServer.beforeClose(com.thinkaurelius.thrift.Message)"], ["org.apache.cassandra.thrift.TServerCustomFactory", "org.apache.cassandra.thrift.TServerCustomFactory(java.lang.String)"], ["org.apache.thrift.server.TServer", "org.apache.cassandra.thrift.TServerCustomFactory.buildTServer(org.apache.cassandra.thrift.TServerFactory$Args)"], ["org.apache.cassandra.thrift.TServerFactory$Args", "org.apache.cassandra.thrift.TServerFactory$Args()"], ["org.apache.cassandra.thrift.ThriftClientState", "org.apache.cassandra.thrift.ThriftClientState(java.net.InetSocketAddress)"], ["org.apache.cassandra.service.QueryState", "org.apache.cassandra.thrift.ThriftClientState.getQueryState()"], ["java.lang.String", "org.apache.cassandra.thrift.ThriftClientState.getSchedulingValue()"], ["org.apache.cassandra.thrift.ThriftConversion", "org.apache.cassandra.thrift.ThriftConversion()"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.thrift.ThriftConversion.fromThrift(org.apache.cassandra.thrift.ConsistencyLevel)"], ["org.apache.cassandra.thrift.ConsistencyLevel", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.db.ConsistencyLevel)"], ["java.lang.RuntimeException", "org.apache.cassandra.thrift.ThriftConversion.rethrow(org.apache.cassandra.exceptions.RequestExecutionException)"], ["org.apache.cassandra.thrift.InvalidRequestException", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.exceptions.RequestValidationException)"], ["org.apache.cassandra.thrift.UnavailableException", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.exceptions.UnavailableException)"], ["org.apache.cassandra.thrift.AuthenticationException", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.exceptions.AuthenticationException)"], ["org.apache.cassandra.thrift.TimedOutException", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.exceptions.RequestTimeoutException)"], ["org.apache.cassandra.thrift.TimedOutException", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.exceptions.RequestFailureException)"], ["org.apache.cassandra.db.filter.RowFilter", "org.apache.cassandra.thrift.ThriftConversion.rowFilterFromThrift(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.thrift.IndexExpression>)"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.thrift.ThriftConversion.fromThrift(org.apache.cassandra.thrift.KsDef, org.apache.cassandra.config.CFMetaData...)"], ["org.apache.cassandra.thrift.KsDef", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.schema.KeyspaceMetadata)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.thrift.ThriftConversion.fromThrift(org.apache.cassandra.thrift.CfDef)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.thrift.ThriftConversion.fromThriftForUpdate(org.apache.cassandra.thrift.CfDef, org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.thrift.CfDef", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.config.CFMetaData)"], ["org.apache.cassandra.config.ColumnDefinition", "org.apache.cassandra.thrift.ThriftConversion.fromThrift(java.lang.String, java.lang.String, org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.db.marshal.AbstractType<?>, org.apache.cassandra.thrift.ColumnDef)"], ["org.apache.cassandra.thrift.ColumnDef", "org.apache.cassandra.thrift.ThriftConversion.toThrift(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.config.ColumnDefinition)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.thrift.ThriftConversion.compressionParametersToThrift(org.apache.cassandra.schema.CompressionParams)"], ["org.apache.cassandra.schema.CachingParams", "org.apache.cassandra.thrift.ThriftConversion.cachingFromThrift(java.lang.String, java.lang.String)"], ["staticRow()", "org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger."], ["boolean", "org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger.hasNext()"], ["org.apache.cassandra.db.rows.Unfiltered", "org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger.next()"], ["java.lang.Object", "org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger.next()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.partitions.UnfilteredPartitionIterator", "org.apache.cassandra.thrift.ThriftResultsMerger.maybeWrap(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator, org.apache.cassandra.config.CFMetaData, int)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.thrift.ThriftResultsMerger.maybeWrap(org.apache.cassandra.db.rows.UnfilteredRowIterator, int)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.thrift.ThriftResultsMerger.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.db.rows.BaseRowIterator", "org.apache.cassandra.thrift.ThriftResultsMerger.applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)"], ["org.apache.cassandra.thrift.ThriftServer$ThriftServerThread", "org.apache.cassandra.thrift.ThriftServer$ThriftServerThread(java.net.InetAddress, int, int, org.apache.thrift.TProcessor, org.apache.thrift.transport.TTransportFactory)"], ["void", "org.apache.cassandra.thrift.ThriftServer$ThriftServerThread.run()"], ["void", "org.apache.cassandra.thrift.ThriftServer$ThriftServerThread.stopServer()"], ["org.apache.cassandra.thrift.ThriftServer$ThriftServerType", "org.apache.cassandra.thrift.ThriftServer$ThriftServerType()"], ["org.apache.cassandra.thrift.ThriftServer", "org.apache.cassandra.thrift.ThriftServer(java.net.InetAddress, int, int)"], ["void", "org.apache.cassandra.thrift.ThriftServer.start()"], ["synchronized", "org.apache.cassandra.thrift.ThriftServer.void stop()"], ["boolean", "org.apache.cassandra.thrift.ThriftServer.isRunning()"], ["org.apache.cassandra.thrift.ThriftSessionManager", "org.apache.cassandra.thrift.ThriftSessionManager()"], ["void", "org.apache.cassandra.thrift.ThriftSessionManager.setCurrentSocket(java.net.SocketAddress)"], ["org.apache.cassandra.thrift.ThriftClientState", "org.apache.cassandra.thrift.ThriftSessionManager.currentSession()"], ["void", "org.apache.cassandra.thrift.ThriftSessionManager.connectionComplete(java.net.SocketAddress)"], ["int", "org.apache.cassandra.thrift.ThriftSessionManager.getConnectedClients()"], ["org.apache.cassandra.thrift.ThriftValidation", "org.apache.cassandra.thrift.ThriftValidation()"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateKey(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateKeyspace(java.lang.String)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily(java.lang.String, java.lang.String, boolean)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily(java.lang.String, java.lang.String)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.thrift.ThriftValidation.validateColumnFamilyWithCompactMode(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateColumnPath(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnPath)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateColumnParent(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnParent)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateColumnNames(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnParent, java.lang.Iterable<java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateRange(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SliceRange)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateColumnOrSuperColumn(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnOrSuperColumn)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateMutation(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.Mutation)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateDeletion(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.Deletion)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateSlicePredicate(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.thrift.SlicePredicate)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateColumnData(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.thrift.Column)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validatePredicate(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.ColumnParent, org.apache.cassandra.thrift.SlicePredicate)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateKeyRange(org.apache.cassandra.config.CFMetaData, java.nio.ByteBuffer, org.apache.cassandra.thrift.KeyRange)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateIndexClauses(org.apache.cassandra.config.CFMetaData, org.apache.cassandra.thrift.IndexClause)"], ["boolean", "org.apache.cassandra.thrift.ThriftValidation.validateFilterClauses(org.apache.cassandra.config.CFMetaData, java.util.List<org.apache.cassandra.thrift.IndexExpression>)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateKeyspaceNotYetExisting(java.lang.String)"], ["void", "org.apache.cassandra.thrift.ThriftValidation.validateKeyspaceNotSystem(java.lang.String)"], ["org.apache.cassandra.tools.AbstractJmxClient", "org.apache.cassandra.tools.AbstractJmxClient(java.lang.String, java.lang.Integer, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.close()"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.writeln(java.lang.Throwable)"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.writeln(java.lang.String)"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.write(java.lang.String)"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.writeln(java.lang.String, java.lang.Object...)"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.write(java.lang.String, java.lang.Object...)"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.setOutput(java.io.PrintStream)"], ["org.apache.commons.cli.CommandLine", "org.apache.cassandra.tools.AbstractJmxClient.processArguments(java.lang.String[])"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.addCmdOption(java.lang.String, java.lang.String, boolean, java.lang.String)"], ["void", "org.apache.cassandra.tools.AbstractJmxClient.printHelp(java.lang.String, java.lang.String)"], ["org.apache.cassandra.tools.BootstrapMonitor", "org.apache.cassandra.tools.BootstrapMonitor(java.io.PrintStream)"], ["void", "org.apache.cassandra.tools.BootstrapMonitor.awaitCompletion()"], ["boolean", "org.apache.cassandra.tools.BootstrapMonitor.isInterestedIn(java.lang.String)"], ["void", "org.apache.cassandra.tools.BootstrapMonitor.handleNotificationLost(long, java.lang.String)"], ["void", "org.apache.cassandra.tools.BootstrapMonitor.handleConnectionClosed(long, java.lang.String)"], ["void", "org.apache.cassandra.tools.BootstrapMonitor.handleConnectionFailed(long, java.lang.String)"], ["void", "org.apache.cassandra.tools.BootstrapMonitor.progress(java.lang.String, org.apache.cassandra.utils.progress.ProgressEvent)"], ["org.apache.cassandra.tools.BulkLoadConnectionFactory", "org.apache.cassandra.tools.BulkLoadConnectionFactory(int, int, org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions, boolean)"], ["java.net.Socket", "org.apache.cassandra.tools.BulkLoadConnectionFactory.createConnection(java.net.InetAddress)"], ["org.apache.cassandra.tools.BulkLoadException", "org.apache.cassandra.tools.BulkLoadException(java.lang.Throwable)"], ["org.apache.cassandra.tools.BulkLoader$CmdLineOptions", "org.apache.cassandra.tools.BulkLoader$CmdLineOptions()"], ["org.apache.commons.cli.Options", "org.apache.cassandra.tools.BulkLoader$CmdLineOptions.addOption(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.commons.cli.Options", "org.apache.cassandra.tools.BulkLoader$CmdLineOptions.addOption(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.cassandra.tools.BulkLoader$ExternalClient", "org.apache.cassandra.tools.BulkLoader$ExternalClient(java.util.Set<java.net.InetAddress>, int, com.datastax.driver.core.AuthProvider, int, int, org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions, com.datastax.driver.core.SSLOptions)"], ["org.apache.cassandra.streaming.StreamConnectionFactory", "org.apache.cassandra.tools.BulkLoader$ExternalClient.getConnectionFactory()"], ["org.apache.cassandra.tools.BulkLoader$ProgressIndicator", "org.apache.cassandra.tools.BulkLoader$ProgressIndicator()"], ["void", "org.apache.cassandra.tools.BulkLoader$ProgressIndicator.onSuccess(org.apache.cassandra.streaming.StreamState)"], ["void", "org.apache.cassandra.tools.BulkLoader$ProgressIndicator.onFailure(java.lang.Throwable)"], ["synchronized", "org.apache.cassandra.tools.BulkLoader$ProgressIndicator.void handleStreamEvent(org.apache.cassandra.streaming.StreamEvent)"], ["void", "org.apache.cassandra.tools.BulkLoader$ProgressIndicator.onSuccess(java.lang.Object)"], ["org.apache.cassandra.tools.BulkLoader", "org.apache.cassandra.tools.BulkLoader()"], ["void", "org.apache.cassandra.tools.BulkLoader.main(java.lang.String[])"], ["void", "org.apache.cassandra.tools.BulkLoader.load(org.apache.cassandra.tools.LoaderOptions)"], ["int", "org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator$1.compare(java.util.Map$Entry<java.lang.String, org.apache.cassandra.db.ColumnFamilyStoreMBean>, java.util.Map$Entry<java.lang.String, org.apache.cassandra.db.ColumnFamilyStoreMBean>)"], ["int", "org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator", "org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator(javax.management.MBeanServerConnection)"], ["boolean", "org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.hasNext()"], ["java.util.Map$Entry<java.lang.String, org.apache.cassandra.db.ColumnFamilyStoreMBean>", "org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.next()"], ["void", "org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.remove()"], ["java.lang.Object", "org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.next()"], ["org.apache.cassandra.tools.GetVersion", "org.apache.cassandra.tools.GetVersion()"], ["void", "org.apache.cassandra.tools.GetVersion.main(java.lang.String[])"], ["void", "org.apache.cassandra.tools.JMXConnection.close()"], ["javax.management.MBeanServerConnection", "org.apache.cassandra.tools.JMXConnection.getMbeanServerConn()"], ["boolean", "org.apache.cassandra.tools.JsonTransformer$CompactIndenter.isInline()"], ["void", "org.apache.cassandra.tools.JsonTransformer$CompactIndenter.setCompact(boolean)"], ["void", "org.apache.cassandra.tools.JsonTransformer$CompactIndenter.writeIndentation(org.codehaus.jackson.JsonGenerator, int)"], ["void", "org.apache.cassandra.tools.JsonTransformer.toJson(org.apache.cassandra.io.sstable.ISSTableScanner, java.util.stream.Stream<org.apache.cassandra.db.rows.UnfilteredRowIterator>, boolean, org.apache.cassandra.config.CFMetaData, java.io.OutputStream)"], ["void", "org.apache.cassandra.tools.JsonTransformer.keysToJson(org.apache.cassandra.io.sstable.ISSTableScanner, java.util.stream.Stream<org.apache.cassandra.db.DecoratedKey>, boolean, org.apache.cassandra.config.CFMetaData, java.io.OutputStream)"], ["org.apache.cassandra.tools.LoaderOptions", "org.apache.cassandra.tools.LoaderOptions$Builder.build()"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.directory(java.io.File)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.debug(boolean)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.verbose(boolean)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.noProgress(boolean)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.nativePort(int)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.user(java.lang.String)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.password(java.lang.String)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.authProvider(com.datastax.driver.core.AuthProvider)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.throttle(int)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.interDcThrottle(int)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.storagePort(int)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.sslStoragePort(int)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.encOptions(org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.connectionsPerHost(int)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.serverEncOptions(org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.hosts(java.util.Set<java.net.InetAddress>)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.host(java.net.InetAddress)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.ignore(java.util.Set<java.net.InetAddress>)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.ignore(java.net.InetAddress)"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions$Builder.parseArgs(java.lang.String[])"], ["org.apache.cassandra.tools.LoaderOptions$Builder", "org.apache.cassandra.tools.LoaderOptions.builder()"], ["void", "org.apache.cassandra.tools.LoaderOptions.printUsage(org.apache.commons.cli.Options)"], ["org.apache.cassandra.streaming.StreamState", "org.apache.cassandra.tools.NodeProbe$1.apply(javax.management.openmbean.CompositeData)"], ["java.lang.Object", "org.apache.cassandra.tools.NodeProbe$1.apply(java.lang.Object)"], ["org.apache.cassandra.tools.NodeProbe", "org.apache.cassandra.tools.NodeProbe(java.lang.String, int, java.lang.String, java.lang.String)"], ["org.apache.cassandra.tools.NodeProbe", "org.apache.cassandra.tools.NodeProbe(java.lang.String, int)"], ["org.apache.cassandra.tools.NodeProbe", "org.apache.cassandra.tools.NodeProbe(java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.close()"], ["int", "org.apache.cassandra.tools.NodeProbe.forceKeyspaceCleanup(int, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.tools.NodeProbe.scrub(boolean, boolean, boolean, boolean, int, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.tools.NodeProbe.verify(boolean, java.lang.String, java.lang.String...)"], ["int", "org.apache.cassandra.tools.NodeProbe.upgradeSSTables(java.lang.String, boolean, int, java.lang.String...)"], ["int", "org.apache.cassandra.tools.NodeProbe.garbageCollect(java.lang.String, int, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.forceKeyspaceCleanup(java.io.PrintStream, int, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.scrub(java.io.PrintStream, boolean, boolean, boolean, boolean, int, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.verify(java.io.PrintStream, boolean, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.upgradeSSTables(java.io.PrintStream, java.lang.String, boolean, int, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.garbageCollect(java.io.PrintStream, java.lang.String, int, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.forceUserDefinedCompaction(java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.forceKeyspaceCompaction(boolean, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.relocateSSTables(int, java.lang.String, java.lang.String[])"], ["void", "org.apache.cassandra.tools.NodeProbe.forceKeyspaceCompactionForTokenRange(java.lang.String, java.lang.String, java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.forceKeyspaceFlush(java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.repairAsync(java.io.PrintStream, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["java.util.Map<org.apache.cassandra.metrics.TableMetrics$Sampler, javax.management.openmbean.CompositeData>", "org.apache.cassandra.tools.NodeProbe.getPartitionSample(java.lang.String, java.lang.String, int, int, int, java.util.List<org.apache.cassandra.metrics.TableMetrics$Sampler>)"], ["void", "org.apache.cassandra.tools.NodeProbe.invalidateCounterCache()"], ["void", "org.apache.cassandra.tools.NodeProbe.invalidateKeyCache()"], ["void", "org.apache.cassandra.tools.NodeProbe.invalidateRowCache()"], ["void", "org.apache.cassandra.tools.NodeProbe.drain()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.tools.NodeProbe.getTokenToEndpointMap()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.tools.NodeProbe.getLoadMap()"], ["java.util.Map<java.net.InetAddress, java.lang.Float>", "org.apache.cassandra.tools.NodeProbe.getOwnership()"], ["java.util.Map<java.net.InetAddress, java.lang.Float>", "org.apache.cassandra.tools.NodeProbe.effectiveOwnership(java.lang.String)"], ["org.apache.cassandra.service.CacheServiceMBean", "org.apache.cassandra.tools.NodeProbe.getCacheServiceMBean()"], ["double[]", "org.apache.cassandra.tools.NodeProbe.getAndResetGCStats()"], ["java.util.Iterator<java.util.Map$Entry<java.lang.String, org.apache.cassandra.db.ColumnFamilyStoreMBean>>", "org.apache.cassandra.tools.NodeProbe.getColumnFamilyStoreMBeanProxies()"], ["org.apache.cassandra.db.compaction.CompactionManagerMBean", "org.apache.cassandra.tools.NodeProbe.getCompactionManagerProxy()"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getLocalHostId()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.tools.NodeProbe.getHostIdMap()"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getLoadString()"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getReleaseVersion()"], ["int", "org.apache.cassandra.tools.NodeProbe.getCurrentGenerationNumber()"], ["long", "org.apache.cassandra.tools.NodeProbe.getUptime()"], ["java.lang.management.MemoryUsage", "org.apache.cassandra.tools.NodeProbe.getHeapMemoryUsage()"], ["void", "org.apache.cassandra.tools.NodeProbe.takeSnapshot(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.takeMultipleTableSnapshot(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.clearSnapshot(java.lang.String, java.lang.String...)"], ["java.util.Map<java.lang.String, javax.management.openmbean.TabularData>", "org.apache.cassandra.tools.NodeProbe.getSnapshotDetails()"], ["long", "org.apache.cassandra.tools.NodeProbe.trueSnapshotsSize()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isJoined()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isDrained()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isDraining()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isBootstrapMode()"], ["void", "org.apache.cassandra.tools.NodeProbe.joinRing()"], ["void", "org.apache.cassandra.tools.NodeProbe.decommission()"], ["void", "org.apache.cassandra.tools.NodeProbe.move(java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.removeNode(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getRemovalStatus()"], ["void", "org.apache.cassandra.tools.NodeProbe.forceRemoveCompletion()"], ["void", "org.apache.cassandra.tools.NodeProbe.assassinateEndpoint(java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.setCompactionThreshold(java.lang.String, java.lang.String, int, int)"], ["void", "org.apache.cassandra.tools.NodeProbe.disableAutoCompaction(java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.enableAutoCompaction(java.lang.String, java.lang.String...)"], ["void", "org.apache.cassandra.tools.NodeProbe.setIncrementalBackupsEnabled(boolean)"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isIncrementalBackupsEnabled()"], ["void", "org.apache.cassandra.tools.NodeProbe.setCacheCapacities(int, int, int)"], ["void", "org.apache.cassandra.tools.NodeProbe.setCacheKeysToSave(int, int, int)"], ["void", "org.apache.cassandra.tools.NodeProbe.setHintedHandoffThrottleInKB(int)"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getOperationMode()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isStarting()"], ["void", "org.apache.cassandra.tools.NodeProbe.truncate(java.lang.String, java.lang.String)"], ["org.apache.cassandra.locator.EndpointSnitchInfoMBean", "org.apache.cassandra.tools.NodeProbe.getEndpointSnitchInfoProxy()"], ["org.apache.cassandra.locator.DynamicEndpointSnitchMBean", "org.apache.cassandra.tools.NodeProbe.getDynamicEndpointSnitchInfoProxy()"], ["org.apache.cassandra.db.ColumnFamilyStoreMBean", "org.apache.cassandra.tools.NodeProbe.getCfsProxy(java.lang.String, java.lang.String)"], ["org.apache.cassandra.service.StorageProxyMBean", "org.apache.cassandra.tools.NodeProbe.getSpProxy()"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getEndpoint()"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getDataCenter()"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getRack()"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getClusterName()"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getPartitioner()"], ["void", "org.apache.cassandra.tools.NodeProbe.disableHintedHandoff()"], ["void", "org.apache.cassandra.tools.NodeProbe.enableHintedHandoff()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isHandoffEnabled()"], ["void", "org.apache.cassandra.tools.NodeProbe.enableHintsForDC(java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.disableHintsForDC(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.tools.NodeProbe.getViewBuildStatuses(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.pauseHintsDelivery()"], ["void", "org.apache.cassandra.tools.NodeProbe.resumeHintsDelivery()"], ["void", "org.apache.cassandra.tools.NodeProbe.truncateHints(java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.truncateHints()"], ["void", "org.apache.cassandra.tools.NodeProbe.refreshSizeEstimates()"], ["void", "org.apache.cassandra.tools.NodeProbe.stopNativeTransport()"], ["void", "org.apache.cassandra.tools.NodeProbe.startNativeTransport()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isNativeTransportRunning()"], ["void", "org.apache.cassandra.tools.NodeProbe.stopGossiping()"], ["void", "org.apache.cassandra.tools.NodeProbe.startGossiping()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isGossipRunning()"], ["void", "org.apache.cassandra.tools.NodeProbe.stopThriftServer()"], ["void", "org.apache.cassandra.tools.NodeProbe.startThriftServer()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isThriftServerRunning()"], ["void", "org.apache.cassandra.tools.NodeProbe.stopCassandraDaemon()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isInitialized()"], ["void", "org.apache.cassandra.tools.NodeProbe.setCompactionThroughput(int)"], ["int", "org.apache.cassandra.tools.NodeProbe.getCompactionThroughput()"], ["void", "org.apache.cassandra.tools.NodeProbe.setConcurrentCompactors(int)"], ["int", "org.apache.cassandra.tools.NodeProbe.getConcurrentCompactors()"], ["long", "org.apache.cassandra.tools.NodeProbe.getTimeout(java.lang.String)"], ["int", "org.apache.cassandra.tools.NodeProbe.getStreamThroughput()"], ["int", "org.apache.cassandra.tools.NodeProbe.getInterDCStreamThroughput()"], ["double", "org.apache.cassandra.tools.NodeProbe.getTraceProbability()"], ["int", "org.apache.cassandra.tools.NodeProbe.getExceptionCount()"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.apache.cassandra.tools.NodeProbe.getDroppedMessages()"], ["void", "org.apache.cassandra.tools.NodeProbe.loadNewSSTables(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.rebuildIndex(java.lang.String, java.lang.String, java.lang.String...)"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getGossipInfo()"], ["void", "org.apache.cassandra.tools.NodeProbe.stop(java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.setTimeout(java.lang.String, long)"], ["void", "org.apache.cassandra.tools.NodeProbe.stopById(java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.setStreamThroughput(int)"], ["void", "org.apache.cassandra.tools.NodeProbe.setInterDCStreamThroughput(int)"], ["void", "org.apache.cassandra.tools.NodeProbe.setTraceProbability(double)"], ["java.lang.String", "org.apache.cassandra.tools.NodeProbe.getSchemaVersion()"], ["void", "org.apache.cassandra.tools.NodeProbe.rebuild(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.tools.NodeProbe.resetLocalSchema()"], ["void", "org.apache.cassandra.tools.NodeProbe.reloadLocalSchema()"], ["boolean", "org.apache.cassandra.tools.NodeProbe.isFailed()"], ["long", "org.apache.cassandra.tools.NodeProbe.getReadRepairAttempted()"], ["long", "org.apache.cassandra.tools.NodeProbe.getReadRepairRepairedBlocking()"], ["long", "org.apache.cassandra.tools.NodeProbe.getReadRepairRepairedBackground()"], ["java.lang.Object", "org.apache.cassandra.tools.NodeProbe.getCacheMetric(java.lang.String, java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.tools.NodeProbe.getThreadPoolMetric(java.lang.String, java.lang.String, java.lang.String)"], ["com.google.common.collect.Multimap<java.lang.String, java.lang.String>", "org.apache.cassandra.tools.NodeProbe.getThreadPools()"], ["int", "org.apache.cassandra.tools.NodeProbe.getNumberOfTables()"], ["java.lang.Object", "org.apache.cassandra.tools.NodeProbe.getColumnFamilyMetric(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimerMBean", "org.apache.cassandra.tools.NodeProbe.getProxyMetric(java.lang.String)"], ["java.lang.Object", "org.apache.cassandra.tools.NodeProbe.getCompactionMetric(java.lang.String)"], ["long", "org.apache.cassandra.tools.NodeProbe.getStorageMetric(java.lang.String)"], ["double[]", "org.apache.cassandra.tools.NodeProbe.metricPercentilesAsArray(org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogramMBean)"], ["double[]", "org.apache.cassandra.tools.NodeProbe.metricPercentilesAsArray(org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimerMBean)"], ["javax.management.openmbean.TabularData", "org.apache.cassandra.tools.NodeProbe.getCompactionHistory()"], ["void", "org.apache.cassandra.tools.NodeProbe.reloadTriggers()"], ["void", "org.apache.cassandra.tools.NodeProbe.setLoggingLevel(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.tools.NodeProbe.getLoggingLevels()"], ["void", "org.apache.cassandra.tools.NodeProbe.resumeBootstrap(java.io.PrintStream)"], ["void", "org.apache.cassandra.tools.NodeProbe.replayBatchlog()"], ["javax.management.openmbean.TabularData", "org.apache.cassandra.tools.NodeProbe.getFailureDetectorPhilValues()"], ["org.apache.cassandra.tools.NodeTool$NodeToolCmd$KeyspaceSet[]", "org.apache.cassandra.tools.NodeTool$NodeToolCmd$KeyspaceSet.values()"], ["org.apache.cassandra.tools.NodeTool$NodeToolCmd$KeyspaceSet", "org.apache.cassandra.tools.NodeTool$NodeToolCmd$KeyspaceSet.valueOf(java.lang.String)"], ["org.apache.cassandra.tools.NodeTool$NodeToolCmd", "org.apache.cassandra.tools.NodeTool$NodeToolCmd()"], ["void", "org.apache.cassandra.tools.NodeTool$NodeToolCmd.run()"], ["org.apache.cassandra.tools.NodeTool", "org.apache.cassandra.tools.NodeTool()"], ["void", "org.apache.cassandra.tools.NodeTool.main(java.lang.String...)"], ["java.util.SortedMap<java.lang.String, org.apache.cassandra.tools.nodetool.SetHostStat>", "org.apache.cassandra.tools.NodeTool.getOwnershipByDc(org.apache.cassandra.tools.NodeProbe, boolean, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.net.InetAddress, java.lang.Float>)"], ["org.apache.cassandra.tools.RepairRunner", "org.apache.cassandra.tools.RepairRunner(java.io.PrintStream, org.apache.cassandra.service.StorageServiceMBean, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["void", "org.apache.cassandra.tools.RepairRunner.run()"], ["boolean", "org.apache.cassandra.tools.RepairRunner.isInterestedIn(java.lang.String)"], ["void", "org.apache.cassandra.tools.RepairRunner.handleNotificationLost(long, java.lang.String)"], ["void", "org.apache.cassandra.tools.RepairRunner.handleConnectionClosed(long, java.lang.String)"], ["void", "org.apache.cassandra.tools.RepairRunner.handleConnectionFailed(long, java.lang.String)"], ["void", "org.apache.cassandra.tools.RepairRunner.progress(java.lang.String, org.apache.cassandra.utils.progress.ProgressEvent)"], ["org.apache.cassandra.tools.SSTableExpiredBlockers", "org.apache.cassandra.tools.SSTableExpiredBlockers()"], ["void", "org.apache.cassandra.tools.SSTableExpiredBlockers.main(java.lang.String[])"], ["com.google.common.collect.Multimap<org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.sstable.format.SSTableReader>", "org.apache.cassandra.tools.SSTableExpiredBlockers.checkForExpiredSSTableBlockers(java.lang.Iterable<org.apache.cassandra.io.sstable.format.SSTableReader>, int)"], ["org.apache.cassandra.tools.SSTableExport", "org.apache.cassandra.tools.SSTableExport()"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.tools.SSTableExport.metadataFromSSTable(org.apache.cassandra.io.sstable.Descriptor)"], ["void", "org.apache.cassandra.tools.SSTableExport.main(java.lang.String[])"], ["org.apache.cassandra.tools.SSTableLevelResetter", "org.apache.cassandra.tools.SSTableLevelResetter()"], ["void", "org.apache.cassandra.tools.SSTableLevelResetter.main(java.lang.String[])"], ["org.apache.cassandra.tools.SSTableMetadataViewer", "org.apache.cassandra.tools.SSTableMetadataViewer()"], ["void", "org.apache.cassandra.tools.SSTableMetadataViewer.main(java.lang.String[])"], ["int", "org.apache.cassandra.tools.SSTableOfflineRelevel$Relevel$1.compare(org.apache.cassandra.io.sstable.format.SSTableReader, org.apache.cassandra.io.sstable.format.SSTableReader)"], ["int", "org.apache.cassandra.tools.SSTableOfflineRelevel$Relevel$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.tools.SSTableOfflineRelevel$Relevel", "org.apache.cassandra.tools.SSTableOfflineRelevel$Relevel(java.util.Set<org.apache.cassandra.io.sstable.format.SSTableReader>)"], ["void", "org.apache.cassandra.tools.SSTableOfflineRelevel$Relevel.relevel(boolean)"], ["org.apache.cassandra.tools.SSTableOfflineRelevel", "org.apache.cassandra.tools.SSTableOfflineRelevel()"], ["void", "org.apache.cassandra.tools.SSTableOfflineRelevel.main(java.lang.String[])"], ["org.apache.cassandra.tools.SSTableRepairedAtSetter", "org.apache.cassandra.tools.SSTableRepairedAtSetter()"], ["void", "org.apache.cassandra.tools.SSTableRepairedAtSetter.main(java.lang.String[])"], ["org.apache.cassandra.tools.StandaloneSSTableUtil$Options$FileType[]", "org.apache.cassandra.tools.StandaloneSSTableUtil$Options$FileType.values()"], ["org.apache.cassandra.tools.StandaloneSSTableUtil$Options$FileType", "org.apache.cassandra.tools.StandaloneSSTableUtil$Options$FileType.valueOf(java.lang.String)"], ["org.apache.cassandra.tools.StandaloneSSTableUtil$Options", "org.apache.cassandra.tools.StandaloneSSTableUtil$Options.parseArgs(java.lang.String[])"], ["void", "org.apache.cassandra.tools.StandaloneSSTableUtil$Options.printUsage(org.apache.cassandra.tools.BulkLoader$CmdLineOptions)"], ["org.apache.cassandra.tools.StandaloneSSTableUtil", "org.apache.cassandra.tools.StandaloneSSTableUtil()"], ["void", "org.apache.cassandra.tools.StandaloneSSTableUtil.main(java.lang.String[])"], ["boolean", "org.apache.cassandra.tools.StandaloneScrubber$1.apply(org.apache.cassandra.io.sstable.format.SSTableReader)"], ["boolean", "org.apache.cassandra.tools.StandaloneScrubber$1.apply(java.lang.Object)"], ["org.apache.cassandra.tools.StandaloneScrubber$Options", "org.apache.cassandra.tools.StandaloneScrubber$Options.parseArgs(java.lang.String[])"], ["void", "org.apache.cassandra.tools.StandaloneScrubber$Options.printUsage(org.apache.cassandra.tools.BulkLoader$CmdLineOptions)"], ["org.apache.cassandra.tools.StandaloneScrubber", "org.apache.cassandra.tools.StandaloneScrubber()"], ["void", "org.apache.cassandra.tools.StandaloneScrubber.main(java.lang.String[])"], ["org.apache.cassandra.tools.StandaloneSplitter$Options", "org.apache.cassandra.tools.StandaloneSplitter$Options.parseArgs(java.lang.String[])"], ["void", "org.apache.cassandra.tools.StandaloneSplitter$Options.printUsage(org.apache.cassandra.tools.BulkLoader$CmdLineOptions)"], ["org.apache.cassandra.tools.StandaloneSplitter", "org.apache.cassandra.tools.StandaloneSplitter()"], ["void", "org.apache.cassandra.tools.StandaloneSplitter.main(java.lang.String[])"], ["org.apache.cassandra.tools.StandaloneUpgrader$Options", "org.apache.cassandra.tools.StandaloneUpgrader$Options.parseArgs(java.lang.String[])"], ["void", "org.apache.cassandra.tools.StandaloneUpgrader$Options.printUsage(org.apache.cassandra.tools.BulkLoader$CmdLineOptions)"], ["org.apache.cassandra.tools.StandaloneUpgrader", "org.apache.cassandra.tools.StandaloneUpgrader()"], ["void", "org.apache.cassandra.tools.StandaloneUpgrader.main(java.lang.String[])"], ["org.apache.cassandra.tools.StandaloneVerifier$Options", "org.apache.cassandra.tools.StandaloneVerifier$Options.parseArgs(java.lang.String[])"], ["void", "org.apache.cassandra.tools.StandaloneVerifier$Options.printUsage(org.apache.cassandra.tools.BulkLoader$CmdLineOptions)"], ["org.apache.cassandra.tools.StandaloneVerifier", "org.apache.cassandra.tools.StandaloneVerifier()"], ["void", "org.apache.cassandra.tools.StandaloneVerifier.main(java.lang.String[])"], ["void", "org.apache.cassandra.tools.Util.initDatabaseDescriptor()"], ["org.apache.cassandra.tools.nodetool.Assassinate", "org.apache.cassandra.tools.nodetool.Assassinate()"], ["void", "org.apache.cassandra.tools.nodetool.Assassinate.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.BootstrapResume", "org.apache.cassandra.tools.nodetool.BootstrapResume()"], ["org.apache.cassandra.tools.nodetool.CfHistograms", "org.apache.cassandra.tools.nodetool.CfHistograms()"], ["org.apache.cassandra.tools.nodetool.CfStats", "org.apache.cassandra.tools.nodetool.CfStats()"], ["org.apache.cassandra.tools.nodetool.Cleanup", "org.apache.cassandra.tools.nodetool.Cleanup()"], ["void", "org.apache.cassandra.tools.nodetool.Cleanup.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.ClearSnapshot", "org.apache.cassandra.tools.nodetool.ClearSnapshot()"], ["void", "org.apache.cassandra.tools.nodetool.ClearSnapshot.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Compact", "org.apache.cassandra.tools.nodetool.Compact()"], ["void", "org.apache.cassandra.tools.nodetool.Compact.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.CompactionHistory", "org.apache.cassandra.tools.nodetool.CompactionHistory()"], ["void", "org.apache.cassandra.tools.nodetool.CompactionHistory.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.CompactionStats", "org.apache.cassandra.tools.nodetool.CompactionStats()"], ["void", "org.apache.cassandra.tools.nodetool.CompactionStats.execute(org.apache.cassandra.tools.NodeProbe)"], ["void", "org.apache.cassandra.tools.nodetool.CompactionStats.reportCompactionTable(java.util.List<java.util.Map<java.lang.String, java.lang.String>>, int, boolean)"], ["org.apache.cassandra.tools.nodetool.Decommission", "org.apache.cassandra.tools.nodetool.Decommission()"], ["void", "org.apache.cassandra.tools.nodetool.Decommission.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DescribeCluster", "org.apache.cassandra.tools.nodetool.DescribeCluster()"], ["void", "org.apache.cassandra.tools.nodetool.DescribeCluster.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DescribeRing", "org.apache.cassandra.tools.nodetool.DescribeRing()"], ["void", "org.apache.cassandra.tools.nodetool.DescribeRing.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DisableAutoCompaction", "org.apache.cassandra.tools.nodetool.DisableAutoCompaction()"], ["void", "org.apache.cassandra.tools.nodetool.DisableAutoCompaction.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DisableBackup", "org.apache.cassandra.tools.nodetool.DisableBackup()"], ["void", "org.apache.cassandra.tools.nodetool.DisableBackup.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DisableBinary", "org.apache.cassandra.tools.nodetool.DisableBinary()"], ["void", "org.apache.cassandra.tools.nodetool.DisableBinary.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DisableGossip", "org.apache.cassandra.tools.nodetool.DisableGossip()"], ["void", "org.apache.cassandra.tools.nodetool.DisableGossip.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DisableHandoff", "org.apache.cassandra.tools.nodetool.DisableHandoff()"], ["void", "org.apache.cassandra.tools.nodetool.DisableHandoff.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DisableHintsForDC", "org.apache.cassandra.tools.nodetool.DisableHintsForDC()"], ["void", "org.apache.cassandra.tools.nodetool.DisableHintsForDC.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.DisableThrift", "org.apache.cassandra.tools.nodetool.DisableThrift()"], ["void", "org.apache.cassandra.tools.nodetool.DisableThrift.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Drain", "org.apache.cassandra.tools.nodetool.Drain()"], ["void", "org.apache.cassandra.tools.nodetool.Drain.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.EnableAutoCompaction", "org.apache.cassandra.tools.nodetool.EnableAutoCompaction()"], ["void", "org.apache.cassandra.tools.nodetool.EnableAutoCompaction.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.EnableBackup", "org.apache.cassandra.tools.nodetool.EnableBackup()"], ["void", "org.apache.cassandra.tools.nodetool.EnableBackup.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.EnableBinary", "org.apache.cassandra.tools.nodetool.EnableBinary()"], ["void", "org.apache.cassandra.tools.nodetool.EnableBinary.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.EnableGossip", "org.apache.cassandra.tools.nodetool.EnableGossip()"], ["void", "org.apache.cassandra.tools.nodetool.EnableGossip.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.EnableHandoff", "org.apache.cassandra.tools.nodetool.EnableHandoff()"], ["void", "org.apache.cassandra.tools.nodetool.EnableHandoff.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.EnableHintsForDC", "org.apache.cassandra.tools.nodetool.EnableHintsForDC()"], ["void", "org.apache.cassandra.tools.nodetool.EnableHintsForDC.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.EnableThrift", "org.apache.cassandra.tools.nodetool.EnableThrift()"], ["void", "org.apache.cassandra.tools.nodetool.EnableThrift.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.FailureDetectorInfo", "org.apache.cassandra.tools.nodetool.FailureDetectorInfo()"], ["void", "org.apache.cassandra.tools.nodetool.FailureDetectorInfo.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Flush", "org.apache.cassandra.tools.nodetool.Flush()"], ["void", "org.apache.cassandra.tools.nodetool.Flush.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GarbageCollect", "org.apache.cassandra.tools.nodetool.GarbageCollect()"], ["void", "org.apache.cassandra.tools.nodetool.GarbageCollect.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GcStats", "org.apache.cassandra.tools.nodetool.GcStats()"], ["void", "org.apache.cassandra.tools.nodetool.GcStats.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetCompactionThreshold", "org.apache.cassandra.tools.nodetool.GetCompactionThreshold()"], ["void", "org.apache.cassandra.tools.nodetool.GetCompactionThreshold.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetCompactionThroughput", "org.apache.cassandra.tools.nodetool.GetCompactionThroughput()"], ["void", "org.apache.cassandra.tools.nodetool.GetCompactionThroughput.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetConcurrentCompactors", "org.apache.cassandra.tools.nodetool.GetConcurrentCompactors()"], ["org.apache.cassandra.tools.nodetool.GetEndpoints", "org.apache.cassandra.tools.nodetool.GetEndpoints()"], ["void", "org.apache.cassandra.tools.nodetool.GetEndpoints.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetInterDCStreamThroughput", "org.apache.cassandra.tools.nodetool.GetInterDCStreamThroughput()"], ["void", "org.apache.cassandra.tools.nodetool.GetInterDCStreamThroughput.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetLoggingLevels", "org.apache.cassandra.tools.nodetool.GetLoggingLevels()"], ["void", "org.apache.cassandra.tools.nodetool.GetLoggingLevels.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetSSTables", "org.apache.cassandra.tools.nodetool.GetSSTables()"], ["void", "org.apache.cassandra.tools.nodetool.GetSSTables.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetStreamThroughput", "org.apache.cassandra.tools.nodetool.GetStreamThroughput()"], ["void", "org.apache.cassandra.tools.nodetool.GetStreamThroughput.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetTimeout", "org.apache.cassandra.tools.nodetool.GetTimeout()"], ["void", "org.apache.cassandra.tools.nodetool.GetTimeout.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GetTraceProbability", "org.apache.cassandra.tools.nodetool.GetTraceProbability()"], ["void", "org.apache.cassandra.tools.nodetool.GetTraceProbability.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.GossipInfo", "org.apache.cassandra.tools.nodetool.GossipInfo()"], ["void", "org.apache.cassandra.tools.nodetool.GossipInfo.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.HostStat", "org.apache.cassandra.tools.nodetool.HostStat(java.lang.String, java.net.InetAddress, boolean, java.lang.Float)"], ["java.lang.String", "org.apache.cassandra.tools.nodetool.HostStat.ipOrDns()"], ["org.apache.cassandra.tools.nodetool.Info", "org.apache.cassandra.tools.nodetool.Info()"], ["void", "org.apache.cassandra.tools.nodetool.Info.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.InvalidateCounterCache", "org.apache.cassandra.tools.nodetool.InvalidateCounterCache()"], ["void", "org.apache.cassandra.tools.nodetool.InvalidateCounterCache.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.InvalidateKeyCache", "org.apache.cassandra.tools.nodetool.InvalidateKeyCache()"], ["void", "org.apache.cassandra.tools.nodetool.InvalidateKeyCache.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.InvalidateRowCache", "org.apache.cassandra.tools.nodetool.InvalidateRowCache()"], ["void", "org.apache.cassandra.tools.nodetool.InvalidateRowCache.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Join", "org.apache.cassandra.tools.nodetool.Join()"], ["void", "org.apache.cassandra.tools.nodetool.Join.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.ListSnapshots", "org.apache.cassandra.tools.nodetool.ListSnapshots()"], ["void", "org.apache.cassandra.tools.nodetool.ListSnapshots.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Move", "org.apache.cassandra.tools.nodetool.Move()"], ["void", "org.apache.cassandra.tools.nodetool.Move.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.NetStats", "org.apache.cassandra.tools.nodetool.NetStats()"], ["void", "org.apache.cassandra.tools.nodetool.NetStats.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.PauseHandoff", "org.apache.cassandra.tools.nodetool.PauseHandoff()"], ["void", "org.apache.cassandra.tools.nodetool.PauseHandoff.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.ProxyHistograms", "org.apache.cassandra.tools.nodetool.ProxyHistograms()"], ["void", "org.apache.cassandra.tools.nodetool.ProxyHistograms.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.RangeKeySample", "org.apache.cassandra.tools.nodetool.RangeKeySample()"], ["void", "org.apache.cassandra.tools.nodetool.RangeKeySample.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Rebuild", "org.apache.cassandra.tools.nodetool.Rebuild()"], ["void", "org.apache.cassandra.tools.nodetool.Rebuild.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.RebuildIndex", "org.apache.cassandra.tools.nodetool.RebuildIndex()"], ["void", "org.apache.cassandra.tools.nodetool.RebuildIndex.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Refresh", "org.apache.cassandra.tools.nodetool.Refresh()"], ["void", "org.apache.cassandra.tools.nodetool.Refresh.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.RefreshSizeEstimates", "org.apache.cassandra.tools.nodetool.RefreshSizeEstimates()"], ["void", "org.apache.cassandra.tools.nodetool.RefreshSizeEstimates.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.ReloadLocalSchema", "org.apache.cassandra.tools.nodetool.ReloadLocalSchema()"], ["void", "org.apache.cassandra.tools.nodetool.ReloadLocalSchema.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.ReloadTriggers", "org.apache.cassandra.tools.nodetool.ReloadTriggers()"], ["void", "org.apache.cassandra.tools.nodetool.ReloadTriggers.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.RelocateSSTables", "org.apache.cassandra.tools.nodetool.RelocateSSTables()"], ["void", "org.apache.cassandra.tools.nodetool.RelocateSSTables.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.RemoveNode", "org.apache.cassandra.tools.nodetool.RemoveNode()"], ["void", "org.apache.cassandra.tools.nodetool.RemoveNode.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Repair", "org.apache.cassandra.tools.nodetool.Repair()"], ["void", "org.apache.cassandra.tools.nodetool.Repair.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.ReplayBatchlog", "org.apache.cassandra.tools.nodetool.ReplayBatchlog()"], ["org.apache.cassandra.tools.nodetool.ResetLocalSchema", "org.apache.cassandra.tools.nodetool.ResetLocalSchema()"], ["void", "org.apache.cassandra.tools.nodetool.ResetLocalSchema.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.ResumeHandoff", "org.apache.cassandra.tools.nodetool.ResumeHandoff()"], ["void", "org.apache.cassandra.tools.nodetool.ResumeHandoff.execute(org.apache.cassandra.tools.NodeProbe)"], ["int", "org.apache.cassandra.tools.nodetool.Ring$1.compare(java.lang.String, java.lang.String)"], ["int", "org.apache.cassandra.tools.nodetool.Ring$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.tools.nodetool.Ring", "org.apache.cassandra.tools.nodetool.Ring()"], ["void", "org.apache.cassandra.tools.nodetool.Ring.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Scrub", "org.apache.cassandra.tools.nodetool.Scrub()"], ["void", "org.apache.cassandra.tools.nodetool.Scrub.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetCacheCapacity", "org.apache.cassandra.tools.nodetool.SetCacheCapacity()"], ["void", "org.apache.cassandra.tools.nodetool.SetCacheCapacity.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetCacheKeysToSave", "org.apache.cassandra.tools.nodetool.SetCacheKeysToSave()"], ["void", "org.apache.cassandra.tools.nodetool.SetCacheKeysToSave.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetCompactionThreshold", "org.apache.cassandra.tools.nodetool.SetCompactionThreshold()"], ["void", "org.apache.cassandra.tools.nodetool.SetCompactionThreshold.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetCompactionThroughput", "org.apache.cassandra.tools.nodetool.SetCompactionThroughput()"], ["void", "org.apache.cassandra.tools.nodetool.SetCompactionThroughput.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetConcurrentCompactors", "org.apache.cassandra.tools.nodetool.SetConcurrentCompactors()"], ["org.apache.cassandra.tools.nodetool.SetHintedHandoffThrottleInKB", "org.apache.cassandra.tools.nodetool.SetHintedHandoffThrottleInKB()"], ["void", "org.apache.cassandra.tools.nodetool.SetHintedHandoffThrottleInKB.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetHostStat", "org.apache.cassandra.tools.nodetool.SetHostStat(boolean)"], ["int", "org.apache.cassandra.tools.nodetool.SetHostStat.size()"], ["void", "org.apache.cassandra.tools.nodetool.SetHostStat.add(java.lang.String, java.lang.String, java.util.Map<java.net.InetAddress, java.lang.Float>)"], ["org.apache.cassandra.tools.nodetool.SetInterDCStreamThroughput", "org.apache.cassandra.tools.nodetool.SetInterDCStreamThroughput()"], ["void", "org.apache.cassandra.tools.nodetool.SetInterDCStreamThroughput.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetLoggingLevel", "org.apache.cassandra.tools.nodetool.SetLoggingLevel()"], ["void", "org.apache.cassandra.tools.nodetool.SetLoggingLevel.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetStreamThroughput", "org.apache.cassandra.tools.nodetool.SetStreamThroughput()"], ["void", "org.apache.cassandra.tools.nodetool.SetStreamThroughput.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetTimeout", "org.apache.cassandra.tools.nodetool.SetTimeout()"], ["void", "org.apache.cassandra.tools.nodetool.SetTimeout.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.SetTraceProbability", "org.apache.cassandra.tools.nodetool.SetTraceProbability()"], ["void", "org.apache.cassandra.tools.nodetool.SetTraceProbability.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Snapshot", "org.apache.cassandra.tools.nodetool.Snapshot()"], ["void", "org.apache.cassandra.tools.nodetool.Snapshot.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Status", "org.apache.cassandra.tools.nodetool.Status()"], ["void", "org.apache.cassandra.tools.nodetool.Status.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.StatusBackup", "org.apache.cassandra.tools.nodetool.StatusBackup()"], ["void", "org.apache.cassandra.tools.nodetool.StatusBackup.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.StatusBinary", "org.apache.cassandra.tools.nodetool.StatusBinary()"], ["void", "org.apache.cassandra.tools.nodetool.StatusBinary.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.StatusGossip", "org.apache.cassandra.tools.nodetool.StatusGossip()"], ["void", "org.apache.cassandra.tools.nodetool.StatusGossip.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.StatusHandoff", "org.apache.cassandra.tools.nodetool.StatusHandoff()"], ["void", "org.apache.cassandra.tools.nodetool.StatusHandoff.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.StatusThrift", "org.apache.cassandra.tools.nodetool.StatusThrift()"], ["void", "org.apache.cassandra.tools.nodetool.StatusThrift.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Stop", "org.apache.cassandra.tools.nodetool.Stop()"], ["void", "org.apache.cassandra.tools.nodetool.Stop.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.StopDaemon", "org.apache.cassandra.tools.nodetool.StopDaemon()"], ["void", "org.apache.cassandra.tools.nodetool.StopDaemon.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.TableHistograms", "org.apache.cassandra.tools.nodetool.TableHistograms()"], ["void", "org.apache.cassandra.tools.nodetool.TableHistograms.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.TableStats", "org.apache.cassandra.tools.nodetool.TableStats()"], ["void", "org.apache.cassandra.tools.nodetool.TableStats.execute(org.apache.cassandra.tools.NodeProbe)"], ["int", "org.apache.cassandra.tools.nodetool.TopPartitions$1.compare(javax.management.openmbean.CompositeData, javax.management.openmbean.CompositeData)"], ["int", "org.apache.cassandra.tools.nodetool.TopPartitions$1.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.tools.nodetool.TopPartitions", "org.apache.cassandra.tools.nodetool.TopPartitions()"], ["void", "org.apache.cassandra.tools.nodetool.TopPartitions.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.TpStats", "org.apache.cassandra.tools.nodetool.TpStats()"], ["void", "org.apache.cassandra.tools.nodetool.TpStats.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.TruncateHints", "org.apache.cassandra.tools.nodetool.TruncateHints()"], ["void", "org.apache.cassandra.tools.nodetool.TruncateHints.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.UpgradeSSTable", "org.apache.cassandra.tools.nodetool.UpgradeSSTable()"], ["void", "org.apache.cassandra.tools.nodetool.UpgradeSSTable.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Verify", "org.apache.cassandra.tools.nodetool.Verify()"], ["void", "org.apache.cassandra.tools.nodetool.Verify.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.Version", "org.apache.cassandra.tools.nodetool.Version()"], ["void", "org.apache.cassandra.tools.nodetool.Version.execute(org.apache.cassandra.tools.NodeProbe)"], ["org.apache.cassandra.tools.nodetool.ViewBuildStatus", "org.apache.cassandra.tools.nodetool.ViewBuildStatus()"], ["org.apache.cassandra.tools.nodetool.formatter.TableBuilder", "org.apache.cassandra.tools.nodetool.formatter.TableBuilder()"], ["org.apache.cassandra.tools.nodetool.formatter.TableBuilder", "org.apache.cassandra.tools.nodetool.formatter.TableBuilder(char)"], ["void", "org.apache.cassandra.tools.nodetool.formatter.TableBuilder.add(java.lang.String...)"], ["void", "org.apache.cassandra.tools.nodetool.formatter.TableBuilder.printTo(java.io.PrintStream)"], ["int", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder$CompactionHistoryRow.compareTo(org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder$CompactionHistoryRow)"], ["int", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder$CompactionHistoryRow.compareTo(java.lang.Object)"], ["org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder(org.apache.cassandra.tools.NodeProbe)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder.convert2Map()"], ["org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter$DefaultPrinter", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter$DefaultPrinter()"], ["void", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter$DefaultPrinter.print(org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder, java.io.PrintStream)"], ["void", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter$DefaultPrinter.print(org.apache.cassandra.tools.nodetool.stats.StatsHolder, java.io.PrintStream)"], ["org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter()"], ["org.apache.cassandra.tools.nodetool.stats.StatsPrinter", "org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter.from(java.lang.String)"], ["org.apache.cassandra.tools.nodetool.stats.StatsKeyspace", "org.apache.cassandra.tools.nodetool.stats.StatsKeyspace(org.apache.cassandra.tools.NodeProbe, java.lang.String)"], ["void", "org.apache.cassandra.tools.nodetool.stats.StatsKeyspace.add(org.apache.cassandra.db.ColumnFamilyStoreMBean)"], ["double", "org.apache.cassandra.tools.nodetool.stats.StatsKeyspace.readLatency()"], ["double", "org.apache.cassandra.tools.nodetool.stats.StatsKeyspace.writeLatency()"], ["org.apache.cassandra.tools.nodetool.stats.StatsPrinter$JsonPrinter", "org.apache.cassandra.tools.nodetool.stats.StatsPrinter$JsonPrinter()"], ["void", "org.apache.cassandra.tools.nodetool.stats.StatsPrinter$JsonPrinter.print(T, java.io.PrintStream)"], ["org.apache.cassandra.tools.nodetool.stats.StatsPrinter$YamlPrinter", "org.apache.cassandra.tools.nodetool.stats.StatsPrinter$YamlPrinter()"], ["void", "org.apache.cassandra.tools.nodetool.stats.StatsPrinter$YamlPrinter.print(T, java.io.PrintStream)"], ["org.apache.cassandra.tools.nodetool.stats.StatsTable", "org.apache.cassandra.tools.nodetool.stats.StatsTable()"], ["boolean", "org.apache.cassandra.tools.nodetool.stats.TableStatsHolder$OptionFilter.isTableIncluded(java.lang.String, java.lang.String)"], ["boolean", "org.apache.cassandra.tools.nodetool.stats.TableStatsHolder$OptionFilter.isKeyspaceIncluded(java.lang.String)"], ["void", "org.apache.cassandra.tools.nodetool.stats.TableStatsHolder$OptionFilter.verifyKeyspaces(java.util.List<java.lang.String>)"], ["void", "org.apache.cassandra.tools.nodetool.stats.TableStatsHolder$OptionFilter.verifyTables()"], ["org.apache.cassandra.tools.nodetool.stats.TableStatsHolder", "org.apache.cassandra.tools.nodetool.stats.TableStatsHolder(org.apache.cassandra.tools.NodeProbe, boolean, boolean, java.util.List<java.lang.String>)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.apache.cassandra.tools.nodetool.stats.TableStatsHolder.convert2Map()"], ["void", "org.apache.cassandra.tools.nodetool.stats.TableStatsPrinter$DefaultPrinter.print(org.apache.cassandra.tools.nodetool.stats.TableStatsHolder, java.io.PrintStream)"], ["void", "org.apache.cassandra.tools.nodetool.stats.TableStatsPrinter$DefaultPrinter.print(org.apache.cassandra.tools.nodetool.stats.StatsHolder, java.io.PrintStream)"], ["org.apache.cassandra.tools.nodetool.stats.TableStatsPrinter", "org.apache.cassandra.tools.nodetool.stats.TableStatsPrinter()"], ["org.apache.cassandra.tools.nodetool.stats.StatsPrinter", "org.apache.cassandra.tools.nodetool.stats.TableStatsPrinter.from(java.lang.String)"], ["org.apache.cassandra.tools.nodetool.stats.TpStatsHolder", "org.apache.cassandra.tools.nodetool.stats.TpStatsHolder(org.apache.cassandra.tools.NodeProbe)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.apache.cassandra.tools.nodetool.stats.TpStatsHolder.convert2Map()"], ["org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter$DefaultPrinter", "org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter$DefaultPrinter()"], ["void", "org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter$DefaultPrinter.print(org.apache.cassandra.tools.nodetool.stats.TpStatsHolder, java.io.PrintStream)"], ["void", "org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter$DefaultPrinter.print(org.apache.cassandra.tools.nodetool.stats.StatsHolder, java.io.PrintStream)"], ["org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter", "org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter()"], ["org.apache.cassandra.tools.nodetool.stats.StatsPrinter", "org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter.from(java.lang.String)"], ["int", "org.apache.cassandra.tracing.ExpiredTraceState.elapsed()"], ["org.apache.cassandra.schema.KeyspaceMetadata", "org.apache.cassandra.tracing.TraceKeyspace.metadata()"], ["org.apache.cassandra.tracing.TraceState$Status[]", "org.apache.cassandra.tracing.TraceState$Status.values()"], ["org.apache.cassandra.tracing.TraceState$Status", "org.apache.cassandra.tracing.TraceState$Status.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.tracing.TraceState.enableActivityNotification(java.lang.String)"], ["void", "org.apache.cassandra.tracing.TraceState.addProgressListener(org.apache.cassandra.utils.progress.ProgressListener)"], ["void", "org.apache.cassandra.tracing.TraceState.removeProgressListener(org.apache.cassandra.utils.progress.ProgressListener)"], ["int", "org.apache.cassandra.tracing.TraceState.elapsed()"], ["synchronized", "org.apache.cassandra.tracing.TraceState.void stop()"], ["synchronized", "org.apache.cassandra.tracing.TraceState.org.apache.cassandra.tracing.TraceState$Status waitActivity(long)"], ["void", "org.apache.cassandra.tracing.TraceState.trace(java.lang.String, java.lang.Object)"], ["void", "org.apache.cassandra.tracing.TraceState.trace(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.apache.cassandra.tracing.TraceState.trace(java.lang.String, java.lang.Object[])"], ["void", "org.apache.cassandra.tracing.TraceState.trace(java.lang.String)"], ["boolean", "org.apache.cassandra.tracing.TraceState.acquireReference()"], ["int", "org.apache.cassandra.tracing.TraceState.releaseReference()"], ["org.apache.cassandra.tracing.TraceStateImpl", "org.apache.cassandra.tracing.TraceStateImpl(java.net.InetAddress, java.util.UUID, org.apache.cassandra.tracing.Tracing$TraceType)"], ["org.apache.cassandra.tracing.Tracing$TraceType[]", "org.apache.cassandra.tracing.Tracing$TraceType.values()"], ["org.apache.cassandra.tracing.Tracing$TraceType", "org.apache.cassandra.tracing.Tracing$TraceType.valueOf(java.lang.String)"], ["org.apache.cassandra.tracing.Tracing$TraceType", "org.apache.cassandra.tracing.Tracing$TraceType.deserialize(byte)"], ["byte", "org.apache.cassandra.tracing.Tracing$TraceType.serialize(org.apache.cassandra.tracing.Tracing$TraceType)"], ["int", "org.apache.cassandra.tracing.Tracing$TraceType.getTTL()"], ["org.apache.cassandra.tracing.Tracing", "org.apache.cassandra.tracing.Tracing()"], ["java.util.UUID", "org.apache.cassandra.tracing.Tracing.getSessionId()"], ["org.apache.cassandra.tracing.Tracing$TraceType", "org.apache.cassandra.tracing.Tracing.getTraceType()"], ["int", "org.apache.cassandra.tracing.Tracing.getTTL()"], ["boolean", "org.apache.cassandra.tracing.Tracing.isTracing()"], ["java.util.UUID", "org.apache.cassandra.tracing.Tracing.newSession(java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["java.util.UUID", "org.apache.cassandra.tracing.Tracing.newSession(org.apache.cassandra.tracing.Tracing$TraceType)"], ["java.util.UUID", "org.apache.cassandra.tracing.Tracing.newSession(java.util.UUID, java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["void", "org.apache.cassandra.tracing.Tracing.doneWithNonLocalSession(org.apache.cassandra.tracing.TraceState)"], ["void", "org.apache.cassandra.tracing.Tracing.stopSession()"], ["org.apache.cassandra.tracing.TraceState", "org.apache.cassandra.tracing.Tracing.get()"], ["org.apache.cassandra.tracing.TraceState", "org.apache.cassandra.tracing.Tracing.get(java.util.UUID)"], ["void", "org.apache.cassandra.tracing.Tracing.set(org.apache.cassandra.tracing.TraceState)"], ["org.apache.cassandra.tracing.TraceState", "org.apache.cassandra.tracing.Tracing.begin(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.tracing.TraceState", "org.apache.cassandra.tracing.Tracing.initializeFromMessage(org.apache.cassandra.net.MessageIn<?>)"], ["java.util.Map<java.lang.String, byte[]>", "org.apache.cassandra.tracing.Tracing.getTraceHeaders()"], ["void", "org.apache.cassandra.tracing.Tracing.traceRepair(java.lang.String, java.lang.Object...)"], ["void", "org.apache.cassandra.tracing.Tracing.trace(java.lang.String)"], ["void", "org.apache.cassandra.tracing.Tracing.trace(java.lang.String, java.lang.Object)"], ["void", "org.apache.cassandra.tracing.Tracing.trace(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.apache.cassandra.tracing.Tracing.trace(java.lang.String, java.lang.Object...)"], ["void", "org.apache.cassandra.tracing.Tracing.set(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.tracing.Tracing.get()"], ["void", "org.apache.cassandra.tracing.TracingImpl$1.runMayThrow()"], ["void", "org.apache.cassandra.tracing.TracingImpl.stopSessionImpl()"], ["org.apache.cassandra.tracing.TraceState", "org.apache.cassandra.tracing.TracingImpl.begin(java.lang.String, java.net.InetAddress, java.util.Map<java.lang.String, java.lang.String>)"], ["void", "org.apache.cassandra.tracing.TracingImpl.trace(java.nio.ByteBuffer, java.lang.String, int)"], ["java.lang.String", "org.apache.cassandra.transport.CBUtil.readString(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeString(java.lang.String, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfString(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.transport.CBUtil.readLongString(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeLongString(java.lang.String, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfLongString(java.lang.String)"], ["byte[]", "org.apache.cassandra.transport.CBUtil.readBytes(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeBytes(byte[], io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfBytes(byte[])"], ["java.util.Map<java.lang.String, java.nio.ByteBuffer>", "org.apache.cassandra.transport.CBUtil.readBytesMap(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeBytesMap(java.util.Map<java.lang.String, java.nio.ByteBuffer>, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfBytesMap(java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["org.apache.cassandra.db.ConsistencyLevel", "org.apache.cassandra.transport.CBUtil.readConsistencyLevel(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeConsistencyLevel(org.apache.cassandra.db.ConsistencyLevel, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfConsistencyLevel(org.apache.cassandra.db.ConsistencyLevel)"], ["<T extends java.lang.Enum<T>> T", "org.apache.cassandra.transport.CBUtil.readEnumValue(java.lang.Class<T>, io.netty.buffer.ByteBuf)"], ["<T extends java.lang.Enum<T>> void", "org.apache.cassandra.transport.CBUtil.writeEnumValue(T, io.netty.buffer.ByteBuf)"], ["<T extends java.lang.Enum<T>> int", "org.apache.cassandra.transport.CBUtil.sizeOfEnumValue(T)"], ["java.util.UUID", "org.apache.cassandra.transport.CBUtil.readUUID(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeUUID(java.util.UUID, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfUUID(java.util.UUID)"], ["void", "org.apache.cassandra.transport.CBUtil.writeStringList(java.util.List<java.lang.String>, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfStringList(java.util.List<java.lang.String>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.transport.CBUtil.readStringMap(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeStringMap(java.util.Map<java.lang.String, java.lang.String>, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfStringMap(java.util.Map<java.lang.String, java.lang.String>)"], ["java.util.Map<java.lang.String, java.util.List<java.lang.String>>", "org.apache.cassandra.transport.CBUtil.readStringToStringListMap(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeStringToStringListMap(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfStringToStringListMap(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"], ["java.nio.ByteBuffer", "org.apache.cassandra.transport.CBUtil.readValue(io.netty.buffer.ByteBuf)"], ["java.nio.ByteBuffer", "org.apache.cassandra.transport.CBUtil.readBoundValue(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.CBUtil.writeValue(byte[], io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeValue(java.nio.ByteBuffer, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfValue(byte[])"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfValue(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfValue(int)"], ["void", "org.apache.cassandra.transport.CBUtil.writeValueList(java.util.List<java.nio.ByteBuffer>, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfValueList(java.util.List<java.nio.ByteBuffer>)"], ["org.apache.cassandra.utils.Pair<java.util.List<java.lang.String>, java.util.List<java.nio.ByteBuffer>>", "org.apache.cassandra.transport.CBUtil.readNameAndValueList(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.net.InetSocketAddress", "org.apache.cassandra.transport.CBUtil.readInet(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeInet(java.net.InetSocketAddress, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfInet(java.net.InetSocketAddress)"], ["java.net.InetAddress", "org.apache.cassandra.transport.CBUtil.readInetAddr(io.netty.buffer.ByteBuf)"], ["void", "org.apache.cassandra.transport.CBUtil.writeInetAddr(java.net.InetAddress, io.netty.buffer.ByteBuf)"], ["int", "org.apache.cassandra.transport.CBUtil.sizeOfInetAddr(java.net.InetAddress)"], ["byte[]", "org.apache.cassandra.transport.CBUtil.readRawBytes(io.netty.buffer.ByteBuf)"], ["org.apache.cassandra.transport.Client", "org.apache.cassandra.transport.Client(java.lang.String, int, org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions)"], ["void", "org.apache.cassandra.transport.Client.run()"], ["void", "org.apache.cassandra.transport.Client.main(java.lang.String[])"], ["org.apache.cassandra.transport.Connection", "org.apache.cassandra.transport.Connection(io.netty.channel.Channel, org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.transport.Connection$Tracker)"], ["void", "org.apache.cassandra.transport.Connection.setCompressor(org.apache.cassandra.transport.FrameCompressor)"], ["org.apache.cassandra.transport.FrameCompressor", "org.apache.cassandra.transport.Connection.getCompressor()"], ["org.apache.cassandra.transport.Connection$Tracker", "org.apache.cassandra.transport.Connection.getTracker()"], ["org.apache.cassandra.transport.ProtocolVersion", "org.apache.cassandra.transport.Connection.getVersion()"], ["io.netty.channel.Channel", "org.apache.cassandra.transport.Connection.channel()"], ["void", "org.apache.cassandra.transport.ConnectionLimitHandler.channelActive(io.netty.channel.ChannelHandlerContext)"], ["void", "org.apache.cassandra.transport.ConnectionLimitHandler.channelInactive(io.netty.channel.ChannelHandlerContext)"], ["org.apache.cassandra.transport.DataType$Codec", "org.apache.cassandra.transport.DataType$Codec()"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.transport.DataType, java.lang.Object>", "org.apache.cassandra.transport.DataType$Codec.decodeOne(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.DataType$Codec.writeOne(org.apache.cassandra.utils.Pair<org.apache.cassandra.transport.DataType, java.lang.Object>, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.DataType$Codec.oneSerializedSize(org.apache.cassandra.utils.Pair<org.apache.cassandra.transport.DataType, java.lang.Object>, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.DataType[]", "org.apache.cassandra.transport.DataType.values()"], ["org.apache.cassandra.transport.DataType", "org.apache.cassandra.transport.DataType.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.transport.DataType.getId(org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.DataType.readValue(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.DataType.writeValue(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.DataType.serializedValueSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.utils.Pair<org.apache.cassandra.transport.DataType, java.lang.Object>", "org.apache.cassandra.transport.DataType.fromType(org.apache.cassandra.db.marshal.AbstractType, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.db.marshal.AbstractType", "org.apache.cassandra.transport.DataType.toType(org.apache.cassandra.utils.Pair<org.apache.cassandra.transport.DataType, java.lang.Object>)"], ["org.apache.cassandra.transport.ProtocolVersion", "org.apache.cassandra.transport.DataType.getProtocolVersion()"], ["java.net.InetAddress", "org.apache.cassandra.transport.Event$NodeEvent.nodeAddress()"], ["org.apache.cassandra.transport.Event$SchemaChange$Change[]", "org.apache.cassandra.transport.Event$SchemaChange$Change.values()"], ["org.apache.cassandra.transport.Event$SchemaChange$Change", "org.apache.cassandra.transport.Event$SchemaChange$Change.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.Event$SchemaChange$Target[]", "org.apache.cassandra.transport.Event$SchemaChange$Target.values()"], ["org.apache.cassandra.transport.Event$SchemaChange$Target", "org.apache.cassandra.transport.Event$SchemaChange$Target.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.transport.Event$SchemaChange(org.apache.cassandra.transport.Event$SchemaChange$Change, org.apache.cassandra.transport.Event$SchemaChange$Target, java.lang.String, java.lang.String, java.util.List<java.lang.String>)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.transport.Event$SchemaChange(org.apache.cassandra.transport.Event$SchemaChange$Change, org.apache.cassandra.transport.Event$SchemaChange$Target, java.lang.String, java.lang.String)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.transport.Event$SchemaChange(org.apache.cassandra.transport.Event$SchemaChange$Change, java.lang.String)"], ["org.apache.cassandra.transport.Event$SchemaChange", "org.apache.cassandra.transport.Event$SchemaChange.deserializeEvent(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.Event$SchemaChange.serializeEvent(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.Event$SchemaChange.eventSerializedSize(org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.String", "org.apache.cassandra.transport.Event$SchemaChange.toString()"], ["int", "org.apache.cassandra.transport.Event$SchemaChange.hashCode()"], ["boolean", "org.apache.cassandra.transport.Event$SchemaChange.equals(java.lang.Object)"], ["org.apache.cassandra.transport.Event$StatusChange$Status[]", "org.apache.cassandra.transport.Event$StatusChange$Status.values()"], ["org.apache.cassandra.transport.Event$StatusChange$Status", "org.apache.cassandra.transport.Event$StatusChange$Status.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.Event$StatusChange", "org.apache.cassandra.transport.Event$StatusChange.nodeUp(java.net.InetAddress, int)"], ["org.apache.cassandra.transport.Event$StatusChange", "org.apache.cassandra.transport.Event$StatusChange.nodeDown(java.net.InetAddress, int)"], ["java.lang.String", "org.apache.cassandra.transport.Event$StatusChange.toString()"], ["int", "org.apache.cassandra.transport.Event$StatusChange.hashCode()"], ["boolean", "org.apache.cassandra.transport.Event$StatusChange.equals(java.lang.Object)"], ["org.apache.cassandra.transport.Event$TopologyChange$Change[]", "org.apache.cassandra.transport.Event$TopologyChange$Change.values()"], ["org.apache.cassandra.transport.Event$TopologyChange$Change", "org.apache.cassandra.transport.Event$TopologyChange$Change.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.Event$TopologyChange", "org.apache.cassandra.transport.Event$TopologyChange.newNode(java.net.InetAddress, int)"], ["org.apache.cassandra.transport.Event$TopologyChange", "org.apache.cassandra.transport.Event$TopologyChange.removedNode(java.net.InetAddress, int)"], ["org.apache.cassandra.transport.Event$TopologyChange", "org.apache.cassandra.transport.Event$TopologyChange.movedNode(java.net.InetAddress, int)"], ["java.lang.String", "org.apache.cassandra.transport.Event$TopologyChange.toString()"], ["int", "org.apache.cassandra.transport.Event$TopologyChange.hashCode()"], ["boolean", "org.apache.cassandra.transport.Event$TopologyChange.equals(java.lang.Object)"], ["org.apache.cassandra.transport.Event$Type[]", "org.apache.cassandra.transport.Event$Type.values()"], ["org.apache.cassandra.transport.Event$Type", "org.apache.cassandra.transport.Event$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.Event", "org.apache.cassandra.transport.Event.deserialize(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.Event.serialize(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.Event.serializedSize(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.Frame$Compressor", "org.apache.cassandra.transport.Frame$Compressor()"], ["void", "org.apache.cassandra.transport.Frame$Compressor.encode(io.netty.channel.ChannelHandlerContext, org.apache.cassandra.transport.Frame, java.util.List<java.lang.Object>)"], ["void", "org.apache.cassandra.transport.Frame$Compressor.encode(io.netty.channel.ChannelHandlerContext, java.lang.Object, java.util.List)"], ["org.apache.cassandra.transport.Frame$Decoder", "org.apache.cassandra.transport.Frame$Decoder(org.apache.cassandra.transport.Connection$Factory)"], ["org.apache.cassandra.transport.Frame$Decompressor", "org.apache.cassandra.transport.Frame$Decompressor()"], ["void", "org.apache.cassandra.transport.Frame$Decompressor.decode(io.netty.channel.ChannelHandlerContext, org.apache.cassandra.transport.Frame, java.util.List<java.lang.Object>)"], ["void", "org.apache.cassandra.transport.Frame$Decompressor.decode(io.netty.channel.ChannelHandlerContext, java.lang.Object, java.util.List)"], ["org.apache.cassandra.transport.Frame$Encoder", "org.apache.cassandra.transport.Frame$Encoder()"], ["void", "org.apache.cassandra.transport.Frame$Encoder.encode(io.netty.channel.ChannelHandlerContext, org.apache.cassandra.transport.Frame, java.util.List<java.lang.Object>)"], ["void", "org.apache.cassandra.transport.Frame$Encoder.encode(io.netty.channel.ChannelHandlerContext, java.lang.Object, java.util.List)"], ["org.apache.cassandra.transport.Frame$Header$Flag[]", "org.apache.cassandra.transport.Frame$Header$Flag.values()"], ["org.apache.cassandra.transport.Frame$Header$Flag", "org.apache.cassandra.transport.Frame$Header$Flag.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.transport.Frame$Header$Flag.serialize(java.util.EnumSet<org.apache.cassandra.transport.Frame$Header$Flag>)"], ["void", "org.apache.cassandra.transport.Frame.retain()"], ["boolean", "org.apache.cassandra.transport.Frame.release()"], ["org.apache.cassandra.transport.Frame", "org.apache.cassandra.transport.Frame.create(org.apache.cassandra.transport.Message$Type, int, org.apache.cassandra.transport.ProtocolVersion, java.util.EnumSet<org.apache.cassandra.transport.Frame$Header$Flag>, io.netty.buffer.ByteBuf)"], ["org.apache.cassandra.transport.Frame", "org.apache.cassandra.transport.Frame.with(io.netty.buffer.ByteBuf)"], ["org.apache.cassandra.transport.Frame", "org.apache.cassandra.transport.FrameCompressor$LZ4Compressor.compress(org.apache.cassandra.transport.Frame)"], ["org.apache.cassandra.transport.Frame", "org.apache.cassandra.transport.FrameCompressor$LZ4Compressor.decompress(org.apache.cassandra.transport.Frame)"], ["org.apache.cassandra.transport.Frame", "org.apache.cassandra.transport.FrameCompressor$SnappyCompressor.compress(org.apache.cassandra.transport.Frame)"], ["org.apache.cassandra.transport.Frame", "org.apache.cassandra.transport.FrameCompressor$SnappyCompressor.decompress(org.apache.cassandra.transport.Frame)"], ["org.apache.cassandra.transport.Message$Direction[]", "org.apache.cassandra.transport.Message$Direction.values()"], ["org.apache.cassandra.transport.Message$Direction", "org.apache.cassandra.transport.Message$Direction.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.Message$Direction", "org.apache.cassandra.transport.Message$Direction.extractFromVersion(int)"], ["int", "org.apache.cassandra.transport.Message$Direction.addToVersion(int)"], ["org.apache.cassandra.transport.Message$Dispatcher$Flusher", "org.apache.cassandra.transport.Message$Dispatcher$Flusher(io.netty.channel.EventLoop)"], ["void", "org.apache.cassandra.transport.Message$Dispatcher$ImmediateFlusher.run()"], ["void", "org.apache.cassandra.transport.Message$Dispatcher$LegacyFlusher.run()"], ["org.apache.cassandra.transport.Message$Dispatcher", "org.apache.cassandra.transport.Message$Dispatcher(boolean)"], ["void", "org.apache.cassandra.transport.Message$Dispatcher.channelRead0(io.netty.channel.ChannelHandlerContext, org.apache.cassandra.transport.Message$Request)"], ["void", "org.apache.cassandra.transport.Message$Dispatcher.channelRead0(io.netty.channel.ChannelHandlerContext, java.lang.Object)"], ["void", "org.apache.cassandra.transport.Message$ExceptionHandler$1.operationComplete(io.netty.channel.ChannelFuture)"], ["void", "org.apache.cassandra.transport.Message$ExceptionHandler$1.operationComplete(io.netty.util.concurrent.Future)"], ["org.apache.cassandra.transport.Message$ExceptionHandler", "org.apache.cassandra.transport.Message$ExceptionHandler()"], ["void", "org.apache.cassandra.transport.Message$ExceptionHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)"], ["org.apache.cassandra.transport.Message$ProtocolDecoder", "org.apache.cassandra.transport.Message$ProtocolDecoder()"], ["void", "org.apache.cassandra.transport.Message$ProtocolDecoder.decode(io.netty.channel.ChannelHandlerContext, org.apache.cassandra.transport.Frame, java.util.List)"], ["void", "org.apache.cassandra.transport.Message$ProtocolDecoder.decode(io.netty.channel.ChannelHandlerContext, java.lang.Object, java.util.List)"], ["org.apache.cassandra.transport.Message$ProtocolEncoder", "org.apache.cassandra.transport.Message$ProtocolEncoder()"], ["void", "org.apache.cassandra.transport.Message$ProtocolEncoder.encode(io.netty.channel.ChannelHandlerContext, org.apache.cassandra.transport.Message, java.util.List)"], ["void", "org.apache.cassandra.transport.Message$ProtocolEncoder.encode(io.netty.channel.ChannelHandlerContext, java.lang.Object, java.util.List)"], ["void", "org.apache.cassandra.transport.Message$Request.setTracingRequested()"], ["boolean", "org.apache.cassandra.transport.Message$Request.isTracingRequested()"], ["org.apache.cassandra.transport.Message", "org.apache.cassandra.transport.Message$Response.setTracingId(java.util.UUID)"], ["java.util.UUID", "org.apache.cassandra.transport.Message$Response.getTracingId()"], ["org.apache.cassandra.transport.Message", "org.apache.cassandra.transport.Message$Response.setWarnings(java.util.List<java.lang.String>)"], ["org.apache.cassandra.transport.Message$Type[]", "org.apache.cassandra.transport.Message$Type.values()"], ["org.apache.cassandra.transport.Message$Type", "org.apache.cassandra.transport.Message$Type.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.Message$Type", "org.apache.cassandra.transport.Message$Type.fromOpcode(int, org.apache.cassandra.transport.Message$Direction)"], ["boolean", "org.apache.cassandra.transport.Message$UnexpectedChannelExceptionHandler.apply(java.lang.Throwable)"], ["boolean", "org.apache.cassandra.transport.Message$UnexpectedChannelExceptionHandler.apply(java.lang.Object)"], ["void", "org.apache.cassandra.transport.Message.attach(org.apache.cassandra.transport.Connection)"], ["org.apache.cassandra.transport.Connection", "org.apache.cassandra.transport.Message.connection()"], ["org.apache.cassandra.transport.Message", "org.apache.cassandra.transport.Message.setStreamId(int)"], ["int", "org.apache.cassandra.transport.Message.getStreamId()"], ["void", "org.apache.cassandra.transport.Message.setSourceFrame(org.apache.cassandra.transport.Frame)"], ["org.apache.cassandra.transport.Frame", "org.apache.cassandra.transport.Message.getSourceFrame()"], ["java.util.Map<java.lang.String, java.nio.ByteBuffer>", "org.apache.cassandra.transport.Message.getCustomPayload()"], ["void", "org.apache.cassandra.transport.Message.setCustomPayload(java.util.Map<java.lang.String, java.nio.ByteBuffer>)"], ["org.apache.cassandra.transport.ProtocolException", "org.apache.cassandra.transport.ProtocolException(java.lang.String)"], ["org.apache.cassandra.transport.ProtocolException", "org.apache.cassandra.transport.ProtocolException(java.lang.String, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.exceptions.ExceptionCode", "org.apache.cassandra.transport.ProtocolException.code()"], ["org.apache.cassandra.transport.ProtocolVersion", "org.apache.cassandra.transport.ProtocolException.getForcedProtocolVersion()"], ["org.apache.cassandra.transport.ProtocolVersion[]", "org.apache.cassandra.transport.ProtocolVersion.values()"], ["org.apache.cassandra.transport.ProtocolVersion", "org.apache.cassandra.transport.ProtocolVersion.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.ProtocolVersion", "org.apache.cassandra.transport.ProtocolVersion.decode(int)"], ["boolean", "org.apache.cassandra.transport.ProtocolVersion.isBeta()"], ["java.lang.String", "org.apache.cassandra.transport.ProtocolVersion.invalidVersionMessage(int)"], ["int", "org.apache.cassandra.transport.ProtocolVersion.asInt()"], ["java.lang.String", "org.apache.cassandra.transport.ProtocolVersion.toString()"], ["boolean", "org.apache.cassandra.transport.ProtocolVersion.isGreaterThan(org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.transport.ProtocolVersion.isGreaterOrEqualTo(org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.transport.ProtocolVersion.isSmallerThan(org.apache.cassandra.transport.ProtocolVersion)"], ["boolean", "org.apache.cassandra.transport.ProtocolVersion.isSmallerOrEqualTo(org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.RequestThreadPoolExecutor", "org.apache.cassandra.transport.RequestThreadPoolExecutor()"], ["boolean", "org.apache.cassandra.transport.RequestThreadPoolExecutor.isShuttingDown()"], ["void", "org.apache.cassandra.transport.RequestThreadPoolExecutor.shutdown()"], ["boolean", "org.apache.cassandra.transport.RequestThreadPoolExecutor.isShutdown()"], ["boolean", "org.apache.cassandra.transport.RequestThreadPoolExecutor.isTerminated()"], ["boolean", "org.apache.cassandra.transport.RequestThreadPoolExecutor.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["io.netty.util.concurrent.EventExecutorGroup", "org.apache.cassandra.transport.RequestThreadPoolExecutor.parent()"], ["boolean", "org.apache.cassandra.transport.RequestThreadPoolExecutor.inEventLoop(java.lang.Thread)"], ["void", "org.apache.cassandra.transport.RequestThreadPoolExecutor.execute(java.lang.Runnable)"], ["org.apache.cassandra.transport.Connection", "org.apache.cassandra.transport.Server$1.newConnection(io.netty.channel.Channel, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.Server$Builder", "org.apache.cassandra.transport.Server$Builder()"], ["org.apache.cassandra.transport.Server$Builder", "org.apache.cassandra.transport.Server$Builder.withSSL(boolean)"], ["org.apache.cassandra.transport.Server$Builder", "org.apache.cassandra.transport.Server$Builder.withEventLoopGroup(io.netty.channel.EventLoopGroup)"], ["org.apache.cassandra.transport.Server$Builder", "org.apache.cassandra.transport.Server$Builder.withEventExecutor(io.netty.util.concurrent.EventExecutor)"], ["org.apache.cassandra.transport.Server$Builder", "org.apache.cassandra.transport.Server$Builder.withHost(java.net.InetAddress)"], ["org.apache.cassandra.transport.Server$Builder", "org.apache.cassandra.transport.Server$Builder.withPort(int)"], ["org.apache.cassandra.transport.Server", "org.apache.cassandra.transport.Server$Builder.build()"], ["org.apache.cassandra.transport.Server$ConnectionTracker", "org.apache.cassandra.transport.Server$ConnectionTracker()"], ["void", "org.apache.cassandra.transport.Server$ConnectionTracker.addConnection(io.netty.channel.Channel, org.apache.cassandra.transport.Connection)"], ["void", "org.apache.cassandra.transport.Server$ConnectionTracker.register(org.apache.cassandra.transport.Event$Type, io.netty.channel.Channel)"], ["void", "org.apache.cassandra.transport.Server$ConnectionTracker.send(org.apache.cassandra.transport.Event)"], ["void", "org.apache.cassandra.transport.Server$ConnectionTracker.closeAll()"], ["int", "org.apache.cassandra.transport.Server$ConnectionTracker.getConnectedClients()"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onJoinCluster(java.net.InetAddress)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onLeaveCluster(java.net.InetAddress)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onMove(java.net.InetAddress)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onUp(java.net.InetAddress)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onDown(java.net.InetAddress)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onCreateKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onCreateColumnFamily(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onCreateUserType(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onCreateFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onCreateAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onUpdateKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onUpdateColumnFamily(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onUpdateUserType(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onUpdateFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onUpdateAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onDropKeyspace(java.lang.String)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onDropColumnFamily(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onDropUserType(java.lang.String, java.lang.String)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onDropFunction(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["void", "org.apache.cassandra.transport.Server$EventNotifier.onDropAggregate(java.lang.String, java.lang.String, java.util.List<org.apache.cassandra.db.marshal.AbstractType<?>>)"], ["org.apache.cassandra.transport.Server$Initializer", "org.apache.cassandra.transport.Server$Initializer(org.apache.cassandra.transport.Server)"], ["java.lang.String", "org.apache.cassandra.transport.Server$LatestEvent.toString()"], ["org.apache.cassandra.transport.Server$LatestEvent", "org.apache.cassandra.transport.Server$LatestEvent.forStatusChange(org.apache.cassandra.transport.Event$StatusChange$Status, org.apache.cassandra.transport.Server$LatestEvent)"], ["org.apache.cassandra.transport.Server$LatestEvent", "org.apache.cassandra.transport.Server$LatestEvent.forTopologyChange(org.apache.cassandra.transport.Event$TopologyChange$Change, org.apache.cassandra.transport.Server$LatestEvent)"], ["org.apache.cassandra.transport.Server$OptionalSecureInitializer", "org.apache.cassandra.transport.Server$OptionalSecureInitializer(org.apache.cassandra.transport.Server, org.apache.cassandra.config.EncryptionOptions)"], ["org.apache.cassandra.transport.Server$SecureInitializer", "org.apache.cassandra.transport.Server$SecureInitializer(org.apache.cassandra.transport.Server, org.apache.cassandra.config.EncryptionOptions)"], ["void", "org.apache.cassandra.transport.Server.stop()"], ["boolean", "org.apache.cassandra.transport.Server.isRunning()"], ["synchronized", "org.apache.cassandra.transport.Server.void start()"], ["int", "org.apache.cassandra.transport.Server.getConnectedClients()"], ["org.apache.cassandra.transport.ServerConnection$State[]", "org.apache.cassandra.transport.ServerConnection$State.values()"], ["org.apache.cassandra.transport.ServerConnection$State", "org.apache.cassandra.transport.ServerConnection$State.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.ServerConnection", "org.apache.cassandra.transport.ServerConnection(io.netty.channel.Channel, org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.transport.Connection$Tracker)"], ["org.apache.cassandra.service.QueryState", "org.apache.cassandra.transport.ServerConnection.validateNewMessage(org.apache.cassandra.transport.Message$Type, org.apache.cassandra.transport.ProtocolVersion, int)"], ["void", "org.apache.cassandra.transport.ServerConnection.applyStateTransition(org.apache.cassandra.transport.Message$Type, org.apache.cassandra.transport.Message$Type)"], ["org.apache.cassandra.auth.IAuthenticator$SaslNegotiator", "org.apache.cassandra.transport.ServerConnection.getSaslNegotiator(org.apache.cassandra.service.QueryState)"], ["org.apache.cassandra.transport.ServerError", "org.apache.cassandra.transport.ServerError(java.lang.Throwable)"], ["org.apache.cassandra.transport.ServerError", "org.apache.cassandra.transport.ServerError(java.lang.String)"], ["org.apache.cassandra.exceptions.ExceptionCode", "org.apache.cassandra.transport.ServerError.code()"], ["org.apache.cassandra.transport.Connection", "org.apache.cassandra.transport.SimpleClient$1.newConnection(io.netty.channel.Channel, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.SimpleClient$ConnectionTracker.addConnection(io.netty.channel.Channel, org.apache.cassandra.transport.Connection)"], ["boolean", "org.apache.cassandra.transport.SimpleClient$ConnectionTracker.isRegistered(org.apache.cassandra.transport.Event$Type, io.netty.channel.Channel)"], ["void", "org.apache.cassandra.transport.SimpleClient$ResponseHandler.channelRead0(io.netty.channel.ChannelHandlerContext, org.apache.cassandra.transport.Message$Response)"], ["void", "org.apache.cassandra.transport.SimpleClient$ResponseHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)"], ["void", "org.apache.cassandra.transport.SimpleClient$ResponseHandler.channelRead0(io.netty.channel.ChannelHandlerContext, java.lang.Object)"], ["org.apache.cassandra.transport.SimpleClient$SecureInitializer", "org.apache.cassandra.transport.SimpleClient$SecureInitializer(org.apache.cassandra.transport.SimpleClient)"], ["org.apache.cassandra.transport.SimpleClient$SimpleEventHandler", "org.apache.cassandra.transport.SimpleClient$SimpleEventHandler()"], ["void", "org.apache.cassandra.transport.SimpleClient$SimpleEventHandler.onEvent(org.apache.cassandra.transport.Event)"], ["org.apache.cassandra.transport.SimpleClient", "org.apache.cassandra.transport.SimpleClient(java.lang.String, int, org.apache.cassandra.transport.ProtocolVersion, org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions)"], ["org.apache.cassandra.transport.SimpleClient", "org.apache.cassandra.transport.SimpleClient(java.lang.String, int, org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions)"], ["org.apache.cassandra.transport.SimpleClient", "org.apache.cassandra.transport.SimpleClient(java.lang.String, int, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.SimpleClient", "org.apache.cassandra.transport.SimpleClient(java.lang.String, int, org.apache.cassandra.transport.ProtocolVersion, boolean, org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions)"], ["org.apache.cassandra.transport.SimpleClient", "org.apache.cassandra.transport.SimpleClient(java.lang.String, int)"], ["void", "org.apache.cassandra.transport.SimpleClient.connect(boolean)"], ["void", "org.apache.cassandra.transport.SimpleClient.setEventHandler(org.apache.cassandra.transport.SimpleClient$EventHandler)"], ["void", "org.apache.cassandra.transport.SimpleClient.login(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.SimpleClient.execute(java.lang.String, org.apache.cassandra.db.ConsistencyLevel)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.SimpleClient.execute(java.lang.String, java.util.List<java.nio.ByteBuffer>, org.apache.cassandra.db.ConsistencyLevel)"], ["org.apache.cassandra.transport.messages.ResultMessage$Prepared", "org.apache.cassandra.transport.SimpleClient.prepare(java.lang.String)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.SimpleClient.executePrepared(byte[], java.util.List<java.nio.ByteBuffer>, org.apache.cassandra.db.ConsistencyLevel)"], ["void", "org.apache.cassandra.transport.SimpleClient.close()"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.SimpleClient.execute(org.apache.cassandra.transport.Message$Request)"], ["org.apache.cassandra.transport.messages.AuthChallenge", "org.apache.cassandra.transport.messages.AuthChallenge$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.AuthChallenge$1.encode(org.apache.cassandra.transport.messages.AuthChallenge, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.AuthChallenge$1.encodedSize(org.apache.cassandra.transport.messages.AuthChallenge, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.AuthChallenge$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.AuthChallenge$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.AuthChallenge$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.AuthChallenge", "org.apache.cassandra.transport.messages.AuthChallenge(byte[])"], ["byte[]", "org.apache.cassandra.transport.messages.AuthChallenge.getToken()"], ["org.apache.cassandra.transport.messages.AuthResponse", "org.apache.cassandra.transport.messages.AuthResponse$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.AuthResponse$1.encode(org.apache.cassandra.transport.messages.AuthResponse, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.AuthResponse$1.encodedSize(org.apache.cassandra.transport.messages.AuthResponse, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.AuthResponse$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.AuthResponse$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.AuthResponse$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.AuthResponse", "org.apache.cassandra.transport.messages.AuthResponse(byte[])"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.AuthResponse.execute(org.apache.cassandra.service.QueryState, long)"], ["org.apache.cassandra.transport.messages.AuthSuccess", "org.apache.cassandra.transport.messages.AuthSuccess$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.AuthSuccess$1.encode(org.apache.cassandra.transport.messages.AuthSuccess, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.AuthSuccess$1.encodedSize(org.apache.cassandra.transport.messages.AuthSuccess, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.AuthSuccess$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.AuthSuccess$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.AuthSuccess$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.AuthSuccess", "org.apache.cassandra.transport.messages.AuthSuccess(byte[])"], ["byte[]", "org.apache.cassandra.transport.messages.AuthSuccess.getToken()"], ["org.apache.cassandra.transport.messages.AuthenticateMessage", "org.apache.cassandra.transport.messages.AuthenticateMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.AuthenticateMessage$1.encode(org.apache.cassandra.transport.messages.AuthenticateMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.AuthenticateMessage$1.encodedSize(org.apache.cassandra.transport.messages.AuthenticateMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.AuthenticateMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.AuthenticateMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.AuthenticateMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.AuthenticateMessage", "org.apache.cassandra.transport.messages.AuthenticateMessage(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.transport.messages.AuthenticateMessage.toString()"], ["org.apache.cassandra.transport.messages.BatchMessage", "org.apache.cassandra.transport.messages.BatchMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.BatchMessage$1.encode(org.apache.cassandra.transport.messages.BatchMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.BatchMessage$1.encodedSize(org.apache.cassandra.transport.messages.BatchMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.BatchMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.BatchMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.BatchMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.BatchMessage", "org.apache.cassandra.transport.messages.BatchMessage(org.apache.cassandra.cql3.statements.BatchStatement$Type, java.util.List<java.lang.Object>, java.util.List<java.util.List<java.nio.ByteBuffer>>, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.BatchMessage.execute(org.apache.cassandra.service.QueryState, long)"], ["java.lang.String", "org.apache.cassandra.transport.messages.BatchMessage.toString()"], ["org.apache.cassandra.transport.messages.CredentialsMessage", "org.apache.cassandra.transport.messages.CredentialsMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.CredentialsMessage$1.encode(org.apache.cassandra.transport.messages.CredentialsMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.CredentialsMessage$1.encodedSize(org.apache.cassandra.transport.messages.CredentialsMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.CredentialsMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.CredentialsMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.CredentialsMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.CredentialsMessage", "org.apache.cassandra.transport.messages.CredentialsMessage()"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.CredentialsMessage.execute(org.apache.cassandra.service.QueryState, long)"], ["java.lang.String", "org.apache.cassandra.transport.messages.CredentialsMessage.toString()"], ["org.apache.cassandra.transport.messages.ErrorMessage", "org.apache.cassandra.transport.messages.ErrorMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ErrorMessage$1.encode(org.apache.cassandra.transport.messages.ErrorMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ErrorMessage$1.encodedSize(org.apache.cassandra.transport.messages.ErrorMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ErrorMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ErrorMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ErrorMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ErrorMessage$WrappedException", "org.apache.cassandra.transport.messages.ErrorMessage$WrappedException(java.lang.Throwable, int)"], ["int", "org.apache.cassandra.transport.messages.ErrorMessage$WrappedException.getStreamId()"], ["org.apache.cassandra.transport.messages.ErrorMessage", "org.apache.cassandra.transport.messages.ErrorMessage.fromException(java.lang.Throwable)"], ["org.apache.cassandra.transport.messages.ErrorMessage", "org.apache.cassandra.transport.messages.ErrorMessage.fromException(java.lang.Throwable, com.google.common.base.Predicate<java.lang.Throwable>)"], ["java.lang.String", "org.apache.cassandra.transport.messages.ErrorMessage.toString()"], ["java.lang.RuntimeException", "org.apache.cassandra.transport.messages.ErrorMessage.wrap(java.lang.Throwable, int)"], ["org.apache.cassandra.transport.messages.EventMessage", "org.apache.cassandra.transport.messages.EventMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.EventMessage$1.encode(org.apache.cassandra.transport.messages.EventMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.EventMessage$1.encodedSize(org.apache.cassandra.transport.messages.EventMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.EventMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.EventMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.EventMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.EventMessage", "org.apache.cassandra.transport.messages.EventMessage(org.apache.cassandra.transport.Event)"], ["java.lang.String", "org.apache.cassandra.transport.messages.EventMessage.toString()"], ["org.apache.cassandra.transport.messages.ExecuteMessage", "org.apache.cassandra.transport.messages.ExecuteMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ExecuteMessage$1.encode(org.apache.cassandra.transport.messages.ExecuteMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ExecuteMessage$1.encodedSize(org.apache.cassandra.transport.messages.ExecuteMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ExecuteMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ExecuteMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ExecuteMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ExecuteMessage", "org.apache.cassandra.transport.messages.ExecuteMessage(org.apache.cassandra.utils.MD5Digest, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.ExecuteMessage.execute(org.apache.cassandra.service.QueryState, long)"], ["java.lang.String", "org.apache.cassandra.transport.messages.ExecuteMessage.toString()"], ["org.apache.cassandra.transport.messages.OptionsMessage", "org.apache.cassandra.transport.messages.OptionsMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.OptionsMessage$1.encode(org.apache.cassandra.transport.messages.OptionsMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.OptionsMessage$1.encodedSize(org.apache.cassandra.transport.messages.OptionsMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.OptionsMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.OptionsMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.OptionsMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.OptionsMessage", "org.apache.cassandra.transport.messages.OptionsMessage()"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.OptionsMessage.execute(org.apache.cassandra.service.QueryState, long)"], ["java.lang.String", "org.apache.cassandra.transport.messages.OptionsMessage.toString()"], ["org.apache.cassandra.transport.messages.PrepareMessage", "org.apache.cassandra.transport.messages.PrepareMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.PrepareMessage$1.encode(org.apache.cassandra.transport.messages.PrepareMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.PrepareMessage$1.encodedSize(org.apache.cassandra.transport.messages.PrepareMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.PrepareMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.PrepareMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.PrepareMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.PrepareMessage", "org.apache.cassandra.transport.messages.PrepareMessage(java.lang.String)"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.PrepareMessage.execute(org.apache.cassandra.service.QueryState, long)"], ["java.lang.String", "org.apache.cassandra.transport.messages.PrepareMessage.toString()"], ["org.apache.cassandra.transport.messages.QueryMessage", "org.apache.cassandra.transport.messages.QueryMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.QueryMessage$1.encode(org.apache.cassandra.transport.messages.QueryMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.QueryMessage$1.encodedSize(org.apache.cassandra.transport.messages.QueryMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.QueryMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.QueryMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.QueryMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.QueryMessage", "org.apache.cassandra.transport.messages.QueryMessage(java.lang.String, org.apache.cassandra.cql3.QueryOptions)"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.QueryMessage.execute(org.apache.cassandra.service.QueryState, long)"], ["java.lang.String", "org.apache.cassandra.transport.messages.QueryMessage.toString()"], ["org.apache.cassandra.transport.messages.ReadyMessage", "org.apache.cassandra.transport.messages.ReadyMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ReadyMessage$1.encode(org.apache.cassandra.transport.messages.ReadyMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ReadyMessage$1.encodedSize(org.apache.cassandra.transport.messages.ReadyMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ReadyMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ReadyMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ReadyMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ReadyMessage", "org.apache.cassandra.transport.messages.ReadyMessage()"], ["java.lang.String", "org.apache.cassandra.transport.messages.ReadyMessage.toString()"], ["org.apache.cassandra.transport.messages.RegisterMessage", "org.apache.cassandra.transport.messages.RegisterMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.RegisterMessage$1.encode(org.apache.cassandra.transport.messages.RegisterMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.RegisterMessage$1.encodedSize(org.apache.cassandra.transport.messages.RegisterMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.RegisterMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.RegisterMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.RegisterMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.RegisterMessage", "org.apache.cassandra.transport.messages.RegisterMessage(java.util.List<org.apache.cassandra.transport.Event$Type>)"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.RegisterMessage.execute(org.apache.cassandra.service.QueryState, long)"], ["java.lang.String", "org.apache.cassandra.transport.messages.RegisterMessage.toString()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.messages.ResultMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$1.encode(org.apache.cassandra.transport.messages.ResultMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$1.encodedSize(org.apache.cassandra.transport.messages.ResultMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ResultMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ResultMessage$Kind[]", "org.apache.cassandra.transport.messages.ResultMessage$Kind.values()"], ["org.apache.cassandra.transport.messages.ResultMessage$Kind", "org.apache.cassandra.transport.messages.ResultMessage$Kind.valueOf(java.lang.String)"], ["org.apache.cassandra.transport.messages.ResultMessage$Kind", "org.apache.cassandra.transport.messages.ResultMessage$Kind.fromId(int)"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.messages.ResultMessage$Prepared$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$Prepared$1.encode(org.apache.cassandra.transport.messages.ResultMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$Prepared$1.encodedSize(org.apache.cassandra.transport.messages.ResultMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$Prepared$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$Prepared$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ResultMessage$Prepared$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ResultMessage$Prepared", "org.apache.cassandra.transport.messages.ResultMessage$Prepared(org.apache.cassandra.utils.MD5Digest, org.apache.cassandra.cql3.statements.ParsedStatement$Prepared)"], ["org.apache.cassandra.transport.messages.ResultMessage$Prepared", "org.apache.cassandra.transport.messages.ResultMessage$Prepared.forThrift(int, java.util.List<org.apache.cassandra.cql3.ColumnSpecification>)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.transport.messages.ResultMessage$Prepared.toThriftResult()"], ["org.apache.cassandra.thrift.CqlPreparedResult", "org.apache.cassandra.transport.messages.ResultMessage$Prepared.toThriftPreparedResult()"], ["java.lang.String", "org.apache.cassandra.transport.messages.ResultMessage$Prepared.toString()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.messages.ResultMessage$Rows$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$Rows$1.encode(org.apache.cassandra.transport.messages.ResultMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$Rows$1.encodedSize(org.apache.cassandra.transport.messages.ResultMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$Rows$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$Rows$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ResultMessage$Rows$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ResultMessage$Rows", "org.apache.cassandra.transport.messages.ResultMessage$Rows(org.apache.cassandra.cql3.ResultSet)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.transport.messages.ResultMessage$Rows.toThriftResult()"], ["java.lang.String", "org.apache.cassandra.transport.messages.ResultMessage$Rows.toString()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange$1.encode(org.apache.cassandra.transport.messages.ResultMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange$1.encodedSize(org.apache.cassandra.transport.messages.ResultMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ResultMessage$SchemaChange", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange(org.apache.cassandra.transport.Event$SchemaChange)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange.toThriftResult()"], ["java.lang.String", "org.apache.cassandra.transport.messages.ResultMessage$SchemaChange.toString()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace$1.encode(org.apache.cassandra.transport.messages.ResultMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace$1.encodedSize(org.apache.cassandra.transport.messages.ResultMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace(java.lang.String)"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace.toThriftResult()"], ["java.lang.String", "org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace.toString()"], ["org.apache.cassandra.transport.messages.ResultMessage", "org.apache.cassandra.transport.messages.ResultMessage$Void$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$Void$1.encode(org.apache.cassandra.transport.messages.ResultMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$Void$1.encodedSize(org.apache.cassandra.transport.messages.ResultMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.ResultMessage$Void$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.ResultMessage$Void$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.ResultMessage$Void$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.ResultMessage$Void", "org.apache.cassandra.transport.messages.ResultMessage$Void()"], ["org.apache.cassandra.thrift.CqlResult", "org.apache.cassandra.transport.messages.ResultMessage$Void.toThriftResult()"], ["java.lang.String", "org.apache.cassandra.transport.messages.ResultMessage$Void.toString()"], ["org.apache.cassandra.transport.messages.StartupMessage", "org.apache.cassandra.transport.messages.StartupMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.StartupMessage$1.encode(org.apache.cassandra.transport.messages.StartupMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.StartupMessage$1.encodedSize(org.apache.cassandra.transport.messages.StartupMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.StartupMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.StartupMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.StartupMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.StartupMessage", "org.apache.cassandra.transport.messages.StartupMessage(java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.cassandra.transport.Message$Response", "org.apache.cassandra.transport.messages.StartupMessage.execute(org.apache.cassandra.service.QueryState, long)"], ["java.lang.String", "org.apache.cassandra.transport.messages.StartupMessage.toString()"], ["org.apache.cassandra.transport.messages.SupportedMessage", "org.apache.cassandra.transport.messages.SupportedMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.SupportedMessage$1.encode(org.apache.cassandra.transport.messages.SupportedMessage, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.SupportedMessage$1.encodedSize(org.apache.cassandra.transport.messages.SupportedMessage, org.apache.cassandra.transport.ProtocolVersion)"], ["int", "org.apache.cassandra.transport.messages.SupportedMessage$1.encodedSize(java.lang.Object, org.apache.cassandra.transport.ProtocolVersion)"], ["void", "org.apache.cassandra.transport.messages.SupportedMessage$1.encode(java.lang.Object, io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["java.lang.Object", "org.apache.cassandra.transport.messages.SupportedMessage$1.decode(io.netty.buffer.ByteBuf, org.apache.cassandra.transport.ProtocolVersion)"], ["org.apache.cassandra.transport.messages.SupportedMessage", "org.apache.cassandra.transport.messages.SupportedMessage(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"], ["java.lang.String", "org.apache.cassandra.transport.messages.SupportedMessage.toString()"], ["boolean", "org.apache.cassandra.triggers.CustomClassLoader$1.accept(java.io.File, java.lang.String)"], ["org.apache.cassandra.triggers.CustomClassLoader", "org.apache.cassandra.triggers.CustomClassLoader(java.lang.ClassLoader)"], ["org.apache.cassandra.triggers.CustomClassLoader", "org.apache.cassandra.triggers.CustomClassLoader(java.lang.ClassLoader, java.io.File)"], ["void", "org.apache.cassandra.triggers.CustomClassLoader.addClassPath(java.io.File)"], ["void", "org.apache.cassandra.triggers.TriggerExecutor.reloadClasses()"], ["org.apache.cassandra.db.partitions.PartitionUpdate", "org.apache.cassandra.triggers.TriggerExecutor.execute(org.apache.cassandra.db.partitions.PartitionUpdate)"], ["synchronized", "org.apache.cassandra.triggers.TriggerExecutor.org.apache.cassandra.triggers.ITrigger loadTriggerInstance(java.lang.String)"], ["org.apache.cassandra.utils.AbstractIterator$State[]", "org.apache.cassandra.utils.AbstractIterator$State.values()"], ["org.apache.cassandra.utils.AbstractIterator$State", "org.apache.cassandra.utils.AbstractIterator$State.valueOf(java.lang.String)"], ["org.apache.cassandra.utils.AbstractIterator", "org.apache.cassandra.utils.AbstractIterator()"], ["boolean", "org.apache.cassandra.utils.AbstractIterator.hasNext()"], ["V", "org.apache.cassandra.utils.AbstractIterator.next()"], ["V", "org.apache.cassandra.utils.AbstractIterator.peek()"], ["void", "org.apache.cassandra.utils.AbstractIterator.remove()"], ["org.apache.cassandra.utils.AlwaysPresentFilter", "org.apache.cassandra.utils.AlwaysPresentFilter()"], ["boolean", "org.apache.cassandra.utils.AlwaysPresentFilter.isPresent(org.apache.cassandra.utils.IFilter$FilterKey)"], ["void", "org.apache.cassandra.utils.AlwaysPresentFilter.add(org.apache.cassandra.utils.IFilter$FilterKey)"], ["void", "org.apache.cassandra.utils.AlwaysPresentFilter.clear()"], ["void", "org.apache.cassandra.utils.AlwaysPresentFilter.close()"], ["org.apache.cassandra.utils.IFilter", "org.apache.cassandra.utils.AlwaysPresentFilter.sharedCopy()"], ["java.lang.Throwable", "org.apache.cassandra.utils.AlwaysPresentFilter.close(java.lang.Throwable)"], ["void", "org.apache.cassandra.utils.AlwaysPresentFilter.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["long", "org.apache.cassandra.utils.AlwaysPresentFilter.serializedSize()"], ["long", "org.apache.cassandra.utils.AlwaysPresentFilter.offHeapSize()"], ["org.apache.cassandra.utils.concurrent.SharedCloseable", "org.apache.cassandra.utils.AlwaysPresentFilter.sharedCopy()"], ["org.apache.cassandra.utils.AsymmetricOrdering$Op[]", "org.apache.cassandra.utils.AsymmetricOrdering$Op.values()"], ["org.apache.cassandra.utils.AsymmetricOrdering$Op", "org.apache.cassandra.utils.AsymmetricOrdering$Op.valueOf(java.lang.String)"], ["int", "org.apache.cassandra.utils.AsymmetricOrdering$Reversed.compareAsymmetric(T1, T2)"], ["int", "org.apache.cassandra.utils.AsymmetricOrdering$Reversed.compare(T1, T1)"], ["org.apache.cassandra.utils.AsymmetricOrdering<T1, T2>", "org.apache.cassandra.utils.AsymmetricOrdering$Reversed.reverse()"], ["com.google.common.collect.Ordering", "org.apache.cassandra.utils.AsymmetricOrdering$Reversed.reverse()"], ["org.apache.cassandra.utils.AsymmetricOrdering", "org.apache.cassandra.utils.AsymmetricOrdering()"], ["int", "org.apache.cassandra.utils.AsymmetricOrdering.binarySearchAsymmetric(java.util.List<? extends T1>, T2, org.apache.cassandra.utils.AsymmetricOrdering$Op)"], ["org.apache.cassandra.utils.AsymmetricOrdering<T1, T2>", "org.apache.cassandra.utils.AsymmetricOrdering.reverse()"], ["com.google.common.collect.Ordering", "org.apache.cassandra.utils.AsymmetricOrdering.reverse()"], ["org.apache.cassandra.utils.BiMultiValMap", "org.apache.cassandra.utils.BiMultiValMap()"], ["org.apache.cassandra.utils.BiMultiValMap", "org.apache.cassandra.utils.BiMultiValMap(org.apache.cassandra.utils.BiMultiValMap<K, V>)"], ["com.google.common.collect.Multimap<V, K>", "org.apache.cassandra.utils.BiMultiValMap.inverse()"], ["void", "org.apache.cassandra.utils.BiMultiValMap.clear()"], ["boolean", "org.apache.cassandra.utils.BiMultiValMap.containsKey(java.lang.Object)"], ["boolean", "org.apache.cassandra.utils.BiMultiValMap.containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.apache.cassandra.utils.BiMultiValMap.entrySet()"], ["V", "org.apache.cassandra.utils.BiMultiValMap.get(java.lang.Object)"], ["boolean", "org.apache.cassandra.utils.BiMultiValMap.isEmpty()"], ["V", "org.apache.cassandra.utils.BiMultiValMap.put(K, V)"], ["void", "org.apache.cassandra.utils.BiMultiValMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.apache.cassandra.utils.BiMultiValMap.remove(java.lang.Object)"], ["int", "org.apache.cassandra.utils.BiMultiValMap.size()"], ["org.apache.cassandra.utils.BloomCalculations$BloomSpecification", "org.apache.cassandra.utils.BloomCalculations$BloomSpecification(int, int)"], ["java.lang.String", "org.apache.cassandra.utils.BloomCalculations$BloomSpecification.toString()"], ["org.apache.cassandra.utils.BloomCalculations", "org.apache.cassandra.utils.BloomCalculations()"], ["org.apache.cassandra.utils.BloomCalculations$BloomSpecification", "org.apache.cassandra.utils.BloomCalculations.computeBloomSpec(int)"], ["org.apache.cassandra.utils.BloomCalculations$BloomSpecification", "org.apache.cassandra.utils.BloomCalculations.computeBloomSpec(int, double)"], ["int", "org.apache.cassandra.utils.BloomCalculations.maxBucketsPerElement(long)"], ["double", "org.apache.cassandra.utils.BloomCalculations.minSupportedBloomFilterFpChance()"], ["long", "org.apache.cassandra.utils.BloomFilter.serializedSize()"], ["long[]", "org.apache.cassandra.utils.BloomFilter.getHashBuckets(org.apache.cassandra.utils.IFilter$FilterKey, int, long)"], ["void", "org.apache.cassandra.utils.BloomFilter.add(org.apache.cassandra.utils.IFilter$FilterKey)"], ["boolean", "org.apache.cassandra.utils.BloomFilter.isPresent(org.apache.cassandra.utils.IFilter$FilterKey)"], ["void", "org.apache.cassandra.utils.BloomFilter.clear()"], ["org.apache.cassandra.utils.IFilter", "org.apache.cassandra.utils.BloomFilter.sharedCopy()"], ["long", "org.apache.cassandra.utils.BloomFilter.offHeapSize()"], ["java.lang.String", "org.apache.cassandra.utils.BloomFilter.toString()"], ["void", "org.apache.cassandra.utils.BloomFilter.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["org.apache.cassandra.utils.concurrent.SharedCloseable", "org.apache.cassandra.utils.BloomFilter.sharedCopy()"], ["void", "org.apache.cassandra.utils.BloomFilterSerializer.serialize(org.apache.cassandra.utils.BloomFilter, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.utils.BloomFilter", "org.apache.cassandra.utils.BloomFilterSerializer.deserialize(java.io.DataInput, boolean)"], ["org.apache.cassandra.utils.BloomFilter", "org.apache.cassandra.utils.BloomFilterSerializer.deserialize(java.io.DataInput, boolean, boolean)"], ["long", "org.apache.cassandra.utils.BloomFilterSerializer.serializedSize(org.apache.cassandra.utils.BloomFilter)"], ["org.apache.cassandra.utils.BooleanSerializer", "org.apache.cassandra.utils.BooleanSerializer()"], ["void", "org.apache.cassandra.utils.BooleanSerializer.serialize(java.lang.Boolean, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["java.lang.Boolean", "org.apache.cassandra.utils.BooleanSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.utils.BooleanSerializer.serializedSize(java.lang.Boolean, int)"], ["long", "org.apache.cassandra.utils.BooleanSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.utils.BooleanSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.utils.BooleanSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil$1.read()"], ["int", "org.apache.cassandra.utils.ByteBufferUtil$1.read(byte[], int, int)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil$1.available()"], ["org.apache.cassandra.utils.ByteBufferUtil", "org.apache.cassandra.utils.ByteBufferUtil()"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.compareUnsigned(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.compare(byte[], java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.compare(java.nio.ByteBuffer, byte[])"], ["java.lang.String", "org.apache.cassandra.utils.ByteBufferUtil.string(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.utils.ByteBufferUtil.string(java.nio.ByteBuffer, int, int)"], ["java.lang.String", "org.apache.cassandra.utils.ByteBufferUtil.string(java.nio.ByteBuffer, int, int, java.nio.charset.Charset)"], ["java.lang.String", "org.apache.cassandra.utils.ByteBufferUtil.string(java.nio.ByteBuffer, java.nio.charset.Charset)"], ["byte[]", "org.apache.cassandra.utils.ByteBufferUtil.getArray(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.lastIndexOf(java.nio.ByteBuffer, byte, int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(java.lang.String, java.nio.charset.Charset)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.clone(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.arrayCopy(java.nio.ByteBuffer, int, byte[], int, int)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.arrayCopy(java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.put(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.writeWithLength(java.nio.ByteBuffer, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.writeWithVIntLength(java.nio.ByteBuffer, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.writeWithLength(byte[], java.io.DataOutput)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.writeWithShortLength(java.nio.ByteBuffer, org.apache.cassandra.io.util.DataOutputPlus)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.writeWithShortLength(byte[], java.io.DataOutput)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.readWithLength(java.io.DataInput)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.readWithVIntLength(org.apache.cassandra.io.util.DataInputPlus)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithLength(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithVIntLength(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.skipWithVIntLength(org.apache.cassandra.io.util.DataInputPlus)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.readShortLength(java.io.DataInput)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.readWithShortLength(java.io.DataInput)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithShortLength(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.skipShortLength(org.apache.cassandra.io.util.DataInputPlus)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.read(java.io.DataInput, int)"], ["byte[]", "org.apache.cassandra.utils.ByteBufferUtil.readBytes(java.io.DataInput, int)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.toInt(java.nio.ByteBuffer)"], ["short", "org.apache.cassandra.utils.ByteBufferUtil.toShort(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.utils.ByteBufferUtil.toLong(java.nio.ByteBuffer)"], ["float", "org.apache.cassandra.utils.ByteBufferUtil.toFloat(java.nio.ByteBuffer)"], ["double", "org.apache.cassandra.utils.ByteBufferUtil.toDouble(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.objectToBytes(java.lang.Object)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(byte)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(short)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(long)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(float)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(double)"], ["java.io.InputStream", "org.apache.cassandra.utils.ByteBufferUtil.inputStream(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.cassandra.utils.ByteBufferUtil.bytesToHex(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.hexToBytes(java.lang.String)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.compareSubArrays(java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(java.net.InetAddress)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.bytes(java.util.UUID)"], ["boolean", "org.apache.cassandra.utils.ByteBufferUtil.isPrefix(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.minimalBufferFor(java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.getShortLength(java.nio.ByteBuffer, int)"], ["int", "org.apache.cassandra.utils.ByteBufferUtil.readShortLength(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.ByteBufferUtil.writeShortLength(java.nio.ByteBuffer, int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.readBytes(java.nio.ByteBuffer, int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.readBytesWithShortLength(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.ensureCapacity(java.nio.ByteBuffer, int, boolean)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.ByteBufferUtil.ensureCapacity(java.nio.ByteBuffer, int, boolean, org.apache.cassandra.io.compress.BufferType)"], ["boolean", "org.apache.cassandra.utils.ByteBufferUtil.contains(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.utils.ByteBufferUtil.startsWith(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["boolean", "org.apache.cassandra.utils.ByteBufferUtil.endsWith(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["org.apache.cassandra.utils.CassandraVersion", "org.apache.cassandra.utils.CassandraVersion(java.lang.String)"], ["int", "org.apache.cassandra.utils.CassandraVersion.compareTo(org.apache.cassandra.utils.CassandraVersion)"], ["boolean", "org.apache.cassandra.utils.CassandraVersion.is30()"], ["org.apache.cassandra.utils.CassandraVersion", "org.apache.cassandra.utils.CassandraVersion.findSupportingVersion(org.apache.cassandra.utils.CassandraVersion...)"], ["boolean", "org.apache.cassandra.utils.CassandraVersion.isSupportedBy(org.apache.cassandra.utils.CassandraVersion)"], ["boolean", "org.apache.cassandra.utils.CassandraVersion.equals(java.lang.Object)"], ["int", "org.apache.cassandra.utils.CassandraVersion.hashCode()"], ["java.lang.String", "org.apache.cassandra.utils.CassandraVersion.toString()"], ["int", "org.apache.cassandra.utils.CassandraVersion.compareTo(java.lang.Object)"], ["java.util.zip.Checksum", "org.apache.cassandra.utils.ChecksumType$1.newInstance()"], ["void", "org.apache.cassandra.utils.ChecksumType$1.update(java.util.zip.Checksum, java.nio.ByteBuffer)"], ["java.util.zip.Checksum", "org.apache.cassandra.utils.ChecksumType$2.newInstance()"], ["void", "org.apache.cassandra.utils.ChecksumType$2.update(java.util.zip.Checksum, java.nio.ByteBuffer)"], ["org.apache.cassandra.utils.ChecksumType[]", "org.apache.cassandra.utils.ChecksumType.values()"], ["org.apache.cassandra.utils.ChecksumType", "org.apache.cassandra.utils.ChecksumType.valueOf(java.lang.String)"], ["long", "org.apache.cassandra.utils.ChecksumType.of(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.utils.ChecksumType.of(byte[], int, int)"], ["org.apache.cassandra.utils.Clock", "org.apache.cassandra.utils.Clock()"], ["long", "org.apache.cassandra.utils.Clock.nanoTime()"], ["long", "org.apache.cassandra.utils.Clock.currentTimeMillis()"], ["long", "org.apache.cassandra.utils.CoalescingStrategies$1.nanoTime()"], ["void", "org.apache.cassandra.utils.CoalescingStrategies$2.park(long)"], ["<C extends org.apache.cassandra.utils.CoalescingStrategies$Coalescable> void", "org.apache.cassandra.utils.CoalescingStrategies$CoalescingStrategy.coalesce(java.util.concurrent.BlockingQueue<C>, java.util.List<C>, int)"], ["org.apache.cassandra.utils.CoalescingStrategies$DisabledCoalescingStrategy", "org.apache.cassandra.utils.CoalescingStrategies$DisabledCoalescingStrategy(int, org.apache.cassandra.utils.CoalescingStrategies$Parker, org.slf4j.Logger, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.utils.CoalescingStrategies$DisabledCoalescingStrategy.toString()"], ["org.apache.cassandra.utils.CoalescingStrategies$FixedCoalescingStrategy", "org.apache.cassandra.utils.CoalescingStrategies$FixedCoalescingStrategy(int, org.apache.cassandra.utils.CoalescingStrategies$Parker, org.slf4j.Logger, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.utils.CoalescingStrategies$FixedCoalescingStrategy.toString()"], ["org.apache.cassandra.utils.CoalescingStrategies$MovingAverageCoalescingStrategy", "org.apache.cassandra.utils.CoalescingStrategies$MovingAverageCoalescingStrategy(int, org.apache.cassandra.utils.CoalescingStrategies$Parker, org.slf4j.Logger, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.utils.CoalescingStrategies$MovingAverageCoalescingStrategy.toString()"], ["org.apache.cassandra.utils.CoalescingStrategies$TimeHorizonMovingAverageCoalescingStrategy", "org.apache.cassandra.utils.CoalescingStrategies$TimeHorizonMovingAverageCoalescingStrategy(int, org.apache.cassandra.utils.CoalescingStrategies$Parker, org.slf4j.Logger, java.lang.String)"], ["java.lang.String", "org.apache.cassandra.utils.CoalescingStrategies$TimeHorizonMovingAverageCoalescingStrategy.toString()"], ["org.apache.cassandra.utils.CoalescingStrategies", "org.apache.cassandra.utils.CoalescingStrategies()"], ["org.apache.cassandra.utils.CoalescingStrategies$CoalescingStrategy", "org.apache.cassandra.utils.CoalescingStrategies.newCoalescingStrategy(java.lang.String, int, org.slf4j.Logger, java.lang.String)"], ["org.apache.cassandra.utils.ConcurrentBiMap", "org.apache.cassandra.utils.ConcurrentBiMap()"], ["java.util.Map<V, K>", "org.apache.cassandra.utils.ConcurrentBiMap.inverse()"], ["void", "org.apache.cassandra.utils.ConcurrentBiMap.clear()"], ["boolean", "org.apache.cassandra.utils.ConcurrentBiMap.containsKey(java.lang.Object)"], ["boolean", "org.apache.cassandra.utils.ConcurrentBiMap.containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.apache.cassandra.utils.ConcurrentBiMap.entrySet()"], ["V", "org.apache.cassandra.utils.ConcurrentBiMap.get(java.lang.Object)"], ["boolean", "org.apache.cassandra.utils.ConcurrentBiMap.isEmpty()"], ["synchronized", "org.apache.cassandra.utils.ConcurrentBiMap.V put(K, V)"], ["synchronized", "org.apache.cassandra.utils.ConcurrentBiMap.void putAll(java.util.Map<? extends K, ? extends V>)"], ["synchronized", "org.apache.cassandra.utils.ConcurrentBiMap.V remove(java.lang.Object)"], ["int", "org.apache.cassandra.utils.ConcurrentBiMap.size()"], ["org.apache.cassandra.utils.CounterId", "org.apache.cassandra.utils.CounterId.getLocalId()"], ["org.apache.cassandra.utils.CounterId", "org.apache.cassandra.utils.CounterId.fromInt(int)"], ["org.apache.cassandra.utils.CounterId", "org.apache.cassandra.utils.CounterId.wrap(java.nio.ByteBuffer)"], ["org.apache.cassandra.utils.CounterId", "org.apache.cassandra.utils.CounterId.wrap(java.nio.ByteBuffer, int)"], ["org.apache.cassandra.utils.CounterId", "org.apache.cassandra.utils.CounterId.generate()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.CounterId.bytes()"], ["boolean", "org.apache.cassandra.utils.CounterId.isLocalId()"], ["int", "org.apache.cassandra.utils.CounterId.compareTo(org.apache.cassandra.utils.CounterId)"], ["java.lang.String", "org.apache.cassandra.utils.CounterId.toString()"], ["boolean", "org.apache.cassandra.utils.CounterId.equals(java.lang.Object)"], ["int", "org.apache.cassandra.utils.CounterId.hashCode()"], ["int", "org.apache.cassandra.utils.CounterId.compareTo(java.lang.Object)"], ["org.apache.cassandra.utils.DefaultValue", "org.apache.cassandra.utils.DefaultValue(T)"], ["T", "org.apache.cassandra.utils.DefaultValue.value()"], ["void", "org.apache.cassandra.utils.DefaultValue.set(T)"], ["void", "org.apache.cassandra.utils.DefaultValue.reset()"], ["boolean", "org.apache.cassandra.utils.DefaultValue.isModified()"], ["org.apache.cassandra.utils.DirectorySizeCalculator", "org.apache.cassandra.utils.DirectorySizeCalculator(java.io.File)"], ["boolean", "org.apache.cassandra.utils.DirectorySizeCalculator.isAcceptable(java.nio.file.Path)"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.utils.DirectorySizeCalculator.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.utils.DirectorySizeCalculator.visitFileFailed(java.nio.file.Path, java.io.IOException)"], ["long", "org.apache.cassandra.utils.DirectorySizeCalculator.getAllocatedSize()"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.utils.DirectorySizeCalculator.visitFileFailed(java.lang.Object, java.io.IOException)"], ["java.nio.file.FileVisitResult", "org.apache.cassandra.utils.DirectorySizeCalculator.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["org.apache.cassandra.utils.DynamicList", "org.apache.cassandra.utils.DynamicList(int)"], ["void", "org.apache.cassandra.utils.DynamicList.remove(org.apache.cassandra.utils.DynamicList$Node<E>)"], ["E", "org.apache.cassandra.utils.DynamicList.get(int)"], ["int", "org.apache.cassandra.utils.DynamicList.size()"], ["void", "org.apache.cassandra.utils.DynamicList.main(java.lang.String[])"], ["org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer", "org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer()"], ["void", "org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer.serialize(org.apache.cassandra.utils.EstimatedHistogram, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer.serializedSize(org.apache.cassandra.utils.EstimatedHistogram)"], ["long", "org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.EstimatedHistogram()"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.EstimatedHistogram(int)"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.EstimatedHistogram(int, boolean)"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.EstimatedHistogram(long[])"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.EstimatedHistogram(long[], long[])"], ["long[]", "org.apache.cassandra.utils.EstimatedHistogram.newOffsets(int, boolean)"], ["long[]", "org.apache.cassandra.utils.EstimatedHistogram.getBucketOffsets()"], ["void", "org.apache.cassandra.utils.EstimatedHistogram.add(long)"], ["long[]", "org.apache.cassandra.utils.EstimatedHistogram.getBuckets(boolean)"], ["long", "org.apache.cassandra.utils.EstimatedHistogram.min()"], ["long", "org.apache.cassandra.utils.EstimatedHistogram.max()"], ["long", "org.apache.cassandra.utils.EstimatedHistogram.percentile(double)"], ["long", "org.apache.cassandra.utils.EstimatedHistogram.mean()"], ["double", "org.apache.cassandra.utils.EstimatedHistogram.rawMean()"], ["long", "org.apache.cassandra.utils.EstimatedHistogram.count()"], ["long", "org.apache.cassandra.utils.EstimatedHistogram.getLargestBucketOffset()"], ["boolean", "org.apache.cassandra.utils.EstimatedHistogram.isOverflowed()"], ["void", "org.apache.cassandra.utils.EstimatedHistogram.log(org.slf4j.Logger)"], ["boolean", "org.apache.cassandra.utils.EstimatedHistogram.equals(java.lang.Object)"], ["int", "org.apache.cassandra.utils.EstimatedHistogram.hashCode()"], ["void", "org.apache.cassandra.utils.ExpiringMap$1.run()"], ["org.apache.cassandra.utils.ExpiringMap", "org.apache.cassandra.utils.ExpiringMap(long)"], ["org.apache.cassandra.utils.ExpiringMap", "org.apache.cassandra.utils.ExpiringMap(long, com.google.common.base.Function<org.apache.cassandra.utils.Pair<K, org.apache.cassandra.utils.ExpiringMap$CacheableObject<V>>, ?>)"], ["boolean", "org.apache.cassandra.utils.ExpiringMap.shutdownBlocking()"], ["void", "org.apache.cassandra.utils.ExpiringMap.reset()"], ["V", "org.apache.cassandra.utils.ExpiringMap.put(K, V)"], ["V", "org.apache.cassandra.utils.ExpiringMap.put(K, V, long)"], ["V", "org.apache.cassandra.utils.ExpiringMap.get(K)"], ["V", "org.apache.cassandra.utils.ExpiringMap.remove(K)"], ["long", "org.apache.cassandra.utils.ExpiringMap.getAge(K)"], ["int", "org.apache.cassandra.utils.ExpiringMap.size()"], ["boolean", "org.apache.cassandra.utils.ExpiringMap.containsKey(K)"], ["boolean", "org.apache.cassandra.utils.ExpiringMap.isEmpty()"], ["int", "org.apache.cassandra.utils.FBUtilities$2.compare(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.db.DecoratedKey)"], ["int", "org.apache.cassandra.utils.FBUtilities$2.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.utils.FBUtilities$WrappedCloseableIterator", "org.apache.cassandra.utils.FBUtilities$WrappedCloseableIterator(java.util.Iterator<T>)"], ["void", "org.apache.cassandra.utils.FBUtilities$WrappedCloseableIterator.close()"], ["org.apache.cassandra.utils.FBUtilities", "org.apache.cassandra.utils.FBUtilities()"], ["int", "org.apache.cassandra.utils.FBUtilities.getAvailableProcessors()"], ["java.security.MessageDigest", "org.apache.cassandra.utils.FBUtilities.threadLocalMD5Digest()"], ["java.security.MessageDigest", "org.apache.cassandra.utils.FBUtilities.newMessageDigest(java.lang.String)"], ["java.net.InetAddress", "org.apache.cassandra.utils.FBUtilities.getLocalAddress()"], ["java.net.InetAddress", "org.apache.cassandra.utils.FBUtilities.getBroadcastAddress()"], ["java.net.InetAddress", "org.apache.cassandra.utils.FBUtilities.getBroadcastRpcAddress()"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.getNetworkInterface(java.net.InetAddress)"], ["org.apache.cassandra.utils.Pair<java.math.BigInteger, java.lang.Boolean>", "org.apache.cassandra.utils.FBUtilities.midpoint(java.math.BigInteger, java.math.BigInteger, int)"], ["int", "org.apache.cassandra.utils.FBUtilities.compareUnsigned(byte[], byte[], int, int, int, int)"], ["int", "org.apache.cassandra.utils.FBUtilities.compareUnsigned(byte[], byte[])"], ["byte[]", "org.apache.cassandra.utils.FBUtilities.xor(byte[], byte[])"], ["void", "org.apache.cassandra.utils.FBUtilities.sortSampledKeys(java.util.List<org.apache.cassandra.db.DecoratedKey>, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.resourceToFile(java.lang.String)"], ["java.io.File", "org.apache.cassandra.utils.FBUtilities.cassandraTriggerDir()"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.getReleaseVersionString()"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.getReleaseVersionMajor()"], ["long", "org.apache.cassandra.utils.FBUtilities.timestampMicros()"], ["int", "org.apache.cassandra.utils.FBUtilities.nowInSeconds()"], ["<T> java.util.List<T>", "org.apache.cassandra.utils.FBUtilities.waitOnFutures(java.lang.Iterable<? extends java.util.concurrent.Future<? extends T>>)"], ["<T> java.util.List<T>", "org.apache.cassandra.utils.FBUtilities.waitOnFutures(java.lang.Iterable<? extends java.util.concurrent.Future<? extends T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "org.apache.cassandra.utils.FBUtilities.waitOnFuture(java.util.concurrent.Future<T>)"], ["void", "org.apache.cassandra.utils.FBUtilities.waitOnFutures(java.util.List<org.apache.cassandra.net.AsyncOneResponse>, long)"], ["<T> java.util.concurrent.Future<? extends T>", "org.apache.cassandra.utils.FBUtilities.waitOnFirstFuture(java.lang.Iterable<? extends java.util.concurrent.Future<? extends T>>)"], ["<T> java.util.concurrent.Future<? extends T>", "org.apache.cassandra.utils.FBUtilities.waitOnFirstFuture(java.lang.Iterable<? extends java.util.concurrent.Future<? extends T>>, long)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.utils.FBUtilities.newPartitioner(org.apache.cassandra.io.sstable.Descriptor)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.utils.FBUtilities.newPartitioner(java.lang.String)"], ["org.apache.cassandra.auth.IAuthorizer", "org.apache.cassandra.utils.FBUtilities.newAuthorizer(java.lang.String)"], ["org.apache.cassandra.auth.IAuthenticator", "org.apache.cassandra.utils.FBUtilities.newAuthenticator(java.lang.String)"], ["org.apache.cassandra.auth.IRoleManager", "org.apache.cassandra.utils.FBUtilities.newRoleManager(java.lang.String)"], ["<T> java.lang.Class<T>", "org.apache.cassandra.utils.FBUtilities.classForName(java.lang.String, java.lang.String)"], ["<T> T", "org.apache.cassandra.utils.FBUtilities.instanceOrConstruct(java.lang.String, java.lang.String)"], ["<T> T", "org.apache.cassandra.utils.FBUtilities.construct(java.lang.String, java.lang.String)"], ["<T> java.util.NavigableSet<T>", "org.apache.cassandra.utils.FBUtilities.singleton(T, java.util.Comparator<? super T>)"], ["<T> java.util.NavigableSet<T>", "org.apache.cassandra.utils.FBUtilities.emptySortedSet(java.util.Comparator<? super T>)"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.toString(java.util.Map<?, ?>)"], ["java.lang.reflect.Field", "org.apache.cassandra.utils.FBUtilities.getProtectedField(java.lang.Class, java.lang.String)"], ["<T> org.apache.cassandra.utils.CloseableIterator<T>", "org.apache.cassandra.utils.FBUtilities.closeableIterator(java.util.Iterator<T>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.utils.FBUtilities.fromJsonMap(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.json(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.prettyPrintMemory(long)"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.prettyPrintMemory(long, boolean)"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.prettyPrintMemoryPerSecond(long)"], ["java.lang.String", "org.apache.cassandra.utils.FBUtilities.prettyPrintMemoryPerSecond(long, long)"], ["void", "org.apache.cassandra.utils.FBUtilities.exec(java.lang.ProcessBuilder)"], ["void", "org.apache.cassandra.utils.FBUtilities.updateChecksumInt(java.util.zip.Checksum, int)"], ["void", "org.apache.cassandra.utils.FBUtilities.updateChecksum(java.util.zip.CRC32, java.nio.ByteBuffer, int, int)"], ["void", "org.apache.cassandra.utils.FBUtilities.updateChecksum(java.util.zip.CRC32, java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.utils.FBUtilities.abs(long)"], ["<T> byte[]", "org.apache.cassandra.utils.FBUtilities.serialize(T, org.apache.cassandra.io.IVersionedSerializer<T>, int)"], ["long", "org.apache.cassandra.utils.FBUtilities.copy(java.io.InputStream, java.io.OutputStream, long)"], ["java.io.File", "org.apache.cassandra.utils.FBUtilities.getToolsOutputDirectory()"], ["void", "org.apache.cassandra.utils.FBUtilities.updateWithShort(java.security.MessageDigest, int)"], ["void", "org.apache.cassandra.utils.FBUtilities.updateWithByte(java.security.MessageDigest, int)"], ["void", "org.apache.cassandra.utils.FBUtilities.updateWithInt(java.security.MessageDigest, int)"], ["void", "org.apache.cassandra.utils.FBUtilities.updateWithLong(java.security.MessageDigest, long)"], ["void", "org.apache.cassandra.utils.FBUtilities.updateWithBoolean(java.security.MessageDigest, boolean)"], ["void", "org.apache.cassandra.utils.FBUtilities.closeAll(java.util.List<? extends java.lang.AutoCloseable>)"], ["byte[]", "org.apache.cassandra.utils.FBUtilities.toWriteUTFBytes(java.lang.String)"], ["void", "org.apache.cassandra.utils.FBUtilities.sleepQuietly(long)"], ["long", "org.apache.cassandra.utils.FBUtilities.align(long, int)"], ["org.apache.cassandra.utils.FastByteOperations$PureJavaOperations", "org.apache.cassandra.utils.FastByteOperations$PureJavaOperations()"], ["int", "org.apache.cassandra.utils.FastByteOperations$PureJavaOperations.compare(byte[], int, int, byte[], int, int)"], ["int", "org.apache.cassandra.utils.FastByteOperations$PureJavaOperations.compare(java.nio.ByteBuffer, byte[], int, int)"], ["int", "org.apache.cassandra.utils.FastByteOperations$PureJavaOperations.compare(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.FastByteOperations$PureJavaOperations.copy(java.nio.ByteBuffer, int, byte[], int, int)"], ["void", "org.apache.cassandra.utils.FastByteOperations$PureJavaOperations.copy(java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int)"], ["java.lang.Object", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations$1.run()"], ["org.apache.cassandra.utils.FastByteOperations$UnsafeOperations", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations()"], ["int", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.compare(byte[], int, int, byte[], int, int)"], ["int", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.compare(java.nio.ByteBuffer, byte[], int, int)"], ["int", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.compare(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.copy(java.nio.ByteBuffer, int, byte[], int, int)"], ["void", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.copy(java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int)"], ["void", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.copy(java.lang.Object, long, java.nio.ByteBuffer, int, int)"], ["void", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.copy(java.lang.Object, long, byte[], int, int)"], ["void", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.copy(java.lang.Object, long, java.lang.Object, long, long)"], ["int", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.compareTo(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.compareTo(java.lang.Object, long, int, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.compareTo(java.lang.Object, long, int, java.lang.Object, long, int)"], ["org.apache.cassandra.utils.FastByteOperations", "org.apache.cassandra.utils.FastByteOperations()"], ["int", "org.apache.cassandra.utils.FastByteOperations.compareUnsigned(byte[], int, int, byte[], int, int)"], ["int", "org.apache.cassandra.utils.FastByteOperations.compareUnsigned(java.nio.ByteBuffer, byte[], int, int)"], ["int", "org.apache.cassandra.utils.FastByteOperations.compareUnsigned(byte[], int, int, java.nio.ByteBuffer)"], ["int", "org.apache.cassandra.utils.FastByteOperations.compareUnsigned(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.FastByteOperations.copy(java.nio.ByteBuffer, int, byte[], int, int)"], ["void", "org.apache.cassandra.utils.FastByteOperations.copy(java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int)"], ["org.apache.cassandra.utils.FilterFactory", "org.apache.cassandra.utils.FilterFactory()"], ["void", "org.apache.cassandra.utils.FilterFactory.serialize(org.apache.cassandra.utils.IFilter, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.utils.IFilter", "org.apache.cassandra.utils.FilterFactory.deserialize(java.io.DataInput, boolean, boolean)"], ["org.apache.cassandra.utils.IFilter", "org.apache.cassandra.utils.FilterFactory.getFilter(long, int, boolean, boolean)"], ["org.apache.cassandra.utils.IFilter", "org.apache.cassandra.utils.FilterFactory.getFilter(long, double, boolean, boolean)"], ["org.apache.cassandra.utils.GuidGenerator", "org.apache.cassandra.utils.GuidGenerator()"], ["java.lang.String", "org.apache.cassandra.utils.GuidGenerator.guid()"], ["java.lang.String", "org.apache.cassandra.utils.GuidGenerator.guidToString(byte[])"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.GuidGenerator.guidAsBytes(java.util.Random, java.lang.String, long)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.GuidGenerator.guidAsBytes()"], ["boolean", "org.apache.cassandra.utils.HeapUtils$1.accept(java.io.File, java.lang.String)"], ["void", "org.apache.cassandra.utils.HeapUtils.logHeapHistogram()"], ["org.apache.cassandra.utils.Hex", "org.apache.cassandra.utils.Hex()"], ["byte[]", "org.apache.cassandra.utils.Hex.hexToBytes(java.lang.String)"], ["java.lang.String", "org.apache.cassandra.utils.Hex.bytesToHex(byte...)"], ["java.lang.String", "org.apache.cassandra.utils.Hex.bytesToHex(byte[], int, int)"], ["java.lang.String", "org.apache.cassandra.utils.Hex.wrapCharArray(char[])"], ["<T> java.lang.reflect.Constructor<T>", "org.apache.cassandra.utils.Hex.getProtectedConstructor(java.lang.Class<T>, java.lang.Class<?>...)"], ["org.apache.cassandra.utils.HistogramBuilder", "org.apache.cassandra.utils.HistogramBuilder()"], ["org.apache.cassandra.utils.HistogramBuilder", "org.apache.cassandra.utils.HistogramBuilder(long[])"], ["void", "org.apache.cassandra.utils.HistogramBuilder.add(long)"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.HistogramBuilder.buildWithStdevRangesAroundMean()"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.HistogramBuilder.buildWithStdevRangesAroundMean(int)"], ["default", "org.apache.cassandra.utils.IFilter.org.apache.cassandra.utils.concurrent.SharedCloseable sharedCopy()"], ["org.apache.cassandra.utils.IntegerInterval$Set", "org.apache.cassandra.utils.IntegerInterval$Set()"], ["synchronized", "org.apache.cassandra.utils.IntegerInterval$Set.void add(int, int)"], ["boolean", "org.apache.cassandra.utils.IntegerInterval$Set.covers(org.apache.cassandra.utils.IntegerInterval)"], ["boolean", "org.apache.cassandra.utils.IntegerInterval$Set.covers(int, int)"], ["int", "org.apache.cassandra.utils.IntegerInterval$Set.lowerBound()"], ["int", "org.apache.cassandra.utils.IntegerInterval$Set.upperBound()"], ["int", "org.apache.cassandra.utils.IntegerInterval$Set.hashCode()"], ["boolean", "org.apache.cassandra.utils.IntegerInterval$Set.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.utils.IntegerInterval$Set.toString()"], ["org.apache.cassandra.utils.IntegerInterval", "org.apache.cassandra.utils.IntegerInterval(int, int)"], ["org.apache.cassandra.utils.IntegerInterval", "org.apache.cassandra.utils.IntegerInterval(org.apache.cassandra.utils.IntegerInterval)"], ["int", "org.apache.cassandra.utils.IntegerInterval.lower()"], ["int", "org.apache.cassandra.utils.IntegerInterval.upper()"], ["void", "org.apache.cassandra.utils.IntegerInterval.expandToCover(int)"], ["int", "org.apache.cassandra.utils.IntegerInterval.hashCode()"], ["boolean", "org.apache.cassandra.utils.IntegerInterval.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.utils.IntegerInterval.toString()"], ["int", "org.apache.cassandra.utils.Interval$1.compareAsymmetric(org.apache.cassandra.utils.Interval<java.lang.Comparable, java.lang.Object>, java.lang.Comparable)"], ["int", "org.apache.cassandra.utils.Interval$1.compare(org.apache.cassandra.utils.Interval<java.lang.Comparable, java.lang.Object>, org.apache.cassandra.utils.Interval<java.lang.Comparable, java.lang.Object>)"], ["int", "org.apache.cassandra.utils.Interval$1.compareAsymmetric(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.utils.Interval$1.compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.utils.Interval$2.compareAsymmetric(org.apache.cassandra.utils.Interval<java.lang.Comparable, java.lang.Object>, java.lang.Comparable)"], ["int", "org.apache.cassandra.utils.Interval$2.compare(org.apache.cassandra.utils.Interval<java.lang.Comparable, java.lang.Object>, org.apache.cassandra.utils.Interval<java.lang.Comparable, java.lang.Object>)"], ["int", "org.apache.cassandra.utils.Interval$2.compareAsymmetric(java.lang.Object, java.lang.Object)"], ["int", "org.apache.cassandra.utils.Interval$2.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.utils.Interval", "org.apache.cassandra.utils.Interval(C, C, D)"], ["<C, D> org.apache.cassandra.utils.Interval<C, D>", "org.apache.cassandra.utils.Interval.create(C, C)"], ["<C, D> org.apache.cassandra.utils.Interval<C, D>", "org.apache.cassandra.utils.Interval.create(C, C, D)"], ["java.lang.String", "org.apache.cassandra.utils.Interval.toString()"], ["int", "org.apache.cassandra.utils.Interval.hashCode()"], ["boolean", "org.apache.cassandra.utils.Interval.equals(java.lang.Object)"], ["<C extends java.lang.Comparable<? super C>, V> org.apache.cassandra.utils.AsymmetricOrdering<org.apache.cassandra.utils.Interval<C, V>, C>", "org.apache.cassandra.utils.Interval.minOrdering()"], ["<C extends java.lang.Comparable<? super C>, V> org.apache.cassandra.utils.AsymmetricOrdering<org.apache.cassandra.utils.Interval<C, V>, C>", "org.apache.cassandra.utils.Interval.maxOrdering()"], ["org.apache.cassandra.utils.IntervalTree$IntervalNode", "org.apache.cassandra.utils.IntervalTree$IntervalNode(java.util.Collection<I>)"], ["void", "org.apache.cassandra.utils.IntervalTree$Serializer.serialize(org.apache.cassandra.utils.IntervalTree<C, D, I>, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.IntervalTree<C, D, I>", "org.apache.cassandra.utils.IntervalTree$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["org.apache.cassandra.utils.IntervalTree<C, D, I>", "org.apache.cassandra.utils.IntervalTree$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int, java.util.Comparator<C>)"], ["long", "org.apache.cassandra.utils.IntervalTree$Serializer.serializedSize(org.apache.cassandra.utils.IntervalTree<C, D, I>, int)"], ["long", "org.apache.cassandra.utils.IntervalTree$Serializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.utils.IntervalTree$Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.utils.IntervalTree$Serializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["<C extends java.lang.Comparable<? super C>, D, I extends org.apache.cassandra.utils.Interval<C, D>> org.apache.cassandra.utils.IntervalTree<C, D, I>", "org.apache.cassandra.utils.IntervalTree.build(java.util.Collection<I>)"], ["<C extends java.lang.Comparable<? super C>, D, I extends org.apache.cassandra.utils.Interval<C, D>> org.apache.cassandra.utils.IntervalTree$Serializer<C, D, I>", "org.apache.cassandra.utils.IntervalTree.serializer(org.apache.cassandra.io.ISerializer<C>, org.apache.cassandra.io.ISerializer<D>, java.lang.reflect.Constructor<I>)"], ["<C extends java.lang.Comparable<? super C>, D, I extends org.apache.cassandra.utils.Interval<C, D>> org.apache.cassandra.utils.IntervalTree<C, D, I>", "org.apache.cassandra.utils.IntervalTree.emptyTree()"], ["int", "org.apache.cassandra.utils.IntervalTree.intervalCount()"], ["boolean", "org.apache.cassandra.utils.IntervalTree.isEmpty()"], ["C", "org.apache.cassandra.utils.IntervalTree.max()"], ["C", "org.apache.cassandra.utils.IntervalTree.min()"], ["java.lang.String", "org.apache.cassandra.utils.IntervalTree.toString()"], ["boolean", "org.apache.cassandra.utils.IntervalTree.equals(java.lang.Object)"], ["int", "org.apache.cassandra.utils.IntervalTree.hashCode()"], ["javax.security.auth.Subject", "org.apache.cassandra.utils.JMXServerUtils$JMXPluggableAuthenticatorWrapper.authenticate(java.lang.Object)"], ["org.apache.cassandra.utils.JMXServerUtils", "org.apache.cassandra.utils.JMXServerUtils()"], ["javax.management.remote.JMXConnectorServer", "org.apache.cassandra.utils.JMXServerUtils.createJMXServer(int, boolean)"], ["org.apache.cassandra.utils.JVMStabilityInspector$Killer", "org.apache.cassandra.utils.JVMStabilityInspector$Killer()"], ["void", "org.apache.cassandra.utils.JVMStabilityInspector.inspectThrowable(java.lang.Throwable)"], ["void", "org.apache.cassandra.utils.JVMStabilityInspector.inspectCommitLogThrowable(java.lang.Throwable)"], ["void", "org.apache.cassandra.utils.JVMStabilityInspector.killCurrentJVM(java.lang.Throwable, boolean)"], ["void", "org.apache.cassandra.utils.JVMStabilityInspector.userFunctionTimeout(java.lang.Throwable)"], ["org.apache.cassandra.utils.JVMStabilityInspector$Killer", "org.apache.cassandra.utils.JVMStabilityInspector.replaceKiller(org.apache.cassandra.utils.JVMStabilityInspector$Killer)"], ["boolean", "org.apache.cassandra.utils.JavaUtils.supportExitOnOutOfMemory(java.lang.String)"], ["org.apache.cassandra.utils.LockedDynamicList", "org.apache.cassandra.utils.LockedDynamicList(int)"], ["void", "org.apache.cassandra.utils.LockedDynamicList.remove(org.apache.cassandra.utils.DynamicList$Node<E>)"], ["E", "org.apache.cassandra.utils.LockedDynamicList.get(int)"], ["int", "org.apache.cassandra.utils.LockedDynamicList.size()"], ["void", "org.apache.cassandra.utils.LongTimSort.sort(long[], org.apache.cassandra.utils.LongTimSort$LongComparator)"], ["void", "org.apache.cassandra.utils.LongTimSort.sort(long[], int, int, org.apache.cassandra.utils.LongTimSort$LongComparator)"], ["org.apache.cassandra.utils.MBeanWrapper$NoOpMBeanWrapper", "org.apache.cassandra.utils.MBeanWrapper$NoOpMBeanWrapper()"], ["void", "org.apache.cassandra.utils.MBeanWrapper$NoOpMBeanWrapper.registerMBean(java.lang.Object, javax.management.ObjectName, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["void", "org.apache.cassandra.utils.MBeanWrapper$NoOpMBeanWrapper.registerMBean(java.lang.Object, java.lang.String, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["boolean", "org.apache.cassandra.utils.MBeanWrapper$NoOpMBeanWrapper.isRegistered(javax.management.ObjectName, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["boolean", "org.apache.cassandra.utils.MBeanWrapper$NoOpMBeanWrapper.isRegistered(java.lang.String, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["void", "org.apache.cassandra.utils.MBeanWrapper$NoOpMBeanWrapper.unregisterMBean(javax.management.ObjectName, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["void", "org.apache.cassandra.utils.MBeanWrapper$NoOpMBeanWrapper.unregisterMBean(java.lang.String, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["org.apache.cassandra.utils.MBeanWrapper$OnException[]", "org.apache.cassandra.utils.MBeanWrapper$OnException.values()"], ["org.apache.cassandra.utils.MBeanWrapper$OnException", "org.apache.cassandra.utils.MBeanWrapper$OnException.valueOf(java.lang.String)"], ["org.apache.cassandra.utils.MBeanWrapper$PlatformMBeanWrapper", "org.apache.cassandra.utils.MBeanWrapper$PlatformMBeanWrapper()"], ["void", "org.apache.cassandra.utils.MBeanWrapper$PlatformMBeanWrapper.registerMBean(java.lang.Object, javax.management.ObjectName, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["void", "org.apache.cassandra.utils.MBeanWrapper$PlatformMBeanWrapper.registerMBean(java.lang.Object, java.lang.String, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["boolean", "org.apache.cassandra.utils.MBeanWrapper$PlatformMBeanWrapper.isRegistered(javax.management.ObjectName, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["boolean", "org.apache.cassandra.utils.MBeanWrapper$PlatformMBeanWrapper.isRegistered(java.lang.String, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["void", "org.apache.cassandra.utils.MBeanWrapper$PlatformMBeanWrapper.unregisterMBean(javax.management.ObjectName, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["void", "org.apache.cassandra.utils.MBeanWrapper$PlatformMBeanWrapper.unregisterMBean(java.lang.String, org.apache.cassandra.utils.MBeanWrapper$OnException)"], ["default", "org.apache.cassandra.utils.MBeanWrapper.void registerMBean(java.lang.Object, javax.management.ObjectName)"], ["default", "org.apache.cassandra.utils.MBeanWrapper.void registerMBean(java.lang.Object, java.lang.String)"], ["default", "org.apache.cassandra.utils.MBeanWrapper.boolean isRegistered(javax.management.ObjectName)"], ["default", "org.apache.cassandra.utils.MBeanWrapper.boolean isRegistered(java.lang.String)"], ["default", "org.apache.cassandra.utils.MBeanWrapper.void unregisterMBean(javax.management.ObjectName)"], ["default", "org.apache.cassandra.utils.MBeanWrapper.void unregisterMBean(java.lang.String)"], ["org.apache.cassandra.utils.MD5Digest", "org.apache.cassandra.utils.MD5Digest.wrap(byte[])"], ["org.apache.cassandra.utils.MD5Digest", "org.apache.cassandra.utils.MD5Digest.compute(byte[])"], ["org.apache.cassandra.utils.MD5Digest", "org.apache.cassandra.utils.MD5Digest.compute(java.lang.String)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.MD5Digest.byteBuffer()"], ["int", "org.apache.cassandra.utils.MD5Digest.hashCode()"], ["boolean", "org.apache.cassandra.utils.MD5Digest.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.utils.MD5Digest.toString()"], ["org.apache.cassandra.utils.MergeIterator$Candidate", "org.apache.cassandra.utils.MergeIterator$Candidate(int, java.util.Iterator<? extends In>, java.util.Comparator<? super In>)"], ["int", "org.apache.cassandra.utils.MergeIterator$Candidate.compareTo(org.apache.cassandra.utils.MergeIterator$Candidate<In>)"], ["void", "org.apache.cassandra.utils.MergeIterator$Candidate.consume(org.apache.cassandra.utils.MergeIterator$Reducer)"], ["boolean", "org.apache.cassandra.utils.MergeIterator$Candidate.needsAdvance()"], ["int", "org.apache.cassandra.utils.MergeIterator$Candidate.compareTo(java.lang.Object)"], ["org.apache.cassandra.utils.MergeIterator$ManyToOne", "org.apache.cassandra.utils.MergeIterator$ManyToOne(java.util.List<? extends java.util.Iterator<In>>, java.util.Comparator<? super In>, org.apache.cassandra.utils.MergeIterator$Reducer<In, Out>)"], ["org.apache.cassandra.utils.MergeIterator$OneToOne", "org.apache.cassandra.utils.MergeIterator$OneToOne(java.util.List<? extends java.util.Iterator<In>>, org.apache.cassandra.utils.MergeIterator$Reducer<In, Out>)"], ["org.apache.cassandra.utils.MergeIterator$Reducer", "org.apache.cassandra.utils.MergeIterator$Reducer()"], ["boolean", "org.apache.cassandra.utils.MergeIterator$Reducer.trivialReduceIsTrivial()"], ["void", "org.apache.cassandra.utils.MergeIterator$Reducer.close()"], ["org.apache.cassandra.utils.MergeIterator$TrivialOneToOne", "org.apache.cassandra.utils.MergeIterator$TrivialOneToOne(java.util.List<? extends java.util.Iterator<In>>, org.apache.cassandra.utils.MergeIterator$Reducer<In, Out>)"], ["<In, Out> org.apache.cassandra.utils.MergeIterator<In, Out>", "org.apache.cassandra.utils.MergeIterator.get(java.util.List<? extends java.util.Iterator<In>>, java.util.Comparator<? super In>, org.apache.cassandra.utils.MergeIterator$Reducer<In, Out>)"], ["java.lang.Iterable<? extends java.util.Iterator<In>>", "org.apache.cassandra.utils.MergeIterator.iterators()"], ["void", "org.apache.cassandra.utils.MergeIterator.close()"], ["void", "org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer.serialize(org.apache.cassandra.utils.MerkleTree$Hashable, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.MerkleTree$Hashable", "org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["long", "org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer.serializedSize(org.apache.cassandra.utils.MerkleTree$Hashable, int)"], ["long", "org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["void", "org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["byte[]", "org.apache.cassandra.utils.MerkleTree$Hashable.hash()"], ["long", "org.apache.cassandra.utils.MerkleTree$Hashable.sizeOfRange()"], ["long", "org.apache.cassandra.utils.MerkleTree$Hashable.rowsInRange()"], ["java.lang.String", "org.apache.cassandra.utils.MerkleTree$Hashable.toString(byte[])"], ["void", "org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer.serialize(org.apache.cassandra.utils.MerkleTree$Inner, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.MerkleTree$Inner", "org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["long", "org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer.serializedSize(org.apache.cassandra.utils.MerkleTree$Inner, int)"], ["long", "org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["void", "org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.MerkleTree$Inner", "org.apache.cassandra.utils.MerkleTree$Inner(org.apache.cassandra.dht.Token, org.apache.cassandra.utils.MerkleTree$Hashable, org.apache.cassandra.utils.MerkleTree$Hashable)"], ["org.apache.cassandra.utils.MerkleTree$Hashable", "org.apache.cassandra.utils.MerkleTree$Inner.lchild()"], ["org.apache.cassandra.utils.MerkleTree$Hashable", "org.apache.cassandra.utils.MerkleTree$Inner.rchild()"], ["void", "org.apache.cassandra.utils.MerkleTree$Inner.lchild(org.apache.cassandra.utils.MerkleTree$Hashable)"], ["void", "org.apache.cassandra.utils.MerkleTree$Inner.rchild(org.apache.cassandra.utils.MerkleTree$Hashable)"], ["void", "org.apache.cassandra.utils.MerkleTree$Inner.toString(java.lang.StringBuilder, int)"], ["java.lang.String", "org.apache.cassandra.utils.MerkleTree$Inner.toString()"], ["void", "org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer.serialize(org.apache.cassandra.utils.MerkleTree$Leaf, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.MerkleTree$Leaf", "org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["long", "org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer.serializedSize(org.apache.cassandra.utils.MerkleTree$Leaf, int)"], ["long", "org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer.deserialize(java.io.DataInput, org.apache.cassandra.dht.IPartitioner, int)"], ["void", "org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.MerkleTree$Leaf", "org.apache.cassandra.utils.MerkleTree$Leaf()"], ["org.apache.cassandra.utils.MerkleTree$Leaf", "org.apache.cassandra.utils.MerkleTree$Leaf(byte[])"], ["void", "org.apache.cassandra.utils.MerkleTree$Leaf.toString(java.lang.StringBuilder, int)"], ["java.lang.String", "org.apache.cassandra.utils.MerkleTree$Leaf.toString()"], ["org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer", "org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer()"], ["void", "org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer.serialize(org.apache.cassandra.utils.MerkleTree, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.MerkleTree", "org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer.serializedSize(org.apache.cassandra.utils.MerkleTree, int)"], ["long", "org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.MerkleTree$RowHash", "org.apache.cassandra.utils.MerkleTree$RowHash(org.apache.cassandra.dht.Token, byte[], long)"], ["java.lang.String", "org.apache.cassandra.utils.MerkleTree$RowHash.toString()"], ["org.apache.cassandra.utils.MerkleTree$StopRecursion$BadRange", "org.apache.cassandra.utils.MerkleTree$StopRecursion$BadRange()"], ["org.apache.cassandra.utils.MerkleTree$StopRecursion$InvalidHash", "org.apache.cassandra.utils.MerkleTree$StopRecursion$InvalidHash()"], ["org.apache.cassandra.utils.MerkleTree$StopRecursion$TooDeep", "org.apache.cassandra.utils.MerkleTree$StopRecursion$TooDeep()"], ["long", "org.apache.cassandra.utils.MerkleTree$TreeDifference.sizeOnLeft()"], ["long", "org.apache.cassandra.utils.MerkleTree$TreeDifference.sizeOnRight()"], ["long", "org.apache.cassandra.utils.MerkleTree$TreeDifference.rowsOnLeft()"], ["long", "org.apache.cassandra.utils.MerkleTree$TreeDifference.rowsOnRight()"], ["org.apache.cassandra.utils.MerkleTree$TreeDifference", "org.apache.cassandra.utils.MerkleTree$TreeDifference(org.apache.cassandra.dht.Token, org.apache.cassandra.dht.Token, byte)"], ["long", "org.apache.cassandra.utils.MerkleTree$TreeDifference.totalRows()"], ["void", "org.apache.cassandra.utils.MerkleTree$TreeRange.hash(byte[])"], ["byte[]", "org.apache.cassandra.utils.MerkleTree$TreeRange.hash()"], ["void", "org.apache.cassandra.utils.MerkleTree$TreeRange.addHash(org.apache.cassandra.utils.MerkleTree$RowHash)"], ["void", "org.apache.cassandra.utils.MerkleTree$TreeRange.ensureHashInitialised()"], ["void", "org.apache.cassandra.utils.MerkleTree$TreeRange.addAll(java.util.Iterator<org.apache.cassandra.utils.MerkleTree$RowHash>)"], ["java.lang.String", "org.apache.cassandra.utils.MerkleTree$TreeRange.toString()"], ["org.apache.cassandra.utils.MerkleTree$TreeRange", "org.apache.cassandra.utils.MerkleTree$TreeRangeIterator.computeNext()"], ["java.lang.Object", "org.apache.cassandra.utils.MerkleTree$TreeRangeIterator.computeNext()"], ["org.apache.cassandra.utils.MerkleTree", "org.apache.cassandra.utils.MerkleTree(org.apache.cassandra.dht.IPartitioner, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, byte, long)"], ["void", "org.apache.cassandra.utils.MerkleTree.init()"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.utils.MerkleTree.partitioner()"], ["long", "org.apache.cassandra.utils.MerkleTree.size()"], ["long", "org.apache.cassandra.utils.MerkleTree.maxsize()"], ["void", "org.apache.cassandra.utils.MerkleTree.maxsize(long)"], ["org.apache.cassandra.utils.MerkleTree$TreeRange", "org.apache.cassandra.utils.MerkleTree.get(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.utils.MerkleTree.invalidate(org.apache.cassandra.dht.Token)"], ["byte[]", "org.apache.cassandra.utils.MerkleTree.hash(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["boolean", "org.apache.cassandra.utils.MerkleTree.split(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.utils.MerkleTree$TreeRangeIterator", "org.apache.cassandra.utils.MerkleTree.invalids()"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.MerkleTree.histogramOfRowSizePerLeaf()"], ["org.apache.cassandra.utils.EstimatedHistogram", "org.apache.cassandra.utils.MerkleTree.histogramOfRowCountPerLeaf()"], ["long", "org.apache.cassandra.utils.MerkleTree.rowCount()"], ["java.lang.String", "org.apache.cassandra.utils.MerkleTree.toString()"], ["org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer", "org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer()"], ["void", "org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer.serialize(org.apache.cassandra.utils.MerkleTrees, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["org.apache.cassandra.utils.MerkleTrees", "org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer.serializedSize(org.apache.cassandra.utils.MerkleTrees, int)"], ["long", "org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["int", "org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator.compare(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["int", "org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator.compare(java.lang.Object, java.lang.Object)"], ["org.apache.cassandra.utils.MerkleTree$TreeRange", "org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator.computeNext()"], ["java.lang.Object", "org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator.computeNext()"], ["org.apache.cassandra.utils.MerkleTrees", "org.apache.cassandra.utils.MerkleTrees(org.apache.cassandra.dht.IPartitioner)"], ["org.apache.cassandra.dht.IPartitioner", "org.apache.cassandra.utils.MerkleTrees.partitioner()"], ["void", "org.apache.cassandra.utils.MerkleTrees.addMerkleTrees(int, java.util.Collection<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>>)"], ["org.apache.cassandra.utils.MerkleTree", "org.apache.cassandra.utils.MerkleTrees.addMerkleTree(int, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.utils.MerkleTree", "org.apache.cassandra.utils.MerkleTrees.addMerkleTree(int, byte, org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["org.apache.cassandra.utils.MerkleTree$TreeRange", "org.apache.cassandra.utils.MerkleTrees.get(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.utils.MerkleTrees.init()"], ["void", "org.apache.cassandra.utils.MerkleTrees.init(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["boolean", "org.apache.cassandra.utils.MerkleTrees.split(org.apache.cassandra.dht.Token)"], ["void", "org.apache.cassandra.utils.MerkleTrees.invalidate(org.apache.cassandra.dht.Token)"], ["org.apache.cassandra.utils.MerkleTree", "org.apache.cassandra.utils.MerkleTrees.getMerkleTree(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["long", "org.apache.cassandra.utils.MerkleTrees.size()"], ["void", "org.apache.cassandra.utils.MerkleTrees.maxsize(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, int)"], ["org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator", "org.apache.cassandra.utils.MerkleTrees.invalids()"], ["void", "org.apache.cassandra.utils.MerkleTrees.logRowCountPerLeaf(org.slf4j.Logger)"], ["void", "org.apache.cassandra.utils.MerkleTrees.logRowSizePerLeaf(org.slf4j.Logger)"], ["byte[]", "org.apache.cassandra.utils.MerkleTrees.hash(org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>)"], ["java.util.Iterator<java.util.Map$Entry<org.apache.cassandra.dht.Range<org.apache.cassandra.dht.Token>, org.apache.cassandra.utils.MerkleTree>>", "org.apache.cassandra.utils.MerkleTrees.iterator()"], ["long", "org.apache.cassandra.utils.MerkleTrees.rowCount()"], ["org.apache.cassandra.utils.MurmurHash", "org.apache.cassandra.utils.MurmurHash()"], ["int", "org.apache.cassandra.utils.MurmurHash.hash32(java.nio.ByteBuffer, int, int, int)"], ["long", "org.apache.cassandra.utils.MurmurHash.hash2_64(java.nio.ByteBuffer, int, int, long)"], ["void", "org.apache.cassandra.utils.MurmurHash.hash3_x64_128(java.nio.ByteBuffer, int, int, long, long[])"], ["org.apache.cassandra.utils.Mx4jTool", "org.apache.cassandra.utils.Mx4jTool()"], ["boolean", "org.apache.cassandra.utils.Mx4jTool.maybeLoad()"], ["org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis", "org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis()"], ["long", "org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis.convert(long)"], ["void", "org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis.updateNow()"], ["org.apache.cassandra.utils.NativeLibrary$OSType[]", "org.apache.cassandra.utils.NativeLibrary$OSType.values()"], ["org.apache.cassandra.utils.NativeLibrary$OSType", "org.apache.cassandra.utils.NativeLibrary$OSType.valueOf(java.lang.String)"], ["boolean", "org.apache.cassandra.utils.NativeLibrary.isAvailable()"], ["boolean", "org.apache.cassandra.utils.NativeLibrary.jnaMemoryLockable()"], ["void", "org.apache.cassandra.utils.NativeLibrary.tryMlockall()"], ["void", "org.apache.cassandra.utils.NativeLibrary.trySkipCache(java.lang.String, long, long)"], ["void", "org.apache.cassandra.utils.NativeLibrary.trySkipCache(int, long, long, java.lang.String)"], ["void", "org.apache.cassandra.utils.NativeLibrary.trySkipCache(int, long, int, java.lang.String)"], ["int", "org.apache.cassandra.utils.NativeLibrary.tryFcntl(int, int, int)"], ["int", "org.apache.cassandra.utils.NativeLibrary.tryOpenDirectory(java.lang.String)"], ["void", "org.apache.cassandra.utils.NativeLibrary.trySync(int)"], ["void", "org.apache.cassandra.utils.NativeLibrary.tryCloseFD(int)"], ["int", "org.apache.cassandra.utils.NativeLibrary.getfd(java.nio.channels.FileChannel)"], ["int", "org.apache.cassandra.utils.NativeLibrary.getfd(java.io.FileDescriptor)"], ["long", "org.apache.cassandra.utils.NativeLibrary.getProcessID()"], ["org.apache.cassandra.utils.NativeLibraryDarwin", "org.apache.cassandra.utils.NativeLibraryDarwin()"], ["int", "org.apache.cassandra.utils.NativeLibraryDarwin.callMlockall(int)"], ["int", "org.apache.cassandra.utils.NativeLibraryDarwin.callMunlockall()"], ["int", "org.apache.cassandra.utils.NativeLibraryDarwin.callFcntl(int, int, long)"], ["int", "org.apache.cassandra.utils.NativeLibraryDarwin.callPosixFadvise(int, long, int, int)"], ["int", "org.apache.cassandra.utils.NativeLibraryDarwin.callOpen(java.lang.String, int)"], ["int", "org.apache.cassandra.utils.NativeLibraryDarwin.callFsync(int)"], ["int", "org.apache.cassandra.utils.NativeLibraryDarwin.callClose(int)"], ["com.sun.jna.Pointer", "org.apache.cassandra.utils.NativeLibraryDarwin.callStrerror(int)"], ["long", "org.apache.cassandra.utils.NativeLibraryDarwin.callGetpid()"], ["boolean", "org.apache.cassandra.utils.NativeLibraryDarwin.isAvailable()"], ["org.apache.cassandra.utils.NativeLibraryLinux", "org.apache.cassandra.utils.NativeLibraryLinux()"], ["int", "org.apache.cassandra.utils.NativeLibraryLinux.callMlockall(int)"], ["int", "org.apache.cassandra.utils.NativeLibraryLinux.callMunlockall()"], ["int", "org.apache.cassandra.utils.NativeLibraryLinux.callFcntl(int, int, long)"], ["int", "org.apache.cassandra.utils.NativeLibraryLinux.callPosixFadvise(int, long, int, int)"], ["int", "org.apache.cassandra.utils.NativeLibraryLinux.callOpen(java.lang.String, int)"], ["int", "org.apache.cassandra.utils.NativeLibraryLinux.callFsync(int)"], ["int", "org.apache.cassandra.utils.NativeLibraryLinux.callClose(int)"], ["com.sun.jna.Pointer", "org.apache.cassandra.utils.NativeLibraryLinux.callStrerror(int)"], ["long", "org.apache.cassandra.utils.NativeLibraryLinux.callGetpid()"], ["boolean", "org.apache.cassandra.utils.NativeLibraryLinux.isAvailable()"], ["org.apache.cassandra.utils.NativeLibraryWindows", "org.apache.cassandra.utils.NativeLibraryWindows()"], ["int", "org.apache.cassandra.utils.NativeLibraryWindows.callMlockall(int)"], ["int", "org.apache.cassandra.utils.NativeLibraryWindows.callMunlockall()"], ["int", "org.apache.cassandra.utils.NativeLibraryWindows.callFcntl(int, int, long)"], ["int", "org.apache.cassandra.utils.NativeLibraryWindows.callPosixFadvise(int, long, int, int)"], ["int", "org.apache.cassandra.utils.NativeLibraryWindows.callOpen(java.lang.String, int)"], ["int", "org.apache.cassandra.utils.NativeLibraryWindows.callFsync(int)"], ["int", "org.apache.cassandra.utils.NativeLibraryWindows.callClose(int)"], ["com.sun.jna.Pointer", "org.apache.cassandra.utils.NativeLibraryWindows.callStrerror(int)"], ["long", "org.apache.cassandra.utils.NativeLibraryWindows.callGetpid()"], ["boolean", "org.apache.cassandra.utils.NativeLibraryWindows.isAvailable()"], ["org.apache.cassandra.utils.NativeSSTableLoaderClient", "org.apache.cassandra.utils.NativeSSTableLoaderClient(java.util.Collection<java.net.InetAddress>, int, java.lang.String, java.lang.String, com.datastax.driver.core.SSLOptions)"], ["org.apache.cassandra.utils.NativeSSTableLoaderClient", "org.apache.cassandra.utils.NativeSSTableLoaderClient(java.util.Collection<java.net.InetAddress>, int, com.datastax.driver.core.AuthProvider, com.datastax.driver.core.SSLOptions)"], ["void", "org.apache.cassandra.utils.NativeSSTableLoaderClient.init(java.lang.String)"], ["org.apache.cassandra.config.CFMetaData", "org.apache.cassandra.utils.NativeSSTableLoaderClient.getTableMetadata(java.lang.String)"], ["void", "org.apache.cassandra.utils.NativeSSTableLoaderClient.setTableMetadata(org.apache.cassandra.config.CFMetaData)"], ["long", "org.apache.cassandra.utils.NoSpamLogger$1.nanoTime()"], ["org.apache.cassandra.utils.NoSpamLogger$Level[]", "org.apache.cassandra.utils.NoSpamLogger$Level.values()"], ["org.apache.cassandra.utils.NoSpamLogger$Level", "org.apache.cassandra.utils.NoSpamLogger$Level.valueOf(java.lang.String)"], ["org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement", "org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement(org.apache.cassandra.utils.NoSpamLogger, java.lang.String, long)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement.log(org.apache.cassandra.utils.NoSpamLogger$Level, long, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement.info(long, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement.info(java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement.warn(long, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement.warn(java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement.error(long, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement.error(java.lang.Object...)"], ["org.apache.cassandra.utils.NoSpamLogger", "org.apache.cassandra.utils.NoSpamLogger.getLogger(org.slf4j.Logger, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.log(org.slf4j.Logger, org.apache.cassandra.utils.NoSpamLogger$Level, long, java.util.concurrent.TimeUnit, java.lang.String, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.log(org.slf4j.Logger, org.apache.cassandra.utils.NoSpamLogger$Level, java.lang.String, long, java.util.concurrent.TimeUnit, java.lang.String, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.log(org.slf4j.Logger, org.apache.cassandra.utils.NoSpamLogger$Level, java.lang.String, long, java.util.concurrent.TimeUnit, long, java.lang.String, java.lang.Object...)"], ["org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement", "org.apache.cassandra.utils.NoSpamLogger.getStatement(org.slf4j.Logger, java.lang.String, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.info(long, java.lang.String, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.info(java.lang.String, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.warn(long, java.lang.String, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.warn(java.lang.String, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.error(long, java.lang.String, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.error(java.lang.String, java.lang.Object...)"], ["boolean", "org.apache.cassandra.utils.NoSpamLogger.log(org.apache.cassandra.utils.NoSpamLogger$Level, java.lang.String, long, java.lang.Object...)"], ["org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement", "org.apache.cassandra.utils.NoSpamLogger.getStatement(java.lang.String)"], ["org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement", "org.apache.cassandra.utils.NoSpamLogger.getStatement(java.lang.String, java.lang.String)"], ["org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement", "org.apache.cassandra.utils.NoSpamLogger.getStatement(java.lang.String, long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement", "org.apache.cassandra.utils.NoSpamLogger.getStatement(java.lang.String, long)"], ["org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement", "org.apache.cassandra.utils.NoSpamLogger.getStatement(java.lang.String, java.lang.String, long)"], ["org.apache.cassandra.utils.ObjectSizes", "org.apache.cassandra.utils.ObjectSizes()"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOfArray(byte[])"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOfArray(long[])"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOfArray(int[])"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOfReferenceArray(int)"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOfArray(java.lang.Object[])"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOnHeapOf(java.nio.ByteBuffer[])"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOnHeapExcludingData(java.nio.ByteBuffer[])"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOnHeapOf(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOnHeapExcludingData(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.utils.ObjectSizes.sizeOf(java.lang.String)"], ["long", "org.apache.cassandra.utils.ObjectSizes.measureDeep(java.lang.Object)"], ["long", "org.apache.cassandra.utils.ObjectSizes.measure(java.lang.Object)"], ["org.apache.cassandra.utils.OutputHandler$LogOutput", "org.apache.cassandra.utils.OutputHandler$LogOutput()"], ["void", "org.apache.cassandra.utils.OutputHandler$LogOutput.output(java.lang.String)"], ["void", "org.apache.cassandra.utils.OutputHandler$LogOutput.debug(java.lang.String)"], ["void", "org.apache.cassandra.utils.OutputHandler$LogOutput.warn(java.lang.String)"], ["void", "org.apache.cassandra.utils.OutputHandler$LogOutput.warn(java.lang.String, java.lang.Throwable)"], ["org.apache.cassandra.utils.OutputHandler$SystemOutput", "org.apache.cassandra.utils.OutputHandler$SystemOutput(boolean, boolean)"], ["void", "org.apache.cassandra.utils.OutputHandler$SystemOutput.output(java.lang.String)"], ["void", "org.apache.cassandra.utils.OutputHandler$SystemOutput.debug(java.lang.String)"], ["void", "org.apache.cassandra.utils.OutputHandler$SystemOutput.warn(java.lang.String)"], ["void", "org.apache.cassandra.utils.OutputHandler$SystemOutput.warn(java.lang.String, java.lang.Throwable)"], ["org.apache.cassandra.utils.OverlapIterator", "org.apache.cassandra.utils.OverlapIterator(java.util.Collection<org.apache.cassandra.utils.Interval<I, V>>)"], ["void", "org.apache.cassandra.utils.OverlapIterator.update(I)"], ["int", "org.apache.cassandra.utils.Pair.hashCode()"], ["boolean", "org.apache.cassandra.utils.Pair.equals(java.lang.Object)"], ["java.lang.String", "org.apache.cassandra.utils.Pair.toString()"], ["<X, Y> org.apache.cassandra.utils.Pair<X, Y>", "org.apache.cassandra.utils.Pair.create(X, Y)"], ["org.apache.cassandra.utils.RMIServerSocketFactoryImpl", "org.apache.cassandra.utils.RMIServerSocketFactoryImpl(java.net.InetAddress)"], ["java.net.ServerSocket", "org.apache.cassandra.utils.RMIServerSocketFactoryImpl.createServerSocket(int)"], ["boolean", "org.apache.cassandra.utils.RMIServerSocketFactoryImpl.equals(java.lang.Object)"], ["int", "org.apache.cassandra.utils.RMIServerSocketFactoryImpl.hashCode()"], ["org.apache.cassandra.utils.ResourceWatcher$WatchedResource", "org.apache.cassandra.utils.ResourceWatcher$WatchedResource(java.lang.String, java.lang.Runnable)"], ["void", "org.apache.cassandra.utils.ResourceWatcher$WatchedResource.run()"], ["org.apache.cassandra.utils.ResourceWatcher", "org.apache.cassandra.utils.ResourceWatcher()"], ["void", "org.apache.cassandra.utils.ResourceWatcher.watch(java.lang.String, java.lang.Runnable, int)"], ["boolean", "org.apache.cassandra.utils.SigarLibrary.initialized()"], ["long", "org.apache.cassandra.utils.SigarLibrary.getPid()"], ["void", "org.apache.cassandra.utils.SigarLibrary.warnIfRunningInDegradedMode()"], ["org.apache.cassandra.utils.SlidingTimeRate", "org.apache.cassandra.utils.SlidingTimeRate(org.apache.cassandra.utils.TimeSource, long, long, java.util.concurrent.TimeUnit)"], ["void", "org.apache.cassandra.utils.SlidingTimeRate.update(int)"], ["double", "org.apache.cassandra.utils.SlidingTimeRate.get(long, java.util.concurrent.TimeUnit)"], ["double", "org.apache.cassandra.utils.SlidingTimeRate.get(java.util.concurrent.TimeUnit)"], ["void", "org.apache.cassandra.utils.SlidingTimeRate.prune()"], ["int", "org.apache.cassandra.utils.SlidingTimeRate.size()"], ["<K extends java.lang.Comparable<K>, V extends java.lang.Comparable<V>> org.apache.cassandra.utils.SortedBiMultiValMap<K, V>", "org.apache.cassandra.utils.SortedBiMultiValMap.create()"], ["<K, V> org.apache.cassandra.utils.SortedBiMultiValMap<K, V>", "org.apache.cassandra.utils.SortedBiMultiValMap.create(java.util.Comparator<K>, java.util.Comparator<V>)"], ["<K extends java.lang.Comparable<K>, V extends java.lang.Comparable<V>> org.apache.cassandra.utils.SortedBiMultiValMap<K, V>", "org.apache.cassandra.utils.SortedBiMultiValMap.create(org.apache.cassandra.utils.BiMultiValMap<K, V>)"], ["<K, V> org.apache.cassandra.utils.SortedBiMultiValMap<K, V>", "org.apache.cassandra.utils.SortedBiMultiValMap.create(org.apache.cassandra.utils.BiMultiValMap<K, V>, java.util.Comparator<K>, java.util.Comparator<V>)"], ["org.apache.cassandra.utils.StatusLogger", "org.apache.cassandra.utils.StatusLogger()"], ["void", "org.apache.cassandra.utils.StatusLogger.log()"], ["org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder(int, int, int)"], ["org.apache.cassandra.utils.StreamingHistogram", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder.build()"], ["void", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder.update(java.lang.Number)"], ["void", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder.update(java.lang.Number, long)"], ["void", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder.flushHistogram()"], ["void", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder.merge(org.apache.cassandra.utils.StreamingHistogram)"], ["org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer()"], ["void", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer.serialize(org.apache.cassandra.utils.StreamingHistogram, org.apache.cassandra.io.util.DataOutputPlus)"], ["org.apache.cassandra.utils.StreamingHistogram", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["long", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer.serializedSize(org.apache.cassandra.utils.StreamingHistogram)"], ["long", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer.serializedSize(java.lang.Object)"], ["java.lang.Object", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus)"], ["void", "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus)"], ["double", "org.apache.cassandra.utils.StreamingHistogram.sum(double)"], ["java.util.Map<java.lang.Number, long[]>", "org.apache.cassandra.utils.StreamingHistogram.getAsMap()"], ["boolean", "org.apache.cassandra.utils.StreamingHistogram.equals(java.lang.Object)"], ["int", "org.apache.cassandra.utils.StreamingHistogram.hashCode()"], ["org.apache.cassandra.utils.SyncUtil", "org.apache.cassandra.utils.SyncUtil()"], ["java.nio.MappedByteBuffer", "org.apache.cassandra.utils.SyncUtil.force(java.nio.MappedByteBuffer)"], ["void", "org.apache.cassandra.utils.SyncUtil.sync(java.io.FileDescriptor)"], ["void", "org.apache.cassandra.utils.SyncUtil.force(java.nio.channels.FileChannel, boolean)"], ["void", "org.apache.cassandra.utils.SyncUtil.sync(java.io.RandomAccessFile)"], ["void", "org.apache.cassandra.utils.SyncUtil.sync(java.io.FileOutputStream)"], ["void", "org.apache.cassandra.utils.SyncUtil.trySync(int)"], ["void", "org.apache.cassandra.utils.SyncUtil.trySyncDir(java.io.File)"], ["org.apache.cassandra.utils.SystemTimeSource", "org.apache.cassandra.utils.SystemTimeSource()"], ["long", "org.apache.cassandra.utils.SystemTimeSource.currentTimeMillis()"], ["long", "org.apache.cassandra.utils.SystemTimeSource.nanoTime()"], ["org.apache.cassandra.utils.TimeSource", "org.apache.cassandra.utils.SystemTimeSource.sleepUninterruptibly(long, java.util.concurrent.TimeUnit)"], ["org.apache.cassandra.utils.TimeSource", "org.apache.cassandra.utils.SystemTimeSource.sleep(long, java.util.concurrent.TimeUnit)"], ["void", "org.apache.cassandra.utils.TestRateLimiter.acquire(double)"], ["org.apache.cassandra.utils.Throwables$FileOpType[]", "org.apache.cassandra.utils.Throwables$FileOpType.values()"], ["org.apache.cassandra.utils.Throwables$FileOpType", "org.apache.cassandra.utils.Throwables$FileOpType.valueOf(java.lang.String)"], ["org.apache.cassandra.utils.Throwables", "org.apache.cassandra.utils.Throwables()"], ["<T extends java.lang.Throwable> T", "org.apache.cassandra.utils.Throwables.merge(T, T)"], ["void", "org.apache.cassandra.utils.Throwables.maybeFail(java.lang.Throwable)"], ["<T extends java.lang.Throwable> void", "org.apache.cassandra.utils.Throwables.maybeFail(java.lang.Throwable, java.lang.Class<T>)"], ["<T extends java.lang.Throwable> boolean", "org.apache.cassandra.utils.Throwables.failIfCanCast(java.lang.Throwable, java.lang.Class<T>)"], ["<E extends java.lang.Exception> void", "org.apache.cassandra.utils.Throwables.perform(org.apache.cassandra.utils.Throwables$DiscreteAction<? extends E>...)"], ["<E extends java.lang.Exception> void", "org.apache.cassandra.utils.Throwables.perform(java.util.stream.Stream<? extends org.apache.cassandra.utils.Throwables$DiscreteAction<? extends E>>, org.apache.cassandra.utils.Throwables$DiscreteAction<? extends E>...)"], ["<E extends java.lang.Exception> void", "org.apache.cassandra.utils.Throwables.perform(java.util.stream.Stream<org.apache.cassandra.utils.Throwables$DiscreteAction<? extends E>>)"], ["java.lang.Throwable", "org.apache.cassandra.utils.Throwables.perform(java.lang.Throwable, org.apache.cassandra.utils.Throwables$DiscreteAction<?>...)"], ["java.lang.Throwable", "org.apache.cassandra.utils.Throwables.perform(java.lang.Throwable, java.util.stream.Stream<? extends org.apache.cassandra.utils.Throwables$DiscreteAction<?>>)"], ["java.lang.Throwable", "org.apache.cassandra.utils.Throwables.perform(java.lang.Throwable, java.util.Iterator<? extends org.apache.cassandra.utils.Throwables$DiscreteAction<?>>)"], ["void", "org.apache.cassandra.utils.Throwables.perform(java.io.File, org.apache.cassandra.utils.Throwables$FileOpType, org.apache.cassandra.utils.Throwables$DiscreteAction<? extends java.io.IOException>...)"], ["void", "org.apache.cassandra.utils.Throwables.perform(java.lang.String, org.apache.cassandra.utils.Throwables$FileOpType, org.apache.cassandra.utils.Throwables$DiscreteAction<? extends java.io.IOException>...)"], ["java.lang.Throwable", "org.apache.cassandra.utils.Throwables.perform(java.lang.Throwable, java.lang.String, org.apache.cassandra.utils.Throwables$FileOpType, org.apache.cassandra.utils.Throwables$DiscreteAction<? extends java.io.IOException>...)"], ["java.lang.Throwable", "org.apache.cassandra.utils.Throwables.perform(java.lang.Throwable, java.lang.String, org.apache.cassandra.utils.Throwables$FileOpType, java.util.stream.Stream<org.apache.cassandra.utils.Throwables$DiscreteAction<? extends java.io.IOException>>)"], ["java.lang.Throwable", "org.apache.cassandra.utils.Throwables.close(java.lang.Throwable, java.lang.Iterable<? extends java.lang.AutoCloseable>)"], ["void", "org.apache.cassandra.utils.TopKSampler$1.run()"], ["org.apache.cassandra.utils.TopKSampler$SamplerResult", "org.apache.cassandra.utils.TopKSampler$SamplerResult(java.util.List<com.clearspring.analytics.stream.Counter<S>>, long)"], ["org.apache.cassandra.utils.TopKSampler", "org.apache.cassandra.utils.TopKSampler()"], ["synchronized", "org.apache.cassandra.utils.TopKSampler.void beginSampling(int)"], ["void", "org.apache.cassandra.utils.TopKSampler.addSample(T)"], ["void", "org.apache.cassandra.utils.TopKSampler.addSample(T, long, int)"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.getTimeUUID()"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.getTimeUUID(long)"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.getTimeUUIDFromMicros(long)"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.getRandomTimeUUIDFromMicros(long)"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.getTimeUUID(long, long)"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.getTimeUUID(long, long, long)"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.getUUID(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.UUIDGen.toByteBuffer(java.util.UUID)"], ["byte[]", "org.apache.cassandra.utils.UUIDGen.decompose(java.util.UUID)"], ["byte[]", "org.apache.cassandra.utils.UUIDGen.getTimeUUIDBytes()"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.minTimeUUID(long)"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDGen.maxTimeUUID(long)"], ["long", "org.apache.cassandra.utils.UUIDGen.unixTimestamp(java.util.UUID)"], ["int", "org.apache.cassandra.utils.UUIDGen.unixTimestampInSec(java.util.UUID)"], ["long", "org.apache.cassandra.utils.UUIDGen.microsTimestamp(java.util.UUID)"], ["byte[]", "org.apache.cassandra.utils.UUIDGen.getTimeUUIDBytes(long, int)"], ["long", "org.apache.cassandra.utils.UUIDGen.getAdjustedTimestamp(java.util.UUID)"], ["org.apache.cassandra.utils.UUIDSerializer", "org.apache.cassandra.utils.UUIDSerializer()"], ["void", "org.apache.cassandra.utils.UUIDSerializer.serialize(java.util.UUID, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["java.util.UUID", "org.apache.cassandra.utils.UUIDSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["long", "org.apache.cassandra.utils.UUIDSerializer.serializedSize(java.util.UUID, int)"], ["long", "org.apache.cassandra.utils.UUIDSerializer.serializedSize(java.lang.Object, int)"], ["java.lang.Object", "org.apache.cassandra.utils.UUIDSerializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, int)"], ["void", "org.apache.cassandra.utils.UUIDSerializer.serialize(java.lang.Object, org.apache.cassandra.io.util.DataOutputPlus, int)"], ["void", "org.apache.cassandra.utils.WindowsTimer.startTimerPeriod(int)"], ["void", "org.apache.cassandra.utils.WindowsTimer.endTimerPeriod(int)"], ["<V> org.apache.cassandra.utils.Wrapped<V>", "org.apache.cassandra.utils.Wrapped.create(V)"], ["T", "org.apache.cassandra.utils.Wrapped.get()"], ["void", "org.apache.cassandra.utils.Wrapped.set(T)"], ["org.apache.cassandra.utils.WrappedBoolean", "org.apache.cassandra.utils.WrappedBoolean(boolean)"], ["boolean", "org.apache.cassandra.utils.WrappedBoolean.get()"], ["void", "org.apache.cassandra.utils.WrappedBoolean.set(boolean)"], ["org.apache.cassandra.utils.WrappedException", "org.apache.cassandra.utils.WrappedException(java.lang.Exception)"], ["org.apache.cassandra.utils.WrappedInt", "org.apache.cassandra.utils.WrappedInt(int)"], ["int", "org.apache.cassandra.utils.WrappedInt.get()"], ["void", "org.apache.cassandra.utils.WrappedInt.set(int)"], ["void", "org.apache.cassandra.utils.WrappedInt.increment()"], ["void", "org.apache.cassandra.utils.WrappedInt.decrement()"], ["org.apache.cassandra.utils.WrappedRunnable", "org.apache.cassandra.utils.WrappedRunnable()"], ["void", "org.apache.cassandra.utils.WrappedRunnable.run()"], ["org.apache.cassandra.utils.btree.BTree$Builder", "org.apache.cassandra.utils.btree.BTree$Builder()"], ["void", "org.apache.cassandra.utils.btree.BTree$Builder.reuse()"], ["void", "org.apache.cassandra.utils.btree.BTree$Builder.reuse(java.util.Comparator<? super V>)"], ["boolean", "org.apache.cassandra.utils.btree.BTree$Builder.isEmpty()"], ["java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree$Builder.build()"], ["org.apache.cassandra.utils.btree.BTree$Dir[]", "org.apache.cassandra.utils.btree.BTree$Dir.values()"], ["org.apache.cassandra.utils.btree.BTree$Dir", "org.apache.cassandra.utils.btree.BTree$Dir.valueOf(java.lang.String)"], ["org.apache.cassandra.utils.btree.BTree$Dir", "org.apache.cassandra.utils.btree.BTree$Dir.invert()"], ["org.apache.cassandra.utils.btree.BTree$Dir", "org.apache.cassandra.utils.btree.BTree$Dir.asc(boolean)"], ["org.apache.cassandra.utils.btree.BTree$Dir", "org.apache.cassandra.utils.btree.BTree$Dir.desc(boolean)"], ["V", "org.apache.cassandra.utils.btree.BTree$FiltrationTracker.apply(V)"], ["org.apache.cassandra.utils.btree.BTree", "org.apache.cassandra.utils.btree.BTree()"], ["java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.empty()"], ["java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.singleton(java.lang.Object)"], ["<C, K extends C, V extends C> java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.build(java.util.Collection<K>, org.apache.cassandra.utils.btree.UpdateFunction<K, V>)"], ["<C, K extends C, V extends C> java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.build(java.lang.Iterable<K>, org.apache.cassandra.utils.btree.UpdateFunction<K, V>)"], ["<C, K extends C, V extends C> java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.build(java.lang.Iterable<K>, int, org.apache.cassandra.utils.btree.UpdateFunction<K, V>)"], ["<C, K extends C, V extends C> java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.update(java.lang.Object[], java.util.Comparator<C>, java.util.Collection<K>, org.apache.cassandra.utils.btree.UpdateFunction<K, V>)"], ["<C, K extends C, V extends C> java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.update(java.lang.Object[], java.util.Comparator<C>, java.lang.Iterable<K>, int, org.apache.cassandra.utils.btree.UpdateFunction<K, V>)"], ["<K> java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.merge(java.lang.Object[], java.lang.Object[], java.util.Comparator<? super K>, org.apache.cassandra.utils.btree.UpdateFunction<K, K>)"], ["<V> java.util.Iterator<V>", "org.apache.cassandra.utils.btree.BTree.iterator(java.lang.Object[])"], ["<V> java.util.Iterator<V>", "org.apache.cassandra.utils.btree.BTree.iterator(java.lang.Object[], org.apache.cassandra.utils.btree.BTree$Dir)"], ["<V> java.util.Iterator<V>", "org.apache.cassandra.utils.btree.BTree.iterator(java.lang.Object[], int, int, org.apache.cassandra.utils.btree.BTree$Dir)"], ["<V> java.lang.Iterable<V>", "org.apache.cassandra.utils.btree.BTree.iterable(java.lang.Object[])"], ["<V> java.lang.Iterable<V>", "org.apache.cassandra.utils.btree.BTree.iterable(java.lang.Object[], org.apache.cassandra.utils.btree.BTree$Dir)"], ["<V> java.lang.Iterable<V>", "org.apache.cassandra.utils.btree.BTree.iterable(java.lang.Object[], int, int, org.apache.cassandra.utils.btree.BTree$Dir)"], ["<K, V> org.apache.cassandra.utils.btree.BTreeSearchIterator<K, V>", "org.apache.cassandra.utils.btree.BTree.slice(java.lang.Object[], java.util.Comparator<? super K>, org.apache.cassandra.utils.btree.BTree$Dir)"], ["<K, V extends K> org.apache.cassandra.utils.btree.BTreeSearchIterator<K, V>", "org.apache.cassandra.utils.btree.BTree.slice(java.lang.Object[], java.util.Comparator<? super K>, K, K, org.apache.cassandra.utils.btree.BTree$Dir)"], ["<K, V extends K> org.apache.cassandra.utils.btree.BTreeSearchIterator<K, V>", "org.apache.cassandra.utils.btree.BTree.slice(java.lang.Object[], java.util.Comparator<? super K>, K, boolean, K, boolean, org.apache.cassandra.utils.btree.BTree$Dir)"], ["<V> V", "org.apache.cassandra.utils.btree.BTree.find(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> void", "org.apache.cassandra.utils.btree.BTree.replaceInSitu(java.lang.Object[], int, V)"], ["<V> void", "org.apache.cassandra.utils.btree.BTree.replaceInSitu(java.lang.Object[], java.util.Comparator<? super V>, V, V)"], ["<V> int", "org.apache.cassandra.utils.btree.BTree.findIndex(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> V", "org.apache.cassandra.utils.btree.BTree.findByIndex(java.lang.Object[], int)"], ["<V> int", "org.apache.cassandra.utils.btree.BTree.lowerIndex(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> V", "org.apache.cassandra.utils.btree.BTree.lower(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> int", "org.apache.cassandra.utils.btree.BTree.floorIndex(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> V", "org.apache.cassandra.utils.btree.BTree.floor(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> int", "org.apache.cassandra.utils.btree.BTree.higherIndex(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> V", "org.apache.cassandra.utils.btree.BTree.higher(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> int", "org.apache.cassandra.utils.btree.BTree.ceilIndex(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["<V> V", "org.apache.cassandra.utils.btree.BTree.ceil(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["int", "org.apache.cassandra.utils.btree.BTree.size(java.lang.Object[])"], ["long", "org.apache.cassandra.utils.btree.BTree.sizeOfStructureOnHeap(java.lang.Object[])"], ["boolean", "org.apache.cassandra.utils.btree.BTree.isEmpty(java.lang.Object[])"], ["int", "org.apache.cassandra.utils.btree.BTree.depth(java.lang.Object[])"], ["int", "org.apache.cassandra.utils.btree.BTree.toArray(java.lang.Object[], java.lang.Object[], int)"], ["int", "org.apache.cassandra.utils.btree.BTree.toArray(java.lang.Object[], int, int, java.lang.Object[], int)"], ["<V> java.lang.Object[]", "org.apache.cassandra.utils.btree.BTree.transformAndFilter(java.lang.Object[], com.google.common.base.Function<? super V, ? extends V>)"], ["boolean", "org.apache.cassandra.utils.btree.BTree.equals(java.lang.Object[], java.lang.Object[])"], ["int", "org.apache.cassandra.utils.btree.BTree.hashCode(java.lang.Object[])"], ["int", "org.apache.cassandra.utils.btree.BTree.treeIndexOfKey(java.lang.Object[], int)"], ["int", "org.apache.cassandra.utils.btree.BTree.treeIndexOfLeafKey(int)"], ["int", "org.apache.cassandra.utils.btree.BTree.treeIndexOfBranchKey(java.lang.Object[], int)"], ["int", "org.apache.cassandra.utils.btree.BTree.treeIndexOffsetOfChild(java.lang.Object[], int)"], ["<V> org.apache.cassandra.utils.btree.BTree$Builder<V>", "org.apache.cassandra.utils.btree.BTree.builder(java.util.Comparator<? super V>)"], ["<V> org.apache.cassandra.utils.btree.BTree$Builder<V>", "org.apache.cassandra.utils.btree.BTree.builder(java.util.Comparator<? super V>, int)"], ["boolean", "org.apache.cassandra.utils.btree.BTree.isWellFormed(java.lang.Object[], java.util.Comparator<? extends java.lang.Object>)"], ["<V> void", "org.apache.cassandra.utils.btree.BTree.apply(java.lang.Object[], java.util.function.Consumer<V>, boolean)"], ["<V> void", "org.apache.cassandra.utils.btree.BTree.apply(java.lang.Object[], java.util.function.Consumer<V>, com.google.common.base.Predicate<V>, boolean)"], ["org.apache.cassandra.utils.btree.BTreeRemoval", "org.apache.cassandra.utils.btree.BTreeRemoval()"], ["<V> java.lang.Object[]", "org.apache.cassandra.utils.btree.BTreeRemoval.remove(java.lang.Object[], java.util.Comparator<? super V>, V)"], ["org.apache.cassandra.utils.btree.BTreeSearchIterator", "org.apache.cassandra.utils.btree.BTreeSearchIterator(java.lang.Object[], java.util.Comparator<? super K>, org.apache.cassandra.utils.btree.BTree$Dir)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSearchIterator.hasNext()"], ["V", "org.apache.cassandra.utils.btree.BTreeSearchIterator.next()"], ["V", "org.apache.cassandra.utils.btree.BTreeSearchIterator.next(K)"], ["void", "org.apache.cassandra.utils.btree.BTreeSearchIterator.rewind()"], ["V", "org.apache.cassandra.utils.btree.BTreeSearchIterator.current()"], ["int", "org.apache.cassandra.utils.btree.BTreeSearchIterator.indexOfCurrent()"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.higher(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.ceiling(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.floor(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.lower(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.get(int)"], ["int", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.indexOf(java.lang.Object)"], ["<T> T[]", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.toArray(T[], int)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.descendingSet()"], ["java.util.List", "org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange.subList(int, int)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.isEmpty()"], ["int", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.size()"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.get(int)"], ["int", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.indexOf(java.lang.Object)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.lower(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.floor(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.ceiling(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.higher(V)"], ["<T> T[]", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.toArray(T[])"], ["<T> T[]", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.toArray(T[], int)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.Iterator", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.descendingIterator()"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.descendingSet()"], ["java.util.Iterator", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.iterator()"], ["java.util.List", "org.apache.cassandra.utils.btree.BTreeSet$BTreeRange.subList(int, int)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet$Builder.isEmpty()"], ["org.apache.cassandra.utils.btree.BTreeSet", "org.apache.cassandra.utils.btree.BTreeSet(java.lang.Object[], java.util.Comparator<? super V>)"], ["java.util.Comparator<? super V>", "org.apache.cassandra.utils.btree.BTreeSet.comparator()"], ["java.lang.Object[]", "org.apache.cassandra.utils.btree.BTreeSet.tree()"], ["int", "org.apache.cassandra.utils.btree.BTreeSet.indexOf(java.lang.Object)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.get(int)"], ["int", "org.apache.cassandra.utils.btree.BTreeSet.lastIndexOf(java.lang.Object)"], ["int", "org.apache.cassandra.utils.btree.BTreeSet.size()"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.isEmpty()"], ["org.apache.cassandra.utils.btree.BTreeSearchIterator<V, V>", "org.apache.cassandra.utils.btree.BTreeSet.iterator()"], ["org.apache.cassandra.utils.btree.BTreeSearchIterator<V, V>", "org.apache.cassandra.utils.btree.BTreeSet.descendingIterator()"], ["java.lang.Object[]", "org.apache.cassandra.utils.btree.BTreeSet.toArray()"], ["<T> T[]", "org.apache.cassandra.utils.btree.BTreeSet.toArray(T[])"], ["<T> T[]", "org.apache.cassandra.utils.btree.BTreeSet.toArray(T[], int)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.first()"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.last()"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.lower(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.floor(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.ceiling(V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.higher(V)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.contains(java.lang.Object)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.containsAll(java.util.Collection<?>)"], ["int", "org.apache.cassandra.utils.btree.BTreeSet.hashCode()"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.addAll(java.util.Collection<? extends V>)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.addAll(int, java.util.Collection<? extends V>)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.retainAll(java.util.Collection<?>)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.removeAll(java.util.Collection<?>)"], ["void", "org.apache.cassandra.utils.btree.BTreeSet.clear()"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.pollFirst()"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.pollLast()"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.add(V)"], ["boolean", "org.apache.cassandra.utils.btree.BTreeSet.remove(java.lang.Object)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.set(int, V)"], ["void", "org.apache.cassandra.utils.btree.BTreeSet.add(int, V)"], ["V", "org.apache.cassandra.utils.btree.BTreeSet.remove(int)"], ["<V> org.apache.cassandra.utils.btree.BTreeSet$Builder<V>", "org.apache.cassandra.utils.btree.BTreeSet.builder(java.util.Comparator<? super V>)"], ["<V> org.apache.cassandra.utils.btree.BTreeSet<V>", "org.apache.cassandra.utils.btree.BTreeSet.wrap(java.lang.Object[], java.util.Comparator<V>)"], ["<V extends java.lang.Comparable<V>> org.apache.cassandra.utils.btree.BTreeSet<V>", "org.apache.cassandra.utils.btree.BTreeSet.of(java.util.Collection<V>)"], ["<V extends java.lang.Comparable<V>> org.apache.cassandra.utils.btree.BTreeSet<V>", "org.apache.cassandra.utils.btree.BTreeSet.of(V)"], ["<V> org.apache.cassandra.utils.btree.BTreeSet<V>", "org.apache.cassandra.utils.btree.BTreeSet.empty(java.util.Comparator<? super V>)"], ["<V> org.apache.cassandra.utils.btree.BTreeSet<V>", "org.apache.cassandra.utils.btree.BTreeSet.of(java.util.Comparator<? super V>, V)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet.tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet.headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.Iterator", "org.apache.cassandra.utils.btree.BTreeSet.descendingIterator()"], ["java.util.NavigableSet", "org.apache.cassandra.utils.btree.BTreeSet.descendingSet()"], ["java.util.Iterator", "org.apache.cassandra.utils.btree.BTreeSet.iterator()"], ["java.util.List", "org.apache.cassandra.utils.btree.BTreeSet.subList(int, int)"], ["org.apache.cassandra.utils.btree.TreeBuilder", "org.apache.cassandra.utils.btree.TreeBuilder.newInstance()"], ["<C, K extends C, V extends C> java.lang.Object[]", "org.apache.cassandra.utils.btree.TreeBuilder.update(java.lang.Object[], java.util.Comparator<C>, java.lang.Iterable<K>, org.apache.cassandra.utils.btree.UpdateFunction<K, V>)"], ["<C, K extends C, V extends C> java.lang.Object[]", "org.apache.cassandra.utils.btree.TreeBuilder.build(java.lang.Iterable<K>, org.apache.cassandra.utils.btree.UpdateFunction<K, V>, int)"], ["org.apache.cassandra.utils.btree.UpdateFunction$Simple", "org.apache.cassandra.utils.btree.UpdateFunction$Simple(java.util.function.BiFunction<V, V, V>)"], ["V", "org.apache.cassandra.utils.btree.UpdateFunction$Simple.apply(V)"], ["V", "org.apache.cassandra.utils.btree.UpdateFunction$Simple.apply(V, V)"], ["boolean", "org.apache.cassandra.utils.btree.UpdateFunction$Simple.abortEarly()"], ["void", "org.apache.cassandra.utils.btree.UpdateFunction$Simple.allocated(long)"], ["<V> org.apache.cassandra.utils.btree.UpdateFunction$Simple<V>", "org.apache.cassandra.utils.btree.UpdateFunction$Simple.of(java.util.function.BiFunction<V, V, V>)"], ["<K> org.apache.cassandra.utils.btree.UpdateFunction<K, K>", "org.apache.cassandra.utils.btree.UpdateFunction.noOp()"], ["boolean", "org.apache.cassandra.utils.concurrent.Accumulator$1.hasNext()"], ["E", "org.apache.cassandra.utils.concurrent.Accumulator$1.next()"], ["void", "org.apache.cassandra.utils.concurrent.Accumulator$1.remove()"], ["org.apache.cassandra.utils.concurrent.Accumulator", "org.apache.cassandra.utils.concurrent.Accumulator(int)"], ["void", "org.apache.cassandra.utils.concurrent.Accumulator.add(E)"], ["boolean", "org.apache.cassandra.utils.concurrent.Accumulator.isEmpty()"], ["int", "org.apache.cassandra.utils.concurrent.Accumulator.size()"], ["int", "org.apache.cassandra.utils.concurrent.Accumulator.capacity()"], ["E", "org.apache.cassandra.utils.concurrent.Accumulator.get(int)"], ["org.apache.cassandra.utils.concurrent.Blocker", "org.apache.cassandra.utils.concurrent.Blocker()"], ["void", "org.apache.cassandra.utils.concurrent.Blocker.block(boolean)"], ["void", "org.apache.cassandra.utils.concurrent.Blocker.ask()"], ["org.apache.cassandra.utils.concurrent.IntervalLock", "org.apache.cassandra.utils.concurrent.IntervalLock(org.apache.cassandra.utils.TimeSource)"], ["boolean", "org.apache.cassandra.utils.concurrent.IntervalLock.tryIntervalLock(long)"], ["void", "org.apache.cassandra.utils.concurrent.IntervalLock.releaseIntervalLock()"], ["long", "org.apache.cassandra.utils.concurrent.IntervalLock.getLastIntervalAcquire()"], ["org.apache.cassandra.utils.concurrent.Locks", "org.apache.cassandra.utils.concurrent.Locks()"], ["void", "org.apache.cassandra.utils.concurrent.Locks.monitorEnterUnsafe(java.lang.Object)"], ["void", "org.apache.cassandra.utils.concurrent.Locks.monitorExitUnsafe(java.lang.Object)"], ["org.apache.cassandra.utils.concurrent.OpOrder$Barrier", "org.apache.cassandra.utils.concurrent.OpOrder$Barrier(org.apache.cassandra.utils.concurrent.OpOrder)"], ["boolean", "org.apache.cassandra.utils.concurrent.OpOrder$Barrier.isAfter(org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["void", "org.apache.cassandra.utils.concurrent.OpOrder$Barrier.issue()"], ["void", "org.apache.cassandra.utils.concurrent.OpOrder$Barrier.markBlocking()"], ["org.apache.cassandra.utils.concurrent.WaitQueue$Signal", "org.apache.cassandra.utils.concurrent.OpOrder$Barrier.register()"], ["boolean", "org.apache.cassandra.utils.concurrent.OpOrder$Barrier.allPriorOpsAreFinished()"], ["void", "org.apache.cassandra.utils.concurrent.OpOrder$Barrier.await()"], ["org.apache.cassandra.utils.concurrent.OpOrder$Group", "org.apache.cassandra.utils.concurrent.OpOrder$Barrier.getSyncPoint()"], ["void", "org.apache.cassandra.utils.concurrent.OpOrder$Group.close()"], ["boolean", "org.apache.cassandra.utils.concurrent.OpOrder$Group.isBlocking()"], ["org.apache.cassandra.utils.concurrent.WaitQueue$Signal", "org.apache.cassandra.utils.concurrent.OpOrder$Group.isBlockingSignal()"], ["org.apache.cassandra.utils.concurrent.WaitQueue$Signal", "org.apache.cassandra.utils.concurrent.OpOrder$Group.isBlockingSignal(org.apache.cassandra.utils.concurrent.WaitQueue$Signal)"], ["int", "org.apache.cassandra.utils.concurrent.OpOrder$Group.compareTo(org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["int", "org.apache.cassandra.utils.concurrent.OpOrder$Group.compareTo(java.lang.Object)"], ["org.apache.cassandra.utils.concurrent.OpOrder", "org.apache.cassandra.utils.concurrent.OpOrder()"], ["org.apache.cassandra.utils.concurrent.OpOrder$Group", "org.apache.cassandra.utils.concurrent.OpOrder.start()"], ["org.apache.cassandra.utils.concurrent.OpOrder$Barrier", "org.apache.cassandra.utils.concurrent.OpOrder.newBarrier()"], ["org.apache.cassandra.utils.concurrent.OpOrder$Group", "org.apache.cassandra.utils.concurrent.OpOrder.getCurrent()"], ["void", "org.apache.cassandra.utils.concurrent.OpOrder.awaitNewBarrier()"], ["java.lang.String", "org.apache.cassandra.utils.concurrent.Ref$GlobalState.toString()"], ["org.apache.cassandra.utils.concurrent.Ref$IdentityCollection", "org.apache.cassandra.utils.concurrent.Ref$IdentityCollection(java.util.Set<org.apache.cassandra.utils.concurrent.RefCounted$Tidy>)"], ["void", "org.apache.cassandra.utils.concurrent.Ref$IdentityCollection.add(org.apache.cassandra.utils.concurrent.Ref<?>)"], ["void", "org.apache.cassandra.utils.concurrent.Ref$IdentityCollection.add(org.apache.cassandra.utils.concurrent.SelfRefCounted<?>)"], ["void", "org.apache.cassandra.utils.concurrent.Ref$IdentityCollection.add(org.apache.cassandra.utils.concurrent.SharedCloseable)"], ["void", "org.apache.cassandra.utils.concurrent.Ref$IdentityCollection.add(org.apache.cassandra.utils.concurrent.SharedCloseableImpl)"], ["void", "org.apache.cassandra.utils.concurrent.Ref$IdentityCollection.add(org.apache.cassandra.io.util.Memory)"], ["java.lang.String", "org.apache.cassandra.utils.concurrent.Ref$InProgressVisit.toString()"], ["org.apache.cassandra.utils.concurrent.Ref$State", "org.apache.cassandra.utils.concurrent.Ref$State(org.apache.cassandra.utils.concurrent.Ref$GlobalState, org.apache.cassandra.utils.concurrent.Ref, java.lang.ref.ReferenceQueue<? super org.apache.cassandra.utils.concurrent.Ref>)"], ["void", "org.apache.cassandra.utils.concurrent.Ref$StrongLeakDetector.run()"], ["void", "org.apache.cassandra.utils.concurrent.Ref$Visitor.run()"], ["org.apache.cassandra.utils.concurrent.Ref", "org.apache.cassandra.utils.concurrent.Ref(T, org.apache.cassandra.utils.concurrent.RefCounted$Tidy)"], ["void", "org.apache.cassandra.utils.concurrent.Ref.release()"], ["java.lang.Throwable", "org.apache.cassandra.utils.concurrent.Ref.ensureReleased(java.lang.Throwable)"], ["void", "org.apache.cassandra.utils.concurrent.Ref.ensureReleased()"], ["void", "org.apache.cassandra.utils.concurrent.Ref.close()"], ["T", "org.apache.cassandra.utils.concurrent.Ref.get()"], ["java.lang.String", "org.apache.cassandra.utils.concurrent.Ref.printDebugInfo()"], ["int", "org.apache.cassandra.utils.concurrent.Ref.globalCount()"], ["void", "org.apache.cassandra.utils.concurrent.Ref.shutdownReferenceReaper()"], ["java.lang.Object", "org.apache.cassandra.utils.concurrent.Refs$1.apply(java.lang.Object)"], ["org.apache.cassandra.utils.concurrent.Refs", "org.apache.cassandra.utils.concurrent.Refs()"], ["org.apache.cassandra.utils.concurrent.Refs", "org.apache.cassandra.utils.concurrent.Refs(java.util.Map<T, org.apache.cassandra.utils.concurrent.Ref<T>>)"], ["void", "org.apache.cassandra.utils.concurrent.Refs.release()"], ["void", "org.apache.cassandra.utils.concurrent.Refs.close()"], ["void", "org.apache.cassandra.utils.concurrent.Refs.release(T)"], ["boolean", "org.apache.cassandra.utils.concurrent.Refs.releaseIfHolds(T)"], ["void", "org.apache.cassandra.utils.concurrent.Refs.relaseAllExcept(java.util.Collection<T>)"], ["void", "org.apache.cassandra.utils.concurrent.Refs.release(java.util.Collection<T>)"], ["boolean", "org.apache.cassandra.utils.concurrent.Refs.tryRef(T)"], ["int", "org.apache.cassandra.utils.concurrent.Refs.size()"], ["<T extends org.apache.cassandra.utils.concurrent.RefCounted<T>> org.apache.cassandra.utils.concurrent.Refs<T>", "org.apache.cassandra.utils.concurrent.Refs.tryRef(java.lang.Iterable<T>)"], ["<T extends org.apache.cassandra.utils.concurrent.RefCounted<T>> org.apache.cassandra.utils.concurrent.Refs<T>", "org.apache.cassandra.utils.concurrent.Refs.ref(java.lang.Iterable<T>)"], ["void", "org.apache.cassandra.utils.concurrent.Refs.release(java.lang.Iterable<? extends org.apache.cassandra.utils.concurrent.Ref<?>>)"], ["java.lang.Throwable", "org.apache.cassandra.utils.concurrent.Refs.release(java.lang.Iterable<? extends org.apache.cassandra.utils.concurrent.Ref<?>>, java.lang.Throwable)"], ["<T extends org.apache.cassandra.utils.concurrent.SelfRefCounted<T>> java.lang.Iterable<org.apache.cassandra.utils.concurrent.Ref<T>>", "org.apache.cassandra.utils.concurrent.Refs.selfRefs(java.lang.Iterable<T>)"], ["org.apache.cassandra.utils.concurrent.SharedCloseableImpl", "org.apache.cassandra.utils.concurrent.SharedCloseableImpl(org.apache.cassandra.utils.concurrent.RefCounted$Tidy)"], ["boolean", "org.apache.cassandra.utils.concurrent.SharedCloseableImpl.isCleanedUp()"], ["void", "org.apache.cassandra.utils.concurrent.SharedCloseableImpl.close()"], ["java.lang.Throwable", "org.apache.cassandra.utils.concurrent.SharedCloseableImpl.close(java.lang.Throwable)"], ["void", "org.apache.cassandra.utils.concurrent.SharedCloseableImpl.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["org.apache.cassandra.utils.concurrent.SimpleCondition", "org.apache.cassandra.utils.concurrent.SimpleCondition()"], ["void", "org.apache.cassandra.utils.concurrent.SimpleCondition.await()"], ["boolean", "org.apache.cassandra.utils.concurrent.SimpleCondition.await(long, java.util.concurrent.TimeUnit)"], ["void", "org.apache.cassandra.utils.concurrent.SimpleCondition.signal()"], ["boolean", "org.apache.cassandra.utils.concurrent.SimpleCondition.isSignaled()"], ["void", "org.apache.cassandra.utils.concurrent.SimpleCondition.signalAll()"], ["void", "org.apache.cassandra.utils.concurrent.SimpleCondition.awaitUninterruptibly()"], ["long", "org.apache.cassandra.utils.concurrent.SimpleCondition.awaitNanos(long)"], ["boolean", "org.apache.cassandra.utils.concurrent.SimpleCondition.awaitUntil(java.util.Date)"], ["org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional$State[]", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional$State.values()"], ["org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional$State", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional$State.valueOf(java.lang.String)"], ["org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional()"], ["java.lang.Throwable", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.commit(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.abort(java.lang.Throwable)"], ["void", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.close()"], ["void", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.prepareToCommit()"], ["java.lang.Object", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.finish()"], ["void", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.abort()"], ["void", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.commit()"], ["org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional$State", "org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.state()"], ["org.apache.cassandra.utils.concurrent.WaitQueue$AbstractSignal", "org.apache.cassandra.utils.concurrent.WaitQueue$AbstractSignal()"], ["void", "org.apache.cassandra.utils.concurrent.WaitQueue$AbstractSignal.awaitUninterruptibly()"], ["void", "org.apache.cassandra.utils.concurrent.WaitQueue$AbstractSignal.await()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$AbstractSignal.awaitUntil(long)"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$AllSignal.isSignalled()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$AllSignal.isSet()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$AnySignal.isSignalled()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$AnySignal.isSet()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$MultiSignal.isCancelled()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$MultiSignal.checkAndClear()"], ["void", "org.apache.cassandra.utils.concurrent.WaitQueue$MultiSignal.cancel()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal.isSignalled()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal.isCancelled()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal.isSet()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal.checkAndClear()"], ["void", "org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal.cancel()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue$TimedSignal.checkAndClear()"], ["void", "org.apache.cassandra.utils.concurrent.WaitQueue$TimedSignal.cancel()"], ["org.apache.cassandra.utils.concurrent.WaitQueue", "org.apache.cassandra.utils.concurrent.WaitQueue()"], ["org.apache.cassandra.utils.concurrent.WaitQueue$Signal", "org.apache.cassandra.utils.concurrent.WaitQueue.register()"], ["org.apache.cassandra.utils.concurrent.WaitQueue$Signal", "org.apache.cassandra.utils.concurrent.WaitQueue.register(com.codahale.metrics.Timer$Context)"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue.signal()"], ["void", "org.apache.cassandra.utils.concurrent.WaitQueue.signalAll()"], ["boolean", "org.apache.cassandra.utils.concurrent.WaitQueue.hasWaiters()"], ["int", "org.apache.cassandra.utils.concurrent.WaitQueue.getWaiting()"], ["org.apache.cassandra.utils.concurrent.WaitQueue$Signal", "org.apache.cassandra.utils.concurrent.WaitQueue.any(org.apache.cassandra.utils.concurrent.WaitQueue$Signal...)"], ["org.apache.cassandra.utils.concurrent.WaitQueue$Signal", "org.apache.cassandra.utils.concurrent.WaitQueue.all(org.apache.cassandra.utils.concurrent.WaitQueue$Signal...)"], ["void", "org.apache.cassandra.utils.concurrent.WaitQueue.waitOnCondition(java.util.function.BooleanSupplier, org.apache.cassandra.utils.concurrent.WaitQueue)"], ["void", "org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$Tidy.tidy()"], ["java.lang.String", "org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$Tidy.name()"], ["org.apache.cassandra.utils.concurrent.WrappedSharedCloseable", "org.apache.cassandra.utils.concurrent.WrappedSharedCloseable(java.lang.AutoCloseable)"], ["org.apache.cassandra.utils.concurrent.WrappedSharedCloseable", "org.apache.cassandra.utils.concurrent.WrappedSharedCloseable(java.lang.AutoCloseable[])"], ["org.apache.cassandra.utils.logging.LogbackLoggingSupport", "org.apache.cassandra.utils.logging.LogbackLoggingSupport()"], ["void", "org.apache.cassandra.utils.logging.LogbackLoggingSupport.onStartup()"], ["void", "org.apache.cassandra.utils.logging.LogbackLoggingSupport.onShutdown()"], ["void", "org.apache.cassandra.utils.logging.LogbackLoggingSupport.setLoggingLevel(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.utils.logging.LogbackLoggingSupport.getLoggingLevels()"], ["default", "org.apache.cassandra.utils.logging.LoggingSupport.void onStartup()"], ["default", "org.apache.cassandra.utils.logging.LoggingSupport.void onShutdown()"], ["org.apache.cassandra.utils.logging.LoggingSupport", "org.apache.cassandra.utils.logging.LoggingSupportFactory.getLoggingSupport()"], ["org.apache.cassandra.utils.logging.NoOpFallbackLoggingSupport", "org.apache.cassandra.utils.logging.NoOpFallbackLoggingSupport()"], ["void", "org.apache.cassandra.utils.logging.NoOpFallbackLoggingSupport.setLoggingLevel(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.cassandra.utils.logging.NoOpFallbackLoggingSupport.getLoggingLevels()"], ["void", "org.apache.cassandra.utils.memory.AbstractAllocator$CloningBTreeRowBuilder.newRow(org.apache.cassandra.db.Clustering)"], ["void", "org.apache.cassandra.utils.memory.AbstractAllocator$CloningBTreeRowBuilder.addCell(org.apache.cassandra.db.rows.Cell)"], ["org.apache.cassandra.utils.memory.AbstractAllocator", "org.apache.cassandra.utils.memory.AbstractAllocator()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.AbstractAllocator.clone(java.nio.ByteBuffer)"], ["org.apache.cassandra.db.rows.Row$Builder", "org.apache.cassandra.utils.memory.AbstractAllocator.cloningBTreeRowBuilder()"], ["java.lang.String", "org.apache.cassandra.utils.memory.BufferPool$Chunk.toString()"], ["org.apache.cassandra.utils.memory.BufferPool$Chunk", "org.apache.cassandra.utils.memory.BufferPool$GlobalPool.get()"], ["void", "org.apache.cassandra.utils.memory.BufferPool$GlobalPool.recycle(org.apache.cassandra.utils.memory.BufferPool$Chunk)"], ["long", "org.apache.cassandra.utils.memory.BufferPool$GlobalPool.sizeInBytes()"], ["org.apache.cassandra.utils.memory.BufferPool$LocalPool", "org.apache.cassandra.utils.memory.BufferPool$LocalPool()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.BufferPool$LocalPool.get(int)"], ["void", "org.apache.cassandra.utils.memory.BufferPool$LocalPool.put(java.nio.ByteBuffer)"], ["org.apache.cassandra.utils.memory.BufferPool$LocalPoolRef", "org.apache.cassandra.utils.memory.BufferPool$LocalPoolRef(org.apache.cassandra.utils.memory.BufferPool$LocalPool, java.lang.ref.ReferenceQueue<? super org.apache.cassandra.utils.memory.BufferPool$LocalPool>)"], ["void", "org.apache.cassandra.utils.memory.BufferPool$LocalPoolRef.release()"], ["org.apache.cassandra.utils.memory.BufferPool", "org.apache.cassandra.utils.memory.BufferPool()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.BufferPool.get(int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.BufferPool.get(int, org.apache.cassandra.io.compress.BufferType)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.BufferPool.tryGet(int)"], ["void", "org.apache.cassandra.utils.memory.BufferPool.put(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.utils.memory.BufferPool.sizeInBytes()"], ["int", "org.apache.cassandra.utils.memory.BufferPool.roundUpNormal(int)"], ["void", "org.apache.cassandra.utils.memory.BufferPool.shutdownLocalCleaner()"], ["org.apache.cassandra.utils.memory.ContextAllocator", "org.apache.cassandra.utils.memory.ContextAllocator(org.apache.cassandra.utils.concurrent.OpOrder$Group, org.apache.cassandra.utils.memory.MemtableBufferAllocator)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.ContextAllocator.clone(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.ContextAllocator.allocate(int)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap$1.next(org.apache.cassandra.db.Clustering)"], ["java.lang.Object", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap$1.next(java.lang.Object)"], ["boolean", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap$2.hasNext()"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap$2.next()"], ["void", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap$2.remove()"], ["java.lang.Object", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap$2.next()"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap.applyToPartitionKey(org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap.applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.utils.SearchIterator<org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row>", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap.applyToPartition(org.apache.cassandra.utils.SearchIterator<org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row>)"], ["org.apache.cassandra.db.DeletionInfo", "org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap.applyToDeletionInfo(org.apache.cassandra.db.DeletionInfo)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.utils.memory.EnsureOnHeap$NoOp.applyToPartitionKey(org.apache.cassandra.db.DecoratedKey)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.utils.memory.EnsureOnHeap$NoOp.applyToRow(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.Row", "org.apache.cassandra.utils.memory.EnsureOnHeap$NoOp.applyToStatic(org.apache.cassandra.db.rows.Row)"], ["org.apache.cassandra.db.rows.RangeTombstoneMarker", "org.apache.cassandra.utils.memory.EnsureOnHeap$NoOp.applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)"], ["org.apache.cassandra.db.rows.UnfilteredRowIterator", "org.apache.cassandra.utils.memory.EnsureOnHeap$NoOp.applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)"], ["org.apache.cassandra.utils.SearchIterator<org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row>", "org.apache.cassandra.utils.memory.EnsureOnHeap$NoOp.applyToPartition(org.apache.cassandra.utils.SearchIterator<org.apache.cassandra.db.Clustering, org.apache.cassandra.db.rows.Row>)"], ["org.apache.cassandra.db.DeletionInfo", "org.apache.cassandra.utils.memory.EnsureOnHeap$NoOp.applyToDeletionInfo(org.apache.cassandra.db.DeletionInfo)"], ["org.apache.cassandra.utils.memory.EnsureOnHeap", "org.apache.cassandra.utils.memory.EnsureOnHeap()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.HeapAllocator.allocate(int)"], ["boolean", "org.apache.cassandra.utils.memory.HeapAllocator.allocatingOnHeap()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.HeapPool$Allocator.allocate(int, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["org.apache.cassandra.utils.memory.EnsureOnHeap", "org.apache.cassandra.utils.memory.HeapPool$Allocator.ensureOnHeap()"], ["org.apache.cassandra.utils.memory.HeapPool", "org.apache.cassandra.utils.memory.HeapPool(long, float, java.lang.Runnable)"], ["org.apache.cassandra.utils.memory.MemtableAllocator", "org.apache.cassandra.utils.memory.HeapPool.newAllocator()"], ["org.apache.cassandra.utils.memory.MemoryUtil", "org.apache.cassandra.utils.memory.MemoryUtil()"], ["int", "org.apache.cassandra.utils.memory.MemoryUtil.pageSize()"], ["long", "org.apache.cassandra.utils.memory.MemoryUtil.getAddress(java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.utils.memory.MemoryUtil.allocate(long)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.free(long)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setByte(long, byte)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setByte(long, int, byte)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setShort(long, short)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setInt(long, int)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setLong(long, long)"], ["byte", "org.apache.cassandra.utils.memory.MemoryUtil.getByte(long)"], ["int", "org.apache.cassandra.utils.memory.MemoryUtil.getShort(long)"], ["int", "org.apache.cassandra.utils.memory.MemoryUtil.getInt(long)"], ["long", "org.apache.cassandra.utils.memory.MemoryUtil.getLong(long)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.MemoryUtil.getByteBuffer(long, int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.MemoryUtil.getByteBuffer(long, int, java.nio.ByteOrder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.MemoryUtil.getHollowDirectByteBuffer()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.MemoryUtil.getHollowDirectByteBuffer(java.nio.ByteOrder)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.MemoryUtil.getHollowByteBuffer()"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setByteBuffer(java.nio.ByteBuffer, long, int)"], ["java.lang.Object", "org.apache.cassandra.utils.memory.MemoryUtil.getAttachment(java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setAttachment(java.nio.ByteBuffer, java.lang.Object)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.MemoryUtil.duplicateDirectByteBuffer(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["long", "org.apache.cassandra.utils.memory.MemoryUtil.getLongByByte(long)"], ["int", "org.apache.cassandra.utils.memory.MemoryUtil.getIntByByte(long)"], ["int", "org.apache.cassandra.utils.memory.MemoryUtil.getShortByByte(long)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.putLongByByte(long, long)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.putIntByByte(long, int)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long, java.nio.ByteBuffer)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long, byte[], int, int)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long, long, long)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.setBytes(byte[], int, long, long)"], ["void", "org.apache.cassandra.utils.memory.MemoryUtil.getBytes(long, byte[], int, int)"], ["org.apache.cassandra.utils.memory.MemtableAllocator$LifeCycle[]", "org.apache.cassandra.utils.memory.MemtableAllocator$LifeCycle.values()"], ["org.apache.cassandra.utils.memory.MemtableAllocator$LifeCycle", "org.apache.cassandra.utils.memory.MemtableAllocator$LifeCycle.valueOf(java.lang.String)"], ["void", "org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.adjust(long, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["void", "org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.allocate(long, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["long", "org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.owns()"], ["float", "org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.ownershipRatio()"], ["org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator", "org.apache.cassandra.utils.memory.MemtableAllocator.onHeap()"], ["org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator", "org.apache.cassandra.utils.memory.MemtableAllocator.offHeap()"], ["void", "org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarding()"], ["void", "org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded()"], ["boolean", "org.apache.cassandra.utils.memory.MemtableAllocator.isLive()"], ["org.apache.cassandra.db.rows.Row$Builder", "org.apache.cassandra.utils.memory.MemtableBufferAllocator.rowBuilder(org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.utils.memory.MemtableBufferAllocator.clone(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["void", "org.apache.cassandra.utils.memory.MemtableCleanerThread$Clean.run()"], ["void", "org.apache.cassandra.utils.memory.MemtableCleanerThread.trigger()"], ["org.apache.cassandra.utils.memory.MemtablePool$SubPool", "org.apache.cassandra.utils.memory.MemtablePool$SubPool(org.apache.cassandra.utils.memory.MemtablePool, long, float)"], ["long", "org.apache.cassandra.utils.memory.MemtablePool$SubPool.used()"], ["float", "org.apache.cassandra.utils.memory.MemtablePool$SubPool.reclaimingRatio()"], ["float", "org.apache.cassandra.utils.memory.MemtablePool$SubPool.usedRatio()"], ["org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator", "org.apache.cassandra.utils.memory.MemtablePool$SubPool.newAllocator()"], ["org.apache.cassandra.utils.concurrent.WaitQueue", "org.apache.cassandra.utils.memory.MemtablePool$SubPool.hasRoom()"], ["com.codahale.metrics.Timer$Context", "org.apache.cassandra.utils.memory.MemtablePool$SubPool.blockedTimerContext()"], ["void", "org.apache.cassandra.utils.memory.MemtablePool.shutdown()"], ["void", "org.apache.cassandra.utils.memory.NativeAllocator$CloningBTreeRowBuilder.newRow(org.apache.cassandra.db.Clustering)"], ["void", "org.apache.cassandra.utils.memory.NativeAllocator$CloningBTreeRowBuilder.addCell(org.apache.cassandra.db.rows.Cell)"], ["java.lang.String", "org.apache.cassandra.utils.memory.NativeAllocator$Region.toString()"], ["org.apache.cassandra.db.rows.Row$Builder", "org.apache.cassandra.utils.memory.NativeAllocator.rowBuilder(org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["org.apache.cassandra.db.DecoratedKey", "org.apache.cassandra.utils.memory.NativeAllocator.clone(org.apache.cassandra.db.DecoratedKey, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["org.apache.cassandra.utils.memory.EnsureOnHeap", "org.apache.cassandra.utils.memory.NativeAllocator.ensureOnHeap()"], ["long", "org.apache.cassandra.utils.memory.NativeAllocator.allocate(int, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["void", "org.apache.cassandra.utils.memory.NativeAllocator.setDiscarded()"], ["org.apache.cassandra.utils.memory.NativePool", "org.apache.cassandra.utils.memory.NativePool(long, long, float, java.lang.Runnable)"], ["org.apache.cassandra.utils.memory.NativeAllocator", "org.apache.cassandra.utils.memory.NativePool.newAllocator()"], ["org.apache.cassandra.utils.memory.MemtableAllocator", "org.apache.cassandra.utils.memory.NativePool.newAllocator()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.SlabAllocator$Region.allocate(int)"], ["java.lang.String", "org.apache.cassandra.utils.memory.SlabAllocator$Region.toString()"], ["org.apache.cassandra.utils.memory.EnsureOnHeap", "org.apache.cassandra.utils.memory.SlabAllocator.ensureOnHeap()"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.SlabAllocator.allocate(int)"], ["java.nio.ByteBuffer", "org.apache.cassandra.utils.memory.SlabAllocator.allocate(int, org.apache.cassandra.utils.concurrent.OpOrder$Group)"], ["void", "org.apache.cassandra.utils.memory.SlabAllocator.setDiscarded()"], ["org.apache.cassandra.utils.memory.SlabPool", "org.apache.cassandra.utils.memory.SlabPool(long, long, float, java.lang.Runnable)"], ["org.apache.cassandra.utils.memory.MemtableAllocator", "org.apache.cassandra.utils.memory.SlabPool.newAllocator()"], ["int", "org.apache.cassandra.utils.obs.BitUtil.pop(long)"], ["long", "org.apache.cassandra.utils.obs.BitUtil.pop_array(long[], int, int)"], ["long", "org.apache.cassandra.utils.obs.BitUtil.pop_intersect(long[], long[], int, int)"], ["long", "org.apache.cassandra.utils.obs.BitUtil.pop_union(long[], long[], int, int)"], ["long", "org.apache.cassandra.utils.obs.BitUtil.pop_andnot(long[], long[], int, int)"], ["long", "org.apache.cassandra.utils.obs.BitUtil.pop_xor(long[], long[], int, int)"], ["int", "org.apache.cassandra.utils.obs.BitUtil.ntz(long)"], ["int", "org.apache.cassandra.utils.obs.BitUtil.ntz(int)"], ["int", "org.apache.cassandra.utils.obs.BitUtil.ntz2(long)"], ["int", "org.apache.cassandra.utils.obs.BitUtil.ntz3(long)"], ["boolean", "org.apache.cassandra.utils.obs.BitUtil.isPowerOfTwo(int)"], ["boolean", "org.apache.cassandra.utils.obs.BitUtil.isPowerOfTwo(long)"], ["int", "org.apache.cassandra.utils.obs.BitUtil.nextHighestPowerOfTwo(int)"], ["long", "org.apache.cassandra.utils.obs.BitUtil.nextHighestPowerOfTwo(long)"], ["org.apache.cassandra.utils.obs.OffHeapBitSet", "org.apache.cassandra.utils.obs.OffHeapBitSet(long)"], ["long", "org.apache.cassandra.utils.obs.OffHeapBitSet.capacity()"], ["long", "org.apache.cassandra.utils.obs.OffHeapBitSet.offHeapSize()"], ["void", "org.apache.cassandra.utils.obs.OffHeapBitSet.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["boolean", "org.apache.cassandra.utils.obs.OffHeapBitSet.get(long)"], ["void", "org.apache.cassandra.utils.obs.OffHeapBitSet.set(long)"], ["void", "org.apache.cassandra.utils.obs.OffHeapBitSet.set(long, byte)"], ["void", "org.apache.cassandra.utils.obs.OffHeapBitSet.clear(long)"], ["void", "org.apache.cassandra.utils.obs.OffHeapBitSet.clear()"], ["void", "org.apache.cassandra.utils.obs.OffHeapBitSet.serialize(java.io.DataOutput)"], ["long", "org.apache.cassandra.utils.obs.OffHeapBitSet.serializedSize()"], ["org.apache.cassandra.utils.obs.OffHeapBitSet", "org.apache.cassandra.utils.obs.OffHeapBitSet.deserialize(java.io.DataInput)"], ["void", "org.apache.cassandra.utils.obs.OffHeapBitSet.close()"], ["boolean", "org.apache.cassandra.utils.obs.OffHeapBitSet.equals(java.lang.Object)"], ["int", "org.apache.cassandra.utils.obs.OffHeapBitSet.hashCode()"], ["java.lang.String", "org.apache.cassandra.utils.obs.OffHeapBitSet.toString()"], ["org.apache.cassandra.utils.obs.OpenBitSet", "org.apache.cassandra.utils.obs.OpenBitSet(long)"], ["org.apache.cassandra.utils.obs.OpenBitSet", "org.apache.cassandra.utils.obs.OpenBitSet()"], ["int", "org.apache.cassandra.utils.obs.OpenBitSet.getPageSize()"], ["int", "org.apache.cassandra.utils.obs.OpenBitSet.getPageCount()"], ["long[]", "org.apache.cassandra.utils.obs.OpenBitSet.getPage(int)"], ["long", "org.apache.cassandra.utils.obs.OpenBitSet.capacity()"], ["long", "org.apache.cassandra.utils.obs.OpenBitSet.offHeapSize()"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)"], ["long", "org.apache.cassandra.utils.obs.OpenBitSet.size()"], ["long", "org.apache.cassandra.utils.obs.OpenBitSet.length()"], ["boolean", "org.apache.cassandra.utils.obs.OpenBitSet.isEmpty()"], ["int", "org.apache.cassandra.utils.obs.OpenBitSet.getNumWords()"], ["boolean", "org.apache.cassandra.utils.obs.OpenBitSet.get(int)"], ["boolean", "org.apache.cassandra.utils.obs.OpenBitSet.get(long)"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.set(long)"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.set(int)"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.clear(int)"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.clear(long)"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.clear(int, int)"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.clear(long, long)"], ["long", "org.apache.cassandra.utils.obs.OpenBitSet.cardinality()"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.intersect(org.apache.cassandra.utils.obs.OpenBitSet)"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.and(org.apache.cassandra.utils.obs.OpenBitSet)"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.trimTrailingZeros()"], ["long", "org.apache.cassandra.utils.obs.OpenBitSet.bits2words(long)"], ["boolean", "org.apache.cassandra.utils.obs.OpenBitSet.equals(java.lang.Object)"], ["int", "org.apache.cassandra.utils.obs.OpenBitSet.hashCode()"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.close()"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.serialize(java.io.DataOutput)"], ["long", "org.apache.cassandra.utils.obs.OpenBitSet.serializedSize()"], ["void", "org.apache.cassandra.utils.obs.OpenBitSet.clear()"], ["org.apache.cassandra.utils.obs.OpenBitSet", "org.apache.cassandra.utils.obs.OpenBitSet.deserialize(java.io.DataInput)"], ["org.apache.cassandra.utils.progress.ProgressEvent", "org.apache.cassandra.utils.progress.ProgressEvent.createNotification(java.lang.String)"], ["org.apache.cassandra.utils.progress.ProgressEvent", "org.apache.cassandra.utils.progress.ProgressEvent(org.apache.cassandra.utils.progress.ProgressEventType, int, int)"], ["org.apache.cassandra.utils.progress.ProgressEvent", "org.apache.cassandra.utils.progress.ProgressEvent(org.apache.cassandra.utils.progress.ProgressEventType, int, int, java.lang.String)"], ["org.apache.cassandra.utils.progress.ProgressEventType", "org.apache.cassandra.utils.progress.ProgressEvent.getType()"], ["int", "org.apache.cassandra.utils.progress.ProgressEvent.getProgressCount()"], ["int", "org.apache.cassandra.utils.progress.ProgressEvent.getTotal()"], ["double", "org.apache.cassandra.utils.progress.ProgressEvent.getProgressPercentage()"], ["java.lang.String", "org.apache.cassandra.utils.progress.ProgressEvent.getMessage()"], ["org.apache.cassandra.utils.progress.ProgressEventNotifierSupport", "org.apache.cassandra.utils.progress.ProgressEventNotifierSupport()"], ["void", "org.apache.cassandra.utils.progress.ProgressEventNotifierSupport.addProgressListener(org.apache.cassandra.utils.progress.ProgressListener)"], ["void", "org.apache.cassandra.utils.progress.ProgressEventNotifierSupport.removeProgressListener(org.apache.cassandra.utils.progress.ProgressListener)"], ["org.apache.cassandra.utils.progress.ProgressEventType[]", "org.apache.cassandra.utils.progress.ProgressEventType.values()"], ["org.apache.cassandra.utils.progress.ProgressEventType", "org.apache.cassandra.utils.progress.ProgressEventType.valueOf(java.lang.String)"], ["org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener", "org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener()"], ["void", "org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleNotificationLost(long, java.lang.String)"], ["void", "org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleConnectionClosed(long, java.lang.String)"], ["void", "org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleConnectionFailed(long, java.lang.String)"], ["void", "org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleNotification(javax.management.Notification, java.lang.Object)"], ["org.apache.cassandra.utils.progress.jmx.JMXProgressSupport", "org.apache.cassandra.utils.progress.jmx.JMXProgressSupport(javax.management.NotificationBroadcasterSupport)"], ["void", "org.apache.cassandra.utils.progress.jmx.JMXProgressSupport.progress(java.lang.String, org.apache.cassandra.utils.progress.ProgressEvent)"], ["org.apache.cassandra.utils.progress.jmx.LegacyJMXProgressSupport", "org.apache.cassandra.utils.progress.jmx.LegacyJMXProgressSupport(javax.management.NotificationBroadcasterSupport, java.lang.String)"], ["void", "org.apache.cassandra.utils.progress.jmx.LegacyJMXProgressSupport.progress(java.lang.String, org.apache.cassandra.utils.progress.ProgressEvent)"], ["byte[]", "org.apache.cassandra.utils.vint.VIntCoding$1.initialValue()"], ["java.lang.Object", "org.apache.cassandra.utils.vint.VIntCoding$1.initialValue()"], ["org.apache.cassandra.utils.vint.VIntCoding", "org.apache.cassandra.utils.vint.VIntCoding()"], ["long", "org.apache.cassandra.utils.vint.VIntCoding.readUnsignedVInt(java.io.DataInput)"], ["long", "org.apache.cassandra.utils.vint.VIntCoding.readVInt(java.io.DataInput)"], ["int", "org.apache.cassandra.utils.vint.VIntCoding.firstByteValueMask(int)"], ["int", "org.apache.cassandra.utils.vint.VIntCoding.encodeExtraBytesToRead(int)"], ["int", "org.apache.cassandra.utils.vint.VIntCoding.numberOfExtraBytesToRead(int)"], ["void", "org.apache.cassandra.utils.vint.VIntCoding.writeUnsignedVInt(long, java.io.DataOutput)"], ["byte[]", "org.apache.cassandra.utils.vint.VIntCoding.encodeVInt(long, int)"], ["void", "org.apache.cassandra.utils.vint.VIntCoding.writeVInt(long, java.io.DataOutput)"], ["long", "org.apache.cassandra.utils.vint.VIntCoding.decodeZigZag64(long)"], ["long", "org.apache.cassandra.utils.vint.VIntCoding.encodeZigZag64(long)"], ["int", "org.apache.cassandra.utils.vint.VIntCoding.computeVIntSize(long)"], ["int", "org.apache.cassandra.utils.vint.VIntCoding.computeUnsignedVIntSize(long)"]]}