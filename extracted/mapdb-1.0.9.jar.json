{"mapdb-1.0.9.jar": [["org.mapdb.AsyncWriteEngine$WriterRunnable", "org.mapdb.AsyncWriteEngine$WriterRunnable(org.mapdb.AsyncWriteEngine)"], ["void", "org.mapdb.AsyncWriteEngine$WriterRunnable.run()"], ["org.mapdb.AsyncWriteEngine", "org.mapdb.AsyncWriteEngine(org.mapdb.Engine, int, int, java.util.concurrent.Executor)"], ["org.mapdb.AsyncWriteEngine", "org.mapdb.AsyncWriteEngine(org.mapdb.Engine)"], ["<A> long", "org.mapdb.AsyncWriteEngine.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.AsyncWriteEngine.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.AsyncWriteEngine.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.AsyncWriteEngine.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.AsyncWriteEngine.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.AsyncWriteEngine.close()"], ["void", "org.mapdb.AsyncWriteEngine.commit()"], ["void", "org.mapdb.AsyncWriteEngine.rollback()"], ["void", "org.mapdb.AsyncWriteEngine.compact()"], ["void", "org.mapdb.AsyncWriteEngine.clearCache()"], ["org.mapdb.Atomic$Boolean", "org.mapdb.Atomic$Boolean(org.mapdb.Engine, long)"], ["long", "org.mapdb.Atomic$Boolean.getRecid()"], ["boolean", "org.mapdb.Atomic$Boolean.get()"], ["boolean", "org.mapdb.Atomic$Boolean.compareAndSet(boolean, boolean)"], ["void", "org.mapdb.Atomic$Boolean.set(boolean)"], ["boolean", "org.mapdb.Atomic$Boolean.getAndSet(boolean)"], ["java.lang.String", "org.mapdb.Atomic$Boolean.toString()"], ["org.mapdb.Atomic$Integer", "org.mapdb.Atomic$Integer(org.mapdb.Engine, long)"], ["long", "org.mapdb.Atomic$Integer.getRecid()"], ["int", "org.mapdb.Atomic$Integer.get()"], ["void", "org.mapdb.Atomic$Integer.set(int)"], ["int", "org.mapdb.Atomic$Integer.getAndSet(int)"], ["boolean", "org.mapdb.Atomic$Integer.compareAndSet(int, int)"], ["int", "org.mapdb.Atomic$Integer.getAndIncrement()"], ["int", "org.mapdb.Atomic$Integer.getAndDecrement()"], ["int", "org.mapdb.Atomic$Integer.getAndAdd(int)"], ["int", "org.mapdb.Atomic$Integer.incrementAndGet()"], ["int", "org.mapdb.Atomic$Integer.decrementAndGet()"], ["int", "org.mapdb.Atomic$Integer.addAndGet(int)"], ["java.lang.String", "org.mapdb.Atomic$Integer.toString()"], ["int", "org.mapdb.Atomic$Integer.intValue()"], ["long", "org.mapdb.Atomic$Integer.longValue()"], ["float", "org.mapdb.Atomic$Integer.floatValue()"], ["double", "org.mapdb.Atomic$Integer.doubleValue()"], ["org.mapdb.Atomic$Long", "org.mapdb.Atomic$Long(org.mapdb.Engine, long)"], ["long", "org.mapdb.Atomic$Long.getRecid()"], ["long", "org.mapdb.Atomic$Long.get()"], ["void", "org.mapdb.Atomic$Long.set(long)"], ["long", "org.mapdb.Atomic$Long.getAndSet(long)"], ["boolean", "org.mapdb.Atomic$Long.compareAndSet(long, long)"], ["long", "org.mapdb.Atomic$Long.getAndIncrement()"], ["long", "org.mapdb.Atomic$Long.getAndDecrement()"], ["long", "org.mapdb.Atomic$Long.getAndAdd(long)"], ["long", "org.mapdb.Atomic$Long.incrementAndGet()"], ["long", "org.mapdb.Atomic$Long.decrementAndGet()"], ["long", "org.mapdb.Atomic$Long.addAndGet(long)"], ["java.lang.String", "org.mapdb.Atomic$Long.toString()"], ["int", "org.mapdb.Atomic$Long.intValue()"], ["long", "org.mapdb.Atomic$Long.longValue()"], ["float", "org.mapdb.Atomic$Long.floatValue()"], ["double", "org.mapdb.Atomic$Long.doubleValue()"], ["org.mapdb.Atomic$String", "org.mapdb.Atomic$String(org.mapdb.Engine, long)"], ["long", "org.mapdb.Atomic$String.getRecid()"], ["java.lang.String", "org.mapdb.Atomic$String.toString()"], ["java.lang.String", "org.mapdb.Atomic$String.get()"], ["boolean", "org.mapdb.Atomic$String.compareAndSet(java.lang.String, java.lang.String)"], ["void", "org.mapdb.Atomic$String.set(java.lang.String)"], ["java.lang.String", "org.mapdb.Atomic$String.getAndSet(java.lang.String)"], ["org.mapdb.Atomic$Var", "org.mapdb.Atomic$Var(org.mapdb.Engine, long, org.mapdb.Serializer<E>)"], ["long", "org.mapdb.Atomic$Var.getRecid()"], ["java.lang.String", "org.mapdb.Atomic$Var.toString()"], ["E", "org.mapdb.Atomic$Var.get()"], ["boolean", "org.mapdb.Atomic$Var.compareAndSet(E, E)"], ["void", "org.mapdb.Atomic$Var.set(E)"], ["E", "org.mapdb.Atomic$Var.getAndSet(E)"], ["void", "org.mapdb.BTreeKeySerializer$1.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$1.deserialize(java.io.DataInput, int, int, int)"], ["void", "org.mapdb.BTreeKeySerializer$2.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$2.deserialize(java.io.DataInput, int, int, int)"], ["void", "org.mapdb.BTreeKeySerializer$3.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$3.deserialize(java.io.DataInput, int, int, int)"], ["org.mapdb.BTreeKeySerializer$BasicKeySerializer", "org.mapdb.BTreeKeySerializer$BasicKeySerializer(org.mapdb.Serializer)"], ["void", "org.mapdb.BTreeKeySerializer$BasicKeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$BasicKeySerializer.deserialize(java.io.DataInput, int, int, int)"], ["org.mapdb.BTreeKeySerializer$Tuple2KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer(java.util.Comparator<A>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.deserialize(java.io.DataInput, int, int, int)"], ["java.util.Comparator<org.mapdb.Fun$Tuple2<A, B>>", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.hashCode()"], ["org.mapdb.BTreeKeySerializer$Tuple3KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.deserialize(java.io.DataInput, int, int, int)"], ["java.util.Comparator<org.mapdb.Fun$Tuple3<A, B, C>>", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.hashCode()"], ["org.mapdb.BTreeKeySerializer$Tuple4KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.deserialize(java.io.DataInput, int, int, int)"], ["java.util.Comparator<org.mapdb.Fun$Tuple4<A, B, C, D>>", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.hashCode()"], ["org.mapdb.BTreeKeySerializer$Tuple5KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>, org.mapdb.Serializer<E>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.deserialize(java.io.DataInput, int, int, int)"], ["java.util.Comparator<org.mapdb.Fun$Tuple5<A, B, C, D, E>>", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.hashCode()"], ["org.mapdb.BTreeKeySerializer$Tuple6KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>, org.mapdb.Serializer<E>, org.mapdb.Serializer<F>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.deserialize(java.io.DataInput, int, int, int)"], ["java.util.Comparator<org.mapdb.Fun$Tuple6<A, B, C, D, E, F>>", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.hashCode()"], ["org.mapdb.BTreeKeySerializer", "org.mapdb.BTreeKeySerializer()"], ["byte[]", "org.mapdb.BTreeKeySerializer.leadingValuePackRead(java.io.DataInput, byte[], int)"], ["void", "org.mapdb.BTreeKeySerializer.leadingValuePackWrite(java.io.DataOutput, byte[], byte[], int)"], ["int", "org.mapdb.BTreeMap$1.compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.mapdb.BTreeMap$1.compare(java.lang.Object, java.lang.Object)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$BTreeEntryIterator.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$BTreeEntryIterator.next()"], ["boolean", "org.mapdb.BTreeMap$BTreeIterator.hasNext()"], ["void", "org.mapdb.BTreeMap$BTreeIterator.remove()"], ["K", "org.mapdb.BTreeMap$BTreeKeyIterator.next()"], ["V", "org.mapdb.BTreeMap$BTreeValueIterator.next()"], ["K", "org.mapdb.BTreeMap$DescendingMap$1.next()"], ["V", "org.mapdb.BTreeMap$DescendingMap$2.next()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap$3.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$DescendingMap$3.next()"], ["boolean", "org.mapdb.BTreeMap$DescendingMap$Iter.hasNext()"], ["void", "org.mapdb.BTreeMap$DescendingMap$Iter.advance()"], ["void", "org.mapdb.BTreeMap$DescendingMap$Iter.remove()"], ["org.mapdb.BTreeMap$DescendingMap", "org.mapdb.BTreeMap$DescendingMap(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.containsKey(java.lang.Object)"], ["V", "org.mapdb.BTreeMap$DescendingMap.get(java.lang.Object)"], ["V", "org.mapdb.BTreeMap$DescendingMap.put(K, V)"], ["V", "org.mapdb.BTreeMap$DescendingMap.remove(java.lang.Object)"], ["int", "org.mapdb.BTreeMap$DescendingMap.size()"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.isEmpty()"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.containsValue(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$DescendingMap.clear()"], ["V", "org.mapdb.BTreeMap$DescendingMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.replace(K, V, V)"], ["V", "org.mapdb.BTreeMap$DescendingMap.replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMap$DescendingMap.comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.higherEntry(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.ceilingEntry(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.floorEntry(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.lowerEntry(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.higherKey(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.firstKey()"], ["K", "org.mapdb.BTreeMap$DescendingMap.lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.pollLastEntry()"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.subMap(K, boolean, K, boolean)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.headMap(K, boolean)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.tailMap(K, boolean)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.subMap(K, K)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.headMap(K)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.tailMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap$DescendingMap.entrySet()"], ["java.util.Set", "org.mapdb.BTreeMap$DescendingMap.keySet()"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$DescendingMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$DescendingMap.headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$DescendingMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$DescendingMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$DescendingMap.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$DescendingMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$DescendingMap.descendingMap()"], ["boolean", "org.mapdb.BTreeMap$DirNode.isLeaf()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$DirNode.keys()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$DirNode.vals()"], ["java.lang.Object", "org.mapdb.BTreeMap$DirNode.highKey()"], ["long[]", "org.mapdb.BTreeMap$DirNode.child()"], ["long", "org.mapdb.BTreeMap$DirNode.next()"], ["java.lang.String", "org.mapdb.BTreeMap$DirNode.toString()"], ["java.util.Iterator<java.util.Map$Entry<K1, V1>>", "org.mapdb.BTreeMap$EntrySet.iterator()"], ["boolean", "org.mapdb.BTreeMap$EntrySet.contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$EntrySet.remove(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$EntrySet.isEmpty()"], ["int", "org.mapdb.BTreeMap$EntrySet.size()"], ["void", "org.mapdb.BTreeMap$EntrySet.clear()"], ["boolean", "org.mapdb.BTreeMap$EntrySet.equals(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.BTreeMap$EntrySet.toArray()"], ["<T> T[]", "org.mapdb.BTreeMap$EntrySet.toArray(T[])"], ["int", "org.mapdb.BTreeMap$KeySet.size()"], ["long", "org.mapdb.BTreeMap$KeySet.sizeLong()"], ["boolean", "org.mapdb.BTreeMap$KeySet.isEmpty()"], ["boolean", "org.mapdb.BTreeMap$KeySet.contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$KeySet.remove(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$KeySet.clear()"], ["E", "org.mapdb.BTreeMap$KeySet.lower(E)"], ["E", "org.mapdb.BTreeMap$KeySet.floor(E)"], ["E", "org.mapdb.BTreeMap$KeySet.ceiling(E)"], ["E", "org.mapdb.BTreeMap$KeySet.higher(E)"], ["java.util.Comparator<? super E>", "org.mapdb.BTreeMap$KeySet.comparator()"], ["E", "org.mapdb.BTreeMap$KeySet.first()"], ["E", "org.mapdb.BTreeMap$KeySet.last()"], ["E", "org.mapdb.BTreeMap$KeySet.pollFirst()"], ["E", "org.mapdb.BTreeMap$KeySet.pollLast()"], ["boolean", "org.mapdb.BTreeMap$KeySet.equals(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.BTreeMap$KeySet.toArray()"], ["<T> T[]", "org.mapdb.BTreeMap$KeySet.toArray(T[])"], ["boolean", "org.mapdb.BTreeMap$KeySet.add(E)"], ["java.util.SortedSet", "org.mapdb.BTreeMap$KeySet.tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.mapdb.BTreeMap$KeySet.headSet(java.lang.Object)"], ["java.util.SortedSet", "org.mapdb.BTreeMap$KeySet.subSet(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$LeafNode.isLeaf()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$LeafNode.keys()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$LeafNode.vals()"], ["java.lang.Object", "org.mapdb.BTreeMap$LeafNode.highKey()"], ["long[]", "org.mapdb.BTreeMap$LeafNode.child()"], ["long", "org.mapdb.BTreeMap$LeafNode.next()"], ["java.lang.String", "org.mapdb.BTreeMap$LeafNode.toString()"], ["org.mapdb.BTreeMap$NodeSerializer", "org.mapdb.BTreeMap$NodeSerializer(boolean, org.mapdb.BTreeKeySerializer, org.mapdb.Serializer, java.util.Comparator, int)"], ["void", "org.mapdb.BTreeMap$NodeSerializer.serialize(java.io.DataOutput, org.mapdb.BTreeMap$BNode)"], ["org.mapdb.BTreeMap$BNode", "org.mapdb.BTreeMap$NodeSerializer.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.BTreeMap$NodeSerializer.fixedSize()"], ["java.lang.Object", "org.mapdb.BTreeMap$NodeSerializer.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.BTreeMap$NodeSerializer.serialize(java.io.DataOutput, java.lang.Object)"], ["org.mapdb.BTreeMap$SubMap", "org.mapdb.BTreeMap$SubMap(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMap$SubMap.containsKey(java.lang.Object)"], ["V", "org.mapdb.BTreeMap$SubMap.get(java.lang.Object)"], ["V", "org.mapdb.BTreeMap$SubMap.put(K, V)"], ["V", "org.mapdb.BTreeMap$SubMap.remove(java.lang.Object)"], ["int", "org.mapdb.BTreeMap$SubMap.size()"], ["long", "org.mapdb.BTreeMap$SubMap.sizeLong()"], ["boolean", "org.mapdb.BTreeMap$SubMap.isEmpty()"], ["boolean", "org.mapdb.BTreeMap$SubMap.containsValue(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$SubMap.clear()"], ["V", "org.mapdb.BTreeMap$SubMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMap$SubMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$SubMap.replace(K, V, V)"], ["V", "org.mapdb.BTreeMap$SubMap.replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMap$SubMap.comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.lowerEntry(K)"], ["K", "org.mapdb.BTreeMap$SubMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.floorEntry(K)"], ["K", "org.mapdb.BTreeMap$SubMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.ceilingEntry(K)"], ["K", "org.mapdb.BTreeMap$SubMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.higherEntry(K)"], ["K", "org.mapdb.BTreeMap$SubMap.higherKey(K)"], ["K", "org.mapdb.BTreeMap$SubMap.firstKey()"], ["K", "org.mapdb.BTreeMap$SubMap.lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.pollLastEntry()"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.subMap(K, boolean, K, boolean)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.headMap(K, boolean)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.tailMap(K, boolean)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.subMap(K, K)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.headMap(K)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.tailMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap$SubMap.descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap$SubMap.entrySet()"], ["java.util.Set", "org.mapdb.BTreeMap$SubMap.keySet()"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$SubMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$SubMap.headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$SubMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$SubMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$SubMap.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$SubMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$SubMap.descendingMap()"], ["org.mapdb.BTreeMap$ValRef", "org.mapdb.BTreeMap$ValRef(long)"], ["boolean", "org.mapdb.BTreeMap$ValRef.equals(java.lang.Object)"], ["int", "org.mapdb.BTreeMap$ValRef.hashCode()"], ["java.lang.String", "org.mapdb.BTreeMap$ValRef.toString()"], ["boolean", "org.mapdb.BTreeMap$Values.isEmpty()"], ["int", "org.mapdb.BTreeMap$Values.size()"], ["boolean", "org.mapdb.BTreeMap$Values.contains(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$Values.clear()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$Values.toArray()"], ["<T> T[]", "org.mapdb.BTreeMap$Values.toArray(T[])"], ["org.mapdb.BTreeMap", "org.mapdb.BTreeMap(org.mapdb.Engine, long, int, boolean, long, org.mapdb.BTreeKeySerializer<K>, org.mapdb.Serializer<V>, java.util.Comparator<K>, int, boolean)"], ["V", "org.mapdb.BTreeMap.get(java.lang.Object)"], ["V", "org.mapdb.BTreeMap.put(K, V)"], ["V", "org.mapdb.BTreeMap.remove(java.lang.Object)"], ["void", "org.mapdb.BTreeMap.clear()"], ["boolean", "org.mapdb.BTreeMap.isEmpty()"], ["int", "org.mapdb.BTreeMap.size()"], ["long", "org.mapdb.BTreeMap.sizeLong()"], ["V", "org.mapdb.BTreeMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.replace(K, V, V)"], ["V", "org.mapdb.BTreeMap.replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMap.comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.pollLastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.lowerEntry(K)"], ["K", "org.mapdb.BTreeMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.floorEntry(K)"], ["K", "org.mapdb.BTreeMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.ceilingEntry(K)"], ["K", "org.mapdb.BTreeMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.higherEntry(K)"], ["K", "org.mapdb.BTreeMap.higherKey(K)"], ["boolean", "org.mapdb.BTreeMap.containsKey(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.containsValue(java.lang.Object)"], ["K", "org.mapdb.BTreeMap.firstKey()"], ["K", "org.mapdb.BTreeMap.lastKey()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.subMap(K, boolean, K, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.headMap(K, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.tailMap(K, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.subMap(K, K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.headMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.tailMap(K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.entrySet()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.descendingMap()"], ["java.util.NavigableMap<K, V>", "org.mapdb.BTreeMap.snapshot()"], ["void", "org.mapdb.BTreeMap.modificationListenerAdd(org.mapdb.Bind$MapListener<K, V>)"], ["void", "org.mapdb.BTreeMap.modificationListenerRemove(org.mapdb.Bind$MapListener<K, V>)"], ["void", "org.mapdb.BTreeMap.close()"], ["org.mapdb.Engine", "org.mapdb.BTreeMap.getEngine()"], ["void", "org.mapdb.BTreeMap.printTreeStructure()"], ["java.util.Set", "org.mapdb.BTreeMap.keySet()"], ["java.util.SortedMap", "org.mapdb.BTreeMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.descendingMap()"], ["void", "org.mapdb.Bind$1.update(K, V, V)"], ["void", "org.mapdb.Bind$2.update(K, V, V)"], ["void", "org.mapdb.Bind$3.update(K, V, V)"], ["void", "org.mapdb.Bind$4.update(K, V, V)"], ["void", "org.mapdb.Bind$5.update(K, V, V)"], ["void", "org.mapdb.Bind$6.update(K, V, V)"], ["V", "org.mapdb.Bind$7.run(K, V)"], ["V", "org.mapdb.Bind$8.run(K, V)"], ["void", "org.mapdb.Bind$9.update(K, V, V)"], ["<K, V> void", "org.mapdb.Bind.size(org.mapdb.Bind$MapWithModificationListener<K, V>, org.mapdb.Atomic$Long)"], ["<K, V, V2> void", "org.mapdb.Bind.secondaryValue(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<K, V2>, org.mapdb.Fun$Function2<V2, K, V>)"], ["<K, V, V2> void", "org.mapdb.Bind.secondaryValues(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K, V2>>, org.mapdb.Fun$Function2<V2[], K, V>)"], ["<K, V, K2> void", "org.mapdb.Bind.secondaryKey(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K2, K>>, org.mapdb.Fun$Function2<K2, K, V>)"], ["<K, V, K2> void", "org.mapdb.Bind.secondaryKey(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<K2, K>, org.mapdb.Fun$Function2<K2, K, V>)"], ["<K, V, K2> void", "org.mapdb.Bind.secondaryKeys(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K2, K>>, org.mapdb.Fun$Function2<K2[], K, V>)"], ["<K, V> void", "org.mapdb.Bind.mapInverse(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<V, K>>)"], ["<K, V> void", "org.mapdb.Bind.mapInverse(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<V, K>)"], ["<K, V, C> void", "org.mapdb.Bind.histogram(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.concurrent.ConcurrentMap<C, java.lang.Long>, org.mapdb.Fun$Function2<C, K, V>)"], ["org.mapdb.Caches$HardRef", "org.mapdb.Caches$HardRef(org.mapdb.Engine, int, boolean)"], ["<A> A", "org.mapdb.Caches$HardRef.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$HardRef.update(long, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$HardRef.delete(long, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.Caches$HardRef.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["org.mapdb.Caches$HashTable", "org.mapdb.Caches$HashTable(org.mapdb.Engine, int, boolean)"], ["<A> long", "org.mapdb.Caches$HashTable.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.Caches$HashTable.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$HashTable.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.Caches$HashTable.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$HashTable.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.Caches$HashTable.close()"], ["void", "org.mapdb.Caches$HashTable.rollback()"], ["void", "org.mapdb.Caches$HashTable.clearCache()"], ["org.mapdb.Caches$LRU", "org.mapdb.Caches$LRU(org.mapdb.Engine, int, boolean)"], ["org.mapdb.Caches$LRU", "org.mapdb.Caches$LRU(org.mapdb.Engine, org.mapdb.LongMap<java.lang.Object>, boolean)"], ["<A> long", "org.mapdb.Caches$LRU.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.Caches$LRU.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$LRU.update(long, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$LRU.delete(long, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.Caches$LRU.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.Caches$LRU.close()"], ["void", "org.mapdb.Caches$LRU.rollback()"], ["void", "org.mapdb.Caches$LRU.clearCache()"], ["void", "org.mapdb.Caches$WeakSoftRef$1.run()"], ["org.mapdb.Caches$WeakSoftRef$CacheSoftItem", "org.mapdb.Caches$WeakSoftRef$CacheSoftItem(A, java.lang.ref.ReferenceQueue<A>, long)"], ["long", "org.mapdb.Caches$WeakSoftRef$CacheSoftItem.getRecid()"], ["org.mapdb.Caches$WeakSoftRef$CacheWeakItem", "org.mapdb.Caches$WeakSoftRef$CacheWeakItem(A, java.lang.ref.ReferenceQueue<A>, long)"], ["long", "org.mapdb.Caches$WeakSoftRef$CacheWeakItem.getRecid()"], ["org.mapdb.Caches$WeakSoftRef", "org.mapdb.Caches$WeakSoftRef(org.mapdb.Engine, boolean, boolean)"], ["<A> long", "org.mapdb.Caches$WeakSoftRef.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.Caches$WeakSoftRef.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$WeakSoftRef.update(long, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$WeakSoftRef.delete(long, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.Caches$WeakSoftRef.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.Caches$WeakSoftRef.close()"], ["void", "org.mapdb.Caches$WeakSoftRef.rollback()"], ["void", "org.mapdb.Caches$WeakSoftRef.clearCache()"], ["org.mapdb.CompressLZF", "org.mapdb.CompressLZF()"], ["int", "org.mapdb.CompressLZF.compress(byte[], int, byte[], int)"], ["void", "org.mapdb.CompressLZF.expand(java.io.DataInput, byte[], int, int)"], ["void", "org.mapdb.CompressLZF.expand(java.nio.ByteBuffer, int, byte[], int, int)"], ["int", "org.mapdb.DB$1.compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker(org.mapdb.DB, java.lang.String)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.nodeSize(int)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.valuesOutsideNodesEnable()"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.counterEnable()"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.keySerializer(org.mapdb.BTreeKeySerializer<?>)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.keySerializerWrap(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.valueSerializer(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.comparator(java.util.Comparator<?>)"], ["<K, V> org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.pumpSource(java.util.Iterator<K>, org.mapdb.Fun$Function1<V, K>)"], ["<K, V> org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.pumpSource(java.util.Iterator<org.mapdb.Fun$Tuple2<K, V>>)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.pumpPresort(int)"], ["<K> org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.pumpIgnoreDuplicates()"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$BTreeMapMaker.make()"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$BTreeMapMaker.makeOrGet()"], ["<V> org.mapdb.BTreeMap<java.lang.String, V>", "org.mapdb.DB$BTreeMapMaker.makeStringMap()"], ["<V> org.mapdb.BTreeMap<java.lang.Long, V>", "org.mapdb.DB$BTreeMapMaker.makeLongMap()"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker(org.mapdb.DB, java.lang.String)"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.nodeSize(int)"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.counterEnable()"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.serializer(org.mapdb.BTreeKeySerializer<?>)"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.comparator(java.util.Comparator<?>)"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.pumpSource(java.util.Iterator<?>)"], ["<K> org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.pumpIgnoreDuplicates()"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.pumpPresort(int)"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DB$BTreeSetMaker.make()"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DB$BTreeSetMaker.makeOrGet()"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker(org.mapdb.DB, java.lang.String)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.counterEnable()"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.keySerializer(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.valueSerializer(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireMaxSize(long)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireAfterWrite(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireAfterWrite(long)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireAfterAccess(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireAfterAccess(long)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireStoreSize(double)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.valueCreator(org.mapdb.Fun$Function1<?, ?>)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.hasher(org.mapdb.Hasher<?>)"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HTreeMapMaker.make()"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HTreeMapMaker.makeOrGet()"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker(org.mapdb.DB, java.lang.String)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.counterEnable()"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.serializer(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireMaxSize(long)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireStoreSize(double)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireAfterWrite(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireAfterWrite(long)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireAfterAccess(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireAfterAccess(long)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.hasher(org.mapdb.Hasher<?>)"], ["<K> java.util.Set<K>", "org.mapdb.DB$HTreeSetMaker.make()"], ["<K> java.util.Set<K>", "org.mapdb.DB$HTreeSetMaker.makeOrGet()"], ["org.mapdb.DB$IdentityWrapper", "org.mapdb.DB$IdentityWrapper(java.lang.Object)"], ["int", "org.mapdb.DB$IdentityWrapper.hashCode()"], ["boolean", "org.mapdb.DB$IdentityWrapper.equals(java.lang.Object)"], ["org.mapdb.DB", "org.mapdb.DB(org.mapdb.Engine)"], ["org.mapdb.DB", "org.mapdb.DB(org.mapdb.Engine, boolean, boolean)"], ["<A> A", "org.mapdb.DB.catGet(java.lang.String, A)"], ["<A> A", "org.mapdb.DB.catGet(java.lang.String)"], ["<A> A", "org.mapdb.DB.catPut(java.lang.String, A)"], ["<A> A", "org.mapdb.DB.catPut(java.lang.String, A, A)"], ["java.lang.String", "org.mapdb.DB.getNameForObject(java.lang.Object)"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DB.getHashMap(java.lang.String)"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DB.getHashMap(java.lang.String, org.mapdb.Fun$Function1<V, K>)"], ["<V> V", "org.mapdb.DB.namedPut(java.lang.String, java.lang.Object)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB.createHashMap(java.lang.String)"], ["<K> java.util.Set<K>", "org.mapdb.DB.getHashSet(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.DB$HTreeSetMaker createHashSet(java.lang.String)"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.DB.getTreeMap(java.lang.String)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB.createTreeMap(java.lang.String)"], ["java.util.SortedMap<java.lang.String, java.lang.Object>", "org.mapdb.DB.getCatalog()"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DB.getTreeSet(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.DB$BTreeSetMaker createTreeSet(java.lang.String)"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DB.createTreeSet(org.mapdb.DB$BTreeSetMaker)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.getQueue(java.lang.String)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.createQueue(java.lang.String, org.mapdb.Serializer<E>, boolean)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.getStack(java.lang.String)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.createStack(java.lang.String, org.mapdb.Serializer<E>, boolean)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.getCircularQueue(java.lang.String)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.createCircularQueue(java.lang.String, org.mapdb.Serializer<E>, long)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Long createAtomicLong(java.lang.String, long)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Long getAtomicLong(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Integer createAtomicInteger(java.lang.String, int)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Integer getAtomicInteger(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Boolean createAtomicBoolean(java.lang.String, boolean)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Boolean getAtomicBoolean(java.lang.String)"], ["void", "org.mapdb.DB.checkShouldCreate(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$String createAtomicString(java.lang.String, java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$String getAtomicString(java.lang.String)"], ["<E> org.mapdb.Atomic$Var<E>", "org.mapdb.DB.createAtomicVar(java.lang.String, E, org.mapdb.Serializer<E>)"], ["<E> org.mapdb.Atomic$Var<E>", "org.mapdb.DB.getAtomicVar(java.lang.String)"], ["<E> E", "org.mapdb.DB.get(java.lang.String)"], ["synchronized", "org.mapdb.DB.boolean exists(java.lang.String)"], ["synchronized", "org.mapdb.DB.void delete(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.mapdb.DB.getAll()"], ["synchronized", "org.mapdb.DB.void rename(java.lang.String, java.lang.String)"], ["void", "org.mapdb.DB.checkNameNotExists(java.lang.String)"], ["synchronized", "org.mapdb.DB.void close()"], ["java.lang.Object", "org.mapdb.DB.getFromWeakCollection(java.lang.String)"], ["void", "org.mapdb.DB.checkNotClosed()"], ["synchronized", "org.mapdb.DB.boolean isClosed()"], ["synchronized", "org.mapdb.DB.void commit()"], ["synchronized", "org.mapdb.DB.void rollback()"], ["synchronized", "org.mapdb.DB.void compact()"], ["synchronized", "org.mapdb.DB.org.mapdb.DB snapshot()"], ["org.mapdb.Serializer", "org.mapdb.DB.getDefaultSerializer()"], ["org.mapdb.Engine", "org.mapdb.DB.getEngine()"], ["void", "org.mapdb.DB.checkType(java.lang.String, java.lang.String)"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newHeapDB()"], ["DBMakerT", "org.mapdb.DBMaker._newHeapDB()"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newMemoryDB()"], ["DBMakerT", "org.mapdb.DBMaker._newMemoryDB()"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newMemoryDirectDB()"], ["DBMakerT", "org.mapdb.DBMaker._newMemoryDirectDB()"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.DBMaker.newTempTreeMap()"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DBMaker.newTempHashMap()"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DBMaker.newTempTreeSet()"], ["<K> java.util.Set<K>", "org.mapdb.DBMaker.newTempHashSet()"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newTempFileDB()"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DBMaker.newCacheDirect(double)"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DBMaker.newCache(double)"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newFileDB(java.io.File)"], ["DBMakerT", "org.mapdb.DBMaker._newFileDB(java.io.File)"], ["DBMakerT", "org.mapdb.DBMaker.transactionDisable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheDisable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheHardRefEnable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheWeakRefEnable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheSoftRefEnable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheLRUEnable()"], ["DBMakerT", "org.mapdb.DBMaker.mmapFileEnable()"], ["DBMakerT", "org.mapdb.DBMaker.mmapFileCleanerHackDisable()"], ["DBMakerT", "org.mapdb.DBMaker.mmapFileEnablePartial()"], ["DBMakerT", "org.mapdb.DBMaker.mmapFileEnableIfSupported()"], ["DBMakerT", "org.mapdb.DBMaker.cacheSize(int)"], ["DBMakerT", "org.mapdb.DBMaker.snapshotEnable()"], ["DBMakerT", "org.mapdb.DBMaker.asyncWriteEnable()"], ["DBMakerT", "org.mapdb.DBMaker.asyncWriteFlushDelay(int)"], ["DBMakerT", "org.mapdb.DBMaker.asyncWriteQueueSize(int)"], ["DBMakerT", "org.mapdb.DBMaker.deleteFilesAfterClose()"], ["DBMakerT", "org.mapdb.DBMaker.closeOnJvmShutdown()"], ["DBMakerT", "org.mapdb.DBMaker.compressionEnable()"], ["DBMakerT", "org.mapdb.DBMaker.encryptionEnable(java.lang.String)"], ["DBMakerT", "org.mapdb.DBMaker.encryptionEnable(byte[])"], ["DBMakerT", "org.mapdb.DBMaker.checksumEnable()"], ["DBMakerT", "org.mapdb.DBMaker.strictDBGet()"], ["DBMakerT", "org.mapdb.DBMaker.readOnly()"], ["DBMakerT", "org.mapdb.DBMaker.freeSpaceReclaimQ(int)"], ["DBMakerT", "org.mapdb.DBMaker.commitFileSyncDisable()"], ["DBMakerT", "org.mapdb.DBMaker.sizeLimit(double)"], ["org.mapdb.DB", "org.mapdb.DBMaker.make()"], ["org.mapdb.TxMaker", "org.mapdb.DBMaker.makeTxMaker()"], ["org.mapdb.Engine", "org.mapdb.DBMaker.makeEngine()"], ["org.mapdb.DataInput2", "org.mapdb.DataInput2(java.nio.ByteBuffer, int)"], ["org.mapdb.DataInput2", "org.mapdb.DataInput2(byte[])"], ["void", "org.mapdb.DataInput2.readFully(byte[])"], ["void", "org.mapdb.DataInput2.readFully(byte[], int, int)"], ["int", "org.mapdb.DataInput2.skipBytes(int)"], ["boolean", "org.mapdb.DataInput2.readBoolean()"], ["byte", "org.mapdb.DataInput2.readByte()"], ["int", "org.mapdb.DataInput2.readUnsignedByte()"], ["short", "org.mapdb.DataInput2.readShort()"], ["int", "org.mapdb.DataInput2.readUnsignedShort()"], ["char", "org.mapdb.DataInput2.readChar()"], ["int", "org.mapdb.DataInput2.readInt()"], ["long", "org.mapdb.DataInput2.readLong()"], ["float", "org.mapdb.DataInput2.readFloat()"], ["double", "org.mapdb.DataInput2.readDouble()"], ["java.lang.String", "org.mapdb.DataInput2.readLine()"], ["java.lang.String", "org.mapdb.DataInput2.readUTF()"], ["int", "org.mapdb.DataInput2.read()"], ["int", "org.mapdb.DataInput2.unpackInt(java.io.DataInput)"], ["long", "org.mapdb.DataInput2.unpackLong(java.io.DataInput)"], ["org.mapdb.DataOutput2", "org.mapdb.DataOutput2()"], ["org.mapdb.DataOutput2", "org.mapdb.DataOutput2(byte[])"], ["byte[]", "org.mapdb.DataOutput2.copyBytes()"], ["void", "org.mapdb.DataOutput2.ensureAvail(int)"], ["void", "org.mapdb.DataOutput2.write(int)"], ["void", "org.mapdb.DataOutput2.write(byte[])"], ["void", "org.mapdb.DataOutput2.write(byte[], int, int)"], ["void", "org.mapdb.DataOutput2.writeBoolean(boolean)"], ["void", "org.mapdb.DataOutput2.writeByte(int)"], ["void", "org.mapdb.DataOutput2.writeShort(int)"], ["void", "org.mapdb.DataOutput2.writeChar(int)"], ["void", "org.mapdb.DataOutput2.writeInt(int)"], ["void", "org.mapdb.DataOutput2.writeLong(long)"], ["void", "org.mapdb.DataOutput2.writeFloat(float)"], ["void", "org.mapdb.DataOutput2.writeDouble(double)"], ["void", "org.mapdb.DataOutput2.writeBytes(java.lang.String)"], ["void", "org.mapdb.DataOutput2.writeChars(java.lang.String)"], ["void", "org.mapdb.DataOutput2.writeUTF(java.lang.String)"], ["void", "org.mapdb.DataOutput2.packLong(java.io.DataOutput, long)"], ["void", "org.mapdb.DataOutput2.packInt(java.io.DataOutput, int)"], ["org.mapdb.EncryptionXTEA", "org.mapdb.EncryptionXTEA(byte[])"], ["void", "org.mapdb.EncryptionXTEA.encrypt(byte[], int, int)"], ["void", "org.mapdb.EncryptionXTEA.decrypt(byte[], int, int)"], ["byte[]", "org.mapdb.EncryptionXTEA.getHash(byte[])"], ["long", "org.mapdb.EngineWrapper$1.preallocate()"], ["void", "org.mapdb.EngineWrapper$1.preallocate(long[])"], ["<A> long", "org.mapdb.EngineWrapper$1.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.EngineWrapper$1.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$1.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper$1.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$1.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.EngineWrapper$1.close()"], ["boolean", "org.mapdb.EngineWrapper$1.isClosed()"], ["void", "org.mapdb.EngineWrapper$1.commit()"], ["void", "org.mapdb.EngineWrapper$1.rollback()"], ["boolean", "org.mapdb.EngineWrapper$1.isReadOnly()"], ["boolean", "org.mapdb.EngineWrapper$1.canRollback()"], ["boolean", "org.mapdb.EngineWrapper$1.canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.EngineWrapper$1.snapshot()"], ["void", "org.mapdb.EngineWrapper$1.clearCache()"], ["void", "org.mapdb.EngineWrapper$1.compact()"], ["org.mapdb.SerializerPojo", "org.mapdb.EngineWrapper$1.getSerializerPojo()"], ["void", "org.mapdb.EngineWrapper$1.closeListenerRegister(java.lang.Runnable)"], ["void", "org.mapdb.EngineWrapper$1.closeListenerUnregister(java.lang.Runnable)"], ["void", "org.mapdb.EngineWrapper$CloseOnJVMShutdown$1.run()"], ["org.mapdb.EngineWrapper$CloseOnJVMShutdown", "org.mapdb.EngineWrapper$CloseOnJVMShutdown(org.mapdb.Engine)"], ["void", "org.mapdb.EngineWrapper$CloseOnJVMShutdown.close()"], ["org.mapdb.EngineWrapper$ImmutabilityCheckEngine$Item", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine$Item(org.mapdb.Serializer, java.lang.Object)"], ["<A> A", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.get(long, org.mapdb.Serializer<A>)"], ["<A> long", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.put(A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.close()"], ["org.mapdb.EngineWrapper$ReadOnlyEngine", "org.mapdb.EngineWrapper$ReadOnlyEngine(org.mapdb.Engine)"], ["long", "org.mapdb.EngineWrapper$ReadOnlyEngine.preallocate()"], ["void", "org.mapdb.EngineWrapper$ReadOnlyEngine.preallocate(long[])"], ["<A> boolean", "org.mapdb.EngineWrapper$ReadOnlyEngine.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> long", "org.mapdb.EngineWrapper$ReadOnlyEngine.put(A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$ReadOnlyEngine.update(long, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$ReadOnlyEngine.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.EngineWrapper$ReadOnlyEngine.commit()"], ["void", "org.mapdb.EngineWrapper$ReadOnlyEngine.rollback()"], ["boolean", "org.mapdb.EngineWrapper$ReadOnlyEngine.isReadOnly()"], ["boolean", "org.mapdb.EngineWrapper$ReadOnlyEngine.canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.EngineWrapper$ReadOnlyEngine.snapshot()"], ["<A> A", "org.mapdb.EngineWrapper$SerializerCheckEngineWrapper.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$SerializerCheckEngineWrapper.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper$SerializerCheckEngineWrapper.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$SerializerCheckEngineWrapper.delete(long, org.mapdb.Serializer<A>)"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.long preallocate()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void preallocate(long[])"], ["<A> long", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.delete(long, org.mapdb.Serializer<A>)"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void close()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.boolean isClosed()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void commit()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void rollback()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.boolean isReadOnly()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.boolean canSnapshot()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.org.mapdb.Engine snapshot()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void compact()"], ["long", "org.mapdb.EngineWrapper.preallocate()"], ["void", "org.mapdb.EngineWrapper.preallocate(long[])"], ["<A> long", "org.mapdb.EngineWrapper.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.EngineWrapper.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.EngineWrapper.close()"], ["boolean", "org.mapdb.EngineWrapper.isClosed()"], ["void", "org.mapdb.EngineWrapper.commit()"], ["void", "org.mapdb.EngineWrapper.rollback()"], ["boolean", "org.mapdb.EngineWrapper.isReadOnly()"], ["boolean", "org.mapdb.EngineWrapper.canRollback()"], ["boolean", "org.mapdb.EngineWrapper.canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.EngineWrapper.snapshot()"], ["void", "org.mapdb.EngineWrapper.clearCache()"], ["void", "org.mapdb.EngineWrapper.compact()"], ["org.mapdb.SerializerPojo", "org.mapdb.EngineWrapper.getSerializerPojo()"], ["void", "org.mapdb.EngineWrapper.closeListenerRegister(java.lang.Runnable)"], ["void", "org.mapdb.EngineWrapper.closeListenerUnregister(java.lang.Runnable)"], ["org.mapdb.Engine", "org.mapdb.EngineWrapper.getWrappedEngine()"], ["int", "org.mapdb.Fun$1.compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.mapdb.Fun$1.compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$10.compare(long[], long[])"], ["int", "org.mapdb.Fun$10.compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$11.compare(double[], double[])"], ["int", "org.mapdb.Fun$11.compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$12.compare(java.lang.Object[], java.lang.Object[])"], ["int", "org.mapdb.Fun$12.compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.Fun$13$1.hasNext()"], ["K1", "org.mapdb.Fun$13$1.next()"], ["void", "org.mapdb.Fun$13$1.remove()"], ["boolean", "org.mapdb.Fun$14$1.hasNext()"], ["C", "org.mapdb.Fun$14$1.next()"], ["void", "org.mapdb.Fun$14$1.remove()"], ["boolean", "org.mapdb.Fun$15$1.hasNext()"], ["D", "org.mapdb.Fun$15$1.next()"], ["void", "org.mapdb.Fun$15$1.remove()"], ["int", "org.mapdb.Fun$2.compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.mapdb.Fun$2.compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.mapdb.Fun$3.toString()"], ["int", "org.mapdb.Fun$3.compareTo(java.lang.Object)"], ["K", "org.mapdb.Fun$4.run(org.mapdb.Fun$Tuple2<K, V>)"], ["java.lang.Object", "org.mapdb.Fun$4.run(java.lang.Object)"], ["V", "org.mapdb.Fun$5.run(org.mapdb.Fun$Tuple2<K, V>)"], ["java.lang.Object", "org.mapdb.Fun$5.run(java.lang.Object)"], ["K", "org.mapdb.Fun$6.run(K)"], ["int", "org.mapdb.Fun$7.compare(byte[], byte[])"], ["int", "org.mapdb.Fun$7.compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$8.compare(char[], char[])"], ["int", "org.mapdb.Fun$8.compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$9.compare(int[], int[])"], ["int", "org.mapdb.Fun$9.compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$ArrayComparator", "org.mapdb.Fun$ArrayComparator(java.util.Comparator<?>[])"], ["int", "org.mapdb.Fun$ArrayComparator.compare(java.lang.Object[], java.lang.Object[])"], ["boolean", "org.mapdb.Fun$ArrayComparator.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$ArrayComparator.hashCode()"], ["int", "org.mapdb.Fun$ArrayComparator.compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple2", "org.mapdb.Fun$Tuple2(A, B)"], ["int", "org.mapdb.Fun$Tuple2.compareTo(org.mapdb.Fun$Tuple2<A, B>)"], ["boolean", "org.mapdb.Fun$Tuple2.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple2.hashCode()"], ["java.lang.String", "org.mapdb.Fun$Tuple2.toString()"], ["int", "org.mapdb.Fun$Tuple2.compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple2Comparator", "org.mapdb.Fun$Tuple2Comparator(java.util.Comparator<A>, java.util.Comparator<B>)"], ["int", "org.mapdb.Fun$Tuple2Comparator.compare(org.mapdb.Fun$Tuple2<A, B>, org.mapdb.Fun$Tuple2<A, B>)"], ["boolean", "org.mapdb.Fun$Tuple2Comparator.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple2Comparator.hashCode()"], ["int", "org.mapdb.Fun$Tuple2Comparator.compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple3", "org.mapdb.Fun$Tuple3(A, B, C)"], ["int", "org.mapdb.Fun$Tuple3.compareTo(org.mapdb.Fun$Tuple3<A, B, C>)"], ["java.lang.String", "org.mapdb.Fun$Tuple3.toString()"], ["boolean", "org.mapdb.Fun$Tuple3.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple3.hashCode()"], ["int", "org.mapdb.Fun$Tuple3.compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple3Comparator", "org.mapdb.Fun$Tuple3Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>)"], ["int", "org.mapdb.Fun$Tuple3Comparator.compare(org.mapdb.Fun$Tuple3<A, B, C>, org.mapdb.Fun$Tuple3<A, B, C>)"], ["boolean", "org.mapdb.Fun$Tuple3Comparator.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple3Comparator.hashCode()"], ["int", "org.mapdb.Fun$Tuple3Comparator.compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple4", "org.mapdb.Fun$Tuple4(A, B, C, D)"], ["int", "org.mapdb.Fun$Tuple4.compareTo(org.mapdb.Fun$Tuple4<A, B, C, D>)"], ["java.lang.String", "org.mapdb.Fun$Tuple4.toString()"], ["boolean", "org.mapdb.Fun$Tuple4.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple4.hashCode()"], ["int", "org.mapdb.Fun$Tuple4.compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple4Comparator", "org.mapdb.Fun$Tuple4Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>)"], ["int", "org.mapdb.Fun$Tuple4Comparator.compare(org.mapdb.Fun$Tuple4<A, B, C, D>, org.mapdb.Fun$Tuple4<A, B, C, D>)"], ["boolean", "org.mapdb.Fun$Tuple4Comparator.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple4Comparator.hashCode()"], ["int", "org.mapdb.Fun$Tuple4Comparator.compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple5", "org.mapdb.Fun$Tuple5(A, B, C, D, E)"], ["int", "org.mapdb.Fun$Tuple5.compareTo(org.mapdb.Fun$Tuple5<A, B, C, D, E>)"], ["java.lang.String", "org.mapdb.Fun$Tuple5.toString()"], ["boolean", "org.mapdb.Fun$Tuple5.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple5.hashCode()"], ["int", "org.mapdb.Fun$Tuple5.compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple5Comparator", "org.mapdb.Fun$Tuple5Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>)"], ["int", "org.mapdb.Fun$Tuple5Comparator.compare(org.mapdb.Fun$Tuple5<A, B, C, D, E>, org.mapdb.Fun$Tuple5<A, B, C, D, E>)"], ["boolean", "org.mapdb.Fun$Tuple5Comparator.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple5Comparator.hashCode()"], ["int", "org.mapdb.Fun$Tuple5Comparator.compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple6", "org.mapdb.Fun$Tuple6(A, B, C, D, E, F)"], ["int", "org.mapdb.Fun$Tuple6.compareTo(org.mapdb.Fun$Tuple6<A, B, C, D, E, F>)"], ["java.lang.String", "org.mapdb.Fun$Tuple6.toString()"], ["boolean", "org.mapdb.Fun$Tuple6.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple6.hashCode()"], ["int", "org.mapdb.Fun$Tuple6.compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple6Comparator", "org.mapdb.Fun$Tuple6Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>, java.util.Comparator<F>)"], ["int", "org.mapdb.Fun$Tuple6Comparator.compare(org.mapdb.Fun$Tuple6<A, B, C, D, E, F>, org.mapdb.Fun$Tuple6<A, B, C, D, E, F>)"], ["boolean", "org.mapdb.Fun$Tuple6Comparator.equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple6Comparator.hashCode()"], ["int", "org.mapdb.Fun$Tuple6Comparator.compare(java.lang.Object, java.lang.Object)"], ["<A> A", "org.mapdb.Fun.HI()"], ["<A, B> org.mapdb.Fun$Tuple2<A, B>", "org.mapdb.Fun.t2(A, B)"], ["<A, B, C> org.mapdb.Fun$Tuple3<A, B, C>", "org.mapdb.Fun.t3(A, B, C)"], ["<A, B, C, D> org.mapdb.Fun$Tuple4<A, B, C, D>", "org.mapdb.Fun.t4(A, B, C, D)"], ["<A, B, C, D, E> org.mapdb.Fun$Tuple5<A, B, C, D, E>", "org.mapdb.Fun.t5(A, B, C, D, E)"], ["<A, B, C, D, E, F> org.mapdb.Fun$Tuple6<A, B, C, D, E, F>", "org.mapdb.Fun.t6(A, B, C, D, E, F)"], ["boolean", "org.mapdb.Fun.eq(java.lang.Object, java.lang.Object)"], ["long", "org.mapdb.Fun.roundUp(long, long)"], ["<K, V> org.mapdb.Fun$Function1<K, org.mapdb.Fun$Tuple2<K, V>>", "org.mapdb.Fun.extractKey()"], ["<K, V> org.mapdb.Fun$Function1<V, org.mapdb.Fun$Tuple2<K, V>>", "org.mapdb.Fun.extractValue()"], ["<K> org.mapdb.Fun$Function1<K, K>", "org.mapdb.Fun.extractNoTransform()"], ["<K2, K1> java.lang.Iterable<K1>", "org.mapdb.Fun.filter(java.util.NavigableSet<org.mapdb.Fun$Tuple2<K2, K1>>, K2)"], ["<K2, K1> java.lang.Iterable<K1>", "org.mapdb.Fun.filter(java.util.NavigableSet<org.mapdb.Fun$Tuple2<K2, K1>>, K2, boolean, K2, boolean)"], ["<A, B, C> java.lang.Iterable<C>", "org.mapdb.Fun.filter(java.util.NavigableSet<org.mapdb.Fun$Tuple3<A, B, C>>, A, B)"], ["<A, B, C, D> java.lang.Iterable<D>", "org.mapdb.Fun.filter(java.util.NavigableSet<org.mapdb.Fun$Tuple4<A, B, C, D>>, A, B, C)"], ["void", "org.mapdb.HTreeMap$1.run()"], ["void", "org.mapdb.HTreeMap$2.serialize(java.io.DataOutput, org.mapdb.HTreeMap$LinkedNode<K, V>)"], ["org.mapdb.HTreeMap$LinkedNode<K, V>", "org.mapdb.HTreeMap$2.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.HTreeMap$2.fixedSize()"], ["java.lang.Object", "org.mapdb.HTreeMap$2.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.HTreeMap$2.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.HTreeMap$3.serialize(java.io.DataOutput, long[][])"], ["long[][]", "org.mapdb.HTreeMap$3.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.HTreeMap$3.fixedSize()"], ["java.lang.Object", "org.mapdb.HTreeMap$3.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.HTreeMap$3.serialize(java.io.DataOutput, java.lang.Object)"], ["int", "org.mapdb.HTreeMap$4.size()"], ["boolean", "org.mapdb.HTreeMap$4.isEmpty()"], ["boolean", "org.mapdb.HTreeMap$4.contains(java.lang.Object)"], ["int", "org.mapdb.HTreeMap$5.size()"], ["boolean", "org.mapdb.HTreeMap$5.isEmpty()"], ["boolean", "org.mapdb.HTreeMap$5.contains(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.HTreeMap$5.iterator()"], ["boolean", "org.mapdb.HTreeMap$5.add(java.util.Map$Entry<K, V>)"], ["boolean", "org.mapdb.HTreeMap$5.remove(java.lang.Object)"], ["void", "org.mapdb.HTreeMap$5.clear()"], ["boolean", "org.mapdb.HTreeMap$5.add(java.lang.Object)"], ["K", "org.mapdb.HTreeMap$Entry2.getKey()"], ["V", "org.mapdb.HTreeMap$Entry2.getValue()"], ["V", "org.mapdb.HTreeMap$Entry2.setValue(V)"], ["boolean", "org.mapdb.HTreeMap$Entry2.equals(java.lang.Object)"], ["int", "org.mapdb.HTreeMap$Entry2.hashCode()"], ["java.util.Map$Entry<K, V>", "org.mapdb.HTreeMap$EntryIterator.next()"], ["java.lang.Object", "org.mapdb.HTreeMap$EntryIterator.next()"], ["void", "org.mapdb.HTreeMap$ExpireLinkNode$1.serialize(java.io.DataOutput, org.mapdb.HTreeMap$ExpireLinkNode)"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode$1.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.HTreeMap$ExpireLinkNode$1.fixedSize()"], ["java.lang.Object", "org.mapdb.HTreeMap$ExpireLinkNode$1.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.HTreeMap$ExpireLinkNode$1.serialize(java.io.DataOutput, java.lang.Object)"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode(long, long, long, long, int)"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode.copyNext(long)"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode.copyPrev(long)"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode.copyTime(long)"], ["org.mapdb.HTreeMap$ExpireRunnable", "org.mapdb.HTreeMap$ExpireRunnable(org.mapdb.HTreeMap)"], ["void", "org.mapdb.HTreeMap$ExpireRunnable.run()"], ["void", "org.mapdb.HTreeMap$HashIterator.remove()"], ["boolean", "org.mapdb.HTreeMap$HashIterator.hasNext()"], ["K", "org.mapdb.HTreeMap$KeyIterator.next()"], ["org.mapdb.HTreeMap$KeySet", "org.mapdb.HTreeMap$KeySet(org.mapdb.HTreeMap)"], ["int", "org.mapdb.HTreeMap$KeySet.size()"], ["long", "org.mapdb.HTreeMap$KeySet.sizeLong()"], ["boolean", "org.mapdb.HTreeMap$KeySet.isEmpty()"], ["boolean", "org.mapdb.HTreeMap$KeySet.contains(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$KeySet.add(K)"], ["boolean", "org.mapdb.HTreeMap$KeySet.remove(java.lang.Object)"], ["void", "org.mapdb.HTreeMap$KeySet.clear()"], ["org.mapdb.HTreeMap<K, V>", "org.mapdb.HTreeMap$KeySet.parent()"], ["int", "org.mapdb.HTreeMap$KeySet.hashCode()"], ["org.mapdb.HTreeMap$LinkedNode", "org.mapdb.HTreeMap$LinkedNode(long, long, K, V)"], ["V", "org.mapdb.HTreeMap$ValueIterator.next()"], ["org.mapdb.HTreeMap", "org.mapdb.HTreeMap(org.mapdb.Engine, long, int, long[], org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, long, long, long, long, long, long[], long[], org.mapdb.Fun$Function1<V, K>, org.mapdb.Hasher, boolean)"], ["boolean", "org.mapdb.HTreeMap.containsKey(java.lang.Object)"], ["int", "org.mapdb.HTreeMap.size()"], ["long", "org.mapdb.HTreeMap.sizeLong()"], ["boolean", "org.mapdb.HTreeMap.isEmpty()"], ["V", "org.mapdb.HTreeMap.get(java.lang.Object)"], ["V", "org.mapdb.HTreeMap.getPeek(java.lang.Object)"], ["V", "org.mapdb.HTreeMap.put(K, V)"], ["V", "org.mapdb.HTreeMap.remove(java.lang.Object)"], ["void", "org.mapdb.HTreeMap.clear()"], ["boolean", "org.mapdb.HTreeMap.containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.HTreeMap.entrySet()"], ["V", "org.mapdb.HTreeMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.HTreeMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.replace(K, V, V)"], ["V", "org.mapdb.HTreeMap.replace(K, V)"], ["long", "org.mapdb.HTreeMap.getMaxExpireTime()"], ["long", "org.mapdb.HTreeMap.getMinExpireTime()"], ["java.util.Map<K, V>", "org.mapdb.HTreeMap.snapshot()"], ["void", "org.mapdb.HTreeMap.modificationListenerAdd(org.mapdb.Bind$MapListener<K, V>)"], ["void", "org.mapdb.HTreeMap.modificationListenerRemove(org.mapdb.Bind$MapListener<K, V>)"], ["void", "org.mapdb.HTreeMap.close()"], ["org.mapdb.Engine", "org.mapdb.HTreeMap.getEngine()"], ["int", "org.mapdb.Hasher$1.hashCode(java.lang.Object)"], ["boolean", "org.mapdb.Hasher$1.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$2.hashCode(byte[])"], ["boolean", "org.mapdb.Hasher$2.equals(byte[], byte[])"], ["boolean", "org.mapdb.Hasher$2.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$2.hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$3.hashCode(char[])"], ["boolean", "org.mapdb.Hasher$3.equals(char[], char[])"], ["boolean", "org.mapdb.Hasher$3.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$3.hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$4.hashCode(int[])"], ["boolean", "org.mapdb.Hasher$4.equals(int[], int[])"], ["boolean", "org.mapdb.Hasher$4.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$4.hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$5.hashCode(long[])"], ["boolean", "org.mapdb.Hasher$5.equals(long[], long[])"], ["boolean", "org.mapdb.Hasher$5.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$5.hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$6.hashCode(double[])"], ["boolean", "org.mapdb.Hasher$6.equals(double[], double[])"], ["boolean", "org.mapdb.Hasher$6.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$6.hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$7.hashCode(java.lang.Object[])"], ["boolean", "org.mapdb.Hasher$7.equals(java.lang.Object[], java.lang.Object[])"], ["boolean", "org.mapdb.Hasher$7.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$7.hashCode(java.lang.Object)"], ["boolean", "org.mapdb.LongConcurrentHashMap$HashIterator.hasNext()"], ["void", "org.mapdb.LongConcurrentHashMap$HashIterator.remove()"], ["java.lang.Long", "org.mapdb.LongConcurrentHashMap$KeyIterator.next()"], ["java.lang.Object", "org.mapdb.LongConcurrentHashMap$KeyIterator.next()"], ["boolean", "org.mapdb.LongConcurrentHashMap$MapIterator.moveToNext()"], ["long", "org.mapdb.LongConcurrentHashMap$MapIterator.key()"], ["V", "org.mapdb.LongConcurrentHashMap$MapIterator.value()"], ["V", "org.mapdb.LongConcurrentHashMap$ValueIterator.next()"], ["org.mapdb.LongConcurrentHashMap", "org.mapdb.LongConcurrentHashMap(int, float, int)"], ["org.mapdb.LongConcurrentHashMap", "org.mapdb.LongConcurrentHashMap(int)"], ["org.mapdb.LongConcurrentHashMap", "org.mapdb.LongConcurrentHashMap()"], ["boolean", "org.mapdb.LongConcurrentHashMap.isEmpty()"], ["int", "org.mapdb.LongConcurrentHashMap.size()"], ["V", "org.mapdb.LongConcurrentHashMap.get(long)"], ["boolean", "org.mapdb.LongConcurrentHashMap.containsKey(long)"], ["boolean", "org.mapdb.LongConcurrentHashMap.containsValue(java.lang.Object)"], ["V", "org.mapdb.LongConcurrentHashMap.put(long, V)"], ["V", "org.mapdb.LongConcurrentHashMap.putIfAbsent(long, V)"], ["V", "org.mapdb.LongConcurrentHashMap.remove(long)"], ["boolean", "org.mapdb.LongConcurrentHashMap.remove(long, java.lang.Object)"], ["boolean", "org.mapdb.LongConcurrentHashMap.replace(long, V, V)"], ["V", "org.mapdb.LongConcurrentHashMap.replace(long, V)"], ["void", "org.mapdb.LongConcurrentHashMap.clear()"], ["boolean", "org.mapdb.LongConcurrentLRUMap$1.hasNext()"], ["V", "org.mapdb.LongConcurrentLRUMap$1.next()"], ["void", "org.mapdb.LongConcurrentLRUMap$1.remove()"], ["boolean", "org.mapdb.LongConcurrentLRUMap$2.moveToNext()"], ["long", "org.mapdb.LongConcurrentLRUMap$2.key()"], ["V", "org.mapdb.LongConcurrentLRUMap$2.value()"], ["void", "org.mapdb.LongConcurrentLRUMap$2.remove()"], ["org.mapdb.LongConcurrentLRUMap$CacheEntry", "org.mapdb.LongConcurrentLRUMap$CacheEntry(long, V, long)"], ["int", "org.mapdb.LongConcurrentLRUMap$CacheEntry.compareTo(org.mapdb.LongConcurrentLRUMap$CacheEntry<V>)"], ["int", "org.mapdb.LongConcurrentLRUMap$CacheEntry.hashCode()"], ["boolean", "org.mapdb.LongConcurrentLRUMap$CacheEntry.equals(java.lang.Object)"], ["java.lang.String", "org.mapdb.LongConcurrentLRUMap$CacheEntry.toString()"], ["int", "org.mapdb.LongConcurrentLRUMap$CacheEntry.compareTo(java.lang.Object)"], ["org.mapdb.LongConcurrentLRUMap$PriorityQueue", "org.mapdb.LongConcurrentLRUMap$PriorityQueue(int)"], ["org.mapdb.LongConcurrentLRUMap$PriorityQueue", "org.mapdb.LongConcurrentLRUMap$PriorityQueue(int, boolean)"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.add(T)"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.insertWithOverflow(T)"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.top()"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.pop()"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.updateTop()"], ["int", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.size()"], ["void", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.clear()"], ["org.mapdb.LongConcurrentLRUMap", "org.mapdb.LongConcurrentLRUMap(int, int, int, int)"], ["org.mapdb.LongConcurrentLRUMap", "org.mapdb.LongConcurrentLRUMap(int, int)"], ["V", "org.mapdb.LongConcurrentLRUMap.get(long)"], ["boolean", "org.mapdb.LongConcurrentLRUMap.isEmpty()"], ["V", "org.mapdb.LongConcurrentLRUMap.remove(long)"], ["V", "org.mapdb.LongConcurrentLRUMap.put(long, V)"], ["int", "org.mapdb.LongConcurrentLRUMap.size()"], ["void", "org.mapdb.LongConcurrentLRUMap.clear()"], ["boolean", "org.mapdb.LongHashMap$AbstractMapIterator.hasNext()"], ["void", "org.mapdb.LongHashMap$AbstractMapIterator.remove()"], ["org.mapdb.LongHashMap$Entry", "org.mapdb.LongHashMap$Entry(long, int)"], ["boolean", "org.mapdb.LongHashMap$EntryIterator.moveToNext()"], ["long", "org.mapdb.LongHashMap$EntryIterator.key()"], ["V", "org.mapdb.LongHashMap$EntryIterator.value()"], ["V", "org.mapdb.LongHashMap$ValueIterator.next()"], ["org.mapdb.LongHashMap", "org.mapdb.LongHashMap()"], ["org.mapdb.LongHashMap", "org.mapdb.LongHashMap(int)"], ["org.mapdb.LongHashMap", "org.mapdb.LongHashMap(int, float)"], ["void", "org.mapdb.LongHashMap.clear()"], ["V", "org.mapdb.LongHashMap.get(long)"], ["boolean", "org.mapdb.LongHashMap.isEmpty()"], ["V", "org.mapdb.LongHashMap.put(long, V)"], ["V", "org.mapdb.LongHashMap.remove(long)"], ["int", "org.mapdb.LongHashMap.size()"], ["int", "org.mapdb.LongHashMap.longHash(long)"], ["int", "org.mapdb.LongHashMap.intHash(int)"], ["org.mapdb.LongMap", "org.mapdb.LongMap()"], ["java.lang.String", "org.mapdb.LongMap.toString()"], ["boolean", "org.mapdb.Pump$1.hasNext()"], ["java.lang.Object", "org.mapdb.Pump$1.next()"], ["void", "org.mapdb.Pump$1.remove()"], ["boolean", "org.mapdb.Pump$2.hasNext()"], ["E", "org.mapdb.Pump$2.next()"], ["void", "org.mapdb.Pump$2.remove()"], ["boolean", "org.mapdb.Pump$3.hasNext()"], ["E", "org.mapdb.Pump$3.next()"], ["void", "org.mapdb.Pump$3.remove()"], ["boolean", "org.mapdb.Pump$4.hasNext()"], ["E", "org.mapdb.Pump$4.next()"], ["void", "org.mapdb.Pump$4.remove()"], ["org.mapdb.Pump", "org.mapdb.Pump()"], ["<E> java.util.Iterator<E>", "org.mapdb.Pump.sort(java.util.Iterator<E>, boolean, int, java.util.Comparator, org.mapdb.Serializer)"], ["<E> java.util.Iterator<E>", "org.mapdb.Pump.sort(java.util.Comparator, boolean, java.util.Iterator...)"], ["<E> java.util.Iterator<E>", "org.mapdb.Pump.merge(java.util.Iterator...)"], ["<E, K, V> long", "org.mapdb.Pump.buildTreeMap(java.util.Iterator<E>, org.mapdb.Engine, org.mapdb.Fun$Function1<K, E>, org.mapdb.Fun$Function1<V, E>, boolean, int, boolean, long, org.mapdb.BTreeKeySerializer<K>, org.mapdb.Serializer<V>, java.util.Comparator)"], ["org.mapdb.Queues$CircularQueue", "org.mapdb.Queues$CircularQueue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, long, long)"], ["boolean", "org.mapdb.Queues$CircularQueue.add(java.lang.Object)"], ["void", "org.mapdb.Queues$CircularQueue.clear()"], ["E", "org.mapdb.Queues$CircularQueue.poll()"], ["E", "org.mapdb.Queues$CircularQueue.peek()"], ["org.mapdb.Queues$Queue", "org.mapdb.Queues$Queue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, long, boolean)"], ["boolean", "org.mapdb.Queues$Queue.add(E)"], ["org.mapdb.Queues$SimpleQueue$Node", "org.mapdb.Queues$SimpleQueue$Node(long, E)"], ["boolean", "org.mapdb.Queues$SimpleQueue$Node.equals(java.lang.Object)"], ["int", "org.mapdb.Queues$SimpleQueue$Node.hashCode()"], ["org.mapdb.Queues$SimpleQueue$NodeSerializer", "org.mapdb.Queues$SimpleQueue$NodeSerializer(org.mapdb.Serializer<E>)"], ["void", "org.mapdb.Queues$SimpleQueue$NodeSerializer.serialize(java.io.DataOutput, org.mapdb.Queues$SimpleQueue$Node<E>)"], ["int", "org.mapdb.Queues$SimpleQueue$NodeSerializer.fixedSize()"], ["java.lang.Object", "org.mapdb.Queues$SimpleQueue$NodeSerializer.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Queues$SimpleQueue$NodeSerializer.serialize(java.io.DataOutput, java.lang.Object)"], ["org.mapdb.Queues$SimpleQueue", "org.mapdb.Queues$SimpleQueue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, boolean)"], ["void", "org.mapdb.Queues$SimpleQueue.close()"], ["E", "org.mapdb.Queues$SimpleQueue.peek()"], ["E", "org.mapdb.Queues$SimpleQueue.poll()"], ["void", "org.mapdb.Queues$SimpleQueue.clear()"], ["E", "org.mapdb.Queues$SimpleQueue.remove()"], ["E", "org.mapdb.Queues$SimpleQueue.element()"], ["boolean", "org.mapdb.Queues$SimpleQueue.offer(E)"], ["void", "org.mapdb.Queues$SimpleQueue.put(E)"], ["boolean", "org.mapdb.Queues$SimpleQueue.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "org.mapdb.Queues$SimpleQueue.take()"], ["E", "org.mapdb.Queues$SimpleQueue.poll(long, java.util.concurrent.TimeUnit)"], ["int", "org.mapdb.Queues$SimpleQueue.drainTo(java.util.Collection<? super E>)"], ["int", "org.mapdb.Queues$SimpleQueue.drainTo(java.util.Collection<? super E>, int)"], ["int", "org.mapdb.Queues$SimpleQueue.remainingCapacity()"], ["boolean", "org.mapdb.Queues$SimpleQueue.isEmpty()"], ["int", "org.mapdb.Queues$SimpleQueue.size()"], ["boolean", "org.mapdb.Queues$SimpleQueue.contains(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.Queues$SimpleQueue.toArray()"], ["<T> T[]", "org.mapdb.Queues$SimpleQueue.toArray(T[])"], ["boolean", "org.mapdb.Queues$SimpleQueue.remove(java.lang.Object)"], ["boolean", "org.mapdb.Queues$SimpleQueue.containsAll(java.util.Collection<?>)"], ["boolean", "org.mapdb.Queues$SimpleQueue.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.mapdb.Queues$SimpleQueue.removeAll(java.util.Collection<?>)"], ["boolean", "org.mapdb.Queues$SimpleQueue.retainAll(java.util.Collection<?>)"], ["org.mapdb.Queues$Stack", "org.mapdb.Queues$Stack(org.mapdb.Engine, org.mapdb.Serializer<E>, long, boolean)"], ["boolean", "org.mapdb.Queues$Stack.add(E)"], ["void", "org.mapdb.Serializer$1.serialize(java.io.DataOutput, java.lang.String)"], ["java.lang.String", "org.mapdb.Serializer$1.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$1.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$1.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$1.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$10.serialize(java.io.DataOutput, byte[])"], ["byte[]", "org.mapdb.Serializer$10.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$10.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$10.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$10.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$11.serialize(java.io.DataOutput, char[])"], ["char[]", "org.mapdb.Serializer$11.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$11.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$11.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$11.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$12.serialize(java.io.DataOutput, int[])"], ["int[]", "org.mapdb.Serializer$12.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$12.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$12.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$12.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$13.serialize(java.io.DataOutput, long[])"], ["long[]", "org.mapdb.Serializer$13.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$13.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$13.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$13.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$14.serialize(java.io.DataOutput, double[])"], ["double[]", "org.mapdb.Serializer$14.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$14.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$14.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$14.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$15.serialize(java.io.DataOutput, java.lang.Object)"], ["java.lang.Object", "org.mapdb.Serializer$15.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$15.fixedSize()"], ["void", "org.mapdb.Serializer$16.serialize(java.io.DataOutput, java.util.UUID)"], ["java.util.UUID", "org.mapdb.Serializer$16.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$16.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$16.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$16.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$2.serialize(java.io.DataOutput, java.lang.String)"], ["java.lang.String", "org.mapdb.Serializer$2.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$2.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$2.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$2.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$3.serialize(java.io.DataOutput, java.lang.String)"], ["java.lang.String", "org.mapdb.Serializer$3.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$3.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$3.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$3.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$4.serialize(java.io.DataOutput, java.lang.String)"], ["java.lang.String", "org.mapdb.Serializer$4.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$4.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$4.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$4.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$5.serialize(java.io.DataOutput, java.lang.Long)"], ["java.lang.Long", "org.mapdb.Serializer$5.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$5.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$5.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$5.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$6.serialize(java.io.DataOutput, java.lang.Integer)"], ["java.lang.Integer", "org.mapdb.Serializer$6.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$6.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$6.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$6.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$7.serialize(java.io.DataOutput, java.lang.Boolean)"], ["java.lang.Boolean", "org.mapdb.Serializer$7.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$7.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$7.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$7.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.Serializer$8.serialize(java.io.DataOutput, java.lang.Object)"], ["java.lang.Object", "org.mapdb.Serializer$8.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$8.fixedSize()"], ["void", "org.mapdb.Serializer$9.serialize(java.io.DataOutput, byte[])"], ["byte[]", "org.mapdb.Serializer$9.deserialize(java.io.DataInput, int)"], ["int", "org.mapdb.Serializer$9.fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$9.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Serializer$9.serialize(java.io.DataOutput, java.lang.Object)"], ["org.mapdb.Serializer$CompressionWrapper", "org.mapdb.Serializer$CompressionWrapper(org.mapdb.Serializer<E>)"], ["void", "org.mapdb.Serializer$CompressionWrapper.serialize(java.io.DataOutput, E)"], ["E", "org.mapdb.Serializer$CompressionWrapper.deserialize(java.io.DataInput, int)"], ["boolean", "org.mapdb.Serializer$CompressionWrapper.equals(java.lang.Object)"], ["int", "org.mapdb.Serializer$CompressionWrapper.hashCode()"], ["int", "org.mapdb.Serializer$CompressionWrapper.fixedSize()"], ["org.mapdb.SerializerBase$FastArrayList", "org.mapdb.SerializerBase$FastArrayList()"], ["void", "org.mapdb.SerializerBase$FastArrayList.add(K)"], ["int", "org.mapdb.SerializerBase$FastArrayList.identityIndexOf(java.lang.Object)"], ["org.mapdb.SerializerBase", "org.mapdb.SerializerBase()"], ["void", "org.mapdb.SerializerBase.serialize(java.io.DataOutput, java.lang.Object)"], ["void", "org.mapdb.SerializerBase.serialize(java.io.DataOutput, java.lang.Object, org.mapdb.SerializerBase$FastArrayList<java.lang.Object>)"], ["java.lang.Object", "org.mapdb.SerializerBase.deserialize(java.io.DataInput, int)"], ["java.lang.Object", "org.mapdb.SerializerBase.deserialize(java.io.DataInput, org.mapdb.SerializerBase$FastArrayList<java.lang.Object>)"], ["void", "org.mapdb.SerializerBase.assertSerializable(java.lang.Object)"], ["int", "org.mapdb.SerializerBase.fixedSize()"], ["void", "org.mapdb.SerializerPojo$1.serialize(java.io.DataOutput, java.util.concurrent.CopyOnWriteArrayList<org.mapdb.SerializerPojo$ClassInfo>)"], ["int", "org.mapdb.SerializerPojo$1.fixedSize()"], ["java.lang.Object", "org.mapdb.SerializerPojo$1.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.SerializerPojo$1.serialize(java.io.DataOutput, java.lang.Object)"], ["org.mapdb.SerializerPojo$ClassInfo", "org.mapdb.SerializerPojo$ClassInfo(java.lang.String, org.mapdb.SerializerPojo$FieldInfo[], boolean, boolean)"], ["int", "org.mapdb.SerializerPojo$ClassInfo.getFieldId(java.lang.String)"], ["int", "org.mapdb.SerializerPojo$ClassInfo.addFieldInfo(org.mapdb.SerializerPojo$FieldInfo)"], ["java.io.ObjectStreamField[]", "org.mapdb.SerializerPojo$ClassInfo.getObjectStreamFields()"], ["void", "org.mapdb.SerializerPojo$ClassInfo.setObjectStreamFields(java.io.ObjectStreamField[])"], ["java.lang.String", "org.mapdb.SerializerPojo$ClassInfo.toString()"], ["org.mapdb.SerializerPojo$FieldInfo", "org.mapdb.SerializerPojo$FieldInfo(java.lang.String, boolean, java.lang.String, java.lang.Class<?>)"], ["org.mapdb.SerializerPojo$FieldInfo", "org.mapdb.SerializerPojo$FieldInfo(java.io.ObjectStreamField, java.lang.Class<?>)"], ["org.mapdb.SerializerPojo", "org.mapdb.SerializerPojo(java.util.concurrent.CopyOnWriteArrayList<org.mapdb.SerializerPojo$ClassInfo>)"], ["void", "org.mapdb.SerializerPojo.registerClass(java.lang.Class<?>)"], ["java.lang.Object", "org.mapdb.SerializerPojo.getFieldValue(org.mapdb.SerializerPojo$FieldInfo, java.lang.Object)"], ["void", "org.mapdb.SerializerPojo.setFieldValue(org.mapdb.SerializerPojo$FieldInfo, java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.SerializerPojo.containsClass(java.lang.Class<?>)"], ["int", "org.mapdb.SerializerPojo.getClassId(java.lang.Class<?>)"], ["boolean", "org.mapdb.SerializerPojo.hasUnsavedChanges()"], ["void", "org.mapdb.SerializerPojo.save(org.mapdb.Engine)"], ["<A, R> void", "org.mapdb.SerializerPojo.serializerTransformAdd(org.mapdb.Fun$Function1<A, R>, org.mapdb.Fun$Function1<R, A>)"], ["<A, R> void", "org.mapdb.SerializerPojo.serializerTransformRemove(org.mapdb.Fun$Function1<A, R>, org.mapdb.Fun$Function1<R, A>)"], ["void", "org.mapdb.SerializerPojo.serialize(java.io.DataOutput, java.lang.Object)"], ["java.lang.Object", "org.mapdb.SerializerPojo.deserialize(java.io.DataInput, int)"], ["void", "org.mapdb.Store.printStatistics()"], ["org.mapdb.SerializerPojo", "org.mapdb.Store.getSerializerPojo()"], ["org.mapdb.Store", "org.mapdb.Store.forDB(org.mapdb.DB)"], ["org.mapdb.Store", "org.mapdb.Store.forEngine(org.mapdb.Engine)"], ["boolean", "org.mapdb.Store.canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.Store.snapshot()"], ["void", "org.mapdb.Store.closeListenerRegister(java.lang.Runnable)"], ["void", "org.mapdb.Store.closeListenerUnregister(java.lang.Runnable)"], ["org.mapdb.StoreAppend", "org.mapdb.StoreAppend(java.io.File, boolean, boolean, boolean, boolean, boolean, boolean, boolean, byte[], boolean)"], ["org.mapdb.StoreAppend", "org.mapdb.StoreAppend(java.io.File)"], ["long", "org.mapdb.StoreAppend.preallocate()"], ["void", "org.mapdb.StoreAppend.preallocate(long[])"], ["<A> long", "org.mapdb.StoreAppend.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.StoreAppend.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreAppend.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.StoreAppend.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreAppend.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.StoreAppend.close()"], ["boolean", "org.mapdb.StoreAppend.isClosed()"], ["void", "org.mapdb.StoreAppend.commit()"], ["void", "org.mapdb.StoreAppend.rollback()"], ["boolean", "org.mapdb.StoreAppend.canRollback()"], ["boolean", "org.mapdb.StoreAppend.isReadOnly()"], ["void", "org.mapdb.StoreAppend.clearCache()"], ["void", "org.mapdb.StoreAppend.compact()"], ["long", "org.mapdb.StoreAppend.getMaxRecid()"], ["java.nio.ByteBuffer", "org.mapdb.StoreAppend.getRaw(long)"], ["void", "org.mapdb.StoreAppend.updateRaw(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.StoreAppend.getSizeLimit()"], ["long", "org.mapdb.StoreAppend.getCurrSize()"], ["long", "org.mapdb.StoreAppend.getFreeSize()"], ["java.lang.String", "org.mapdb.StoreAppend.calculateStatistics()"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect(org.mapdb.Volume$Factory, boolean, boolean, int, boolean, long, boolean, boolean, byte[], boolean, int)"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect(org.mapdb.Volume$Factory)"], ["long", "org.mapdb.StoreDirect.preallocate()"], ["void", "org.mapdb.StoreDirect.preallocate(long[])"], ["<A> long", "org.mapdb.StoreDirect.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.StoreDirect.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreDirect.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.StoreDirect.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreDirect.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.StoreDirect.close()"], ["boolean", "org.mapdb.StoreDirect.isClosed()"], ["void", "org.mapdb.StoreDirect.commit()"], ["void", "org.mapdb.StoreDirect.rollback()"], ["boolean", "org.mapdb.StoreDirect.isReadOnly()"], ["boolean", "org.mapdb.StoreDirect.canRollback()"], ["void", "org.mapdb.StoreDirect.clearCache()"], ["void", "org.mapdb.StoreDirect.compact()"], ["long", "org.mapdb.StoreDirect.getMaxRecid()"], ["java.nio.ByteBuffer", "org.mapdb.StoreDirect.getRaw(long)"], ["void", "org.mapdb.StoreDirect.updateRaw(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.StoreDirect.getSizeLimit()"], ["long", "org.mapdb.StoreDirect.getCurrSize()"], ["long", "org.mapdb.StoreDirect.getFreeSize()"], ["java.lang.String", "org.mapdb.StoreDirect.calculateStatistics()"], ["org.mapdb.StoreHeap", "org.mapdb.StoreHeap()"], ["long", "org.mapdb.StoreHeap.preallocate()"], ["void", "org.mapdb.StoreHeap.preallocate(long[])"], ["<A> long", "org.mapdb.StoreHeap.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.StoreHeap.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreHeap.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.StoreHeap.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreHeap.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.StoreHeap.close()"], ["boolean", "org.mapdb.StoreHeap.isClosed()"], ["void", "org.mapdb.StoreHeap.commit()"], ["void", "org.mapdb.StoreHeap.rollback()"], ["boolean", "org.mapdb.StoreHeap.isReadOnly()"], ["void", "org.mapdb.StoreHeap.clearCache()"], ["void", "org.mapdb.StoreHeap.compact()"], ["boolean", "org.mapdb.StoreHeap.canRollback()"], ["long", "org.mapdb.StoreHeap.getMaxRecid()"], ["java.nio.ByteBuffer", "org.mapdb.StoreHeap.getRaw(long)"], ["void", "org.mapdb.StoreHeap.updateRaw(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.StoreHeap.getSizeLimit()"], ["long", "org.mapdb.StoreHeap.getCurrSize()"], ["long", "org.mapdb.StoreHeap.getFreeSize()"], ["java.lang.String", "org.mapdb.StoreHeap.calculateStatistics()"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL(org.mapdb.Volume$Factory)"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL(org.mapdb.Volume$Factory, boolean, boolean, int, boolean, long, boolean, boolean, byte[], boolean, int)"], ["long", "org.mapdb.StoreWAL.preallocate()"], ["void", "org.mapdb.StoreWAL.preallocate(long[])"], ["<A> long", "org.mapdb.StoreWAL.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.StoreWAL.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreWAL.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.StoreWAL.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreWAL.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.StoreWAL.commit()"], ["void", "org.mapdb.StoreWAL.rollback()"], ["void", "org.mapdb.StoreWAL.close()"], ["boolean", "org.mapdb.StoreWAL.canRollback()"], ["org.mapdb.TxEngine$Tx", "org.mapdb.TxEngine$Tx(org.mapdb.TxEngine)"], ["long", "org.mapdb.TxEngine$Tx.preallocate()"], ["void", "org.mapdb.TxEngine$Tx.preallocate(long[])"], ["<A> long", "org.mapdb.TxEngine$Tx.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.TxEngine$Tx.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.TxEngine$Tx.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.TxEngine$Tx.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.TxEngine$Tx.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.TxEngine$Tx.close()"], ["boolean", "org.mapdb.TxEngine$Tx.isClosed()"], ["void", "org.mapdb.TxEngine$Tx.commit()"], ["void", "org.mapdb.TxEngine$Tx.rollback()"], ["boolean", "org.mapdb.TxEngine$Tx.isReadOnly()"], ["boolean", "org.mapdb.TxEngine$Tx.canRollback()"], ["boolean", "org.mapdb.TxEngine$Tx.canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.TxEngine$Tx.snapshot()"], ["void", "org.mapdb.TxEngine$Tx.clearCache()"], ["void", "org.mapdb.TxEngine$Tx.compact()"], ["org.mapdb.SerializerPojo", "org.mapdb.TxEngine$Tx.getSerializerPojo()"], ["void", "org.mapdb.TxEngine$Tx.closeListenerRegister(java.lang.Runnable)"], ["void", "org.mapdb.TxEngine$Tx.closeListenerUnregister(java.lang.Runnable)"], ["org.mapdb.Engine", "org.mapdb.TxEngine$Tx.getWrappedEngine()"], ["org.mapdb.Engine", "org.mapdb.TxEngine.createSnapshotFor(org.mapdb.Engine)"], ["boolean", "org.mapdb.TxEngine.canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.TxEngine.snapshot()"], ["long", "org.mapdb.TxEngine.preallocate()"], ["void", "org.mapdb.TxEngine.preallocate(long[])"], ["<A> long", "org.mapdb.TxEngine.put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.TxEngine.get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.TxEngine.update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.TxEngine.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.TxEngine.delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.TxEngine.close()"], ["void", "org.mapdb.TxEngine.commit()"], ["void", "org.mapdb.TxEngine.rollback()"], ["org.mapdb.TxMaker", "org.mapdb.TxMaker(org.mapdb.Engine)"], ["org.mapdb.TxMaker", "org.mapdb.TxMaker(org.mapdb.Engine, boolean, boolean)"], ["org.mapdb.DB", "org.mapdb.TxMaker.makeTx()"], ["void", "org.mapdb.TxMaker.close()"], ["void", "org.mapdb.TxMaker.execute(org.mapdb.TxBlock)"], ["<A> A", "org.mapdb.TxMaker.execute(org.mapdb.Fun$Function1<A, org.mapdb.DB>)"], ["org.mapdb.TxRollbackException", "org.mapdb.TxRollbackException()"], ["org.mapdb.Volume", "org.mapdb.Volume$1.createIndexVolume()"], ["org.mapdb.Volume", "org.mapdb.Volume$1.createPhysVolume()"], ["org.mapdb.Volume", "org.mapdb.Volume$1.createTransLogVolume()"], ["synchronized", "org.mapdb.Volume$2.org.mapdb.Volume createIndexVolume()"], ["synchronized", "org.mapdb.Volume$2.org.mapdb.Volume createPhysVolume()"], ["synchronized", "org.mapdb.Volume$2.org.mapdb.Volume createTransLogVolume()"], ["boolean", "org.mapdb.Volume$ByteBufferVol.tryAvailable(long)"], ["void", "org.mapdb.Volume$ByteBufferVol.putLong(long, long)"], ["void", "org.mapdb.Volume$ByteBufferVol.putInt(long, int)"], ["void", "org.mapdb.Volume$ByteBufferVol.putByte(long, byte)"], ["void", "org.mapdb.Volume$ByteBufferVol.putData(long, byte[], int, int)"], ["void", "org.mapdb.Volume$ByteBufferVol.putData(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.Volume$ByteBufferVol.getLong(long)"], ["int", "org.mapdb.Volume$ByteBufferVol.getInt(long)"], ["byte", "org.mapdb.Volume$ByteBufferVol.getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.Volume$ByteBufferVol.getDataInput(long, int)"], ["boolean", "org.mapdb.Volume$ByteBufferVol.isEmpty()"], ["boolean", "org.mapdb.Volume$ByteBufferVol.isSliced()"], ["java.io.DataInput", "org.mapdb.Volume$ByteBufferVol.getDataInput(long, int)"], ["org.mapdb.Volume$FileChannelVol", "org.mapdb.Volume$FileChannelVol(java.io.File, boolean, long, int, int)"], ["boolean", "org.mapdb.Volume$FileChannelVol.tryAvailable(long)"], ["void", "org.mapdb.Volume$FileChannelVol.truncate(long)"], ["void", "org.mapdb.Volume$FileChannelVol.putSixLong(long, long)"], ["void", "org.mapdb.Volume$FileChannelVol.putLong(long, long)"], ["void", "org.mapdb.Volume$FileChannelVol.putInt(long, int)"], ["void", "org.mapdb.Volume$FileChannelVol.putByte(long, byte)"], ["void", "org.mapdb.Volume$FileChannelVol.putData(long, byte[], int, int)"], ["void", "org.mapdb.Volume$FileChannelVol.putData(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.Volume$FileChannelVol.getSixLong(long)"], ["long", "org.mapdb.Volume$FileChannelVol.getLong(long)"], ["int", "org.mapdb.Volume$FileChannelVol.getInt(long)"], ["byte", "org.mapdb.Volume$FileChannelVol.getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.Volume$FileChannelVol.getDataInput(long, int)"], ["void", "org.mapdb.Volume$FileChannelVol.close()"], ["void", "org.mapdb.Volume$FileChannelVol.sync()"], ["boolean", "org.mapdb.Volume$FileChannelVol.isEmpty()"], ["void", "org.mapdb.Volume$FileChannelVol.deleteFile()"], ["boolean", "org.mapdb.Volume$FileChannelVol.isSliced()"], ["java.io.File", "org.mapdb.Volume$FileChannelVol.getFile()"], ["java.io.DataInput", "org.mapdb.Volume$FileChannelVol.getDataInput(long, int)"], ["org.mapdb.Volume$MappedFileVol", "org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int)"], ["org.mapdb.Volume$MappedFileVol", "org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int, boolean)"], ["org.mapdb.Volume$MappedFileVol", "org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int, boolean, boolean)"], ["void", "org.mapdb.Volume$MappedFileVol.close()"], ["void", "org.mapdb.Volume$MappedFileVol.sync()"], ["void", "org.mapdb.Volume$MappedFileVol.deleteFile()"], ["java.io.File", "org.mapdb.Volume$MappedFileVol.getFile()"], ["void", "org.mapdb.Volume$MappedFileVol.truncate(long)"], ["java.lang.String", "org.mapdb.Volume$MemoryVol.toString()"], ["org.mapdb.Volume$MemoryVol", "org.mapdb.Volume$MemoryVol(boolean, long, int)"], ["void", "org.mapdb.Volume$MemoryVol.truncate(long)"], ["void", "org.mapdb.Volume$MemoryVol.close()"], ["void", "org.mapdb.Volume$MemoryVol.sync()"], ["void", "org.mapdb.Volume$MemoryVol.deleteFile()"], ["java.io.File", "org.mapdb.Volume$MemoryVol.getFile()"], ["org.mapdb.Volume", "org.mapdb.Volume()"], ["void", "org.mapdb.Volume.ensureAvailable(long)"], ["void", "org.mapdb.Volume.putUnsignedShort(long, int)"], ["int", "org.mapdb.Volume.getUnsignedShort(long)"], ["int", "org.mapdb.Volume.getUnsignedByte(long)"], ["void", "org.mapdb.Volume.putUnsignedByte(long, int)"], ["long", "org.mapdb.Volume.getSixLong(long)"], ["void", "org.mapdb.Volume.putSixLong(long, long)"], ["int", "org.mapdb.Volume.putPackedLong(long, long)"], ["long", "org.mapdb.Volume.getPackedLong(long)"], ["org.mapdb.Volume", "org.mapdb.Volume.volumeForFile(java.io.File, boolean, boolean, long, int, int)"], ["org.mapdb.Volume", "org.mapdb.Volume.volumeForFile(java.io.File, boolean, boolean, long, int, int, boolean)"], ["org.mapdb.Volume", "org.mapdb.Volume.volumeForFile(java.io.File, boolean, boolean, long, int, int, boolean, boolean)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.fileFactory(java.io.File, int, boolean, long, int, int)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File, boolean)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File, boolean, boolean)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.memoryFactory(boolean, long, int)"], ["void", "org.mapdb.Volume.volumeTransfer(long, org.mapdb.Volume, org.mapdb.Volume)"]]}