{"hazelcast-3.10.6.jar": [["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong()"], ["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong(long, com.hazelcast.cluster.impl.VectorClock)"], ["long", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong.getValue()"], ["com.hazelcast.cluster.impl.VectorClock", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong.getVectorClock()"], ["void", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong.setValue(long)"], ["void", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong.setVectorClock(com.hazelcast.cluster.impl.VectorClock)"], ["int", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong.getFactoryId()"], ["int", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong.getId()"], ["void", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.crdt.pncounter.operations.AbstractPNCounterOperation.getServiceName()"], ["java.lang.String", "com.hazelcast.crdt.pncounter.operations.AbstractPNCounterOperation.getName()"], ["int", "com.hazelcast.crdt.pncounter.operations.AbstractPNCounterOperation.getFactoryId()"], ["com.hazelcast.crdt.pncounter.operations.AddOperation", "com.hazelcast.crdt.pncounter.operations.AddOperation(java.lang.String, long, boolean, com.hazelcast.cluster.impl.VectorClock)"], ["com.hazelcast.crdt.pncounter.operations.AddOperation", "com.hazelcast.crdt.pncounter.operations.AddOperation()"], ["void", "com.hazelcast.crdt.pncounter.operations.AddOperation.run()"], ["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.operations.AddOperation.getResponse()"], ["int", "com.hazelcast.crdt.pncounter.operations.AddOperation.getId()"], ["java.lang.Object", "com.hazelcast.crdt.pncounter.operations.AddOperation.getResponse()"], ["com.hazelcast.crdt.pncounter.operations.GetOperation", "com.hazelcast.crdt.pncounter.operations.GetOperation(java.lang.String, com.hazelcast.cluster.impl.VectorClock)"], ["com.hazelcast.crdt.pncounter.operations.GetOperation", "com.hazelcast.crdt.pncounter.operations.GetOperation()"], ["void", "com.hazelcast.crdt.pncounter.operations.GetOperation.run()"], ["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.operations.GetOperation.getResponse()"], ["int", "com.hazelcast.crdt.pncounter.operations.GetOperation.getId()"], ["java.lang.Object", "com.hazelcast.crdt.pncounter.operations.GetOperation.getResponse()"], ["com.hazelcast.crdt.pncounter.PNCounterReplicationOperation", "com.hazelcast.crdt.pncounter.PNCounterReplicationOperation()"], ["int", "com.hazelcast.crdt.pncounter.PNCounterReplicationOperation.getId()"], ["java.lang.String", "com.hazelcast.crdt.pncounter.PNCounterReplicationOperation.getServiceName()"], ["com.hazelcast.crdt.pncounter.PNCounterService", "com.hazelcast.crdt.pncounter.PNCounterService()"], ["com.hazelcast.crdt.pncounter.PNCounterImpl", "com.hazelcast.crdt.pncounter.PNCounterService.getCounter(java.lang.String)"], ["boolean", "com.hazelcast.crdt.pncounter.PNCounterService.containsCounter(java.lang.String)"], ["com.hazelcast.monitor.impl.LocalPNCounterStatsImpl", "com.hazelcast.crdt.pncounter.PNCounterService.getLocalPNCounterStats(java.lang.String)"], ["void", "com.hazelcast.crdt.pncounter.PNCounterService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.crdt.pncounter.PNCounterService.reset()"], ["void", "com.hazelcast.crdt.pncounter.PNCounterService.shutdown(boolean)"], ["com.hazelcast.crdt.pncounter.PNCounterProxy", "com.hazelcast.crdt.pncounter.PNCounterService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.crdt.pncounter.PNCounterService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.crdt.CRDTReplicationContainer", "com.hazelcast.crdt.pncounter.PNCounterService.prepareReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.cluster.impl.VectorClock>, int)"], ["java.lang.String", "com.hazelcast.crdt.pncounter.PNCounterService.getName()"], ["void", "com.hazelcast.crdt.pncounter.PNCounterService.merge(java.lang.String, com.hazelcast.crdt.pncounter.PNCounterImpl)"], ["com.hazelcast.crdt.CRDTReplicationContainer", "com.hazelcast.crdt.pncounter.PNCounterService.prepareMigrationOperation(int)"], ["boolean", "com.hazelcast.crdt.pncounter.PNCounterService.clearCRDTState(java.util.Map<java.lang.String, com.hazelcast.cluster.impl.VectorClock>)"], ["void", "com.hazelcast.crdt.pncounter.PNCounterService.prepareToSafeShutdown()"], ["java.lang.String", "com.hazelcast.crdt.pncounter.PNCounterService.getQuorumName(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalPNCounterStats>", "com.hazelcast.crdt.pncounter.PNCounterService.getStats()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.crdt.pncounter.PNCounterService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.crdt.pncounter.PNCounterService.merge(java.lang.String, java.lang.Object)"], ["java.lang.String", "com.hazelcast.crdt.pncounter.PNCounterProxy.getName()"], ["java.lang.String", "com.hazelcast.crdt.pncounter.PNCounterProxy.getServiceName()"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.get()"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.getAndAdd(long)"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.addAndGet(long)"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.getAndSubtract(long)"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.subtractAndGet(long)"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.decrementAndGet()"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.incrementAndGet()"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.getAndDecrement()"], ["long", "com.hazelcast.crdt.pncounter.PNCounterProxy.getAndIncrement()"], ["void", "com.hazelcast.crdt.pncounter.PNCounterProxy.reset()"], ["com.hazelcast.nio.Address", "com.hazelcast.crdt.pncounter.PNCounterProxy.getCurrentTargetReplicaAddress()"], ["void", "com.hazelcast.crdt.pncounter.PNCounterProxy.setOperationTryCount(int)"], ["java.lang.String", "com.hazelcast.crdt.pncounter.PNCounterProxy.toString()"], ["com.hazelcast.monitor.impl.LocalPNCounterStatsImpl", "com.hazelcast.crdt.pncounter.PNCounterService$3.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.crdt.pncounter.PNCounterService$3.createNew(java.lang.Object)"], ["com.hazelcast.crdt.pncounter.PNCounterImpl", "com.hazelcast.crdt.pncounter.PNCounterService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.crdt.pncounter.PNCounterService$1.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.crdt.pncounter.PNCounterService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.crdt.pncounter.PNCounterService$2.createNew(java.lang.Object)"], ["com.hazelcast.crdt.pncounter.PNCounterImpl", "com.hazelcast.crdt.pncounter.PNCounterImpl()"], ["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.PNCounterImpl.get(com.hazelcast.cluster.impl.VectorClock)"], ["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.PNCounterImpl.getAndAdd(long, com.hazelcast.cluster.impl.VectorClock)"], ["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.PNCounterImpl.addAndGet(long, com.hazelcast.cluster.impl.VectorClock)"], ["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.PNCounterImpl.getAndSubtract(long, com.hazelcast.cluster.impl.VectorClock)"], ["com.hazelcast.crdt.pncounter.operations.CRDTTimestampedLong", "com.hazelcast.crdt.pncounter.PNCounterImpl.subtractAndGet(long, com.hazelcast.cluster.impl.VectorClock)"], ["void", "com.hazelcast.crdt.pncounter.PNCounterImpl.merge(com.hazelcast.crdt.pncounter.PNCounterImpl)"], ["com.hazelcast.cluster.impl.VectorClock", "com.hazelcast.crdt.pncounter.PNCounterImpl.getCurrentVectorClock()"], ["int", "com.hazelcast.crdt.pncounter.PNCounterImpl.getFactoryId()"], ["int", "com.hazelcast.crdt.pncounter.PNCounterImpl.getId()"], ["void", "com.hazelcast.crdt.pncounter.PNCounterImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.crdt.pncounter.PNCounterImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.crdt.pncounter.PNCounterImpl.markMigrated(com.hazelcast.cluster.impl.VectorClock)"], ["void", "com.hazelcast.crdt.pncounter.PNCounterImpl.markMigrated()"], ["void", "com.hazelcast.crdt.pncounter.PNCounterImpl.merge(com.hazelcast.crdt.CRDT)"], ["com.hazelcast.crdt.CRDTReplicationContainer", "com.hazelcast.crdt.CRDTReplicationContainer(com.hazelcast.spi.Operation, java.util.Map<java.lang.String, com.hazelcast.cluster.impl.VectorClock>)"], ["com.hazelcast.spi.Operation", "com.hazelcast.crdt.CRDTReplicationContainer.getOperation()"], ["java.util.Map<java.lang.String, com.hazelcast.cluster.impl.VectorClock>", "com.hazelcast.crdt.CRDTReplicationContainer.getVectorClocks()"], ["com.hazelcast.crdt.CRDTReplicationMigrationService", "com.hazelcast.crdt.CRDTReplicationMigrationService()"], ["void", "com.hazelcast.crdt.CRDTReplicationMigrationService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.crdt.CRDTReplicationMigrationService.reset()"], ["void", "com.hazelcast.crdt.CRDTReplicationMigrationService.shutdown(boolean)"], ["void", "com.hazelcast.crdt.CRDTReplicationMigrationService.syncReplicateDirtyCRDTs()"], ["void", "com.hazelcast.crdt.CRDTReplicationMigrationService.memberAdded(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.crdt.CRDTReplicationMigrationService.memberRemoved(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.crdt.CRDTReplicationMigrationService.memberAttributeChanged(com.hazelcast.spi.MemberAttributeServiceEvent)"], ["com.hazelcast.crdt.MutationDisallowedException", "com.hazelcast.crdt.MutationDisallowedException(java.lang.String)"], ["boolean", "com.hazelcast.crdt.ReplicatedVectorClocks$ReplicatedVectorClockId.equals(java.lang.Object)"], ["int", "com.hazelcast.crdt.ReplicatedVectorClocks$ReplicatedVectorClockId.hashCode()"], ["com.hazelcast.crdt.TargetNotReplicaException", "com.hazelcast.crdt.TargetNotReplicaException(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.cluster.impl.VectorClock>", "com.hazelcast.crdt.ReplicatedVectorClocks.getReplicatedVectorClock(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.crdt.ReplicatedVectorClocks.setReplicatedVectorClocks(java.lang.String, java.lang.String, java.util.Map<java.lang.String, com.hazelcast.cluster.impl.VectorClock>)"], ["java.util.Map<java.lang.String, com.hazelcast.cluster.impl.VectorClock>", "com.hazelcast.crdt.ReplicatedVectorClocks.getLatestReplicatedVectorClock(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.crdt.CRDTDataSerializerHook$1.create(int)"], ["void", "com.hazelcast.crdt.CRDTMigrationTask.run()"], ["com.hazelcast.crdt.AbstractCRDTReplicationOperation", "com.hazelcast.crdt.AbstractCRDTReplicationOperation(java.util.Map<java.lang.String, T>)"], ["void", "com.hazelcast.crdt.AbstractCRDTReplicationOperation.run()"], ["void", "com.hazelcast.crdt.AbstractCRDTReplicationOperation.afterRun()"], ["int", "com.hazelcast.crdt.AbstractCRDTReplicationOperation.getFactoryId()"], ["com.hazelcast.crdt.CRDTDataSerializerHook", "com.hazelcast.crdt.CRDTDataSerializerHook()"], ["int", "com.hazelcast.crdt.CRDTDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.crdt.CRDTDataSerializerHook.createFactory()"], ["void", "com.hazelcast.crdt.CRDTReplicationTask.run()"], ["com.hazelcast.partition.membergroup.MemberGroupFactory", "com.hazelcast.partition.membergroup.MemberGroupFactoryFactory.newMemberGroupFactory(com.hazelcast.config.PartitionGroupConfig, com.hazelcast.spi.discovery.integration.DiscoveryService)"], ["boolean", "com.hazelcast.partition.membergroup.SingleMemberGroup$MemberIterator.hasNext()"], ["com.hazelcast.core.Member", "com.hazelcast.partition.membergroup.SingleMemberGroup$MemberIterator.next()"], ["void", "com.hazelcast.partition.membergroup.SingleMemberGroup$MemberIterator.remove()"], ["java.lang.Object", "com.hazelcast.partition.membergroup.SingleMemberGroup$MemberIterator.next()"], ["com.hazelcast.partition.membergroup.SingleMemberGroup", "com.hazelcast.partition.membergroup.SingleMemberGroup()"], ["com.hazelcast.partition.membergroup.SingleMemberGroup", "com.hazelcast.partition.membergroup.SingleMemberGroup(com.hazelcast.core.Member)"], ["void", "com.hazelcast.partition.membergroup.SingleMemberGroup.addMember(com.hazelcast.core.Member)"], ["void", "com.hazelcast.partition.membergroup.SingleMemberGroup.addMembers(java.util.Collection<com.hazelcast.core.Member>)"], ["void", "com.hazelcast.partition.membergroup.SingleMemberGroup.removeMember(com.hazelcast.core.Member)"], ["boolean", "com.hazelcast.partition.membergroup.SingleMemberGroup.hasMember(com.hazelcast.core.Member)"], ["int", "com.hazelcast.partition.membergroup.SingleMemberGroup.size()"], ["int", "com.hazelcast.partition.membergroup.SingleMemberGroup.hashCode()"], ["boolean", "com.hazelcast.partition.membergroup.SingleMemberGroup.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.partition.membergroup.SingleMemberGroup.toString()"], ["com.hazelcast.partition.membergroup.ConfigMemberGroupFactory", "com.hazelcast.partition.membergroup.ConfigMemberGroupFactory(java.util.Collection<com.hazelcast.config.MemberGroupConfig>)"], ["com.hazelcast.partition.membergroup.SingleMemberGroupFactory", "com.hazelcast.partition.membergroup.SingleMemberGroupFactory()"], ["java.util.Collection", "com.hazelcast.partition.membergroup.SingleMemberGroupFactory.createMemberGroups(java.util.Collection)"], ["com.hazelcast.partition.membergroup.SPIAwareMemberGroupFactory", "com.hazelcast.partition.membergroup.SPIAwareMemberGroupFactory(com.hazelcast.spi.discovery.integration.DiscoveryService)"], ["com.hazelcast.partition.membergroup.DefaultMemberGroup", "com.hazelcast.partition.membergroup.DefaultMemberGroup()"], ["com.hazelcast.partition.membergroup.DefaultMemberGroup", "com.hazelcast.partition.membergroup.DefaultMemberGroup(java.util.Collection<com.hazelcast.core.Member>)"], ["void", "com.hazelcast.partition.membergroup.DefaultMemberGroup.addMember(com.hazelcast.core.Member)"], ["void", "com.hazelcast.partition.membergroup.DefaultMemberGroup.addMembers(java.util.Collection<com.hazelcast.core.Member>)"], ["void", "com.hazelcast.partition.membergroup.DefaultMemberGroup.removeMember(com.hazelcast.core.Member)"], ["boolean", "com.hazelcast.partition.membergroup.DefaultMemberGroup.hasMember(com.hazelcast.core.Member)"], ["int", "com.hazelcast.partition.membergroup.DefaultMemberGroup.size()"], ["int", "com.hazelcast.partition.membergroup.DefaultMemberGroup.hashCode()"], ["boolean", "com.hazelcast.partition.membergroup.DefaultMemberGroup.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.partition.membergroup.DefaultMemberGroup.toString()"], ["com.hazelcast.partition.membergroup.HostAwareMemberGroupFactory", "com.hazelcast.partition.membergroup.HostAwareMemberGroupFactory()"], ["com.hazelcast.partition.membergroup.ZoneAwareMemberGroupFactory", "com.hazelcast.partition.membergroup.ZoneAwareMemberGroupFactory()"], ["com.hazelcast.partition.PartitionLostEvent", "com.hazelcast.partition.PartitionLostEvent()"], ["com.hazelcast.partition.PartitionLostEvent", "com.hazelcast.partition.PartitionLostEvent(int, int, com.hazelcast.nio.Address)"], ["int", "com.hazelcast.partition.PartitionLostEvent.getPartitionId()"], ["int", "com.hazelcast.partition.PartitionLostEvent.getLostBackupCount()"], ["com.hazelcast.nio.Address", "com.hazelcast.partition.PartitionLostEvent.getEventSource()"], ["void", "com.hazelcast.partition.PartitionLostEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.partition.PartitionLostEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.partition.PartitionLostEvent.toString()"], ["com.hazelcast.partition.NoDataMemberInClusterException", "com.hazelcast.partition.NoDataMemberInClusterException(java.lang.String)"], ["java.lang.Object", "com.hazelcast.partition.strategy.StringAndPartitionAwarePartitioningStrategy.getPartitionKey(java.lang.Object)"], ["com.hazelcast.partition.strategy.DefaultPartitioningStrategy", "com.hazelcast.partition.strategy.DefaultPartitioningStrategy()"], ["java.lang.Object", "com.hazelcast.partition.strategy.DefaultPartitioningStrategy.getPartitionKey(java.lang.Object)"], ["com.hazelcast.partition.strategy.StringPartitioningStrategy", "com.hazelcast.partition.strategy.StringPartitioningStrategy()"], ["java.lang.Object", "com.hazelcast.partition.strategy.StringPartitioningStrategy.getPartitionKey(java.lang.Object)"], ["java.lang.String", "com.hazelcast.partition.strategy.StringPartitioningStrategy.getBaseName(java.lang.String)"], ["java.lang.String", "com.hazelcast.partition.strategy.StringPartitioningStrategy.getPartitionKey(java.lang.String)"], ["com.hazelcast.core.OutOfMemoryHandler", "com.hazelcast.core.OutOfMemoryHandler()"], ["boolean", "com.hazelcast.core.OutOfMemoryHandler.shouldHandle(java.lang.OutOfMemoryError)"], ["com.hazelcast.core.EntryEventType[]", "com.hazelcast.core.EntryEventType.values()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.core.EntryEventType.valueOf(java.lang.String)"], ["int", "com.hazelcast.core.EntryEventType.getType()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.core.EntryEventType.getByType(int)"], ["com.hazelcast.core.LocalMemberResetException", "com.hazelcast.core.LocalMemberResetException(java.lang.String)"], ["com.hazelcast.core.EntryAdapter", "com.hazelcast.core.EntryAdapter()"], ["void", "com.hazelcast.core.EntryAdapter.entryAdded(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.core.EntryAdapter.entryRemoved(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.core.EntryAdapter.entryUpdated(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.core.EntryAdapter.entryEvicted(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.core.EntryAdapter.mapEvicted(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.core.EntryAdapter.mapCleared(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.core.EntryAdapter.onEntryEvent(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.core.EntryAdapter.onMapEvent(com.hazelcast.core.MapEvent)"], ["com.hazelcast.core.RuntimeInterruptedException", "com.hazelcast.core.RuntimeInterruptedException()"], ["com.hazelcast.core.RuntimeInterruptedException", "com.hazelcast.core.RuntimeInterruptedException(java.lang.String)"], ["com.hazelcast.core.Message", "com.hazelcast.core.Message(java.lang.String, E, long, com.hazelcast.core.Member)"], ["E", "com.hazelcast.core.Message.getMessageObject()"], ["long", "com.hazelcast.core.Message.getPublishTime()"], ["com.hazelcast.core.Member", "com.hazelcast.core.Message.getPublishingMember()"], ["com.hazelcast.core.MapEvent", "com.hazelcast.core.MapEvent(java.lang.Object, com.hazelcast.core.Member, int, int)"], ["int", "com.hazelcast.core.MapEvent.getNumberOfEntriesAffected()"], ["java.lang.String", "com.hazelcast.core.MapEvent.toString()"], ["com.hazelcast.core.EntryEvent", "com.hazelcast.core.EntryEvent(java.lang.Object, com.hazelcast.core.Member, int, K, V)"], ["com.hazelcast.core.EntryEvent", "com.hazelcast.core.EntryEvent(java.lang.Object, com.hazelcast.core.Member, int, K, V, V)"], ["com.hazelcast.core.EntryEvent", "com.hazelcast.core.EntryEvent(java.lang.Object, com.hazelcast.core.Member, int, K, V, V, V)"], ["K", "com.hazelcast.core.EntryEvent.getKey()"], ["V", "com.hazelcast.core.EntryEvent.getOldValue()"], ["V", "com.hazelcast.core.EntryEvent.getValue()"], ["V", "com.hazelcast.core.EntryEvent.getMergingValue()"], ["java.lang.String", "com.hazelcast.core.EntryEvent.toString()"], ["com.hazelcast.core.MemberLeftException", "com.hazelcast.core.MemberLeftException()"], ["com.hazelcast.core.MemberLeftException", "com.hazelcast.core.MemberLeftException(java.lang.String)"], ["com.hazelcast.core.MemberLeftException", "com.hazelcast.core.MemberLeftException(com.hazelcast.core.Member)"], ["com.hazelcast.core.MemberLeftException", "com.hazelcast.core.MemberLeftException(java.lang.Throwable)"], ["com.hazelcast.core.Member", "com.hazelcast.core.MemberLeftException.getMember()"], ["com.hazelcast.core.ConsistencyLostException", "com.hazelcast.core.ConsistencyLostException(java.lang.String)"], ["com.hazelcast.core.ClientType[]", "com.hazelcast.core.ClientType.values()"], ["com.hazelcast.core.ClientType", "com.hazelcast.core.ClientType.valueOf(java.lang.String)"], ["com.hazelcast.core.LifecycleEvent$LifecycleState[]", "com.hazelcast.core.LifecycleEvent$LifecycleState.values()"], ["com.hazelcast.core.LifecycleEvent$LifecycleState", "com.hazelcast.core.LifecycleEvent$LifecycleState.valueOf(java.lang.String)"], ["java.lang.String", "com.hazelcast.core.DistributedObjectUtil.getName(com.hazelcast.core.DistributedObject)"], ["com.hazelcast.core.AbstractIMapEvent", "com.hazelcast.core.AbstractIMapEvent(java.lang.Object, com.hazelcast.core.Member, int)"], ["java.lang.Object", "com.hazelcast.core.AbstractIMapEvent.getSource()"], ["com.hazelcast.core.Member", "com.hazelcast.core.AbstractIMapEvent.getMember()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.core.AbstractIMapEvent.getEventType()"], ["java.lang.String", "com.hazelcast.core.AbstractIMapEvent.getName()"], ["java.lang.String", "com.hazelcast.core.AbstractIMapEvent.toString()"], ["com.hazelcast.core.DuplicateInstanceNameException", "com.hazelcast.core.DuplicateInstanceNameException(java.lang.String)"], ["void", "com.hazelcast.core.Hazelcast.shutdownAll()"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.core.Hazelcast.newHazelcastInstance(com.hazelcast.config.Config)"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.core.Hazelcast.newHazelcastInstance()"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.core.Hazelcast.getHazelcastInstanceByName(java.lang.String)"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.core.Hazelcast.getOrCreateHazelcastInstance()"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.core.Hazelcast.getOrCreateHazelcastInstance(com.hazelcast.config.Config)"], ["void", "com.hazelcast.core.Hazelcast.setOutOfMemoryHandler(com.hazelcast.core.OutOfMemoryHandler)"], ["com.hazelcast.core.MigrationEvent$MigrationStatus[]", "com.hazelcast.core.MigrationEvent$MigrationStatus.values()"], ["com.hazelcast.core.MigrationEvent$MigrationStatus", "com.hazelcast.core.MigrationEvent$MigrationStatus.valueOf(java.lang.String)"], ["void", "com.hazelcast.core.MigrationEvent$MigrationStatus.writeTo(com.hazelcast.core.MigrationEvent$MigrationStatus, java.io.DataOutput)"], ["com.hazelcast.core.MigrationEvent$MigrationStatus", "com.hazelcast.core.MigrationEvent$MigrationStatus.readFrom(java.io.DataInput)"], ["void", "com.hazelcast.core.server.StartServer.main(java.lang.String[])"], ["com.hazelcast.core.OperationTimeoutException", "com.hazelcast.core.OperationTimeoutException()"], ["com.hazelcast.core.OperationTimeoutException", "com.hazelcast.core.OperationTimeoutException(java.lang.String)"], ["com.hazelcast.core.OperationTimeoutException", "com.hazelcast.core.OperationTimeoutException(java.lang.String, java.lang.String)"], ["com.hazelcast.core.OperationTimeoutException", "com.hazelcast.core.OperationTimeoutException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.core.HazelcastInstanceNotActiveException", "com.hazelcast.core.HazelcastInstanceNotActiveException()"], ["com.hazelcast.core.HazelcastInstanceNotActiveException", "com.hazelcast.core.HazelcastInstanceNotActiveException(java.lang.String)"], ["com.hazelcast.core.ItemEventType[]", "com.hazelcast.core.ItemEventType.values()"], ["com.hazelcast.core.ItemEventType", "com.hazelcast.core.ItemEventType.valueOf(java.lang.String)"], ["int", "com.hazelcast.core.ItemEventType.getType()"], ["com.hazelcast.core.ItemEventType", "com.hazelcast.core.ItemEventType.getByType(int)"], ["com.hazelcast.core.HazelcastException", "com.hazelcast.core.HazelcastException()"], ["com.hazelcast.core.HazelcastException", "com.hazelcast.core.HazelcastException(java.lang.String)"], ["com.hazelcast.core.HazelcastException", "com.hazelcast.core.HazelcastException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.core.HazelcastException", "com.hazelcast.core.HazelcastException(java.lang.Throwable)"], ["com.hazelcast.core.InitialMembershipEvent", "com.hazelcast.core.InitialMembershipEvent(com.hazelcast.core.Cluster, java.util.Set<com.hazelcast.core.Member>)"], ["com.hazelcast.core.Cluster", "com.hazelcast.core.InitialMembershipEvent.getCluster()"], ["java.lang.String", "com.hazelcast.core.InitialMembershipEvent.toString()"], ["com.hazelcast.core.MapStoreAdapter", "com.hazelcast.core.MapStoreAdapter()"], ["void", "com.hazelcast.core.MapStoreAdapter.delete(K)"], ["void", "com.hazelcast.core.MapStoreAdapter.store(K, V)"], ["void", "com.hazelcast.core.MapStoreAdapter.storeAll(java.util.Map<K, V>)"], ["void", "com.hazelcast.core.MapStoreAdapter.deleteAll(java.util.Collection<K>)"], ["V", "com.hazelcast.core.MapStoreAdapter.load(K)"], ["java.util.Map<K, V>", "com.hazelcast.core.MapStoreAdapter.loadAll(java.util.Collection<K>)"], ["com.hazelcast.core.HazelcastOverloadException", "com.hazelcast.core.HazelcastOverloadException(java.lang.String)"], ["com.hazelcast.core.HazelcastOverloadException", "com.hazelcast.core.HazelcastOverloadException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.core.MigrationEvent", "com.hazelcast.core.MigrationEvent()"], ["com.hazelcast.core.MigrationEvent", "com.hazelcast.core.MigrationEvent(int, com.hazelcast.core.Member, com.hazelcast.core.Member, com.hazelcast.core.MigrationEvent$MigrationStatus)"], ["int", "com.hazelcast.core.MigrationEvent.getPartitionId()"], ["com.hazelcast.core.Member", "com.hazelcast.core.MigrationEvent.getOldOwner()"], ["com.hazelcast.core.Member", "com.hazelcast.core.MigrationEvent.getNewOwner()"], ["com.hazelcast.core.MigrationEvent$MigrationStatus", "com.hazelcast.core.MigrationEvent.getStatus()"], ["void", "com.hazelcast.core.MigrationEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.core.MigrationEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.core.MigrationEvent.toString()"], ["com.hazelcast.core.LifecycleEvent", "com.hazelcast.core.LifecycleEvent(com.hazelcast.core.LifecycleEvent$LifecycleState)"], ["com.hazelcast.core.LifecycleEvent$LifecycleState", "com.hazelcast.core.LifecycleEvent.getState()"], ["boolean", "com.hazelcast.core.LifecycleEvent.equals(java.lang.Object)"], ["int", "com.hazelcast.core.LifecycleEvent.hashCode()"], ["java.lang.String", "com.hazelcast.core.LifecycleEvent.toString()"], ["com.hazelcast.core.MemberAttributeEvent", "com.hazelcast.core.MemberAttributeEvent()"], ["com.hazelcast.core.MemberAttributeEvent", "com.hazelcast.core.MemberAttributeEvent(com.hazelcast.core.Cluster, com.hazelcast.core.Member, com.hazelcast.cluster.MemberAttributeOperationType, java.lang.String, java.lang.Object)"], ["com.hazelcast.cluster.MemberAttributeOperationType", "com.hazelcast.core.MemberAttributeEvent.getOperationType()"], ["java.lang.String", "com.hazelcast.core.MemberAttributeEvent.getKey()"], ["java.lang.Object", "com.hazelcast.core.MemberAttributeEvent.getValue()"], ["com.hazelcast.core.Member", "com.hazelcast.core.MemberAttributeEvent.getMember()"], ["void", "com.hazelcast.core.MemberAttributeEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.core.MemberAttributeEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.core.IndeterminateOperationStateException", "com.hazelcast.core.IndeterminateOperationStateException()"], ["com.hazelcast.core.IndeterminateOperationStateException", "com.hazelcast.core.IndeterminateOperationStateException(java.lang.String)"], ["com.hazelcast.core.IndeterminateOperationStateException", "com.hazelcast.core.IndeterminateOperationStateException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.core.MembershipAdapter", "com.hazelcast.core.MembershipAdapter()"], ["void", "com.hazelcast.core.MembershipAdapter.memberAdded(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.core.MembershipAdapter.memberRemoved(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.core.MembershipAdapter.memberAttributeChanged(com.hazelcast.core.MemberAttributeEvent)"], ["com.hazelcast.core.MembershipEvent", "com.hazelcast.core.MembershipEvent(com.hazelcast.core.Cluster, com.hazelcast.core.Member, int, java.util.Set<com.hazelcast.core.Member>)"], ["com.hazelcast.core.Cluster", "com.hazelcast.core.MembershipEvent.getCluster()"], ["int", "com.hazelcast.core.MembershipEvent.getEventType()"], ["com.hazelcast.core.Member", "com.hazelcast.core.MembershipEvent.getMember()"], ["java.lang.String", "com.hazelcast.core.MembershipEvent.toString()"], ["com.hazelcast.core.PartitionAwareKey", "com.hazelcast.core.PartitionAwareKey(K, P)"], ["K", "com.hazelcast.core.PartitionAwareKey.getKey()"], ["P", "com.hazelcast.core.PartitionAwareKey.getPartitionKey()"], ["void", "com.hazelcast.core.PartitionAwareKey.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.core.PartitionAwareKey.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.core.PartitionAwareKey.equals(java.lang.Object)"], ["int", "com.hazelcast.core.PartitionAwareKey.hashCode()"], ["java.lang.String", "com.hazelcast.core.PartitionAwareKey.toString()"], ["com.hazelcast.core.DistributedObjectEvent", "com.hazelcast.core.DistributedObjectEvent(com.hazelcast.core.DistributedObjectEvent$EventType, java.lang.String, java.lang.String, com.hazelcast.core.DistributedObject)"], ["java.lang.String", "com.hazelcast.core.DistributedObjectEvent.getServiceName()"], ["com.hazelcast.core.DistributedObjectEvent$EventType", "com.hazelcast.core.DistributedObjectEvent.getEventType()"], ["java.lang.Object", "com.hazelcast.core.DistributedObjectEvent.getObjectId()"], ["java.lang.Object", "com.hazelcast.core.DistributedObjectEvent.getObjectName()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.core.DistributedObjectEvent.getDistributedObject()"], ["java.lang.String", "com.hazelcast.core.DistributedObjectEvent.toString()"], ["com.hazelcast.core.DistributedObjectEvent$EventType[]", "com.hazelcast.core.DistributedObjectEvent$EventType.values()"], ["com.hazelcast.core.DistributedObjectEvent$EventType", "com.hazelcast.core.DistributedObjectEvent$EventType.valueOf(java.lang.String)"], ["com.hazelcast.core.ItemEvent", "com.hazelcast.core.ItemEvent(java.lang.String, com.hazelcast.core.ItemEventType, E, com.hazelcast.core.Member)"], ["com.hazelcast.core.ItemEventType", "com.hazelcast.core.ItemEvent.getEventType()"], ["E", "com.hazelcast.core.ItemEvent.getItem()"], ["com.hazelcast.core.Member", "com.hazelcast.core.ItemEvent.getMember()"], ["java.lang.String", "com.hazelcast.core.ItemEvent.toString()"], ["com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService.reset()"], ["void", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService.shutdown(boolean)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService.destroyDistributedObject(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalFlakeIdGeneratorStats>", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService.getStats()"], ["void", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService.updateStatsForBatch(java.lang.String, int)"], ["void", "com.hazelcast.flakeidgen.impl.NewIdBatchOperation.run()"], ["boolean", "com.hazelcast.flakeidgen.impl.NewIdBatchOperation.returnsResponse()"], ["java.lang.String", "com.hazelcast.flakeidgen.impl.NewIdBatchOperation.getServiceName()"], ["int", "com.hazelcast.flakeidgen.impl.NewIdBatchOperation.getFactoryId()"], ["int", "com.hazelcast.flakeidgen.impl.NewIdBatchOperation.getId()"], ["com.hazelcast.flakeidgen.impl.NodeIdOutOfRangeException", "com.hazelcast.flakeidgen.impl.NodeIdOutOfRangeException(java.lang.String)"], ["com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorService$1.createNew(java.lang.Object)"], ["com.hazelcast.flakeidgen.impl.AutoBatcher", "com.hazelcast.flakeidgen.impl.AutoBatcher(int, long, com.hazelcast.flakeidgen.impl.AutoBatcher$IdBatchSupplier)"], ["long", "com.hazelcast.flakeidgen.impl.AutoBatcher.newId()"], ["void", "com.hazelcast.flakeidgen.impl.client.NewIdBatchMessageTask$1.run()"], ["com.hazelcast.flakeidgen.impl.client.NewIdBatchMessageTask", "com.hazelcast.flakeidgen.impl.client.NewIdBatchMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.flakeidgen.impl.client.NewIdBatchMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.flakeidgen.impl.client.NewIdBatchMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.flakeidgen.impl.client.NewIdBatchMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.flakeidgen.impl.client.NewIdBatchMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.flakeidgen.impl.client.NewIdBatchMessageTask.getParameters()"], ["long", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorProxy.newId()"], ["boolean", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorProxy.init(long)"], ["com.hazelcast.flakeidgen.impl.FlakeIdGeneratorProxy$IdBatchAndWaitTime", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorProxy.newIdBatch(int)"], ["java.lang.String", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorProxy.getName()"], ["java.lang.String", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorProxy.getServiceName()"], ["com.hazelcast.flakeidgen.impl.FlakeIdGeneratorDataSerializerHook", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorDataSerializerHook()"], ["int", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorDataSerializerHook.createFactory()"], ["com.hazelcast.flakeidgen.impl.IdBatch", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorProxy$1.newIdBatch(int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorDataSerializerHook$1.create(int)"], ["boolean", "com.hazelcast.flakeidgen.impl.IdBatch$1.hasNext()"], ["java.lang.Long", "com.hazelcast.flakeidgen.impl.IdBatch$1.next()"], ["void", "com.hazelcast.flakeidgen.impl.IdBatch$1.remove()"], ["java.lang.Object", "com.hazelcast.flakeidgen.impl.IdBatch$1.next()"], ["com.hazelcast.flakeidgen.impl.IdBatch", "com.hazelcast.flakeidgen.impl.IdBatch(long, long, int)"], ["long", "com.hazelcast.flakeidgen.impl.IdBatch.base()"], ["long", "com.hazelcast.flakeidgen.impl.IdBatch.increment()"], ["int", "com.hazelcast.flakeidgen.impl.IdBatch.batchSize()"], ["void", "com.hazelcast.flakeidgen.impl.NewIdBatchOperation$1.run()"], ["com.hazelcast.ringbuffer.impl.RingbufferDataSerializerHook", "com.hazelcast.ringbuffer.impl.RingbufferDataSerializerHook()"], ["int", "com.hazelcast.ringbuffer.impl.RingbufferDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.ringbuffer.impl.RingbufferDataSerializerHook.createFactory()"], ["com.hazelcast.ringbuffer.impl.RingbufferContainer", "com.hazelcast.ringbuffer.impl.RingbufferContainer()"], ["com.hazelcast.ringbuffer.impl.RingbufferContainer", "com.hazelcast.ringbuffer.impl.RingbufferContainer(com.hazelcast.spi.ObjectNamespace, int)"], ["com.hazelcast.ringbuffer.impl.RingbufferContainer", "com.hazelcast.ringbuffer.impl.RingbufferContainer(com.hazelcast.spi.ObjectNamespace, com.hazelcast.config.RingbufferConfig, com.hazelcast.spi.NodeEngine, int)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.init(com.hazelcast.config.RingbufferConfig, com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper", "com.hazelcast.ringbuffer.impl.RingbufferContainer.getStore()"], ["com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey", "com.hazelcast.ringbuffer.impl.RingbufferContainer.getRingEmptyWaitNotifyKey()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.ringbuffer.impl.RingbufferContainer.getConfig()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferContainer.tailSequence()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferContainer.headSequence()"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.setHeadSequence(long)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.setTailSequence(long)"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferContainer.getCapacity()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferContainer.size()"], ["boolean", "com.hazelcast.ringbuffer.impl.RingbufferContainer.isEmpty()"], ["boolean", "com.hazelcast.ringbuffer.impl.RingbufferContainer.shouldWait(long)"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferContainer.remainingCapacity()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferContainer.add(T)"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferContainer.addAll(T[])"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.set(long, T)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.ringbuffer.impl.RingbufferContainer.readAsData(long)"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferContainer.readMany(long, com.hazelcast.ringbuffer.impl.ReadResultSetImpl)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.cleanup()"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.checkBlockableReadSequence(long)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.ringbuffer.impl.RingbufferContainer.getNamespace()"], ["int", "com.hazelcast.ringbuffer.impl.RingbufferContainer.getFactoryId()"], ["int", "com.hazelcast.ringbuffer.impl.RingbufferContainer.getId()"], ["boolean", "com.hazelcast.ringbuffer.impl.RingbufferContainer.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.ringbuffer.impl.RingbufferContainer.getNotifiedKey()"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferContainer.clear()"], ["com.hazelcast.ringbuffer.impl.operations.AddAllBackupOperation", "com.hazelcast.ringbuffer.impl.operations.AddAllBackupOperation()"], ["com.hazelcast.ringbuffer.impl.operations.AddAllBackupOperation", "com.hazelcast.ringbuffer.impl.operations.AddAllBackupOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data[])"], ["void", "com.hazelcast.ringbuffer.impl.operations.AddAllBackupOperation.run()"], ["int", "com.hazelcast.ringbuffer.impl.operations.AddAllBackupOperation.getId()"], ["com.hazelcast.ringbuffer.impl.operations.MergeBackupOperation", "com.hazelcast.ringbuffer.impl.operations.MergeBackupOperation()"], ["void", "com.hazelcast.ringbuffer.impl.operations.MergeBackupOperation.run()"], ["int", "com.hazelcast.ringbuffer.impl.operations.MergeBackupOperation.getId()"], ["com.hazelcast.ringbuffer.impl.operations.AddBackupOperation", "com.hazelcast.ringbuffer.impl.operations.AddBackupOperation()"], ["com.hazelcast.ringbuffer.impl.operations.AddBackupOperation", "com.hazelcast.ringbuffer.impl.operations.AddBackupOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.ringbuffer.impl.operations.AddBackupOperation.run()"], ["int", "com.hazelcast.ringbuffer.impl.operations.AddBackupOperation.getId()"], ["com.hazelcast.ringbuffer.impl.operations.ReadManyOperation", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation()"], ["com.hazelcast.ringbuffer.impl.operations.ReadManyOperation", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation(java.lang.String, long, int, int, com.hazelcast.core.IFunction<O, java.lang.Boolean>)"], ["void", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation.beforeRun()"], ["boolean", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation.shouldWait()"], ["void", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation.run()"], ["java.lang.Object", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation.getResponse()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation.getWaitKey()"], ["void", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation.onWaitExpire()"], ["int", "com.hazelcast.ringbuffer.impl.operations.ReadManyOperation.getId()"], ["com.hazelcast.ringbuffer.impl.operations.MergeOperation", "com.hazelcast.ringbuffer.impl.operations.MergeOperation()"], ["com.hazelcast.ringbuffer.impl.operations.MergeOperation", "com.hazelcast.ringbuffer.impl.operations.MergeOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.spi.merge.RingbufferMergeData, com.hazelcast.spi.merge.SplitBrainMergeTypes$RingbufferMergeTypes>, com.hazelcast.ringbuffer.impl.Ringbuffer<java.lang.Object>)"], ["void", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.beforeRun()"], ["void", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.run()"], ["boolean", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.shouldBackup()"], ["int", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.getSyncBackupCount()"], ["int", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.getBackupOperation()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.getServiceNamespace()"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.getServiceName()"], ["int", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.getFactoryId()"], ["int", "com.hazelcast.ringbuffer.impl.operations.MergeOperation.getId()"], ["com.hazelcast.ringbuffer.impl.operations.AddAllOperation", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation()"], ["com.hazelcast.ringbuffer.impl.operations.AddAllOperation", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation(java.lang.String, com.hazelcast.nio.serialization.Data[], com.hazelcast.ringbuffer.OverflowPolicy)"], ["void", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.run()"], ["java.lang.Object", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.getResponse()"], ["boolean", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.getNotifiedKey()"], ["boolean", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.shouldBackup()"], ["int", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.getSyncBackupCount()"], ["int", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.getBackupOperation()"], ["int", "com.hazelcast.ringbuffer.impl.operations.AddAllOperation.getId()"], ["com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation", "com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation()"], ["com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation", "com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation(java.lang.String)"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation.getServiceName()"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation.getName()"], ["void", "com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation.logError(java.lang.Throwable)"], ["int", "com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation.getFactoryId()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation.getServiceNamespace()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.ringbuffer.impl.operations.AbstractRingBufferOperation.getServiceNamespace()"], ["com.hazelcast.ringbuffer.impl.operations.ReadOneOperation", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation()"], ["com.hazelcast.ringbuffer.impl.operations.ReadOneOperation", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation(java.lang.String, long)"], ["void", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation.beforeRun()"], ["boolean", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation.shouldWait()"], ["void", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation.run()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation.getWaitKey()"], ["void", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation.onWaitExpire()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation.getResponse()"], ["int", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation.getId()"], ["java.lang.Object", "com.hazelcast.ringbuffer.impl.operations.ReadOneOperation.getResponse()"], ["com.hazelcast.ringbuffer.impl.operations.GenericOperation", "com.hazelcast.ringbuffer.impl.operations.GenericOperation()"], ["com.hazelcast.ringbuffer.impl.operations.GenericOperation", "com.hazelcast.ringbuffer.impl.operations.GenericOperation(java.lang.String, byte)"], ["void", "com.hazelcast.ringbuffer.impl.operations.GenericOperation.run()"], ["java.lang.Long", "com.hazelcast.ringbuffer.impl.operations.GenericOperation.getResponse()"], ["int", "com.hazelcast.ringbuffer.impl.operations.GenericOperation.getId()"], ["java.lang.Object", "com.hazelcast.ringbuffer.impl.operations.GenericOperation.getResponse()"], ["com.hazelcast.ringbuffer.impl.operations.AddOperation", "com.hazelcast.ringbuffer.impl.operations.AddOperation()"], ["com.hazelcast.ringbuffer.impl.operations.AddOperation", "com.hazelcast.ringbuffer.impl.operations.AddOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.ringbuffer.OverflowPolicy)"], ["void", "com.hazelcast.ringbuffer.impl.operations.AddOperation.run()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.ringbuffer.impl.operations.AddOperation.getNotifiedKey()"], ["boolean", "com.hazelcast.ringbuffer.impl.operations.AddOperation.shouldNotify()"], ["boolean", "com.hazelcast.ringbuffer.impl.operations.AddOperation.shouldBackup()"], ["int", "com.hazelcast.ringbuffer.impl.operations.AddOperation.getSyncBackupCount()"], ["int", "com.hazelcast.ringbuffer.impl.operations.AddOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.ringbuffer.impl.operations.AddOperation.getBackupOperation()"], ["java.lang.Long", "com.hazelcast.ringbuffer.impl.operations.AddOperation.getResponse()"], ["int", "com.hazelcast.ringbuffer.impl.operations.AddOperation.getId()"], ["java.lang.Object", "com.hazelcast.ringbuffer.impl.operations.AddOperation.getResponse()"], ["com.hazelcast.ringbuffer.impl.operations.ReplicationOperation", "com.hazelcast.ringbuffer.impl.operations.ReplicationOperation()"], ["com.hazelcast.ringbuffer.impl.operations.ReplicationOperation", "com.hazelcast.ringbuffer.impl.operations.ReplicationOperation(java.util.Map<com.hazelcast.spi.ObjectNamespace, com.hazelcast.ringbuffer.impl.RingbufferContainer>, int, int)"], ["void", "com.hazelcast.ringbuffer.impl.operations.ReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.operations.ReplicationOperation.getServiceName()"], ["int", "com.hazelcast.ringbuffer.impl.operations.ReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.ringbuffer.impl.operations.ReplicationOperation.getId()"], ["void", "com.hazelcast.ringbuffer.impl.LatencyTrackingRingbufferStore.store(long, T)"], ["void", "com.hazelcast.ringbuffer.impl.LatencyTrackingRingbufferStore.storeAll(long, T[])"], ["T", "com.hazelcast.ringbuffer.impl.LatencyTrackingRingbufferStore.load(long)"], ["long", "com.hazelcast.ringbuffer.impl.LatencyTrackingRingbufferStore.getLargestSequence()"], ["java.lang.Object", "com.hazelcast.ringbuffer.impl.RingbufferService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.ringbuffer.impl.RingbufferService$1.createNew(java.lang.Object)"], ["com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.create(com.hazelcast.spi.ObjectNamespace, com.hazelcast.config.RingbufferStoreConfig, com.hazelcast.config.InMemoryFormat, com.hazelcast.spi.serialization.SerializationService, java.lang.ClassLoader)"], ["boolean", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.isEnabled()"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.store(long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.storeAll(long, com.hazelcast.nio.serialization.Data[])"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.load(long)"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.getLargestSequence()"], ["java.lang.Object", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.load(long)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.storeAll(long, java.lang.Object[])"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferStoreWrapper.store(long, java.lang.Object)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService$Merger.runInternal()"], ["com.hazelcast.ringbuffer.impl.ArrayRingbuffer", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer(int)"], ["long", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.tailSequence()"], ["long", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.peekNextTailSequence()"], ["void", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.setTailSequence(long)"], ["long", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.headSequence()"], ["void", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.setHeadSequence(long)"], ["long", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.getCapacity()"], ["long", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.size()"], ["boolean", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.isEmpty()"], ["long", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.add(E)"], ["E", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.read(long)"], ["void", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.checkBlockableReadSequence(long)"], ["void", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.checkReadSequence(long)"], ["void", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.set(long, E)"], ["void", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.clear()"], ["E[]", "com.hazelcast.ringbuffer.impl.ArrayRingbuffer.getItems()"], ["com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey", "com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey(com.hazelcast.spi.ObjectNamespace, int)"], ["boolean", "com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey.equals(java.lang.Object)"], ["int", "com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey.hashCode()"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey.toString()"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey.getServiceName()"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey.getObjectName()"], ["com.hazelcast.ringbuffer.impl.RingbufferService", "com.hazelcast.ringbuffer.impl.RingbufferService(com.hazelcast.spi.impl.NodeEngineImpl)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["java.util.concurrent.ConcurrentMap<java.lang.Integer, java.util.Map<com.hazelcast.spi.ObjectNamespace, com.hazelcast.ringbuffer.impl.RingbufferContainer>>", "com.hazelcast.ringbuffer.impl.RingbufferService.getContainers()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.ringbuffer.impl.RingbufferService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.destroyContainer(int, com.hazelcast.spi.ObjectNamespace)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.reset()"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.shutdown(boolean)"], ["<T, E> com.hazelcast.ringbuffer.impl.RingbufferContainer<T, E>", "com.hazelcast.ringbuffer.impl.RingbufferService.getOrCreateContainer(int, com.hazelcast.spi.ObjectNamespace, com.hazelcast.config.RingbufferConfig)"], ["<T, E> com.hazelcast.ringbuffer.impl.RingbufferContainer<T, E>", "com.hazelcast.ringbuffer.impl.RingbufferService.getContainerOrNull(int, com.hazelcast.spi.ObjectNamespace)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.ringbuffer.impl.RingbufferService.getRingbufferConfig(java.lang.String)"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.ringbuffer.impl.RingbufferService.getRingbufferNamespace(java.lang.String)"], ["int", "com.hazelcast.ringbuffer.impl.RingbufferService.getRingbufferPartitionId(java.lang.String)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.addRingbuffer(int, com.hazelcast.ringbuffer.impl.RingbufferContainer, com.hazelcast.config.RingbufferConfig)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.ringbuffer.impl.RingbufferService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.ringbuffer.impl.RingbufferService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent, java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["boolean", "com.hazelcast.ringbuffer.impl.RingbufferService.isKnownServiceNamespace(com.hazelcast.spi.ServiceNamespace)"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.RingbufferService.getQuorumName(java.lang.String)"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferService.ensureQuorumPresent(java.lang.String, com.hazelcast.quorum.QuorumType)"], ["java.lang.Runnable", "com.hazelcast.ringbuffer.impl.RingbufferService.prepareMergeRunnable()"], ["void", "com.hazelcast.ringbuffer.impl.RingbufferExpirationPolicy.clear()"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.ringbuffer.impl.client.RingbufferPortableHook$1.create(int)"], ["com.hazelcast.ringbuffer.impl.client.PortableReadResultSet", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet()"], ["com.hazelcast.ringbuffer.impl.client.PortableReadResultSet", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet(int, java.util.List<com.hazelcast.nio.serialization.Data>, long[], long)"], ["void", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["int", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.readCount()"], ["E", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.get(int)"], ["long", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.getSequence(int)"], ["int", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.size()"], ["long", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.getNextSequenceToReadFrom()"], ["int", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.getFactoryId()"], ["int", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.getClassId()"], ["void", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.ringbuffer.impl.client.PortableReadResultSet.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["com.hazelcast.ringbuffer.impl.client.RingbufferPortableHook", "com.hazelcast.ringbuffer.impl.client.RingbufferPortableHook()"], ["int", "com.hazelcast.ringbuffer.impl.client.RingbufferPortableHook.getFactoryId()"], ["com.hazelcast.nio.serialization.PortableFactory", "com.hazelcast.ringbuffer.impl.client.RingbufferPortableHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.ringbuffer.impl.RingbufferDataSerializerHook$1.create(int)"], ["com.hazelcast.ringbuffer.impl.ReadResultSetImpl", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl()"], ["com.hazelcast.ringbuffer.impl.ReadResultSetImpl", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl(int, int, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.core.IFunction<O, java.lang.Boolean>)"], ["com.hazelcast.ringbuffer.impl.ReadResultSetImpl", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl(int, int, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.util.function.Predicate<? super O>, com.hazelcast.projection.Projection<? super O, E>)"], ["boolean", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.isMaxSizeReached()"], ["boolean", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.isMinSizeReached()"], ["com.hazelcast.nio.serialization.Data[]", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.getDataItems()"], ["int", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.readCount()"], ["void", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["E", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.get(int)"], ["long", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.getSequence(int)"], ["void", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.addItem(long, java.lang.Object)"], ["boolean", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.add(java.lang.Object)"], ["int", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.size()"], ["int", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.getFactoryId()"], ["int", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.getId()"], ["long", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.getNextSequenceToReadFrom()"], ["void", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.setNextSequenceToReadFrom(long)"], ["void", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.ringbuffer.impl.ReadResultSetImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.ringbuffer.impl.RingbufferProxy", "com.hazelcast.ringbuffer.impl.RingbufferProxy(com.hazelcast.spi.NodeEngine, com.hazelcast.ringbuffer.impl.RingbufferService, java.lang.String, com.hazelcast.config.RingbufferConfig)"], ["int", "com.hazelcast.ringbuffer.impl.RingbufferProxy.getPartitionId()"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.RingbufferProxy.getName()"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.RingbufferProxy.getServiceName()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferProxy.capacity()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferProxy.size()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferProxy.tailSequence()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferProxy.headSequence()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferProxy.remainingCapacity()"], ["long", "com.hazelcast.ringbuffer.impl.RingbufferProxy.add(E)"], ["E", "com.hazelcast.ringbuffer.impl.RingbufferProxy.readOne(long)"], ["java.lang.String", "com.hazelcast.ringbuffer.impl.RingbufferProxy.toString()"], ["boolean", "com.hazelcast.ringbuffer.impl.ReadOnlyRingbufferIterator.hasNext()"], ["E", "com.hazelcast.ringbuffer.impl.ReadOnlyRingbufferIterator.next()"], ["void", "com.hazelcast.ringbuffer.impl.ReadOnlyRingbufferIterator.remove()"], ["com.hazelcast.ringbuffer.StaleSequenceException", "com.hazelcast.ringbuffer.StaleSequenceException(java.lang.String, long)"], ["long", "com.hazelcast.ringbuffer.StaleSequenceException.getHeadSeq()"], ["com.hazelcast.ringbuffer.OverflowPolicy[]", "com.hazelcast.ringbuffer.OverflowPolicy.values()"], ["com.hazelcast.ringbuffer.OverflowPolicy", "com.hazelcast.ringbuffer.OverflowPolicy.valueOf(java.lang.String)"], ["int", "com.hazelcast.ringbuffer.OverflowPolicy.getId()"], ["com.hazelcast.ringbuffer.OverflowPolicy", "com.hazelcast.ringbuffer.OverflowPolicy.getById(int)"], ["java.lang.String", "com.hazelcast.console.DefaultLineReader.readLine()"], ["com.hazelcast.console.SimulateLoadTask", "com.hazelcast.console.SimulateLoadTask(int, int, java.lang.String)"], ["void", "com.hazelcast.console.SimulateLoadTask.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["java.lang.Object", "com.hazelcast.console.SimulateLoadTask.call()"], ["com.hazelcast.console.ConsoleApp", "com.hazelcast.console.ConsoleApp(com.hazelcast.core.HazelcastInstance)"], ["com.hazelcast.core.IMap<java.lang.Object, java.lang.Object>", "com.hazelcast.console.ConsoleApp.getMap()"], ["com.hazelcast.core.MultiMap<java.lang.Object, java.lang.Object>", "com.hazelcast.console.ConsoleApp.getMultiMap()"], ["com.hazelcast.core.IAtomicLong", "com.hazelcast.console.ConsoleApp.getAtomicNumber()"], ["void", "com.hazelcast.console.ConsoleApp.setHazelcast(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.console.ConsoleApp.stop()"], ["void", "com.hazelcast.console.ConsoleApp.start()"], ["void", "com.hazelcast.console.ConsoleApp.handleCommand(java.lang.String)"], ["void", "com.hazelcast.console.ConsoleApp.entryAdded(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.console.ConsoleApp.entryRemoved(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.console.ConsoleApp.entryUpdated(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.console.ConsoleApp.entryEvicted(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.console.ConsoleApp.mapEvicted(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.console.ConsoleApp.mapCleared(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.console.ConsoleApp.itemAdded(com.hazelcast.core.ItemEvent)"], ["void", "com.hazelcast.console.ConsoleApp.itemRemoved(com.hazelcast.core.ItemEvent)"], ["void", "com.hazelcast.console.ConsoleApp.onMessage(com.hazelcast.core.Message)"], ["void", "com.hazelcast.console.ConsoleApp.println(java.lang.Object)"], ["void", "com.hazelcast.console.ConsoleApp.print(java.lang.Object)"], ["void", "com.hazelcast.console.ConsoleApp.main(java.lang.String[])"], ["void", "com.hazelcast.console.ConsoleApp$1.run()"], ["com.hazelcast.console.Echo", "com.hazelcast.console.Echo()"], ["com.hazelcast.console.Echo", "com.hazelcast.console.Echo(java.lang.String)"], ["java.lang.String", "com.hazelcast.console.Echo.call()"], ["void", "com.hazelcast.console.Echo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.console.Echo.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.console.Echo.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["java.lang.Object", "com.hazelcast.console.Echo.call()"], ["long", "com.hazelcast.memory.MemoryUnit$3.convert(long, com.hazelcast.memory.MemoryUnit)"], ["long", "com.hazelcast.memory.MemoryUnit$3.toBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$3.toKiloBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$3.toMegaBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$3.toGigaBytes(long)"], ["com.hazelcast.memory.MemorySize", "com.hazelcast.memory.MemorySize(long)"], ["com.hazelcast.memory.MemorySize", "com.hazelcast.memory.MemorySize(long, com.hazelcast.memory.MemoryUnit)"], ["long", "com.hazelcast.memory.MemorySize.getValue()"], ["com.hazelcast.memory.MemoryUnit", "com.hazelcast.memory.MemorySize.getUnit()"], ["long", "com.hazelcast.memory.MemorySize.bytes()"], ["long", "com.hazelcast.memory.MemorySize.kiloBytes()"], ["long", "com.hazelcast.memory.MemorySize.megaBytes()"], ["long", "com.hazelcast.memory.MemorySize.gigaBytes()"], ["com.hazelcast.memory.MemorySize", "com.hazelcast.memory.MemorySize.parse(java.lang.String)"], ["com.hazelcast.memory.MemorySize", "com.hazelcast.memory.MemorySize.parse(java.lang.String, com.hazelcast.memory.MemoryUnit)"], ["java.lang.String", "com.hazelcast.memory.MemorySize.toPrettyString()"], ["java.lang.String", "com.hazelcast.memory.MemorySize.toString()"], ["java.lang.String", "com.hazelcast.memory.MemorySize.toPrettyString(long)"], ["java.lang.String", "com.hazelcast.memory.MemorySize.toPrettyString(long, com.hazelcast.memory.MemoryUnit)"], ["boolean", "com.hazelcast.memory.MemorySize.equals(java.lang.Object)"], ["int", "com.hazelcast.memory.MemorySize.hashCode()"], ["com.hazelcast.memory.NativeOutOfMemoryError", "com.hazelcast.memory.NativeOutOfMemoryError()"], ["com.hazelcast.memory.NativeOutOfMemoryError", "com.hazelcast.memory.NativeOutOfMemoryError(java.lang.String)"], ["com.hazelcast.memory.NativeOutOfMemoryError", "com.hazelcast.memory.NativeOutOfMemoryError(java.lang.String, java.lang.Throwable)"], ["long", "com.hazelcast.memory.MemoryUnit$4.convert(long, com.hazelcast.memory.MemoryUnit)"], ["long", "com.hazelcast.memory.MemoryUnit$4.toBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$4.toKiloBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$4.toMegaBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$4.toGigaBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$1.convert(long, com.hazelcast.memory.MemoryUnit)"], ["long", "com.hazelcast.memory.MemoryUnit$1.toBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$1.toKiloBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$1.toMegaBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$1.toGigaBytes(long)"], ["com.hazelcast.memory.DefaultGarbageCollectorStats", "com.hazelcast.memory.DefaultGarbageCollectorStats()"], ["long", "com.hazelcast.memory.DefaultGarbageCollectorStats.getMajorCollectionCount()"], ["long", "com.hazelcast.memory.DefaultGarbageCollectorStats.getMajorCollectionTime()"], ["long", "com.hazelcast.memory.DefaultGarbageCollectorStats.getMinorCollectionCount()"], ["long", "com.hazelcast.memory.DefaultGarbageCollectorStats.getMinorCollectionTime()"], ["long", "com.hazelcast.memory.DefaultGarbageCollectorStats.getUnknownCollectionCount()"], ["long", "com.hazelcast.memory.DefaultGarbageCollectorStats.getUnknownCollectionTime()"], ["java.lang.String", "com.hazelcast.memory.DefaultGarbageCollectorStats.toString()"], ["com.hazelcast.memory.GarbageCollectorStats", "com.hazelcast.memory.GCStatsSupport.getGCStats()"], ["long", "com.hazelcast.memory.MemoryUnit$2.convert(long, com.hazelcast.memory.MemoryUnit)"], ["long", "com.hazelcast.memory.MemoryUnit$2.toBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$2.toKiloBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$2.toMegaBytes(long)"], ["long", "com.hazelcast.memory.MemoryUnit$2.toGigaBytes(long)"], ["com.hazelcast.memory.MemoryUnit[]", "com.hazelcast.memory.MemoryUnit.values()"], ["com.hazelcast.memory.MemoryUnit", "com.hazelcast.memory.MemoryUnit.valueOf(java.lang.String)"], ["long", "com.hazelcast.memory.MemoryStatsSupport.totalPhysicalMemory()"], ["long", "com.hazelcast.memory.MemoryStatsSupport.freePhysicalMemory()"], ["long", "com.hazelcast.memory.MemoryStatsSupport.totalSwapSpace()"], ["long", "com.hazelcast.memory.MemoryStatsSupport.freeSwapSpace()"], ["com.hazelcast.memory.DefaultMemoryStats", "com.hazelcast.memory.DefaultMemoryStats()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getTotalPhysical()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getFreePhysical()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getMaxHeap()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getCommittedHeap()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getUsedHeap()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getFreeHeap()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getMaxNative()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getCommittedNative()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getUsedNative()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getFreeNative()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getMaxMetadata()"], ["long", "com.hazelcast.memory.DefaultMemoryStats.getUsedMetadata()"], ["com.hazelcast.memory.GarbageCollectorStats", "com.hazelcast.memory.DefaultMemoryStats.getGCStats()"], ["java.lang.String", "com.hazelcast.memory.DefaultMemoryStats.toString()"], ["com.hazelcast.monitor.TimedMemberState", "com.hazelcast.monitor.TimedMemberState()"], ["void", "com.hazelcast.monitor.TimedMemberState.setMemberList(java.util.List<java.lang.String>)"], ["boolean", "com.hazelcast.monitor.TimedMemberState.isMaster()"], ["void", "com.hazelcast.monitor.TimedMemberState.setMaster(boolean)"], ["java.lang.String", "com.hazelcast.monitor.TimedMemberState.getClusterName()"], ["void", "com.hazelcast.monitor.TimedMemberState.setClusterName(java.lang.String)"], ["void", "com.hazelcast.monitor.TimedMemberState.setTime(long)"], ["long", "com.hazelcast.monitor.TimedMemberState.getTime()"], ["com.hazelcast.monitor.impl.MemberStateImpl", "com.hazelcast.monitor.TimedMemberState.getMemberState()"], ["void", "com.hazelcast.monitor.TimedMemberState.setMemberState(com.hazelcast.monitor.impl.MemberStateImpl)"], ["boolean", "com.hazelcast.monitor.TimedMemberState.isSslEnabled()"], ["void", "com.hazelcast.monitor.TimedMemberState.setSslEnabled(boolean)"], ["boolean", "com.hazelcast.monitor.TimedMemberState.isLite()"], ["void", "com.hazelcast.monitor.TimedMemberState.setLite(boolean)"], ["boolean", "com.hazelcast.monitor.TimedMemberState.isSocketInterceptorEnabled()"], ["void", "com.hazelcast.monitor.TimedMemberState.setSocketInterceptorEnabled(boolean)"], ["com.hazelcast.monitor.TimedMemberState", "com.hazelcast.monitor.TimedMemberState.clone()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.TimedMemberState.toJson()"], ["void", "com.hazelcast.monitor.TimedMemberState.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.TimedMemberState.toString()"], ["java.lang.Object", "com.hazelcast.monitor.TimedMemberState.clone()"], ["com.hazelcast.monitor.impl.NodeStateImpl", "com.hazelcast.monitor.impl.NodeStateImpl()"], ["com.hazelcast.monitor.impl.NodeStateImpl", "com.hazelcast.monitor.impl.NodeStateImpl(com.hazelcast.cluster.ClusterState, com.hazelcast.instance.NodeState, com.hazelcast.version.Version, com.hazelcast.version.MemberVersion)"], ["com.hazelcast.monitor.impl.NodeStateImpl", "com.hazelcast.monitor.impl.NodeStateImpl(com.hazelcast.cluster.ClusterState, com.hazelcast.instance.NodeState, com.hazelcast.version.Version, com.hazelcast.version.MemberVersion, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"], ["com.hazelcast.cluster.ClusterState", "com.hazelcast.monitor.impl.NodeStateImpl.getClusterState()"], ["com.hazelcast.instance.NodeState", "com.hazelcast.monitor.impl.NodeStateImpl.getNodeState()"], ["com.hazelcast.version.Version", "com.hazelcast.monitor.impl.NodeStateImpl.getClusterVersion()"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.monitor.impl.NodeStateImpl.getMemberVersion()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.NodeStateImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.NodeStateImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.NodeStateImpl.toString()"], ["com.hazelcast.monitor.impl.LocalGCStatsImpl", "com.hazelcast.monitor.impl.LocalGCStatsImpl()"], ["com.hazelcast.monitor.impl.LocalGCStatsImpl", "com.hazelcast.monitor.impl.LocalGCStatsImpl(com.hazelcast.memory.GarbageCollectorStats)"], ["long", "com.hazelcast.monitor.impl.LocalGCStatsImpl.getMajorCollectionCount()"], ["long", "com.hazelcast.monitor.impl.LocalGCStatsImpl.getMajorCollectionTime()"], ["long", "com.hazelcast.monitor.impl.LocalGCStatsImpl.getMinorCollectionCount()"], ["long", "com.hazelcast.monitor.impl.LocalGCStatsImpl.getMinorCollectionTime()"], ["long", "com.hazelcast.monitor.impl.LocalGCStatsImpl.getUnknownCollectionCount()"], ["long", "com.hazelcast.monitor.impl.LocalGCStatsImpl.getUnknownCollectionTime()"], ["void", "com.hazelcast.monitor.impl.LocalGCStatsImpl.setMinorCount(long)"], ["void", "com.hazelcast.monitor.impl.LocalGCStatsImpl.setMinorTime(long)"], ["void", "com.hazelcast.monitor.impl.LocalGCStatsImpl.setMajorCount(long)"], ["void", "com.hazelcast.monitor.impl.LocalGCStatsImpl.setMajorTime(long)"], ["void", "com.hazelcast.monitor.impl.LocalGCStatsImpl.setUnknownCount(long)"], ["void", "com.hazelcast.monitor.impl.LocalGCStatsImpl.setUnknownTime(long)"], ["long", "com.hazelcast.monitor.impl.LocalGCStatsImpl.getCreationTime()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalGCStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalGCStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalGCStatsImpl.toString()"], ["com.hazelcast.monitor.impl.LocalExecutorStatsImpl", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl()"], ["void", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.startPending()"], ["void", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.startExecution(long)"], ["void", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.finishExecution(long)"], ["void", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.rejectExecution()"], ["void", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.cancelExecution()"], ["long", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.getCreationTime()"], ["long", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.getPendingTaskCount()"], ["long", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.getStartedTaskCount()"], ["long", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.getCompletedTaskCount()"], ["long", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.getCancelledTaskCount()"], ["long", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.getTotalStartLatency()"], ["long", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.getTotalExecutionLatency()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalExecutorStatsImpl.toString()"], ["com.hazelcast.monitor.impl.LocalTopicStatsImpl", "com.hazelcast.monitor.impl.LocalTopicStatsImpl()"], ["long", "com.hazelcast.monitor.impl.LocalTopicStatsImpl.getCreationTime()"], ["long", "com.hazelcast.monitor.impl.LocalTopicStatsImpl.getPublishOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalTopicStatsImpl.incrementPublishes()"], ["long", "com.hazelcast.monitor.impl.LocalTopicStatsImpl.getReceiveOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalTopicStatsImpl.incrementReceives()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalTopicStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalTopicStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalTopicStatsImpl.toString()"], ["com.hazelcast.monitor.impl.LocalQueueStatsImpl", "com.hazelcast.monitor.impl.LocalQueueStatsImpl()"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getMinAge()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.setMinAge(long)"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getMaxAge()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.setMaxAge(long)"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getAvgAge()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.setAveAge(long)"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getOwnedItemCount()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.setOwnedItemCount(int)"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getBackupItemCount()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.setBackupItemCount(int)"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getCreationTime()"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.total()"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getOfferOperationCount()"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getRejectedOfferOperationCount()"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getPollOperationCount()"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getEmptyPollOperationCount()"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getOtherOperationsCount()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.incrementOtherOperations()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.incrementOffers()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.incrementRejectedOffers()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.incrementPolls()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.incrementEmptyPolls()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.incrementReceivedEvents()"], ["long", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.getEventOperationCount()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalQueueStatsImpl.toString()"], ["com.hazelcast.monitor.impl.HotRestartStateImpl", "com.hazelcast.monitor.impl.HotRestartStateImpl()"], ["com.hazelcast.monitor.impl.HotRestartStateImpl", "com.hazelcast.monitor.impl.HotRestartStateImpl(com.hazelcast.hotrestart.BackupTaskStatus, boolean)"], ["com.hazelcast.hotrestart.BackupTaskStatus", "com.hazelcast.monitor.impl.HotRestartStateImpl.getBackupTaskStatus()"], ["boolean", "com.hazelcast.monitor.impl.HotRestartStateImpl.isHotBackupEnabled()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.HotRestartStateImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.HotRestartStateImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.HotRestartStateImpl.toString()"], ["com.hazelcast.monitor.impl.WanSyncStateImpl", "com.hazelcast.monitor.impl.WanSyncStateImpl()"], ["com.hazelcast.monitor.impl.WanSyncStateImpl", "com.hazelcast.monitor.impl.WanSyncStateImpl(com.hazelcast.wan.WanSyncStatus, int, java.lang.String, java.lang.String)"], ["long", "com.hazelcast.monitor.impl.WanSyncStateImpl.getCreationTime()"], ["com.hazelcast.wan.WanSyncStatus", "com.hazelcast.monitor.impl.WanSyncStateImpl.getStatus()"], ["int", "com.hazelcast.monitor.impl.WanSyncStateImpl.getSyncedPartitionCount()"], ["java.lang.String", "com.hazelcast.monitor.impl.WanSyncStateImpl.getActiveWanConfigName()"], ["java.lang.String", "com.hazelcast.monitor.impl.WanSyncStateImpl.getActivePublisherName()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.WanSyncStateImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.WanSyncStateImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.WanSyncStateImpl.toString()"], ["com.hazelcast.monitor.impl.MemberStateImpl", "com.hazelcast.monitor.impl.MemberStateImpl()"], ["java.util.Map<java.lang.String, java.lang.Long>", "com.hazelcast.monitor.impl.MemberStateImpl.getRuntimeProps()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setRuntimeProps(java.util.Map<java.lang.String, java.lang.Long>)"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalMapStats(java.lang.String)"], ["com.hazelcast.monitor.LocalMultiMapStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalMultiMapStats(java.lang.String)"], ["com.hazelcast.monitor.LocalQueueStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalQueueStats(java.lang.String)"], ["com.hazelcast.monitor.LocalTopicStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalTopicStats(java.lang.String)"], ["com.hazelcast.monitor.LocalTopicStats", "com.hazelcast.monitor.impl.MemberStateImpl.getReliableLocalTopicStats(java.lang.String)"], ["com.hazelcast.monitor.LocalPNCounterStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalPNCounterStats(java.lang.String)"], ["com.hazelcast.monitor.LocalReplicatedMapStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalReplicatedMapStats(java.lang.String)"], ["com.hazelcast.monitor.LocalExecutorStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalExecutorStats(java.lang.String)"], ["com.hazelcast.monitor.LocalCacheStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalCacheStats(java.lang.String)"], ["com.hazelcast.monitor.LocalWanStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalWanStats(java.lang.String)"], ["com.hazelcast.monitor.LocalFlakeIdGeneratorStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalFlakeIdGeneratorStats(java.lang.String)"], ["java.lang.String", "com.hazelcast.monitor.impl.MemberStateImpl.getAddress()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setAddress(java.lang.String)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalMapStats(java.lang.String, com.hazelcast.monitor.LocalMapStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalMultiMapStats(java.lang.String, com.hazelcast.monitor.LocalMultiMapStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalQueueStats(java.lang.String, com.hazelcast.monitor.LocalQueueStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalReplicatedMapStats(java.lang.String, com.hazelcast.monitor.LocalReplicatedMapStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalTopicStats(java.lang.String, com.hazelcast.monitor.LocalTopicStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalReliableTopicStats(java.lang.String, com.hazelcast.monitor.LocalTopicStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalPNCounterStats(java.lang.String, com.hazelcast.monitor.LocalPNCounterStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalExecutorStats(java.lang.String, com.hazelcast.monitor.LocalExecutorStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalCacheStats(java.lang.String, com.hazelcast.monitor.LocalCacheStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalWanStats(java.lang.String, com.hazelcast.monitor.LocalWanStats)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.putLocalFlakeIdStats(java.lang.String, com.hazelcast.monitor.LocalFlakeIdGeneratorStats)"], ["com.hazelcast.internal.management.dto.MXBeansDTO", "com.hazelcast.monitor.impl.MemberStateImpl.getMXBeans()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setBeans(com.hazelcast.internal.management.dto.MXBeansDTO)"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setClients(java.util.Collection<com.hazelcast.internal.management.dto.ClientEndPointDTO>)"], ["com.hazelcast.monitor.LocalMemoryStats", "com.hazelcast.monitor.impl.MemberStateImpl.getLocalMemoryStats()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setLocalMemoryStats(com.hazelcast.monitor.LocalMemoryStats)"], ["com.hazelcast.monitor.LocalOperationStats", "com.hazelcast.monitor.impl.MemberStateImpl.getOperationStats()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setOperationStats(com.hazelcast.monitor.LocalOperationStats)"], ["com.hazelcast.monitor.MemberPartitionState", "com.hazelcast.monitor.impl.MemberStateImpl.getMemberPartitionState()"], ["com.hazelcast.monitor.NodeState", "com.hazelcast.monitor.impl.MemberStateImpl.getNodeState()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setNodeState(com.hazelcast.monitor.NodeState)"], ["com.hazelcast.monitor.HotRestartState", "com.hazelcast.monitor.impl.MemberStateImpl.getHotRestartState()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setHotRestartState(com.hazelcast.monitor.HotRestartState)"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO", "com.hazelcast.monitor.impl.MemberStateImpl.getClusterHotRestartStatus()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setClusterHotRestartStatus(com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO)"], ["com.hazelcast.monitor.WanSyncState", "com.hazelcast.monitor.impl.MemberStateImpl.getWanSyncState()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setWanSyncState(com.hazelcast.monitor.WanSyncState)"], ["java.util.Map<java.lang.String, java.lang.String>", "com.hazelcast.monitor.impl.MemberStateImpl.getClientStats()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.setClientStats(java.util.Map<java.lang.String, java.lang.String>)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.MemberStateImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.MemberStateImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.MemberStateImpl.toString()"], ["com.hazelcast.monitor.impl.LocalMapStatsImpl", "com.hazelcast.monitor.impl.LocalMapStatsImpl()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getOwnedEntryCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setOwnedEntryCount(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getBackupEntryCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setBackupEntryCount(long)"], ["int", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getBackupCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setBackupCount(int)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getOwnedEntryMemoryCost()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setOwnedEntryMemoryCost(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getBackupEntryMemoryCost()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setBackupEntryMemoryCost(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getCreationTime()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getLastAccessTime()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setLastAccessTime(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getLastUpdateTime()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setLastUpdateTime(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getHits()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setHits(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getLockedEntryCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setLockedEntryCount(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getDirtyEntryCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setDirtyEntryCount(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.total()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getPutOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.incrementPutLatencyNanos(long)"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.incrementPutLatencyNanos(long, long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getGetOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.incrementGetLatencyNanos(long)"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.incrementGetLatencyNanos(long, long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getRemoveOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.incrementRemoveLatencyNanos(long)"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getTotalPutLatency()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getTotalGetLatency()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getTotalRemoveLatency()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getMaxPutLatency()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getMaxGetLatency()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getMaxRemoveLatency()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getOtherOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.incrementOtherOperations()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getEventOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.incrementReceivedEvents()"], ["long", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getHeapCost()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setHeapCost(long)"], ["com.hazelcast.monitor.NearCacheStats", "com.hazelcast.monitor.impl.LocalMapStatsImpl.getNearCacheStats()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.setNearCacheStats(com.hazelcast.monitor.NearCacheStats)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalMapStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalMapStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalMapStatsImpl.toString()"], ["com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl()"], ["boolean", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.isConnected()"], ["void", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.setConnected(boolean)"], ["int", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.getOutboundQueueSize()"], ["void", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.setOutboundQueueSize(int)"], ["boolean", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.isPaused()"], ["void", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.setPaused(boolean)"], ["long", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.getTotalPublishLatency()"], ["long", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.getTotalPublishedEventCount()"], ["java.util.Map<java.lang.String, com.hazelcast.wan.impl.WanEventCounter$EventCounter>", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.getSentMapEventCounter()"], ["java.util.Map<java.lang.String, com.hazelcast.wan.impl.WanEventCounter$EventCounter>", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.getSentCacheEventCounter()"], ["void", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.setSentMapEventCounter(java.util.Map<java.lang.String, com.hazelcast.wan.impl.WanEventCounter$EventCounter>)"], ["void", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.setSentCacheEventCounter(java.util.Map<java.lang.String, com.hazelcast.wan.impl.WanEventCounter$EventCounter>)"], ["void", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.incrementPublishedEventCount(long)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalWanPublisherStatsImpl.toString()"], ["com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl", "com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl()"], ["long", "com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl.getCreationTime()"], ["long", "com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl.getBatchCount()"], ["long", "com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl.getIdCount()"], ["void", "com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl.update(int)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl.toString()"], ["com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl()"], ["long", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.getHits()"], ["long", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.getLastAccessTime()"], ["long", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.getLastUpdateTime()"], ["void", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.increaseHits()"], ["void", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.increaseHits(long)"], ["void", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.decreaseHits(long)"], ["void", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.setLastAccessTime(long)"], ["void", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.setLastUpdateTime(long)"], ["void", "com.hazelcast.monitor.impl.LocalRecordStoreStatsImpl.reset()"], ["com.hazelcast.monitor.impl.LocalMemoryStatsImpl", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl()"], ["com.hazelcast.monitor.impl.LocalMemoryStatsImpl", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl(com.hazelcast.memory.MemoryStats)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getTotalPhysical()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setTotalPhysical(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getFreePhysical()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setFreePhysical(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getMaxNative()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setMaxNativeMemory(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getCommittedNative()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setCommittedNativeMemory(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getUsedNative()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setUsedNativeMemory(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getFreeNative()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setFreeNativeMemory(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getMaxMetadata()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setMaxMetadata(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getUsedMetadata()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setUsedMetadata(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getMaxHeap()"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getCommittedHeap()"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getUsedHeap()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setMaxHeap(long)"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setCommittedHeap(long)"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setUsedHeap(long)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getFreeHeap()"], ["com.hazelcast.monitor.LocalGCStats", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getGCStats()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.setGcStats(com.hazelcast.monitor.LocalGCStats)"], ["long", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getCreationTime()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.toString()"], ["com.hazelcast.memory.GarbageCollectorStats", "com.hazelcast.monitor.impl.LocalMemoryStatsImpl.getGCStats()"], ["com.hazelcast.monitor.impl.LocalOperationStatsImpl", "com.hazelcast.monitor.impl.LocalOperationStatsImpl()"], ["com.hazelcast.monitor.impl.LocalOperationStatsImpl", "com.hazelcast.monitor.impl.LocalOperationStatsImpl(com.hazelcast.instance.Node)"], ["long", "com.hazelcast.monitor.impl.LocalOperationStatsImpl.getMaxVisibleSlowOperationCount()"], ["long", "com.hazelcast.monitor.impl.LocalOperationStatsImpl.getCreationTime()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalOperationStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalOperationStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalOperationStatsImpl.toString()"], ["com.hazelcast.monitor.impl.MemberPartitionStateImpl", "com.hazelcast.monitor.impl.MemberPartitionStateImpl()"], ["boolean", "com.hazelcast.monitor.impl.MemberPartitionStateImpl.isMemberStateSafe()"], ["void", "com.hazelcast.monitor.impl.MemberPartitionStateImpl.setMemberStateSafe(boolean)"], ["long", "com.hazelcast.monitor.impl.MemberPartitionStateImpl.getMigrationQueueSize()"], ["void", "com.hazelcast.monitor.impl.MemberPartitionStateImpl.setMigrationQueueSize(long)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.MemberPartitionStateImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.MemberPartitionStateImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.MemberPartitionStateImpl.toString()"], ["com.hazelcast.monitor.impl.LocalPNCounterStatsImpl", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl()"], ["long", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.getCreationTime()"], ["long", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.getValue()"], ["long", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.getTotalIncrementOperationCount()"], ["long", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.getTotalDecrementOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.setValue(long)"], ["void", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.incrementIncrementOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.incrementDecrementOperationCount()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalPNCounterStatsImpl.toString()"], ["com.hazelcast.monitor.impl.NearCacheStatsImpl", "com.hazelcast.monitor.impl.NearCacheStatsImpl()"], ["com.hazelcast.monitor.impl.NearCacheStatsImpl", "com.hazelcast.monitor.impl.NearCacheStatsImpl(com.hazelcast.monitor.NearCacheStats)"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getCreationTime()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getOwnedEntryCount()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.setOwnedEntryCount(long)"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.incrementOwnedEntryCount()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.decrementOwnedEntryCount()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getOwnedEntryMemoryCost()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.setOwnedEntryMemoryCost(long)"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.incrementOwnedEntryMemoryCost(long)"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.decrementOwnedEntryMemoryCost(long)"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getHits()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.incrementHits()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getMisses()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.incrementMisses()"], ["double", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getRatio()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getEvictions()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.incrementEvictions()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getExpirations()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.incrementExpirations()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getPersistenceCount()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.addPersistence(long, int, int)"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.addPersistenceFailure(java.lang.Throwable)"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getLastPersistenceTime()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getLastPersistenceDuration()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getLastPersistenceWrittenBytes()"], ["long", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getLastPersistenceKeyCount()"], ["java.lang.String", "com.hazelcast.monitor.impl.NearCacheStatsImpl.getLastPersistenceFailure()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.NearCacheStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.NearCacheStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.NearCacheStatsImpl.toString()"], ["com.hazelcast.monitor.impl.LocalWanStatsImpl", "com.hazelcast.monitor.impl.LocalWanStatsImpl()"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalWanPublisherStats>", "com.hazelcast.monitor.impl.LocalWanStatsImpl.getLocalWanPublisherStats()"], ["void", "com.hazelcast.monitor.impl.LocalWanStatsImpl.setLocalPublisherStatsMap(java.util.Map<java.lang.String, com.hazelcast.monitor.LocalWanPublisherStats>)"], ["long", "com.hazelcast.monitor.impl.LocalWanStatsImpl.getCreationTime()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalWanStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalWanStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.monitor.impl.LocalMultiMapStatsImpl", "com.hazelcast.monitor.impl.LocalMultiMapStatsImpl()"], ["com.hazelcast.monitor.impl.LocalCacheStatsImpl", "com.hazelcast.monitor.impl.LocalCacheStatsImpl()"], ["com.hazelcast.monitor.impl.LocalCacheStatsImpl", "com.hazelcast.monitor.impl.LocalCacheStatsImpl(com.hazelcast.cache.CacheStatistics)"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getLastAccessTime()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getLastUpdateTime()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getOwnedEntryCount()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCacheHits()"], ["float", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCacheHitPercentage()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCacheMisses()"], ["float", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCacheMissPercentage()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCacheGets()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCachePuts()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCacheRemovals()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCacheEvictions()"], ["float", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getAverageGetTime()"], ["float", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getAveragePutTime()"], ["float", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getAverageRemoveTime()"], ["long", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.getCreationTime()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalCacheStatsImpl.toString()"], ["com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getOwnedEntryCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setOwnedEntryCount(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getBackupEntryCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setBackupEntryCount(long)"], ["int", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getBackupCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setBackupCount(int)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getOwnedEntryMemoryCost()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setOwnedEntryMemoryCost(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getBackupEntryMemoryCost()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setBackupEntryMemoryCost(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getCreationTime()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getLastAccessTime()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setLastAccessTime(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getLastUpdateTime()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setLastUpdateTime(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getHits()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setHits(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getLockedEntryCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setLockedEntryCount(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getDirtyEntryCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setDirtyEntryCount(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.total()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getPutOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.incrementPuts(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getGetOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.incrementGets(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getRemoveOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.incrementRemoves(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getTotalPutLatency()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getTotalGetLatency()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getTotalRemoveLatency()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getMaxPutLatency()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getMaxGetLatency()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getMaxRemoveLatency()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getOtherOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.incrementOtherOperations()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getEventOperationCount()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.incrementReceivedEvents()"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getHeapCost()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.setHeapCost(long)"], ["long", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getReplicationEventCount()"], ["com.hazelcast.monitor.impl.NearCacheStatsImpl", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getNearCacheStats()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.toJson()"], ["void", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["java.lang.String", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.toString()"], ["com.hazelcast.monitor.NearCacheStats", "com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl.getNearCacheStats()"], ["com.hazelcast.cache.CacheNotExistsException", "com.hazelcast.cache.CacheNotExistsException(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$46.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$46.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.DeferredValue$DeferredValueSet", "com.hazelcast.cache.impl.DeferredValue$DeferredValueSet(com.hazelcast.spi.serialization.SerializationService, java.util.Set<com.hazelcast.cache.impl.DeferredValue<V>>)"], ["int", "com.hazelcast.cache.impl.DeferredValue$DeferredValueSet.size()"], ["boolean", "com.hazelcast.cache.impl.DeferredValue$DeferredValueSet.add(V)"], ["boolean", "com.hazelcast.cache.impl.DeferredValue$DeferredValueSet.remove(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.DeferredValue$DeferredValueSet.clear()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$23.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CachePartitionSegment", "com.hazelcast.cache.impl.CachePartitionSegment(com.hazelcast.cache.impl.AbstractCacheService, int)"], ["com.hazelcast.cache.impl.ICacheRecordStore", "com.hazelcast.cache.impl.CachePartitionSegment.createNew(java.lang.String)"], ["int", "com.hazelcast.cache.impl.CachePartitionSegment.getPartitionId()"], ["com.hazelcast.cache.impl.ICacheRecordStore", "com.hazelcast.cache.impl.CachePartitionSegment.getOrCreateRecordStore(java.lang.String)"], ["com.hazelcast.cache.impl.ICacheRecordStore", "com.hazelcast.cache.impl.CachePartitionSegment.getRecordStore(java.lang.String)"], ["com.hazelcast.cache.impl.ICacheService", "com.hazelcast.cache.impl.CachePartitionSegment.getCacheService()"], ["void", "com.hazelcast.cache.impl.CachePartitionSegment.deleteRecordStore(java.lang.String, boolean)"], ["boolean", "com.hazelcast.cache.impl.CachePartitionSegment.hasAnyRecordStore()"], ["boolean", "com.hazelcast.cache.impl.CachePartitionSegment.hasRecordStore(java.lang.String)"], ["void", "com.hazelcast.cache.impl.CachePartitionSegment.init()"], ["void", "com.hazelcast.cache.impl.CachePartitionSegment.reset()"], ["void", "com.hazelcast.cache.impl.CachePartitionSegment.shutdown()"], ["java.lang.Object", "com.hazelcast.cache.impl.CachePartitionSegment.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$49.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$49.createNew(java.lang.Object)"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheProxyBase.getName()"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheProxyBase.getPrefixedName()"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheProxyBase.getServiceName()"], ["void", "com.hazelcast.cache.impl.AbstractCacheProxyBase.open()"], ["void", "com.hazelcast.cache.impl.AbstractCacheProxyBase.close()"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheProxyBase.isClosed()"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheProxyBase.isDestroyed()"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheProxyBase.equals(java.lang.Object)"], ["int", "com.hazelcast.cache.impl.AbstractCacheProxyBase.hashCode()"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheProxyBase.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheEntryEventImpl", "com.hazelcast.cache.impl.CacheEntryEventImpl(com.hazelcast.cache.ICache<K, V>, javax.cache.event.EventType, K, V, V)"], ["V", "com.hazelcast.cache.impl.CacheEntryEventImpl.getOldValue()"], ["boolean", "com.hazelcast.cache.impl.CacheEntryEventImpl.isOldValueAvailable()"], ["K", "com.hazelcast.cache.impl.CacheEntryEventImpl.getKey()"], ["V", "com.hazelcast.cache.impl.CacheEntryEventImpl.getValue()"], ["<T> T", "com.hazelcast.cache.impl.CacheEntryEventImpl.unwrap(java.lang.Class<T>)"], ["java.lang.String", "com.hazelcast.cache.impl.CacheEntryEventImpl.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$48.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$48.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.HazelcastServerCachingProvider", "com.hazelcast.cache.impl.HazelcastServerCachingProvider()"], ["com.hazelcast.cache.impl.HazelcastServerCachingProvider", "com.hazelcast.cache.impl.HazelcastServerCachingProvider.createCachingProvider(com.hazelcast.core.HazelcastInstance)"], ["java.lang.String", "com.hazelcast.cache.impl.HazelcastServerCachingProvider.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$62.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$62.createNew(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.CacheProxyUtil.validateResults(java.util.Map<java.lang.Integer, java.lang.Object>)"], ["int", "com.hazelcast.cache.impl.CacheProxyUtil.getPartitionId(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["<K> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateNotNull(K)"], ["<K, V> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateNotNull(K, V)"], ["<K, V> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateNotNull(K, V, V)"], ["<K> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateNotNull(java.util.Set<? extends K>)"], ["<K, V> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateNotNull(java.util.Map<? extends K, ? extends V>)"], ["<K> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateConfiguredTypes(com.hazelcast.config.CacheConfig, K)"], ["<K, V> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateConfiguredTypes(com.hazelcast.config.CacheConfig, K, V)"], ["<K, V> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateConfiguredTypes(com.hazelcast.config.CacheConfig, K, V, V)"], ["<K> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateConfiguredKeyType(java.lang.Class<K>, K)"], ["<V> void", "com.hazelcast.cache.impl.CacheProxyUtil.validateConfiguredValueType(java.lang.Class<V>, V)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.HazelcastServerCacheManager", "com.hazelcast.cache.impl.HazelcastServerCacheManager(com.hazelcast.cache.impl.HazelcastServerCachingProvider, com.hazelcast.core.HazelcastInstance, java.net.URI, java.lang.ClassLoader, java.util.Properties)"], ["void", "com.hazelcast.cache.impl.HazelcastServerCacheManager.enableManagement(java.lang.String, boolean)"], ["void", "com.hazelcast.cache.impl.HazelcastServerCacheManager.enableStatistics(java.lang.String, boolean)"], ["<T> T", "com.hazelcast.cache.impl.HazelcastServerCacheManager.unwrap(java.lang.Class<T>)"], ["com.hazelcast.cache.impl.ICacheService", "com.hazelcast.cache.impl.HazelcastServerCacheManager.getCacheService()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$53.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$53.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.AbstractCacheRecordStore", "com.hazelcast.cache.impl.AbstractCacheRecordStore(java.lang.String, int, com.hazelcast.spi.NodeEngine, com.hazelcast.cache.impl.AbstractCacheService)"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.instrument(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.init()"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheRecordStore.evictIfRequired()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.AbstractCacheRecordStore.toEventData(java.lang.Object)"], ["R", "com.hazelcast.cache.impl.AbstractCacheRecordStore.accessRecord(com.hazelcast.nio.serialization.Data, R, javax.cache.expiry.ExpiryPolicy, long)"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.onEvict(com.hazelcast.nio.serialization.Data, R, boolean)"], ["R", "com.hazelcast.cache.impl.AbstractCacheRecordStore.readThroughRecord(com.hazelcast.nio.serialization.Data, long)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheRecordStore.readThroughCache(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.writeThroughCache(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["com.hazelcast.cache.impl.record.CacheRecord", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getRecord(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.putRecord(com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord, boolean)"], ["com.hazelcast.cache.impl.record.CacheRecord", "com.hazelcast.cache.impl.AbstractCacheRecordStore.removeRecord(com.hazelcast.nio.serialization.Data)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheRecordStore.get(com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheRecordStore.contains(com.hazelcast.nio.serialization.Data)"], ["R", "com.hazelcast.cache.impl.AbstractCacheRecordStore.put(com.hazelcast.nio.serialization.Data, java.lang.Object, javax.cache.expiry.ExpiryPolicy, java.lang.String, int)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getAndPut(com.hazelcast.nio.serialization.Data, java.lang.Object, javax.cache.expiry.ExpiryPolicy, java.lang.String, int)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheRecordStore.putIfAbsent(com.hazelcast.nio.serialization.Data, java.lang.Object, javax.cache.expiry.ExpiryPolicy, java.lang.String, int)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheRecordStore.replace(com.hazelcast.nio.serialization.Data, java.lang.Object, javax.cache.expiry.ExpiryPolicy, java.lang.String, int)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheRecordStore.replace(com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy, java.lang.String, int)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getAndReplace(com.hazelcast.nio.serialization.Data, java.lang.Object, javax.cache.expiry.ExpiryPolicy, java.lang.String, int)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheRecordStore.remove(com.hazelcast.nio.serialization.Data, java.lang.String, java.lang.String, int)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheRecordStore.remove(com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.String, java.lang.String, int)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getAndRemove(com.hazelcast.nio.serialization.Data, java.lang.String, int)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getAndRemove(com.hazelcast.nio.serialization.Data, java.lang.String, int, java.lang.String)"], ["com.hazelcast.map.impl.MapEntries", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getAll(java.util.Set<com.hazelcast.nio.serialization.Data>, javax.cache.expiry.ExpiryPolicy)"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.removeAll(java.util.Set<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.cache.impl.record.CacheRecord", "com.hazelcast.cache.impl.AbstractCacheRecordStore.merge(com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>)"], ["com.hazelcast.cache.impl.record.CacheRecord", "com.hazelcast.cache.impl.AbstractCacheRecordStore.merge(com.hazelcast.cache.CacheEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>, com.hazelcast.cache.CacheMergePolicy, java.lang.String, java.lang.String, int)"], ["com.hazelcast.cache.impl.CacheKeyIterationResult", "com.hazelcast.cache.impl.AbstractCacheRecordStore.fetchKeys(int, int)"], ["com.hazelcast.cache.impl.CacheEntryIterationResult", "com.hazelcast.cache.impl.AbstractCacheRecordStore.fetchEntries(int, int)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheRecordStore.invoke(com.hazelcast.nio.serialization.Data, javax.cache.processor.EntryProcessor, java.lang.Object[], int)"], ["int", "com.hazelcast.cache.impl.AbstractCacheRecordStore.size()"], ["com.hazelcast.cache.impl.CacheStatisticsImpl", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getCacheStats()"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getConfig()"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getName()"], ["java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord>", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getReadOnlyRecords()"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.clear()"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.reset()"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.close(boolean)"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.destroy()"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.destroyInternals()"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheRecordStore.isWanReplicationEnabled()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getObjectNamespace()"], ["int", "com.hazelcast.cache.impl.AbstractCacheRecordStore.getPartitionId()"], ["void", "com.hazelcast.cache.impl.AbstractCacheRecordStore.onEvict(java.lang.Object, com.hazelcast.internal.eviction.Evictable, boolean)"], ["com.hazelcast.cache.impl.CacheStatisticsImpl", "com.hazelcast.cache.impl.AbstractCacheService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheService$2.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.AbstractHazelcastCachingProvider", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider()"], ["javax.cache.CacheManager", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getCacheManager(java.net.URI, java.lang.ClassLoader, java.util.Properties)"], ["java.lang.ClassLoader", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getDefaultClassLoader()"], ["java.net.URI", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getDefaultURI()"], ["java.util.Properties", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getDefaultProperties()"], ["javax.cache.CacheManager", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getCacheManager(java.net.URI, java.lang.ClassLoader)"], ["javax.cache.CacheManager", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.getCacheManager()"], ["void", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.close()"], ["void", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.close(java.lang.ClassLoader)"], ["void", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.close(java.net.URI, java.lang.ClassLoader)"], ["boolean", "com.hazelcast.cache.impl.AbstractHazelcastCachingProvider.isSupported(javax.cache.configuration.OptionalFeature)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$64.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$64.createNew(java.lang.Object)"], ["V", "com.hazelcast.cache.impl.DeferredValue.get(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.DeferredValue.getSerializedValue(com.hazelcast.spi.serialization.SerializationService)"], ["boolean", "com.hazelcast.cache.impl.DeferredValue.equals(java.lang.Object)"], ["int", "com.hazelcast.cache.impl.DeferredValue.hashCode()"], ["<V> com.hazelcast.cache.impl.DeferredValue<V>", "com.hazelcast.cache.impl.DeferredValue.withSerializedValue(com.hazelcast.nio.serialization.Data)"], ["<V> com.hazelcast.cache.impl.DeferredValue<V>", "com.hazelcast.cache.impl.DeferredValue.withValue(V)"], ["<V> com.hazelcast.cache.impl.DeferredValue<V>", "com.hazelcast.cache.impl.DeferredValue.withNullValue()"], ["<V> java.util.Set<com.hazelcast.cache.impl.DeferredValue<V>>", "com.hazelcast.cache.impl.DeferredValue.concurrentSetOfValues(java.util.Set<V>)"], ["<V> java.util.Set<V>", "com.hazelcast.cache.impl.DeferredValue.asPassThroughSet(java.util.Set<com.hazelcast.cache.impl.DeferredValue<V>>, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$34.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$34.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheEntryProcessorResult", "com.hazelcast.cache.impl.CacheEntryProcessorResult(T)"], ["com.hazelcast.cache.impl.CacheEntryProcessorResult", "com.hazelcast.cache.impl.CacheEntryProcessorResult(java.lang.Throwable)"], ["T", "com.hazelcast.cache.impl.CacheEntryProcessorResult.get()"], ["com.hazelcast.cache.CacheEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>", "com.hazelcast.cache.impl.CacheEntryViews.createDefaultEntryView(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord)"], ["com.hazelcast.cache.CacheEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>", "com.hazelcast.cache.impl.CacheEntryViews.createLazyEntryView(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord)"], ["com.hazelcast.cache.CacheEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>", "com.hazelcast.cache.impl.CacheEntryViews.createEntryView(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord, com.hazelcast.cache.impl.CacheEntryViews$CacheEntryViewType)"], ["com.hazelcast.cache.impl.DefaultOperationProvider", "com.hazelcast.cache.impl.DefaultOperationProvider(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createPutOperation(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy, boolean, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createPutAllOperation(java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>, javax.cache.expiry.ExpiryPolicy, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createGetOperation(com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createContainsKeyOperation(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createPutIfAbsentOperation(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createRemoveOperation(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createGetAndRemoveOperation(com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createReplaceOperation(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createGetAndReplaceOperation(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createEntryProcessorOperation(com.hazelcast.nio.serialization.Data, java.lang.Integer, javax.cache.processor.EntryProcessor, java.lang.Object...)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createKeyIteratorOperation(int, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createEntryIteratorOperation(int, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.DefaultOperationProvider.createMergeOperation(java.lang.String, java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.cache.impl.DefaultOperationProvider.createMergeOperationFactory(java.lang.String, int[], java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>[], com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.cache.impl.DefaultOperationProvider.createGetAllOperationFactory(java.util.Set<com.hazelcast.nio.serialization.Data>, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.cache.impl.DefaultOperationProvider.createLoadAllOperationFactory(java.util.Set<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.cache.impl.DefaultOperationProvider.createClearOperationFactory()"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.cache.impl.DefaultOperationProvider.createRemoveAllOperationFactory(java.util.Set<com.hazelcast.nio.serialization.Data>, java.lang.Integer)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.cache.impl.DefaultOperationProvider.createSizeOperationFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$14.createNew(java.lang.Object)"], ["V", "com.hazelcast.cache.impl.AbstractCacheProxy.get(K, javax.cache.expiry.ExpiryPolicy)"], ["java.util.Map<K, V>", "com.hazelcast.cache.impl.AbstractCacheProxy.getAll(java.util.Set<? extends K>, javax.cache.expiry.ExpiryPolicy)"], ["void", "com.hazelcast.cache.impl.AbstractCacheProxy.put(K, V, javax.cache.expiry.ExpiryPolicy)"], ["V", "com.hazelcast.cache.impl.AbstractCacheProxy.getAndPut(K, V, javax.cache.expiry.ExpiryPolicy)"], ["void", "com.hazelcast.cache.impl.AbstractCacheProxy.putAll(java.util.Map<? extends K, ? extends V>, javax.cache.expiry.ExpiryPolicy)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheProxy.putIfAbsent(K, V, javax.cache.expiry.ExpiryPolicy)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheProxy.replace(K, V, V, javax.cache.expiry.ExpiryPolicy)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheProxy.replace(K, V, javax.cache.expiry.ExpiryPolicy)"], ["V", "com.hazelcast.cache.impl.AbstractCacheProxy.getAndReplace(K, V, javax.cache.expiry.ExpiryPolicy)"], ["int", "com.hazelcast.cache.impl.AbstractCacheProxy.size()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheProxy.removeAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheProxy.removeAsync(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheProxy.putIfAbsentAsync(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheProxy.putIfAbsentAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheProxy.putAsync(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheProxy.putAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheProxy.getAsync(java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheProxy.getAsync(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$21.createNew(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager$1.stateChanged(com.hazelcast.core.LifecycleEvent)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheService$3.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.DeferredValue$DeferredValueIterator", "com.hazelcast.cache.impl.DeferredValue$DeferredValueIterator(com.hazelcast.spi.serialization.SerializationService, java.util.Iterator<com.hazelcast.cache.impl.DeferredValue<V>>)"], ["boolean", "com.hazelcast.cache.impl.DeferredValue$DeferredValueIterator.hasNext()"], ["V", "com.hazelcast.cache.impl.DeferredValue$DeferredValueIterator.next()"], ["void", "com.hazelcast.cache.impl.DeferredValue$DeferredValueIterator.remove()"], ["boolean", "com.hazelcast.cache.impl.JCacheDetector.isJCacheAvailable(java.lang.ClassLoader)"], ["boolean", "com.hazelcast.cache.impl.JCacheDetector.isJCacheAvailable(java.lang.ClassLoader, com.hazelcast.logging.ILogger)"], ["com.hazelcast.cache.impl.CacheRecordStore", "com.hazelcast.cache.impl.CacheRecordStore(java.lang.String, int, com.hazelcast.spi.NodeEngine, com.hazelcast.cache.impl.AbstractCacheService)"], ["com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate(javax.management.MBeanServerDelegate)"], ["java.lang.String", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.getSpecificationName()"], ["java.lang.String", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.getSpecificationVersion()"], ["java.lang.String", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.getSpecificationVendor()"], ["java.lang.String", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.getImplementationName()"], ["java.lang.String", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.getImplementationVersion()"], ["java.lang.String", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.getImplementationVendor()"], ["javax.management.MBeanNotificationInfo[]", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.getNotificationInfo()"], ["synchronized", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)"], ["synchronized", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.void removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)"], ["synchronized", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.void removeNotificationListener(javax.management.NotificationListener)"], ["void", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.sendNotification(javax.management.Notification)"], ["synchronized", "com.hazelcast.cache.impl.TCKMBeanServerBuilder$RIMBeanServerDelegate.java.lang.String getMBeanServerId()"], ["com.hazelcast.cache.impl.AbstractHazelcastCacheManager", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager(javax.cache.spi.CachingProvider, com.hazelcast.core.HazelcastInstance, java.net.URI, java.lang.ClassLoader, java.util.Properties)"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getHazelcastInstance()"], ["<K, V, C extends javax.cache.configuration.Configuration<K, V>> com.hazelcast.cache.ICache<K, V>", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.createCache(java.lang.String, C)"], ["javax.cache.spi.CachingProvider", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCachingProvider()"], ["java.net.URI", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getURI()"], ["java.lang.ClassLoader", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getClassLoader()"], ["java.util.Properties", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getProperties()"], ["<K, V> com.hazelcast.cache.ICache<K, V>", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCache(java.lang.String, java.lang.Class<K>, java.lang.Class<V>)"], ["<K, V> com.hazelcast.cache.ICache<K, V>", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getOrCreateCache(java.lang.String, com.hazelcast.config.CacheConfig<K, V>)"], ["<K, V> com.hazelcast.cache.ICache<K, V>", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCache(java.lang.String)"], ["void", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.destroyCache(java.lang.String)"], ["void", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.removeCache(java.lang.String, boolean)"], ["void", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.close()"], ["void", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.destroy()"], ["boolean", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.isClosed()"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCacheNameWithPrefix(java.lang.String)"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.toString()"], ["javax.cache.Cache", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCache(java.lang.String)"], ["javax.cache.Cache", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCache(java.lang.String, java.lang.Class, java.lang.Class)"], ["javax.cache.Cache", "com.hazelcast.cache.impl.AbstractHazelcastCacheManager.createCache(java.lang.String, javax.cache.configuration.Configuration)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.PreJoinCacheConfig", "com.hazelcast.cache.impl.PreJoinCacheConfig()"], ["com.hazelcast.cache.impl.PreJoinCacheConfig", "com.hazelcast.cache.impl.PreJoinCacheConfig(com.hazelcast.config.CacheConfig)"], ["com.hazelcast.cache.impl.PreJoinCacheConfig", "com.hazelcast.cache.impl.PreJoinCacheConfig(com.hazelcast.config.CacheConfig, boolean)"], ["int", "com.hazelcast.cache.impl.PreJoinCacheConfig.getFactoryId()"], ["int", "com.hazelcast.cache.impl.PreJoinCacheConfig.getId()"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.cache.impl.PreJoinCacheConfig.asCacheConfig(com.hazelcast.config.CacheConfig)"], ["com.hazelcast.cache.impl.PreJoinCacheConfig", "com.hazelcast.cache.impl.PreJoinCacheConfig.of(com.hazelcast.config.CacheConfig)"], ["com.hazelcast.cache.impl.CacheContext", "com.hazelcast.cache.impl.AbstractCacheService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheService$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$33.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$33.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$54.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$54.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$38.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$38.createNew(java.lang.Object)"], ["javax.cache.CacheManager", "com.hazelcast.cache.impl.AbstractInternalCacheProxy.getCacheManager()"], ["void", "com.hazelcast.cache.impl.AbstractInternalCacheProxy.setCacheManager(com.hazelcast.cache.HazelcastCacheManager)"], ["void", "com.hazelcast.cache.impl.AbstractInternalCacheProxy.resetCacheManager()"], ["void", "com.hazelcast.cache.impl.AbstractInternalCacheProxy.countDownCompletionLatch(int)"], ["com.hazelcast.cache.CacheStatistics", "com.hazelcast.cache.impl.AbstractInternalCacheProxy.getLocalCacheStatistics()"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator", "com.hazelcast.cache.impl.CacheEventHandler.getMetaDataGenerator()"], ["void", "com.hazelcast.cache.impl.CacheEventHandler.resetPartitionMetaData(java.lang.String, int)"], ["void", "com.hazelcast.cache.impl.CacheEventHandler.destroy(java.lang.String, java.lang.String)"], ["com.hazelcast.cache.impl.CacheContext", "com.hazelcast.cache.impl.CacheContext()"], ["long", "com.hazelcast.cache.impl.CacheContext.getEntryCount()"], ["long", "com.hazelcast.cache.impl.CacheContext.increaseEntryCount()"], ["long", "com.hazelcast.cache.impl.CacheContext.increaseEntryCount(long)"], ["long", "com.hazelcast.cache.impl.CacheContext.decreaseEntryCount()"], ["long", "com.hazelcast.cache.impl.CacheContext.decreaseEntryCount(long)"], ["void", "com.hazelcast.cache.impl.CacheContext.resetEntryCount()"], ["int", "com.hazelcast.cache.impl.CacheContext.getCacheEntryListenerCount()"], ["void", "com.hazelcast.cache.impl.CacheContext.increaseCacheEntryListenerCount()"], ["void", "com.hazelcast.cache.impl.CacheContext.decreaseCacheEntryListenerCount()"], ["void", "com.hazelcast.cache.impl.CacheContext.resetCacheEntryListenerCount()"], ["int", "com.hazelcast.cache.impl.CacheContext.getInvalidationListenerCount()"], ["void", "com.hazelcast.cache.impl.CacheContext.increaseInvalidationListenerCount()"], ["void", "com.hazelcast.cache.impl.CacheContext.decreaseInvalidationListenerCount()"], ["void", "com.hazelcast.cache.impl.CacheContext.resetInvalidationListenerCount()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheContext.toString()"], ["com.hazelcast.cache.impl.CacheMXBeanImpl", "com.hazelcast.cache.impl.CacheMXBeanImpl(com.hazelcast.config.CacheConfig)"], ["java.lang.String", "com.hazelcast.cache.impl.CacheMXBeanImpl.getKeyType()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheMXBeanImpl.getValueType()"], ["boolean", "com.hazelcast.cache.impl.CacheMXBeanImpl.isReadThrough()"], ["boolean", "com.hazelcast.cache.impl.CacheMXBeanImpl.isWriteThrough()"], ["boolean", "com.hazelcast.cache.impl.CacheMXBeanImpl.isStoreByValue()"], ["boolean", "com.hazelcast.cache.impl.CacheMXBeanImpl.isStatisticsEnabled()"], ["boolean", "com.hazelcast.cache.impl.CacheMXBeanImpl.isManagementEnabled()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheEventListenerAdaptor", "com.hazelcast.cache.impl.CacheEventListenerAdaptor()"], ["com.hazelcast.cache.impl.CacheEventListenerAdaptor", "com.hazelcast.cache.impl.CacheEventListenerAdaptor(com.hazelcast.cache.ICache<K, V>, javax.cache.configuration.CacheEntryListenerConfiguration<K, V>, com.hazelcast.spi.serialization.SerializationService)"], ["javax.cache.event.CacheEntryListener<K, V>", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.getCacheEntryListener()"], ["void", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.handleEvent(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.handle(int, java.util.Collection<com.hazelcast.cache.impl.CacheEventData>, int)"], ["void", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.onRegister(com.hazelcast.cache.impl.CacheService, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["void", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.onDeregister(com.hazelcast.cache.impl.CacheService, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["boolean", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.eval(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.getListener()"], ["int", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.getFactoryId()"], ["int", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.getId()"], ["void", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.onDeregister(java.lang.Object, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["void", "com.hazelcast.cache.impl.CacheEventListenerAdaptor.onRegister(java.lang.Object, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$39.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$39.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.event.CachePartitionLostEvent", "com.hazelcast.cache.impl.event.CachePartitionLostEvent(java.lang.Object, com.hazelcast.core.Member, int, int)"], ["int", "com.hazelcast.cache.impl.event.CachePartitionLostEvent.getPartitionId()"], ["java.lang.String", "com.hazelcast.cache.impl.event.CachePartitionLostEvent.toString()"], ["com.hazelcast.cache.impl.event.InternalCachePartitionLostListenerAdapter", "com.hazelcast.cache.impl.event.InternalCachePartitionLostListenerAdapter(com.hazelcast.cache.impl.event.CachePartitionLostListener)"], ["void", "com.hazelcast.cache.impl.event.InternalCachePartitionLostListenerAdapter.handleEvent(java.lang.Object)"], ["com.hazelcast.cache.impl.event.CachePartitionLostEventFilter", "com.hazelcast.cache.impl.event.CachePartitionLostEventFilter()"], ["boolean", "com.hazelcast.cache.impl.event.CachePartitionLostEventFilter.eval(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.event.CachePartitionLostEventFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.event.CachePartitionLostEventFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.cache.impl.event.CachePartitionLostEventFilter.equals(java.lang.Object)"], ["int", "com.hazelcast.cache.impl.event.CachePartitionLostEventFilter.hashCode()"], ["int", "com.hazelcast.cache.impl.event.CachePartitionLostEventFilter.getFactoryId()"], ["int", "com.hazelcast.cache.impl.event.CachePartitionLostEventFilter.getId()"], ["com.hazelcast.cache.impl.event.AbstractICacheEvent", "com.hazelcast.cache.impl.event.AbstractICacheEvent(java.lang.Object, com.hazelcast.core.Member, int)"], ["java.lang.Object", "com.hazelcast.cache.impl.event.AbstractICacheEvent.getSource()"], ["com.hazelcast.core.Member", "com.hazelcast.cache.impl.event.AbstractICacheEvent.getMember()"], ["com.hazelcast.cache.CacheEventType", "com.hazelcast.cache.impl.event.AbstractICacheEvent.getEventType()"], ["java.lang.String", "com.hazelcast.cache.impl.event.AbstractICacheEvent.getName()"], ["java.lang.String", "com.hazelcast.cache.impl.event.AbstractICacheEvent.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$60.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$60.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.TCKMBeanServerBuilder", "com.hazelcast.cache.impl.TCKMBeanServerBuilder()"], ["javax.management.MBeanServer", "com.hazelcast.cache.impl.TCKMBeanServerBuilder.newMBeanServer(java.lang.String, javax.management.MBeanServer, javax.management.MBeanServerDelegate)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheEntryViews$CacheEntryViewType[]", "com.hazelcast.cache.impl.CacheEntryViews$CacheEntryViewType.values()"], ["com.hazelcast.cache.impl.CacheEntryViews$CacheEntryViewType", "com.hazelcast.cache.impl.CacheEntryViews$CacheEntryViewType.valueOf(java.lang.String)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheCompleteEvent(int)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheCompleteEvent(com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheCompleteEvent(com.hazelcast.nio.serialization.Data, long, java.lang.String, int)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheExpiredEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, java.lang.String, int)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheCreatedEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, java.lang.String, int)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheUpdatedEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long, long, long, java.lang.String, int)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheUpdatedEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long, long, long)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheRemovedEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, java.lang.String, int)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createCacheRemovedEvent(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContextUtil.createBaseEventContext(com.hazelcast.cache.CacheEventType, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, java.lang.String, int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheEventDataImpl", "com.hazelcast.cache.impl.CacheEventDataImpl()"], ["com.hazelcast.cache.impl.CacheEventDataImpl", "com.hazelcast.cache.impl.CacheEventDataImpl(java.lang.String, com.hazelcast.cache.CacheEventType, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, boolean)"], ["java.lang.String", "com.hazelcast.cache.impl.CacheEventDataImpl.getName()"], ["com.hazelcast.cache.CacheEventType", "com.hazelcast.cache.impl.CacheEventDataImpl.getCacheEventType()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.CacheEventDataImpl.getDataKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.CacheEventDataImpl.getDataValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.CacheEventDataImpl.getDataOldValue()"], ["boolean", "com.hazelcast.cache.impl.CacheEventDataImpl.isOldValueAvailable()"], ["void", "com.hazelcast.cache.impl.CacheEventDataImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.CacheEventDataImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.CacheEventDataImpl.getId()"], ["int", "com.hazelcast.cache.impl.CacheEventDataImpl.getFactoryId()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheEventDataImpl.toString()"], ["boolean", "com.hazelcast.cache.impl.CacheEventDataImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.cache.impl.CacheEventDataImpl.hashCode()"], ["com.hazelcast.cache.impl.CacheEntry", "com.hazelcast.cache.impl.CacheEntry(K, V)"], ["K", "com.hazelcast.cache.impl.CacheEntry.getKey()"], ["V", "com.hazelcast.cache.impl.CacheEntry.getValue()"], ["<T> T", "com.hazelcast.cache.impl.CacheEntry.unwrap(java.lang.Class<T>)"], ["V", "com.hazelcast.cache.impl.CacheEntry.setValue(V)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$30.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.LatencyTrackingCacheLoader", "com.hazelcast.cache.impl.LatencyTrackingCacheLoader(javax.cache.integration.CacheLoader<K, V>, com.hazelcast.internal.diagnostics.StoreLatencyPlugin, java.lang.String)"], ["V", "com.hazelcast.cache.impl.LatencyTrackingCacheLoader.load(K)"], ["java.util.Map<K, V>", "com.hazelcast.cache.impl.LatencyTrackingCacheLoader.loadAll(java.lang.Iterable<? extends K>)"], ["com.hazelcast.cache.impl.LatencyTrackingCacheWriter", "com.hazelcast.cache.impl.LatencyTrackingCacheWriter(javax.cache.integration.CacheWriter<K, V>, com.hazelcast.internal.diagnostics.StoreLatencyPlugin, java.lang.String)"], ["void", "com.hazelcast.cache.impl.LatencyTrackingCacheWriter.write(javax.cache.Cache$Entry<? extends K, ? extends V>)"], ["void", "com.hazelcast.cache.impl.LatencyTrackingCacheWriter.writeAll(java.util.Collection<javax.cache.Cache$Entry<? extends K, ? extends V>>)"], ["void", "com.hazelcast.cache.impl.LatencyTrackingCacheWriter.delete(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.LatencyTrackingCacheWriter.deleteAll(java.util.Collection<?>)"], ["com.hazelcast.cache.impl.CacheEntryCountResolver$CacheContextBackedEntryCountResolver", "com.hazelcast.cache.impl.CacheEntryCountResolver$CacheContextBackedEntryCountResolver(com.hazelcast.cache.impl.CacheContext)"], ["long", "com.hazelcast.cache.impl.CacheEntryCountResolver$CacheContextBackedEntryCountResolver.getEntryCount()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$41.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$41.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$55.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$55.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$56.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$56.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$51.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$51.createNew(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.MXBeanUtil.registerCacheObject(java.lang.Object, java.lang.String, java.lang.String, boolean)"], ["boolean", "com.hazelcast.cache.impl.MXBeanUtil.isRegistered(java.lang.String, java.lang.String, boolean)"], ["void", "com.hazelcast.cache.impl.MXBeanUtil.unregisterCacheObject(java.lang.String, java.lang.String, boolean)"], ["javax.management.ObjectName", "com.hazelcast.cache.impl.MXBeanUtil.calculateObjectName(java.lang.String, java.lang.String, boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider", "com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider(com.hazelcast.spi.NodeEngine)"], ["java.lang.Object", "com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider.getMergePolicy(java.lang.String)"], ["com.hazelcast.cache.CacheMergePolicy", "com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider$1.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView()"], ["com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long, long, long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getValue()"], ["long", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getCreationTime()"], ["long", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getExpirationTime()"], ["long", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getLastAccessTime()"], ["long", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getAccessHit()"], ["void", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getFactoryId()"], ["int", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getId()"], ["java.lang.Object", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getValue()"], ["java.lang.Object", "com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView.getKey()"], ["com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView", "com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView(java.lang.Object, java.lang.Object, long, long, long, long)"], ["com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView", "com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView(java.lang.Object, java.lang.Object, long, long, long, long, com.hazelcast.spi.serialization.SerializationService)"], ["K", "com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView.getKey()"], ["V", "com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView.getValue()"], ["long", "com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView.getCreationTime()"], ["long", "com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView.getExpirationTime()"], ["long", "com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView.getLastAccessTime()"], ["long", "com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView.getAccessHit()"], ["void", "com.hazelcast.cache.impl.AbstractCacheProxyBase$LoadAllTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$47.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$47.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CachePartitionEventData", "com.hazelcast.cache.impl.CachePartitionEventData()"], ["com.hazelcast.cache.impl.CachePartitionEventData", "com.hazelcast.cache.impl.CachePartitionEventData(java.lang.String, int, com.hazelcast.core.Member)"], ["com.hazelcast.core.Member", "com.hazelcast.cache.impl.CachePartitionEventData.getMember()"], ["int", "com.hazelcast.cache.impl.CachePartitionEventData.getPartitionId()"], ["void", "com.hazelcast.cache.impl.CachePartitionEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.CachePartitionEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.cache.impl.CachePartitionEventData.toString()"], ["boolean", "com.hazelcast.cache.impl.CachePartitionEventData.equals(java.lang.Object)"], ["int", "com.hazelcast.cache.impl.CachePartitionEventData.hashCode()"], ["int", "com.hazelcast.cache.impl.CachePartitionEventData.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent()"], ["com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.getDataKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.getDataNewValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.getDataOldValue()"], ["int", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.getEventType()"], ["int", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.getFactoryId()"], ["int", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.getId()"], ["void", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.equals(java.lang.Object)"], ["int", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.hashCode()"], ["java.lang.String", "com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent.toString()"], ["com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation()"], ["com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation(java.lang.String)"], ["void", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation.beforeRun()"], ["void", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation.run()"], ["int", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation.getId()"], ["java.lang.String", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation.getServiceName()"], ["com.hazelcast.internal.journal.EventJournalInitialSubscriberState", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation.getResponse()"], ["java.lang.Object", "com.hazelcast.cache.impl.journal.CacheEventJournalSubscribeOperation.getResponse()"], ["com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl", "com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl()"], ["void", "com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl.addItem(long, java.lang.Object)"], ["int", "com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl.getFactoryId()"], ["int", "com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl.getId()"], ["com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent()"], ["com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent)"], ["int", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent.getId()"], ["K", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent.getKey()"], ["V", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent.getNewValue()"], ["V", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent.getOldValue()"], ["com.hazelcast.cache.CacheEventType", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent.getType()"], ["void", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.journal.DeserializingEventJournalCacheEvent.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["boolean", "com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl$1.test(com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent)"], ["boolean", "com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl$1.test(java.lang.Object)"], ["com.hazelcast.cache.impl.journal.CacheEventJournalReadOperation", "com.hazelcast.cache.impl.journal.CacheEventJournalReadOperation()"], ["com.hazelcast.cache.impl.journal.CacheEventJournalReadOperation", "com.hazelcast.cache.impl.journal.CacheEventJournalReadOperation(java.lang.String, long, int, int, com.hazelcast.util.function.Predicate<? super com.hazelcast.cache.journal.EventJournalCacheEvent<K, V>>, com.hazelcast.projection.Projection<? super com.hazelcast.cache.journal.EventJournalCacheEvent<K, V>, ? extends T>)"], ["int", "com.hazelcast.cache.impl.journal.CacheEventJournalReadOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.journal.CacheEventJournalReadOperation.getId()"], ["java.lang.String", "com.hazelcast.cache.impl.journal.CacheEventJournalReadOperation.getServiceName()"], ["com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.writeUpdateEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.writeCreatedEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["void", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.writeRemoveEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["void", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.writeEvictEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["void", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.writeExpiredEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["long", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.newestSequence(com.hazelcast.spi.ObjectNamespace, int)"], ["long", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.oldestSequence(com.hazelcast.spi.ObjectNamespace, int)"], ["boolean", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.isPersistenceEnabled(com.hazelcast.spi.ObjectNamespace, int)"], ["void", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.destroy(com.hazelcast.spi.ObjectNamespace, int)"], ["void", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.isAvailableOrNextSequence(com.hazelcast.spi.ObjectNamespace, int, long)"], ["boolean", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.isNextAvailableSequence(com.hazelcast.spi.ObjectNamespace, int, long)"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.getWaitNotifyKey(com.hazelcast.spi.ObjectNamespace, int)"], ["<T> long", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.readMany(com.hazelcast.spi.ObjectNamespace, int, long, com.hazelcast.ringbuffer.impl.ReadResultSetImpl<com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent, T>)"], ["void", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.cleanup(com.hazelcast.spi.ObjectNamespace, int)"], ["boolean", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.hasEventJournal(com.hazelcast.spi.ObjectNamespace)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.getEventJournalConfig(com.hazelcast.spi.ObjectNamespace)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.cache.impl.journal.RingbufferCacheEventJournalImpl.toRingbufferConfig(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace)"], ["T", "com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl$ProjectionAdapter.transform(com.hazelcast.cache.impl.journal.InternalEventJournalCacheEvent)"], ["java.lang.Object", "com.hazelcast.cache.impl.journal.CacheEventJournalReadResultSetImpl$ProjectionAdapter.transform(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.ClusterWideIterator", "com.hazelcast.cache.impl.ClusterWideIterator(com.hazelcast.cache.impl.CacheProxy<K, V>, boolean)"], ["com.hazelcast.cache.impl.ClusterWideIterator", "com.hazelcast.cache.impl.ClusterWideIterator(com.hazelcast.cache.impl.CacheProxy<K, V>, int, boolean)"], ["com.hazelcast.cache.impl.ClusterWideIterator", "com.hazelcast.cache.impl.ClusterWideIterator(com.hazelcast.cache.impl.CacheProxy<K, V>, int, int, boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$61.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$61.createNew(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.AbstractCacheProxyBase$1.onResponse(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.AbstractCacheProxyBase$1.onFailure(java.lang.Throwable)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheService", "com.hazelcast.cache.impl.CacheService()"], ["boolean", "com.hazelcast.cache.impl.CacheService.isKnownServiceNamespace(com.hazelcast.spi.ServiceNamespace)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.CacheService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.CacheService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent, java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.cache.impl.CacheService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.cache.impl.CacheService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["java.lang.String", "com.hazelcast.cache.impl.CacheService.toString()"], ["boolean", "com.hazelcast.cache.impl.CacheService.isWanReplicationEnabled(java.lang.String)"], ["com.hazelcast.cache.impl.event.CacheWanEventPublisher", "com.hazelcast.cache.impl.CacheService.getCacheWanEventPublisher()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.CacheService.getObjectNamespace(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$32.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$32.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$37.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$37.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheClearResponse", "com.hazelcast.cache.impl.CacheClearResponse()"], ["com.hazelcast.cache.impl.CacheClearResponse", "com.hazelcast.cache.impl.CacheClearResponse(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheClearResponse.getResponse()"], ["int", "com.hazelcast.cache.impl.CacheClearResponse.getFactoryId()"], ["int", "com.hazelcast.cache.impl.CacheClearResponse.getId()"], ["void", "com.hazelcast.cache.impl.CacheClearResponse.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.CacheClearResponse.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.cache.impl.record.CacheDataRecord", "com.hazelcast.cache.impl.record.CacheDataRecord()"], ["com.hazelcast.cache.impl.record.CacheDataRecord", "com.hazelcast.cache.impl.record.CacheDataRecord(com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.record.CacheDataRecord.getValue()"], ["void", "com.hazelcast.cache.impl.record.CacheDataRecord.setValue(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.cache.impl.record.CacheDataRecord.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.record.CacheDataRecord.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.record.CacheDataRecord.getId()"], ["void", "com.hazelcast.cache.impl.record.CacheDataRecord.setValue(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.cache.impl.record.CacheDataRecord.getValue()"], ["com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry(com.hazelcast.cache.impl.record.CacheRecordHashMap, com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord)"], ["java.lang.Object", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry.getAccessor()"], ["com.hazelcast.internal.eviction.Evictable", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry.getEvictable()"], ["java.lang.Object", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry.getKey()"], ["java.lang.Object", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry.getValue()"], ["long", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry.getCreationTime()"], ["long", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry.getExpirationTime()"], ["long", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry.getLastAccessTime()"], ["long", "com.hazelcast.cache.impl.record.CacheRecordHashMap$CacheEvictableSamplingEntry.getAccessHit()"], ["com.hazelcast.cache.impl.record.CacheRecordHashMap", "com.hazelcast.cache.impl.record.CacheRecordHashMap(com.hazelcast.spi.serialization.SerializationService, int, com.hazelcast.cache.impl.CacheContext)"], ["void", "com.hazelcast.cache.impl.record.CacheRecordHashMap.setEntryCounting(boolean)"], ["com.hazelcast.cache.impl.record.CacheRecord", "com.hazelcast.cache.impl.record.CacheRecordHashMap.put(com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord)"], ["com.hazelcast.cache.impl.record.CacheRecord", "com.hazelcast.cache.impl.record.CacheRecordHashMap.putIfAbsent(com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord)"], ["com.hazelcast.cache.impl.record.CacheRecord", "com.hazelcast.cache.impl.record.CacheRecordHashMap.remove(java.lang.Object)"], ["boolean", "com.hazelcast.cache.impl.record.CacheRecordHashMap.remove(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.cache.impl.record.CacheRecordHashMap.clear()"], ["com.hazelcast.cache.impl.CacheKeyIterationResult", "com.hazelcast.cache.impl.record.CacheRecordHashMap.fetchKeys(int, int)"], ["com.hazelcast.cache.impl.CacheEntryIterationResult", "com.hazelcast.cache.impl.record.CacheRecordHashMap.fetchEntries(int, int)"], ["<C extends com.hazelcast.internal.eviction.EvictionCandidate<com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord>> boolean", "com.hazelcast.cache.impl.record.CacheRecordHashMap.tryEvict(C, com.hazelcast.internal.eviction.EvictionListener<com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord>)"], ["java.lang.Object", "com.hazelcast.cache.impl.record.CacheRecordHashMap.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.cache.impl.record.CacheRecordHashMap.putIfAbsent(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.cache.impl.record.CacheRecordHashMap.put(java.lang.Object, java.lang.Object)"], ["com.hazelcast.cache.impl.record.CacheObjectRecord", "com.hazelcast.cache.impl.record.CacheObjectRecord()"], ["com.hazelcast.cache.impl.record.CacheObjectRecord", "com.hazelcast.cache.impl.record.CacheObjectRecord(java.lang.Object, long, long)"], ["java.lang.Object", "com.hazelcast.cache.impl.record.CacheObjectRecord.getValue()"], ["void", "com.hazelcast.cache.impl.record.CacheObjectRecord.setValue(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.record.CacheObjectRecord.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.record.CacheObjectRecord.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.record.CacheObjectRecord.getId()"], ["com.hazelcast.cache.impl.record.CacheRecordFactory", "com.hazelcast.cache.impl.record.CacheRecordFactory(com.hazelcast.config.InMemoryFormat, com.hazelcast.spi.serialization.SerializationService)"], ["R", "com.hazelcast.cache.impl.record.CacheRecordFactory.newRecord(java.lang.Object)"], ["R", "com.hazelcast.cache.impl.record.CacheRecordFactory.newRecordWithExpiry(java.lang.Object, long, long)"], ["boolean", "com.hazelcast.cache.impl.record.CacheRecordFactory.isExpiredAt(long, long)"], ["com.hazelcast.cache.impl.record.AbstractCacheRecord", "com.hazelcast.cache.impl.record.AbstractCacheRecord(long, long)"], ["long", "com.hazelcast.cache.impl.record.AbstractCacheRecord.getExpirationTime()"], ["void", "com.hazelcast.cache.impl.record.AbstractCacheRecord.setExpirationTime(long)"], ["long", "com.hazelcast.cache.impl.record.AbstractCacheRecord.getCreationTime()"], ["void", "com.hazelcast.cache.impl.record.AbstractCacheRecord.setCreationTime(long)"], ["long", "com.hazelcast.cache.impl.record.AbstractCacheRecord.getLastAccessTime()"], ["void", "com.hazelcast.cache.impl.record.AbstractCacheRecord.setAccessTime(long)"], ["int", "com.hazelcast.cache.impl.record.AbstractCacheRecord.getAccessHit()"], ["void", "com.hazelcast.cache.impl.record.AbstractCacheRecord.setAccessHit(int)"], ["void", "com.hazelcast.cache.impl.record.AbstractCacheRecord.incrementAccessHit()"], ["void", "com.hazelcast.cache.impl.record.AbstractCacheRecord.resetAccessHit()"], ["boolean", "com.hazelcast.cache.impl.record.AbstractCacheRecord.isExpiredAt(long)"], ["void", "com.hazelcast.cache.impl.record.AbstractCacheRecord.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.record.AbstractCacheRecord.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.record.AbstractCacheRecord.getFactoryId()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheEventContext.getCacheName()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setCacheName(java.lang.String)"], ["com.hazelcast.cache.CacheEventType", "com.hazelcast.cache.impl.CacheEventContext.getEventType()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setEventType(com.hazelcast.cache.CacheEventType)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.CacheEventContext.getDataKey()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setDataKey(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.CacheEventContext.getDataValue()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setDataValue(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.CacheEventContext.getDataOldValue()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setDataOldValue(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.cache.impl.CacheEventContext.isOldValueAvailable()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setIsOldValueAvailable(boolean)"], ["long", "com.hazelcast.cache.impl.CacheEventContext.getCreationTime()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setCreationTime(long)"], ["long", "com.hazelcast.cache.impl.CacheEventContext.getExpirationTime()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setExpirationTime(long)"], ["long", "com.hazelcast.cache.impl.CacheEventContext.getLastAccessTime()"], ["void", "com.hazelcast.cache.impl.CacheEventContext.setLastAccessTime(long)"], ["long", "com.hazelcast.cache.impl.CacheEventContext.getAccessHit()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setAccessHit(long)"], ["java.lang.String", "com.hazelcast.cache.impl.CacheEventContext.getOrigin()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setOrigin(java.lang.String)"], ["int", "com.hazelcast.cache.impl.CacheEventContext.getOrderKey()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setOrderKey(int)"], ["int", "com.hazelcast.cache.impl.CacheEventContext.getCompletionId()"], ["com.hazelcast.cache.impl.CacheEventContext", "com.hazelcast.cache.impl.CacheEventContext.setCompletionId(int)"], ["com.hazelcast.cache.impl.maxsize.impl.EntryCountCacheEvictionChecker", "com.hazelcast.cache.impl.maxsize.impl.EntryCountCacheEvictionChecker(int, com.hazelcast.cache.impl.record.CacheRecordMap, int)"], ["int", "com.hazelcast.cache.impl.maxsize.impl.EntryCountCacheEvictionChecker.calculateMaxPartitionSize(int, int)"], ["boolean", "com.hazelcast.cache.impl.maxsize.impl.EntryCountCacheEvictionChecker.isEvictionRequired()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$26.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$29.createNew(java.lang.Object)"], ["V", "com.hazelcast.cache.impl.CacheProxy.get(K)"], ["java.util.Map<K, V>", "com.hazelcast.cache.impl.CacheProxy.getAll(java.util.Set<? extends K>)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.containsKey(K)"], ["void", "com.hazelcast.cache.impl.CacheProxy.loadAll(java.util.Set<? extends K>, boolean, javax.cache.integration.CompletionListener)"], ["void", "com.hazelcast.cache.impl.CacheProxy.put(K, V)"], ["V", "com.hazelcast.cache.impl.CacheProxy.getAndPut(K, V)"], ["void", "com.hazelcast.cache.impl.CacheProxy.putAll(java.util.Map<? extends K, ? extends V>)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.putIfAbsent(K, V)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.remove(K)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.remove(K, V)"], ["V", "com.hazelcast.cache.impl.CacheProxy.getAndRemove(K)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.replace(K, V, V)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.replace(K, V)"], ["V", "com.hazelcast.cache.impl.CacheProxy.getAndReplace(K, V)"], ["void", "com.hazelcast.cache.impl.CacheProxy.removeAll(java.util.Set<? extends K>)"], ["void", "com.hazelcast.cache.impl.CacheProxy.removeAll()"], ["void", "com.hazelcast.cache.impl.CacheProxy.clear()"], ["<C extends javax.cache.configuration.Configuration<K, V>> C", "com.hazelcast.cache.impl.CacheProxy.getConfiguration(java.lang.Class<C>)"], ["<T> T", "com.hazelcast.cache.impl.CacheProxy.invoke(K, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["<T> java.util.Map<K, javax.cache.processor.EntryProcessorResult<T>>", "com.hazelcast.cache.impl.CacheProxy.invokeAll(java.util.Set<? extends K>, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["<T> T", "com.hazelcast.cache.impl.CacheProxy.unwrap(java.lang.Class<T>)"], ["void", "com.hazelcast.cache.impl.CacheProxy.registerCacheEntryListener(javax.cache.configuration.CacheEntryListenerConfiguration<K, V>)"], ["void", "com.hazelcast.cache.impl.CacheProxy.registerCacheEntryListener(javax.cache.configuration.CacheEntryListenerConfiguration<K, V>, boolean)"], ["void", "com.hazelcast.cache.impl.CacheProxy.deregisterCacheEntryListener(javax.cache.configuration.CacheEntryListenerConfiguration<K, V>)"], ["java.util.Iterator<javax.cache.Cache$Entry<K, V>>", "com.hazelcast.cache.impl.CacheProxy.iterator()"], ["java.util.Iterator<javax.cache.Cache$Entry<K, V>>", "com.hazelcast.cache.impl.CacheProxy.iterator(int)"], ["java.util.Iterator<javax.cache.Cache$Entry<K, V>>", "com.hazelcast.cache.impl.CacheProxy.iterator(int, int, boolean)"], ["java.lang.String", "com.hazelcast.cache.impl.CacheProxy.addPartitionLostListener(com.hazelcast.cache.impl.event.CachePartitionLostListener)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.removePartitionLostListener(java.lang.String)"], ["<T> com.hazelcast.core.ICompletableFuture<com.hazelcast.ringbuffer.ReadResultSet<T>>", "com.hazelcast.cache.impl.CacheProxy.readFromEventJournal(long, int, int, int, com.hazelcast.util.function.Predicate<? super com.hazelcast.cache.journal.EventJournalCacheEvent<K, V>>, com.hazelcast.projection.Projection<? super com.hazelcast.cache.journal.EventJournalCacheEvent<K, V>, ? extends T>)"], ["int", "com.hazelcast.cache.impl.CacheProxy.size()"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheProxy.getAndReplace(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.replace(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.replace(java.lang.Object, java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.putIfAbsent(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["void", "com.hazelcast.cache.impl.CacheProxy.putAll(java.util.Map, javax.cache.expiry.ExpiryPolicy)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheProxy.getAndPut(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["void", "com.hazelcast.cache.impl.CacheProxy.put(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["java.util.Map", "com.hazelcast.cache.impl.CacheProxy.getAll(java.util.Set, javax.cache.expiry.ExpiryPolicy)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheProxy.get(java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.getAndReplaceAsync(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.getAndReplaceAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.replaceAsync(java.lang.Object, java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.replaceAsync(java.lang.Object, java.lang.Object, java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.replaceAsync(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.replaceAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.getAndRemoveAsync(java.lang.Object)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.cache.impl.CacheProxy.removeAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.cache.impl.CacheProxy.removeAsync(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.getAndPutAsync(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.CacheProxy.getAndPutAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.cache.impl.CacheProxy.putIfAbsentAsync(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.cache.impl.CacheProxy.putIfAbsentAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.cache.impl.CacheProxy.putAsync(java.lang.Object, java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.cache.impl.CacheProxy.putAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.cache.impl.CacheProxy.getAsync(java.lang.Object, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.cache.impl.CacheProxy.getAsync(java.lang.Object)"], ["com.hazelcast.cache.CacheStatistics", "com.hazelcast.cache.impl.CacheProxy.getLocalCacheStatistics()"], ["void", "com.hazelcast.cache.impl.CacheProxy.countDownCompletionLatch(int)"], ["void", "com.hazelcast.cache.impl.CacheProxy.resetCacheManager()"], ["void", "com.hazelcast.cache.impl.CacheProxy.setCacheManager(com.hazelcast.cache.HazelcastCacheManager)"], ["javax.cache.CacheManager", "com.hazelcast.cache.impl.CacheProxy.getCacheManager()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheProxy.toString()"], ["int", "com.hazelcast.cache.impl.CacheProxy.hashCode()"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.equals(java.lang.Object)"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.isDestroyed()"], ["boolean", "com.hazelcast.cache.impl.CacheProxy.isClosed()"], ["void", "com.hazelcast.cache.impl.CacheProxy.close()"], ["void", "com.hazelcast.cache.impl.CacheProxy.open()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheProxy.getServiceName()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheProxy.getPrefixedName()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheProxy.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$35.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$35.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$44.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$44.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$63.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$63.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.operation.AddCacheConfigOperationSupplier", "com.hazelcast.cache.impl.operation.AddCacheConfigOperationSupplier(com.hazelcast.cache.impl.PreJoinCacheConfig)"], ["com.hazelcast.cache.impl.operation.AddCacheConfigOperation", "com.hazelcast.cache.impl.operation.AddCacheConfigOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.AddCacheConfigOperationSupplier.get()"], ["com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation()"], ["com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>)"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation.getServiceName()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation.beforeRun()"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation.run()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation.getServiceNamespace()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.CacheRemoveAllBackupOperation.getServiceNamespace()"], ["com.hazelcast.cache.impl.operation.CacheKeyIteratorOperation", "com.hazelcast.cache.impl.operation.CacheKeyIteratorOperation()"], ["com.hazelcast.cache.impl.operation.CacheKeyIteratorOperation", "com.hazelcast.cache.impl.operation.CacheKeyIteratorOperation(java.lang.String, int, int)"], ["int", "com.hazelcast.cache.impl.operation.CacheKeyIteratorOperation.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheKeyIteratorOperation.run()"], ["com.hazelcast.cache.impl.operation.CacheMergeOperation", "com.hazelcast.cache.impl.operation.CacheMergeOperation()"], ["com.hazelcast.cache.impl.operation.CacheMergeOperation", "com.hazelcast.cache.impl.operation.CacheMergeOperation(java.lang.String, java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>)"], ["void", "com.hazelcast.cache.impl.operation.CacheMergeOperation.beforeRun()"], ["void", "com.hazelcast.cache.impl.operation.CacheMergeOperation.run()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheMergeOperation.getResponse()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheMergeOperation.shouldBackup()"], ["int", "com.hazelcast.cache.impl.operation.CacheMergeOperation.getSyncBackupCount()"], ["int", "com.hazelcast.cache.impl.operation.CacheMergeOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheMergeOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheMergeOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheMergeOperation.getId()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.CacheMergeOperation.getServiceNamespace()"], ["com.hazelcast.cache.impl.operation.CacheContainsKeyOperation", "com.hazelcast.cache.impl.operation.CacheContainsKeyOperation()"], ["com.hazelcast.cache.impl.operation.CacheContainsKeyOperation", "com.hazelcast.cache.impl.operation.CacheContainsKeyOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.cache.impl.operation.CacheContainsKeyOperation.run()"], ["int", "com.hazelcast.cache.impl.operation.CacheContainsKeyOperation.getId()"], ["com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation", "com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation()"], ["com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation", "com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy, int)"], ["void", "com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation.afterRun()"], ["boolean", "com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CachePutIfAbsentOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation", "com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation()"], ["com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation", "com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy, int)"], ["void", "com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation.afterRun()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetAndReplaceOperation.getId()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.getServiceName()"], ["void", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.beforeRun()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.getResponse()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.onInvocationException(java.lang.Throwable)"], ["void", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.logError(java.lang.Throwable)"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.getServiceNamespace()"], ["int", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.getSyncBackupCount()"], ["int", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.AbstractCacheOperation.getServiceNamespace()"], ["com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation", "com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation()"], ["com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation", "com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation(java.lang.String, com.hazelcast.nio.serialization.Data, int, javax.cache.processor.EntryProcessor, java.lang.Object...)"], ["boolean", "com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CacheEntryProcessorOperation.afterRun()"], ["com.hazelcast.cache.impl.operation.CacheRemoveOperation", "com.hazelcast.cache.impl.operation.CacheRemoveOperation()"], ["com.hazelcast.cache.impl.operation.CacheRemoveOperation", "com.hazelcast.cache.impl.operation.CacheRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveOperation.afterRun()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheRemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheRemoveOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheGetAllOperation", "com.hazelcast.cache.impl.operation.CacheGetAllOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.cache.impl.operation.CacheGetAllOperation", "com.hazelcast.cache.impl.operation.CacheGetAllOperation()"], ["void", "com.hazelcast.cache.impl.operation.CacheGetAllOperation.run()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetAllOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetAllOperation.getFactoryId()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheGetAllOperation.getResponse()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheGetAllOperation.getServiceName()"], ["com.hazelcast.cache.impl.operation.CacheReplaceOperation", "com.hazelcast.cache.impl.operation.CacheReplaceOperation()"], ["com.hazelcast.cache.impl.operation.CacheReplaceOperation", "com.hazelcast.cache.impl.operation.CacheReplaceOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy, int)"], ["void", "com.hazelcast.cache.impl.operation.CacheReplaceOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CacheReplaceOperation.afterRun()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheReplaceOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheReplaceOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheReplaceOperation.getId()"], ["com.hazelcast.cache.impl.operation.CachePutOperation", "com.hazelcast.cache.impl.operation.CachePutOperation()"], ["com.hazelcast.cache.impl.operation.CachePutOperation", "com.hazelcast.cache.impl.operation.CachePutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy, boolean, int)"], ["void", "com.hazelcast.cache.impl.operation.CachePutOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CachePutOperation.afterRun()"], ["boolean", "com.hazelcast.cache.impl.operation.CachePutOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CachePutOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CachePutOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheRemoveAllOperation", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation()"], ["com.hazelcast.cache.impl.operation.CacheRemoveAllOperation", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, int)"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.beforeRun()"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.run()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.shouldBackup()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getSyncBackupCount()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getBackupOperation()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getServiceNamespace()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getFactoryId()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getResponse()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getServiceName()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperation.getServiceNamespace()"], ["com.hazelcast.cache.impl.operation.CacheSizeOperation", "com.hazelcast.cache.impl.operation.CacheSizeOperation()"], ["com.hazelcast.cache.impl.operation.CacheSizeOperation", "com.hazelcast.cache.impl.operation.CacheSizeOperation(java.lang.String)"], ["void", "com.hazelcast.cache.impl.operation.CacheSizeOperation.run()"], ["int", "com.hazelcast.cache.impl.operation.CacheSizeOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheSizeOperation.getFactoryId()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheSizeOperation.getResponse()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheSizeOperation.getServiceName()"], ["com.hazelcast.cache.impl.operation.CacheDestroyOperation", "com.hazelcast.cache.impl.operation.CacheDestroyOperation()"], ["com.hazelcast.cache.impl.operation.CacheDestroyOperation", "com.hazelcast.cache.impl.operation.CacheDestroyOperation(java.lang.String)"], ["com.hazelcast.cache.impl.operation.CacheDestroyOperation", "com.hazelcast.cache.impl.operation.CacheDestroyOperation(java.lang.String, boolean)"], ["void", "com.hazelcast.cache.impl.operation.CacheDestroyOperation.run()"], ["int", "com.hazelcast.cache.impl.operation.CacheDestroyOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheDestroyOperation.getFactoryId()"], ["com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation", "com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation()"], ["com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation", "com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation", "com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation.runInternal()"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation.afterRunInternal()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveBackupOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheListenerRegistrationOperation", "com.hazelcast.cache.impl.operation.CacheListenerRegistrationOperation()"], ["com.hazelcast.cache.impl.operation.CacheListenerRegistrationOperation", "com.hazelcast.cache.impl.operation.CacheListenerRegistrationOperation(java.lang.String, javax.cache.configuration.CacheEntryListenerConfiguration, boolean)"], ["void", "com.hazelcast.cache.impl.operation.CacheListenerRegistrationOperation.run()"], ["int", "com.hazelcast.cache.impl.operation.CacheListenerRegistrationOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheListenerRegistrationOperation.getFactoryId()"], ["com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory", "com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory", "com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory()"], ["int", "com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory.getId()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory.createOperation()"], ["void", "com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheLoadAllOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.cache.impl.operation.OnJoinCacheOperation", "com.hazelcast.cache.impl.operation.OnJoinCacheOperation()"], ["void", "com.hazelcast.cache.impl.operation.OnJoinCacheOperation.addCacheConfig(com.hazelcast.config.CacheConfig)"], ["java.lang.String", "com.hazelcast.cache.impl.operation.OnJoinCacheOperation.getServiceName()"], ["void", "com.hazelcast.cache.impl.operation.OnJoinCacheOperation.run()"], ["int", "com.hazelcast.cache.impl.operation.OnJoinCacheOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.OnJoinCacheOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation", "com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation()"], ["com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation", "com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.cache.CacheEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>, com.hazelcast.cache.CacheMergePolicy)"], ["void", "com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation.afterRun()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheLegacyMergeOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory()"], ["com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory.createOperation()"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheRemoveAllOperationFactory.getId()"], ["com.hazelcast.cache.impl.operation.AddCacheConfigOperation", "com.hazelcast.cache.impl.operation.AddCacheConfigOperation()"], ["com.hazelcast.cache.impl.operation.AddCacheConfigOperation", "com.hazelcast.cache.impl.operation.AddCacheConfigOperation(com.hazelcast.cache.impl.PreJoinCacheConfig)"], ["void", "com.hazelcast.cache.impl.operation.AddCacheConfigOperation.run()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.AddCacheConfigOperation.getServiceName()"], ["int", "com.hazelcast.cache.impl.operation.AddCacheConfigOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.AddCacheConfigOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheBackupEntryProcessorOperation", "com.hazelcast.cache.impl.operation.CacheBackupEntryProcessorOperation()"], ["com.hazelcast.cache.impl.operation.CacheBackupEntryProcessorOperation", "com.hazelcast.cache.impl.operation.CacheBackupEntryProcessorOperation(java.lang.String, com.hazelcast.nio.serialization.Data, javax.cache.processor.EntryProcessor, java.lang.Object...)"], ["int", "com.hazelcast.cache.impl.operation.CacheBackupEntryProcessorOperation.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheBackupEntryProcessorOperation.runInternal()"], ["void", "com.hazelcast.cache.impl.operation.CacheBackupEntryProcessorOperation.afterRunInternal()"], ["com.hazelcast.cache.impl.operation.CacheClearOperation", "com.hazelcast.cache.impl.operation.CacheClearOperation()"], ["com.hazelcast.cache.impl.operation.CacheClearOperation", "com.hazelcast.cache.impl.operation.CacheClearOperation(java.lang.String)"], ["void", "com.hazelcast.cache.impl.operation.CacheClearOperation.beforeRun()"], ["void", "com.hazelcast.cache.impl.operation.CacheClearOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CacheClearOperation.afterRun()"], ["int", "com.hazelcast.cache.impl.operation.CacheClearOperation.getId()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheClearOperation.shouldBackup()"], ["int", "com.hazelcast.cache.impl.operation.CacheClearOperation.getSyncBackupCount()"], ["int", "com.hazelcast.cache.impl.operation.CacheClearOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheClearOperation.getBackupOperation()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.operation.CacheClearOperation.getServiceNamespace()"], ["int", "com.hazelcast.cache.impl.operation.CacheClearOperation.getFactoryId()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheClearOperation.getResponse()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheClearOperation.getServiceName()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.CacheClearOperation.getServiceNamespace()"], ["com.hazelcast.cache.impl.operation.CacheReplicationOperation", "com.hazelcast.cache.impl.operation.CacheReplicationOperation()"], ["void", "com.hazelcast.cache.impl.operation.CacheReplicationOperation.prepare(com.hazelcast.cache.impl.CachePartitionSegment, java.util.Collection<com.hazelcast.spi.ServiceNamespace>, int)"], ["void", "com.hazelcast.cache.impl.operation.CacheReplicationOperation.beforeRun()"], ["void", "com.hazelcast.cache.impl.operation.CacheReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheReplicationOperation.getServiceName()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheReplicationOperation.isEmpty()"], ["int", "com.hazelcast.cache.impl.operation.CacheReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheReplicationOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheMergeOperationFactory", "com.hazelcast.cache.impl.operation.CacheMergeOperationFactory()"], ["com.hazelcast.cache.impl.operation.CacheMergeOperationFactory", "com.hazelcast.cache.impl.operation.CacheMergeOperationFactory(java.lang.String, int[], java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>[], com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes>)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheMergeOperationFactory.createPartitionOperation(int)"], ["void", "com.hazelcast.cache.impl.operation.CacheMergeOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheMergeOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.operation.CacheMergeOperationFactory.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheMergeOperationFactory.getId()"], ["com.hazelcast.cache.impl.operation.CachePutAllBackupOperation", "com.hazelcast.cache.impl.operation.CachePutAllBackupOperation()"], ["com.hazelcast.cache.impl.operation.CachePutAllBackupOperation", "com.hazelcast.cache.impl.operation.CachePutAllBackupOperation(java.lang.String, java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord>)"], ["void", "com.hazelcast.cache.impl.operation.CachePutAllBackupOperation.beforeRun()"], ["void", "com.hazelcast.cache.impl.operation.CachePutAllBackupOperation.run()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.operation.CachePutAllBackupOperation.getServiceNamespace()"], ["int", "com.hazelcast.cache.impl.operation.CachePutAllBackupOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CachePutAllBackupOperation.getFactoryId()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.CachePutAllBackupOperation.getServiceNamespace()"], ["com.hazelcast.cache.impl.operation.CacheCreateConfigOperation$CacheConfigCreateCallback", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation$CacheConfigCreateCallback(com.hazelcast.cache.impl.operation.CacheCreateConfigOperation, int)"], ["void", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation$CacheConfigCreateCallback.notify(java.lang.Object)"], ["com.hazelcast.cache.impl.operation.CachePutBackupOperation", "com.hazelcast.cache.impl.operation.CachePutBackupOperation()"], ["com.hazelcast.cache.impl.operation.CachePutBackupOperation", "com.hazelcast.cache.impl.operation.CachePutBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord)"], ["com.hazelcast.cache.impl.operation.CachePutBackupOperation", "com.hazelcast.cache.impl.operation.CachePutBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.cache.impl.record.CacheRecord, boolean)"], ["void", "com.hazelcast.cache.impl.operation.CachePutBackupOperation.runInternal()"], ["void", "com.hazelcast.cache.impl.operation.CachePutBackupOperation.afterRunInternal()"], ["int", "com.hazelcast.cache.impl.operation.CachePutBackupOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheSizeOperationFactory", "com.hazelcast.cache.impl.operation.CacheSizeOperationFactory()"], ["com.hazelcast.cache.impl.operation.CacheSizeOperationFactory", "com.hazelcast.cache.impl.operation.CacheSizeOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheSizeOperationFactory.createOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheSizeOperationFactory.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheSizeOperationFactory.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheSizeOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheSizeOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.cache.impl.operation.PartitionWideCacheOperation.getServiceName()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.PartitionWideCacheOperation.getResponse()"], ["int", "com.hazelcast.cache.impl.operation.PartitionWideCacheOperation.getFactoryId()"], ["com.hazelcast.cache.impl.operation.CacheLoadAllOperation", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.cache.impl.operation.CacheLoadAllOperation", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation()"], ["void", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.run()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.getResponse()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.getSyncBackupCount()"], ["int", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.getServiceNamespace()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.CacheLoadAllOperation.getServiceNamespace()"], ["com.hazelcast.cache.impl.operation.CacheCreateConfigOperation", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation()"], ["com.hazelcast.cache.impl.operation.CacheCreateConfigOperation", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation(com.hazelcast.config.CacheConfig, boolean)"], ["com.hazelcast.cache.impl.operation.CacheCreateConfigOperation", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation(com.hazelcast.config.CacheConfig, boolean, boolean)"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation.getServiceName()"], ["void", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation.onExecutionFailure(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation.getResponse()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation.returnsResponse()"], ["int", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheCreateConfigOperation.getFactoryId()"], ["com.hazelcast.cache.impl.operation.CacheEntryIteratorOperation", "com.hazelcast.cache.impl.operation.CacheEntryIteratorOperation()"], ["com.hazelcast.cache.impl.operation.CacheEntryIteratorOperation", "com.hazelcast.cache.impl.operation.CacheEntryIteratorOperation(java.lang.String, int, int)"], ["int", "com.hazelcast.cache.impl.operation.CacheEntryIteratorOperation.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheEntryIteratorOperation.run()"], ["com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation", "com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation()"], ["com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation", "com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, int)"], ["void", "com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation.afterRun()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetAndRemoveOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory", "com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory()"], ["com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory", "com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory.createOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheGetAllOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.operation.AbstractMutatingCacheOperation.getCompletionId()"], ["void", "com.hazelcast.cache.impl.operation.AbstractMutatingCacheOperation.setCompletionId(int)"], ["com.hazelcast.cache.impl.operation.CacheClearBackupOperation", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation()"], ["com.hazelcast.cache.impl.operation.CacheClearBackupOperation", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation(java.lang.String)"], ["void", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation.beforeRun()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation.getServiceName()"], ["void", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation.run()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation.getServiceNamespace()"], ["int", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation.getId()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.CacheClearBackupOperation.getServiceNamespace()"], ["void", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation$1.onResponse(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation$1.onFailure(java.lang.Throwable)"], ["com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder", "com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder()"], ["com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder", "com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder(com.hazelcast.cache.impl.operation.CacheReplicationOperation)"], ["void", "com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder.applyState()"], ["void", "com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheNearCacheStateHolder.getId()"], ["com.hazelcast.cache.impl.operation.CachePutAllOperation", "com.hazelcast.cache.impl.operation.CachePutAllOperation()"], ["com.hazelcast.cache.impl.operation.CachePutAllOperation", "com.hazelcast.cache.impl.operation.CachePutAllOperation(java.lang.String, java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>, javax.cache.expiry.ExpiryPolicy, int)"], ["int", "com.hazelcast.cache.impl.operation.CachePutAllOperation.getCompletionId()"], ["void", "com.hazelcast.cache.impl.operation.CachePutAllOperation.setCompletionId(int)"], ["void", "com.hazelcast.cache.impl.operation.CachePutAllOperation.run()"], ["boolean", "com.hazelcast.cache.impl.operation.CachePutAllOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CachePutAllOperation.getBackupOperation()"], ["int", "com.hazelcast.cache.impl.operation.CachePutAllOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CachePutAllOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CachePutAllOperation.getSyncBackupCount()"], ["int", "com.hazelcast.cache.impl.operation.CachePutAllOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.cache.impl.operation.CachePutAllOperation.getServiceNamespace()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.cache.impl.operation.CachePutAllOperation.getServiceNamespace()"], ["com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation()"], ["com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation(java.util.List<java.lang.String>)"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation.getServiceName()"], ["void", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation.run()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation.getResponse()"], ["void", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation.getId()"], ["com.hazelcast.cache.impl.operation.CacheGetConfigOperation", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation()"], ["com.hazelcast.cache.impl.operation.CacheGetConfigOperation", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation.run()"], ["boolean", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation.returnsResponse()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation.getFactoryId()"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation.getServiceName()"], ["java.lang.Object", "com.hazelcast.cache.impl.operation.CacheGetConfigOperation.getResponse()"], ["com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation$MetaDataResponse", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation$MetaDataResponse()"], ["java.util.Map<java.lang.String, java.util.List<java.util.Map$Entry<java.lang.Integer, java.lang.Long>>>", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation$MetaDataResponse.getNamePartitionSequenceList()"], ["java.util.Map<java.lang.Integer, java.util.UUID>", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation$MetaDataResponse.getPartitionUuidList()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation$MetaDataResponse.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation$MetaDataResponse.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation$MetaDataResponse.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheGetInvalidationMetaDataOperation$MetaDataResponse.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.cache.impl.operation.AbstractBackupCacheOperation.beforeRun()"], ["void", "com.hazelcast.cache.impl.operation.AbstractBackupCacheOperation.run()"], ["void", "com.hazelcast.cache.impl.operation.AbstractBackupCacheOperation.afterRun()"], ["com.hazelcast.cache.impl.operation.CacheManagementConfigOperation", "com.hazelcast.cache.impl.operation.CacheManagementConfigOperation()"], ["com.hazelcast.cache.impl.operation.CacheManagementConfigOperation", "com.hazelcast.cache.impl.operation.CacheManagementConfigOperation(java.lang.String, boolean, boolean)"], ["java.lang.String", "com.hazelcast.cache.impl.operation.CacheManagementConfigOperation.getServiceName()"], ["void", "com.hazelcast.cache.impl.operation.CacheManagementConfigOperation.run()"], ["int", "com.hazelcast.cache.impl.operation.CacheManagementConfigOperation.getId()"], ["int", "com.hazelcast.cache.impl.operation.CacheManagementConfigOperation.getFactoryId()"], ["com.hazelcast.cache.impl.operation.CacheClearOperationFactory", "com.hazelcast.cache.impl.operation.CacheClearOperationFactory()"], ["com.hazelcast.cache.impl.operation.CacheClearOperationFactory", "com.hazelcast.cache.impl.operation.CacheClearOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.operation.CacheClearOperationFactory.createOperation()"], ["int", "com.hazelcast.cache.impl.operation.CacheClearOperationFactory.getFactoryId()"], ["int", "com.hazelcast.cache.impl.operation.CacheClearOperationFactory.getId()"], ["void", "com.hazelcast.cache.impl.operation.CacheClearOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.operation.CacheClearOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.cache.impl.operation.CacheGetOperation", "com.hazelcast.cache.impl.operation.CacheGetOperation()"], ["com.hazelcast.cache.impl.operation.CacheGetOperation", "com.hazelcast.cache.impl.operation.CacheGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, javax.cache.expiry.ExpiryPolicy)"], ["void", "com.hazelcast.cache.impl.operation.CacheGetOperation.run()"], ["int", "com.hazelcast.cache.impl.operation.CacheGetOperation.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$59.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$59.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$42.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$42.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.AbstractClusterWideIterator", "com.hazelcast.cache.impl.AbstractClusterWideIterator(com.hazelcast.cache.impl.ICacheInternal<K, V>, int, int, boolean)"], ["boolean", "com.hazelcast.cache.impl.AbstractClusterWideIterator.hasNext()"], ["javax.cache.Cache$Entry<K, V>", "com.hazelcast.cache.impl.AbstractClusterWideIterator.next()"], ["void", "com.hazelcast.cache.impl.AbstractClusterWideIterator.remove()"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractClusterWideIterator.next()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$50.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$50.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl(com.hazelcast.cache.impl.CacheStatisticsImpl)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.clear()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getCacheHits()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getCacheHitPercentage()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getCacheMisses()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getCacheMissPercentage()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getCacheGets()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getCachePuts()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getCacheRemovals()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getCacheEvictions()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getAverageGetTime()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getAveragePutTime()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsMXBeanImpl.getAverageRemoveTime()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$58.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$58.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheEntryProcessorEntry", "com.hazelcast.cache.impl.CacheEntryProcessorEntry(com.hazelcast.nio.serialization.Data, R, com.hazelcast.cache.impl.AbstractCacheRecordStore, long, int)"], ["boolean", "com.hazelcast.cache.impl.CacheEntryProcessorEntry.exists()"], ["void", "com.hazelcast.cache.impl.CacheEntryProcessorEntry.remove()"], ["void", "com.hazelcast.cache.impl.CacheEntryProcessorEntry.setValue(V)"], ["K", "com.hazelcast.cache.impl.CacheEntryProcessorEntry.getKey()"], ["V", "com.hazelcast.cache.impl.CacheEntryProcessorEntry.getValue()"], ["R", "com.hazelcast.cache.impl.CacheEntryProcessorEntry.getRecord()"], ["void", "com.hazelcast.cache.impl.CacheEntryProcessorEntry.applyChanges()"], ["<T> T", "com.hazelcast.cache.impl.CacheEntryProcessorEntry.unwrap(java.lang.Class<T>)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$43.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$43.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheKeyIterationResult", "com.hazelcast.cache.impl.CacheKeyIterationResult()"], ["com.hazelcast.cache.impl.CacheKeyIterationResult", "com.hazelcast.cache.impl.CacheKeyIterationResult(java.util.List<com.hazelcast.nio.serialization.Data>, int)"], ["int", "com.hazelcast.cache.impl.CacheKeyIterationResult.getTableIndex()"], ["int", "com.hazelcast.cache.impl.CacheKeyIterationResult.getFactoryId()"], ["int", "com.hazelcast.cache.impl.CacheKeyIterationResult.getId()"], ["void", "com.hazelcast.cache.impl.CacheKeyIterationResult.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.CacheKeyIterationResult.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.cache.impl.CacheKeyIterationResult.toString()"], ["int", "com.hazelcast.cache.impl.CacheKeyIterationResult.getCount()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.CacheKeyIterationResult.getKey(int)"], ["com.hazelcast.cache.impl.CacheStatisticsImpl", "com.hazelcast.cache.impl.CacheStatisticsImpl(long)"], ["com.hazelcast.cache.impl.CacheStatisticsImpl", "com.hazelcast.cache.impl.CacheStatisticsImpl(long, com.hazelcast.cache.impl.CacheEntryCountResolver)"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCreationTime()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getLastAccessTime()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getLastUpdateTime()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getOwnedEntryCount()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheRemovals()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheExpiries()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheGets()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCachePuts()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheHits()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheMisses()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheEvictions()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCachePutTimeTakenNanos()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheGetTimeTakenNanos()"], ["long", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheRemoveTimeTakenNanos()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheHitPercentage()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsImpl.getCacheMissPercentage()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsImpl.getAverageGetTime()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsImpl.getAveragePutTime()"], ["float", "com.hazelcast.cache.impl.CacheStatisticsImpl.getAverageRemoveTime()"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.clear()"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.setLastAccessTime(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.setLastUpdateTime(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheRemovals()"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheRemovals(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheExpiries()"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheExpiries(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCachePuts()"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCachePuts(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheHits()"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheHits(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheMisses()"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheMisses(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheEvictions()"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.increaseCacheEvictions(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.addGetTimeNanos(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.addPutTimeNanos(long)"], ["void", "com.hazelcast.cache.impl.CacheStatisticsImpl.addRemoveTimeNanos(long)"], ["com.hazelcast.monitor.NearCacheStats", "com.hazelcast.cache.impl.CacheStatisticsImpl.getNearCacheStatistics()"], ["java.lang.String", "com.hazelcast.cache.impl.CacheStatisticsImpl.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$40.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$40.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$57.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$57.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$31.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CachePartitionIterator", "com.hazelcast.cache.impl.CachePartitionIterator(com.hazelcast.cache.impl.CacheProxy<K, V>, int, int, boolean)"], ["com.hazelcast.cache.impl.CacheEventSet", "com.hazelcast.cache.impl.CacheEventSet()"], ["com.hazelcast.cache.impl.CacheEventSet", "com.hazelcast.cache.impl.CacheEventSet(com.hazelcast.cache.CacheEventType, java.util.Set<com.hazelcast.cache.impl.CacheEventData>)"], ["com.hazelcast.cache.impl.CacheEventSet", "com.hazelcast.cache.impl.CacheEventSet(com.hazelcast.cache.CacheEventType, java.util.Set<com.hazelcast.cache.impl.CacheEventData>, int)"], ["com.hazelcast.cache.impl.CacheEventSet", "com.hazelcast.cache.impl.CacheEventSet(com.hazelcast.cache.CacheEventType, int)"], ["com.hazelcast.cache.CacheEventType", "com.hazelcast.cache.impl.CacheEventSet.getEventType()"], ["int", "com.hazelcast.cache.impl.CacheEventSet.getCompletionId()"], ["void", "com.hazelcast.cache.impl.CacheEventSet.addEventData(com.hazelcast.cache.impl.CacheEventData)"], ["void", "com.hazelcast.cache.impl.CacheEventSet.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.CacheEventSet.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cache.impl.CacheEventSet.getId()"], ["int", "com.hazelcast.cache.impl.CacheEventSet.getFactoryId()"], ["com.hazelcast.cache.impl.CacheEntryProcessorEntry$State[]", "com.hazelcast.cache.impl.CacheEntryProcessorEntry$State.values()"], ["com.hazelcast.cache.impl.CacheEntryProcessorEntry$State", "com.hazelcast.cache.impl.CacheEntryProcessorEntry$State.valueOf(java.lang.String)"], ["java.lang.ClassLoader", "com.hazelcast.cache.impl.JCacheDetector$1.run()"], ["java.lang.Object", "com.hazelcast.cache.impl.JCacheDetector$1.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$45.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$45.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$52.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$52.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheEntryCountResolver", "com.hazelcast.cache.impl.CacheEntryCountResolver()"], ["com.hazelcast.cache.impl.CacheEntryCountResolver", "com.hazelcast.cache.impl.CacheEntryCountResolver.createEntryCountResolver(com.hazelcast.cache.impl.CacheContext)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cache.impl.CacheDataSerializerHook$36.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.cache.impl.CacheDataSerializerHook$36.createNew(java.lang.Object)"], ["com.hazelcast.cache.impl.CacheDataSerializerHook", "com.hazelcast.cache.impl.CacheDataSerializerHook()"], ["int", "com.hazelcast.cache.impl.CacheDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.cache.impl.CacheDataSerializerHook.createFactory()"], ["com.hazelcast.cache.impl.CacheEntryIterationResult", "com.hazelcast.cache.impl.CacheEntryIterationResult()"], ["com.hazelcast.cache.impl.CacheEntryIterationResult", "com.hazelcast.cache.impl.CacheEntryIterationResult(java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>, int)"], ["int", "com.hazelcast.cache.impl.CacheEntryIterationResult.getTableIndex()"], ["java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>", "com.hazelcast.cache.impl.CacheEntryIterationResult.getEntries()"], ["int", "com.hazelcast.cache.impl.CacheEntryIterationResult.getFactoryId()"], ["int", "com.hazelcast.cache.impl.CacheEntryIterationResult.getId()"], ["void", "com.hazelcast.cache.impl.CacheEntryIterationResult.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.impl.CacheEntryIterationResult.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.cache.impl.CacheEntryIterationResult.toString()"], ["int", "com.hazelcast.cache.impl.CacheEntryIterationResult.getCount()"], ["com.hazelcast.cache.impl.AbstractCacheService", "com.hazelcast.cache.impl.AbstractCacheService()"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider", "com.hazelcast.cache.impl.AbstractCacheService.getMergePolicyProvider()"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheService.getMergePolicy(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.CacheConfig>", "com.hazelcast.cache.impl.AbstractCacheService.getConfigs()"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.reset()"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.shutdown(boolean)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.cache.impl.AbstractCacheService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.cache.impl.ICacheRecordStore", "com.hazelcast.cache.impl.AbstractCacheService.getOrCreateRecordStore(java.lang.String, int)"], ["com.hazelcast.cache.impl.ICacheRecordStore", "com.hazelcast.cache.impl.AbstractCacheService.getRecordStore(java.lang.String, int)"], ["com.hazelcast.cache.impl.CachePartitionSegment", "com.hazelcast.cache.impl.AbstractCacheService.getSegment(int)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.deleteCache(java.lang.String, java.lang.String, boolean)"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.cache.impl.AbstractCacheService.putCacheConfigIfAbsent(com.hazelcast.config.CacheConfig)"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.cache.impl.AbstractCacheService.deleteCacheConfig(java.lang.String)"], ["com.hazelcast.cache.impl.CacheStatisticsImpl", "com.hazelcast.cache.impl.AbstractCacheService.createCacheStatIfAbsent(java.lang.String)"], ["com.hazelcast.cache.impl.CacheContext", "com.hazelcast.cache.impl.AbstractCacheService.getCacheContext(java.lang.String)"], ["com.hazelcast.cache.impl.CacheContext", "com.hazelcast.cache.impl.AbstractCacheService.getOrCreateCacheContext(java.lang.String)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.deleteCacheStat(java.lang.String)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.setStatisticsEnabled(com.hazelcast.config.CacheConfig, java.lang.String, boolean)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.setManagementEnabled(com.hazelcast.config.CacheConfig, java.lang.String, boolean)"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.cache.impl.AbstractCacheService.getCacheConfig(java.lang.String)"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.cache.impl.AbstractCacheService.findCacheConfig(java.lang.String)"], ["java.lang.Object", "com.hazelcast.cache.impl.AbstractCacheService.toObject(java.lang.Object)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.cache.impl.AbstractCacheService.toData(java.lang.Object)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.publishEvent(com.hazelcast.cache.impl.CacheEventContext)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.publishEvent(java.lang.String, com.hazelcast.cache.impl.CacheEventSet, int)"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.cache.impl.AbstractCacheService.getNodeEngine()"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.dispatchEvent(java.lang.Object, com.hazelcast.cache.impl.CacheEventListener)"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheService.registerListener(java.lang.String, com.hazelcast.cache.impl.CacheEventListener, boolean)"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheService.registerListener(java.lang.String, com.hazelcast.cache.impl.CacheEventListener, com.hazelcast.spi.EventFilter, boolean)"], ["boolean", "com.hazelcast.cache.impl.AbstractCacheService.deregisterListener(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.deregisterAllListener(java.lang.String)"], ["com.hazelcast.cache.impl.CacheStatisticsImpl", "com.hazelcast.cache.impl.AbstractCacheService.getStatistics(java.lang.String)"], ["com.hazelcast.cache.impl.CacheOperationProvider", "com.hazelcast.cache.impl.AbstractCacheService.getCacheOperationProvider(java.lang.String, com.hazelcast.config.InMemoryFormat)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.addCacheResource(java.lang.String, java.io.Closeable)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cache.impl.AbstractCacheService.getPreJoinOperation()"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.onPartitionLost(com.hazelcast.spi.partition.IPartitionLostEvent)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.cacheEntryListenerRegistered(java.lang.String, javax.cache.configuration.CacheEntryListenerConfiguration)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.cacheEntryListenerDeregistered(java.lang.String, javax.cache.configuration.CacheEntryListenerConfiguration)"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheService.getQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.cache.impl.AbstractCacheService.addInvalidationListener(java.lang.String, com.hazelcast.cache.impl.CacheEventListener, boolean)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.sendInvalidationEvent(java.lang.String, com.hazelcast.nio.serialization.Data, java.lang.String)"], ["java.lang.Runnable", "com.hazelcast.cache.impl.AbstractCacheService.prepareMergeRunnable()"], ["com.hazelcast.cache.impl.CacheEventHandler", "com.hazelcast.cache.impl.AbstractCacheService.getCacheEventHandler()"], ["com.hazelcast.cache.impl.journal.CacheEventJournal", "com.hazelcast.cache.impl.AbstractCacheService.getEventJournal()"], ["<K, V> void", "com.hazelcast.cache.impl.AbstractCacheService.createCacheConfigOnAllMembers(com.hazelcast.cache.impl.PreJoinCacheConfig<K, V>)"], ["<K, V> com.hazelcast.core.ICompletableFuture", "com.hazelcast.cache.impl.AbstractCacheService.createCacheConfigOnAllMembersAsync(com.hazelcast.cache.impl.PreJoinCacheConfig<K, V>)"], ["com.hazelcast.cache.CacheStatistics", "com.hazelcast.cache.impl.AbstractCacheService.getStatistics(java.lang.String)"], ["void", "com.hazelcast.cache.impl.AbstractCacheService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.cache.CacheEvictionPolicyComparator", "com.hazelcast.cache.CacheEvictionPolicyComparator()"], ["int", "com.hazelcast.cache.CacheEvictionPolicyComparator.compare(com.hazelcast.internal.eviction.EvictableEntryView, com.hazelcast.internal.eviction.EvictableEntryView)"], ["int", "com.hazelcast.cache.CacheEvictionPolicyComparator.compare(java.lang.Object, java.lang.Object)"], ["com.hazelcast.cache.HazelcastExpiryPolicy", "com.hazelcast.cache.HazelcastExpiryPolicy()"], ["com.hazelcast.cache.HazelcastExpiryPolicy", "com.hazelcast.cache.HazelcastExpiryPolicy(long, long, long)"], ["com.hazelcast.cache.HazelcastExpiryPolicy", "com.hazelcast.cache.HazelcastExpiryPolicy(long, long, long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.cache.HazelcastExpiryPolicy", "com.hazelcast.cache.HazelcastExpiryPolicy(javax.cache.expiry.ExpiryPolicy)"], ["com.hazelcast.cache.HazelcastExpiryPolicy", "com.hazelcast.cache.HazelcastExpiryPolicy(javax.cache.expiry.Duration, javax.cache.expiry.Duration, javax.cache.expiry.Duration)"], ["javax.cache.expiry.Duration", "com.hazelcast.cache.HazelcastExpiryPolicy.getExpiryForCreation()"], ["javax.cache.expiry.Duration", "com.hazelcast.cache.HazelcastExpiryPolicy.getExpiryForAccess()"], ["javax.cache.expiry.Duration", "com.hazelcast.cache.HazelcastExpiryPolicy.getExpiryForUpdate()"], ["int", "com.hazelcast.cache.HazelcastExpiryPolicy.getFactoryId()"], ["int", "com.hazelcast.cache.HazelcastExpiryPolicy.getId()"], ["void", "com.hazelcast.cache.HazelcastExpiryPolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cache.HazelcastExpiryPolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.cache.HazelcastExpiryPolicy.equals(java.lang.Object)"], ["int", "com.hazelcast.cache.HazelcastExpiryPolicy.hashCode()"], ["com.hazelcast.cache.CacheMergePolicy", "com.hazelcast.cache.BuiltInCacheMergePolicies$2.create()"], ["java.lang.String", "com.hazelcast.cache.CacheUtil.getPrefix(java.net.URI, java.lang.ClassLoader)"], ["java.lang.String", "com.hazelcast.cache.CacheUtil.getPrefixedCacheName(java.lang.String, java.net.URI, java.lang.ClassLoader)"], ["java.lang.String", "com.hazelcast.cache.CacheUtil.getDistributedObjectName(java.lang.String)"], ["java.lang.String", "com.hazelcast.cache.CacheUtil.getDistributedObjectName(java.lang.String, java.net.URI, java.lang.ClassLoader)"], ["com.hazelcast.cache.merge.PassThroughCacheMergePolicy", "com.hazelcast.cache.merge.PassThroughCacheMergePolicy()"], ["java.lang.Object", "com.hazelcast.cache.merge.PassThroughCacheMergePolicy.merge(java.lang.String, com.hazelcast.cache.CacheEntryView, com.hazelcast.cache.CacheEntryView)"], ["com.hazelcast.cache.merge.HigherHitsCacheMergePolicy", "com.hazelcast.cache.merge.HigherHitsCacheMergePolicy()"], ["java.lang.Object", "com.hazelcast.cache.merge.HigherHitsCacheMergePolicy.merge(java.lang.String, com.hazelcast.cache.CacheEntryView, com.hazelcast.cache.CacheEntryView)"], ["com.hazelcast.cache.merge.LatestAccessCacheMergePolicy", "com.hazelcast.cache.merge.LatestAccessCacheMergePolicy()"], ["java.lang.Object", "com.hazelcast.cache.merge.LatestAccessCacheMergePolicy.merge(java.lang.String, com.hazelcast.cache.CacheEntryView, com.hazelcast.cache.CacheEntryView)"], ["com.hazelcast.cache.merge.PutIfAbsentCacheMergePolicy", "com.hazelcast.cache.merge.PutIfAbsentCacheMergePolicy()"], ["java.lang.Object", "com.hazelcast.cache.merge.PutIfAbsentCacheMergePolicy.merge(java.lang.String, com.hazelcast.cache.CacheEntryView, com.hazelcast.cache.CacheEntryView)"], ["com.hazelcast.cache.CacheMergePolicy", "com.hazelcast.cache.BuiltInCacheMergePolicies$3.create()"], ["com.hazelcast.cache.BuiltInCacheMergePolicies[]", "com.hazelcast.cache.BuiltInCacheMergePolicies.values()"], ["com.hazelcast.cache.BuiltInCacheMergePolicies", "com.hazelcast.cache.BuiltInCacheMergePolicies.valueOf(java.lang.String)"], ["java.lang.Class<? extends com.hazelcast.cache.CacheMergePolicy>", "com.hazelcast.cache.BuiltInCacheMergePolicies.getImplementationClass()"], ["java.lang.String", "com.hazelcast.cache.BuiltInCacheMergePolicies.getImplementationClassName()"], ["com.hazelcast.cache.CacheMergePolicy", "com.hazelcast.cache.BuiltInCacheMergePolicies.newInstance()"], ["com.hazelcast.cache.BuiltInCacheMergePolicies", "com.hazelcast.cache.BuiltInCacheMergePolicies.getDefault()"], ["com.hazelcast.cache.CacheEventType[]", "com.hazelcast.cache.CacheEventType.values()"], ["com.hazelcast.cache.CacheEventType", "com.hazelcast.cache.CacheEventType.valueOf(java.lang.String)"], ["int", "com.hazelcast.cache.CacheEventType.getType()"], ["com.hazelcast.cache.CacheEventType", "com.hazelcast.cache.CacheEventType.getByType(int)"], ["javax.cache.event.EventType", "com.hazelcast.cache.CacheEventType.convertToEventType(com.hazelcast.cache.CacheEventType)"], ["com.hazelcast.cache.CacheMergePolicy", "com.hazelcast.cache.BuiltInCacheMergePolicies$4.create()"], ["com.hazelcast.cache.CacheMergePolicy", "com.hazelcast.cache.BuiltInCacheMergePolicies$1.create()"], ["com.hazelcast.cache.HazelcastCachingProvider", "com.hazelcast.cache.HazelcastCachingProvider()"], ["java.util.Properties", "com.hazelcast.cache.HazelcastCachingProvider.propertiesByLocation(java.lang.String)"], ["java.util.Properties", "com.hazelcast.cache.HazelcastCachingProvider.propertiesByInstanceName(java.lang.String)"], ["java.util.Properties", "com.hazelcast.cache.HazelcastCachingProvider.propertiesByInstanceItself(com.hazelcast.core.HazelcastInstance)"], ["javax.cache.CacheManager", "com.hazelcast.cache.HazelcastCachingProvider.getCacheManager(java.net.URI, java.lang.ClassLoader, java.util.Properties)"], ["java.lang.ClassLoader", "com.hazelcast.cache.HazelcastCachingProvider.getDefaultClassLoader()"], ["java.net.URI", "com.hazelcast.cache.HazelcastCachingProvider.getDefaultURI()"], ["java.util.Properties", "com.hazelcast.cache.HazelcastCachingProvider.getDefaultProperties()"], ["javax.cache.CacheManager", "com.hazelcast.cache.HazelcastCachingProvider.getCacheManager(java.net.URI, java.lang.ClassLoader)"], ["javax.cache.CacheManager", "com.hazelcast.cache.HazelcastCachingProvider.getCacheManager()"], ["void", "com.hazelcast.cache.HazelcastCachingProvider.close()"], ["void", "com.hazelcast.cache.HazelcastCachingProvider.close(java.lang.ClassLoader)"], ["void", "com.hazelcast.cache.HazelcastCachingProvider.close(java.net.URI, java.lang.ClassLoader)"], ["boolean", "com.hazelcast.cache.HazelcastCachingProvider.isSupported(javax.cache.configuration.OptionalFeature)"], ["java.lang.String", "com.hazelcast.cache.HazelcastCachingProvider.toString()"], ["com.hazelcast.internal.management.ManagementCenterService", "com.hazelcast.internal.management.ManagementCenterService(com.hazelcast.instance.HazelcastInstanceImpl)"], ["void", "com.hazelcast.internal.management.ManagementCenterService.shutdown()"], ["byte[]", "com.hazelcast.internal.management.ManagementCenterService.clusterWideUpdateManagementCenterUrl(java.lang.String, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.management.ManagementCenterService.updateManagementCenterUrl(java.lang.String)"], ["java.lang.Object", "com.hazelcast.internal.management.ManagementCenterService.resolveFuture(java.util.concurrent.Future<java.lang.Object>)"], ["void", "com.hazelcast.internal.management.ManagementCenterService.send(com.hazelcast.nio.Address, com.hazelcast.spi.Operation)"], ["com.hazelcast.instance.HazelcastInstanceImpl", "com.hazelcast.internal.management.ManagementCenterService.getHazelcastInstance()"], ["com.hazelcast.internal.management.ConsoleCommandHandler", "com.hazelcast.internal.management.ManagementCenterService.getCommandHandler()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.management.ManagementDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.management.ManagementDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.internal.management.MonitoredThread", "com.hazelcast.internal.management.MonitoredThread(java.lang.String, long, int)"], ["java.lang.String", "com.hazelcast.internal.management.MonitoredThread.toString()"], ["int", "com.hazelcast.internal.management.MonitoredThread.compareTo(com.hazelcast.internal.management.MonitoredThread)"], ["int", "com.hazelcast.internal.management.MonitoredThread.hashCode()"], ["boolean", "com.hazelcast.internal.management.MonitoredThread.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.management.MonitoredThread.compareTo(java.lang.Object)"], ["com.hazelcast.internal.management.ConsoleCommandHandler", "com.hazelcast.internal.management.ConsoleCommandHandler(com.hazelcast.core.HazelcastInstance)"], ["java.lang.String", "com.hazelcast.internal.management.ConsoleCommandHandler.handleCommand(java.lang.String)"], ["void", "com.hazelcast.internal.management.ManagementCenterService$PrepareStateThread.run()"], ["com.hazelcast.internal.management.ManagementCenterService$MemberListenerImpl", "com.hazelcast.internal.management.ManagementCenterService$MemberListenerImpl(com.hazelcast.internal.management.ManagementCenterService)"], ["void", "com.hazelcast.internal.management.ManagementCenterService$MemberListenerImpl.memberAdded(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.internal.management.ManagementCenterService$MemberListenerImpl.memberRemoved(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.internal.management.ManagementCenterService$MemberListenerImpl.memberAttributeChanged(com.hazelcast.core.MemberAttributeEvent)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.management.ManagementDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.management.ManagementDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.management.ManagementDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.management.ManagementDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.internal.management.TimedMemberStateFactory", "com.hazelcast.internal.management.TimedMemberStateFactory(com.hazelcast.instance.HazelcastInstanceImpl)"], ["void", "com.hazelcast.internal.management.TimedMemberStateFactory.init()"], ["com.hazelcast.monitor.TimedMemberState", "com.hazelcast.internal.management.TimedMemberStateFactory.createTimedMemberState()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.management.ManagementDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.management.ManagementDataSerializerHook$4.createNew(java.lang.Object)"], ["java.lang.String", "com.hazelcast.internal.management.ThreadDumpGenerator.dumpAllThreads()"], ["java.lang.String", "com.hazelcast.internal.management.ThreadDumpGenerator.dumpDeadlocks()"], ["java.lang.management.ThreadInfo[]", "com.hazelcast.internal.management.ThreadDumpGenerator.findDeadlockedThreads()"], ["java.lang.management.ThreadInfo[]", "com.hazelcast.internal.management.ThreadDumpGenerator.getAllThreads()"], ["com.hazelcast.internal.management.ManagementDataSerializerHook", "com.hazelcast.internal.management.ManagementDataSerializerHook()"], ["int", "com.hazelcast.internal.management.ManagementDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.internal.management.ManagementDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.management.ManagementDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.management.ManagementDataSerializerHook$1.createNew(java.lang.Object)"], ["javax.script.ScriptEngineManager", "com.hazelcast.internal.management.ScriptEngineManagerContext.getScriptEngineManager()"], ["void", "com.hazelcast.internal.management.ScriptEngineManagerContext.setScriptEngineManager(javax.script.ScriptEngineManager)"], ["com.hazelcast.internal.management.ManagementCenterService$TaskPollThread$AsyncConsoleRequestTask", "com.hazelcast.internal.management.ManagementCenterService$TaskPollThread$AsyncConsoleRequestTask(com.hazelcast.internal.management.ManagementCenterService$TaskPollThread, int, com.hazelcast.internal.management.request.ConsoleRequest)"], ["void", "com.hazelcast.internal.management.ManagementCenterService$TaskPollThread$AsyncConsoleRequestTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.management.ManagementDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.management.ManagementDataSerializerHook$3.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.management.TimedMemberStateFactory$1.run()"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$MemberHotRestartStatus[]", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$MemberHotRestartStatus.values()"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$MemberHotRestartStatus", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$MemberHotRestartStatus.valueOf(java.lang.String)"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$ClusterHotRestartStatus[]", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$ClusterHotRestartStatus.values()"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$ClusterHotRestartStatus", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$ClusterHotRestartStatus.valueOf(java.lang.String)"], ["com.hazelcast.internal.management.dto.WanPublisherConfigDTO", "com.hazelcast.internal.management.dto.WanPublisherConfigDTO(com.hazelcast.config.WanPublisherConfig)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.WanPublisherConfigDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.WanPublisherConfigDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.internal.management.dto.WanPublisherConfigDTO.getConfig()"], ["com.hazelcast.internal.management.dto.ProxyServiceDTO", "com.hazelcast.internal.management.dto.ProxyServiceDTO()"], ["com.hazelcast.internal.management.dto.ProxyServiceDTO", "com.hazelcast.internal.management.dto.ProxyServiceDTO(com.hazelcast.spi.ProxyService)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.ProxyServiceDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.ProxyServiceDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.OperationServiceDTO", "com.hazelcast.internal.management.dto.OperationServiceDTO()"], ["com.hazelcast.internal.management.dto.OperationServiceDTO", "com.hazelcast.internal.management.dto.OperationServiceDTO(com.hazelcast.spi.impl.operationservice.InternalOperationService)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.OperationServiceDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.OperationServiceDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.PermissionConfigDTO", "com.hazelcast.internal.management.dto.PermissionConfigDTO()"], ["com.hazelcast.internal.management.dto.PermissionConfigDTO", "com.hazelcast.internal.management.dto.PermissionConfigDTO(com.hazelcast.config.PermissionConfig)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.PermissionConfigDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.PermissionConfigDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.dto.PermissionConfigDTO.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.management.dto.PermissionConfigDTO.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.internal.management.dto.PermissionConfigDTO.getPermissionConfig()"], ["int", "com.hazelcast.internal.management.dto.PermissionConfigDTO.getFactoryId()"], ["int", "com.hazelcast.internal.management.dto.PermissionConfigDTO.getId()"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO()"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO(com.hazelcast.config.HotRestartClusterDataRecoveryPolicy, com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$ClusterHotRestartStatus, long, long, java.util.Map<java.lang.String, com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$MemberHotRestartStatus>)"], ["com.hazelcast.config.HotRestartClusterDataRecoveryPolicy", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO.getDataRecoveryPolicy()"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$ClusterHotRestartStatus", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO.getHotRestartStatus()"], ["long", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO.getRemainingValidationTimeMillis()"], ["long", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO.getRemainingDataLoadTimeMillis()"], ["java.util.Map<java.lang.String, com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO$MemberHotRestartStatus>", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO.getMemberHotRestartStatusMap()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.ManagedExecutorDTO", "com.hazelcast.internal.management.dto.ManagedExecutorDTO()"], ["com.hazelcast.internal.management.dto.ManagedExecutorDTO", "com.hazelcast.internal.management.dto.ManagedExecutorDTO(com.hazelcast.util.executor.ManagedExecutorService)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.ManagedExecutorDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.ManagedExecutorDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.WanReplicationConfigDTO", "com.hazelcast.internal.management.dto.WanReplicationConfigDTO(com.hazelcast.config.WanReplicationConfig)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.WanReplicationConfigDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.WanReplicationConfigDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.config.WanReplicationConfig", "com.hazelcast.internal.management.dto.WanReplicationConfigDTO.getConfig()"], ["com.hazelcast.internal.management.dto.ClientEndPointDTO", "com.hazelcast.internal.management.dto.ClientEndPointDTO()"], ["com.hazelcast.internal.management.dto.ClientEndPointDTO", "com.hazelcast.internal.management.dto.ClientEndPointDTO(com.hazelcast.core.Client)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.ClientEndPointDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.ClientEndPointDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.ConnectionManagerDTO", "com.hazelcast.internal.management.dto.ConnectionManagerDTO()"], ["com.hazelcast.internal.management.dto.ConnectionManagerDTO", "com.hazelcast.internal.management.dto.ConnectionManagerDTO(com.hazelcast.nio.ConnectionManager)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.ConnectionManagerDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.ConnectionManagerDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.EventServiceDTO", "com.hazelcast.internal.management.dto.EventServiceDTO()"], ["com.hazelcast.internal.management.dto.EventServiceDTO", "com.hazelcast.internal.management.dto.EventServiceDTO(com.hazelcast.spi.EventService)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.EventServiceDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.EventServiceDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.PartitionServiceBeanDTO", "com.hazelcast.internal.management.dto.PartitionServiceBeanDTO()"], ["com.hazelcast.internal.management.dto.PartitionServiceBeanDTO", "com.hazelcast.internal.management.dto.PartitionServiceBeanDTO(com.hazelcast.internal.partition.InternalPartitionService, com.hazelcast.instance.HazelcastInstanceImpl)"], ["int", "com.hazelcast.internal.management.dto.PartitionServiceBeanDTO.getPartitionCount()"], ["void", "com.hazelcast.internal.management.dto.PartitionServiceBeanDTO.setPartitionCount(int)"], ["int", "com.hazelcast.internal.management.dto.PartitionServiceBeanDTO.getActivePartitionCount()"], ["void", "com.hazelcast.internal.management.dto.PartitionServiceBeanDTO.setActivePartitionCount(int)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.PartitionServiceBeanDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.PartitionServiceBeanDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.SlowOperationDTO", "com.hazelcast.internal.management.dto.SlowOperationDTO()"], ["com.hazelcast.internal.management.dto.SlowOperationDTO", "com.hazelcast.internal.management.dto.SlowOperationDTO(java.lang.String, java.lang.String, int, java.util.List<com.hazelcast.internal.management.dto.SlowOperationInvocationDTO>)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.SlowOperationDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.SlowOperationDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.MapConfigDTO", "com.hazelcast.internal.management.dto.MapConfigDTO()"], ["com.hazelcast.internal.management.dto.MapConfigDTO", "com.hazelcast.internal.management.dto.MapConfigDTO(com.hazelcast.config.MapConfig)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.MapConfigDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.MapConfigDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.dto.MapConfigDTO.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.management.dto.MapConfigDTO.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.internal.management.dto.MapConfigDTO.getMapConfig()"], ["int", "com.hazelcast.internal.management.dto.MapConfigDTO.getFactoryId()"], ["int", "com.hazelcast.internal.management.dto.MapConfigDTO.getId()"], ["com.hazelcast.internal.management.dto.MXBeansDTO", "com.hazelcast.internal.management.dto.MXBeansDTO()"], ["com.hazelcast.internal.management.dto.EventServiceDTO", "com.hazelcast.internal.management.dto.MXBeansDTO.getEventServiceBean()"], ["void", "com.hazelcast.internal.management.dto.MXBeansDTO.setEventServiceBean(com.hazelcast.internal.management.dto.EventServiceDTO)"], ["com.hazelcast.internal.management.dto.OperationServiceDTO", "com.hazelcast.internal.management.dto.MXBeansDTO.getOperationServiceBean()"], ["void", "com.hazelcast.internal.management.dto.MXBeansDTO.setOperationServiceBean(com.hazelcast.internal.management.dto.OperationServiceDTO)"], ["com.hazelcast.internal.management.dto.ConnectionManagerDTO", "com.hazelcast.internal.management.dto.MXBeansDTO.getConnectionManagerBean()"], ["void", "com.hazelcast.internal.management.dto.MXBeansDTO.setConnectionManagerBean(com.hazelcast.internal.management.dto.ConnectionManagerDTO)"], ["com.hazelcast.internal.management.dto.PartitionServiceBeanDTO", "com.hazelcast.internal.management.dto.MXBeansDTO.getPartitionServiceBean()"], ["void", "com.hazelcast.internal.management.dto.MXBeansDTO.setPartitionServiceBean(com.hazelcast.internal.management.dto.PartitionServiceBeanDTO)"], ["com.hazelcast.internal.management.dto.ProxyServiceDTO", "com.hazelcast.internal.management.dto.MXBeansDTO.getProxyServiceBean()"], ["void", "com.hazelcast.internal.management.dto.MXBeansDTO.setProxyServiceBean(com.hazelcast.internal.management.dto.ProxyServiceDTO)"], ["com.hazelcast.internal.management.dto.ManagedExecutorDTO", "com.hazelcast.internal.management.dto.MXBeansDTO.getManagedExecutorBean(java.lang.String)"], ["void", "com.hazelcast.internal.management.dto.MXBeansDTO.putManagedExecutor(java.lang.String, com.hazelcast.internal.management.dto.ManagedExecutorDTO)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.MXBeansDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.MXBeansDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.dto.SlowOperationInvocationDTO", "com.hazelcast.internal.management.dto.SlowOperationInvocationDTO()"], ["com.hazelcast.internal.management.dto.SlowOperationInvocationDTO", "com.hazelcast.internal.management.dto.SlowOperationInvocationDTO(int, java.lang.String, long, int)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.dto.SlowOperationInvocationDTO.toJson()"], ["void", "com.hazelcast.internal.management.dto.SlowOperationInvocationDTO.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.TriggerPartialStartRequest", "com.hazelcast.internal.management.request.TriggerPartialStartRequest()"], ["int", "com.hazelcast.internal.management.request.TriggerPartialStartRequest.getType()"], ["void", "com.hazelcast.internal.management.request.TriggerPartialStartRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.TriggerPartialStartRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ForceStartNodeRequest", "com.hazelcast.internal.management.request.ForceStartNodeRequest()"], ["int", "com.hazelcast.internal.management.request.ForceStartNodeRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ForceStartNodeRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ForceStartNodeRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView()"], ["java.lang.Object", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.getKey()"], ["java.lang.Object", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.getValue()"], ["long", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.getExpirationTime()"], ["long", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.getCreationTime()"], ["long", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.getLastAccessTime()"], ["long", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.getAccessHit()"], ["int", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.getFactoryId()"], ["int", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.getId()"], ["void", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.management.request.GetCacheEntryRequest$CacheBrowserEntryView.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.internal.management.request.PromoteMemberRequest", "com.hazelcast.internal.management.request.PromoteMemberRequest()"], ["int", "com.hazelcast.internal.management.request.PromoteMemberRequest.getType()"], ["void", "com.hazelcast.internal.management.request.PromoteMemberRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.PromoteMemberRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.RunGcRequest", "com.hazelcast.internal.management.request.RunGcRequest()"], ["int", "com.hazelcast.internal.management.request.RunGcRequest.getType()"], ["void", "com.hazelcast.internal.management.request.RunGcRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.RunGcRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ExecuteScriptRequest", "com.hazelcast.internal.management.request.ExecuteScriptRequest()"], ["com.hazelcast.internal.management.request.ExecuteScriptRequest", "com.hazelcast.internal.management.request.ExecuteScriptRequest(java.lang.String, java.lang.String, java.util.Set<java.lang.String>)"], ["int", "com.hazelcast.internal.management.request.ExecuteScriptRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ExecuteScriptRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ExecuteScriptRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ChangeWanStateRequest", "com.hazelcast.internal.management.request.ChangeWanStateRequest()"], ["com.hazelcast.internal.management.request.ChangeWanStateRequest", "com.hazelcast.internal.management.request.ChangeWanStateRequest(java.lang.String, java.lang.String, boolean)"], ["int", "com.hazelcast.internal.management.request.ChangeWanStateRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ChangeWanStateRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ChangeWanStateRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.MapConfigRequest", "com.hazelcast.internal.management.request.MapConfigRequest()"], ["com.hazelcast.internal.management.request.MapConfigRequest", "com.hazelcast.internal.management.request.MapConfigRequest(java.lang.String, com.hazelcast.internal.management.dto.MapConfigDTO, boolean)"], ["int", "com.hazelcast.internal.management.request.MapConfigRequest.getType()"], ["void", "com.hazelcast.internal.management.request.MapConfigRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.MapConfigRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.GetCacheEntryRequest", "com.hazelcast.internal.management.request.GetCacheEntryRequest()"], ["com.hazelcast.internal.management.request.GetCacheEntryRequest", "com.hazelcast.internal.management.request.GetCacheEntryRequest(java.lang.String, java.lang.String, java.lang.String)"], ["int", "com.hazelcast.internal.management.request.GetCacheEntryRequest.getType()"], ["void", "com.hazelcast.internal.management.request.GetCacheEntryRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.GetCacheEntryRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.GetClusterStateRequest", "com.hazelcast.internal.management.request.GetClusterStateRequest()"], ["int", "com.hazelcast.internal.management.request.GetClusterStateRequest.getType()"], ["void", "com.hazelcast.internal.management.request.GetClusterStateRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.GetClusterStateRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.UpdatePermissionConfigRequest", "com.hazelcast.internal.management.request.UpdatePermissionConfigRequest()"], ["com.hazelcast.internal.management.request.UpdatePermissionConfigRequest", "com.hazelcast.internal.management.request.UpdatePermissionConfigRequest(java.util.Set<com.hazelcast.config.PermissionConfig>)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.request.UpdatePermissionConfigRequest.toJson()"], ["void", "com.hazelcast.internal.management.request.UpdatePermissionConfigRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.MemberConfigRequest", "com.hazelcast.internal.management.request.MemberConfigRequest()"], ["int", "com.hazelcast.internal.management.request.MemberConfigRequest.getType()"], ["void", "com.hazelcast.internal.management.request.MemberConfigRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.MemberConfigRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ShutdownClusterRequest", "com.hazelcast.internal.management.request.ShutdownClusterRequest()"], ["int", "com.hazelcast.internal.management.request.ShutdownClusterRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ShutdownClusterRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ShutdownClusterRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ChangeClusterStateRequest", "com.hazelcast.internal.management.request.ChangeClusterStateRequest()"], ["com.hazelcast.internal.management.request.ChangeClusterStateRequest", "com.hazelcast.internal.management.request.ChangeClusterStateRequest(java.lang.String)"], ["int", "com.hazelcast.internal.management.request.ChangeClusterStateRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ChangeClusterStateRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ChangeClusterStateRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ConsoleCommandRequest", "com.hazelcast.internal.management.request.ConsoleCommandRequest()"], ["int", "com.hazelcast.internal.management.request.ConsoleCommandRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ConsoleCommandRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ConsoleCommandRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ThreadDumpRequest", "com.hazelcast.internal.management.request.ThreadDumpRequest()"], ["com.hazelcast.internal.management.request.ThreadDumpRequest", "com.hazelcast.internal.management.request.ThreadDumpRequest(boolean)"], ["int", "com.hazelcast.internal.management.request.ThreadDumpRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ThreadDumpRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ThreadDumpRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.GetMapEntryRequest", "com.hazelcast.internal.management.request.GetMapEntryRequest()"], ["com.hazelcast.internal.management.request.GetMapEntryRequest", "com.hazelcast.internal.management.request.GetMapEntryRequest(java.lang.String, java.lang.String, java.lang.String)"], ["int", "com.hazelcast.internal.management.request.GetMapEntryRequest.getType()"], ["void", "com.hazelcast.internal.management.request.GetMapEntryRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.GetMapEntryRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ClearWanQueuesRequest", "com.hazelcast.internal.management.request.ClearWanQueuesRequest()"], ["com.hazelcast.internal.management.request.ClearWanQueuesRequest", "com.hazelcast.internal.management.request.ClearWanQueuesRequest(java.lang.String, java.lang.String)"], ["int", "com.hazelcast.internal.management.request.ClearWanQueuesRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ClearWanQueuesRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ClearWanQueuesRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.GetCacheEntryRequest$GetCacheEntryViewEntryProcessor", "com.hazelcast.internal.management.request.GetCacheEntryRequest$GetCacheEntryViewEntryProcessor()"], ["com.hazelcast.cache.CacheEntryView", "com.hazelcast.internal.management.request.GetCacheEntryRequest$GetCacheEntryViewEntryProcessor.process(javax.cache.processor.MutableEntry, java.lang.Object...)"], ["int", "com.hazelcast.internal.management.request.GetCacheEntryRequest$GetCacheEntryViewEntryProcessor.getFactoryId()"], ["int", "com.hazelcast.internal.management.request.GetCacheEntryRequest$GetCacheEntryViewEntryProcessor.getId()"], ["void", "com.hazelcast.internal.management.request.GetCacheEntryRequest$GetCacheEntryViewEntryProcessor.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.management.request.GetCacheEntryRequest$GetCacheEntryViewEntryProcessor.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.internal.management.request.GetCacheEntryRequest$GetCacheEntryViewEntryProcessor.process(javax.cache.processor.MutableEntry, java.lang.Object[])"], ["com.hazelcast.internal.management.request.GetMemberSystemPropertiesRequest", "com.hazelcast.internal.management.request.GetMemberSystemPropertiesRequest()"], ["int", "com.hazelcast.internal.management.request.GetMemberSystemPropertiesRequest.getType()"], ["void", "com.hazelcast.internal.management.request.GetMemberSystemPropertiesRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.GetMemberSystemPropertiesRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.internal.management.request.ClusterPropsRequest", "com.hazelcast.internal.management.request.ClusterPropsRequest()"], ["int", "com.hazelcast.internal.management.request.ClusterPropsRequest.getType()"], ["void", "com.hazelcast.internal.management.request.ClusterPropsRequest.writeResponse(com.hazelcast.internal.management.ManagementCenterService, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["void", "com.hazelcast.internal.management.request.ClusterPropsRequest.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.management.ManagementDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.management.ManagementDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.internal.management.operation.GetMapConfigOperation", "com.hazelcast.internal.management.operation.GetMapConfigOperation(java.lang.String)"], ["void", "com.hazelcast.internal.management.operation.GetMapConfigOperation.run()"], ["java.lang.Object", "com.hazelcast.internal.management.operation.GetMapConfigOperation.getResponse()"], ["com.hazelcast.internal.management.operation.ChangeWanStateOperation", "com.hazelcast.internal.management.operation.ChangeWanStateOperation(java.lang.String, java.lang.String, boolean)"], ["void", "com.hazelcast.internal.management.operation.ChangeWanStateOperation.run()"], ["com.hazelcast.internal.management.operation.AbstractManagementOperation", "com.hazelcast.internal.management.operation.AbstractManagementOperation()"], ["int", "com.hazelcast.internal.management.operation.AbstractManagementOperation.getFactoryId()"], ["com.hazelcast.internal.management.operation.ThreadDumpOperation", "com.hazelcast.internal.management.operation.ThreadDumpOperation(boolean)"], ["void", "com.hazelcast.internal.management.operation.ThreadDumpOperation.run()"], ["java.lang.Object", "com.hazelcast.internal.management.operation.ThreadDumpOperation.getResponse()"], ["com.hazelcast.internal.management.operation.UpdatePermissionConfigOperation", "com.hazelcast.internal.management.operation.UpdatePermissionConfigOperation()"], ["com.hazelcast.internal.management.operation.UpdatePermissionConfigOperation", "com.hazelcast.internal.management.operation.UpdatePermissionConfigOperation(java.util.Set<com.hazelcast.config.PermissionConfig>)"], ["int", "com.hazelcast.internal.management.operation.UpdatePermissionConfigOperation.getId()"], ["void", "com.hazelcast.internal.management.operation.UpdatePermissionConfigOperation.run()"], ["com.hazelcast.internal.management.operation.ClearWanQueuesOperation", "com.hazelcast.internal.management.operation.ClearWanQueuesOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.management.operation.ClearWanQueuesOperation.run()"], ["com.hazelcast.internal.management.operation.UpdateMapConfigOperation", "com.hazelcast.internal.management.operation.UpdateMapConfigOperation()"], ["com.hazelcast.internal.management.operation.UpdateMapConfigOperation", "com.hazelcast.internal.management.operation.UpdateMapConfigOperation(java.lang.String, com.hazelcast.config.MapConfig)"], ["void", "com.hazelcast.internal.management.operation.UpdateMapConfigOperation.run()"], ["int", "com.hazelcast.internal.management.operation.UpdateMapConfigOperation.getId()"], ["com.hazelcast.internal.management.operation.AddWanConfigOperation", "com.hazelcast.internal.management.operation.AddWanConfigOperation()"], ["com.hazelcast.internal.management.operation.AddWanConfigOperation", "com.hazelcast.internal.management.operation.AddWanConfigOperation(com.hazelcast.config.WanReplicationConfig)"], ["void", "com.hazelcast.internal.management.operation.AddWanConfigOperation.run()"], ["int", "com.hazelcast.internal.management.operation.AddWanConfigOperation.getId()"], ["com.hazelcast.internal.management.operation.UpdateManagementCenterUrlOperation", "com.hazelcast.internal.management.operation.UpdateManagementCenterUrlOperation()"], ["com.hazelcast.internal.management.operation.UpdateManagementCenterUrlOperation", "com.hazelcast.internal.management.operation.UpdateManagementCenterUrlOperation(java.lang.String)"], ["void", "com.hazelcast.internal.management.operation.UpdateManagementCenterUrlOperation.run()"], ["int", "com.hazelcast.internal.management.operation.UpdateManagementCenterUrlOperation.getId()"], ["com.hazelcast.internal.management.operation.ScriptExecutorOperation", "com.hazelcast.internal.management.operation.ScriptExecutorOperation()"], ["com.hazelcast.internal.management.operation.ScriptExecutorOperation", "com.hazelcast.internal.management.operation.ScriptExecutorOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.management.operation.ScriptExecutorOperation.run()"], ["java.lang.Object", "com.hazelcast.internal.management.operation.ScriptExecutorOperation.getResponse()"], ["int", "com.hazelcast.internal.management.operation.ScriptExecutorOperation.getId()"], ["com.hazelcast.internal.management.ConsoleCommandHandler$ConsoleHandlerApp", "com.hazelcast.internal.management.ConsoleCommandHandler$ConsoleHandlerApp(com.hazelcast.internal.management.ConsoleCommandHandler, com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.internal.management.ConsoleCommandHandler$ConsoleHandlerApp.println(java.lang.Object)"], ["void", "com.hazelcast.internal.management.ConsoleCommandHandler$ConsoleHandlerApp.print(java.lang.Object)"], ["void", "com.hazelcast.internal.management.ManagementCenterService$StateSendThread.run()"], ["com.hazelcast.internal.management.ManagementCenterIdentifier", "com.hazelcast.internal.management.ManagementCenterIdentifier()"], ["com.hazelcast.internal.management.ManagementCenterIdentifier", "com.hazelcast.internal.management.ManagementCenterIdentifier(java.lang.String, java.lang.String, java.lang.String)"], ["int", "com.hazelcast.internal.management.ManagementCenterIdentifier.getVersionAsInt(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.management.ManagementCenterIdentifier.convertVersionToString(int)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.internal.management.ManagementCenterIdentifier.toJson()"], ["void", "com.hazelcast.internal.management.ManagementCenterIdentifier.fromJson(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["int", "com.hazelcast.internal.management.ManagementCenterIdentifier.getVersion()"], ["java.lang.String", "com.hazelcast.internal.management.ManagementCenterIdentifier.getVersionString()"], ["java.lang.String", "com.hazelcast.internal.management.ManagementCenterIdentifier.getClusterName()"], ["java.lang.String", "com.hazelcast.internal.management.ManagementCenterIdentifier.getAddress()"], ["void", "com.hazelcast.internal.management.ManagementCenterService$TaskPollThread.register(com.hazelcast.internal.management.request.ConsoleRequest)"], ["void", "com.hazelcast.internal.management.ManagementCenterService$TaskPollThread.run()"], ["boolean", "com.hazelcast.internal.management.ManagementCenterService$TaskPollThread.processTaskAndSendResponse(int, com.hazelcast.internal.management.request.ConsoleRequest)"], ["void", "com.hazelcast.internal.partition.impl.PartitionPrimaryReplicaAntiEntropyTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl(com.hazelcast.instance.Node)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionOwner(int)"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionOwnerOrWait(int)"], ["com.hazelcast.internal.partition.PartitionRuntimeState", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.firstArrangement()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.setInitialState(com.hazelcast.internal.partition.PartitionTableView)"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getMemberGroupsSize()"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getMaxAllowedBackupCount()"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.isMemberAllowedToJoin(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.memberAdded(com.hazelcast.instance.MemberImpl)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.memberRemoved(com.hazelcast.instance.MemberImpl)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.onClusterStateChange(com.hazelcast.cluster.ClusterState)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.onClusterVersionChange(com.hazelcast.version.Version)"], ["com.hazelcast.internal.partition.PartitionRuntimeState", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.createPartitionState()"], ["com.hazelcast.internal.partition.PartitionRuntimeState", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.createPartitionStateInternal()"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.processPartitionRuntimeState(com.hazelcast.internal.partition.PartitionRuntimeState)"], ["com.hazelcast.spi.partition.IPartition[]", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitions()"], ["com.hazelcast.internal.partition.InternalPartition[]", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getInternalPartitions()"], ["com.hazelcast.internal.partition.InternalPartition", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartition(int)"], ["com.hazelcast.internal.partition.InternalPartition", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartition(int, boolean)"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.prepareToSafeShutdown(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.onShutdownRequest(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.onShutdownResponse()"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.isMemberStateSafe()"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.hasOnGoingMigration()"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.hasOnGoingMigrationLocal()"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionId(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionId(java.lang.Object)"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionCount()"], ["long", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionMigrationTimeout()"], ["com.hazelcast.internal.partition.PartitionReplicaVersionManager", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionReplicaVersionManager()"], ["java.util.Map<com.hazelcast.nio.Address, java.util.List<java.lang.Integer>>", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getMemberPartitionsMap()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.reset()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.pauseMigration()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.resumeMigration()"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.isMigrationAllowed()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.shutdown(boolean)"], ["long", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getMigrationQueueSize()"], ["com.hazelcast.internal.partition.PartitionServiceProxy", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionServiceProxy()"], ["java.lang.String", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.addMigrationListener(com.hazelcast.core.MigrationListener)"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.removeMigrationListener(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.addPartitionLostListener(com.hazelcast.partition.PartitionLostListener)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.addLocalPartitionLostListener(com.hazelcast.partition.PartitionLostListener)"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.removePartitionLostListener(java.lang.String)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.dispatchEvent(com.hazelcast.partition.PartitionEvent, com.hazelcast.partition.PartitionEventListener)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.addPartitionListener(com.hazelcast.internal.partition.PartitionListener)"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.isPartitionOwner(int)"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionStateVersion()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.onPartitionLost(com.hazelcast.spi.partition.IPartitionLostEvent)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.setInternalMigrationListener(com.hazelcast.internal.partition.impl.InternalMigrationListener)"], ["com.hazelcast.internal.partition.impl.InternalMigrationListener", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getInternalMigrationListener()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.resetInternalMigrationListener()"], ["java.util.List<com.hazelcast.util.scheduler.ScheduledEntry<com.hazelcast.internal.partition.impl.ReplicaFragmentSyncInfo, java.lang.Void>>", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getScheduledReplicaSyncRequests()"], ["com.hazelcast.internal.partition.impl.PartitionStateManager", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionStateManager()"], ["com.hazelcast.internal.partition.impl.MigrationManager", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getMigrationManager()"], ["com.hazelcast.internal.partition.impl.PartitionReplicaManager", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getReplicaManager()"], ["com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionReplicaStateChecker()"], ["com.hazelcast.internal.partition.impl.PartitionEventManager", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartitionEventManager()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.replaceAddress(com.hazelcast.nio.Address, com.hazelcast.nio.Address)"], ["com.hazelcast.internal.partition.PartitionTableView", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.createPartitionTableView()"], ["java.lang.String", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.toString()"], ["com.hazelcast.spi.partition.IPartition", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartition(int, boolean)"], ["com.hazelcast.spi.partition.IPartition", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.getPartition(int)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl.dispatchEvent(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$AssertPartitionTableTask.run()"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$1.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.internal.partition.impl.PartitionLostListenerAdapter", "com.hazelcast.internal.partition.impl.PartitionLostListenerAdapter(com.hazelcast.partition.PartitionLostListener)"], ["void", "com.hazelcast.internal.partition.impl.PartitionLostListenerAdapter.onEvent(com.hazelcast.partition.PartitionLostEvent)"], ["void", "com.hazelcast.internal.partition.impl.PartitionLostListenerAdapter.onEvent(com.hazelcast.partition.PartitionEvent)"], ["void", "com.hazelcast.internal.partition.impl.PublishPartitionRuntimeStateTask.run()"], ["com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant[]", "com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant.values()"], ["com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant", "com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant.valueOf(java.lang.String)"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager$AntiEntropyTask.run()"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$RepairPartitionTableTask.run()"], ["com.hazelcast.internal.partition.impl.PartitionPortableHook", "com.hazelcast.internal.partition.impl.PartitionPortableHook()"], ["int", "com.hazelcast.internal.partition.impl.PartitionPortableHook.getFactoryId()"], ["com.hazelcast.nio.serialization.PortableFactory", "com.hazelcast.internal.partition.impl.PartitionPortableHook.createFactory()"], ["com.hazelcast.internal.partition.impl.PartitionDataSerializerHook", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook()"], ["int", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$13.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$RepartitioningTask$MigrationCollector.migrate(com.hazelcast.nio.Address, int, int, com.hazelcast.nio.Address, int, int)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl$2.onResponse(java.lang.Object)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl$2.onFailure(java.lang.Throwable)"], ["void", "com.hazelcast.internal.partition.impl.PartitionEventManager$InternalPartitionLostEventPublisher.run()"], ["com.hazelcast.spi.partition.IPartitionLostEvent", "com.hazelcast.internal.partition.impl.PartitionEventManager$InternalPartitionLostEventPublisher.getEvent()"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.impl.MigrationManager.setActiveMigration(com.hazelcast.internal.partition.MigrationInfo)"], ["boolean", "com.hazelcast.internal.partition.impl.MigrationManager.acquirePromotionPermit()"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager.releasePromotionPermit()"], ["void", "com.hazelcast.internal.partition.impl.MigrationQueue.add(com.hazelcast.internal.partition.impl.MigrationRunnable)"], ["com.hazelcast.internal.partition.impl.MigrationRunnable", "com.hazelcast.internal.partition.impl.MigrationQueue.poll(int, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.internal.partition.impl.MigrationQueue.clear()"], ["void", "com.hazelcast.internal.partition.impl.MigrationQueue.afterTaskCompletion(com.hazelcast.internal.partition.impl.MigrationRunnable)"], ["int", "com.hazelcast.internal.partition.impl.MigrationQueue.migrationTaskCount()"], ["boolean", "com.hazelcast.internal.partition.impl.MigrationQueue.hasMigrationTasks()"], ["java.lang.String", "com.hazelcast.internal.partition.impl.MigrationQueue.toString()"], ["boolean", "com.hazelcast.internal.partition.impl.ReplicaFragmentSyncInfo.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.partition.impl.ReplicaFragmentSyncInfo.hashCode()"], ["java.lang.String", "com.hazelcast.internal.partition.impl.ReplicaFragmentSyncInfo.toString()"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$2.run()"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$ProcessShutdownRequestsTask.run()"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$MigrateTask.run()"], ["java.lang.String", "com.hazelcast.internal.partition.impl.MigrationManager$MigrateTask.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.internal.partition.impl.PartitionStateManager", "com.hazelcast.internal.partition.impl.PartitionStateManager(com.hazelcast.instance.Node, com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl, com.hazelcast.internal.partition.PartitionListener)"], ["com.hazelcast.internal.partition.InternalPartition[]", "com.hazelcast.internal.partition.impl.PartitionStateManager.getPartitionsCopy()"], ["com.hazelcast.internal.partition.impl.InternalPartitionImpl", "com.hazelcast.internal.partition.impl.PartitionStateManager.getPartitionImpl(int)"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateManager.setMigratingFlag(int)"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateManager.clearMigratingFlag(int)"], ["int", "com.hazelcast.internal.partition.impl.PartitionStateManager.getVersion()"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateManager.incrementVersion()"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateManager.isInitialized()"], ["com.hazelcast.internal.partition.impl.NopPartitionListener", "com.hazelcast.internal.partition.impl.NopPartitionListener()"], ["void", "com.hazelcast.internal.partition.impl.NopPartitionListener.replicaChanged(com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent)"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager$ReplicaSyncTimeoutProcessor.process(com.hazelcast.util.scheduler.EntryTaskScheduler<com.hazelcast.internal.partition.impl.ReplicaFragmentSyncInfo, java.lang.Void>, java.util.Collection<com.hazelcast.util.scheduler.ScheduledEntry<com.hazelcast.internal.partition.impl.ReplicaFragmentSyncInfo, java.lang.Void>>)"], ["com.hazelcast.nio.Address[][]", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl.arrange(java.util.Collection<com.hazelcast.partition.membergroup.MemberGroup>, com.hazelcast.internal.partition.InternalPartition[])"], ["com.hazelcast.nio.Address[][]", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl.arrange(java.util.Collection<com.hazelcast.partition.membergroup.MemberGroup>, com.hazelcast.internal.partition.InternalPartition[], java.util.Collection<java.lang.Integer>)"], ["com.hazelcast.internal.partition.impl.InternalPartitionImpl", "com.hazelcast.internal.partition.impl.InternalPartitionImpl(int, com.hazelcast.internal.partition.PartitionListener, com.hazelcast.nio.Address, com.hazelcast.nio.Address[])"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.getPartitionId()"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.isMigrating()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.setMigrating(boolean)"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.isLocal()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.getOwnerOrNull()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.getReplicaAddress(int)"], ["boolean", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.isOwnerOrBackup(com.hazelcast.nio.Address)"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.getReplicaIndex(com.hazelcast.nio.Address)"], ["int", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.getReplicaIndex(com.hazelcast.nio.Address[], com.hazelcast.nio.Address)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.InternalPartitionImpl.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.internal.partition.impl.InternalMigrationListener$NopInternalMigrationListener", "com.hazelcast.internal.partition.impl.InternalMigrationListener$NopInternalMigrationListener()"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener$NopInternalMigrationListener.onMigrationStart(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, com.hazelcast.internal.partition.MigrationInfo)"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener$NopInternalMigrationListener.onMigrationComplete(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, com.hazelcast.internal.partition.MigrationInfo, boolean)"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener$NopInternalMigrationListener.onMigrationCommit(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, com.hazelcast.internal.partition.MigrationInfo)"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener$NopInternalMigrationListener.onMigrationRollback(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, com.hazelcast.internal.partition.MigrationInfo)"], ["com.hazelcast.internal.partition.impl.MigrationListenerAdapter", "com.hazelcast.internal.partition.impl.MigrationListenerAdapter(com.hazelcast.core.MigrationListener)"], ["void", "com.hazelcast.internal.partition.impl.MigrationListenerAdapter.onEvent(com.hazelcast.core.MigrationEvent)"], ["void", "com.hazelcast.internal.partition.impl.MigrationListenerAdapter.onEvent(com.hazelcast.partition.PartitionEvent)"], ["com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent", "com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent(int, int, com.hazelcast.nio.Address, com.hazelcast.nio.Address)"], ["int", "com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent.getPartitionId()"], ["int", "com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent.getReplicaIndex()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent.getOldAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent.getNewAddress()"], ["java.lang.String", "com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent.toString()"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.addNode(com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.hasNode(com.hazelcast.nio.Address)"], ["com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$PartitionTable", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.getPartitionTable(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.resetPartitions()"], ["int", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.getPartitionCount(int)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.ownPartition(com.hazelcast.nio.Address, int, java.lang.Integer)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.addPartition(int, java.lang.Integer)"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.postProcessPartitionTable(int)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$17.createNew(java.lang.Object)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.PartitionReplicaVersions.toString()"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$ControlTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$7.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionListener.replicaChanged(com.hazelcast.internal.partition.impl.PartitionReplicaChangeEvent)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.internal.partition.impl.AbstractPartitionPrimaryReplicaAntiEntropyTask", "com.hazelcast.internal.partition.impl.AbstractPartitionPrimaryReplicaAntiEntropyTask(com.hazelcast.spi.impl.NodeEngineImpl, int)"], ["int", "com.hazelcast.internal.partition.impl.AbstractPartitionPrimaryReplicaAntiEntropyTask.getPartitionId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$10.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.addNode(com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.hasNode(com.hazelcast.nio.Address)"], ["com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$PartitionTable", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.getPartitionTable(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.resetPartitions()"], ["int", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.getPartitionCount(int)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.ownPartition(com.hazelcast.nio.Address, int, java.lang.Integer)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.addPartition(int, java.lang.Integer)"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.postProcessPartitionTable(int)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup.toString()"], ["com.hazelcast.internal.partition.impl.PartitionServiceState", "com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.getPartitionServiceState()"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.triggerAndWaitForReplicaSync(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker$ReplicaSyncResponseCallback.onResponse(java.lang.Object)"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker$ReplicaSyncResponseCallback.onFailure(java.lang.Throwable)"], ["com.hazelcast.internal.partition.impl.InternalMigrationListener", "com.hazelcast.internal.partition.impl.InternalMigrationListener()"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener.onMigrationStart(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, com.hazelcast.internal.partition.MigrationInfo)"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener.onMigrationComplete(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, com.hazelcast.internal.partition.MigrationInfo, boolean)"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener.onMigrationCommit(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, com.hazelcast.internal.partition.MigrationInfo)"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener.onMigrationRollback(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, com.hazelcast.internal.partition.MigrationInfo)"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener.onPromotionStart(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, java.util.Collection<com.hazelcast.internal.partition.MigrationInfo>)"], ["void", "com.hazelcast.internal.partition.impl.InternalMigrationListener.onPromotionComplete(com.hazelcast.internal.partition.impl.InternalMigrationListener$MigrationParticipant, java.util.Collection<com.hazelcast.internal.partition.MigrationInfo>, boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.internal.partition.impl.PartitionServiceState[]", "com.hazelcast.internal.partition.impl.PartitionServiceState.values()"], ["com.hazelcast.internal.partition.impl.PartitionServiceState", "com.hazelcast.internal.partition.impl.PartitionServiceState.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$18.createNew(java.lang.Object)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.PartitionReplicaFragmentVersions.toString()"], ["void", "com.hazelcast.internal.partition.impl.MigrationManager$RepartitioningTask.run()"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.triggerPartitionReplicaSync(int, java.util.Collection<com.hazelcast.spi.ServiceNamespace>, int)"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.getServiceNamespace(com.hazelcast.spi.Operation)"], ["long[]", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.incrementPartitionReplicaVersions(int, com.hazelcast.spi.ServiceNamespace, int)"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.updatePartitionReplicaVersions(int, com.hazelcast.spi.ServiceNamespace, long[], int)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.isPartitionReplicaVersionStale(int, com.hazelcast.spi.ServiceNamespace, long[], int)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.isPartitionReplicaVersionDirty(int, com.hazelcast.spi.ServiceNamespace)"], ["long[]", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.getPartitionReplicaVersions(int, com.hazelcast.spi.ServiceNamespace)"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.setPartitionReplicaVersions(int, com.hazelcast.spi.ServiceNamespace, long[], int)"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.clearPartitionReplicaVersions(int, com.hazelcast.spi.ServiceNamespace)"], ["finalizeReplicaSync(int,", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.int, com.hazelcast.spi.ServiceNamespace, long[])"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.clearReplicaSyncRequest(int, com.hazelcast.spi.ServiceNamespace, int)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.tryToAcquireReplicaSyncPermit()"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.releaseReplicaSyncPermit()"], ["void", "com.hazelcast.internal.partition.impl.PartitionReplicaManager.retainNamespaces(int, java.util.Set<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl$1.run()"], ["void", "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl$FetchMostRecentPartitionTableTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$4.createNew(java.lang.Object)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateManager$1.select(com.hazelcast.core.Member)"], ["void", "com.hazelcast.internal.partition.impl.CheckPartitionReplicaVersionTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.internal.partition.impl.PartitionEventManager", "com.hazelcast.internal.partition.impl.PartitionEventManager(com.hazelcast.instance.Node)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.PartitionEventManager.addMigrationListener(com.hazelcast.core.MigrationListener)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionEventManager.removeMigrationListener(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.PartitionEventManager.addPartitionLostListener(com.hazelcast.partition.PartitionLostListener)"], ["java.lang.String", "com.hazelcast.internal.partition.impl.PartitionEventManager.addLocalPartitionLostListener(com.hazelcast.partition.PartitionLostListener)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionEventManager.removePartitionLostListener(java.lang.String)"], ["void", "com.hazelcast.internal.partition.impl.PartitionEventManager.onPartitionLost(com.hazelcast.spi.partition.IPartitionLostEvent)"], ["void", "com.hazelcast.internal.partition.impl.PartitionEventManager.sendPartitionLostEvent(int, int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$5.createNew(java.lang.Object)"], ["boolean", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup$1.hasNext()"], ["java.lang.Integer", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup$1.next()"], ["void", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup$1.remove()"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup$1.next()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook$16.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.partition.impl.MigrationThread.run()"], ["com.hazelcast.internal.partition.PartitionTableView", "com.hazelcast.internal.partition.PartitionTableView(com.hazelcast.nio.Address[][], int)"], ["com.hazelcast.internal.partition.PartitionTableView", "com.hazelcast.internal.partition.PartitionTableView(com.hazelcast.internal.partition.InternalPartition[], int)"], ["int", "com.hazelcast.internal.partition.PartitionTableView.getVersion()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.PartitionTableView.getAddress(int, int)"], ["int", "com.hazelcast.internal.partition.PartitionTableView.getLength()"], ["com.hazelcast.nio.Address[]", "com.hazelcast.internal.partition.PartitionTableView.getAddresses(int)"], ["boolean", "com.hazelcast.internal.partition.PartitionTableView.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.partition.PartitionTableView.hashCode()"], ["java.lang.String", "com.hazelcast.internal.partition.PartitionTableView.toString()"], ["void", "com.hazelcast.internal.partition.PartitionTableView.writeData(com.hazelcast.internal.partition.PartitionTableView, com.hazelcast.nio.ObjectDataOutput)"], ["com.hazelcast.internal.partition.PartitionTableView", "com.hazelcast.internal.partition.PartitionTableView.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.MigrationInfo()"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.MigrationInfo(int, com.hazelcast.nio.Address, java.lang.String, com.hazelcast.nio.Address, java.lang.String, int, int, int, int)"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.MigrationInfo.getSource()"], ["java.lang.String", "com.hazelcast.internal.partition.MigrationInfo.getSourceUuid()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.MigrationInfo.getDestination()"], ["java.lang.String", "com.hazelcast.internal.partition.MigrationInfo.getDestinationUuid()"], ["int", "com.hazelcast.internal.partition.MigrationInfo.getPartitionId()"], ["int", "com.hazelcast.internal.partition.MigrationInfo.getSourceCurrentReplicaIndex()"], ["int", "com.hazelcast.internal.partition.MigrationInfo.getSourceNewReplicaIndex()"], ["int", "com.hazelcast.internal.partition.MigrationInfo.getDestinationCurrentReplicaIndex()"], ["int", "com.hazelcast.internal.partition.MigrationInfo.getDestinationNewReplicaIndex()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.MigrationInfo.getMaster()"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.MigrationInfo.setMaster(com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.internal.partition.MigrationInfo.startProcessing()"], ["boolean", "com.hazelcast.internal.partition.MigrationInfo.isProcessing()"], ["void", "com.hazelcast.internal.partition.MigrationInfo.doneProcessing()"], ["com.hazelcast.internal.partition.MigrationInfo$MigrationStatus", "com.hazelcast.internal.partition.MigrationInfo.getStatus()"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.MigrationInfo.setStatus(com.hazelcast.internal.partition.MigrationInfo$MigrationStatus)"], ["boolean", "com.hazelcast.internal.partition.MigrationInfo.isValid()"], ["void", "com.hazelcast.internal.partition.MigrationInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.partition.MigrationInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.internal.partition.MigrationInfo.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.partition.MigrationInfo.hashCode()"], ["java.lang.String", "com.hazelcast.internal.partition.MigrationInfo.toString()"], ["int", "com.hazelcast.internal.partition.MigrationInfo.getFactoryId()"], ["int", "com.hazelcast.internal.partition.MigrationInfo.getId()"], ["void", "com.hazelcast.internal.partition.PartitionServiceProxy$1.handleException(java.lang.Throwable)"], ["void", "com.hazelcast.internal.partition.ReplicaErrorLogger.log(java.lang.Throwable, com.hazelcast.logging.ILogger)"], ["com.hazelcast.internal.partition.PartitionServiceProxy", "com.hazelcast.internal.partition.PartitionServiceProxy(com.hazelcast.spi.impl.NodeEngineImpl, com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl)"], ["java.lang.String", "com.hazelcast.internal.partition.PartitionServiceProxy.randomPartitionKey()"], ["com.hazelcast.core.Partition", "com.hazelcast.internal.partition.PartitionServiceProxy.getPartition(java.lang.Object)"], ["java.lang.String", "com.hazelcast.internal.partition.PartitionServiceProxy.addMigrationListener(com.hazelcast.core.MigrationListener)"], ["boolean", "com.hazelcast.internal.partition.PartitionServiceProxy.removeMigrationListener(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.partition.PartitionServiceProxy.addPartitionLostListener(com.hazelcast.partition.PartitionLostListener)"], ["boolean", "com.hazelcast.internal.partition.PartitionServiceProxy.removePartitionLostListener(java.lang.String)"], ["boolean", "com.hazelcast.internal.partition.PartitionServiceProxy.isClusterSafe()"], ["boolean", "com.hazelcast.internal.partition.PartitionServiceProxy.isMemberSafe(com.hazelcast.core.Member)"], ["boolean", "com.hazelcast.internal.partition.PartitionServiceProxy.isLocalMemberSafe()"], ["boolean", "com.hazelcast.internal.partition.PartitionServiceProxy.forceLocalMemberToBeSafe(long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.internal.partition.MigrationInfo$MigrationStatus[]", "com.hazelcast.internal.partition.MigrationInfo$MigrationStatus.values()"], ["com.hazelcast.internal.partition.MigrationInfo$MigrationStatus", "com.hazelcast.internal.partition.MigrationInfo$MigrationStatus.valueOf(java.lang.String)"], ["void", "com.hazelcast.internal.partition.MigrationInfo$MigrationStatus.writeTo(com.hazelcast.internal.partition.MigrationInfo$MigrationStatus, java.io.DataOutput)"], ["com.hazelcast.internal.partition.MigrationInfo$MigrationStatus", "com.hazelcast.internal.partition.MigrationInfo$MigrationStatus.readFrom(java.io.DataInput)"], ["int", "com.hazelcast.internal.partition.PartitionServiceProxy$PartitionProxy.getPartitionId()"], ["com.hazelcast.core.Member", "com.hazelcast.internal.partition.PartitionServiceProxy$PartitionProxy.getOwner()"], ["int", "com.hazelcast.internal.partition.PartitionServiceProxy$PartitionProxy.compareTo(java.lang.Object)"], ["boolean", "com.hazelcast.internal.partition.PartitionServiceProxy$PartitionProxy.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.partition.PartitionServiceProxy$PartitionProxy.hashCode()"], ["java.lang.String", "com.hazelcast.internal.partition.PartitionServiceProxy$PartitionProxy.toString()"], ["com.hazelcast.internal.partition.operation.FetchPartitionStateOperation", "com.hazelcast.internal.partition.operation.FetchPartitionStateOperation()"], ["void", "com.hazelcast.internal.partition.operation.FetchPartitionStateOperation.run()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.partition.operation.FetchPartitionStateOperation.onInvocationException(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.FetchPartitionStateOperation.getResponse()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.FetchPartitionStateOperation.getServiceName()"], ["int", "com.hazelcast.internal.partition.operation.FetchPartitionStateOperation.getId()"], ["com.hazelcast.internal.partition.operation.PartitionStateOperation", "com.hazelcast.internal.partition.operation.PartitionStateOperation()"], ["com.hazelcast.internal.partition.operation.PartitionStateOperation", "com.hazelcast.internal.partition.operation.PartitionStateOperation(com.hazelcast.internal.partition.PartitionRuntimeState)"], ["com.hazelcast.internal.partition.operation.PartitionStateOperation", "com.hazelcast.internal.partition.operation.PartitionStateOperation(com.hazelcast.internal.partition.PartitionRuntimeState, boolean)"], ["void", "com.hazelcast.internal.partition.operation.PartitionStateOperation.run()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionStateOperation.returnsResponse()"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.PartitionStateOperation.getResponse()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.PartitionStateOperation.getServiceName()"], ["int", "com.hazelcast.internal.partition.operation.PartitionStateOperation.getId()"], ["com.hazelcast.internal.partition.operation.MigrationOperation", "com.hazelcast.internal.partition.operation.MigrationOperation()"], ["com.hazelcast.internal.partition.operation.MigrationOperation", "com.hazelcast.internal.partition.operation.MigrationOperation(com.hazelcast.internal.partition.MigrationInfo, int, com.hazelcast.internal.partition.ReplicaFragmentMigrationState, boolean, boolean)"], ["void", "com.hazelcast.internal.partition.operation.MigrationOperation.run()"], ["void", "com.hazelcast.internal.partition.operation.MigrationOperation.onExecutionFailure(java.lang.Throwable)"], ["int", "com.hazelcast.internal.partition.operation.MigrationOperation.getId()"], ["void", "com.hazelcast.internal.partition.operation.MigrationOperation.setTarget(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.partition.operation.MigrationOperation.logError(java.lang.Throwable)"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.partition.operation.MigrationOperation.onInvocationException(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.MigrationOperation.getResponse()"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.operation.MigrationOperation.getMigrationInfo()"], ["com.hazelcast.internal.partition.operation.ShutdownRequestOperation", "com.hazelcast.internal.partition.operation.ShutdownRequestOperation()"], ["void", "com.hazelcast.internal.partition.operation.ShutdownRequestOperation.run()"], ["boolean", "com.hazelcast.internal.partition.operation.ShutdownRequestOperation.returnsResponse()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.ShutdownRequestOperation.getServiceName()"], ["int", "com.hazelcast.internal.partition.operation.ShutdownRequestOperation.getId()"], ["com.hazelcast.internal.partition.operation.BeforePromotionOperation", "com.hazelcast.internal.partition.operation.BeforePromotionOperation()"], ["void", "com.hazelcast.internal.partition.operation.BeforePromotionOperation.beforeRun()"], ["void", "com.hazelcast.internal.partition.operation.BeforePromotionOperation.run()"], ["void", "com.hazelcast.internal.partition.operation.BeforePromotionOperation.afterRun()"], ["com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse()"], ["com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse(java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse.run()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse.returnsResponse()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse.validatesTarget()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse.getServiceName()"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse.logError(java.lang.Throwable)"], ["int", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRetryResponse.getId()"], ["com.hazelcast.internal.partition.operation.SafeStateCheckOperation", "com.hazelcast.internal.partition.operation.SafeStateCheckOperation()"], ["void", "com.hazelcast.internal.partition.operation.SafeStateCheckOperation.run()"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.SafeStateCheckOperation.getResponse()"], ["int", "com.hazelcast.internal.partition.operation.SafeStateCheckOperation.getId()"], ["void", "com.hazelcast.internal.partition.operation.BaseMigrationOperation.beforeRun()"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.operation.BaseMigrationOperation.getMigrationInfo()"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.BaseMigrationOperation.getResponse()"], ["boolean", "com.hazelcast.internal.partition.operation.BaseMigrationOperation.validatesTarget()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.partition.operation.BaseMigrationOperation.onInvocationException(java.lang.Throwable)"], ["void", "com.hazelcast.internal.partition.operation.BaseMigrationOperation.logError(java.lang.Throwable)"], ["int", "com.hazelcast.internal.partition.operation.AbstractPartitionOperation.getFactoryId()"], ["com.hazelcast.internal.partition.operation.ShutdownResponseOperation", "com.hazelcast.internal.partition.operation.ShutdownResponseOperation()"], ["void", "com.hazelcast.internal.partition.operation.ShutdownResponseOperation.run()"], ["boolean", "com.hazelcast.internal.partition.operation.ShutdownResponseOperation.returnsResponse()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.ShutdownResponseOperation.getServiceName()"], ["int", "com.hazelcast.internal.partition.operation.ShutdownResponseOperation.getId()"], ["com.hazelcast.internal.partition.operation.FinalizeMigrationOperation", "com.hazelcast.internal.partition.operation.FinalizeMigrationOperation()"], ["com.hazelcast.internal.partition.operation.FinalizeMigrationOperation", "com.hazelcast.internal.partition.operation.FinalizeMigrationOperation(com.hazelcast.internal.partition.MigrationInfo, com.hazelcast.spi.partition.MigrationEndpoint, boolean)"], ["void", "com.hazelcast.internal.partition.operation.FinalizeMigrationOperation.run()"], ["boolean", "com.hazelcast.internal.partition.operation.FinalizeMigrationOperation.returnsResponse()"], ["boolean", "com.hazelcast.internal.partition.operation.FinalizeMigrationOperation.validatesTarget()"], ["int", "com.hazelcast.internal.partition.operation.FinalizeMigrationOperation.getId()"], ["boolean", "com.hazelcast.internal.partition.operation.AbstractPromotionOperation.returnsResponse()"], ["boolean", "com.hazelcast.internal.partition.operation.AbstractPromotionOperation.validatesTarget()"], ["int", "com.hazelcast.internal.partition.operation.AbstractPromotionOperation.getId()"], ["void", "com.hazelcast.internal.partition.operation.MigrationOperation$1.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse()"], ["com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse(java.util.Collection<com.hazelcast.spi.Operation>, com.hazelcast.spi.ServiceNamespace, long[])"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse.run()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse.returnsResponse()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse.validatesTarget()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse.getServiceName()"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse.onExecutionFailure(java.lang.Throwable)"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse.logError(java.lang.Throwable)"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse.setTarget(com.hazelcast.nio.Address)"], ["int", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse.getId()"], ["com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation()"], ["com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation(java.util.Map<com.hazelcast.spi.ServiceNamespace, java.lang.Long>, boolean)"], ["void", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation.run()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation.returnsResponse()"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation.getResponse()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation.validatesTarget()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation.getServiceName()"], ["void", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation.logError(java.lang.Throwable)"], ["int", "com.hazelcast.internal.partition.operation.PartitionBackupReplicaAntiEntropyOperation.getId()"], ["com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest()"], ["com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest(int, java.util.Collection<com.hazelcast.spi.ServiceNamespace>, int)"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest.beforeRun()"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest.run()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest.returnsResponse()"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest.getResponse()"], ["boolean", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest.validatesTarget()"], ["void", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest.logError(java.lang.Throwable)"], ["java.lang.String", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest.getServiceName()"], ["int", "com.hazelcast.internal.partition.operation.PartitionReplicaSyncRequest.getId()"], ["com.hazelcast.internal.partition.operation.FinalizePromotionOperation", "com.hazelcast.internal.partition.operation.FinalizePromotionOperation()"], ["void", "com.hazelcast.internal.partition.operation.FinalizePromotionOperation.beforeRun()"], ["void", "com.hazelcast.internal.partition.operation.FinalizePromotionOperation.run()"], ["void", "com.hazelcast.internal.partition.operation.FinalizePromotionOperation.afterRun()"], ["com.hazelcast.internal.partition.operation.MigrationCommitOperation", "com.hazelcast.internal.partition.operation.MigrationCommitOperation()"], ["com.hazelcast.internal.partition.operation.MigrationCommitOperation", "com.hazelcast.internal.partition.operation.MigrationCommitOperation(com.hazelcast.internal.partition.PartitionRuntimeState, java.lang.String)"], ["void", "com.hazelcast.internal.partition.operation.MigrationCommitOperation.run()"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.MigrationCommitOperation.getResponse()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.MigrationCommitOperation.getServiceName()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.partition.operation.MigrationCommitOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.internal.partition.operation.MigrationCommitOperation.getId()"], ["int", "com.hazelcast.internal.partition.operation.MigrationRequestOperation$SendNewMigrationFragmentRunnable.getPartitionId()"], ["void", "com.hazelcast.internal.partition.operation.MigrationRequestOperation$SendNewMigrationFragmentRunnable.run()"], ["com.hazelcast.internal.partition.operation.PromotionCommitOperation", "com.hazelcast.internal.partition.operation.PromotionCommitOperation()"], ["com.hazelcast.internal.partition.operation.PromotionCommitOperation", "com.hazelcast.internal.partition.operation.PromotionCommitOperation(com.hazelcast.internal.partition.PartitionRuntimeState, java.util.Collection<com.hazelcast.internal.partition.MigrationInfo>, java.lang.String)"], ["void", "com.hazelcast.internal.partition.operation.PromotionCommitOperation.beforeRun()"], ["com.hazelcast.spi.CallStatus", "com.hazelcast.internal.partition.operation.PromotionCommitOperation.call()"], ["int", "com.hazelcast.internal.partition.operation.PromotionCommitOperation.getId()"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.PromotionCommitOperation.getResponse()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.PromotionCommitOperation.getServiceName()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.partition.operation.PromotionCommitOperation.onInvocationException(java.lang.Throwable)"], ["com.hazelcast.internal.partition.operation.HasOngoingMigration", "com.hazelcast.internal.partition.operation.HasOngoingMigration()"], ["void", "com.hazelcast.internal.partition.operation.HasOngoingMigration.run()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.partition.operation.HasOngoingMigration.onInvocationException(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.HasOngoingMigration.getResponse()"], ["java.lang.String", "com.hazelcast.internal.partition.operation.HasOngoingMigration.getServiceName()"], ["int", "com.hazelcast.internal.partition.operation.HasOngoingMigration.getId()"], ["com.hazelcast.internal.partition.operation.AssignPartitions", "com.hazelcast.internal.partition.operation.AssignPartitions()"], ["void", "com.hazelcast.internal.partition.operation.AssignPartitions.run()"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.AssignPartitions.getResponse()"], ["int", "com.hazelcast.internal.partition.operation.AssignPartitions.getId()"], ["void", "com.hazelcast.internal.partition.operation.MigrationRequestOperation$MigrationCallback.notify(java.lang.Object)"], ["com.hazelcast.internal.partition.operation.MigrationRequestOperation", "com.hazelcast.internal.partition.operation.MigrationRequestOperation()"], ["com.hazelcast.internal.partition.operation.MigrationRequestOperation", "com.hazelcast.internal.partition.operation.MigrationRequestOperation(com.hazelcast.internal.partition.MigrationInfo, int, boolean)"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.partition.operation.MigrationRequestOperation.onInvocationException(java.lang.Throwable)"], ["boolean", "com.hazelcast.internal.partition.operation.MigrationRequestOperation.returnsResponse()"], ["void", "com.hazelcast.internal.partition.operation.MigrationRequestOperation.run()"], ["int", "com.hazelcast.internal.partition.operation.MigrationRequestOperation.getId()"], ["void", "com.hazelcast.internal.partition.operation.MigrationRequestOperation.logError(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.internal.partition.operation.MigrationRequestOperation.getResponse()"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.operation.MigrationRequestOperation.getMigrationInfo()"], ["void", "com.hazelcast.internal.partition.operation.PromotionCommitOperation$BeforePromotionOperationCallback.run()"], ["com.hazelcast.internal.partition.PartitionStateVersionMismatchException", "com.hazelcast.internal.partition.PartitionStateVersionMismatchException(java.lang.String)"], ["com.hazelcast.internal.partition.PartitionStateVersionMismatchException", "com.hazelcast.internal.partition.PartitionStateVersionMismatchException(int, int)"], ["com.hazelcast.internal.partition.ReplicaFragmentMigrationState", "com.hazelcast.internal.partition.ReplicaFragmentMigrationState()"], ["com.hazelcast.internal.partition.ReplicaFragmentMigrationState", "com.hazelcast.internal.partition.ReplicaFragmentMigrationState(java.util.Map<com.hazelcast.spi.ServiceNamespace, long[]>, java.util.Collection<com.hazelcast.spi.Operation>)"], ["java.util.Map<com.hazelcast.spi.ServiceNamespace, long[]>", "com.hazelcast.internal.partition.ReplicaFragmentMigrationState.getNamespaceVersionMap()"], ["int", "com.hazelcast.internal.partition.ReplicaFragmentMigrationState.getFactoryId()"], ["int", "com.hazelcast.internal.partition.ReplicaFragmentMigrationState.getId()"], ["void", "com.hazelcast.internal.partition.ReplicaFragmentMigrationState.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.partition.ReplicaFragmentMigrationState.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.partition.ReplicaFragmentMigrationState.setTarget(com.hazelcast.nio.Address)"], ["java.lang.String", "com.hazelcast.internal.partition.NonFragmentedServiceNamespace.getServiceName()"], ["boolean", "com.hazelcast.internal.partition.NonFragmentedServiceNamespace.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.partition.NonFragmentedServiceNamespace.hashCode()"], ["void", "com.hazelcast.internal.partition.NonFragmentedServiceNamespace.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.partition.NonFragmentedServiceNamespace.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.internal.partition.NonFragmentedServiceNamespace.toString()"], ["int", "com.hazelcast.internal.partition.NonFragmentedServiceNamespace.getFactoryId()"], ["int", "com.hazelcast.internal.partition.NonFragmentedServiceNamespace.getId()"], ["com.hazelcast.internal.partition.PartitionRuntimeState", "com.hazelcast.internal.partition.PartitionRuntimeState()"], ["com.hazelcast.internal.partition.PartitionRuntimeState", "com.hazelcast.internal.partition.PartitionRuntimeState(com.hazelcast.internal.partition.InternalPartition[], java.util.Collection<com.hazelcast.internal.partition.MigrationInfo>, int)"], ["com.hazelcast.nio.Address[][]", "com.hazelcast.internal.partition.PartitionRuntimeState.getPartitionTable()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.partition.PartitionRuntimeState.getEndpoint()"], ["void", "com.hazelcast.internal.partition.PartitionRuntimeState.setEndpoint(com.hazelcast.nio.Address)"], ["com.hazelcast.internal.partition.MigrationInfo", "com.hazelcast.internal.partition.PartitionRuntimeState.getActiveMigration()"], ["void", "com.hazelcast.internal.partition.PartitionRuntimeState.setActiveMigration(com.hazelcast.internal.partition.MigrationInfo)"], ["void", "com.hazelcast.internal.partition.PartitionRuntimeState.setCompletedMigrations(java.util.Collection<com.hazelcast.internal.partition.MigrationInfo>)"], ["void", "com.hazelcast.internal.partition.PartitionRuntimeState.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.partition.PartitionRuntimeState.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.internal.partition.PartitionRuntimeState.toString()"], ["int", "com.hazelcast.internal.partition.PartitionRuntimeState.getVersion()"], ["void", "com.hazelcast.internal.partition.PartitionRuntimeState.setVersion(int)"], ["int", "com.hazelcast.internal.partition.PartitionRuntimeState.getFactoryId()"], ["int", "com.hazelcast.internal.partition.PartitionRuntimeState.getId()"], ["com.hazelcast.internal.memory.GlobalMemoryAccessorType[]", "com.hazelcast.internal.memory.GlobalMemoryAccessorType.values()"], ["com.hazelcast.internal.memory.GlobalMemoryAccessorType", "com.hazelcast.internal.memory.GlobalMemoryAccessorType.valueOf(java.lang.String)"], ["byte", "com.hazelcast.internal.memory.impl.ByteArrayAccessStrategy.getByte(byte[], long)"], ["void", "com.hazelcast.internal.memory.impl.ByteArrayAccessStrategy.putByte(byte[], long, byte)"], ["void", "com.hazelcast.internal.memory.impl.ByteArrayAccessStrategy.putByte(java.lang.Object, long, byte)"], ["byte", "com.hazelcast.internal.memory.impl.ByteArrayAccessStrategy.getByte(java.lang.Object, long)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getBoolean(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putBoolean(long, boolean)"], ["byte", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getByte(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putByte(long, byte)"], ["char", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getChar(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putChar(long, char)"], ["short", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getShort(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putShort(long, short)"], ["int", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getInt(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putInt(long, int)"], ["float", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getFloat(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putFloat(long, float)"], ["long", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getLong(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putLong(long, long)"], ["double", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getDouble(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putDouble(long, double)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.copyMemory(long, long, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.copyFromByteArray(byte[], int, long, int)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.copyToByteArray(long, byte[], int, int)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.setMemory(long, long, byte)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getBooleanVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putBooleanVolatile(long, boolean)"], ["byte", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getByteVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putByteVolatile(long, byte)"], ["char", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getCharVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putCharVolatile(long, char)"], ["short", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getShortVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putShortVolatile(long, short)"], ["int", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getIntVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putIntVolatile(long, int)"], ["float", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getFloatVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putFloatVolatile(long, float)"], ["long", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getLongVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putLongVolatile(long, long)"], ["double", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getDoubleVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putDoubleVolatile(long, double)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putOrderedInt(long, int)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putOrderedLong(long, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putOrderedObject(long, java.lang.Object)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.compareAndSwapInt(long, int, int)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.compareAndSwapLong(long, long, long)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.compareAndSwapObject(long, java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getBoolean(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putBoolean(java.lang.Object, long, boolean)"], ["byte", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getByte(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putByte(java.lang.Object, long, byte)"], ["long", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.objectFieldOffset(java.lang.reflect.Field)"], ["int", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.arrayBaseOffset(java.lang.Class<?>)"], ["int", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.arrayIndexScale(java.lang.Class<?>)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.copyMemory(java.lang.Object, long, java.lang.Object, long, long)"], ["java.lang.Object", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getObject(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putObject(java.lang.Object, long, java.lang.Object)"], ["char", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getChar(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putChar(java.lang.Object, long, char)"], ["short", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getShort(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putShort(java.lang.Object, long, short)"], ["int", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getInt(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putInt(java.lang.Object, long, int)"], ["float", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getFloat(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putFloat(java.lang.Object, long, float)"], ["long", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getLong(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putLong(java.lang.Object, long, long)"], ["double", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getDouble(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putDouble(java.lang.Object, long, double)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getBooleanVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putBooleanVolatile(java.lang.Object, long, boolean)"], ["byte", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getByteVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putByteVolatile(java.lang.Object, long, byte)"], ["java.lang.Object", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getObjectVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putObjectVolatile(java.lang.Object, long, java.lang.Object)"], ["char", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getCharVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putCharVolatile(java.lang.Object, long, char)"], ["short", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getShortVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putShortVolatile(java.lang.Object, long, short)"], ["int", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getIntVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putIntVolatile(java.lang.Object, long, int)"], ["float", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getFloatVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putFloatVolatile(java.lang.Object, long, float)"], ["long", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getLongVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putLongVolatile(java.lang.Object, long, long)"], ["double", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.getDoubleVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putDoubleVolatile(java.lang.Object, long, double)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putOrderedInt(java.lang.Object, long, int)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putOrderedLong(java.lang.Object, long, long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.putOrderedObject(java.lang.Object, long, java.lang.Object)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.compareAndSwapInt(java.lang.Object, long, int, int)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.compareAndSwapLong(java.lang.Object, long, long, long)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.compareAndSwapObject(java.lang.Object, long, java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentAwareMemoryAccessor.isBigEndian()"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentUtil.is2BytesAligned(long)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentUtil.is4BytesAligned(long)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentUtil.is8BytesAligned(long)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentUtil.isReferenceAligned(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentUtil.checkReferenceAligned(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentUtil.check2BytesAligned(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentUtil.check4BytesAligned(long)"], ["void", "com.hazelcast.internal.memory.impl.AlignmentUtil.check8BytesAligned(long)"], ["boolean", "com.hazelcast.internal.memory.impl.AlignmentUtil.isUnalignedAccessAllowed()"], ["com.hazelcast.internal.memory.impl.MemoryManagerBean", "com.hazelcast.internal.memory.impl.MemoryManagerBean(com.hazelcast.internal.memory.MemoryAllocator, com.hazelcast.internal.memory.MemoryAccessor)"], ["com.hazelcast.internal.memory.MemoryAllocator", "com.hazelcast.internal.memory.impl.MemoryManagerBean.getAllocator()"], ["com.hazelcast.internal.memory.MemoryAccessor", "com.hazelcast.internal.memory.impl.MemoryManagerBean.getAccessor()"], ["void", "com.hazelcast.internal.memory.impl.MemoryManagerBean.dispose()"], ["sun.misc.Unsafe", "com.hazelcast.internal.memory.impl.UnsafeUtil$1.run()"], ["java.lang.Object", "com.hazelcast.internal.memory.impl.UnsafeUtil$1.run()"], ["boolean", "com.hazelcast.internal.memory.impl.UnsafeBasedMemoryAccessor.isAvailable()"], ["boolean", "com.hazelcast.internal.memory.impl.UnsafeBasedMemoryAccessor.isBigEndian()"], ["byte", "com.hazelcast.internal.memory.impl.CustomByteAccessStrategy.getByte(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["void", "com.hazelcast.internal.memory.impl.CustomByteAccessStrategy.putByte(com.hazelcast.internal.memory.MemoryAccessor, long, byte)"], ["void", "com.hazelcast.internal.memory.impl.CustomByteAccessStrategy.putByte(java.lang.Object, long, byte)"], ["byte", "com.hazelcast.internal.memory.impl.CustomByteAccessStrategy.getByte(java.lang.Object, long)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getBoolean(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putBoolean(long, boolean)"], ["byte", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getByte(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putByte(long, byte)"], ["char", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getChar(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putChar(long, char)"], ["short", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getShort(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putShort(long, short)"], ["int", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getInt(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putInt(long, int)"], ["float", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getFloat(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putFloat(long, float)"], ["long", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getLong(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putLong(long, long)"], ["double", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getDouble(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putDouble(long, double)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.copyMemory(long, long, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.copyFromByteArray(byte[], int, long, int)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.copyToByteArray(long, byte[], int, int)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.setMemory(long, long, byte)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getBooleanVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putBooleanVolatile(long, boolean)"], ["byte", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getByteVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putByteVolatile(long, byte)"], ["char", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getCharVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putCharVolatile(long, char)"], ["short", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getShortVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putShortVolatile(long, short)"], ["int", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getIntVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putIntVolatile(long, int)"], ["float", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getFloatVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putFloatVolatile(long, float)"], ["long", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getLongVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putLongVolatile(long, long)"], ["double", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getDoubleVolatile(long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putDoubleVolatile(long, double)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.compareAndSwapInt(long, int, int)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.compareAndSwapLong(long, long, long)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.compareAndSwapObject(long, java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putOrderedInt(long, int)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putOrderedLong(long, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putOrderedObject(long, java.lang.Object)"], ["long", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.objectFieldOffset(java.lang.reflect.Field)"], ["int", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.arrayBaseOffset(java.lang.Class<?>)"], ["int", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.arrayIndexScale(java.lang.Class<?>)"], ["java.lang.Object", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getObject(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putObject(java.lang.Object, long, java.lang.Object)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getBoolean(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putBoolean(java.lang.Object, long, boolean)"], ["byte", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getByte(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putByte(java.lang.Object, long, byte)"], ["char", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getChar(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putChar(java.lang.Object, long, char)"], ["short", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getShort(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putShort(java.lang.Object, long, short)"], ["int", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getInt(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putInt(java.lang.Object, long, int)"], ["float", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getFloat(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putFloat(java.lang.Object, long, float)"], ["long", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getLong(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putLong(java.lang.Object, long, long)"], ["double", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getDouble(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putDouble(java.lang.Object, long, double)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.copyMemory(java.lang.Object, long, java.lang.Object, long, long)"], ["java.lang.Object", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getObjectVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putObjectVolatile(java.lang.Object, long, java.lang.Object)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getBooleanVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putBooleanVolatile(java.lang.Object, long, boolean)"], ["byte", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getByteVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putByteVolatile(java.lang.Object, long, byte)"], ["char", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getCharVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putCharVolatile(java.lang.Object, long, char)"], ["short", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getShortVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putShortVolatile(java.lang.Object, long, short)"], ["int", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getIntVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putIntVolatile(java.lang.Object, long, int)"], ["float", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getFloatVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putFloatVolatile(java.lang.Object, long, float)"], ["long", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getLongVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putLongVolatile(java.lang.Object, long, long)"], ["double", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.getDoubleVolatile(java.lang.Object, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putDoubleVolatile(java.lang.Object, long, double)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putOrderedInt(java.lang.Object, long, int)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putOrderedLong(java.lang.Object, long, long)"], ["void", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.putOrderedObject(java.lang.Object, long, java.lang.Object)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.compareAndSwapInt(java.lang.Object, long, int, int)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.compareAndSwapLong(java.lang.Object, long, long, long)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.compareAndSwapObject(java.lang.Object, long, java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.internal.memory.impl.StandardMemoryAccessor.isBigEndian()"], ["<R> char", "com.hazelcast.internal.memory.impl.EndiannessUtil.readChar(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, boolean)"], ["<R> char", "com.hazelcast.internal.memory.impl.EndiannessUtil.readCharB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> char", "com.hazelcast.internal.memory.impl.EndiannessUtil.readCharL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeChar(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, char, boolean)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeCharB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, char)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeCharL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, char)"], ["<R> short", "com.hazelcast.internal.memory.impl.EndiannessUtil.readShort(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, boolean)"], ["<R> short", "com.hazelcast.internal.memory.impl.EndiannessUtil.readShortB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> short", "com.hazelcast.internal.memory.impl.EndiannessUtil.readShortL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeShort(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, short, boolean)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeShortB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, short)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeShortL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, short)"], ["<R> int", "com.hazelcast.internal.memory.impl.EndiannessUtil.readInt(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, boolean)"], ["<R> int", "com.hazelcast.internal.memory.impl.EndiannessUtil.readIntB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> int", "com.hazelcast.internal.memory.impl.EndiannessUtil.readIntL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeInt(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, int, boolean)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeIntB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, int)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeIntL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, int)"], ["<R> float", "com.hazelcast.internal.memory.impl.EndiannessUtil.readFloat(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, boolean)"], ["<R> float", "com.hazelcast.internal.memory.impl.EndiannessUtil.readFloatB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> float", "com.hazelcast.internal.memory.impl.EndiannessUtil.readFloatL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeFloat(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, float, boolean)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeFloatB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, float)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeFloatL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, float)"], ["<R> long", "com.hazelcast.internal.memory.impl.EndiannessUtil.readLong(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, boolean)"], ["<R> long", "com.hazelcast.internal.memory.impl.EndiannessUtil.readLongB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> long", "com.hazelcast.internal.memory.impl.EndiannessUtil.readLongL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeLong(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, long, boolean)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeLongB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, long)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeLongL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, long)"], ["<R> double", "com.hazelcast.internal.memory.impl.EndiannessUtil.readDouble(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, boolean)"], ["<R> double", "com.hazelcast.internal.memory.impl.EndiannessUtil.readDoubleB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> double", "com.hazelcast.internal.memory.impl.EndiannessUtil.readDoubleL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeDouble(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, double, boolean)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeDoubleB(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, double)"], ["<R> void", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeDoubleL(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, double)"], ["<R> int", "com.hazelcast.internal.memory.impl.EndiannessUtil.writeUtf8Char(com.hazelcast.internal.memory.ByteAccessStrategy<R>, R, long, int)"], ["char", "com.hazelcast.internal.memory.impl.EndiannessUtil.readUtf8Char(java.io.DataInput, byte)"], ["int", "com.hazelcast.internal.memory.impl.EndiannessUtil.readUtf8Char(byte[], int, char[], int)"], ["com.hazelcast.internal.memory.GlobalMemoryAccessor", "com.hazelcast.internal.memory.GlobalMemoryAccessorRegistry.getGlobalMemoryAccessor(com.hazelcast.internal.memory.GlobalMemoryAccessorType)"], ["com.hazelcast.internal.memory.GlobalMemoryAccessor", "com.hazelcast.internal.memory.GlobalMemoryAccessorRegistry.getDefaultGlobalMemoryAccessor()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$8.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$8.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$8.getServiceName()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$4.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$4.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$4.getServiceName()"], ["com.hazelcast.internal.jmx.HazelcastMBean$BeanInfo", "com.hazelcast.internal.jmx.HazelcastMBean$BeanInfo(com.hazelcast.internal.jmx.HazelcastMBean, java.lang.String, java.lang.String, java.lang.reflect.Method)"], ["javax.management.MBeanAttributeInfo", "com.hazelcast.internal.jmx.HazelcastMBean$BeanInfo.getAttributeInfo()"], ["javax.management.MBeanOperationInfo", "com.hazelcast.internal.jmx.HazelcastMBean$BeanInfo.getOperationInfo()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$3.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$3.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$3.getServiceName()"], ["void", "com.hazelcast.internal.jmx.SetMBean.clear()"], ["java.lang.String", "com.hazelcast.internal.jmx.SetMBean.getName()"], ["java.lang.String", "com.hazelcast.internal.jmx.SetMBean.getPartitionKey()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalOwnedEntryCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalBackupEntryCount()"], ["int", "com.hazelcast.internal.jmx.MapMBean.getLocalBackupCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalOwnedEntryMemoryCost()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalBackupEntryMemoryCost()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalCreationTime()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalLastAccessTime()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalLastUpdateTime()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalHits()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalLockedEntryCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalDirtyEntryCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalPutOperationCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalGetOperationCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalRemoveOperationCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalTotalPutLatency()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalTotalGetLatency()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalTotalRemoveLatency()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalMaxPutLatency()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalMaxGetLatency()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getMaxRemoveLatency()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalEventOperationCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.getLocalOtherOperationCount()"], ["long", "com.hazelcast.internal.jmx.MapMBean.localTotal()"], ["long", "com.hazelcast.internal.jmx.MapMBean.localHeapCost()"], ["java.lang.String", "com.hazelcast.internal.jmx.MapMBean.getName()"], ["int", "com.hazelcast.internal.jmx.MapMBean.getSize()"], ["java.lang.String", "com.hazelcast.internal.jmx.MapMBean.getConfig()"], ["void", "com.hazelcast.internal.jmx.MapMBean.clear()"], ["java.lang.String", "com.hazelcast.internal.jmx.MapMBean.values(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.jmx.MapMBean.entrySet(java.lang.String)"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalOwnedItemCount()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalBackupItemCount()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalMinAge()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalMaxAge()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalAvgAge()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalOfferOperationCount()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalRejectedOfferOperationCount()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalPollOperationCount()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalEmptyPollOperationCount()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalOtherOperationsCount()"], ["long", "com.hazelcast.internal.jmx.QueueMBean.getLocalEventOperationCount()"], ["java.lang.String", "com.hazelcast.internal.jmx.QueueMBean.getName()"], ["java.lang.String", "com.hazelcast.internal.jmx.QueueMBean.getPartitionKey()"], ["java.lang.String", "com.hazelcast.internal.jmx.QueueMBean.getConfig()"], ["void", "com.hazelcast.internal.jmx.QueueMBean.clear()"], ["java.lang.String", "com.hazelcast.internal.jmx.CountDownLatchMBean.name()"], ["int", "com.hazelcast.internal.jmx.CountDownLatchMBean.getCount()"], ["void", "com.hazelcast.internal.jmx.CountDownLatchMBean.countDown()"], ["java.lang.String", "com.hazelcast.internal.jmx.CountDownLatchMBean.getPartitionKey()"], ["java.lang.String", "com.hazelcast.internal.jmx.SemaphoreMBean.getName()"], ["int", "com.hazelcast.internal.jmx.SemaphoreMBean.getAvailable()"], ["int", "com.hazelcast.internal.jmx.SemaphoreMBean.drain()"], ["void", "com.hazelcast.internal.jmx.SemaphoreMBean.reduce(int)"], ["void", "com.hazelcast.internal.jmx.SemaphoreMBean.increase(int)"], ["void", "com.hazelcast.internal.jmx.SemaphoreMBean.release(int)"], ["java.lang.String", "com.hazelcast.internal.jmx.SemaphoreMBean.getPartitionKey()"], ["com.hazelcast.internal.jmx.ConnectionManagerMBean", "com.hazelcast.internal.jmx.ConnectionManagerMBean(com.hazelcast.core.HazelcastInstance, com.hazelcast.nio.ConnectionManager, com.hazelcast.internal.jmx.ManagementService)"], ["com.hazelcast.nio.ConnectionManager", "com.hazelcast.internal.jmx.ConnectionManagerMBean.getConnectionManager()"], ["int", "com.hazelcast.internal.jmx.ConnectionManagerMBean.getCurrentClientConnections()"], ["int", "com.hazelcast.internal.jmx.ConnectionManagerMBean.getActiveConnectionCount()"], ["int", "com.hazelcast.internal.jmx.ConnectionManagerMBean.getConnectionCount()"], ["void", "com.hazelcast.internal.jmx.ListMBean.clear()"], ["java.lang.String", "com.hazelcast.internal.jmx.ListMBean.getName()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$12.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$12.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$12.getServiceName()"], ["com.hazelcast.internal.jmx.ManagedExecutorServiceMBean", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean(com.hazelcast.core.HazelcastInstance, com.hazelcast.util.executor.ManagedExecutorService, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean.getName()"], ["int", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean.queueSize()"], ["int", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean.poolSize()"], ["int", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean.queueRemainingCapacity()"], ["int", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean.maxPoolSize()"], ["boolean", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean.isShutdown()"], ["boolean", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean.isTerminated()"], ["long", "com.hazelcast.internal.jmx.ManagedExecutorServiceMBean.getExecutedCount()"], ["com.hazelcast.internal.jmx.PartitionServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getPartitionServiceMBean()"], ["com.hazelcast.internal.jmx.ManagedExecutorServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getSystemExecutorMBean()"], ["com.hazelcast.internal.jmx.ManagedExecutorServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getAsyncExecutorMBean()"], ["com.hazelcast.internal.jmx.ManagedExecutorServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getScheduledExecutorMBean()"], ["com.hazelcast.internal.jmx.ManagedExecutorServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getClientExecutorMBean()"], ["com.hazelcast.internal.jmx.ManagedExecutorServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getQueryExecutorMBean()"], ["com.hazelcast.internal.jmx.ManagedExecutorServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getIoExecutorMBean()"], ["com.hazelcast.internal.jmx.ManagedExecutorServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getOffloadableExecutorMBean()"], ["com.hazelcast.internal.jmx.OperationServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getOperationServiceMBean()"], ["com.hazelcast.internal.jmx.ProxyServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getProxyServiceMBean()"], ["com.hazelcast.internal.jmx.ClientEngineMBean", "com.hazelcast.internal.jmx.InstanceMBean.getClientEngineMBean()"], ["com.hazelcast.internal.jmx.ConnectionManagerMBean", "com.hazelcast.internal.jmx.InstanceMBean.getConnectionManagerMBean()"], ["com.hazelcast.internal.jmx.EventServiceMBean", "com.hazelcast.internal.jmx.InstanceMBean.getEventServiceMBean()"], ["com.hazelcast.internal.jmx.NodeMBean", "com.hazelcast.internal.jmx.InstanceMBean.getNodeMBean()"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.internal.jmx.InstanceMBean.getHazelcastInstance()"], ["java.lang.String", "com.hazelcast.internal.jmx.InstanceMBean.getName()"], ["java.lang.String", "com.hazelcast.internal.jmx.InstanceMBean.getVersion()"], ["java.lang.String", "com.hazelcast.internal.jmx.InstanceMBean.getBuild()"], ["java.lang.String", "com.hazelcast.internal.jmx.InstanceMBean.getConfig()"], ["java.lang.String", "com.hazelcast.internal.jmx.InstanceMBean.getConfigSource()"], ["java.lang.String", "com.hazelcast.internal.jmx.InstanceMBean.getGroupName()"], ["int", "com.hazelcast.internal.jmx.InstanceMBean.getPort()"], ["long", "com.hazelcast.internal.jmx.InstanceMBean.getClusterTime()"], ["int", "com.hazelcast.internal.jmx.InstanceMBean.getMemberCount()"], ["boolean", "com.hazelcast.internal.jmx.InstanceMBean.isRunning()"], ["void", "com.hazelcast.internal.jmx.InstanceMBean.shutdown()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$7.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$7.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$7.getServiceName()"], ["com.hazelcast.internal.jmx.AtomicLongMBean", "com.hazelcast.internal.jmx.AtomicLongMBean(com.hazelcast.core.IAtomicLong, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.AtomicLongMBean.getName()"], ["long", "com.hazelcast.internal.jmx.AtomicLongMBean.getCurrentValue()"], ["void", "com.hazelcast.internal.jmx.AtomicLongMBean.set(long)"], ["long", "com.hazelcast.internal.jmx.AtomicLongMBean.addAndGet(long)"], ["boolean", "com.hazelcast.internal.jmx.AtomicLongMBean.compareAndSet(long, long)"], ["long", "com.hazelcast.internal.jmx.AtomicLongMBean.decrementAndGet()"], ["long", "com.hazelcast.internal.jmx.AtomicLongMBean.getAndAdd(long)"], ["long", "com.hazelcast.internal.jmx.AtomicLongMBean.getAndIncrement()"], ["long", "com.hazelcast.internal.jmx.AtomicLongMBean.getAndSet(long)"], ["long", "com.hazelcast.internal.jmx.AtomicLongMBean.incrementAndGet()"], ["java.lang.String", "com.hazelcast.internal.jmx.AtomicLongMBean.getPartitionKey()"], ["com.hazelcast.internal.jmx.OperationServiceMBean", "com.hazelcast.internal.jmx.OperationServiceMBean(com.hazelcast.core.HazelcastInstance, com.hazelcast.spi.impl.operationservice.InternalOperationService, com.hazelcast.internal.jmx.ManagementService)"], ["int", "com.hazelcast.internal.jmx.OperationServiceMBean.getResponseQueueSize()"], ["int", "com.hazelcast.internal.jmx.OperationServiceMBean.getRunningOperationsCount()"], ["int", "com.hazelcast.internal.jmx.OperationServiceMBean.getRemoteOperationsCount()"], ["long", "com.hazelcast.internal.jmx.OperationServiceMBean.getExecutedOperationCount()"], ["long", "com.hazelcast.internal.jmx.OperationServiceMBean.getOperationThreadCount()"], ["long", "com.hazelcast.internal.jmx.ReliableTopicMBean.getLocalCreationTime()"], ["long", "com.hazelcast.internal.jmx.ReliableTopicMBean.getLocalPublishOperationCount()"], ["long", "com.hazelcast.internal.jmx.ReliableTopicMBean.getLocalReceiveOperationCount()"], ["java.lang.String", "com.hazelcast.internal.jmx.ReliableTopicMBean.getName()"], ["java.lang.String", "com.hazelcast.internal.jmx.ReliableTopicMBean.getConfig()"], ["com.hazelcast.internal.jmx.ManagementService", "com.hazelcast.internal.jmx.ManagementService(com.hazelcast.instance.HazelcastInstanceImpl)"], ["com.hazelcast.internal.jmx.InstanceMBean", "com.hazelcast.internal.jmx.ManagementService.getInstanceMBean()"], ["void", "com.hazelcast.internal.jmx.ManagementService.destroy()"], ["void", "com.hazelcast.internal.jmx.ManagementService.shutdownAll(java.util.List<com.hazelcast.instance.HazelcastInstanceProxy>)"], ["void", "com.hazelcast.internal.jmx.ManagementService.shutdown(java.lang.String)"], ["void", "com.hazelcast.internal.jmx.ManagementService.distributedObjectCreated(com.hazelcast.core.DistributedObjectEvent)"], ["void", "com.hazelcast.internal.jmx.ManagementService.distributedObjectDestroyed(com.hazelcast.core.DistributedObjectEvent)"], ["java.lang.String", "com.hazelcast.internal.jmx.ManagementService.quote(java.lang.String)"], ["com.hazelcast.internal.jmx.ClientEngineMBean", "com.hazelcast.internal.jmx.ClientEngineMBean(com.hazelcast.core.HazelcastInstance, com.hazelcast.client.ClientEngine, com.hazelcast.internal.jmx.ManagementService)"], ["int", "com.hazelcast.internal.jmx.ClientEngineMBean.getClientEndpointCount()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$14.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$14.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$14.getServiceName()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalOwnedEntryCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalBackupEntryCount()"], ["int", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalBackupCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalOwnedEntryMemoryCost()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalBackupEntryMemoryCost()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalCreationTime()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalLastAccessTime()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalLastUpdateTime()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalHits()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalLockedEntryCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalDirtyEntryCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalPutOperationCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalGetOperationCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalRemoveOperationCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalTotalPutLatency()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalTotalGetLatency()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalTotalRemoveLatency()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalMaxPutLatency()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalMaxGetLatency()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getMaxRemoveLatency()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalEventOperationCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.getLocalOtherOperationCount()"], ["long", "com.hazelcast.internal.jmx.MultiMapMBean.localTotal()"], ["java.lang.String", "com.hazelcast.internal.jmx.MultiMapMBean.getName()"], ["void", "com.hazelcast.internal.jmx.MultiMapMBean.clear()"], ["int", "com.hazelcast.internal.jmx.MultiMapMBean.getSize()"], ["java.lang.String", "com.hazelcast.internal.jmx.MultiMapMBean.getConfig()"], ["com.hazelcast.internal.jmx.ProxyServiceMBean", "com.hazelcast.internal.jmx.ProxyServiceMBean(com.hazelcast.core.HazelcastInstance, com.hazelcast.spi.ProxyService, com.hazelcast.internal.jmx.ManagementService)"], ["int", "com.hazelcast.internal.jmx.ProxyServiceMBean.getProxyCount()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$9.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$9.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$9.getServiceName()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$5.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$5.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$5.getServiceName()"], ["void", "com.hazelcast.internal.jmx.HazelcastMBean.register(com.hazelcast.internal.jmx.HazelcastMBean)"], ["java.lang.Object", "com.hazelcast.internal.jmx.HazelcastMBean.getAttribute(java.lang.String)"], ["void", "com.hazelcast.internal.jmx.HazelcastMBean.setObjectName(java.util.Map<java.lang.String, java.lang.String>)"], ["void", "com.hazelcast.internal.jmx.HazelcastMBean.setAttribute(javax.management.Attribute)"], ["javax.management.AttributeList", "com.hazelcast.internal.jmx.HazelcastMBean.getAttributes(java.lang.String[])"], ["javax.management.AttributeList", "com.hazelcast.internal.jmx.HazelcastMBean.setAttributes(javax.management.AttributeList)"], ["java.lang.Object", "com.hazelcast.internal.jmx.HazelcastMBean.invoke(java.lang.String, java.lang.Object[], java.lang.String[])"], ["javax.management.MBeanInfo", "com.hazelcast.internal.jmx.HazelcastMBean.getMBeanInfo()"], ["javax.management.ObjectName", "com.hazelcast.internal.jmx.HazelcastMBean.preRegister(javax.management.MBeanServer, javax.management.ObjectName)"], ["void", "com.hazelcast.internal.jmx.HazelcastMBean.postRegister(java.lang.Boolean)"], ["void", "com.hazelcast.internal.jmx.HazelcastMBean.preDeregister()"], ["void", "com.hazelcast.internal.jmx.HazelcastMBean.postDeregister()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$1.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$1.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$1.getServiceName()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$10.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$10.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$10.getServiceName()"], ["java.lang.String", "com.hazelcast.internal.jmx.LockMBean.getName()"], ["java.lang.String", "com.hazelcast.internal.jmx.LockMBean.getLockObject()"], ["long", "com.hazelcast.internal.jmx.LockMBean.getRemainingLeaseTime()"], ["int", "com.hazelcast.internal.jmx.LockMBean.getLockCount()"], ["void", "com.hazelcast.internal.jmx.LockMBean.clear()"], ["java.lang.String", "com.hazelcast.internal.jmx.LockMBean.getPartitionKey()"], ["com.hazelcast.internal.jmx.MBeans$MBeanFactory[]", "com.hazelcast.internal.jmx.MBeans$MBeanFactory.values()"], ["com.hazelcast.internal.jmx.MBeans$MBeanFactory", "com.hazelcast.internal.jmx.MBeans$MBeanFactory.valueOf(java.lang.String)"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$2.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$2.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$2.getServiceName()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$11.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$11.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$11.getServiceName()"], ["long", "com.hazelcast.internal.jmx.ExecutorServiceMBean.getLocalPendingTaskCount()"], ["long", "com.hazelcast.internal.jmx.ExecutorServiceMBean.getLocalStartedTaskCount()"], ["long", "com.hazelcast.internal.jmx.ExecutorServiceMBean.getLocalCompletedTaskCount()"], ["long", "com.hazelcast.internal.jmx.ExecutorServiceMBean.getLocalCancelledTaskCount()"], ["long", "com.hazelcast.internal.jmx.ExecutorServiceMBean.getLocalTotalStartLatency()"], ["long", "com.hazelcast.internal.jmx.ExecutorServiceMBean.getLocalTotalExecutionLatency()"], ["java.lang.String", "com.hazelcast.internal.jmx.ExecutorServiceMBean.name()"], ["com.hazelcast.internal.jmx.LocalStatsDelegate", "com.hazelcast.internal.jmx.LocalStatsDelegate(com.hazelcast.internal.jmx.suppliers.StatsSupplier<T>, long)"], ["T", "com.hazelcast.internal.jmx.LocalStatsDelegate.getLocalStats()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$13.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$13.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$13.getServiceName()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalOwnedEntryCount()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalCreationTime()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalLastAccessTime()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalLastUpdateTime()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalHits()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalPutOperationCount()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalGetOperationCount()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalRemoveOperationCount()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalTotalPutLatency()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalTotalGetLatency()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalTotalRemoveLatency()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalMaxPutLatency()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalMaxGetLatency()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getMaxRemoveLatency()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalEventOperationCount()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getLocalOtherOperationCount()"], ["long", "com.hazelcast.internal.jmx.ReplicatedMapMBean.localTotal()"], ["java.lang.String", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getName()"], ["int", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getSize()"], ["java.lang.String", "com.hazelcast.internal.jmx.ReplicatedMapMBean.getConfig()"], ["void", "com.hazelcast.internal.jmx.ReplicatedMapMBean.clear()"], ["java.lang.String", "com.hazelcast.internal.jmx.ReplicatedMapMBean.values()"], ["java.lang.String", "com.hazelcast.internal.jmx.ReplicatedMapMBean.entrySet()"], ["com.hazelcast.internal.jmx.HazelcastMBean", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$6.createNew(com.hazelcast.core.DistributedObject, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$6.getObjectType()"], ["java.lang.String", "com.hazelcast.internal.jmx.MBeans$MBeanFactory$6.getServiceName()"], ["com.hazelcast.internal.jmx.AtomicReferenceMBean", "com.hazelcast.internal.jmx.AtomicReferenceMBean(com.hazelcast.core.IAtomicReference, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.AtomicReferenceMBean.getName()"], ["java.lang.String", "com.hazelcast.internal.jmx.AtomicReferenceMBean.getPartitionKey()"], ["com.hazelcast.internal.jmx.NodeMBean", "com.hazelcast.internal.jmx.NodeMBean(com.hazelcast.core.HazelcastInstance, com.hazelcast.instance.Node, com.hazelcast.internal.jmx.ManagementService)"], ["java.lang.String", "com.hazelcast.internal.jmx.NodeMBean.getName()"], ["java.lang.String", "com.hazelcast.internal.jmx.NodeMBean.getMasterAddress()"], ["com.hazelcast.internal.jmx.PartitionServiceMBean", "com.hazelcast.internal.jmx.PartitionServiceMBean(com.hazelcast.instance.HazelcastInstanceImpl, com.hazelcast.internal.partition.InternalPartitionService, com.hazelcast.internal.jmx.ManagementService)"], ["int", "com.hazelcast.internal.jmx.PartitionServiceMBean.getPartitionCount()"], ["int", "com.hazelcast.internal.jmx.PartitionServiceMBean.getActivePartitionCount()"], ["boolean", "com.hazelcast.internal.jmx.PartitionServiceMBean.isClusterSafe()"], ["boolean", "com.hazelcast.internal.jmx.PartitionServiceMBean.isLocalMemberSafe()"], ["long", "com.hazelcast.internal.jmx.TopicMBean.getLocalCreationTime()"], ["long", "com.hazelcast.internal.jmx.TopicMBean.getLocalPublishOperationCount()"], ["long", "com.hazelcast.internal.jmx.TopicMBean.getLocalReceiveOperationCount()"], ["java.lang.String", "com.hazelcast.internal.jmx.TopicMBean.getName()"], ["java.lang.String", "com.hazelcast.internal.jmx.TopicMBean.getConfig()"], ["com.hazelcast.internal.jmx.EventServiceMBean", "com.hazelcast.internal.jmx.EventServiceMBean(com.hazelcast.core.HazelcastInstance, com.hazelcast.spi.EventService, com.hazelcast.internal.jmx.ManagementService)"], ["int", "com.hazelcast.internal.jmx.EventServiceMBean.getEventThreadCount()"], ["int", "com.hazelcast.internal.jmx.EventServiceMBean.getEventQueueCapacity()"], ["int", "com.hazelcast.internal.jmx.EventServiceMBean.getEventQueueSize()"], ["com.hazelcast.internal.jmx.suppliers.LocalQueueStatsSupplier", "com.hazelcast.internal.jmx.suppliers.LocalQueueStatsSupplier(com.hazelcast.core.IQueue)"], ["com.hazelcast.monitor.LocalQueueStats", "com.hazelcast.internal.jmx.suppliers.LocalQueueStatsSupplier.getEmpty()"], ["com.hazelcast.monitor.LocalQueueStats", "com.hazelcast.internal.jmx.suppliers.LocalQueueStatsSupplier.get()"], ["java.lang.Object", "com.hazelcast.internal.jmx.suppliers.LocalQueueStatsSupplier.get()"], ["java.lang.Object", "com.hazelcast.internal.jmx.suppliers.LocalQueueStatsSupplier.getEmpty()"], ["com.hazelcast.internal.jmx.suppliers.LocalMultiMapStatsSupplier", "com.hazelcast.internal.jmx.suppliers.LocalMultiMapStatsSupplier(com.hazelcast.core.MultiMap)"], ["com.hazelcast.monitor.LocalMultiMapStats", "com.hazelcast.internal.jmx.suppliers.LocalMultiMapStatsSupplier.getEmpty()"], ["com.hazelcast.monitor.LocalMultiMapStats", "com.hazelcast.internal.jmx.suppliers.LocalMultiMapStatsSupplier.get()"], ["java.lang.Object", "com.hazelcast.internal.jmx.suppliers.LocalMultiMapStatsSupplier.get()"], ["java.lang.Object", "com.hazelcast.internal.jmx.suppliers.LocalMultiMapStatsSupplier.getEmpty()"], ["com.hazelcast.internal.jmx.suppliers.LocalMapStatsSupplier", "com.hazelcast.internal.jmx.suppliers.LocalMapStatsSupplier(com.hazelcast.core.IMap)"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.internal.jmx.suppliers.LocalMapStatsSupplier.getEmpty()"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.internal.jmx.suppliers.LocalMapStatsSupplier.get()"], ["java.lang.Object", "com.hazelcast.internal.jmx.suppliers.LocalMapStatsSupplier.get()"], ["java.lang.Object", "com.hazelcast.internal.jmx.suppliers.LocalMapStatsSupplier.getEmpty()"], ["<A, E extends com.hazelcast.internal.eviction.Evictable> com.hazelcast.internal.eviction.impl.evaluator.EvictionPolicyEvaluator<A, E>", "com.hazelcast.internal.eviction.EvictionPolicyEvaluatorProvider.getEvictionPolicyEvaluator(com.hazelcast.internal.eviction.EvictionConfiguration, java.lang.ClassLoader)"], ["com.hazelcast.internal.eviction.impl.comparator.LRUEvictionPolicyComparator", "com.hazelcast.internal.eviction.impl.comparator.LRUEvictionPolicyComparator()"], ["int", "com.hazelcast.internal.eviction.impl.comparator.LRUEvictionPolicyComparator.compare(com.hazelcast.internal.eviction.EvictableEntryView, com.hazelcast.internal.eviction.EvictableEntryView)"], ["com.hazelcast.internal.eviction.impl.comparator.RandomEvictionPolicyComparator", "com.hazelcast.internal.eviction.impl.comparator.RandomEvictionPolicyComparator()"], ["int", "com.hazelcast.internal.eviction.impl.comparator.RandomEvictionPolicyComparator.compare(com.hazelcast.internal.eviction.EvictableEntryView, com.hazelcast.internal.eviction.EvictableEntryView)"], ["com.hazelcast.internal.eviction.impl.comparator.LFUEvictionPolicyComparator", "com.hazelcast.internal.eviction.impl.comparator.LFUEvictionPolicyComparator()"], ["int", "com.hazelcast.internal.eviction.impl.comparator.LFUEvictionPolicyComparator.compare(com.hazelcast.internal.eviction.EvictableEntryView, com.hazelcast.internal.eviction.EvictableEntryView)"], ["com.hazelcast.internal.eviction.impl.evaluator.EvictionPolicyEvaluator", "com.hazelcast.internal.eviction.impl.evaluator.EvictionPolicyEvaluator(com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["com.hazelcast.internal.eviction.EvictionPolicyComparator", "com.hazelcast.internal.eviction.impl.evaluator.EvictionPolicyEvaluator.getEvictionPolicyComparator()"], ["<C extends com.hazelcast.internal.eviction.EvictionCandidate<A, E>> C", "com.hazelcast.internal.eviction.impl.evaluator.EvictionPolicyEvaluator.evaluate(java.lang.Iterable<C>)"], ["boolean", "com.hazelcast.internal.eviction.impl.strategy.sampling.SamplingEvictionStrategy.evict(S, com.hazelcast.internal.eviction.impl.evaluator.EvictionPolicyEvaluator<A, E>, com.hazelcast.internal.eviction.EvictionChecker, com.hazelcast.internal.eviction.EvictionListener<A, E>)"], ["boolean", "com.hazelcast.internal.eviction.EvictionChecker$1.isEvictionRequired()"], ["com.hazelcast.internal.eviction.EvictionPolicyType[]", "com.hazelcast.internal.eviction.EvictionPolicyType.values()"], ["com.hazelcast.internal.eviction.EvictionPolicyType", "com.hazelcast.internal.eviction.EvictionPolicyType.valueOf(java.lang.String)"], ["com.hazelcast.internal.eviction.EvictionStrategyType[]", "com.hazelcast.internal.eviction.EvictionStrategyType.values()"], ["com.hazelcast.internal.eviction.EvictionStrategyType", "com.hazelcast.internal.eviction.EvictionStrategyType.valueOf(java.lang.String)"], ["com.hazelcast.internal.eviction.CompositeEvictionChecker", "com.hazelcast.internal.eviction.CompositeEvictionChecker.newCompositeEvictionChecker(com.hazelcast.internal.eviction.CompositeEvictionChecker$CompositionOperator, com.hazelcast.internal.eviction.EvictionChecker...)"], ["boolean", "com.hazelcast.internal.eviction.CompositeEvictionChecker$CompositeEvictionCheckerWithAndComposition.isEvictionRequired()"], ["com.hazelcast.internal.eviction.EvictionPolicyComparator", "com.hazelcast.internal.eviction.EvictionPolicyComparator()"], ["boolean", "com.hazelcast.internal.eviction.EvictionPolicyComparator.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.eviction.EvictionPolicyComparator.hashCode()"], ["int", "com.hazelcast.internal.eviction.EvictionPolicyComparator.compare(java.lang.Object, java.lang.Object)"], ["com.hazelcast.internal.eviction.CompositeEvictionChecker$CompositionOperator[]", "com.hazelcast.internal.eviction.CompositeEvictionChecker$CompositionOperator.values()"], ["com.hazelcast.internal.eviction.CompositeEvictionChecker$CompositionOperator", "com.hazelcast.internal.eviction.CompositeEvictionChecker$CompositionOperator.valueOf(java.lang.String)"], ["boolean", "com.hazelcast.internal.eviction.CompositeEvictionChecker$CompositeEvictionCheckerWithOrComposition.isEvictionRequired()"], ["com.hazelcast.internal.dynamicconfig.EmptyDynamicConfigListener", "com.hazelcast.internal.dynamicconfig.EmptyDynamicConfigListener()"], ["void", "com.hazelcast.internal.dynamicconfig.EmptyDynamicConfigListener.onConfigRegistered(com.hazelcast.config.MapConfig)"], ["void", "com.hazelcast.internal.dynamicconfig.EmptyDynamicConfigListener.onConfigRegistered(com.hazelcast.config.CacheSimpleConfig)"], ["void", "com.hazelcast.internal.dynamicconfig.EmptyDynamicConfigListener.onServiceInitialized(com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService)"], ["com.hazelcast.internal.dynamicconfig.AbstractDynamicConfigOperation", "com.hazelcast.internal.dynamicconfig.AbstractDynamicConfigOperation()"], ["int", "com.hazelcast.internal.dynamicconfig.AbstractDynamicConfigOperation.getFactoryId()"], ["java.lang.String", "com.hazelcast.internal.dynamicconfig.AbstractDynamicConfigOperation.getServiceName()"], ["com.hazelcast.spi.Operation", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService$Merger$1.get()"], ["java.lang.Object", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService$Merger$1.get()"], ["com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService$Merger", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService$Merger(com.hazelcast.spi.NodeEngine, com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService$Merger.run()"], ["com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperation", "com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperation()"], ["com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperation", "com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperation(com.hazelcast.nio.serialization.IdentifiedDataSerializable, int)"], ["void", "com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperation.run()"], ["int", "com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperation.getId()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperation.onInvocationException(java.lang.Throwable)"], ["com.hazelcast.internal.dynamicconfig.ConfigCheckMode[]", "com.hazelcast.internal.dynamicconfig.ConfigCheckMode.values()"], ["com.hazelcast.internal.dynamicconfig.ConfigCheckMode", "com.hazelcast.internal.dynamicconfig.ConfigCheckMode.valueOf(java.lang.String)"], ["com.hazelcast.internal.dynamicconfig.DynamicConfigPreJoinOperation", "com.hazelcast.internal.dynamicconfig.DynamicConfigPreJoinOperation(com.hazelcast.nio.serialization.IdentifiedDataSerializable[], com.hazelcast.internal.dynamicconfig.ConfigCheckMode)"], ["com.hazelcast.internal.dynamicconfig.DynamicConfigPreJoinOperation", "com.hazelcast.internal.dynamicconfig.DynamicConfigPreJoinOperation()"], ["void", "com.hazelcast.internal.dynamicconfig.DynamicConfigPreJoinOperation.run()"], ["int", "com.hazelcast.internal.dynamicconfig.DynamicConfigPreJoinOperation.getId()"], ["com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperationSupplier", "com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperationSupplier(com.hazelcast.internal.cluster.ClusterService, com.hazelcast.nio.serialization.IdentifiedDataSerializable)"], ["com.hazelcast.spi.Operation", "com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.internal.dynamicconfig.AddDynamicConfigOperationSupplier.get()"], ["com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService(com.hazelcast.spi.NodeEngine, com.hazelcast.internal.dynamicconfig.DynamicConfigListener)"], ["com.hazelcast.spi.Operation", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getPreJoinOperation()"], ["void", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.onClusterVersionChange(com.hazelcast.version.Version)"], ["void", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.reset()"], ["void", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.shutdown(boolean)"], ["void", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.broadcastConfig(com.hazelcast.nio.serialization.IdentifiedDataSerializable)"], ["void", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.registerConfigLocally(com.hazelcast.nio.serialization.IdentifiedDataSerializable, com.hazelcast.internal.dynamicconfig.ConfigCheckMode)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findMultiMapConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.MultiMapConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getMultiMapConfigs()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findMapConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.MapConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getMapConfigs()"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findTopicConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.TopicConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getTopicConfigs()"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findCardinalityEstimatorConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.CardinalityEstimatorConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getCardinalityEstimatorConfigs()"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findPNCounterConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.PNCounterConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getPNCounterConfigs()"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findExecutorConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.ExecutorConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getExecutorConfigs()"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findScheduledExecutorConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.ScheduledExecutorConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getScheduledExecutorConfigs()"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findDurableExecutorConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.DurableExecutorConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getDurableExecutorConfigs()"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findSemaphoreConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.SemaphoreConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getSemaphoreConfigs()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findRingbufferConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.RingbufferConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getRingbufferConfigs()"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findAtomicLongConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.AtomicLongConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getAtomicLongConfigs()"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findAtomicReferenceConfig(java.lang.String)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findCountDownLatchConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.AtomicReferenceConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getAtomicReferenceConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.CountDownLatchConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getCountDownLatchConfigs()"], ["com.hazelcast.config.LockConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findLockConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.LockConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getLockConfigs()"], ["com.hazelcast.config.ListConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findListConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.ListConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getListConfigs()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findQueueConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.QueueConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getQueueConfigs()"], ["com.hazelcast.config.SetConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findSetConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.SetConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getSetConfigs()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findReplicatedMapConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.ReplicatedMapConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getReplicatedMapConfigs()"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findReliableTopicConfig(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.config.ReliableTopicConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getReliableTopicConfigs()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findCacheSimpleConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.CacheSimpleConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getCacheSimpleConfigs()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findCacheEventJournalConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getCacheEventJournalConfigs()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findMapEventJournalConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getMapEventJournalConfigs()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.findFlakeIdGeneratorConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.FlakeIdGeneratorConfig>", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getFlakeIdGeneratorConfigs()"], ["java.lang.Runnable", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.prepareMergeRunnable()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getSemaphoreConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getPNCounterConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getCardinalityEstimatorConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getScheduledExecutorConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getDurableExecutorConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getExecutorConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getReliableTopicConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getTopicConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getRingbufferConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getReplicatedMapConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getMultiMapConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getSetConfigs()"], ["java.util.Map", "com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService.getListConfigs()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findMultiMapConfig(java.lang.String)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findMapConfig(java.lang.String)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findTopicConfig(java.lang.String)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findCardinalityEstimatorConfig(java.lang.String)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findPNCounterConfig(java.lang.String)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findExecutorConfig(java.lang.String)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findScheduledExecutorConfig(java.lang.String)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findDurableExecutorConfig(java.lang.String)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findSemaphoreConfig(java.lang.String)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findRingbufferConfig(java.lang.String)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findAtomicLongConfig(java.lang.String)"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findAtomicReferenceConfig(java.lang.String)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findCountDownLatchConfig(java.lang.String)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findLockConfig(java.lang.String)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findListConfig(java.lang.String)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findQueueConfig(java.lang.String)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findSetConfig(java.lang.String)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findReplicatedMapConfig(java.lang.String)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findReliableTopicConfig(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findCacheSimpleConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.CacheSimpleConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getCacheSimpleConfigs()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findCacheEventJournalConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getCacheEventJournalConfigs()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findMapEventJournalConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getMapEventJournalConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.LockConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getLockConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.MapConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getMapConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.QueueConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getQueueConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.ListConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getListConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.SetConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getSetConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.MultiMapConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getMultiMapConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.ReplicatedMapConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getReplicatedMapConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.RingbufferConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getRingbufferConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.AtomicLongConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getAtomicLongConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.AtomicReferenceConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getAtomicReferenceConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.CountDownLatchConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getCountDownLatchConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.TopicConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getTopicConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.ReliableTopicConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getReliableTopicConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.ExecutorConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getExecutorConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.DurableExecutorConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getDurableExecutorConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.ScheduledExecutorConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getScheduledExecutorConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.CardinalityEstimatorConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getCardinalityEstimatorConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.PNCounterConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getPNCounterConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.SemaphoreConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getSemaphoreConfigs()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.findFlakeIdGeneratorConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.FlakeIdGeneratorConfig>", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.getFlakeIdGeneratorConfigs()"], ["void", "com.hazelcast.internal.dynamicconfig.EmptyConfigurationService.broadcastConfig(com.hazelcast.nio.serialization.IdentifiedDataSerializable)"], ["<K, V> java.util.Map<K, V>", "com.hazelcast.internal.dynamicconfig.AggregatingMap.aggregate(java.util.Map<K, V>, java.util.Map<K, V>)"], ["int", "com.hazelcast.internal.dynamicconfig.AggregatingMap.size()"], ["boolean", "com.hazelcast.internal.dynamicconfig.AggregatingMap.isEmpty()"], ["boolean", "com.hazelcast.internal.dynamicconfig.AggregatingMap.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.internal.dynamicconfig.AggregatingMap.containsValue(java.lang.Object)"], ["V", "com.hazelcast.internal.dynamicconfig.AggregatingMap.get(java.lang.Object)"], ["V", "com.hazelcast.internal.dynamicconfig.AggregatingMap.put(K, V)"], ["V", "com.hazelcast.internal.dynamicconfig.AggregatingMap.remove(java.lang.Object)"], ["void", "com.hazelcast.internal.dynamicconfig.AggregatingMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.hazelcast.internal.dynamicconfig.AggregatingMap.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.internal.dynamicconfig.AggregatingMap.entrySet()"], ["com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig(com.hazelcast.config.Config)"], ["java.lang.ClassLoader", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getClassLoader()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setClassLoader(java.lang.ClassLoader)"], ["com.hazelcast.config.ConfigPatternMatcher", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getConfigPatternMatcher()"], ["void", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setConfigPatternMatcher(com.hazelcast.config.ConfigPatternMatcher)"], ["java.lang.String", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getProperty(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setProperty(java.lang.String, java.lang.String)"], ["com.hazelcast.config.MemberAttributeConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getMemberAttributeConfig()"], ["void", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setMemberAttributeConfig(com.hazelcast.config.MemberAttributeConfig)"], ["java.util.Properties", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getProperties()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getInstanceName()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setInstanceName(java.lang.String)"], ["com.hazelcast.config.GroupConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getGroupConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setGroupConfig(com.hazelcast.config.GroupConfig)"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getNetworkConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setNetworkConfig(com.hazelcast.config.NetworkConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findMapConfig(java.lang.String)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getMapConfig(java.lang.String)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getMapConfigOrNull(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addMapConfig(com.hazelcast.config.MapConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.MapConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getMapConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setMapConfigs(java.util.Map<java.lang.String, com.hazelcast.config.MapConfig>)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findCacheConfig(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findCacheConfigOrNull(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCacheConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addCacheConfig(com.hazelcast.config.CacheSimpleConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.CacheSimpleConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCacheConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setCacheConfigs(java.util.Map<java.lang.String, com.hazelcast.config.CacheSimpleConfig>)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findQueueConfig(java.lang.String)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getQueueConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addQueueConfig(com.hazelcast.config.QueueConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.QueueConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getQueueConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setQueueConfigs(java.util.Map<java.lang.String, com.hazelcast.config.QueueConfig>)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findLockConfig(java.lang.String)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getLockConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addLockConfig(com.hazelcast.config.LockConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.LockConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getLockConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setLockConfigs(java.util.Map<java.lang.String, com.hazelcast.config.LockConfig>)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findListConfig(java.lang.String)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getListConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addListConfig(com.hazelcast.config.ListConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ListConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getListConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setListConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ListConfig>)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findSetConfig(java.lang.String)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getSetConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addSetConfig(com.hazelcast.config.SetConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.SetConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getSetConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setSetConfigs(java.util.Map<java.lang.String, com.hazelcast.config.SetConfig>)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findMultiMapConfig(java.lang.String)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getMultiMapConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addMultiMapConfig(com.hazelcast.config.MultiMapConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.MultiMapConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getMultiMapConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setMultiMapConfigs(java.util.Map<java.lang.String, com.hazelcast.config.MultiMapConfig>)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findReplicatedMapConfig(java.lang.String)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getReplicatedMapConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ReplicatedMapConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getReplicatedMapConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setReplicatedMapConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ReplicatedMapConfig>)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findRingbufferConfig(java.lang.String)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getRingbufferConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addRingBufferConfig(com.hazelcast.config.RingbufferConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.RingbufferConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getRingbufferConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setRingbufferConfigs(java.util.Map<java.lang.String, com.hazelcast.config.RingbufferConfig>)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findAtomicLongConfig(java.lang.String)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getAtomicLongConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addAtomicLongConfig(com.hazelcast.config.AtomicLongConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.AtomicLongConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getAtomicLongConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setAtomicLongConfigs(java.util.Map<java.lang.String, com.hazelcast.config.AtomicLongConfig>)"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findAtomicReferenceConfig(java.lang.String)"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getAtomicReferenceConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addAtomicReferenceConfig(com.hazelcast.config.AtomicReferenceConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.AtomicReferenceConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getAtomicReferenceConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setAtomicReferenceConfigs(java.util.Map<java.lang.String, com.hazelcast.config.AtomicReferenceConfig>)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findCountDownLatchConfig(java.lang.String)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCountDownLatchConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addCountDownLatchConfig(com.hazelcast.config.CountDownLatchConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.CountDownLatchConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCountDownLatchConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setCountDownLatchConfigs(java.util.Map<java.lang.String, com.hazelcast.config.CountDownLatchConfig>)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findTopicConfig(java.lang.String)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getTopicConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addTopicConfig(com.hazelcast.config.TopicConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.TopicConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getTopicConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setTopicConfigs(java.util.Map<java.lang.String, com.hazelcast.config.TopicConfig>)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findReliableTopicConfig(java.lang.String)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getReliableTopicConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ReliableTopicConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getReliableTopicConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addReliableTopicConfig(com.hazelcast.config.ReliableTopicConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setReliableTopicConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ReliableTopicConfig>)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findExecutorConfig(java.lang.String)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getExecutorConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addExecutorConfig(com.hazelcast.config.ExecutorConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ExecutorConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getExecutorConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setExecutorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ExecutorConfig>)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findDurableExecutorConfig(java.lang.String)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getDurableExecutorConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addDurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.DurableExecutorConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getDurableExecutorConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setDurableExecutorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.DurableExecutorConfig>)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findScheduledExecutorConfig(java.lang.String)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getScheduledExecutorConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ScheduledExecutorConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getScheduledExecutorConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setScheduledExecutorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ScheduledExecutorConfig>)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findCardinalityEstimatorConfig(java.lang.String)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCardinalityEstimatorConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addCardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.CardinalityEstimatorConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCardinalityEstimatorConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setCardinalityEstimatorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.CardinalityEstimatorConfig>)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findPNCounterConfig(java.lang.String)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getPNCounterConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addPNCounterConfig(com.hazelcast.config.PNCounterConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.PNCounterConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getPNCounterConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setPNCounterConfigs(java.util.Map<java.lang.String, com.hazelcast.config.PNCounterConfig>)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findSemaphoreConfig(java.lang.String)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getSemaphoreConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addSemaphoreConfig(com.hazelcast.config.SemaphoreConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.SemaphoreConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getSemaphoreConfigsAsMap()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setSemaphoreConfigs(java.util.Map<java.lang.String, com.hazelcast.config.SemaphoreConfig>)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findCacheEventJournalConfig(java.lang.String)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCacheEventJournalConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCacheEventJournalConfigs()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findMapEventJournalConfig(java.lang.String)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getMapEventJournalConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getMapEventJournalConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addEventJournalConfig(com.hazelcast.config.EventJournalConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setMapEventJournalConfigs(java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setCacheEventJournalConfigs(java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.FlakeIdGeneratorConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getFlakeIdGeneratorConfigs()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findFlakeIdGeneratorConfig(java.lang.String)"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getFlakeIdGeneratorConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addFlakeIdGeneratorConfig(com.hazelcast.config.FlakeIdGeneratorConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setFlakeIdGeneratorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.FlakeIdGeneratorConfig>)"], ["com.hazelcast.config.WanReplicationConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getWanReplicationConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addWanReplicationConfig(com.hazelcast.config.WanReplicationConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.WanReplicationConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getWanReplicationConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setWanReplicationConfigs(java.util.Map<java.lang.String, com.hazelcast.config.WanReplicationConfig>)"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findJobTrackerConfig(java.lang.String)"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getJobTrackerConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addJobTrackerConfig(com.hazelcast.config.JobTrackerConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.JobTrackerConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getJobTrackerConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setJobTrackerConfigs(java.util.Map<java.lang.String, com.hazelcast.config.JobTrackerConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.QuorumConfig>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getQuorumConfigs()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getQuorumConfig(java.lang.String)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.findQuorumConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setQuorumConfigs(java.util.Map<java.lang.String, com.hazelcast.config.QuorumConfig>)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addQuorumConfig(com.hazelcast.config.QuorumConfig)"], ["com.hazelcast.config.ManagementCenterConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getManagementCenterConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setManagementCenterConfig(com.hazelcast.config.ManagementCenterConfig)"], ["com.hazelcast.config.ServicesConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getServicesConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setServicesConfig(com.hazelcast.config.ServicesConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getSecurityConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setSecurityConfig(com.hazelcast.config.SecurityConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.addListenerConfig(com.hazelcast.config.ListenerConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setListenerConfigs(java.util.List<com.hazelcast.config.ListenerConfig>)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getSerializationConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setSerializationConfig(com.hazelcast.config.SerializationConfig)"], ["com.hazelcast.config.PartitionGroupConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getPartitionGroupConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setPartitionGroupConfig(com.hazelcast.config.PartitionGroupConfig)"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getHotRestartPersistenceConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setHotRestartPersistenceConfig(com.hazelcast.config.HotRestartPersistenceConfig)"], ["com.hazelcast.config.CRDTReplicationConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getCRDTReplicationConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setCRDTReplicationConfig(com.hazelcast.config.CRDTReplicationConfig)"], ["com.hazelcast.core.ManagedContext", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getManagedContext()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setManagedContext(com.hazelcast.core.ManagedContext)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.Object>", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getUserContext()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setUserContext(java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.Object>)"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getNativeMemoryConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setNativeMemoryConfig(com.hazelcast.config.NativeMemoryConfig)"], ["java.net.URL", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getConfigurationUrl()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setConfigurationUrl(java.net.URL)"], ["java.io.File", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getConfigurationFile()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setConfigurationFile(java.io.File)"], ["java.lang.String", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getLicenseKey()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setLicenseKey(java.lang.String)"], ["boolean", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.isLiteMember()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setLiteMember(boolean)"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.getUserCodeDeploymentConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setUserCodeDeploymentConfig(com.hazelcast.config.UserCodeDeploymentConfig)"], ["java.lang.String", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.toString()"], ["void", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setConfigurationService(com.hazelcast.internal.dynamicconfig.ConfigurationService)"], ["void", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.setClusterService(com.hazelcast.internal.cluster.ClusterService)"], ["void", "com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig.onSecurityServiceUpdated(com.hazelcast.security.SecurityService)"], ["com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig(com.hazelcast.config.SecurityConfig, com.hazelcast.security.SecurityService)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.addSecurityInterceptorConfig(com.hazelcast.config.SecurityInterceptorConfig)"], ["void", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.setSecurityInterceptorConfigs(java.util.List<com.hazelcast.config.SecurityInterceptorConfig>)"], ["boolean", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.isEnabled()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.setEnabled(boolean)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.addMemberLoginModuleConfig(com.hazelcast.config.LoginModuleConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.addClientLoginModuleConfig(com.hazelcast.config.LoginModuleConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.addClientPermissionConfig(com.hazelcast.config.PermissionConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.setClientLoginModuleConfigs(java.util.List<com.hazelcast.config.LoginModuleConfig>)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.setMemberLoginModuleConfigs(java.util.List<com.hazelcast.config.LoginModuleConfig>)"], ["com.hazelcast.config.PermissionPolicyConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.getClientPolicyConfig()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.setClientPolicyConfig(com.hazelcast.config.PermissionPolicyConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.setClientBlockUnmappedActions(boolean)"], ["boolean", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.getClientBlockUnmappedActions()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.setClientPermissionConfigs(java.util.Set<com.hazelcast.config.PermissionConfig>)"], ["com.hazelcast.config.CredentialsFactoryConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.getMemberCredentialsConfig()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.setMemberCredentialsConfig(com.hazelcast.config.CredentialsFactoryConfig)"], ["boolean", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.dynamicconfig.DynamicSecurityConfig.hashCode()"], ["com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder()"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setVersion(byte)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setPortableVersion(int)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setClassLoader(java.lang.ClassLoader)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setConfig(com.hazelcast.config.SerializationConfig)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.addDataSerializableFactory(int, com.hazelcast.nio.serialization.DataSerializableFactory)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.addPortableFactory(int, com.hazelcast.nio.serialization.PortableFactory)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.addClassDefinition(com.hazelcast.nio.serialization.ClassDefinition)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setCheckClassDefErrors(boolean)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setManagedContext(com.hazelcast.core.ManagedContext)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setUseNativeByteOrder(boolean)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setByteOrder(java.nio.ByteOrder)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setEnableCompression(boolean)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setEnableSharedObject(boolean)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setAllowUnsafe(boolean)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setPartitioningStrategy(com.hazelcast.core.PartitioningStrategy)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setNotActiveExceptionSupplier(com.hazelcast.util.function.Supplier<java.lang.RuntimeException>)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setInitialOutputBufferSize(int)"], ["com.hazelcast.internal.serialization.SerializationServiceBuilder", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.setProperties(com.hazelcast.spi.properties.HazelcastProperties)"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.build()"], ["com.hazelcast.spi.serialization.SerializationService", "com.hazelcast.internal.serialization.impl.DefaultSerializationServiceBuilder.build()"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortArraySerializer.getTypeId()"], ["short[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, short[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.SerializationUtil$EmptyPartitioningStrategy.getPartitionKey(java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.PortableContextImpl.getClassVersion(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.PortableContextImpl.setClassVersion(int, int, int)"], ["com.hazelcast.nio.serialization.ClassDefinition", "com.hazelcast.internal.serialization.impl.PortableContextImpl.lookupClassDefinition(int, int, int)"], ["com.hazelcast.nio.serialization.ClassDefinition", "com.hazelcast.internal.serialization.impl.PortableContextImpl.lookupClassDefinition(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.ClassDefinition", "com.hazelcast.internal.serialization.impl.PortableContextImpl.registerClassDefinition(com.hazelcast.nio.serialization.ClassDefinition)"], ["com.hazelcast.nio.serialization.ClassDefinition", "com.hazelcast.internal.serialization.impl.PortableContextImpl.lookupOrRegisterClassDefinition(com.hazelcast.nio.serialization.Portable)"], ["com.hazelcast.nio.serialization.FieldDefinition", "com.hazelcast.internal.serialization.impl.PortableContextImpl.getFieldDefinition(com.hazelcast.nio.serialization.ClassDefinition, java.lang.String)"], ["int", "com.hazelcast.internal.serialization.impl.PortableContextImpl.getVersion()"], ["com.hazelcast.core.ManagedContext", "com.hazelcast.internal.serialization.impl.PortableContextImpl.getManagedContext()"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.PortableContextImpl.getByteOrder()"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.init(byte[], int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.clear()"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.read()"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.read(int)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.read(byte[], int, int)"], ["boolean", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readBoolean()"], ["boolean", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readBoolean(int)"], ["byte", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readByte()"], ["byte", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readByte(int)"], ["char", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readChar()"], ["char", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readChar(int)"], ["double", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readDouble()"], ["double", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readDouble(int)"], ["double", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readDouble(java.nio.ByteOrder)"], ["double", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readDouble(int, java.nio.ByteOrder)"], ["float", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readFloat()"], ["float", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readFloat(int)"], ["float", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readFloat(java.nio.ByteOrder)"], ["float", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readFloat(int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readFully(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readFully(byte[], int, int)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readInt()"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readInt(int)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readInt(java.nio.ByteOrder)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readInt(int, java.nio.ByteOrder)"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readLine()"], ["long", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readLong()"], ["long", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readLong(int)"], ["long", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readLong(java.nio.ByteOrder)"], ["long", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readLong(int, java.nio.ByteOrder)"], ["short", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readShort()"], ["short", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readShort(int)"], ["short", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readShort(java.nio.ByteOrder)"], ["short", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readShort(int, java.nio.ByteOrder)"], ["byte[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readByteArray()"], ["boolean[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readBooleanArray()"], ["char[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readCharArray()"], ["int[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readIntArray()"], ["long[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readLongArray()"], ["double[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readDoubleArray()"], ["float[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readFloatArray()"], ["short[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readShortArray()"], ["java.lang.String[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readUTFArray()"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readUnsignedByte()"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readUnsignedShort()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readUTF()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject()"], ["<T> T", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(java.lang.Class)"], ["<T> T", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readDataAsObject()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readData()"], ["long", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.skip(long)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.skipBytes(int)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.position()"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.position(int)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.available()"], ["boolean", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.markSupported()"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.mark(int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.reset()"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.close()"], ["java.lang.ClassLoader", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.getClassLoader()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.getSerializationService()"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.getByteOrder()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.toString()"], ["com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ExternalizableSerializer", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ExternalizableSerializer(boolean, com.hazelcast.nio.ClassNameFilter)"], ["int", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ExternalizableSerializer.getTypeId()"], ["java.io.Externalizable", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ExternalizableSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ExternalizableSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.io.Externalizable)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ExternalizableSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ExternalizableSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ExternalizableSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleSerializer.getTypeId()"], ["java.lang.Double", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Double)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.FieldDefinitionImpl", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl(int, java.lang.String, com.hazelcast.nio.serialization.FieldType, int)"], ["com.hazelcast.internal.serialization.impl.FieldDefinitionImpl", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl(int, java.lang.String, com.hazelcast.nio.serialization.FieldType, int, int, int)"], ["com.hazelcast.nio.serialization.FieldType", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.getType()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.getName()"], ["int", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.getIndex()"], ["int", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.getFactoryId()"], ["int", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.getClassId()"], ["int", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.getVersion()"], ["boolean", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.hashCode()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.FieldDefinitionImpl.toString()"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatArraySerializer.getTypeId()"], ["float[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, float[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.getVersion()"], ["boolean", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.hasField(java.lang.String)"], ["com.hazelcast.nio.serialization.FieldType", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.getFieldType(java.lang.String)"], ["int", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.getFieldClassId(java.lang.String)"], ["com.hazelcast.nio.ObjectDataInput", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.getRawDataInput()"], ["byte", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readByte(java.lang.String)"], ["short", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readShort(java.lang.String)"], ["int", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readInt(java.lang.String)"], ["long", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readLong(java.lang.String)"], ["float", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readFloat(java.lang.String)"], ["double", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readDouble(java.lang.String)"], ["boolean", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readBoolean(java.lang.String)"], ["char", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readChar(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readUTF(java.lang.String)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readPortable(java.lang.String)"], ["byte[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readByteArray(java.lang.String)"], ["boolean[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readBooleanArray(java.lang.String)"], ["char[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readCharArray(java.lang.String)"], ["int[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readIntArray(java.lang.String)"], ["long[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readLongArray(java.lang.String)"], ["double[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readDoubleArray(java.lang.String)"], ["float[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readFloatArray(java.lang.String)"], ["short[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readShortArray(java.lang.String)"], ["java.lang.String[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readUTFArray(java.lang.String)"], ["com.hazelcast.nio.serialization.Portable[]", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.readPortableArray(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.read(java.lang.String, com.hazelcast.query.extractor.ValueCallback)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.read(java.lang.String, com.hazelcast.query.extractor.ValueCollector)"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.DefaultPortableReader.read(java.lang.String)"], ["com.hazelcast.nio.BufferObjectDataInput", "com.hazelcast.internal.serialization.impl.UnsafeInputOutputFactory.createInput(com.hazelcast.nio.serialization.Data, com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.nio.BufferObjectDataInput", "com.hazelcast.internal.serialization.impl.UnsafeInputOutputFactory.createInput(byte[], com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.nio.BufferObjectDataOutput", "com.hazelcast.internal.serialization.impl.UnsafeInputOutputFactory.createOutput(int, com.hazelcast.internal.serialization.InternalSerializationService)"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.UnsafeInputOutputFactory.getByteOrder()"], ["T", "com.hazelcast.internal.serialization.impl.SerializationServiceV1$AbstractBuilder.withPortableVersion(int)"], ["T", "com.hazelcast.internal.serialization.impl.SerializationServiceV1$AbstractBuilder.withDataSerializableFactories(java.util.Map<java.lang.Integer, ? extends com.hazelcast.nio.serialization.DataSerializableFactory>)"], ["java.util.Map<java.lang.Integer, ? extends com.hazelcast.nio.serialization.DataSerializableFactory>", "com.hazelcast.internal.serialization.impl.SerializationServiceV1$AbstractBuilder.getDataSerializableFactories()"], ["T", "com.hazelcast.internal.serialization.impl.SerializationServiceV1$AbstractBuilder.withPortableFactories(java.util.Map<java.lang.Integer, ? extends com.hazelcast.nio.serialization.PortableFactory>)"], ["T", "com.hazelcast.internal.serialization.impl.SerializationServiceV1$AbstractBuilder.withEnableCompression(boolean)"], ["T", "com.hazelcast.internal.serialization.impl.SerializationServiceV1$AbstractBuilder.withEnableSharedObject(boolean)"], ["T", "com.hazelcast.internal.serialization.impl.SerializationServiceV1$AbstractBuilder.withClassNameFilter(com.hazelcast.nio.ClassNameFilter)"], ["com.hazelcast.internal.serialization.impl.HeapData", "com.hazelcast.internal.serialization.impl.HeapData()"], ["com.hazelcast.internal.serialization.impl.HeapData", "com.hazelcast.internal.serialization.impl.HeapData(byte[])"], ["int", "com.hazelcast.internal.serialization.impl.HeapData.dataSize()"], ["int", "com.hazelcast.internal.serialization.impl.HeapData.totalSize()"], ["void", "com.hazelcast.internal.serialization.impl.HeapData.copyTo(byte[], int)"], ["int", "com.hazelcast.internal.serialization.impl.HeapData.getPartitionHash()"], ["boolean", "com.hazelcast.internal.serialization.impl.HeapData.hasPartitionHash()"], ["byte[]", "com.hazelcast.internal.serialization.impl.HeapData.toByteArray()"], ["int", "com.hazelcast.internal.serialization.impl.HeapData.getType()"], ["int", "com.hazelcast.internal.serialization.impl.HeapData.getHeapCost()"], ["boolean", "com.hazelcast.internal.serialization.impl.HeapData.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.HeapData.hashCode()"], ["long", "com.hazelcast.internal.serialization.impl.HeapData.hash64()"], ["boolean", "com.hazelcast.internal.serialization.impl.HeapData.isPortable()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.HeapData.toString()"], ["int", "com.hazelcast.internal.serialization.impl.PortableSerializer.getTypeId()"], ["void", "com.hazelcast.internal.serialization.impl.PortableSerializer.write(com.hazelcast.nio.ObjectDataOutput, com.hazelcast.nio.serialization.Portable)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.internal.serialization.impl.PortableSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.ClassDefinition", "com.hazelcast.internal.serialization.impl.PortableSerializer.setupPositionAndDefinition(com.hazelcast.nio.BufferObjectDataInput, int, int, int)"], ["com.hazelcast.internal.serialization.impl.DefaultPortableReader", "com.hazelcast.internal.serialization.impl.PortableSerializer.createReader(com.hazelcast.nio.BufferObjectDataInput, int, int, int, int)"], ["void", "com.hazelcast.internal.serialization.impl.PortableSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.PortableSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.PortableSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.SerializationServiceV1", "com.hazelcast.internal.serialization.impl.SerializationServiceV1$Builder.build()"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$ByteSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ByteSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ByteSerializer.getTypeId()"], ["java.lang.Byte", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ByteSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ByteSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Byte)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ByteSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ByteSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ByteSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.read()"], ["int", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.read(int)"], ["char", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readChar(int)"], ["double", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readDouble()"], ["double", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readDouble(int)"], ["float", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readFloat()"], ["float", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readFloat(int)"], ["int", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readInt(int)"], ["int", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readInt(int, java.nio.ByteOrder)"], ["long", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readLong(int)"], ["long", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readLong(int, java.nio.ByteOrder)"], ["short", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readShort(int)"], ["short", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readShort(int, java.nio.ByteOrder)"], ["char[]", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readCharArray()"], ["boolean[]", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readBooleanArray()"], ["byte[]", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readByteArray()"], ["int[]", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readIntArray()"], ["long[]", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readLongArray()"], ["double[]", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readDoubleArray()"], ["float[]", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readFloatArray()"], ["short[]", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.readShortArray()"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.getByteOrder()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataInput.toString()"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeObject(java.lang.Object)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeData(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.write(int)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.write(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.write(byte[], int, int)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeBoolean(boolean)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeByte(int)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeShort(int)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeChar(int)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeInt(int)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeLong(long)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeFloat(float)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeDouble(double)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeBytes(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeChars(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeUTF(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeByteArray(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeBooleanArray(boolean[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeCharArray(char[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeIntArray(int[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeLongArray(long[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeDoubleArray(double[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeFloatArray(float[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeShortArray(short[])"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.writeUTFArray(java.lang.String[])"], ["byte[]", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.toByteArray()"], ["byte[]", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.toByteArray(int)"], ["void", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.close()"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.getByteOrder()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.internal.serialization.impl.EmptyObjectDataOutput.getSerializationService()"], ["com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer(boolean, boolean, com.hazelcast.nio.ClassNameFilter)"], ["int", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer.getTypeId()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$JavaSerializer.destroy()"], ["com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter(com.hazelcast.nio.serialization.ByteArraySerializer)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.read(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.read(com.hazelcast.nio.ObjectDataInput, java.lang.Class)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.getTypeId()"], ["void", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.destroy()"], ["com.hazelcast.nio.serialization.Serializer", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.getImpl()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.toString()"], ["boolean", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.hashCode()"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanSerializer.getTypeId()"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Boolean)"], ["java.lang.Boolean", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$StringArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringArraySerializer.getTypeId()"], ["java.lang.String[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.String[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ArrayDataSerializableFactory", "com.hazelcast.internal.serialization.impl.ArrayDataSerializableFactory(com.hazelcast.util.ConstructorFunction<java.lang.Integer, com.hazelcast.nio.serialization.IdentifiedDataSerializable>[])"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.serialization.impl.ArrayDataSerializableFactory.create(int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.serialization.impl.ArrayDataSerializableFactory.create(int, com.hazelcast.version.Version)"], ["int", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.getTypeId()"], ["com.hazelcast.nio.serialization.DataSerializable", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.DataSerializable", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(com.hazelcast.nio.ObjectDataInput, java.lang.Class)"], ["boolean", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.isFlagSet(byte, byte)"], ["void", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.write(com.hazelcast.nio.ObjectDataOutput, com.hazelcast.nio.serialization.DataSerializable)"], ["void", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(com.hazelcast.nio.ObjectDataInput, java.lang.Class)"], ["com.hazelcast.internal.serialization.impl.ClassDefinitionImpl", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl(int, int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.addFieldDef(com.hazelcast.internal.serialization.impl.FieldDefinitionImpl)"], ["com.hazelcast.nio.serialization.FieldDefinition", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.getField(java.lang.String)"], ["com.hazelcast.nio.serialization.FieldDefinition", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.getField(int)"], ["boolean", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.hasField(java.lang.String)"], ["com.hazelcast.nio.serialization.FieldType", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.getFieldType(java.lang.String)"], ["int", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.getFieldClassId(java.lang.String)"], ["int", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.getFieldCount()"], ["int", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.getFactoryId()"], ["int", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.getClassId()"], ["int", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.getVersion()"], ["boolean", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.hashCode()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ClassDefinitionImpl.toString()"], ["T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.withInputOutputFactory(com.hazelcast.internal.serialization.InputOutputFactory)"], ["T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.withVersion(byte)"], ["T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.withClassLoader(java.lang.ClassLoader)"], ["java.lang.ClassLoader", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.getClassLoader()"], ["T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.withManagedContext(com.hazelcast.core.ManagedContext)"], ["T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.withGlobalPartitionStrategy(com.hazelcast.core.PartitioningStrategy)"], ["T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.withInitialOutputBufferSize(int)"], ["T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.withBufferPoolFactory(com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolFactory)"], ["T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService$Builder.withNotActiveExceptionSupplier(com.hazelcast.util.function.Supplier<java.lang.RuntimeException>)"], ["com.hazelcast.internal.serialization.impl.StreamSerializerAdapter", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.nio.serialization.StreamSerializer)"], ["void", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(com.hazelcast.nio.ObjectDataInput, java.lang.Class)"], ["int", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.getTypeId()"], ["void", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.destroy()"], ["com.hazelcast.nio.serialization.Serializer", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.getImpl()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.toString()"], ["boolean", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.hashCode()"], ["void", "com.hazelcast.internal.serialization.impl.VersionedObjectDataInput.setVersion(com.hazelcast.version.Version)"], ["com.hazelcast.version.Version", "com.hazelcast.internal.serialization.impl.VersionedObjectDataInput.getVersion()"], ["com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.getTypeId()"], ["java.lang.Class", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Class)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$ClassSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.write(int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.write(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.write(byte[], int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeBoolean(boolean)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeBoolean(int, boolean)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeByte(int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeZeroBytes(int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeByte(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeBytes(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeChar(int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeChar(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeChars(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeDouble(double)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeDouble(int, double)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeDouble(double, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeDouble(int, double, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeFloat(float)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeFloat(int, float)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeFloat(float, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeFloat(int, float, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeInt(int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeInt(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeInt(int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeInt(int, int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeLong(long)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeLong(int, long)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeLong(long, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeLong(int, long, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeShort(int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeShort(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeShort(int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeShort(int, int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeUTF(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeByteArray(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeBooleanArray(boolean[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeCharArray(char[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeIntArray(int[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeLongArray(long[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeDoubleArray(double[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeFloatArray(float[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeShortArray(short[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeUTFArray(java.lang.String[])"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeObject(java.lang.Object)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeData(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.position()"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.position(int)"], ["int", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.available()"], ["byte[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.toByteArray()"], ["byte[]", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.toByteArray(int)"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.clear()"], ["void", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.close()"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.getByteOrder()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.getSerializationService()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.toString()"], ["com.hazelcast.internal.serialization.impl.ObjectDataInputStream", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream(java.io.InputStream, com.hazelcast.internal.serialization.InternalSerializationService)"], ["int", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.read()"], ["long", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.skip(long)"], ["int", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.available()"], ["int", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.read(byte[])"], ["int", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.read(byte[], int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readFully(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readFully(byte[], int, int)"], ["int", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.skipBytes(int)"], ["boolean", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readBoolean()"], ["byte", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readByte()"], ["int", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readUnsignedByte()"], ["short", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readShort()"], ["int", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readUnsignedShort()"], ["char", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readChar()"], ["int", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readInt()"], ["long", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readLong()"], ["float", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readFloat()"], ["double", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readDouble()"], ["byte[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readByteArray()"], ["boolean[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readBooleanArray()"], ["char[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readCharArray()"], ["int[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readIntArray()"], ["long[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readLongArray()"], ["double[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readDoubleArray()"], ["float[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readFloatArray()"], ["short[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readShortArray()"], ["java.lang.String[]", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readUTFArray()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readLine()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readUTF()"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.close()"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.mark(int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.reset()"], ["boolean", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.markSupported()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readObject()"], ["<T> T", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readDataAsObject()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readObject(java.lang.Class)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.readData()"], ["java.lang.ClassLoader", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.getClassLoader()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.getSerializationService()"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.getByteOrder()"], ["com.hazelcast.version.Version", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.getVersion()"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataInputStream.setVersion(com.hazelcast.version.Version)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$LongSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongSerializer.getTypeId()"], ["java.lang.Long", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Long)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["<B extends com.hazelcast.nio.serialization.Data> B", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.toData(java.lang.Object)"], ["<B extends com.hazelcast.nio.serialization.Data> B", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.toData(java.lang.Object, com.hazelcast.core.PartitioningStrategy)"], ["byte[]", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.toBytes(java.lang.Object)"], ["byte[]", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.toBytes(java.lang.Object, int, boolean)"], ["<T> T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(java.lang.Object)"], ["<T> T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(java.lang.Object, java.lang.Class)"], ["void", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.writeObject(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["<T> T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(com.hazelcast.nio.ObjectDataInput)"], ["<T> T", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(com.hazelcast.nio.ObjectDataInput, java.lang.Class)"], ["void", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.disposeData(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.BufferObjectDataInput", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.createObjectDataInput(byte[])"], ["com.hazelcast.nio.BufferObjectDataInput", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.createObjectDataInput(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.BufferObjectDataOutput", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.createObjectDataOutput(int)"], ["com.hazelcast.nio.BufferObjectDataOutput", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.createObjectDataOutput()"], ["java.lang.ClassLoader", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.getClassLoader()"], ["com.hazelcast.core.ManagedContext", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.getManagedContext()"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.getByteOrder()"], ["byte", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.getVersion()"], ["void", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.dispose()"], ["void", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.register(java.lang.Class, com.hazelcast.nio.serialization.Serializer)"], ["void", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.registerGlobal(com.hazelcast.nio.serialization.Serializer)"], ["void", "com.hazelcast.internal.serialization.impl.AbstractSerializationService.registerGlobal(com.hazelcast.nio.serialization.Serializer, boolean)"], ["int", "com.hazelcast.internal.serialization.impl.SerializationUtil.getPortableVersion(com.hazelcast.nio.serialization.Portable, int)"], ["com.hazelcast.internal.serialization.impl.ObjectDataOutputStream", "com.hazelcast.internal.serialization.impl.SerializationUtil.createObjectDataOutputStream(java.io.OutputStream, com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.internal.serialization.impl.ObjectDataInputStream", "com.hazelcast.internal.serialization.impl.SerializationUtil.createObjectDataInputStream(java.io.InputStream, com.hazelcast.internal.serialization.InternalSerializationService)"], ["<T> void", "com.hazelcast.internal.serialization.impl.SerializationUtil.writeNullableList(java.util.List<T>, com.hazelcast.nio.ObjectDataOutput)"], ["<T> java.util.List<T>", "com.hazelcast.internal.serialization.impl.SerializationUtil.readNullableList(com.hazelcast.nio.ObjectDataInput)"], ["<B extends com.hazelcast.nio.serialization.Data> B", "com.hazelcast.internal.serialization.impl.SerializationServiceV1.toData(java.lang.Object, com.hazelcast.nio.serialization.DataType)"], ["<B extends com.hazelcast.nio.serialization.Data> B", "com.hazelcast.internal.serialization.impl.SerializationServiceV1.toData(java.lang.Object, com.hazelcast.nio.serialization.DataType, com.hazelcast.core.PartitioningStrategy)"], ["<B extends com.hazelcast.nio.serialization.Data> B", "com.hazelcast.internal.serialization.impl.SerializationServiceV1.convertData(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.DataType)"], ["com.hazelcast.nio.serialization.PortableReader", "com.hazelcast.internal.serialization.impl.SerializationServiceV1.createPortableReader(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.internal.serialization.PortableContext", "com.hazelcast.internal.serialization.impl.SerializationServiceV1.getPortableContext()"], ["void", "com.hazelcast.internal.serialization.impl.SerializationServiceV1.registerClassDefinitions(java.util.Collection<com.hazelcast.nio.serialization.ClassDefinition>, boolean)"], ["com.hazelcast.nio.ObjectDataInput", "com.hazelcast.internal.serialization.impl.SerializationServiceV1.initDataSerializableInputAndSkipTheHeader(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.internal.serialization.impl.SerializationServiceV1$Builder", "com.hazelcast.internal.serialization.impl.SerializationServiceV1.builder()"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$NullSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$NullSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$NullSerializer.getTypeId()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$NullSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$NullSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$NullSerializer.destroy()"], ["com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigDecimalSerializer", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigDecimalSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigDecimalSerializer.getTypeId()"], ["java.math.BigDecimal", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigDecimalSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigDecimalSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.math.BigDecimal)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigDecimalSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigDecimalSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigDecimalSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["int", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.getVersion()"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeInt(java.lang.String, int)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeLong(java.lang.String, long)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeUTF(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeBoolean(java.lang.String, boolean)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeByte(java.lang.String, byte)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeChar(java.lang.String, int)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeDouble(java.lang.String, double)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeFloat(java.lang.String, float)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeShort(java.lang.String, short)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writePortable(java.lang.String, com.hazelcast.nio.serialization.Portable)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeNullPortable(java.lang.String, int, int)"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeByteArray(java.lang.String, byte[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeBooleanArray(java.lang.String, boolean[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeCharArray(java.lang.String, char[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeIntArray(java.lang.String, int[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeLongArray(java.lang.String, long[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeDoubleArray(java.lang.String, double[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeFloatArray(java.lang.String, float[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeShortArray(java.lang.String, short[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writeUTFArray(java.lang.String, java.lang.String[])"], ["void", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.writePortableArray(java.lang.String, com.hazelcast.nio.serialization.Portable[])"], ["com.hazelcast.nio.ObjectDataOutput", "com.hazelcast.internal.serialization.impl.DefaultPortableWriter.getRawDataOutput()"], ["com.hazelcast.internal.serialization.impl.MorphingPortableReader", "com.hazelcast.internal.serialization.impl.MorphingPortableReader(com.hazelcast.internal.serialization.impl.PortableSerializer, com.hazelcast.nio.BufferObjectDataInput, com.hazelcast.nio.serialization.ClassDefinition)"], ["int", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readInt(java.lang.String)"], ["long", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readLong(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readUTF(java.lang.String)"], ["boolean", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readBoolean(java.lang.String)"], ["byte", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readByte(java.lang.String)"], ["char", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readChar(java.lang.String)"], ["double", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readDouble(java.lang.String)"], ["float", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readFloat(java.lang.String)"], ["short", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readShort(java.lang.String)"], ["byte[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readByteArray(java.lang.String)"], ["boolean[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readBooleanArray(java.lang.String)"], ["char[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readCharArray(java.lang.String)"], ["int[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readIntArray(java.lang.String)"], ["long[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readLongArray(java.lang.String)"], ["double[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readDoubleArray(java.lang.String)"], ["float[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readFloatArray(java.lang.String)"], ["short[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readShortArray(java.lang.String)"], ["java.lang.String[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readUTFArray(java.lang.String)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readPortable(java.lang.String)"], ["com.hazelcast.nio.serialization.Portable[]", "com.hazelcast.internal.serialization.impl.MorphingPortableReader.readPortableArray(java.lang.String)"], ["com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$EnumSerializer", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$EnumSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$EnumSerializer.getTypeId()"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$EnumSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Enum)"], ["java.lang.Enum", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$EnumSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$EnumSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$EnumSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$EnumSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigIntegerSerializer", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigIntegerSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigIntegerSerializer.getTypeId()"], ["java.math.BigInteger", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigIntegerSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigIntegerSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.math.BigInteger)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigIntegerSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigIntegerSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$BigIntegerSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$StringSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringSerializer.getTypeId()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$StringSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$TheByteArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$TheByteArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$TheByteArraySerializer.getTypeId()"], ["byte[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$TheByteArraySerializer.write(byte[])"], ["byte[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$TheByteArraySerializer.read(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$TheByteArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$TheByteArraySerializer.read(byte[])"], ["byte[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$TheByteArraySerializer.write(java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortSerializer.getTypeId()"], ["java.lang.Short", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Short)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$ShortSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$CharSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharSerializer.getTypeId()"], ["java.lang.Character", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Character)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeInt(java.lang.String, int)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeLong(java.lang.String, long)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeUTF(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeBoolean(java.lang.String, boolean)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeByte(java.lang.String, byte)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeChar(java.lang.String, int)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeDouble(java.lang.String, double)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeFloat(java.lang.String, float)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeShort(java.lang.String, short)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeByteArray(java.lang.String, byte[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeBooleanArray(java.lang.String, boolean[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeCharArray(java.lang.String, char[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeIntArray(java.lang.String, int[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeLongArray(java.lang.String, long[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeDoubleArray(java.lang.String, double[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeFloatArray(java.lang.String, float[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeShortArray(java.lang.String, short[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeUTFArray(java.lang.String, java.lang.String[])"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writePortable(java.lang.String, com.hazelcast.nio.serialization.Portable)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writeNullPortable(java.lang.String, int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.writePortableArray(java.lang.String, com.hazelcast.nio.serialization.Portable[])"], ["com.hazelcast.nio.ObjectDataOutput", "com.hazelcast.internal.serialization.impl.ClassDefinitionWriter.getRawDataOutput()"], ["void", "com.hazelcast.internal.serialization.impl.VersionedObjectDataOutput.setVersion(com.hazelcast.version.Version)"], ["com.hazelcast.version.Version", "com.hazelcast.internal.serialization.impl.VersionedObjectDataOutput.getVersion()"], ["com.hazelcast.internal.serialization.impl.PortableContextImpl$ClassDefinitionContext", "com.hazelcast.internal.serialization.impl.PortableContextImpl$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.PortableContextImpl$1.createNew(java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$DateSerializer", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$DateSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$DateSerializer.getTypeId()"], ["java.util.Date", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$DateSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$DateSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.util.Date)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$DateSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$DateSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$DateSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$LongArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongArraySerializer.getTypeId()"], ["long[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, long[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$LongArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanArraySerializer.getTypeId()"], ["boolean[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, boolean[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$BooleanArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatSerializer.getTypeId()"], ["java.lang.Float", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Float)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$FloatSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerSerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerSerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerSerializer.getTypeId()"], ["java.lang.Integer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Integer)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ArrayListStreamSerializer", "com.hazelcast.internal.serialization.impl.ArrayListStreamSerializer()"], ["void", "com.hazelcast.internal.serialization.impl.ArrayListStreamSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.util.ArrayList)"], ["java.util.ArrayList", "com.hazelcast.internal.serialization.impl.ArrayListStreamSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.internal.serialization.impl.ArrayListStreamSerializer.getTypeId()"], ["void", "com.hazelcast.internal.serialization.impl.ArrayListStreamSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ArrayListStreamSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ArrayListStreamSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleArraySerializer.getTypeId()"], ["double[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, double[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$DoubleArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerArraySerializer.getTypeId()"], ["int[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, int[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$IntegerArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.ByteArrayInputOutputFactory", "com.hazelcast.internal.serialization.impl.ByteArrayInputOutputFactory(java.nio.ByteOrder)"], ["com.hazelcast.nio.BufferObjectDataInput", "com.hazelcast.internal.serialization.impl.ByteArrayInputOutputFactory.createInput(com.hazelcast.nio.serialization.Data, com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.nio.BufferObjectDataInput", "com.hazelcast.internal.serialization.impl.ByteArrayInputOutputFactory.createInput(byte[], com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.nio.BufferObjectDataOutput", "com.hazelcast.internal.serialization.impl.ByteArrayInputOutputFactory.createOutput(int, com.hazelcast.internal.serialization.InternalSerializationService)"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.ByteArrayInputOutputFactory.getByteOrder()"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeChar(int)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeChar(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeDouble(double)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeDouble(int, double)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeFloat(float)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeFloat(int, float)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeInt(int)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeInt(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeInt(int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeInt(int, int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeLong(long)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeLong(int, long)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeLong(long, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeLong(int, long, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeShort(int)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeShort(int, int)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeShort(int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeShort(int, int, java.nio.ByteOrder)"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeBooleanArray(boolean[])"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeByteArray(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeCharArray(char[])"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeShortArray(short[])"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeIntArray(int[])"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeFloatArray(float[])"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeLongArray(long[])"], ["void", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.writeDoubleArray(double[])"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.getByteOrder()"], ["java.lang.String", "com.hazelcast.internal.serialization.impl.UnsafeObjectDataOutput.toString()"], ["void", "com.hazelcast.internal.serialization.impl.JavaDefaultSerializers$SingletonSerializer.destroy()"], ["com.hazelcast.internal.serialization.impl.ConstantSerializers$CharArraySerializer", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharArraySerializer()"], ["int", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharArraySerializer.getTypeId()"], ["char[]", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, char[])"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharArraySerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharArraySerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$CharArraySerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolImpl", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolImpl(com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.nio.BufferObjectDataOutput", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolImpl.takeOutputBuffer()"], ["void", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolImpl.returnOutputBuffer(com.hazelcast.nio.BufferObjectDataOutput)"], ["com.hazelcast.nio.BufferObjectDataInput", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolImpl.takeInputBuffer(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolImpl.returnInputBuffer(com.hazelcast.nio.BufferObjectDataInput)"], ["com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolFactoryImpl", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolFactoryImpl()"], ["com.hazelcast.internal.serialization.impl.bufferpool.BufferPool", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolFactoryImpl.create(com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolThreadLocal", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolThreadLocal(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolFactory, com.hazelcast.util.function.Supplier<java.lang.RuntimeException>)"], ["com.hazelcast.internal.serialization.impl.bufferpool.BufferPool", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolThreadLocal.get()"], ["void", "com.hazelcast.internal.serialization.impl.bufferpool.BufferPoolThreadLocal.clear()"], ["com.hazelcast.internal.serialization.impl.LinkedListStreamSerializer", "com.hazelcast.internal.serialization.impl.LinkedListStreamSerializer()"], ["void", "com.hazelcast.internal.serialization.impl.LinkedListStreamSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.util.LinkedList)"], ["java.util.LinkedList", "com.hazelcast.internal.serialization.impl.LinkedListStreamSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.internal.serialization.impl.LinkedListStreamSerializer.getTypeId()"], ["void", "com.hazelcast.internal.serialization.impl.LinkedListStreamSerializer.destroy()"], ["java.lang.Object", "com.hazelcast.internal.serialization.impl.LinkedListStreamSerializer.read(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.serialization.impl.LinkedListStreamSerializer.write(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["void", "com.hazelcast.internal.serialization.impl.ConstantSerializers$SingletonSerializer.destroy()"], ["com.hazelcast.internal.serialization.impl.ObjectDataOutputStream", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream(java.io.OutputStream, com.hazelcast.internal.serialization.InternalSerializationService)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.write(int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.write(byte[], int, int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeBoolean(boolean)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeByte(int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeShort(int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeChar(int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeInt(int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeLong(long)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeFloat(float)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeDouble(double)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeBytes(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeChars(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeByteArray(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeBooleanArray(boolean[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeCharArray(char[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeIntArray(int[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeLongArray(long[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeDoubleArray(double[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeFloatArray(float[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeShortArray(short[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeUTFArray(java.lang.String[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeUTF(java.lang.String)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.write(byte[])"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeObject(java.lang.Object)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.writeData(com.hazelcast.nio.serialization.Data)"], ["byte[]", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.toByteArray()"], ["byte[]", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.toByteArray(int)"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.flush()"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.close()"], ["java.nio.ByteOrder", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.getByteOrder()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.getSerializationService()"], ["com.hazelcast.version.Version", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.getVersion()"], ["void", "com.hazelcast.internal.serialization.impl.ObjectDataOutputStream.setVersion(com.hazelcast.version.Version)"], ["int", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.getStreamPosition()"], ["int", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.getIndex()"], ["boolean", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.isNull()"], ["int", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.getLen()"], ["boolean", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.isEmpty()"], ["boolean", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.isNullOrEmpty()"], ["boolean", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.isLeaf()"], ["boolean", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.isAny()"], ["int", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.getFactoryId()"], ["int", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.getClassId()"], ["boolean", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.isMultiPosition()"], ["com.hazelcast.nio.serialization.FieldType", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableSinglePosition.getType()"], ["boolean", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableMultiPosition.isMultiPosition()"], ["com.hazelcast.nio.serialization.FieldType", "com.hazelcast.internal.serialization.impl.PortablePositionFactory$PortableMultiPosition.getType()"], ["int", "com.hazelcast.internal.serialization.impl.FactoryIdHelper.getFactoryId(java.lang.String, int)"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager$StorageTask.run()"], ["com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader", "com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader(java.lang.String, com.hazelcast.config.NearCachePreloaderConfig, com.hazelcast.monitor.impl.NearCacheStatsImpl, com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader.destroy()"], ["void", "com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader.loadKeys(com.hazelcast.internal.adapter.DataStructureAdapter<java.lang.Object, ?>)"], ["void", "com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader.storeKeys(java.util.Iterator<K>)"], ["com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader$FileFormat[]", "com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader$FileFormat.values()"], ["com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader$FileFormat", "com.hazelcast.internal.nearcache.impl.preloader.NearCachePreloader$FileFormat.valueOf(java.lang.String)"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher(com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher.init(com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher.process(com.hazelcast.spi.InternalCompletableFuture, java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler>)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher.fetchMetadata(java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler>)"], ["com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator", "com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator(java.lang.String, int, int, com.hazelcast.core.IFunction<com.hazelcast.spi.EventRegistration, java.lang.Boolean>, com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator.destroy(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator.shutdown()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator.reset()"], ["com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue", "com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator$1.createNew(java.lang.Object)"], ["java.util.concurrent.atomic.AtomicLongArray", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator$1.createNew(java.lang.Object)"], ["com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler(com.hazelcast.logging.ILogger, java.lang.String, java.lang.String, com.hazelcast.internal.nearcache.NearCache, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.internal.nearcache.impl.invalidation.MinimalPartitionService)"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.getMetaDataContainer(int)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.handle(com.hazelcast.nio.serialization.Data, java.lang.String, java.util.UUID, long)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.handle(java.util.Collection<com.hazelcast.nio.serialization.Data>, java.util.Collection<java.lang.String>, java.util.Collection<java.util.UUID>, java.util.Collection<java.lang.Long>)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.getName()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.updateLastKnownStaleSequence(com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer, int)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.checkOrRepairUuid(int, java.util.UUID)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.checkOrRepairSequence(int, long, boolean)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.toString()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.initUuid(int, java.util.UUID)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler.initSequence(int, long)"], ["com.hazelcast.internal.nearcache.impl.invalidation.NonStopInvalidator", "com.hazelcast.internal.nearcache.impl.invalidation.NonStopInvalidator(java.lang.String, com.hazelcast.core.IFunction<com.hazelcast.spi.EventRegistration, java.lang.Boolean>, com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.internal.nearcache.impl.invalidation.Invalidator", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidator(java.lang.String, com.hazelcast.core.IFunction<com.hazelcast.spi.EventRegistration, java.lang.Boolean>, com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidator.invalidateKey(com.hazelcast.nio.serialization.Data, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidator.invalidateAllKeys(java.lang.String, java.lang.String)"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidator.getMetaDataGenerator()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidator.resetPartitionMetaData(java.lang.String, int)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidator.destroy(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidator.reset()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidator.shutdown()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator$2.stateChanged(com.hazelcast.core.LifecycleEvent)"], ["com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask(com.hazelcast.spi.properties.HazelcastProperties, com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher, com.hazelcast.spi.TaskScheduler, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.internal.nearcache.impl.invalidation.MinimalPartitionService, java.lang.String, com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask.run()"], ["<K, V> com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask.registerAndGetHandler(java.lang.String, com.hazelcast.internal.nearcache.NearCache<K, V>)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask.deregisterHandler(java.lang.String)"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask.getMetaDataFetcher()"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler>", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask.getHandlers()"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask.toString()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher$ResultHolder.populate(java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>, java.util.Collection<java.util.Map$Entry<java.lang.String, java.util.List<java.util.Map$Entry<java.lang.Integer, java.lang.Long>>>>)"], ["java.util.Collection<java.util.Map$Entry<java.lang.String, java.util.List<java.util.Map$Entry<java.lang.Integer, java.lang.Long>>>>", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher$ResultHolder.getNamePartitionSequenceList()"], ["java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataFetcher$ResultHolder.getPartitionUuidList()"], ["com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation", "com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation()"], ["com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation", "com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation(com.hazelcast.nio.serialization.Data, java.lang.String, java.lang.String, java.util.UUID, long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation.getKey()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation.toString()"], ["int", "com.hazelcast.internal.nearcache.impl.invalidation.SingleNearCacheInvalidation.getId()"], ["java.util.UUID", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator$2.createNew(java.lang.Object)"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetector$1.isStaleRead(java.lang.Object, com.hazelcast.internal.nearcache.NearCacheRecord)"], ["int", "com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetector$1.getPartitionId(java.lang.Object)"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer", "com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetector$1.getMetaDataContainer(int)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetector$1.toString()"], ["com.hazelcast.internal.nearcache.impl.invalidation.Invalidation", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation()"], ["com.hazelcast.internal.nearcache.impl.invalidation.Invalidation", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation(java.lang.String)"], ["com.hazelcast.internal.nearcache.impl.invalidation.Invalidation", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation(java.lang.String, java.lang.String, java.util.UUID, long)"], ["java.util.UUID", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.getPartitionUuid()"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.getSourceUuid()"], ["long", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.getSequence()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.getKey()"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.getName()"], ["com.hazelcast.core.Member", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.getMember()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.getEventType()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.getFactoryId()"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.Invalidation.toString()"], ["com.hazelcast.internal.nearcache.impl.invalidation.BatchNearCacheInvalidation", "com.hazelcast.internal.nearcache.impl.invalidation.BatchNearCacheInvalidation()"], ["com.hazelcast.internal.nearcache.impl.invalidation.BatchNearCacheInvalidation", "com.hazelcast.internal.nearcache.impl.invalidation.BatchNearCacheInvalidation(java.lang.String, java.util.List<com.hazelcast.internal.nearcache.impl.invalidation.Invalidation>)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.BatchNearCacheInvalidation.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.BatchNearCacheInvalidation.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.BatchNearCacheInvalidation.toString()"], ["int", "com.hazelcast.internal.nearcache.impl.invalidation.BatchNearCacheInvalidation.getId()"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator(int)"], ["long", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.currentSequence(java.lang.String, int)"], ["long", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.nextSequence(java.lang.String, int)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.setCurrentSequence(java.lang.String, int, long)"], ["java.util.UUID", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.getOrCreateUuid(int)"], ["java.util.UUID", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.getUuidOrNull(int)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.setUuid(int, java.util.UUID)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.removeUuidAndSequence(int)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.destroyMetaDataFor(java.lang.String)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.regenerateUuid(int)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.resetSequence(java.lang.String, int)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, java.util.concurrent.atomic.AtomicLongArray>", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataGenerator.getSequenceGenerators()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.BatchInvalidator$BatchInvalidationEventSender.run()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask$1.run()"], ["java.lang.Boolean", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationUtils$TrueFilter.apply(com.hazelcast.spi.EventRegistration)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationUtils$TrueFilter.apply(java.lang.Object)"], ["com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask$HandlerConstructor", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask$HandlerConstructor(com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask, com.hazelcast.internal.nearcache.NearCache)"], ["com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask$HandlerConstructor.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask$HandlerConstructor.createNew(java.lang.Object)"], ["com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue()"], ["int", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.size()"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.offer(T)"], ["T", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.poll()"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.tryAcquire()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.release()"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.add(T)"], ["T", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.remove()"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.remove(java.lang.Object)"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.addAll(java.util.Collection<? extends T>)"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.removeAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.retainAll(java.util.Collection<?>)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue.clear()"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetectorImpl.isStaleRead(java.lang.Object, com.hazelcast.internal.nearcache.NearCacheRecord)"], ["int", "com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetectorImpl.getPartitionId(java.lang.Object)"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer", "com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetectorImpl.getMetaDataContainer(int)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetectorImpl.toString()"], ["com.hazelcast.internal.nearcache.impl.invalidation.AbstractBaseNearCacheInvalidationListener", "com.hazelcast.internal.nearcache.impl.invalidation.AbstractBaseNearCacheInvalidationListener(java.lang.String, long)"], ["com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer()"], ["java.util.UUID", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.getUuid()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.setUuid(java.util.UUID)"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.casUuid(java.util.UUID, java.util.UUID)"], ["long", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.getSequence()"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.setSequence(long)"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.casSequence(long, long)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.resetSequence()"], ["long", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.getStaleSequence()"], ["boolean", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.casStaleSequence(long, long)"], ["void", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.resetStaleSequence()"], ["long", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.addAndGetMissedSequenceCount(long)"], ["long", "com.hazelcast.internal.nearcache.impl.invalidation.MetaDataContainer.getMissedSequenceCount()"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager$PreloadTask.run()"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCache$ExpirationTask.run()"], ["com.hazelcast.internal.nearcache.impl.store.NearCacheDataRecordStore", "com.hazelcast.internal.nearcache.impl.store.NearCacheDataRecordStore(java.lang.String, com.hazelcast.config.NearCacheConfig, com.hazelcast.spi.serialization.SerializationService, java.lang.ClassLoader)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.store.NearCacheDataRecordStore.selectToSave(java.lang.Object...)"], ["com.hazelcast.internal.nearcache.impl.store.NearCacheObjectRecordStore", "com.hazelcast.internal.nearcache.impl.store.NearCacheObjectRecordStore(java.lang.String, com.hazelcast.config.NearCacheConfig, com.hazelcast.spi.serialization.SerializationService, java.lang.ClassLoader)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.store.NearCacheObjectRecordStore.selectToSave(java.lang.Object...)"], ["com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore(com.hazelcast.config.NearCacheConfig, com.hazelcast.spi.serialization.SerializationService, java.lang.ClassLoader)"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.initialize()"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.setStaleReadDetector(com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetector)"], ["com.hazelcast.internal.nearcache.impl.invalidation.StaleReadDetector", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.getStaleReadDetector()"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.onEvict(KS, R, boolean)"], ["V", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.get(K)"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.put(K, com.hazelcast.nio.serialization.Data, V)"], ["boolean", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.remove(K)"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.clear()"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.destroy()"], ["com.hazelcast.monitor.NearCacheStats", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.getNearCacheStats()"], ["int", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.size()"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.doEvictionIfRequired()"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.doEviction()"], ["long", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.tryReserveForUpdate(K, com.hazelcast.nio.serialization.Data)"], ["V", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.tryPublishReserved(K, V, long, boolean)"], ["void", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore.onEvict(java.lang.Object, com.hazelcast.internal.eviction.Evictable, boolean)"], ["<C extends com.hazelcast.internal.eviction.EvictionCandidate<K, V>> boolean", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap.tryEvict(C, com.hazelcast.internal.eviction.EvictionListener<K, V>)"], ["java.lang.Iterable<com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap<K, V>.NearCacheEvictableSamplingEntry>", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap.sample(int)"], ["com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore$ReserveForUpdateFunction", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore$ReserveForUpdateFunction(com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore, com.hazelcast.nio.serialization.Data)"], ["R", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore$ReserveForUpdateFunction.apply(K)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.store.AbstractNearCacheRecordStore$ReserveForUpdateFunction.apply(java.lang.Object)"], ["R", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore.getRecord(K)"], ["void", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore.onEvict(K, R, boolean)"], ["void", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore.doExpiration()"], ["void", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore.loadKeys(com.hazelcast.internal.adapter.DataStructureAdapter<java.lang.Object, ?>)"], ["void", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore.storeKeys()"], ["void", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore.destroy()"], ["void", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore.onEvict(java.lang.Object, com.hazelcast.internal.eviction.Evictable, boolean)"], ["R", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore$1.apply(K, R)"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.store.BaseHeapNearCacheRecordStore$1.apply(java.lang.Object, java.lang.Object)"], ["K", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap$NearCacheEvictableSamplingEntry.getAccessor()"], ["V", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap$NearCacheEvictableSamplingEntry.getEvictable()"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap$NearCacheEvictableSamplingEntry.getKey()"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap$NearCacheEvictableSamplingEntry.getValue()"], ["long", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap$NearCacheEvictableSamplingEntry.getCreationTime()"], ["long", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap$NearCacheEvictableSamplingEntry.getLastAccessTime()"], ["long", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap$NearCacheEvictableSamplingEntry.getAccessHit()"], ["com.hazelcast.internal.eviction.Evictable", "com.hazelcast.internal.nearcache.impl.store.HeapNearCacheRecordMap$NearCacheEvictableSamplingEntry.getEvictable()"], ["com.hazelcast.internal.nearcache.impl.DefaultNearCache", "com.hazelcast.internal.nearcache.impl.DefaultNearCache(java.lang.String, com.hazelcast.config.NearCacheConfig, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.spi.TaskScheduler, java.lang.ClassLoader)"], ["com.hazelcast.internal.nearcache.impl.DefaultNearCache", "com.hazelcast.internal.nearcache.impl.DefaultNearCache(java.lang.String, com.hazelcast.config.NearCacheConfig, com.hazelcast.internal.nearcache.NearCacheRecordStore<K, V>, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.spi.TaskScheduler, java.lang.ClassLoader)"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.initialize()"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.getName()"], ["V", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.get(K)"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.put(K, com.hazelcast.nio.serialization.Data, V)"], ["boolean", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.remove(K)"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.clear()"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.destroy()"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.getInMemoryFormat()"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.getPreloaderConfig()"], ["com.hazelcast.monitor.NearCacheStats", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.getNearCacheStats()"], ["boolean", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.isSerializeKeys()"], ["java.lang.Object", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.selectToSave(java.lang.Object...)"], ["int", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.size()"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.preload(com.hazelcast.internal.adapter.DataStructureAdapter<java.lang.Object, ?>)"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.storeKeys()"], ["boolean", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.isPreloadDone()"], ["<T> T", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.unwrap(java.lang.Class<T>)"], ["long", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.tryReserveForUpdate(K, com.hazelcast.nio.serialization.Data)"], ["V", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.tryPublishReserved(K, V, long, boolean)"], ["com.hazelcast.internal.nearcache.NearCacheRecordStore<K, V>", "com.hazelcast.internal.nearcache.impl.DefaultNearCache.getNearCacheRecordStore()"], ["com.hazelcast.internal.nearcache.impl.record.NearCacheObjectRecord", "com.hazelcast.internal.nearcache.impl.record.NearCacheObjectRecord(V, long, long)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.record.NearCacheObjectRecord.toString()"], ["com.hazelcast.internal.nearcache.impl.record.NearCacheDataRecord", "com.hazelcast.internal.nearcache.impl.record.NearCacheDataRecord(com.hazelcast.nio.serialization.Data, long, long)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.record.NearCacheDataRecord.toString()"], ["com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord(V, long, long)"], ["V", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.getValue()"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.setValue(V)"], ["long", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.getExpirationTime()"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.setExpirationTime(long)"], ["long", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.getCreationTime()"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.setCreationTime(long)"], ["long", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.getLastAccessTime()"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.setAccessTime(long)"], ["int", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.getAccessHit()"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.setAccessHit(int)"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.incrementAccessHit()"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.resetAccessHit()"], ["boolean", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.isExpiredAt(long)"], ["boolean", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.isIdleAt(long, long)"], ["long", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.getRecordState()"], ["boolean", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.casRecordState(long, long)"], ["int", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.getPartitionId()"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.setPartitionId(int)"], ["long", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.getInvalidationSequence()"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.setInvalidationSequence(long)"], ["void", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.setUuid(java.util.UUID)"], ["boolean", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.hasSameUuid(java.util.UUID)"], ["java.lang.String", "com.hazelcast.internal.nearcache.impl.record.AbstractNearCacheRecord.toString()"], ["com.hazelcast.internal.nearcache.impl.maxsize.EntryCountNearCacheEvictionChecker", "com.hazelcast.internal.nearcache.impl.maxsize.EntryCountNearCacheEvictionChecker(int, com.hazelcast.internal.nearcache.impl.SampleableNearCacheRecordMap)"], ["boolean", "com.hazelcast.internal.nearcache.impl.maxsize.EntryCountNearCacheEvictionChecker.isEvictionRequired()"], ["com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.spi.TaskScheduler, java.lang.ClassLoader)"], ["<K, V> com.hazelcast.internal.nearcache.NearCache<K, V>", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager.getNearCache(java.lang.String)"], ["<K, V> com.hazelcast.internal.nearcache.NearCache<K, V>", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager.getOrCreateNearCache(java.lang.String, com.hazelcast.config.NearCacheConfig)"], ["<K, V> com.hazelcast.internal.nearcache.NearCache<K, V>", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager.getOrCreateNearCache(java.lang.String, com.hazelcast.config.NearCacheConfig, com.hazelcast.internal.adapter.DataStructureAdapter)"], ["boolean", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager.clearNearCache(java.lang.String)"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager.clearAllNearCaches()"], ["boolean", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager.destroyNearCache(java.lang.String)"], ["void", "com.hazelcast.internal.nearcache.impl.DefaultNearCacheManager.destroyAllNearCaches()"], ["com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook", "com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook()"], ["int", "com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook.createFactory()"], ["int", "com.hazelcast.internal.ascii.TextCommandConstants.getMonthSeconds()"], ["com.hazelcast.internal.ascii.NoOpCommand", "com.hazelcast.internal.ascii.NoOpCommand(byte[])"], ["boolean", "com.hazelcast.internal.ascii.NoOpCommand.readFrom(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.NoOpCommand.writeTo(java.nio.ByteBuffer)"], ["java.lang.String", "com.hazelcast.internal.ascii.NoOpCommand.toString()"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl$ResponseThreadRunnable.sendResponse(com.hazelcast.internal.ascii.TextCommand)"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl$ResponseThreadRunnable.run()"], ["com.hazelcast.internal.ascii.NoOpCommandProcessor", "com.hazelcast.internal.ascii.NoOpCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.NoOpCommandProcessor.handle(com.hazelcast.internal.ascii.NoOpCommand)"], ["void", "com.hazelcast.internal.ascii.NoOpCommandProcessor.handleRejection(com.hazelcast.internal.ascii.NoOpCommand)"], ["void", "com.hazelcast.internal.ascii.NoOpCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.NoOpCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.VersionCommandProcessor", "com.hazelcast.internal.ascii.memcache.VersionCommandProcessor(com.hazelcast.internal.ascii.TextCommandServiceImpl)"], ["void", "com.hazelcast.internal.ascii.memcache.VersionCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.VersionCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.VersionCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.VersionCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.VersionCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.VersionCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.DeleteCommand", "com.hazelcast.internal.ascii.memcache.DeleteCommand(java.lang.String, int, boolean)"], ["boolean", "com.hazelcast.internal.ascii.memcache.DeleteCommand.readFrom(java.nio.ByteBuffer)"], ["void", "com.hazelcast.internal.ascii.memcache.DeleteCommand.setResponse(byte[])"], ["boolean", "com.hazelcast.internal.ascii.memcache.DeleteCommand.writeTo(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.DeleteCommand.shouldReply()"], ["int", "com.hazelcast.internal.ascii.memcache.DeleteCommand.getExpiration()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.DeleteCommand.getKey()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.DeleteCommand.toString()"], ["com.hazelcast.internal.ascii.memcache.StatsCommand", "com.hazelcast.internal.ascii.memcache.StatsCommand()"], ["boolean", "com.hazelcast.internal.ascii.memcache.StatsCommand.readFrom(java.nio.ByteBuffer)"], ["void", "com.hazelcast.internal.ascii.memcache.StatsCommand.setResponse(com.hazelcast.internal.ascii.memcache.Stats)"], ["boolean", "com.hazelcast.internal.ascii.memcache.StatsCommand.writeTo(java.nio.ByteBuffer)"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.StatsCommand.toString()"], ["com.hazelcast.internal.ascii.memcache.IncrementCommandParser", "com.hazelcast.internal.ascii.memcache.IncrementCommandParser(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType)"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.memcache.IncrementCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.memcache.MapNameAndKeyPair", "com.hazelcast.internal.ascii.memcache.MemcacheUtils.parseMemcacheKey(java.lang.String)"], ["com.hazelcast.internal.ascii.memcache.MemcacheEntry", "com.hazelcast.internal.ascii.memcache.MemcacheEntry(java.lang.String, byte[], int)"], ["com.hazelcast.internal.ascii.memcache.MemcacheEntry", "com.hazelcast.internal.ascii.memcache.MemcacheEntry()"], ["void", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["java.nio.ByteBuffer", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.toNewBuffer()"], ["int", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.getFlag()"], ["byte[]", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.getBytes()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.getKey()"], ["byte[]", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.getValue()"], ["boolean", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.hashCode()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.toString()"], ["int", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.getFactoryId()"], ["int", "com.hazelcast.internal.ascii.memcache.MemcacheEntry.getId()"], ["boolean", "com.hazelcast.internal.ascii.memcache.VersionCommand.writeTo(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.VersionCommand.readFrom(java.nio.ByteBuffer)"], ["com.hazelcast.internal.ascii.memcache.SimpleCommandParser", "com.hazelcast.internal.ascii.memcache.SimpleCommandParser(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType)"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.memcache.SimpleCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.memcache.StatsCommandProcessor", "com.hazelcast.internal.ascii.memcache.StatsCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.memcache.StatsCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.StatsCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.StatsCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.StatsCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.StatsCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.StatsCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.DeleteCommandParser", "com.hazelcast.internal.ascii.memcache.DeleteCommandParser()"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.memcache.DeleteCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.memcache.SimpleCommand", "com.hazelcast.internal.ascii.memcache.SimpleCommand(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType)"], ["boolean", "com.hazelcast.internal.ascii.memcache.SimpleCommand.readFrom(java.nio.ByteBuffer)"], ["void", "com.hazelcast.internal.ascii.memcache.SimpleCommand.setResponse(byte[])"], ["boolean", "com.hazelcast.internal.ascii.memcache.SimpleCommand.writeTo(java.nio.ByteBuffer)"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.SimpleCommand.toString()"], ["com.hazelcast.internal.ascii.memcache.GetCommandParser", "com.hazelcast.internal.ascii.memcache.GetCommandParser()"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.memcache.GetCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.memcache.IncrementCommandProcessor", "com.hazelcast.internal.ascii.memcache.IncrementCommandProcessor(com.hazelcast.internal.ascii.TextCommandServiceImpl)"], ["void", "com.hazelcast.internal.ascii.memcache.IncrementCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.IncrementCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.IncrementCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.IncrementCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.IncrementCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.IncrementCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.SetCommandProcessor", "com.hazelcast.internal.ascii.memcache.SetCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.memcache.SetCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.SetCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.SetCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.SetCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.SetCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.SetCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.Stats", "com.hazelcast.internal.ascii.memcache.Stats()"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setDeleteHits(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setWaitingRequests(int)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setThreads(int)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setUptime(int)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setCmdGet(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setCmdSet(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setCmdTouch(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setGetHits(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setGetMisses(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setDeleteMisses(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setIncrHits(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setIncrMisses(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setDecrHits(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setDecrMisses(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setBytes(long)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setCurrConnections(int)"], ["void", "com.hazelcast.internal.ascii.memcache.Stats.setTotalConnections(int)"], ["int", "com.hazelcast.internal.ascii.memcache.Stats.getWaitingRequests()"], ["int", "com.hazelcast.internal.ascii.memcache.Stats.getThreads()"], ["int", "com.hazelcast.internal.ascii.memcache.Stats.getUptime()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getCmdGet()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getCmdSet()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getCmdTouch()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getGetHits()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getGetMisses()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getDeleteHits()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getDeleteMisses()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getIncrHits()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getIncrMisses()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getDecrHits()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getDecrMisses()"], ["long", "com.hazelcast.internal.ascii.memcache.Stats.getBytes()"], ["int", "com.hazelcast.internal.ascii.memcache.Stats.getCurrConnections()"], ["int", "com.hazelcast.internal.ascii.memcache.Stats.getTotalConnections()"], ["com.hazelcast.internal.ascii.memcache.SetCommand", "com.hazelcast.internal.ascii.memcache.SetCommand(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType, java.lang.String, int, int, int, boolean)"], ["boolean", "com.hazelcast.internal.ascii.memcache.SetCommand.readFrom(java.nio.ByteBuffer)"], ["void", "com.hazelcast.internal.ascii.memcache.SetCommand.setResponse(byte[])"], ["boolean", "com.hazelcast.internal.ascii.memcache.SetCommand.writeTo(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.SetCommand.shouldReply()"], ["int", "com.hazelcast.internal.ascii.memcache.SetCommand.getExpiration()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.SetCommand.getKey()"], ["byte[]", "com.hazelcast.internal.ascii.memcache.SetCommand.getValue()"], ["int", "com.hazelcast.internal.ascii.memcache.SetCommand.getFlag()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.SetCommand.toString()"], ["com.hazelcast.internal.ascii.memcache.TouchCommand", "com.hazelcast.internal.ascii.memcache.TouchCommand(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType, java.lang.String, int, boolean)"], ["boolean", "com.hazelcast.internal.ascii.memcache.TouchCommand.writeTo(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.TouchCommand.readFrom(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.TouchCommand.shouldReply()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.TouchCommand.getKey()"], ["int", "com.hazelcast.internal.ascii.memcache.TouchCommand.getExpiration()"], ["void", "com.hazelcast.internal.ascii.memcache.TouchCommand.setResponse(byte[])"], ["com.hazelcast.internal.ascii.memcache.GetCommand", "com.hazelcast.internal.ascii.memcache.GetCommand(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType, java.lang.String)"], ["com.hazelcast.internal.ascii.memcache.GetCommand", "com.hazelcast.internal.ascii.memcache.GetCommand(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.GetCommand.getKey()"], ["boolean", "com.hazelcast.internal.ascii.memcache.GetCommand.readFrom(java.nio.ByteBuffer)"], ["void", "com.hazelcast.internal.ascii.memcache.GetCommand.setValue(com.hazelcast.internal.ascii.memcache.MemcacheEntry)"], ["boolean", "com.hazelcast.internal.ascii.memcache.GetCommand.writeTo(java.nio.ByteBuffer)"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.GetCommand.toString()"], ["com.hazelcast.internal.ascii.memcache.ErrorCommand", "com.hazelcast.internal.ascii.memcache.ErrorCommand(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType)"], ["com.hazelcast.internal.ascii.memcache.ErrorCommand", "com.hazelcast.internal.ascii.memcache.ErrorCommand(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType, java.lang.String)"], ["boolean", "com.hazelcast.internal.ascii.memcache.ErrorCommand.readFrom(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.ErrorCommand.writeTo(java.nio.ByteBuffer)"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.ErrorCommand.toString()"], ["com.hazelcast.internal.ascii.memcache.SimpleCommandProcessor", "com.hazelcast.internal.ascii.memcache.SimpleCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.memcache.SimpleCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.SimpleCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.SimpleCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.SimpleCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.SimpleCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.SimpleCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.EntryConverter", "com.hazelcast.internal.ascii.memcache.EntryConverter(com.hazelcast.internal.ascii.TextCommandService, com.hazelcast.logging.ILogger)"], ["com.hazelcast.internal.ascii.memcache.MemcacheEntry", "com.hazelcast.internal.ascii.memcache.EntryConverter.toEntry(java.lang.String, java.lang.Object)"], ["byte[]", "com.hazelcast.internal.ascii.memcache.MemcacheCommandProcessor.longToByteArray(long)"], ["int", "com.hazelcast.internal.ascii.memcache.MemcacheCommandProcessor.byteArrayToLong(byte[])"], ["byte[]", "com.hazelcast.internal.ascii.memcache.MemcacheCommandProcessor.concatenate(byte[], byte[])"], ["com.hazelcast.internal.ascii.memcache.DeleteCommandProcessor", "com.hazelcast.internal.ascii.memcache.DeleteCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.memcache.DeleteCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.DeleteCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.DeleteCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.DeleteCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.DeleteCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.DeleteCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.MapNameAndKeyPair", "com.hazelcast.internal.ascii.memcache.MapNameAndKeyPair(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.MapNameAndKeyPair.getMapName()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.MapNameAndKeyPair.getKey()"], ["com.hazelcast.internal.ascii.memcache.BulkGetCommandProcessor", "com.hazelcast.internal.ascii.memcache.BulkGetCommandProcessor(com.hazelcast.internal.ascii.TextCommandService, com.hazelcast.internal.ascii.memcache.EntryConverter)"], ["void", "com.hazelcast.internal.ascii.memcache.BulkGetCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.BulkGetCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.BulkGetCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.BulkGetCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.BulkGetCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.BulkGetCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.TouchCommandParser", "com.hazelcast.internal.ascii.memcache.TouchCommandParser(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType)"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.memcache.TouchCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.memcache.ErrorCommandProcessor", "com.hazelcast.internal.ascii.memcache.ErrorCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.memcache.ErrorCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.ErrorCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.ErrorCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.ErrorCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.ErrorCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.ErrorCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.IncrementCommand", "com.hazelcast.internal.ascii.memcache.IncrementCommand(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType, java.lang.String, int, boolean)"], ["boolean", "com.hazelcast.internal.ascii.memcache.IncrementCommand.writeTo(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.IncrementCommand.readFrom(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.IncrementCommand.shouldReply()"], ["java.lang.String", "com.hazelcast.internal.ascii.memcache.IncrementCommand.getKey()"], ["int", "com.hazelcast.internal.ascii.memcache.IncrementCommand.getValue()"], ["void", "com.hazelcast.internal.ascii.memcache.IncrementCommand.setResponse(byte[])"], ["boolean", "com.hazelcast.internal.ascii.memcache.BulkGetCommand.readFrom(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.memcache.BulkGetCommand.writeTo(java.nio.ByteBuffer)"], ["void", "com.hazelcast.internal.ascii.memcache.BulkGetCommand.setResult(java.util.Collection<com.hazelcast.internal.ascii.memcache.MemcacheEntry>)"], ["com.hazelcast.internal.ascii.memcache.TouchCommandProcessor", "com.hazelcast.internal.ascii.memcache.TouchCommandProcessor(com.hazelcast.internal.ascii.TextCommandServiceImpl)"], ["void", "com.hazelcast.internal.ascii.memcache.TouchCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.TouchCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.TouchCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.TouchCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.TouchCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.TouchCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.SetCommandParser", "com.hazelcast.internal.ascii.memcache.SetCommandParser(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType)"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.memcache.SetCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.memcache.GetCommandProcessor", "com.hazelcast.internal.ascii.memcache.GetCommandProcessor(com.hazelcast.internal.ascii.TextCommandService, com.hazelcast.internal.ascii.memcache.EntryConverter)"], ["void", "com.hazelcast.internal.ascii.memcache.GetCommandProcessor.handle(com.hazelcast.internal.ascii.memcache.GetCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.GetCommandProcessor.handleRejection(com.hazelcast.internal.ascii.memcache.GetCommand)"], ["void", "com.hazelcast.internal.ascii.memcache.GetCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.memcache.GetCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.TextCommandServiceImpl", "com.hazelcast.internal.ascii.TextCommandServiceImpl(com.hazelcast.instance.Node)"], ["com.hazelcast.instance.Node", "com.hazelcast.internal.ascii.TextCommandServiceImpl.getNode()"], ["byte[]", "com.hazelcast.internal.ascii.TextCommandServiceImpl.toByteArray(java.lang.Object)"], ["com.hazelcast.internal.ascii.memcache.Stats", "com.hazelcast.internal.ascii.TextCommandServiceImpl.getStats()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementDeleteHitCount(int)"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementDeleteMissCount()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementGetHitCount()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementGetMissCount()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementSetCount()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementIncHitCount()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementIncMissCount()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementDecrHitCount()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementDecrMissCount()"], ["long", "com.hazelcast.internal.ascii.TextCommandServiceImpl.incrementTouchCount()"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl.processRequest(com.hazelcast.internal.ascii.TextCommand)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextCommandServiceImpl.get(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.internal.ascii.TextCommandServiceImpl.getAll(java.lang.String, java.util.Set<java.lang.String>)"], ["int", "com.hazelcast.internal.ascii.TextCommandServiceImpl.getAdjustedTTLSeconds(int)"], ["byte[]", "com.hazelcast.internal.ascii.TextCommandServiceImpl.getByteArray(java.lang.String, java.lang.String)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextCommandServiceImpl.put(java.lang.String, java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextCommandServiceImpl.put(java.lang.String, java.lang.String, java.lang.Object, int)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextCommandServiceImpl.putIfAbsent(java.lang.String, java.lang.String, java.lang.Object, int)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextCommandServiceImpl.replace(java.lang.String, java.lang.String, java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl.lock(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl.unlock(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl.deleteAll(java.lang.String)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextCommandServiceImpl.delete(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.internal.ascii.TextCommandServiceImpl.offer(java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextCommandServiceImpl.poll(java.lang.String, int)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextCommandServiceImpl.poll(java.lang.String)"], ["int", "com.hazelcast.internal.ascii.TextCommandServiceImpl.size(java.lang.String)"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl.sendResponse(com.hazelcast.internal.ascii.TextCommand)"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl.stop()"], ["void", "com.hazelcast.internal.ascii.TextCommandServiceImpl$CommandExecutor.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.internal.ascii.rest.RestValue", "com.hazelcast.internal.ascii.rest.RestValue()"], ["com.hazelcast.internal.ascii.rest.RestValue", "com.hazelcast.internal.ascii.rest.RestValue(byte[], byte[])"], ["void", "com.hazelcast.internal.ascii.rest.RestValue.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.ascii.rest.RestValue.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["byte[]", "com.hazelcast.internal.ascii.rest.RestValue.getContentType()"], ["void", "com.hazelcast.internal.ascii.rest.RestValue.setContentType(byte[])"], ["byte[]", "com.hazelcast.internal.ascii.rest.RestValue.getValue()"], ["void", "com.hazelcast.internal.ascii.rest.RestValue.setValue(byte[])"], ["java.lang.String", "com.hazelcast.internal.ascii.rest.RestValue.toString()"], ["int", "com.hazelcast.internal.ascii.rest.RestValue.getFactoryId()"], ["int", "com.hazelcast.internal.ascii.rest.RestValue.getId()"], ["com.hazelcast.internal.ascii.rest.HttpPostCommand", "com.hazelcast.internal.ascii.rest.HttpPostCommand(com.hazelcast.nio.ascii.TextDecoder, java.lang.String)"], ["boolean", "com.hazelcast.internal.ascii.rest.HttpPostCommand.readFrom(java.nio.ByteBuffer)"], ["byte[]", "com.hazelcast.internal.ascii.rest.HttpPostCommand.getData()"], ["com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor$ResponseType[]", "com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor$ResponseType.values()"], ["com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor$ResponseType", "com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor$ResponseType.valueOf(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor$ResponseType.toString()"], ["com.hazelcast.internal.ascii.rest.HttpHeadCommandParser", "com.hazelcast.internal.ascii.rest.HttpHeadCommandParser()"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.rest.HttpHeadCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.rest.HttpCommand", "com.hazelcast.internal.ascii.rest.HttpCommand(com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType, java.lang.String)"], ["boolean", "com.hazelcast.internal.ascii.rest.HttpCommand.shouldReply()"], ["java.lang.String", "com.hazelcast.internal.ascii.rest.HttpCommand.getURI()"], ["void", "com.hazelcast.internal.ascii.rest.HttpCommand.send204()"], ["void", "com.hazelcast.internal.ascii.rest.HttpCommand.send400()"], ["void", "com.hazelcast.internal.ascii.rest.HttpCommand.setResponse(byte[])"], ["void", "com.hazelcast.internal.ascii.rest.HttpCommand.send200()"], ["void", "com.hazelcast.internal.ascii.rest.HttpCommand.setResponse(java.util.Map<java.lang.String, java.lang.Object>)"], ["void", "com.hazelcast.internal.ascii.rest.HttpCommand.setResponse(byte[], byte[])"], ["boolean", "com.hazelcast.internal.ascii.rest.HttpCommand.writeTo(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.rest.HttpCommand.readFrom(java.nio.ByteBuffer)"], ["java.lang.String", "com.hazelcast.internal.ascii.rest.HttpCommand.toString()"], ["com.hazelcast.internal.ascii.rest.HttpDeleteCommandParser", "com.hazelcast.internal.ascii.rest.HttpDeleteCommandParser()"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.rest.HttpDeleteCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.rest.HttpHeadCommandProcessor", "com.hazelcast.internal.ascii.rest.HttpHeadCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.rest.HttpHeadCommandProcessor.handle(com.hazelcast.internal.ascii.rest.HttpHeadCommand)"], ["void", "com.hazelcast.internal.ascii.rest.HttpHeadCommandProcessor.handleRejection(com.hazelcast.internal.ascii.rest.HttpHeadCommand)"], ["void", "com.hazelcast.internal.ascii.rest.HttpHeadCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.rest.HttpHeadCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.rest.HttpDeleteCommand", "com.hazelcast.internal.ascii.rest.HttpDeleteCommand(java.lang.String)"], ["com.hazelcast.internal.ascii.rest.HttpGetCommandParser", "com.hazelcast.internal.ascii.rest.HttpGetCommandParser()"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.rest.HttpGetCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.internal.ascii.rest.HttpGetCommandProcessor", "com.hazelcast.internal.ascii.rest.HttpGetCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.rest.HttpGetCommandProcessor.handle(com.hazelcast.internal.ascii.rest.HttpGetCommand)"], ["void", "com.hazelcast.internal.ascii.rest.HttpGetCommandProcessor.handleRejection(com.hazelcast.internal.ascii.rest.HttpGetCommand)"], ["void", "com.hazelcast.internal.ascii.rest.HttpGetCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.rest.HttpGetCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.rest.HttpDeleteCommandProcessor", "com.hazelcast.internal.ascii.rest.HttpDeleteCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.rest.HttpDeleteCommandProcessor.handle(com.hazelcast.internal.ascii.rest.HttpDeleteCommand)"], ["void", "com.hazelcast.internal.ascii.rest.HttpDeleteCommandProcessor.handleRejection(com.hazelcast.internal.ascii.rest.HttpDeleteCommand)"], ["void", "com.hazelcast.internal.ascii.rest.HttpDeleteCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.rest.HttpDeleteCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor", "com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor(com.hazelcast.internal.ascii.TextCommandService)"], ["void", "com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor.handle(com.hazelcast.internal.ascii.rest.HttpPostCommand)"], ["void", "com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor.handleRejection(com.hazelcast.internal.ascii.rest.HttpPostCommand)"], ["void", "com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor.handleRejection(java.lang.Object)"], ["void", "com.hazelcast.internal.ascii.rest.HttpPostCommandProcessor.handle(java.lang.Object)"], ["com.hazelcast.internal.ascii.rest.HttpGetCommand", "com.hazelcast.internal.ascii.rest.HttpGetCommand(java.lang.String)"], ["com.hazelcast.internal.ascii.rest.HttpHeadCommand", "com.hazelcast.internal.ascii.rest.HttpHeadCommand(java.lang.String)"], ["boolean", "com.hazelcast.internal.ascii.rest.HttpHeadCommand.readFrom(java.nio.ByteBuffer)"], ["com.hazelcast.internal.ascii.rest.HttpPostCommandParser", "com.hazelcast.internal.ascii.rest.HttpPostCommandParser()"], ["com.hazelcast.internal.ascii.TextCommand", "com.hazelcast.internal.ascii.rest.HttpPostCommandParser.parser(com.hazelcast.nio.ascii.TextDecoder, java.lang.String, int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType[]", "com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType.values()"], ["com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType", "com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType.valueOf(java.lang.String)"], ["byte", "com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType.getValue()"], ["boolean", "com.hazelcast.internal.ascii.TextCommandServiceImpl$ResponseThreadRunnable$1.readFrom(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.internal.ascii.TextCommandServiceImpl$ResponseThreadRunnable$1.writeTo(java.nio.ByteBuffer)"], ["com.hazelcast.internal.ascii.TextCommandConstants$TextCommandType", "com.hazelcast.internal.ascii.AbstractTextCommand.getType()"], ["com.hazelcast.nio.ascii.TextDecoder", "com.hazelcast.internal.ascii.AbstractTextCommand.getDecoder()"], ["com.hazelcast.nio.ascii.TextEncoder", "com.hazelcast.internal.ascii.AbstractTextCommand.getEncoder()"], ["long", "com.hazelcast.internal.ascii.AbstractTextCommand.getRequestId()"], ["void", "com.hazelcast.internal.ascii.AbstractTextCommand.init(com.hazelcast.nio.ascii.TextDecoder, long)"], ["boolean", "com.hazelcast.internal.ascii.AbstractTextCommand.isUrgent()"], ["boolean", "com.hazelcast.internal.ascii.AbstractTextCommand.shouldReply()"], ["java.lang.String", "com.hazelcast.internal.ascii.AbstractTextCommand.toString()"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$LifecycleListenerImpl.stateChanged(com.hazelcast.core.LifecycleEvent)"], ["com.hazelcast.internal.diagnostics.StoreLatencyPlugin$ServiceProbes", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.diagnostics.HealthMonitor$HealthMonitorThread.run()"], ["com.hazelcast.internal.diagnostics.StoreLatencyPlugin$InstanceProbes", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin$2.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.diagnostics.MetricsPlugin$ProbeRendererImpl.renderLong(java.lang.String, long)"], ["void", "com.hazelcast.internal.diagnostics.MetricsPlugin$ProbeRendererImpl.renderDouble(java.lang.String, double)"], ["void", "com.hazelcast.internal.diagnostics.MetricsPlugin$ProbeRendererImpl.renderException(java.lang.String, java.lang.Exception)"], ["void", "com.hazelcast.internal.diagnostics.MetricsPlugin$ProbeRendererImpl.renderNoValue(java.lang.String)"], ["void", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin$LatencyProbeImpl.recordValue(long)"], ["void", "com.hazelcast.internal.diagnostics.OperationThreadSamplerPlugin$SampleThread.run()"], ["java.lang.Thread", "com.hazelcast.internal.diagnostics.Diagnostics$DiagnosticSchedulerThreadFactory.newThread(java.lang.Runnable)"], ["com.hazelcast.internal.diagnostics.MemberHazelcastInstanceInfoPlugin", "com.hazelcast.internal.diagnostics.MemberHazelcastInstanceInfoPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["long", "com.hazelcast.internal.diagnostics.MemberHazelcastInstanceInfoPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.MemberHazelcastInstanceInfoPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.MemberHazelcastInstanceInfoPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$ConnectionListenerImpl.connectionAdded(com.hazelcast.nio.Connection)"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$ConnectionListenerImpl.connectionRemoved(com.hazelcast.nio.Connection)"], ["com.hazelcast.internal.diagnostics.OverloadedConnectionsPlugin", "com.hazelcast.internal.diagnostics.OverloadedConnectionsPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["long", "com.hazelcast.internal.diagnostics.OverloadedConnectionsPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.OverloadedConnectionsPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.OverloadedConnectionsPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.diagnostics.InvocationPlugin", "com.hazelcast.internal.diagnostics.InvocationPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["long", "com.hazelcast.internal.diagnostics.InvocationPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.InvocationPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.InvocationPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["void", "com.hazelcast.internal.diagnostics.HealthMonitor$HealthMetrics.update()"], ["java.lang.String", "com.hazelcast.internal.diagnostics.HealthMonitor$HealthMetrics.render()"], ["com.hazelcast.internal.diagnostics.BuildInfoPlugin", "com.hazelcast.internal.diagnostics.BuildInfoPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.internal.diagnostics.BuildInfoPlugin", "com.hazelcast.internal.diagnostics.BuildInfoPlugin(com.hazelcast.logging.ILogger)"], ["long", "com.hazelcast.internal.diagnostics.BuildInfoPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.BuildInfoPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.BuildInfoPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.diagnostics.ConfigPropertiesPlugin", "com.hazelcast.internal.diagnostics.ConfigPropertiesPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.internal.diagnostics.ConfigPropertiesPlugin", "com.hazelcast.internal.diagnostics.ConfigPropertiesPlugin(com.hazelcast.logging.ILogger, com.hazelcast.spi.properties.HazelcastProperties)"], ["void", "com.hazelcast.internal.diagnostics.ConfigPropertiesPlugin.onStart()"], ["long", "com.hazelcast.internal.diagnostics.ConfigPropertiesPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.ConfigPropertiesPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["void", "com.hazelcast.internal.diagnostics.Diagnostics$WritePluginTask.run()"], ["com.hazelcast.internal.diagnostics.DiagnosticsPlugin", "com.hazelcast.internal.diagnostics.DiagnosticsPlugin(com.hazelcast.logging.ILogger)"], ["com.hazelcast.internal.diagnostics.PendingInvocationsPlugin", "com.hazelcast.internal.diagnostics.PendingInvocationsPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["long", "com.hazelcast.internal.diagnostics.PendingInvocationsPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.PendingInvocationsPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.PendingInvocationsPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.diagnostics.Diagnostics", "com.hazelcast.internal.diagnostics.Diagnostics(java.lang.String, com.hazelcast.logging.ILogger, java.lang.String, com.hazelcast.spi.properties.HazelcastProperties)"], ["java.io.File", "com.hazelcast.internal.diagnostics.Diagnostics.currentFile()"], ["<P extends com.hazelcast.internal.diagnostics.DiagnosticsPlugin> P", "com.hazelcast.internal.diagnostics.Diagnostics.getPlugin(java.lang.Class<P>)"], ["void", "com.hazelcast.internal.diagnostics.Diagnostics.register(com.hazelcast.internal.diagnostics.DiagnosticsPlugin)"], ["void", "com.hazelcast.internal.diagnostics.Diagnostics.start()"], ["void", "com.hazelcast.internal.diagnostics.Diagnostics.shutdown()"], ["com.hazelcast.internal.diagnostics.SystemLogPlugin", "com.hazelcast.internal.diagnostics.SystemLogPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.internal.diagnostics.SystemLogPlugin", "com.hazelcast.internal.diagnostics.SystemLogPlugin(com.hazelcast.spi.properties.HazelcastProperties, com.hazelcast.nio.ConnectionListenable, com.hazelcast.core.HazelcastInstance, com.hazelcast.logging.ILogger)"], ["com.hazelcast.internal.diagnostics.SystemLogPlugin", "com.hazelcast.internal.diagnostics.SystemLogPlugin(com.hazelcast.spi.properties.HazelcastProperties, com.hazelcast.nio.ConnectionListenable, com.hazelcast.core.HazelcastInstance, com.hazelcast.logging.ILogger, com.hazelcast.instance.NodeExtension)"], ["long", "com.hazelcast.internal.diagnostics.SystemLogPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogFile.write(com.hazelcast.internal.diagnostics.DiagnosticsPlugin)"], ["com.hazelcast.internal.diagnostics.EventQueuePlugin", "com.hazelcast.internal.diagnostics.EventQueuePlugin(com.hazelcast.spi.impl.NodeEngineImpl, com.hazelcast.util.executor.StripedExecutor)"], ["com.hazelcast.internal.diagnostics.EventQueuePlugin", "com.hazelcast.internal.diagnostics.EventQueuePlugin(com.hazelcast.logging.ILogger, com.hazelcast.util.executor.StripedExecutor, com.hazelcast.spi.properties.HazelcastProperties)"], ["long", "com.hazelcast.internal.diagnostics.EventQueuePlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.EventQueuePlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.EventQueuePlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl()"], ["com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl(boolean)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeSectionKeyValue(java.lang.String, long, java.lang.String, long)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeSectionKeyValue(java.lang.String, long, java.lang.String, double)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeSectionKeyValue(java.lang.String, long, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.startSection(java.lang.String)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.startSection(java.lang.String, long)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.endSection()"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeEntry(java.lang.String)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeKeyValueEntry(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeKeyValueEntry(java.lang.String, double)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeKeyValueEntry(java.lang.String, long)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeKeyValueEntry(java.lang.String, boolean)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.writeKeyValueEntryAsDateTime(java.lang.String, long)"], ["void", "com.hazelcast.internal.diagnostics.DiagnosticsLogWriterImpl.init(java.io.PrintWriter)"], ["com.hazelcast.internal.diagnostics.OperationHeartbeatPlugin", "com.hazelcast.internal.diagnostics.OperationHeartbeatPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["long", "com.hazelcast.internal.diagnostics.OperationHeartbeatPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.OperationHeartbeatPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.OperationHeartbeatPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["java.lang.String", "com.hazelcast.internal.diagnostics.OperationDescriptors.toOperationDesc(com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$ClusterVersionListenerImpl.onClusterVersionChange(com.hazelcast.version.Version)"], ["com.hazelcast.internal.diagnostics.StoreLatencyPlugin", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.internal.diagnostics.StoreLatencyPlugin", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin(com.hazelcast.logging.ILogger, com.hazelcast.spi.properties.HazelcastProperties)"], ["long", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["long", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin.count(java.lang.String, java.lang.String, java.lang.String)"], ["com.hazelcast.internal.diagnostics.StoreLatencyPlugin$LatencyProbe", "com.hazelcast.internal.diagnostics.StoreLatencyPlugin.newProbe(java.lang.String, java.lang.String, java.lang.String)"], ["com.hazelcast.internal.diagnostics.MetricsPlugin", "com.hazelcast.internal.diagnostics.MetricsPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.internal.diagnostics.MetricsPlugin", "com.hazelcast.internal.diagnostics.MetricsPlugin(com.hazelcast.logging.ILogger, com.hazelcast.internal.metrics.MetricsRegistry, com.hazelcast.spi.properties.HazelcastProperties)"], ["void", "com.hazelcast.internal.diagnostics.MetricsPlugin.onStart()"], ["long", "com.hazelcast.internal.diagnostics.MetricsPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.MetricsPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.diagnostics.MemberHeartbeatPlugin", "com.hazelcast.internal.diagnostics.MemberHeartbeatPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["long", "com.hazelcast.internal.diagnostics.MemberHeartbeatPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.MemberHeartbeatPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.MemberHeartbeatPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$MembershipListenerImpl.memberAdded(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$MembershipListenerImpl.memberRemoved(com.hazelcast.core.MembershipEvent)"], ["com.hazelcast.internal.diagnostics.OperationThreadSamplerPlugin", "com.hazelcast.internal.diagnostics.OperationThreadSamplerPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["long", "com.hazelcast.internal.diagnostics.OperationThreadSamplerPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.OperationThreadSamplerPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.OperationThreadSamplerPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.diagnostics.SlowOperationPlugin", "com.hazelcast.internal.diagnostics.SlowOperationPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["long", "com.hazelcast.internal.diagnostics.SlowOperationPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.SlowOperationPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.SlowOperationPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.diagnostics.HealthMonitor", "com.hazelcast.internal.diagnostics.HealthMonitor(com.hazelcast.instance.Node)"], ["com.hazelcast.internal.diagnostics.HealthMonitor", "com.hazelcast.internal.diagnostics.HealthMonitor.start()"], ["void", "com.hazelcast.internal.diagnostics.HealthMonitor.stop()"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$MigrationListenerImpl.migrationStarted(com.hazelcast.core.MigrationEvent)"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$MigrationListenerImpl.migrationCompleted(com.hazelcast.core.MigrationEvent)"], ["void", "com.hazelcast.internal.diagnostics.SystemLogPlugin$MigrationListenerImpl.migrationFailed(com.hazelcast.core.MigrationEvent)"], ["com.hazelcast.internal.diagnostics.NetworkingImbalancePlugin", "com.hazelcast.internal.diagnostics.NetworkingImbalancePlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.internal.diagnostics.NetworkingImbalancePlugin", "com.hazelcast.internal.diagnostics.NetworkingImbalancePlugin(com.hazelcast.spi.properties.HazelcastProperties, com.hazelcast.internal.networking.EventLoopGroup, com.hazelcast.logging.ILogger)"], ["long", "com.hazelcast.internal.diagnostics.NetworkingImbalancePlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.NetworkingImbalancePlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.NetworkingImbalancePlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.diagnostics.HealthMonitorLevel[]", "com.hazelcast.internal.diagnostics.HealthMonitorLevel.values()"], ["com.hazelcast.internal.diagnostics.HealthMonitorLevel", "com.hazelcast.internal.diagnostics.HealthMonitorLevel.valueOf(java.lang.String)"], ["com.hazelcast.internal.diagnostics.SystemPropertiesPlugin", "com.hazelcast.internal.diagnostics.SystemPropertiesPlugin(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.internal.diagnostics.SystemPropertiesPlugin", "com.hazelcast.internal.diagnostics.SystemPropertiesPlugin(com.hazelcast.logging.ILogger)"], ["long", "com.hazelcast.internal.diagnostics.SystemPropertiesPlugin.getPeriodMillis()"], ["void", "com.hazelcast.internal.diagnostics.SystemPropertiesPlugin.onStart()"], ["void", "com.hazelcast.internal.diagnostics.SystemPropertiesPlugin.run(com.hazelcast.internal.diagnostics.DiagnosticsLogWriter)"], ["com.hazelcast.internal.journal.EventJournalDataSerializerHook", "com.hazelcast.internal.journal.EventJournalDataSerializerHook()"], ["int", "com.hazelcast.internal.journal.EventJournalDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.internal.journal.EventJournalDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.journal.EventJournalDataSerializerHook$1.create(int)"], ["com.hazelcast.internal.journal.EventJournalReadOperation", "com.hazelcast.internal.journal.EventJournalReadOperation()"], ["com.hazelcast.internal.journal.EventJournalReadOperation", "com.hazelcast.internal.journal.EventJournalReadOperation(java.lang.String, long, int, int)"], ["void", "com.hazelcast.internal.journal.EventJournalReadOperation.beforeRun()"], ["boolean", "com.hazelcast.internal.journal.EventJournalReadOperation.shouldWait()"], ["void", "com.hazelcast.internal.journal.EventJournalReadOperation.run()"], ["java.lang.Object", "com.hazelcast.internal.journal.EventJournalReadOperation.getResponse()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.internal.journal.EventJournalReadOperation.getWaitKey()"], ["void", "com.hazelcast.internal.journal.EventJournalReadOperation.onWaitExpire()"], ["com.hazelcast.internal.journal.EventJournalInitialSubscriberState", "com.hazelcast.internal.journal.EventJournalInitialSubscriberState()"], ["com.hazelcast.internal.journal.EventJournalInitialSubscriberState", "com.hazelcast.internal.journal.EventJournalInitialSubscriberState(long, long)"], ["long", "com.hazelcast.internal.journal.EventJournalInitialSubscriberState.getOldestSequence()"], ["long", "com.hazelcast.internal.journal.EventJournalInitialSubscriberState.getNewestSequence()"], ["int", "com.hazelcast.internal.journal.EventJournalInitialSubscriberState.getFactoryId()"], ["int", "com.hazelcast.internal.journal.EventJournalInitialSubscriberState.getId()"], ["void", "com.hazelcast.internal.journal.EventJournalInitialSubscriberState.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.journal.EventJournalInitialSubscriberState.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ThreadLocalClassCache.onStartDeserialization()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ThreadLocalClassCache.onFinishDeserialization()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ThreadLocalClassCache.store(java.lang.String, com.hazelcast.internal.usercodedeployment.impl.ClassSource)"], ["com.hazelcast.internal.usercodedeployment.impl.ClassSource", "com.hazelcast.internal.usercodedeployment.impl.ThreadLocalClassCache.getFromCache(java.lang.String)"], ["com.hazelcast.internal.usercodedeployment.impl.ClassSource", "com.hazelcast.internal.usercodedeployment.impl.ClassSource(java.lang.ClassLoader, com.hazelcast.internal.usercodedeployment.impl.ClassLocator)"], ["com.hazelcast.internal.usercodedeployment.impl.filter.ClassBlacklistFilter", "com.hazelcast.internal.usercodedeployment.impl.filter.ClassBlacklistFilter(java.lang.String...)"], ["boolean", "com.hazelcast.internal.usercodedeployment.impl.filter.ClassBlacklistFilter.accept(java.lang.String)"], ["boolean", "com.hazelcast.internal.usercodedeployment.impl.filter.ClassBlacklistFilter.accept(java.lang.Object)"], ["com.hazelcast.internal.usercodedeployment.impl.filter.ClassWhitelistFilter", "com.hazelcast.internal.usercodedeployment.impl.filter.ClassWhitelistFilter(java.lang.String...)"], ["boolean", "com.hazelcast.internal.usercodedeployment.impl.filter.ClassWhitelistFilter.accept(java.lang.String)"], ["boolean", "com.hazelcast.internal.usercodedeployment.impl.filter.ClassWhitelistFilter.accept(java.lang.Object)"], ["com.hazelcast.internal.usercodedeployment.impl.filter.MemberAttributeFilter", "com.hazelcast.internal.usercodedeployment.impl.filter.MemberAttributeFilter(java.lang.String)"], ["boolean", "com.hazelcast.internal.usercodedeployment.impl.filter.MemberAttributeFilter.accept(com.hazelcast.core.Member)"], ["boolean", "com.hazelcast.internal.usercodedeployment.impl.filter.MemberAttributeFilter.accept(java.lang.Object)"], ["com.hazelcast.internal.usercodedeployment.impl.ClassData", "com.hazelcast.internal.usercodedeployment.impl.ClassData()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ClassData.setInnerClassDefinitions(java.util.Map<java.lang.String, byte[]>)"], ["int", "com.hazelcast.internal.usercodedeployment.impl.ClassData.getFactoryId()"], ["int", "com.hazelcast.internal.usercodedeployment.impl.ClassData.getId()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ClassData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ClassData.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.internal.usercodedeployment.impl.ClassLocator", "com.hazelcast.internal.usercodedeployment.impl.ClassLocator(java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.internal.usercodedeployment.impl.ClassSource>, java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.internal.usercodedeployment.impl.ClassSource>, java.lang.ClassLoader, com.hazelcast.internal.util.filter.Filter<java.lang.String>, com.hazelcast.internal.util.filter.Filter<com.hazelcast.core.Member>, com.hazelcast.config.UserCodeDeploymentConfig$ClassCacheMode, com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ClassLocator.onStartDeserialization()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ClassLocator.onFinishDeserialization()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.ClassLocator.defineClassFromClient(java.lang.String, byte[])"], ["com.hazelcast.internal.usercodedeployment.impl.ClassloadingMutexProvider", "com.hazelcast.internal.usercodedeployment.impl.ClassloadingMutexProvider()"], ["java.io.Closeable", "com.hazelcast.internal.usercodedeployment.impl.ClassloadingMutexProvider.getMutexForClass(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook()"], ["int", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.internal.usercodedeployment.impl.ClassSource", "com.hazelcast.internal.usercodedeployment.impl.ClassLocator$1.run()"], ["java.lang.Object", "com.hazelcast.internal.usercodedeployment.impl.ClassLocator$1.run()"], ["com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation", "com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation(java.util.Collection<java.util.Map$Entry<java.lang.String, byte[]>>)"], ["com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation", "com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation.run()"], ["java.lang.String", "com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation.getServiceName()"], ["int", "com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation.getFactoryId()"], ["int", "com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation.getId()"], ["com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation", "com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation(java.lang.String)"], ["com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation", "com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation()"], ["com.hazelcast.internal.usercodedeployment.impl.ClassData", "com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation.getResponse()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation.run()"], ["java.lang.String", "com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation.getServiceName()"], ["int", "com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation.getFactoryId()"], ["int", "com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation.getId()"], ["java.lang.Object", "com.hazelcast.internal.usercodedeployment.impl.operation.ClassDataFinderOperation.getResponse()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.internal.usercodedeployment.impl.ClassDataProvider", "com.hazelcast.internal.usercodedeployment.impl.ClassDataProvider(com.hazelcast.config.UserCodeDeploymentConfig$ProviderMode, java.lang.ClassLoader, java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.internal.usercodedeployment.impl.ClassSource>, java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.internal.usercodedeployment.impl.ClassSource>, com.hazelcast.logging.ILogger)"], ["com.hazelcast.internal.usercodedeployment.impl.ClassData", "com.hazelcast.internal.usercodedeployment.impl.ClassDataProvider.getClassDataOrNull(java.lang.String)"], ["com.hazelcast.internal.usercodedeployment.impl.GlobalMutex", "com.hazelcast.internal.usercodedeployment.impl.GlobalMutex()"], ["void", "com.hazelcast.internal.usercodedeployment.impl.GlobalMutex.close()"], ["com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService", "com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService()"], ["void", "com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService.defineClass(java.lang.String, byte[])"], ["com.hazelcast.internal.usercodedeployment.impl.ClassData", "com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService.getClassDataOrNull(java.lang.String)"], ["void", "com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService.reset()"], ["void", "com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService.shutdown(boolean)"], ["com.hazelcast.internal.usercodedeployment.UserCodeDeploymentClassLoader", "com.hazelcast.internal.usercodedeployment.UserCodeDeploymentClassLoader(java.lang.ClassLoader)"], ["void", "com.hazelcast.internal.usercodedeployment.UserCodeDeploymentClassLoader.setUserCodeDeploymentService(com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService)"], ["void", "com.hazelcast.internal.cluster.impl.MembershipManager$2.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.cluster.impl.AbstractJoiner$1.handleException(java.lang.Throwable)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$23.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.cluster.impl.MembershipManager$DecideNewMembersViewTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$15.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl$1.run()"], ["com.hazelcast.internal.cluster.impl.operations.TriggerMemberListPublishOp", "com.hazelcast.internal.cluster.impl.operations.TriggerMemberListPublishOp()"], ["void", "com.hazelcast.internal.cluster.impl.operations.TriggerMemberListPublishOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.TriggerMemberListPublishOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.TriggerMemberListPublishOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.TriggerMemberListPublishOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.MergeClustersOp", "com.hazelcast.internal.cluster.impl.operations.MergeClustersOp()"], ["com.hazelcast.internal.cluster.impl.operations.MergeClustersOp", "com.hazelcast.internal.cluster.impl.operations.MergeClustersOp(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.cluster.impl.operations.MergeClustersOp.run()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.MergeClustersOp.returnsResponse()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MergeClustersOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MergeClustersOp.getFactoryId()"], ["com.hazelcast.internal.cluster.impl.operations.MembersUpdateOp", "com.hazelcast.internal.cluster.impl.operations.MembersUpdateOp()"], ["com.hazelcast.internal.cluster.impl.operations.MembersUpdateOp", "com.hazelcast.internal.cluster.impl.operations.MembersUpdateOp(java.lang.String, com.hazelcast.internal.cluster.impl.MembersView, long, com.hazelcast.internal.partition.PartitionRuntimeState, boolean)"], ["void", "com.hazelcast.internal.cluster.impl.operations.MembersUpdateOp.run()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.MembersUpdateOp.returnsResponse()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MembersUpdateOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MembersUpdateOp.getFactoryId()"], ["com.hazelcast.internal.cluster.impl.operations.MemberAttributeChangedOp", "com.hazelcast.internal.cluster.impl.operations.MemberAttributeChangedOp()"], ["com.hazelcast.internal.cluster.impl.operations.MemberAttributeChangedOp", "com.hazelcast.internal.cluster.impl.operations.MemberAttributeChangedOp(com.hazelcast.cluster.MemberAttributeOperationType, java.lang.String, java.lang.Object)"], ["void", "com.hazelcast.internal.cluster.impl.operations.MemberAttributeChangedOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MemberAttributeChangedOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MemberAttributeChangedOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.MemberAttributeChangedOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.MasterConfirmationOp", "com.hazelcast.internal.cluster.impl.operations.MasterConfirmationOp()"], ["com.hazelcast.internal.cluster.impl.operations.MasterConfirmationOp", "com.hazelcast.internal.cluster.impl.operations.MasterConfirmationOp(com.hazelcast.internal.cluster.impl.MembersViewMetadata, long)"], ["void", "com.hazelcast.internal.cluster.impl.operations.MasterConfirmationOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MasterConfirmationOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MasterConfirmationOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.MasterConfirmationOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.HeartbeatComplaintOp", "com.hazelcast.internal.cluster.impl.operations.HeartbeatComplaintOp()"], ["com.hazelcast.internal.cluster.impl.operations.HeartbeatComplaintOp", "com.hazelcast.internal.cluster.impl.operations.HeartbeatComplaintOp(com.hazelcast.internal.cluster.impl.MembersViewMetadata, com.hazelcast.internal.cluster.impl.MembersViewMetadata)"], ["void", "com.hazelcast.internal.cluster.impl.operations.HeartbeatComplaintOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.HeartbeatComplaintOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.HeartbeatComplaintOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.HeartbeatComplaintOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.FinalizeJoinOp", "com.hazelcast.internal.cluster.impl.operations.FinalizeJoinOp()"], ["com.hazelcast.internal.cluster.impl.operations.FinalizeJoinOp", "com.hazelcast.internal.cluster.impl.operations.FinalizeJoinOp(java.lang.String, com.hazelcast.internal.cluster.impl.MembersView, com.hazelcast.internal.cluster.impl.operations.OnJoinOp, com.hazelcast.internal.cluster.impl.operations.OnJoinOp, long, java.lang.String, long, com.hazelcast.cluster.ClusterState, com.hazelcast.version.Version, com.hazelcast.internal.partition.PartitionRuntimeState)"], ["void", "com.hazelcast.internal.cluster.impl.operations.FinalizeJoinOp.run()"], ["void", "com.hazelcast.internal.cluster.impl.operations.FinalizeJoinOp.afterRun()"], ["int", "com.hazelcast.internal.cluster.impl.operations.FinalizeJoinOp.getId()"], ["void", "com.hazelcast.internal.cluster.impl.operations.FinalizeJoinOp.setTarget(com.hazelcast.nio.Address)"], ["com.hazelcast.internal.cluster.impl.operations.JoinMastershipClaimOp", "com.hazelcast.internal.cluster.impl.operations.JoinMastershipClaimOp()"], ["void", "com.hazelcast.internal.cluster.impl.operations.JoinMastershipClaimOp.run()"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.operations.JoinMastershipClaimOp.getResponse()"], ["int", "com.hazelcast.internal.cluster.impl.operations.JoinMastershipClaimOp.getId()"], ["com.hazelcast.internal.cluster.impl.operations.ExplicitSuspicionOp", "com.hazelcast.internal.cluster.impl.operations.ExplicitSuspicionOp()"], ["com.hazelcast.internal.cluster.impl.operations.ExplicitSuspicionOp", "com.hazelcast.internal.cluster.impl.operations.ExplicitSuspicionOp(com.hazelcast.internal.cluster.impl.MembersViewMetadata)"], ["void", "com.hazelcast.internal.cluster.impl.operations.ExplicitSuspicionOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.ExplicitSuspicionOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.ExplicitSuspicionOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.ExplicitSuspicionOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp", "com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp()"], ["com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp", "com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp(java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp.run()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp.returnsResponse()"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp.getResponse()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.FetchMembersViewOp.getFactoryId()"], ["com.hazelcast.internal.cluster.impl.operations.AuthorizationOp", "com.hazelcast.internal.cluster.impl.operations.AuthorizationOp()"], ["com.hazelcast.internal.cluster.impl.operations.AuthorizationOp", "com.hazelcast.internal.cluster.impl.operations.AuthorizationOp(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.operations.AuthorizationOp.run()"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.operations.AuthorizationOp.getResponse()"], ["int", "com.hazelcast.internal.cluster.impl.operations.AuthorizationOp.getId()"], ["com.hazelcast.internal.cluster.impl.operations.WhoisMasterOp", "com.hazelcast.internal.cluster.impl.operations.WhoisMasterOp()"], ["com.hazelcast.internal.cluster.impl.operations.WhoisMasterOp", "com.hazelcast.internal.cluster.impl.operations.WhoisMasterOp(com.hazelcast.internal.cluster.impl.JoinMessage)"], ["void", "com.hazelcast.internal.cluster.impl.operations.WhoisMasterOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.WhoisMasterOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.WhoisMasterOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.WhoisMasterOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.JoinRequestOp", "com.hazelcast.internal.cluster.impl.operations.JoinRequestOp()"], ["com.hazelcast.internal.cluster.impl.operations.JoinRequestOp", "com.hazelcast.internal.cluster.impl.operations.JoinRequestOp(com.hazelcast.internal.cluster.impl.JoinRequest)"], ["void", "com.hazelcast.internal.cluster.impl.operations.JoinRequestOp.run()"], ["com.hazelcast.internal.cluster.impl.JoinRequest", "com.hazelcast.internal.cluster.impl.operations.JoinRequestOp.getRequest()"], ["int", "com.hazelcast.internal.cluster.impl.operations.JoinRequestOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.JoinRequestOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.JoinRequestOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.MasterResponseOp", "com.hazelcast.internal.cluster.impl.operations.MasterResponseOp()"], ["com.hazelcast.internal.cluster.impl.operations.MasterResponseOp", "com.hazelcast.internal.cluster.impl.operations.MasterResponseOp(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.cluster.impl.operations.MasterResponseOp.run()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.operations.MasterResponseOp.getMasterAddress()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MasterResponseOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.MasterResponseOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.MasterResponseOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.AuthenticationFailureOp", "com.hazelcast.internal.cluster.impl.operations.AuthenticationFailureOp()"], ["void", "com.hazelcast.internal.cluster.impl.operations.AuthenticationFailureOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.AuthenticationFailureOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.AuthenticationFailureOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.AuthenticationFailureOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.ConfigMismatchOp", "com.hazelcast.internal.cluster.impl.operations.ConfigMismatchOp()"], ["com.hazelcast.internal.cluster.impl.operations.ConfigMismatchOp", "com.hazelcast.internal.cluster.impl.operations.ConfigMismatchOp(java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.operations.ConfigMismatchOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.ConfigMismatchOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.ConfigMismatchOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.ConfigMismatchOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.AbstractJoinOperation", "com.hazelcast.internal.cluster.impl.operations.AbstractJoinOperation()"], ["int", "com.hazelcast.internal.cluster.impl.operations.AbstractJoinOperation.getFactoryId()"], ["com.hazelcast.internal.cluster.impl.operations.SplitBrainMergeValidationOp", "com.hazelcast.internal.cluster.impl.operations.SplitBrainMergeValidationOp()"], ["com.hazelcast.internal.cluster.impl.operations.SplitBrainMergeValidationOp", "com.hazelcast.internal.cluster.impl.operations.SplitBrainMergeValidationOp(com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage)"], ["void", "com.hazelcast.internal.cluster.impl.operations.SplitBrainMergeValidationOp.run()"], ["void", "com.hazelcast.internal.cluster.impl.operations.SplitBrainMergeValidationOp.afterRun()"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.operations.SplitBrainMergeValidationOp.getResponse()"], ["int", "com.hazelcast.internal.cluster.impl.operations.SplitBrainMergeValidationOp.getId()"], ["void", "com.hazelcast.internal.cluster.impl.operations.MergeClustersOp$1.run()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.AbstractClusterOperation.returnsResponse()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.operations.AbstractClusterOperation.getServiceName()"], ["int", "com.hazelcast.internal.cluster.impl.operations.AbstractClusterOperation.getFactoryId()"], ["com.hazelcast.internal.cluster.impl.operations.PromoteLiteMemberOp", "com.hazelcast.internal.cluster.impl.operations.PromoteLiteMemberOp()"], ["void", "com.hazelcast.internal.cluster.impl.operations.PromoteLiteMemberOp.run()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.PromoteLiteMemberOp.returnsResponse()"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.operations.PromoteLiteMemberOp.getResponse()"], ["int", "com.hazelcast.internal.cluster.impl.operations.PromoteLiteMemberOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.PromoteLiteMemberOp.getFactoryId()"], ["com.hazelcast.internal.cluster.impl.operations.OnJoinOp", "com.hazelcast.internal.cluster.impl.operations.OnJoinOp()"], ["com.hazelcast.internal.cluster.impl.operations.OnJoinOp", "com.hazelcast.internal.cluster.impl.operations.OnJoinOp(com.hazelcast.spi.Operation...)"], ["void", "com.hazelcast.internal.cluster.impl.operations.OnJoinOp.beforeRun()"], ["void", "com.hazelcast.internal.cluster.impl.operations.OnJoinOp.run()"], ["void", "com.hazelcast.internal.cluster.impl.operations.OnJoinOp.onExecutionFailure(java.lang.Throwable)"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.OnJoinOp.validatesTarget()"], ["int", "com.hazelcast.internal.cluster.impl.operations.OnJoinOp.getId()"], ["void", "com.hazelcast.internal.cluster.impl.operations.OnJoinOp.setTarget(com.hazelcast.nio.Address)"], ["com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp()"], ["com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp(com.hazelcast.internal.cluster.impl.ClusterStateChange, com.hazelcast.nio.Address, java.lang.String, boolean)"], ["void", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp.beforeRun()"], ["void", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp.run()"], ["void", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp.logError(java.lang.Throwable)"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp.onInvocationException(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp.getResponse()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp.getServiceName()"], ["int", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.CommitClusterStateOp.getId()"], ["void", "com.hazelcast.internal.cluster.impl.operations.ShutdownNodeOp$1.run()"], ["com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp", "com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp()"], ["com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp", "com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp(com.hazelcast.nio.Address, java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp.run()"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp.getResponse()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp.getServiceName()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.RollbackClusterStateOp.getId()"], ["com.hazelcast.internal.cluster.impl.operations.TriggerExplicitSuspicionOp", "com.hazelcast.internal.cluster.impl.operations.TriggerExplicitSuspicionOp()"], ["com.hazelcast.internal.cluster.impl.operations.TriggerExplicitSuspicionOp", "com.hazelcast.internal.cluster.impl.operations.TriggerExplicitSuspicionOp(int, com.hazelcast.internal.cluster.impl.MembersViewMetadata)"], ["void", "com.hazelcast.internal.cluster.impl.operations.TriggerExplicitSuspicionOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.TriggerExplicitSuspicionOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.TriggerExplicitSuspicionOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.TriggerExplicitSuspicionOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.BeforeJoinCheckFailureOp", "com.hazelcast.internal.cluster.impl.operations.BeforeJoinCheckFailureOp()"], ["com.hazelcast.internal.cluster.impl.operations.BeforeJoinCheckFailureOp", "com.hazelcast.internal.cluster.impl.operations.BeforeJoinCheckFailureOp(java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.operations.BeforeJoinCheckFailureOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.BeforeJoinCheckFailureOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.BeforeJoinCheckFailureOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.BeforeJoinCheckFailureOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.GroupMismatchOp", "com.hazelcast.internal.cluster.impl.operations.GroupMismatchOp()"], ["void", "com.hazelcast.internal.cluster.impl.operations.GroupMismatchOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.GroupMismatchOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.GroupMismatchOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.GroupMismatchOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp()"], ["com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp(com.hazelcast.internal.cluster.impl.ClusterStateChange, com.hazelcast.nio.Address, java.lang.String, long, int)"], ["void", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp.beforeRun()"], ["void", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp.run()"], ["void", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp.logError(java.lang.Throwable)"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp.onInvocationException(java.lang.Throwable)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp.getServiceName()"], ["int", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.LockClusterStateOp.getId()"], ["com.hazelcast.internal.cluster.impl.operations.ShutdownNodeOp", "com.hazelcast.internal.cluster.impl.operations.ShutdownNodeOp()"], ["void", "com.hazelcast.internal.cluster.impl.operations.ShutdownNodeOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.ShutdownNodeOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.ShutdownNodeOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.ShutdownNodeOp.returnsResponse()"], ["com.hazelcast.internal.cluster.impl.operations.HeartbeatOp", "com.hazelcast.internal.cluster.impl.operations.HeartbeatOp()"], ["com.hazelcast.internal.cluster.impl.operations.HeartbeatOp", "com.hazelcast.internal.cluster.impl.operations.HeartbeatOp(com.hazelcast.internal.cluster.impl.MembersViewMetadata, java.lang.String, long)"], ["void", "com.hazelcast.internal.cluster.impl.operations.HeartbeatOp.run()"], ["int", "com.hazelcast.internal.cluster.impl.operations.HeartbeatOp.getId()"], ["int", "com.hazelcast.internal.cluster.impl.operations.HeartbeatOp.getFactoryId()"], ["boolean", "com.hazelcast.internal.cluster.impl.operations.HeartbeatOp.returnsResponse()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$5.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager$PeriodicPingTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$33.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$33.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.ClusterStateChange", "com.hazelcast.internal.cluster.impl.ClusterStateChange()"], ["com.hazelcast.internal.cluster.impl.ClusterStateChange", "com.hazelcast.internal.cluster.impl.ClusterStateChange(T)"], ["T", "com.hazelcast.internal.cluster.impl.ClusterStateChange.getNewState()"], ["<T> boolean", "com.hazelcast.internal.cluster.impl.ClusterStateChange.isOfType(java.lang.Class<T>)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateChange.validate()"], ["<T> com.hazelcast.internal.cluster.impl.ClusterStateChange<T>", "com.hazelcast.internal.cluster.impl.ClusterStateChange.from(T)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateChange.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateChange.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.ClusterStateChange.toString()"], ["int", "com.hazelcast.internal.cluster.impl.ClusterStateChange.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.ClusterStateChange.getId()"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterStateChange.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.cluster.impl.ClusterStateChange.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$26.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.VersionMismatchException", "com.hazelcast.internal.cluster.impl.VersionMismatchException(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$43.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$43.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$35.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$35.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.JoinMessage", "com.hazelcast.internal.cluster.impl.JoinMessage()"], ["com.hazelcast.internal.cluster.impl.JoinMessage", "com.hazelcast.internal.cluster.impl.JoinMessage(byte, int, com.hazelcast.version.MemberVersion, com.hazelcast.nio.Address, java.lang.String, boolean, com.hazelcast.internal.cluster.impl.ConfigCheck)"], ["com.hazelcast.internal.cluster.impl.JoinMessage", "com.hazelcast.internal.cluster.impl.JoinMessage(byte, int, com.hazelcast.version.MemberVersion, com.hazelcast.nio.Address, java.lang.String, boolean, com.hazelcast.internal.cluster.impl.ConfigCheck, java.util.Collection<com.hazelcast.nio.Address>, int)"], ["byte", "com.hazelcast.internal.cluster.impl.JoinMessage.getPacketVersion()"], ["int", "com.hazelcast.internal.cluster.impl.JoinMessage.getBuildNumber()"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.internal.cluster.impl.JoinMessage.getMemberVersion()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.JoinMessage.getAddress()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.JoinMessage.getUuid()"], ["boolean", "com.hazelcast.internal.cluster.impl.JoinMessage.isLiteMember()"], ["com.hazelcast.internal.cluster.impl.ConfigCheck", "com.hazelcast.internal.cluster.impl.JoinMessage.getConfigCheck()"], ["int", "com.hazelcast.internal.cluster.impl.JoinMessage.getMemberCount()"], ["int", "com.hazelcast.internal.cluster.impl.JoinMessage.getDataMemberCount()"], ["void", "com.hazelcast.internal.cluster.impl.JoinMessage.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.cluster.impl.JoinMessage.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.JoinMessage.toString()"], ["int", "com.hazelcast.internal.cluster.impl.JoinMessage.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.JoinMessage.getId()"], ["void", "com.hazelcast.internal.cluster.impl.MembershipManager$1.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$36.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$36.createNew(java.lang.Object)"], ["com.hazelcast.cluster.ClusterState", "com.hazelcast.internal.cluster.impl.ClusterStateManager.getState()"], ["com.hazelcast.version.Version", "com.hazelcast.internal.cluster.impl.ClusterStateManager.getClusterVersion()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateManager.setClusterVersion(com.hazelcast.version.Version)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateManager.lockClusterState(com.hazelcast.internal.cluster.impl.ClusterStateChange, com.hazelcast.nio.Address, java.lang.String, long, int)"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterStateManager.rollbackClusterState(java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateManager.commitClusterState(com.hazelcast.internal.cluster.impl.ClusterStateChange, com.hazelcast.nio.Address, java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.ClusterStateManager.stateToString()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.ClusterStateManager.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.ClusterTopologyChangedException", "com.hazelcast.internal.cluster.impl.ClusterTopologyChangedException()"], ["com.hazelcast.internal.cluster.impl.ClusterTopologyChangedException", "com.hazelcast.internal.cluster.impl.ClusterTopologyChangedException(java.lang.String)"], ["com.hazelcast.internal.cluster.impl.SplitBrainMulticastListener", "com.hazelcast.internal.cluster.impl.SplitBrainMulticastListener(com.hazelcast.instance.Node, java.util.concurrent.BlockingDeque<com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage>)"], ["void", "com.hazelcast.internal.cluster.impl.SplitBrainMulticastListener.onMessage(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.MembersViewMetadata", "com.hazelcast.internal.cluster.impl.MembersViewMetadata()"], ["com.hazelcast.internal.cluster.impl.MembersViewMetadata", "com.hazelcast.internal.cluster.impl.MembersViewMetadata(com.hazelcast.nio.Address, java.lang.String, com.hazelcast.nio.Address, int)"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.getMemberAddress()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.getMemberUuid()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.getMasterAddress()"], ["int", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.getMemberListVersion()"], ["int", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.getId()"], ["void", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.equals(java.lang.Object)"], ["int", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.hashCode()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.MembersViewMetadata.toString()"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.internal.cluster.impl.MembershipManager.getMember(com.hazelcast.nio.Address)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.internal.cluster.impl.MembershipManager.getMember(java.lang.String)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.internal.cluster.impl.MembershipManager.getMember(com.hazelcast.nio.Address, java.lang.String)"], ["com.hazelcast.internal.cluster.impl.MembersView", "com.hazelcast.internal.cluster.impl.MembershipManager.getMembersView()"], ["int", "com.hazelcast.internal.cluster.impl.MembershipManager.getMemberListVersion()"], ["void", "com.hazelcast.internal.cluster.impl.MembershipManager.sendMemberListToMember(com.hazelcast.nio.Address)"], ["com.hazelcast.internal.cluster.impl.MembersView", "com.hazelcast.internal.cluster.impl.MembershipManager.promoteToDataMember(com.hazelcast.nio.Address, java.lang.String)"], ["boolean", "com.hazelcast.internal.cluster.impl.MembershipManager.verifySplitBrainMergeMemberListVersion(com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterJoinManager.handleJoinRequest(com.hazelcast.internal.cluster.impl.JoinRequest, com.hazelcast.nio.Connection)"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterJoinManager.validateJoinMessage(com.hazelcast.internal.cluster.impl.JoinMessage)"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterJoinManager.sendJoinRequest(com.hazelcast.nio.Address, boolean)"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterJoinManager.setThisMemberAsMaster()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterJoinManager.handleMasterResponse(com.hazelcast.nio.Address, com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterJoinManager.sendMasterQuestion(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterJoinManager.answerWhoisMasterQuestion(com.hazelcast.internal.cluster.impl.JoinMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage$SplitBrainMergeCheckResult", "com.hazelcast.internal.cluster.impl.ClusterJoinManager.shouldMerge(com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage)"], ["com.hazelcast.internal.cluster.impl.NodeMulticastListener", "com.hazelcast.internal.cluster.impl.NodeMulticastListener(com.hazelcast.instance.Node)"], ["void", "com.hazelcast.internal.cluster.impl.NodeMulticastListener.onMessage(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$32.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$32.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$38.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$38.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$41.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$41.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.ClusterServiceImpl", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl(com.hazelcast.instance.Node, com.hazelcast.instance.MemberImpl)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.sendLocalMembershipEvent()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.handleExplicitSuspicion(com.hazelcast.internal.cluster.impl.MembersViewMetadata, com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.handleExplicitSuspicionTrigger(com.hazelcast.nio.Address, int, com.hazelcast.internal.cluster.impl.MembersViewMetadata)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.suspectMember(com.hazelcast.core.Member, java.lang.String, boolean)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.suspectAddressIfNotConnected(com.hazelcast.nio.Address)"], ["com.hazelcast.internal.cluster.impl.MembersView", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.handleMastershipClaim(com.hazelcast.nio.Address, java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.merge(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.reset()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.resetJoinState()"], ["finalizeJoin(com.hazelcast.internal.cluster.impl.MembersView,", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.com.hazelcast.nio.Address, java.lang.String, java.lang.String, java.lang.String, com.hazelcast.cluster.ClusterState, com.hazelcast.version.Version, long, long, com.hazelcast.internal.cluster.impl.operations.OnJoinOp)"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.updateMembers(com.hazelcast.internal.cluster.impl.MembersView, com.hazelcast.nio.Address, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.updateMemberAttribute(java.lang.String, com.hazelcast.cluster.MemberAttributeOperationType, java.lang.String, java.lang.Object)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.connectionAdded(com.hazelcast.nio.Connection)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.connectionRemoved(com.hazelcast.nio.Connection)"], ["com.hazelcast.spi.impl.NodeEngineImpl", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getNodeEngine()"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.isMemberRemovedInNotJoinableState(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.notifyForRemovedMember(com.hazelcast.instance.MemberImpl)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.shrinkMembersRemovedInNotJoinableState(java.util.Collection<java.lang.String>)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getMember(com.hazelcast.nio.Address)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getMember(java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.shutdown(boolean)"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.setMasterAddressToJoin(com.hazelcast.nio.Address)"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getMasterAddress()"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.isMaster()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getThisAddress()"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getLocalMember()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getThisUuid()"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.isJoined()"], ["int", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getSize()"], ["int", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getSize(com.hazelcast.core.MemberSelector)"], ["com.hazelcast.internal.cluster.impl.ClusterClockImpl", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterClock()"], ["long", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterTime()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterId()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.addMembershipListener(com.hazelcast.core.MembershipListener)"], ["boolean", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.removeMembershipListener(java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.dispatchEvent(com.hazelcast.core.MembershipEvent, com.hazelcast.core.MembershipListener)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getMemberListString()"], ["com.hazelcast.cluster.ClusterState", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterState()"], ["<T extends com.hazelcast.transaction.TransactionalObject> T", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.rollbackTransaction(java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.changeClusterState(com.hazelcast.cluster.ClusterState)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.changeClusterState(com.hazelcast.cluster.ClusterState, com.hazelcast.transaction.TransactionOptions)"], ["com.hazelcast.version.Version", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterVersion()"], ["com.hazelcast.hotrestart.HotRestartService", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getHotRestartService()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.changeClusterVersion(com.hazelcast.version.Version)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.changeClusterVersion(com.hazelcast.version.Version, com.hazelcast.transaction.TransactionOptions)"], ["int", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getMemberListJoinVersion()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.shutdown()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.shutdown(com.hazelcast.transaction.TransactionOptions)"], ["com.hazelcast.internal.cluster.impl.MembershipManager", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getMembershipManager()"], ["com.hazelcast.internal.cluster.impl.ClusterStateManager", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterStateManager()"], ["com.hazelcast.internal.cluster.impl.ClusterJoinManager", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterJoinManager()"], ["com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterHeartbeatManager()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.promoteLocalLiteMember()"], ["int", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getMemberListVersion()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.toString()"], ["com.hazelcast.internal.cluster.ClusterClock", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getClusterClock()"], ["com.hazelcast.core.Member", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.getLocalMember()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterServiceImpl.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.JoinRequest", "com.hazelcast.internal.cluster.impl.JoinRequest()"], ["com.hazelcast.internal.cluster.impl.JoinRequest", "com.hazelcast.internal.cluster.impl.JoinRequest(byte, int, com.hazelcast.version.MemberVersion, com.hazelcast.nio.Address, java.lang.String, boolean, com.hazelcast.internal.cluster.impl.ConfigCheck, com.hazelcast.security.Credentials, java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<java.lang.String>)"], ["com.hazelcast.security.Credentials", "com.hazelcast.internal.cluster.impl.JoinRequest.getCredentials()"], ["int", "com.hazelcast.internal.cluster.impl.JoinRequest.getTryCount()"], ["void", "com.hazelcast.internal.cluster.impl.JoinRequest.setTryCount(int)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.internal.cluster.impl.JoinRequest.getAttributes()"], ["com.hazelcast.internal.cluster.MemberInfo", "com.hazelcast.internal.cluster.impl.JoinRequest.toMemberInfo()"], ["void", "com.hazelcast.internal.cluster.impl.JoinRequest.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.cluster.impl.JoinRequest.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.JoinRequest.toString()"], ["int", "com.hazelcast.internal.cluster.impl.JoinRequest.getId()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager$2.run()"], ["com.hazelcast.internal.cluster.impl.MembersView", "com.hazelcast.internal.cluster.impl.MembersView()"], ["com.hazelcast.internal.cluster.impl.MembersView", "com.hazelcast.internal.cluster.impl.MembersView(int, java.util.List<com.hazelcast.internal.cluster.MemberInfo>)"], ["com.hazelcast.internal.cluster.impl.MembersView", "com.hazelcast.internal.cluster.impl.MembersView.createNew(int, java.util.Collection<com.hazelcast.instance.MemberImpl>)"], ["int", "com.hazelcast.internal.cluster.impl.MembersView.size()"], ["int", "com.hazelcast.internal.cluster.impl.MembersView.getVersion()"], ["boolean", "com.hazelcast.internal.cluster.impl.MembersView.containsAddress(com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.internal.cluster.impl.MembersView.containsMember(com.hazelcast.nio.Address, java.lang.String)"], ["com.hazelcast.internal.cluster.MemberInfo", "com.hazelcast.internal.cluster.impl.MembersView.getMember(com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.internal.cluster.impl.MembersView.isLaterThan(com.hazelcast.internal.cluster.impl.MembersView)"], ["int", "com.hazelcast.internal.cluster.impl.MembersView.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.MembersView.getId()"], ["void", "com.hazelcast.internal.cluster.impl.MembersView.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.cluster.impl.MembersView.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.MembersView.toString()"], ["com.hazelcast.internal.cluster.impl.MulticastJoiner", "com.hazelcast.internal.cluster.impl.MulticastJoiner(com.hazelcast.instance.Node)"], ["void", "com.hazelcast.internal.cluster.impl.MulticastJoiner.doJoin()"], ["void", "com.hazelcast.internal.cluster.impl.MulticastJoiner.searchForOtherClusters()"], ["void", "com.hazelcast.internal.cluster.impl.MulticastJoiner.reset()"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.MulticastJoiner.getType()"], ["int", "com.hazelcast.internal.cluster.impl.MulticastJoiner.getSplitBrainMessagesCount()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$34.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$34.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.SplitBrainHandler", "com.hazelcast.internal.cluster.impl.SplitBrainHandler(com.hazelcast.instance.Node)"], ["void", "com.hazelcast.internal.cluster.impl.SplitBrainHandler.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage()"], ["com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage(byte, int, com.hazelcast.version.MemberVersion, com.hazelcast.nio.Address, java.lang.String, boolean, com.hazelcast.internal.cluster.impl.ConfigCheck, java.util.Collection<com.hazelcast.nio.Address>, int, com.hazelcast.version.Version, int)"], ["void", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage.toString()"], ["int", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage.getId()"], ["com.hazelcast.version.Version", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage.getClusterVersion()"], ["int", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage.getMemberListVersion()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.ClusterClockImpl", "com.hazelcast.internal.cluster.impl.ClusterClockImpl(com.hazelcast.logging.ILogger)"], ["long", "com.hazelcast.internal.cluster.impl.ClusterClockImpl.getClusterTime()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterClockImpl.setMasterTime(long)"], ["long", "com.hazelcast.internal.cluster.impl.ClusterClockImpl.getClusterUpTime()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterClockImpl.setClusterStartTime(long)"], ["long", "com.hazelcast.internal.cluster.impl.ClusterClockImpl.getClusterStartTime()"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection$MemberSelectingIterator.hasNext()"], ["M", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection$MemberSelectingIterator.next()"], ["void", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection$MemberSelectingIterator.remove()"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection$MemberSelectingIterator.next()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$42.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$42.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.ConfigMismatchException", "com.hazelcast.internal.cluster.impl.ConfigMismatchException(java.lang.String)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager$3.run()"], ["com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord()"], ["com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord(com.hazelcast.internal.cluster.impl.ClusterStateChange, com.hazelcast.nio.Address, com.hazelcast.nio.Address, java.lang.String, long, int, boolean)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.getKey()"], ["com.hazelcast.spi.Operation", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.newPrepareOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.newCommitOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.newRollbackOperation()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.getTarget()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.ClusterStateTransactionLogRecord.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$31.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.MulticastService", "com.hazelcast.internal.cluster.impl.MulticastService.createMulticastService(com.hazelcast.nio.Address, com.hazelcast.instance.Node, com.hazelcast.config.Config, com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.internal.cluster.impl.MulticastService.addMulticastListener(com.hazelcast.internal.cluster.impl.MulticastListener)"], ["void", "com.hazelcast.internal.cluster.impl.MulticastService.removeMulticastListener(com.hazelcast.internal.cluster.impl.MulticastListener)"], ["void", "com.hazelcast.internal.cluster.impl.MulticastService.stop()"], ["void", "com.hazelcast.internal.cluster.impl.MulticastService.run()"], ["void", "com.hazelcast.internal.cluster.impl.MulticastService.send(com.hazelcast.internal.cluster.impl.JoinMessage)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterMergeTask.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$4.createNew(java.lang.Object)"], ["int", "com.hazelcast.internal.cluster.impl.MemberMap.getMemberIndex(com.hazelcast.instance.MemberImpl)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$39.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$39.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$9.createNew(java.lang.Object)"], ["long", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager.getHeartbeatIntervalMillis()"], ["long", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager.getLastHeartbeatTime(com.hazelcast.core.Member)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager.handleHeartbeat(com.hazelcast.internal.cluster.impl.MembersViewMetadata, java.lang.String, long)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager.handleHeartbeatComplaint(com.hazelcast.internal.cluster.impl.MembersViewMetadata, com.hazelcast.internal.cluster.impl.MembersViewMetadata)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager.onHeartbeat(com.hazelcast.instance.MemberImpl, long)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager.sendMasterConfirmation()"], ["com.hazelcast.internal.cluster.fd.PingFailureDetector", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager.getIcmpFailureDetector()"], ["com.hazelcast.internal.cluster.impl.BindMessage", "com.hazelcast.internal.cluster.impl.BindMessage()"], ["com.hazelcast.internal.cluster.impl.BindMessage", "com.hazelcast.internal.cluster.impl.BindMessage(com.hazelcast.nio.Address, com.hazelcast.nio.Address, boolean)"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.BindMessage.getLocalAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.impl.BindMessage.getTargetAddress()"], ["boolean", "com.hazelcast.internal.cluster.impl.BindMessage.shouldReply()"], ["int", "com.hazelcast.internal.cluster.impl.BindMessage.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.BindMessage.getId()"], ["void", "com.hazelcast.internal.cluster.impl.BindMessage.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.cluster.impl.BindMessage.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.internal.cluster.impl.BindMessage.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$30.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$37.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$37.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.MembershipManager$IncrementMemberListVersion", "com.hazelcast.internal.cluster.impl.MembershipManager$IncrementMemberListVersion(com.hazelcast.internal.cluster.impl.MembershipManager, int)"], ["void", "com.hazelcast.internal.cluster.impl.MembershipManager$IncrementMemberListVersion.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage$SplitBrainMergeCheckResult[]", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage$SplitBrainMergeCheckResult.values()"], ["com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage$SplitBrainMergeCheckResult", "com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage$SplitBrainMergeCheckResult.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$29.createNew(java.lang.Object)"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager$PingTask.run()"], ["com.hazelcast.internal.cluster.impl.ConfigCheck", "com.hazelcast.internal.cluster.impl.ConfigCheck()"], ["com.hazelcast.internal.cluster.impl.ConfigCheck", "com.hazelcast.internal.cluster.impl.ConfigCheck(com.hazelcast.config.Config, java.lang.String)"], ["boolean", "com.hazelcast.internal.cluster.impl.ConfigCheck.isCompatible(com.hazelcast.internal.cluster.impl.ConfigCheck)"], ["boolean", "com.hazelcast.internal.cluster.impl.ConfigCheck.isSameGroup(com.hazelcast.internal.cluster.impl.ConfigCheck)"], ["int", "com.hazelcast.internal.cluster.impl.ConfigCheck.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.impl.ConfigCheck.getId()"], ["void", "com.hazelcast.internal.cluster.impl.ConfigCheck.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.internal.cluster.impl.ConfigCheck.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$40.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$40.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.MemberSelectingCollection", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection(java.util.Collection<M>, com.hazelcast.core.MemberSelector)"], ["int", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.size()"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.isEmpty()"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.contains(java.lang.Object)"], ["java.lang.Object[]", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.toArray()"], ["<T> T[]", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.toArray(T[])"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.add(M)"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.remove(java.lang.Object)"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.containsAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.addAll(java.util.Collection<? extends M>)"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.removeAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.retainAll(java.util.Collection<?>)"], ["void", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.clear()"], ["boolean", "com.hazelcast.internal.cluster.impl.MemberSelectingCollection.add(java.lang.Object)"], ["com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook()"], ["int", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook.createFactory()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager$1.run()"], ["void", "com.hazelcast.internal.cluster.impl.ClusterStateManager$StateManagerExceptionHandler.handleException(java.lang.Throwable)"], ["com.hazelcast.internal.cluster.impl.AbstractJoiner", "com.hazelcast.internal.cluster.impl.AbstractJoiner(com.hazelcast.instance.Node)"], ["long", "com.hazelcast.internal.cluster.impl.AbstractJoiner.getStartTime()"], ["void", "com.hazelcast.internal.cluster.impl.AbstractJoiner.setTargetAddress(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.cluster.impl.AbstractJoiner.blacklist(com.hazelcast.nio.Address, boolean)"], ["boolean", "com.hazelcast.internal.cluster.impl.AbstractJoiner.unblacklist(com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.internal.cluster.impl.AbstractJoiner.isBlacklisted(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.internal.cluster.impl.AbstractJoiner.join()"], ["void", "com.hazelcast.internal.cluster.impl.AbstractJoiner.reset()"], ["com.hazelcast.internal.cluster.impl.DiscoveryJoiner", "com.hazelcast.internal.cluster.impl.DiscoveryJoiner(com.hazelcast.instance.Node, com.hazelcast.spi.discovery.integration.DiscoveryService, boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.MemberInfo", "com.hazelcast.internal.cluster.MemberInfo()"], ["com.hazelcast.internal.cluster.MemberInfo", "com.hazelcast.internal.cluster.MemberInfo(com.hazelcast.nio.Address, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, com.hazelcast.version.MemberVersion)"], ["com.hazelcast.internal.cluster.MemberInfo", "com.hazelcast.internal.cluster.MemberInfo(com.hazelcast.nio.Address, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, boolean, com.hazelcast.version.MemberVersion)"], ["com.hazelcast.internal.cluster.MemberInfo", "com.hazelcast.internal.cluster.MemberInfo(com.hazelcast.nio.Address, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, boolean, com.hazelcast.version.MemberVersion, int)"], ["com.hazelcast.internal.cluster.MemberInfo", "com.hazelcast.internal.cluster.MemberInfo(com.hazelcast.instance.MemberImpl)"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.cluster.MemberInfo.getAddress()"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.internal.cluster.MemberInfo.getVersion()"], ["java.lang.String", "com.hazelcast.internal.cluster.MemberInfo.getUuid()"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.internal.cluster.MemberInfo.getAttributes()"], ["boolean", "com.hazelcast.internal.cluster.MemberInfo.isLiteMember()"], ["int", "com.hazelcast.internal.cluster.MemberInfo.getMemberListJoinVersion()"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.internal.cluster.MemberInfo.toMember()"], ["void", "com.hazelcast.internal.cluster.MemberInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.internal.cluster.MemberInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["int", "com.hazelcast.internal.cluster.MemberInfo.hashCode()"], ["boolean", "com.hazelcast.internal.cluster.MemberInfo.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.internal.cluster.MemberInfo.toString()"], ["int", "com.hazelcast.internal.cluster.MemberInfo.getFactoryId()"], ["int", "com.hazelcast.internal.cluster.MemberInfo.getId()"], ["com.hazelcast.internal.cluster.fd.PhiAccrualFailureDetector", "com.hazelcast.internal.cluster.fd.PhiAccrualFailureDetector(double, int, double, long, long)"], ["boolean", "com.hazelcast.internal.cluster.fd.PhiAccrualFailureDetector.isAlive(long)"], ["void", "com.hazelcast.internal.cluster.fd.PhiAccrualFailureDetector.heartbeat(long)"], ["long", "com.hazelcast.internal.cluster.fd.PhiAccrualFailureDetector.lastHeartbeat()"], ["double", "com.hazelcast.internal.cluster.fd.PhiAccrualFailureDetector.suspicionLevel(long)"], ["com.hazelcast.internal.cluster.fd.DeadlineClusterFailureDetector", "com.hazelcast.internal.cluster.fd.DeadlineClusterFailureDetector(long)"], ["void", "com.hazelcast.internal.cluster.fd.DeadlineClusterFailureDetector.heartbeat(com.hazelcast.core.Member, long)"], ["boolean", "com.hazelcast.internal.cluster.fd.DeadlineClusterFailureDetector.isAlive(com.hazelcast.core.Member, long)"], ["long", "com.hazelcast.internal.cluster.fd.DeadlineClusterFailureDetector.lastHeartbeat(com.hazelcast.core.Member)"], ["double", "com.hazelcast.internal.cluster.fd.DeadlineClusterFailureDetector.suspicionLevel(com.hazelcast.core.Member, long)"], ["void", "com.hazelcast.internal.cluster.fd.DeadlineClusterFailureDetector.remove(com.hazelcast.core.Member)"], ["void", "com.hazelcast.internal.cluster.fd.DeadlineClusterFailureDetector.reset()"], ["com.hazelcast.internal.cluster.fd.FailureDetector", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector$1.createNew(com.hazelcast.core.Member)"], ["java.lang.Object", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector$1.createNew(java.lang.Object)"], ["com.hazelcast.internal.cluster.fd.ClusterFailureDetectorType[]", "com.hazelcast.internal.cluster.fd.ClusterFailureDetectorType.values()"], ["com.hazelcast.internal.cluster.fd.ClusterFailureDetectorType", "com.hazelcast.internal.cluster.fd.ClusterFailureDetectorType.valueOf(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.cluster.fd.ClusterFailureDetectorType.toString()"], ["com.hazelcast.internal.cluster.fd.ClusterFailureDetectorType", "com.hazelcast.internal.cluster.fd.ClusterFailureDetectorType.of(java.lang.String)"], ["com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector(long, long, com.hazelcast.spi.properties.HazelcastProperties)"], ["com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector(long, long, double, int, long)"], ["void", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector.heartbeat(com.hazelcast.core.Member, long)"], ["boolean", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector.isAlive(com.hazelcast.core.Member, long)"], ["long", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector.lastHeartbeat(com.hazelcast.core.Member)"], ["double", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector.suspicionLevel(com.hazelcast.core.Member, long)"], ["void", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector.remove(com.hazelcast.core.Member)"], ["void", "com.hazelcast.internal.cluster.fd.PhiAccrualClusterFailureDetector.reset()"], ["com.hazelcast.internal.cluster.fd.PingFailureDetector", "com.hazelcast.internal.cluster.fd.PingFailureDetector(int)"], ["int", "com.hazelcast.internal.cluster.fd.PingFailureDetector.heartbeat(E)"], ["void", "com.hazelcast.internal.cluster.fd.PingFailureDetector.logAttempt(E)"], ["boolean", "com.hazelcast.internal.cluster.fd.PingFailureDetector.isAlive(E)"], ["void", "com.hazelcast.internal.cluster.fd.PingFailureDetector.remove(E)"], ["void", "com.hazelcast.internal.cluster.fd.PingFailureDetector.reset()"], ["java.util.Random", "com.hazelcast.internal.util.ThreadLocalRandomProvider.get()"], ["java.security.SecureRandom", "com.hazelcast.internal.util.ThreadLocalRandomProvider.getSecure()"], ["com.hazelcast.internal.util.futures.ChainingFuture", "com.hazelcast.internal.util.futures.ChainingFuture(java.util.Iterator<com.hazelcast.core.ICompletableFuture<T>>, java.util.concurrent.Executor, com.hazelcast.internal.util.futures.ChainingFuture$ExceptionHandler, com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.internal.util.futures.ChainingFuture$1.onResponse(T)"], ["void", "com.hazelcast.internal.util.futures.ChainingFuture$1.onFailure(java.lang.Throwable)"], ["long", "com.hazelcast.internal.util.counters.SwCounter$UnsafeSwCounter.inc()"], ["long", "com.hazelcast.internal.util.counters.SwCounter$UnsafeSwCounter.inc(long)"], ["long", "com.hazelcast.internal.util.counters.SwCounter$UnsafeSwCounter.get()"], ["java.lang.String", "com.hazelcast.internal.util.counters.SwCounter$UnsafeSwCounter.toString()"], ["com.hazelcast.internal.util.counters.SwCounter", "com.hazelcast.internal.util.counters.SwCounter.newSwCounter()"], ["com.hazelcast.internal.util.counters.SwCounter", "com.hazelcast.internal.util.counters.SwCounter.newSwCounter(long)"], ["long", "com.hazelcast.internal.util.counters.MwCounter.get()"], ["long", "com.hazelcast.internal.util.counters.MwCounter.inc()"], ["long", "com.hazelcast.internal.util.counters.MwCounter.inc(long)"], ["java.lang.String", "com.hazelcast.internal.util.counters.MwCounter.toString()"], ["com.hazelcast.internal.util.counters.MwCounter", "com.hazelcast.internal.util.counters.MwCounter.newMwCounter()"], ["com.hazelcast.internal.util.counters.MwCounter", "com.hazelcast.internal.util.counters.MwCounter.newMwCounter(long)"], ["long", "com.hazelcast.internal.util.counters.SwCounter$SafeSwCounter.inc()"], ["long", "com.hazelcast.internal.util.counters.SwCounter$SafeSwCounter.inc(long)"], ["long", "com.hazelcast.internal.util.counters.SwCounter$SafeSwCounter.get()"], ["java.lang.String", "com.hazelcast.internal.util.counters.SwCounter$SafeSwCounter.toString()"], ["void", "com.hazelcast.internal.util.InvocationUtil$CallerRunsExecutor.execute(java.lang.Runnable)"], ["com.hazelcast.internal.util.iterator.RestartingMemberIterator", "com.hazelcast.internal.util.iterator.RestartingMemberIterator(com.hazelcast.internal.cluster.ClusterService, int)"], ["boolean", "com.hazelcast.internal.util.iterator.RestartingMemberIterator.hasNext()"], ["com.hazelcast.core.Member", "com.hazelcast.internal.util.iterator.RestartingMemberIterator.next()"], ["void", "com.hazelcast.internal.util.iterator.RestartingMemberIterator.remove()"], ["<T extends java.lang.Throwable> void", "com.hazelcast.internal.util.iterator.RestartingMemberIterator.handle(T)"], ["int", "com.hazelcast.internal.util.iterator.RestartingMemberIterator.getRetryCount()"], ["java.lang.Object", "com.hazelcast.internal.util.iterator.RestartingMemberIterator.next()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.address()"], ["void", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.gotoAddress(long)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.gotoNew()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.size()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.capacity()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.expansionThreshold()"], ["void", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.clear()"], ["boolean", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.trimToSize()"], ["void", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.dispose()"], ["void", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase.migrateTo(com.hazelcast.internal.memory.MemoryAllocator)"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray12byteKeyImpl", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray12byteKeyImpl(int, com.hazelcast.internal.memory.MemoryManager, int, int, float)"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray12byteKeyImpl", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray12byteKeyImpl(int, com.hazelcast.internal.memory.MemoryManager, int)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray12byteKeyImpl.ensure(long, int)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray12byteKeyImpl.get(long, int)"], ["boolean", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray12byteKeyImpl.remove(long, int)"], ["com.hazelcast.internal.util.hashslot.HashSlotCursor12byteKey", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray12byteKeyImpl.cursor()"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl(long, com.hazelcast.internal.memory.MemoryManager, com.hazelcast.internal.memory.MemoryAllocator, int, int, float)"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl(long, com.hazelcast.internal.memory.MemoryManager, int, int, float)"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl(long, com.hazelcast.internal.memory.MemoryManager, int)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl.ensure(long, long)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl.get(long, long)"], ["boolean", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl.remove(long, long)"], ["com.hazelcast.internal.util.hashslot.HashSlotCursor16byteKey", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl.cursor()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl.addrOfKey1At(long)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl.addrOfKey2At(long)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl.addrOfValueAt(long)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyImpl.valueAddr2slotBase(long)"], ["int", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$CursorIntKey2.key2()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$CursorLongKey2.key2()"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$Cursor", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$Cursor(com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase)"], ["void", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$Cursor.reset()"], ["boolean", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$Cursor.advance()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$Cursor.key()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$Cursor.key1()"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArrayBase$Cursor.valueAddress()"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyImpl", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyImpl(long, com.hazelcast.internal.memory.MemoryManager, int, int, float)"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyImpl", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyImpl(long, com.hazelcast.internal.memory.MemoryManager, int)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyImpl.ensure(long)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyImpl.get(long)"], ["boolean", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyImpl.remove(long)"], ["com.hazelcast.internal.util.hashslot.HashSlotCursor8byteKey", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyImpl.cursor()"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyNoValue", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyNoValue(long, com.hazelcast.internal.memory.MemoryManager, int, float)"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyNoValue", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyNoValue(long, com.hazelcast.internal.memory.MemoryManager)"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyNoValue", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyNoValue(long, com.hazelcast.internal.memory.MemoryManager, int, float)"], ["com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyNoValue", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyNoValue(long, com.hazelcast.internal.memory.MemoryManager)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyNoValue.ensure(long, long)"], ["long", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyNoValue.get(long, long)"], ["boolean", "com.hazelcast.internal.util.hashslot.impl.HashSlotArray16byteKeyNoValue.remove(long, long)"], ["long", "com.hazelcast.internal.util.hashslot.impl.CapacityUtil.roundCapacity(long)"], ["int", "com.hazelcast.internal.util.hashslot.impl.CapacityUtil.roundCapacity(int)"], ["int", "com.hazelcast.internal.util.hashslot.impl.CapacityUtil.nextCapacity(int)"], ["long", "com.hazelcast.internal.util.hashslot.impl.CapacityUtil.nextCapacity(long)"], ["com.hazelcast.internal.util.LocalRetryableExecution", "com.hazelcast.internal.util.InvocationUtil.executeLocallyWithRetry(com.hazelcast.spi.NodeEngine, com.hazelcast.spi.Operation)"], ["com.hazelcast.internal.util.Memoizer", "com.hazelcast.internal.util.Memoizer(com.hazelcast.util.ConstructorFunction<K, V>)"], ["V", "com.hazelcast.internal.util.Memoizer.getOrCalculate(K)"], ["void", "com.hazelcast.internal.util.Memoizer.remove(K)"], ["com.hazelcast.internal.util.LockGuard", "com.hazelcast.internal.util.LockGuard(com.hazelcast.nio.Address, java.lang.String, long)"], ["boolean", "com.hazelcast.internal.util.LockGuard.isLocked()"], ["boolean", "com.hazelcast.internal.util.LockGuard.isLeaseExpired()"], ["boolean", "com.hazelcast.internal.util.LockGuard.allowsLock(java.lang.String)"], ["boolean", "com.hazelcast.internal.util.LockGuard.allowsUnlock(java.lang.String)"], ["com.hazelcast.nio.Address", "com.hazelcast.internal.util.LockGuard.getLockOwner()"], ["java.lang.String", "com.hazelcast.internal.util.LockGuard.getLockOwnerId()"], ["long", "com.hazelcast.internal.util.LockGuard.getLockExpiryTime()"], ["long", "com.hazelcast.internal.util.LockGuard.getRemainingTime()"], ["java.lang.String", "com.hazelcast.internal.util.LockGuard.toString()"], ["com.hazelcast.internal.util.filter.AndFilter", "com.hazelcast.internal.util.filter.AndFilter(com.hazelcast.internal.util.filter.Filter<T>, com.hazelcast.internal.util.filter.Filter<T>)"], ["boolean", "com.hazelcast.internal.util.filter.AndFilter.accept(T)"], ["<T> com.hazelcast.internal.util.filter.AlwaysApplyFilter<T>", "com.hazelcast.internal.util.filter.AlwaysApplyFilter.newInstance()"], ["boolean", "com.hazelcast.internal.util.filter.AlwaysApplyFilter.accept(T)"], ["boolean", "com.hazelcast.internal.util.LocalRetryableExecution.awaitCompletion(long, java.util.concurrent.TimeUnit)"], ["java.lang.Object", "com.hazelcast.internal.util.LocalRetryableExecution.getResponse()"], ["void", "com.hazelcast.internal.util.LocalRetryableExecution.run()"], ["void", "com.hazelcast.internal.util.LocalRetryableExecution.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["void", "com.hazelcast.internal.util.InvocationUtil$InvokeOnMemberFunction$InvokeOnMemberTask.run()"], ["boolean", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.isBigEndian()"], ["long", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.getLong(long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.putLong(long, long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.copyMemory(long, long, long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.copyFromByteArray(byte[], int, long, int)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.copyToByteArray(long, byte[], int, int)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.setMemory(long, long, byte)"], ["boolean", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.getBoolean(long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.putBoolean(long, boolean)"], ["byte", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.getByte(long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.putByte(long, byte)"], ["char", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.getChar(long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.putChar(long, char)"], ["short", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.getShort(long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.putShort(long, short)"], ["int", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.getInt(long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.putInt(long, int)"], ["float", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.getFloat(long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.putFloat(long, float)"], ["double", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.getDouble(long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Accessor.putDouble(long, double)"], ["long", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Allocator.allocate(long)"], ["long", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Allocator.reallocate(long, long, long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Allocator.free(long, long)"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager$Allocator.dispose()"], ["boolean", "com.hazelcast.internal.util.collection.LongSetHsa$Cursor.advance()"], ["long", "com.hazelcast.internal.util.collection.LongSetHsa$Cursor.value()"], ["void", "com.hazelcast.internal.util.collection.LongSetHsa$Cursor.reset()"], ["com.hazelcast.internal.util.collection.LongSetHsa", "com.hazelcast.internal.util.collection.LongSetHsa(long, com.hazelcast.internal.memory.MemoryManager)"], ["com.hazelcast.internal.util.collection.LongSetHsa", "com.hazelcast.internal.util.collection.LongSetHsa(long, com.hazelcast.internal.memory.MemoryManager, int, float)"], ["boolean", "com.hazelcast.internal.util.collection.LongSetHsa.add(long)"], ["boolean", "com.hazelcast.internal.util.collection.LongSetHsa.remove(long)"], ["boolean", "com.hazelcast.internal.util.collection.LongSetHsa.contains(long)"], ["long", "com.hazelcast.internal.util.collection.LongSetHsa.size()"], ["boolean", "com.hazelcast.internal.util.collection.LongSetHsa.isEmpty()"], ["void", "com.hazelcast.internal.util.collection.LongSetHsa.clear()"], ["com.hazelcast.internal.util.collection.LongCursor", "com.hazelcast.internal.util.collection.LongSetHsa.cursor()"], ["void", "com.hazelcast.internal.util.collection.LongSetHsa.dispose()"], ["com.hazelcast.internal.util.collection.HsaHeapMemoryManager", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager()"], ["com.hazelcast.internal.memory.MemoryAllocator", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager.getAllocator()"], ["com.hazelcast.internal.memory.MemoryAccessor", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager.getAccessor()"], ["void", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager.dispose()"], ["long", "com.hazelcast.internal.util.collection.HsaHeapMemoryManager.getUsedMemory()"], ["boolean", "com.hazelcast.internal.util.collection.Long2LongMapHsa$Cursor.advance()"], ["long", "com.hazelcast.internal.util.collection.Long2LongMapHsa$Cursor.key()"], ["long", "com.hazelcast.internal.util.collection.Long2LongMapHsa$Cursor.value()"], ["com.hazelcast.internal.util.collection.Long2LongMapHsa", "com.hazelcast.internal.util.collection.Long2LongMapHsa(long, com.hazelcast.internal.memory.MemoryManager)"], ["long", "com.hazelcast.internal.util.collection.Long2LongMapHsa.get(long)"], ["long", "com.hazelcast.internal.util.collection.Long2LongMapHsa.put(long, long)"], ["long", "com.hazelcast.internal.util.collection.Long2LongMapHsa.putIfAbsent(long, long)"], ["void", "com.hazelcast.internal.util.collection.Long2LongMapHsa.putAll(com.hazelcast.internal.util.collection.Long2LongMap)"], ["boolean", "com.hazelcast.internal.util.collection.Long2LongMapHsa.replace(long, long, long)"], ["long", "com.hazelcast.internal.util.collection.Long2LongMapHsa.replace(long, long)"], ["long", "com.hazelcast.internal.util.collection.Long2LongMapHsa.remove(long)"], ["boolean", "com.hazelcast.internal.util.collection.Long2LongMapHsa.remove(long, long)"], ["boolean", "com.hazelcast.internal.util.collection.Long2LongMapHsa.containsKey(long)"], ["long", "com.hazelcast.internal.util.collection.Long2LongMapHsa.size()"], ["boolean", "com.hazelcast.internal.util.collection.Long2LongMapHsa.isEmpty()"], ["void", "com.hazelcast.internal.util.collection.Long2LongMapHsa.clear()"], ["void", "com.hazelcast.internal.util.collection.Long2LongMapHsa.dispose()"], ["com.hazelcast.internal.util.collection.LongLongCursor", "com.hazelcast.internal.util.collection.Long2LongMapHsa.cursor()"], ["void", "com.hazelcast.internal.util.InvocationUtil$SimpleCompletableFuture.setResult(java.lang.Object)"], ["boolean", "com.hazelcast.internal.util.ResultSet$ResultIterator.hasNext()"], ["java.lang.Object", "com.hazelcast.internal.util.ResultSet$ResultIterator.next()"], ["void", "com.hazelcast.internal.util.ResultSet$ResultIterator.remove()"], ["int", "com.hazelcast.internal.util.RuntimeAvailableProcessors.get()"], ["void", "com.hazelcast.internal.util.RuntimeAvailableProcessors.override(int)"], ["void", "com.hazelcast.internal.util.RuntimeAvailableProcessors.overrideDefault(int)"], ["void", "com.hazelcast.internal.util.RuntimeAvailableProcessors.resetOverride()"], ["com.hazelcast.internal.util.sort.LongMemArrayQuickSorter", "com.hazelcast.internal.util.sort.LongMemArrayQuickSorter(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["com.hazelcast.internal.util.sort.IntMemArrayQuickSorter", "com.hazelcast.internal.util.sort.IntMemArrayQuickSorter(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["com.hazelcast.internal.util.sort.MemArrayQuickSorter", "com.hazelcast.internal.util.sort.MemArrayQuickSorter.gotoAddress(long)"], ["com.hazelcast.internal.util.sort.QuickSorter", "com.hazelcast.internal.util.sort.QuickSorter()"], ["void", "com.hazelcast.internal.util.sort.QuickSorter.sort(long, long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.internal.util.ToHeapDataConverter.toHeapData(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.internal.util.BufferingInputStream", "com.hazelcast.internal.util.BufferingInputStream(java.io.InputStream, int)"], ["int", "com.hazelcast.internal.util.BufferingInputStream.read()"], ["int", "com.hazelcast.internal.util.BufferingInputStream.read(byte[], int, int)"], ["void", "com.hazelcast.internal.util.BufferingInputStream.close()"], ["com.hazelcast.internal.util.JavaVersion[]", "com.hazelcast.internal.util.JavaVersion.values()"], ["com.hazelcast.internal.util.JavaVersion", "com.hazelcast.internal.util.JavaVersion.valueOf(java.lang.String)"], ["boolean", "com.hazelcast.internal.util.JavaVersion.isAtLeast(com.hazelcast.internal.util.JavaVersion)"], ["java.lang.Object", "com.hazelcast.internal.util.InvocationUtil$InvokeOnMemberFunction.apply(java.lang.Object)"], ["long", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.addedCount()"], ["long", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.removedCount()"], ["int", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.capacity()"], ["int", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.remainingCapacity()"], ["E", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.peek()"], ["boolean", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.add(E)"], ["E", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.remove()"], ["E", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.element()"], ["boolean", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.isEmpty()"], ["boolean", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.contains(java.lang.Object)"], ["java.lang.Object[]", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.toArray()"], ["<T> T[]", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.toArray(T[])"], ["boolean", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.remove(java.lang.Object)"], ["boolean", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.containsAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.removeAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.retainAll(java.util.Collection<?>)"], ["void", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.clear()"], ["int", "com.hazelcast.internal.util.concurrent.AbstractConcurrentArrayQueue.size()"], ["<E1> com.hazelcast.internal.util.concurrent.ConcurrentConveyor<E1>", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.concurrentConveyor(E1, com.hazelcast.internal.util.concurrent.QueuedPipe<E1>...)"], ["E", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.submitterGoneItem()"], ["int", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.queueCount()"], ["int", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.liveQueueCount()"], ["boolean", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.removeQueue(int)"], ["boolean", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.offer(int, E)"], ["boolean", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.offer(java.util.Queue<E>, E)"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.submit(java.util.Queue<E>, E)"], ["int", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.drainTo(java.util.Collection<? super E>)"], ["int", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.drainTo(int, java.util.Collection<? super E>)"], ["int", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.drain(int, com.hazelcast.util.function.Predicate<? super E>)"], ["int", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.drainTo(java.util.Collection<? super E>, int)"], ["int", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.drainTo(int, java.util.Collection<? super E>, int)"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.drainerArrived()"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.drainerFailed(java.lang.Throwable)"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.drainerDone()"], ["boolean", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.isDrainerGone()"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.checkDrainerGone()"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.awaitDrainerGone()"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.backpressureOn()"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyor.backpressureOff()"], ["com.hazelcast.internal.util.concurrent.MPSCQueue", "com.hazelcast.internal.util.concurrent.MPSCQueue(java.lang.Thread, com.hazelcast.util.concurrent.IdleStrategy)"], ["com.hazelcast.internal.util.concurrent.MPSCQueue", "com.hazelcast.internal.util.concurrent.MPSCQueue(com.hazelcast.util.concurrent.IdleStrategy)"], ["void", "com.hazelcast.internal.util.concurrent.MPSCQueue.setConsumerThread(java.lang.Thread)"], ["void", "com.hazelcast.internal.util.concurrent.MPSCQueue.clear()"], ["boolean", "com.hazelcast.internal.util.concurrent.MPSCQueue.offer(E)"], ["E", "com.hazelcast.internal.util.concurrent.MPSCQueue.peek()"], ["E", "com.hazelcast.internal.util.concurrent.MPSCQueue.take()"], ["E", "com.hazelcast.internal.util.concurrent.MPSCQueue.poll()"], ["int", "com.hazelcast.internal.util.concurrent.MPSCQueue.size()"], ["boolean", "com.hazelcast.internal.util.concurrent.MPSCQueue.isEmpty()"], ["void", "com.hazelcast.internal.util.concurrent.MPSCQueue.put(E)"], ["boolean", "com.hazelcast.internal.util.concurrent.MPSCQueue.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "com.hazelcast.internal.util.concurrent.MPSCQueue.poll(long, java.util.concurrent.TimeUnit)"], ["int", "com.hazelcast.internal.util.concurrent.MPSCQueue.remainingCapacity()"], ["int", "com.hazelcast.internal.util.concurrent.MPSCQueue.drainTo(java.util.Collection<? super E>)"], ["int", "com.hazelcast.internal.util.concurrent.MPSCQueue.drainTo(java.util.Collection<? super E>, int)"], ["com.hazelcast.internal.util.concurrent.ConcurrentConveyorException", "com.hazelcast.internal.util.concurrent.ConcurrentConveyorException(java.lang.String)"], ["com.hazelcast.internal.util.concurrent.ConcurrentConveyorException", "com.hazelcast.internal.util.concurrent.ConcurrentConveyorException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue(int)"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.offer(E)"], ["E", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.poll()"], ["int", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.drain(com.hazelcast.util.function.Predicate<? super E>)"], ["int", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.drainTo(java.util.Collection<? super E>, int)"], ["int", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.size()"], ["void", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.clear()"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.retainAll(java.util.Collection)"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.removeAll(java.util.Collection)"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.addAll(java.util.Collection)"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.containsAll(java.util.Collection)"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.remove(java.lang.Object)"], ["java.lang.Object[]", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.toArray(java.lang.Object[])"], ["java.lang.Object[]", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.toArray()"], ["java.util.Iterator", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.iterator()"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.contains(java.lang.Object)"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.isEmpty()"], ["java.lang.Object", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.element()"], ["java.lang.Object", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.remove()"], ["boolean", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.add(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.peek()"], ["int", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.remainingCapacity()"], ["int", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.capacity()"], ["long", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.removedCount()"], ["long", "com.hazelcast.internal.util.concurrent.ManyToOneConcurrentArrayQueue.addedCount()"], ["<E1> com.hazelcast.internal.util.concurrent.ConcurrentConveyorSingleQueue<E1>", "com.hazelcast.internal.util.concurrent.ConcurrentConveyorSingleQueue.concurrentConveyorSingleQueue(E1, com.hazelcast.internal.util.concurrent.QueuedPipe<E1>)"], ["boolean", "com.hazelcast.internal.util.concurrent.ConcurrentConveyorSingleQueue.offer(E)"], ["void", "com.hazelcast.internal.util.concurrent.ConcurrentConveyorSingleQueue.submit(E)"], ["com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue(int)"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.offer(E)"], ["E", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.poll()"], ["int", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.drain(com.hazelcast.util.function.Predicate<? super E>)"], ["int", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.drainTo(java.util.Collection<? super E>, int)"], ["int", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.size()"], ["void", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.clear()"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.retainAll(java.util.Collection)"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.removeAll(java.util.Collection)"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.addAll(java.util.Collection)"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.containsAll(java.util.Collection)"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.remove(java.lang.Object)"], ["java.lang.Object[]", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.toArray(java.lang.Object[])"], ["java.lang.Object[]", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.toArray()"], ["java.util.Iterator", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.iterator()"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.contains(java.lang.Object)"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.isEmpty()"], ["java.lang.Object", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.element()"], ["java.lang.Object", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.remove()"], ["boolean", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.add(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.peek()"], ["int", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.remainingCapacity()"], ["int", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.capacity()"], ["long", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.removedCount()"], ["long", "com.hazelcast.internal.util.concurrent.OneToOneConcurrentArrayQueue.addedCount()"], ["com.hazelcast.internal.util.concurrent.ThreadFactoryImpl", "com.hazelcast.internal.util.concurrent.ThreadFactoryImpl(java.lang.String)"], ["java.lang.Thread", "com.hazelcast.internal.util.concurrent.ThreadFactoryImpl.newThread(java.lang.Runnable)"], ["void", "com.hazelcast.internal.util.InvocationUtil$InvokeOnMemberFunction$InvokeOnMemberTask$1.onResponse(java.lang.Object)"], ["void", "com.hazelcast.internal.util.InvocationUtil$InvokeOnMemberFunction$InvokeOnMemberTask$1.onFailure(java.lang.Throwable)"], ["com.hazelcast.internal.util.ResultSet", "com.hazelcast.internal.util.ResultSet(java.util.List<java.util.Map$Entry>, com.hazelcast.util.IterationType)"], ["com.hazelcast.internal.util.ResultSet", "com.hazelcast.internal.util.ResultSet()"], ["java.util.Iterator", "com.hazelcast.internal.util.ResultSet.iterator()"], ["int", "com.hazelcast.internal.util.ResultSet.size()"], ["com.hazelcast.internal.networking.InitResult", "com.hazelcast.internal.networking.InitResult(java.nio.ByteBuffer, H)"], ["java.nio.ByteBuffer", "com.hazelcast.internal.networking.InitResult.getByteBuffer()"], ["H", "com.hazelcast.internal.networking.InitResult.getHandler()"], ["com.hazelcast.internal.networking.AbstractChannel", "com.hazelcast.internal.networking.AbstractChannel(java.nio.channels.SocketChannel, boolean)"], ["boolean", "com.hazelcast.internal.networking.AbstractChannel.isClientMode()"], ["java.util.concurrent.ConcurrentMap", "com.hazelcast.internal.networking.AbstractChannel.attributeMap()"], ["java.net.Socket", "com.hazelcast.internal.networking.AbstractChannel.socket()"], ["java.nio.channels.SocketChannel", "com.hazelcast.internal.networking.AbstractChannel.socketChannel()"], ["java.net.SocketAddress", "com.hazelcast.internal.networking.AbstractChannel.remoteSocketAddress()"], ["java.net.SocketAddress", "com.hazelcast.internal.networking.AbstractChannel.localSocketAddress()"], ["int", "com.hazelcast.internal.networking.AbstractChannel.read(java.nio.ByteBuffer)"], ["int", "com.hazelcast.internal.networking.AbstractChannel.write(java.nio.ByteBuffer)"], ["void", "com.hazelcast.internal.networking.AbstractChannel.closeInbound()"], ["void", "com.hazelcast.internal.networking.AbstractChannel.closeOutbound()"], ["boolean", "com.hazelcast.internal.networking.AbstractChannel.isClosed()"], ["void", "com.hazelcast.internal.networking.AbstractChannel.close()"], ["void", "com.hazelcast.internal.networking.AbstractChannel.addCloseListener(com.hazelcast.internal.networking.ChannelCloseListener)"], ["com.hazelcast.internal.networking.Channel", "com.hazelcast.internal.networking.nio.NioPipeline.getChannel()"], ["com.hazelcast.internal.networking.nio.NioThread", "com.hazelcast.internal.networking.nio.NioPipeline.owner()"], ["void", "com.hazelcast.internal.networking.nio.NioPipeline.start()"], ["void", "com.hazelcast.internal.networking.nio.NioPipeline.onFailure(java.lang.Throwable)"], ["com.hazelcast.internal.networking.nio.NioChannelFactory", "com.hazelcast.internal.networking.nio.NioChannelFactory()"], ["com.hazelcast.internal.networking.Channel", "com.hazelcast.internal.networking.nio.NioChannelFactory.create(java.nio.channels.SocketChannel, boolean, boolean)"], ["void", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$PublishAllTask.run()"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup", "com.hazelcast.internal.networking.nio.NioEventLoopGroup(com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context)"], ["com.hazelcast.internal.networking.nio.NioThread[]", "com.hazelcast.internal.networking.nio.NioEventLoopGroup.getInputThreads()"], ["com.hazelcast.internal.networking.nio.NioThread[]", "com.hazelcast.internal.networking.nio.NioEventLoopGroup.getOutputThreads()"], ["com.hazelcast.internal.networking.nio.iobalancer.IOBalancer", "com.hazelcast.internal.networking.nio.NioEventLoopGroup.getIOBalancer()"], ["void", "com.hazelcast.internal.networking.nio.NioEventLoopGroup.start()"], ["void", "com.hazelcast.internal.networking.nio.NioEventLoopGroup.shutdown()"], ["void", "com.hazelcast.internal.networking.nio.NioEventLoopGroup.register(com.hazelcast.internal.networking.Channel)"], ["void", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$PublishAllTask$2.run()"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context()"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.selectorWorkaroundTest(boolean)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.selectorMode(com.hazelcast.internal.networking.nio.SelectorMode)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.loggingService(com.hazelcast.logging.LoggingService)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.metricsRegistry(com.hazelcast.internal.metrics.MetricsRegistry)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.threadNamePrefix(java.lang.String)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.errorHandler(com.hazelcast.internal.networking.ChannelErrorHandler)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.inputThreadCount(int)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.outputThreadCount(int)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.balancerIntervalSeconds(int)"], ["com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$Context.channelInitializer(com.hazelcast.internal.networking.ChannelInitializer)"], ["com.hazelcast.internal.networking.nio.NioOutboundPipeline", "com.hazelcast.internal.networking.nio.NioOutboundPipeline(com.hazelcast.internal.networking.nio.NioChannel, com.hazelcast.internal.networking.nio.NioThread, com.hazelcast.internal.networking.ChannelErrorHandler, com.hazelcast.logging.ILogger, com.hazelcast.internal.networking.nio.iobalancer.IOBalancer, com.hazelcast.internal.networking.ChannelInitializer)"], ["long", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.load()"], ["int", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.totalFramesPending()"], ["long", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.lastWriteTimeMillis()"], ["long", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.bytesPending()"], ["long", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.priorityBytesPending()"], ["void", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.flush()"], ["void", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.write(com.hazelcast.internal.networking.OutboundFrame)"], ["void", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.process()"], ["void", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.run()"], ["void", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.close()"], ["void", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.requestMigration(com.hazelcast.internal.networking.nio.NioThread)"], ["java.lang.String", "com.hazelcast.internal.networking.nio.NioOutboundPipeline.toString()"], ["boolean", "com.hazelcast.internal.networking.nio.SelectorOptimizer$SelectionKeysSet.add(java.nio.channels.SelectionKey)"], ["int", "com.hazelcast.internal.networking.nio.SelectorOptimizer$SelectionKeysSet.size()"], ["boolean", "com.hazelcast.internal.networking.nio.SelectorOptimizer$SelectionKeysSet.remove(java.lang.Object)"], ["boolean", "com.hazelcast.internal.networking.nio.SelectorOptimizer$SelectionKeysSet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.internal.networking.nio.SelectorOptimizer$SelectionKeysSet.add(java.lang.Object)"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer$AddPipelineTask.run()"], ["com.hazelcast.internal.networking.nio.iobalancer.IOBalancer", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer(com.hazelcast.internal.networking.nio.NioThread[], com.hazelcast.internal.networking.nio.NioThread[], java.lang.String, int, com.hazelcast.logging.LoggingService)"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer.channelAdded(com.hazelcast.internal.networking.nio.MigratablePipeline, com.hazelcast.internal.networking.nio.MigratablePipeline)"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer.channelRemoved(com.hazelcast.internal.networking.nio.MigratablePipeline, com.hazelcast.internal.networking.nio.MigratablePipeline)"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer.start()"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer.stop()"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer.signalMigrationComplete()"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer$RemovePipelineTask.run()"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.IOBalancerThread.run()"], ["boolean", "com.hazelcast.internal.networking.nio.iobalancer.LoadMigrationStrategy.imbalanceDetected(com.hazelcast.internal.networking.nio.iobalancer.LoadImbalance)"], ["com.hazelcast.internal.networking.nio.MigratablePipeline", "com.hazelcast.internal.networking.nio.iobalancer.LoadMigrationStrategy.findPipelineToMigrate(com.hazelcast.internal.networking.nio.iobalancer.LoadImbalance)"], ["void", "com.hazelcast.internal.networking.nio.iobalancer.LoadTracker.removePipeline(com.hazelcast.internal.networking.nio.MigratablePipeline)"], ["boolean", "com.hazelcast.internal.networking.nio.iobalancer.MonkeyMigrationStrategy.imbalanceDetected(com.hazelcast.internal.networking.nio.iobalancer.LoadImbalance)"], ["com.hazelcast.internal.networking.nio.MigratablePipeline", "com.hazelcast.internal.networking.nio.iobalancer.MonkeyMigrationStrategy.findPipelineToMigrate(com.hazelcast.internal.networking.nio.iobalancer.LoadImbalance)"], ["com.hazelcast.internal.networking.nio.NioInboundPipeline", "com.hazelcast.internal.networking.nio.NioInboundPipeline(com.hazelcast.internal.networking.nio.NioChannel, com.hazelcast.internal.networking.nio.NioThread, com.hazelcast.internal.networking.ChannelErrorHandler, com.hazelcast.logging.ILogger, com.hazelcast.internal.networking.nio.iobalancer.IOBalancer, com.hazelcast.internal.networking.ChannelInitializer)"], ["long", "com.hazelcast.internal.networking.nio.NioInboundPipeline.load()"], ["com.hazelcast.internal.util.counters.SwCounter", "com.hazelcast.internal.networking.nio.NioInboundPipeline.getNormalFramesReadCounter()"], ["com.hazelcast.internal.util.counters.SwCounter", "com.hazelcast.internal.networking.nio.NioInboundPipeline.getPriorityFramesReadCounter()"], ["long", "com.hazelcast.internal.networking.nio.NioInboundPipeline.lastReadTimeMillis()"], ["void", "com.hazelcast.internal.networking.nio.NioInboundPipeline.requestMigration(com.hazelcast.internal.networking.nio.NioThread)"], ["void", "com.hazelcast.internal.networking.nio.NioInboundPipeline.process()"], ["void", "com.hazelcast.internal.networking.nio.NioInboundPipeline.publishMetrics()"], ["void", "com.hazelcast.internal.networking.nio.NioInboundPipeline.close()"], ["java.lang.String", "com.hazelcast.internal.networking.nio.NioInboundPipeline.toString()"], ["void", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$ChannelCloseListenerImpl.onClose(com.hazelcast.internal.networking.Channel)"], ["boolean", "com.hazelcast.internal.networking.nio.SelectorOptimizer$IteratorImpl.hasNext()"], ["java.nio.channels.SelectionKey", "com.hazelcast.internal.networking.nio.SelectorOptimizer$IteratorImpl.next()"], ["void", "com.hazelcast.internal.networking.nio.SelectorOptimizer$IteratorImpl.remove()"], ["java.lang.Object", "com.hazelcast.internal.networking.nio.SelectorOptimizer$IteratorImpl.next()"], ["void", "com.hazelcast.internal.networking.nio.NioEventLoopGroup$PublishAllTask$1.run()"], ["void", "com.hazelcast.internal.networking.nio.NioInboundPipeline$1.run()"], ["boolean", "com.hazelcast.internal.networking.nio.NioOutboundPipeline$TaskFrame.isUrgent()"], ["com.hazelcast.internal.networking.nio.SelectorMode[]", "com.hazelcast.internal.networking.nio.SelectorMode.values()"], ["com.hazelcast.internal.networking.nio.SelectorMode", "com.hazelcast.internal.networking.nio.SelectorMode.valueOf(java.lang.String)"], ["com.hazelcast.internal.networking.nio.SelectorMode", "com.hazelcast.internal.networking.nio.SelectorMode.getConfiguredValue()"], ["java.lang.String", "com.hazelcast.internal.networking.nio.SelectorMode.getConfiguredString()"], ["com.hazelcast.internal.networking.nio.SelectorMode", "com.hazelcast.internal.networking.nio.SelectorMode.fromString(java.lang.String)"], ["void", "com.hazelcast.internal.networking.nio.NioPipeline$1.run()"], ["void", "com.hazelcast.internal.networking.nio.NioPipeline$2.run()"], ["void", "com.hazelcast.internal.networking.nio.NioOutboundPipeline$StartMigrationTask.run()"], ["void", "com.hazelcast.internal.networking.nio.NioOutboundPipeline$CloseTask.run()"], ["void", "com.hazelcast.internal.networking.nio.NioInboundPipeline$StartMigrationTask.run()"], ["com.hazelcast.internal.networking.nio.NioThread", "com.hazelcast.internal.networking.nio.NioThread(java.lang.String, com.hazelcast.logging.ILogger, com.hazelcast.internal.networking.ChannelErrorHandler)"], ["com.hazelcast.internal.networking.nio.NioThread", "com.hazelcast.internal.networking.nio.NioThread(java.lang.String, com.hazelcast.logging.ILogger, com.hazelcast.internal.networking.ChannelErrorHandler, com.hazelcast.internal.networking.nio.SelectorMode, com.hazelcast.util.concurrent.IdleStrategy)"], ["com.hazelcast.internal.networking.nio.NioThread", "com.hazelcast.internal.networking.nio.NioThread(java.lang.String, com.hazelcast.logging.ILogger, com.hazelcast.internal.networking.ChannelErrorHandler, com.hazelcast.internal.networking.nio.SelectorMode, java.nio.channels.Selector, com.hazelcast.util.concurrent.IdleStrategy)"], ["long", "com.hazelcast.internal.networking.nio.NioThread.bytesTransceived()"], ["long", "com.hazelcast.internal.networking.nio.NioThread.framesTransceived()"], ["long", "com.hazelcast.internal.networking.nio.NioThread.priorityFramesTransceived()"], ["long", "com.hazelcast.internal.networking.nio.NioThread.handleCount()"], ["long", "com.hazelcast.internal.networking.nio.NioThread.eventCount()"], ["long", "com.hazelcast.internal.networking.nio.NioThread.completedTaskCount()"], ["java.nio.channels.Selector", "com.hazelcast.internal.networking.nio.NioThread.getSelector()"], ["long", "com.hazelcast.internal.networking.nio.NioThread.getEventCount()"], ["void", "com.hazelcast.internal.networking.nio.NioThread.addTask(java.lang.Runnable)"], ["void", "com.hazelcast.internal.networking.nio.NioThread.addTaskAndWakeup(java.lang.Runnable)"], ["void", "com.hazelcast.internal.networking.nio.NioThread.run()"], ["void", "com.hazelcast.internal.networking.nio.NioThread.shutdown()"], ["java.lang.String", "com.hazelcast.internal.networking.nio.NioThread.toString()"], ["com.hazelcast.internal.networking.nio.NioChannel", "com.hazelcast.internal.networking.nio.NioChannel(java.nio.channels.SocketChannel, boolean)"], ["void", "com.hazelcast.internal.networking.nio.NioChannel.init(com.hazelcast.internal.networking.nio.NioInboundPipeline, com.hazelcast.internal.networking.nio.NioOutboundPipeline)"], ["com.hazelcast.internal.networking.nio.NioOutboundPipeline", "com.hazelcast.internal.networking.nio.NioChannel.outboundPipeline()"], ["com.hazelcast.internal.networking.nio.NioInboundPipeline", "com.hazelcast.internal.networking.nio.NioChannel.inboundPipeline()"], ["boolean", "com.hazelcast.internal.networking.nio.NioChannel.write(com.hazelcast.internal.networking.OutboundFrame)"], ["long", "com.hazelcast.internal.networking.nio.NioChannel.lastReadTimeMillis()"], ["long", "com.hazelcast.internal.networking.nio.NioChannel.lastWriteTimeMillis()"], ["void", "com.hazelcast.internal.networking.nio.NioChannel.flush()"], ["java.lang.String", "com.hazelcast.internal.networking.nio.NioChannel.toString()"], ["com.hazelcast.internal.networking.nio.ChannelInboundHandlerWithCounters", "com.hazelcast.internal.networking.nio.ChannelInboundHandlerWithCounters()"], ["void", "com.hazelcast.internal.networking.nio.ChannelInboundHandlerWithCounters.setNormalPacketsRead(com.hazelcast.internal.util.counters.Counter)"], ["void", "com.hazelcast.internal.networking.nio.ChannelInboundHandlerWithCounters.setPriorityPacketsRead(com.hazelcast.internal.util.counters.Counter)"], ["com.hazelcast.internal.adapter.ICacheDataStructureAdapter", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter(com.hazelcast.cache.ICache<K, V>)"], ["int", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.size()"], ["V", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.get(K)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.set(K, V)"], ["V", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.put(K, V)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.putTransient(K, V, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.putIfAbsent(K, V)"], ["V", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.replace(K, V)"], ["boolean", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.replace(K, V, V)"], ["V", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.remove(K)"], ["boolean", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.remove(K, V)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.delete(K)"], ["boolean", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.evict(K)"], ["<T> T", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.invoke(K, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["java.lang.Object", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.executeOnKey(K, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.executeOnKeys(java.util.Set<K>, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.executeOnEntries(com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.executeOnEntries(com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["boolean", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.containsKey(K)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.loadAll(boolean)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.loadAll(java.util.Set<K>, boolean)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.loadAll(java.util.Set<? extends K>, boolean, javax.cache.integration.CompletionListener)"], ["java.util.Map<K, V>", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.getAll(java.util.Set<K>)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.putAll(java.util.Map<K, V>)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.removeAll()"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.removeAll(java.util.Set<K>)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.evictAll()"], ["<T> java.util.Map<K, javax.cache.processor.EntryProcessorResult<T>>", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.invokeAll(java.util.Set<? extends K>, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.clear()"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.close()"], ["void", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.destroy()"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.internal.adapter.ICacheDataStructureAdapter.getLocalMapStats()"], ["com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter(com.hazelcast.core.ReplicatedMap<K, V>)"], ["int", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.size()"], ["V", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.get(K)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.set(K, V)"], ["V", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.put(K, V)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.putTransient(K, V, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.putIfAbsent(K, V)"], ["V", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.replace(K, V)"], ["boolean", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.replace(K, V, V)"], ["V", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.remove(K)"], ["boolean", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.remove(K, V)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.delete(K)"], ["boolean", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.evict(K)"], ["<T> T", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.invoke(K, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["java.lang.Object", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.executeOnKey(K, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.executeOnKeys(java.util.Set<K>, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.executeOnEntries(com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.executeOnEntries(com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["boolean", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.containsKey(K)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.loadAll(boolean)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.loadAll(java.util.Set<K>, boolean)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.loadAll(java.util.Set<? extends K>, boolean, javax.cache.integration.CompletionListener)"], ["java.util.Map<K, V>", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.getAll(java.util.Set<K>)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.putAll(java.util.Map<K, V>)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.removeAll()"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.removeAll(java.util.Set<K>)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.evictAll()"], ["<T> java.util.Map<K, javax.cache.processor.EntryProcessorResult<T>>", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.invokeAll(java.util.Set<? extends K>, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.clear()"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.close()"], ["void", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.destroy()"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.internal.adapter.ReplicatedMapDataStructureAdapter.getLocalMapStats()"], ["com.hazelcast.internal.adapter.DataStructureAdapter$DataStructureMethods[]", "com.hazelcast.internal.adapter.DataStructureAdapter$DataStructureMethods.values()"], ["com.hazelcast.internal.adapter.DataStructureAdapter$DataStructureMethods", "com.hazelcast.internal.adapter.DataStructureAdapter$DataStructureMethods.valueOf(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.adapter.DataStructureAdapter$DataStructureMethods.getMethodName()"], ["java.lang.String", "com.hazelcast.internal.adapter.DataStructureAdapter$DataStructureMethods.getParameterTypeString()"], ["com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter(com.hazelcast.core.HazelcastInstance, java.lang.String)"], ["int", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.size()"], ["V", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.get(K)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.set(K, V)"], ["V", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.put(K, V)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.putTransient(K, V, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.putIfAbsent(K, V)"], ["V", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.replace(K, V)"], ["boolean", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.replace(K, V, V)"], ["V", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.remove(K)"], ["boolean", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.remove(K, V)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.delete(K)"], ["boolean", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.evict(K)"], ["<T> T", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.invoke(K, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["java.lang.Object", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.executeOnKey(K, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.executeOnKeys(java.util.Set<K>, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.executeOnEntries(com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.executeOnEntries(com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["java.util.Map<K, V>", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.getAll(java.util.Set<K>)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.putAll(java.util.Map<K, V>)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.removeAll()"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.removeAll(java.util.Set<K>)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.evictAll()"], ["<T> java.util.Map<K, javax.cache.processor.EntryProcessorResult<T>>", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.invokeAll(java.util.Set<? extends K>, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.clear()"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.close()"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.destroy()"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.getLocalMapStats()"], ["boolean", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.containsKey(K)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.loadAll(boolean)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.loadAll(java.util.Set<K>, boolean)"], ["void", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.loadAll(java.util.Set<? extends K>, boolean, javax.cache.integration.CompletionListener)"], ["com.hazelcast.core.IMap<K, V>", "com.hazelcast.internal.adapter.TransactionalMapDataStructureAdapter.getMap()"], ["com.hazelcast.internal.adapter.IMapDataStructureAdapter", "com.hazelcast.internal.adapter.IMapDataStructureAdapter(com.hazelcast.core.IMap<K, V>)"], ["int", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.size()"], ["V", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.get(K)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.set(K, V)"], ["V", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.put(K, V)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.putTransient(K, V, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.putIfAbsent(K, V)"], ["V", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.replace(K, V)"], ["boolean", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.replace(K, V, V)"], ["V", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.remove(K)"], ["boolean", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.remove(K, V)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.delete(K)"], ["boolean", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.evict(K)"], ["<T> T", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.invoke(K, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["java.lang.Object", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.executeOnKey(K, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.executeOnKeys(java.util.Set<K>, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.executeOnEntries(com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.executeOnEntries(com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["boolean", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.containsKey(K)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.loadAll(boolean)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.loadAll(java.util.Set<K>, boolean)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.loadAll(java.util.Set<? extends K>, boolean, javax.cache.integration.CompletionListener)"], ["java.util.Map<K, V>", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.getAll(java.util.Set<K>)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.putAll(java.util.Map<K, V>)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.removeAll()"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.removeAll(java.util.Set<K>)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.evictAll()"], ["<T> java.util.Map<K, javax.cache.processor.EntryProcessorResult<T>>", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.invokeAll(java.util.Set<? extends K>, javax.cache.processor.EntryProcessor<K, V, T>, java.lang.Object...)"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.clear()"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.close()"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.destroy()"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.getLocalMapStats()"], ["void", "com.hazelcast.internal.adapter.IMapDataStructureAdapter.waitUntilLoaded()"], ["com.hazelcast.internal.metrics.impl.ProbeBuilderImpl", "com.hazelcast.internal.metrics.impl.ProbeBuilderImpl.withTag(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.metrics.impl.ProbeBuilderImpl.metricName()"], ["<S> void", "com.hazelcast.internal.metrics.impl.ProbeBuilderImpl.register(S, java.lang.String, com.hazelcast.internal.metrics.ProbeLevel, com.hazelcast.internal.metrics.ProbeUnit, com.hazelcast.internal.metrics.DoubleProbeFunction<S>)"], ["<S> void", "com.hazelcast.internal.metrics.impl.ProbeBuilderImpl.register(S, java.lang.String, com.hazelcast.internal.metrics.ProbeLevel, com.hazelcast.internal.metrics.ProbeUnit, com.hazelcast.internal.metrics.LongProbeFunction<S>)"], ["<S> void", "com.hazelcast.internal.metrics.impl.ProbeBuilderImpl.scanAndRegister(S)"], ["com.hazelcast.internal.metrics.ProbeBuilder", "com.hazelcast.internal.metrics.impl.ProbeBuilderImpl.withTag(java.lang.String, java.lang.String)"], ["com.hazelcast.internal.metrics.impl.MethodProbe$DoubleMethodProbe", "com.hazelcast.internal.metrics.impl.MethodProbe$DoubleMethodProbe(java.lang.reflect.Method, com.hazelcast.internal.metrics.Probe, int)"], ["double", "com.hazelcast.internal.metrics.impl.MethodProbe$DoubleMethodProbe.get(S)"], ["com.hazelcast.internal.metrics.impl.MethodProbe$LongMethodProbe", "com.hazelcast.internal.metrics.impl.MethodProbe$LongMethodProbe(java.lang.reflect.Method, com.hazelcast.internal.metrics.Probe, int)"], ["long", "com.hazelcast.internal.metrics.impl.MethodProbe$LongMethodProbe.get(S)"], ["double", "com.hazelcast.internal.metrics.impl.DoubleGaugeImpl.read()"], ["void", "com.hazelcast.internal.metrics.impl.DoubleGaugeImpl.render(java.lang.StringBuilder)"], ["com.hazelcast.internal.metrics.impl.MetricsRegistryImpl", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl(com.hazelcast.logging.ILogger, com.hazelcast.internal.metrics.ProbeLevel)"], ["com.hazelcast.internal.metrics.impl.MetricsRegistryImpl", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl(java.lang.String, com.hazelcast.logging.ILogger, com.hazelcast.internal.metrics.ProbeLevel)"], ["com.hazelcast.internal.metrics.ProbeLevel", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.minimumLevel()"], ["<S> void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.scanAndRegister(S, java.lang.String)"], ["<S> void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.register(S, java.lang.String, com.hazelcast.internal.metrics.ProbeLevel, com.hazelcast.internal.metrics.LongProbeFunction<S>)"], ["<S> void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.register(S, java.lang.String, com.hazelcast.internal.metrics.ProbeLevel, com.hazelcast.internal.metrics.DoubleProbeFunction<S>)"], ["com.hazelcast.internal.metrics.impl.LongGaugeImpl", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.newLongGauge(java.lang.String)"], ["com.hazelcast.internal.metrics.DoubleGauge", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.newDoubleGauge(java.lang.String)"], ["<S> void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.deregister(S)"], ["void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.render(com.hazelcast.internal.metrics.renderers.ProbeRenderer)"], ["void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.collectMetrics(java.lang.Object...)"], ["void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.discardMetrics(java.lang.Object...)"], ["void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.scheduleAtFixedRate(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.shutdown()"], ["com.hazelcast.internal.metrics.ProbeBuilder", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.newProbeBuilder()"], ["com.hazelcast.internal.metrics.LongGauge", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.newLongGauge(java.lang.String)"], ["java.lang.String", "com.hazelcast.internal.metrics.impl.AbstractGauge.getName()"], ["long", "com.hazelcast.internal.metrics.impl.LongGaugeImpl.read()"], ["void", "com.hazelcast.internal.metrics.impl.LongGaugeImpl.render(java.lang.StringBuilder)"], ["com.hazelcast.internal.metrics.impl.FieldProbe$DoubleFieldProbe", "com.hazelcast.internal.metrics.impl.FieldProbe$DoubleFieldProbe(java.lang.reflect.Field, com.hazelcast.internal.metrics.Probe, int)"], ["double", "com.hazelcast.internal.metrics.impl.FieldProbe$DoubleFieldProbe.get(S)"], ["com.hazelcast.internal.metrics.impl.FieldProbe$LongFieldProbe", "com.hazelcast.internal.metrics.impl.FieldProbe$LongFieldProbe(java.lang.reflect.Field, com.hazelcast.internal.metrics.Probe, int)"], ["long", "com.hazelcast.internal.metrics.impl.FieldProbe$LongFieldProbe.get(S)"], ["int", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl$1.compare(com.hazelcast.internal.metrics.impl.ProbeInstance, com.hazelcast.internal.metrics.impl.ProbeInstance)"], ["int", "com.hazelcast.internal.metrics.impl.MetricsRegistryImpl$1.compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.hazelcast.internal.metrics.MetricsUtil.escapeMetricNamePart(java.lang.String)"], ["boolean", "com.hazelcast.internal.metrics.MetricsUtil.containsSpecialCharacters(java.lang.String)"], ["java.util.List<java.util.Map$Entry<java.lang.String, java.lang.String>>", "com.hazelcast.internal.metrics.MetricsUtil.parseMetricName(java.lang.String)"], ["double", "com.hazelcast.internal.metrics.metricsets.OperatingSystemMetricSet$1.get(java.lang.management.OperatingSystemMXBean)"], ["double", "com.hazelcast.internal.metrics.metricsets.OperatingSystemMetricSet$1.get(java.lang.Object)"], ["void", "com.hazelcast.internal.metrics.metricsets.OperatingSystemMetricSet.register(com.hazelcast.internal.metrics.MetricsRegistry)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$4.get(java.lang.Runtime)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$4.get(java.lang.Object)"], ["void", "com.hazelcast.internal.metrics.metricsets.GarbageCollectionMetricSet.register(com.hazelcast.internal.metrics.MetricsRegistry)"], ["long", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet$4.get(java.lang.management.ThreadMXBean)"], ["long", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet$4.get(java.lang.Object)"], ["void", "com.hazelcast.internal.metrics.metricsets.StatisticsAwareMetricsSet$Task.run()"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$5.get(java.lang.Runtime)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$5.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.FileMetricSet$3.get(java.io.File)"], ["long", "com.hazelcast.internal.metrics.metricsets.FileMetricSet$3.get(java.lang.Object)"], ["void", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet.register(com.hazelcast.internal.metrics.MetricsRegistry)"], ["void", "com.hazelcast.internal.metrics.metricsets.ClassLoadingMetricSet.register(com.hazelcast.internal.metrics.MetricsRegistry)"], ["long", "com.hazelcast.internal.metrics.metricsets.ClassLoadingMetricSet$1.get(java.lang.management.ClassLoadingMXBean)"], ["long", "com.hazelcast.internal.metrics.metricsets.ClassLoadingMetricSet$1.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$1.get(java.lang.Runtime)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$1.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$3.get(java.lang.Runtime)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$3.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.FileMetricSet$2.get(java.io.File)"], ["long", "com.hazelcast.internal.metrics.metricsets.FileMetricSet$2.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet$2.get(java.lang.management.ThreadMXBean)"], ["long", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet$2.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$2.get(java.lang.Runtime)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$2.get(java.lang.Object)"], ["void", "com.hazelcast.internal.metrics.metricsets.GarbageCollectionMetricSet$GcStats.run()"], ["long", "com.hazelcast.internal.metrics.metricsets.OperatingSystemMetricSet$2.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet$1.get(java.lang.management.ThreadMXBean)"], ["long", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet$1.get(java.lang.Object)"], ["void", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet.register(com.hazelcast.internal.metrics.MetricsRegistry)"], ["com.hazelcast.internal.metrics.metricsets.StatisticsAwareMetricsSet", "com.hazelcast.internal.metrics.metricsets.StatisticsAwareMetricsSet(com.hazelcast.spi.impl.servicemanager.ServiceManager, com.hazelcast.spi.impl.NodeEngineImpl)"], ["void", "com.hazelcast.internal.metrics.metricsets.StatisticsAwareMetricsSet.register(com.hazelcast.internal.metrics.MetricsRegistry)"], ["long", "com.hazelcast.internal.metrics.metricsets.ClassLoadingMetricSet$3.get(java.lang.management.ClassLoadingMXBean)"], ["long", "com.hazelcast.internal.metrics.metricsets.ClassLoadingMetricSet$3.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet$3.get(java.lang.management.ThreadMXBean)"], ["long", "com.hazelcast.internal.metrics.metricsets.ThreadMetricSet$3.get(java.lang.Object)"], ["double", "com.hazelcast.internal.metrics.metricsets.OperatingSystemMetricSet$3.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$6.get(java.lang.management.RuntimeMXBean)"], ["long", "com.hazelcast.internal.metrics.metricsets.RuntimeMetricSet$6.get(java.lang.Object)"], ["long", "com.hazelcast.internal.metrics.metricsets.FileMetricSet$1.get(java.io.File)"], ["long", "com.hazelcast.internal.metrics.metricsets.FileMetricSet$1.get(java.lang.Object)"], ["void", "com.hazelcast.internal.metrics.metricsets.FileMetricSet.register(com.hazelcast.internal.metrics.MetricsRegistry)"], ["long", "com.hazelcast.internal.metrics.metricsets.ClassLoadingMetricSet$2.get(java.lang.management.ClassLoadingMXBean)"], ["long", "com.hazelcast.internal.metrics.metricsets.ClassLoadingMetricSet$2.get(java.lang.Object)"], ["com.hazelcast.internal.metrics.ProbeUnit[]", "com.hazelcast.internal.metrics.ProbeUnit.values()"], ["com.hazelcast.internal.metrics.ProbeUnit", "com.hazelcast.internal.metrics.ProbeUnit.valueOf(java.lang.String)"], ["com.hazelcast.internal.metrics.ProbeLevel[]", "com.hazelcast.internal.metrics.ProbeLevel.values()"], ["com.hazelcast.internal.metrics.ProbeLevel", "com.hazelcast.internal.metrics.ProbeLevel.valueOf(java.lang.String)"], ["boolean", "com.hazelcast.internal.metrics.ProbeLevel.isEnabled(com.hazelcast.internal.metrics.ProbeLevel)"], ["<T> T", "com.hazelcast.internal.config.ConfigUtils.lookupByPattern(com.hazelcast.config.ConfigPatternMatcher, java.util.Map<java.lang.String, T>, java.lang.String)"], ["boolean", "com.hazelcast.internal.config.MergePolicyValidator.checkMergePolicySupportsInMemoryFormat(java.lang.String, java.lang.Object, com.hazelcast.config.InMemoryFormat, com.hazelcast.version.Version, boolean, com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkMapConfig(com.hazelcast.config.MapConfig, com.hazelcast.map.merge.MergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkNearCacheConfig(java.lang.String, com.hazelcast.config.NearCacheConfig, com.hazelcast.config.NativeMemoryConfig, boolean)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkEvictionConfig(com.hazelcast.config.EvictionConfig, boolean)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkEvictionConfig(com.hazelcast.config.EvictionPolicy, java.lang.String, java.lang.Object, boolean)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkCacheConfig(com.hazelcast.config.CacheSimpleConfig, com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkCacheConfig(com.hazelcast.config.CacheConfig, com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkCacheConfig(com.hazelcast.config.InMemoryFormat, com.hazelcast.config.EvictionConfig, java.lang.String, com.hazelcast.spi.merge.SplitBrainMergeTypeProvider, com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig, com.hazelcast.replicatedmap.merge.MergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkMultiMapConfig(com.hazelcast.config.MultiMapConfig, com.hazelcast.spi.merge.SplitBrainMergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkQueueConfig(com.hazelcast.config.QueueConfig, com.hazelcast.spi.merge.SplitBrainMergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkCollectionConfig(com.hazelcast.config.CollectionConfig, com.hazelcast.spi.merge.SplitBrainMergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkRingbufferConfig(com.hazelcast.config.RingbufferConfig, com.hazelcast.spi.merge.SplitBrainMergePolicyProvider)"], ["<C extends com.hazelcast.config.AbstractBasicConfig> void", "com.hazelcast.internal.config.ConfigValidator.checkBasicConfig(C, com.hazelcast.spi.merge.SplitBrainMergePolicyProvider)"], ["void", "com.hazelcast.internal.config.ConfigValidator.checkScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig, com.hazelcast.spi.merge.SplitBrainMergePolicyProvider)"], ["com.hazelcast.collection.impl.list.operations.ListIndexOfOperation", "com.hazelcast.collection.impl.list.operations.ListIndexOfOperation()"], ["com.hazelcast.collection.impl.list.operations.ListIndexOfOperation", "com.hazelcast.collection.impl.list.operations.ListIndexOfOperation(java.lang.String, boolean, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.list.operations.ListIndexOfOperation.run()"], ["int", "com.hazelcast.collection.impl.list.operations.ListIndexOfOperation.getId()"], ["com.hazelcast.collection.impl.list.operations.ListAddOperation", "com.hazelcast.collection.impl.list.operations.ListAddOperation()"], ["com.hazelcast.collection.impl.list.operations.ListAddOperation", "com.hazelcast.collection.impl.list.operations.ListAddOperation(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.list.operations.ListAddOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.list.operations.ListAddOperation.getBackupOperation()"], ["int", "com.hazelcast.collection.impl.list.operations.ListAddOperation.getId()"], ["com.hazelcast.collection.impl.list.operations.ListGetOperation", "com.hazelcast.collection.impl.list.operations.ListGetOperation()"], ["com.hazelcast.collection.impl.list.operations.ListGetOperation", "com.hazelcast.collection.impl.list.operations.ListGetOperation(java.lang.String, int)"], ["void", "com.hazelcast.collection.impl.list.operations.ListGetOperation.run()"], ["int", "com.hazelcast.collection.impl.list.operations.ListGetOperation.getId()"], ["com.hazelcast.collection.impl.list.operations.ListRemoveOperation", "com.hazelcast.collection.impl.list.operations.ListRemoveOperation()"], ["com.hazelcast.collection.impl.list.operations.ListRemoveOperation", "com.hazelcast.collection.impl.list.operations.ListRemoveOperation(java.lang.String, int)"], ["boolean", "com.hazelcast.collection.impl.list.operations.ListRemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.list.operations.ListRemoveOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.list.operations.ListRemoveOperation.beforeRun()"], ["void", "com.hazelcast.collection.impl.list.operations.ListRemoveOperation.run()"], ["int", "com.hazelcast.collection.impl.list.operations.ListRemoveOperation.getId()"], ["com.hazelcast.collection.impl.list.operations.ListSubOperation", "com.hazelcast.collection.impl.list.operations.ListSubOperation()"], ["com.hazelcast.collection.impl.list.operations.ListSubOperation", "com.hazelcast.collection.impl.list.operations.ListSubOperation(java.lang.String, int, int)"], ["void", "com.hazelcast.collection.impl.list.operations.ListSubOperation.run()"], ["int", "com.hazelcast.collection.impl.list.operations.ListSubOperation.getId()"], ["com.hazelcast.collection.impl.list.operations.ListSetBackupOperation", "com.hazelcast.collection.impl.list.operations.ListSetBackupOperation()"], ["com.hazelcast.collection.impl.list.operations.ListSetBackupOperation", "com.hazelcast.collection.impl.list.operations.ListSetBackupOperation(java.lang.String, long, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.list.operations.ListSetBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.list.operations.ListSetBackupOperation.getId()"], ["com.hazelcast.collection.impl.list.operations.ListReplicationOperation", "com.hazelcast.collection.impl.list.operations.ListReplicationOperation()"], ["com.hazelcast.collection.impl.list.operations.ListReplicationOperation", "com.hazelcast.collection.impl.list.operations.ListReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.collection.impl.collection.CollectionContainer>, int, int)"], ["int", "com.hazelcast.collection.impl.list.operations.ListReplicationOperation.getId()"], ["com.hazelcast.collection.impl.list.operations.ListAddAllOperation", "com.hazelcast.collection.impl.list.operations.ListAddAllOperation()"], ["com.hazelcast.collection.impl.list.operations.ListAddAllOperation", "com.hazelcast.collection.impl.list.operations.ListAddAllOperation(java.lang.String, int, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.list.operations.ListAddAllOperation.run()"], ["int", "com.hazelcast.collection.impl.list.operations.ListAddAllOperation.getId()"], ["com.hazelcast.collection.impl.list.operations.ListSetOperation", "com.hazelcast.collection.impl.list.operations.ListSetOperation()"], ["com.hazelcast.collection.impl.list.operations.ListSetOperation", "com.hazelcast.collection.impl.list.operations.ListSetOperation(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.collection.impl.list.operations.ListSetOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.list.operations.ListSetOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.list.operations.ListSetOperation.run()"], ["void", "com.hazelcast.collection.impl.list.operations.ListSetOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.list.operations.ListSetOperation.getId()"], ["void", "com.hazelcast.collection.impl.list.ListProxyImpl.add(int, E)"], ["E", "com.hazelcast.collection.impl.list.ListProxyImpl.get(int)"], ["E", "com.hazelcast.collection.impl.list.ListProxyImpl.set(int, E)"], ["E", "com.hazelcast.collection.impl.list.ListProxyImpl.remove(int)"], ["int", "com.hazelcast.collection.impl.list.ListProxyImpl.indexOf(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.list.ListProxyImpl.lastIndexOf(java.lang.Object)"], ["boolean", "com.hazelcast.collection.impl.list.ListProxyImpl.addAll(int, java.util.Collection<? extends E>)"], ["java.lang.Object[]", "com.hazelcast.collection.impl.list.ListProxyImpl.toArray()"], ["<T> T[]", "com.hazelcast.collection.impl.list.ListProxyImpl.toArray(T[])"], ["java.lang.String", "com.hazelcast.collection.impl.list.ListProxyImpl.getServiceName()"], ["com.hazelcast.collection.impl.list.ListService", "com.hazelcast.collection.impl.list.ListService(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.collection.impl.list.ListContainer", "com.hazelcast.collection.impl.list.ListService.getOrCreateContainer(java.lang.String, boolean)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, ? extends com.hazelcast.collection.impl.collection.CollectionContainer>", "com.hazelcast.collection.impl.list.ListService.getContainerMap()"], ["java.lang.String", "com.hazelcast.collection.impl.list.ListService.getServiceName()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.collection.impl.list.ListService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.collection.impl.list.ListService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.collection.impl.txnlist.TransactionalListProxy", "com.hazelcast.collection.impl.list.ListService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.list.ListService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["java.lang.String", "com.hazelcast.collection.impl.list.ListService.getQuorumName(java.lang.String)"], ["com.hazelcast.collection.impl.collection.CollectionContainer", "com.hazelcast.collection.impl.list.ListService.getOrCreateContainer(java.lang.String, boolean)"], ["com.hazelcast.transaction.TransactionalObject", "com.hazelcast.collection.impl.list.ListService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["java.lang.Object", "com.hazelcast.collection.impl.list.ListService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.collection.impl.list.ListService$1.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.list.ListContainer", "com.hazelcast.collection.impl.list.ListContainer()"], ["com.hazelcast.collection.impl.list.ListContainer", "com.hazelcast.collection.impl.list.ListContainer(java.lang.String, com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.collection.impl.list.ListContainer.getConfig()"], ["void", "com.hazelcast.collection.impl.list.ListContainer.rollbackRemove(long)"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.list.ListContainer.add(int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.list.ListContainer.get(int)"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.list.ListContainer.set(int, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.list.ListContainer.setBackup(long, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.list.ListContainer.remove(int)"], ["int", "com.hazelcast.collection.impl.list.ListContainer.indexOf(boolean, com.hazelcast.nio.serialization.Data)"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.list.ListContainer.addAll(int, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["java.util.Map<java.lang.Long, com.hazelcast.collection.impl.collection.CollectionItem>", "com.hazelcast.collection.impl.list.ListContainer.getMap()"], ["int", "com.hazelcast.collection.impl.list.ListContainer.getId()"], ["java.util.Collection", "com.hazelcast.collection.impl.list.ListContainer.getCollection()"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.collection.impl.list.ListContainer.getConfig()"], ["com.hazelcast.collection.impl.common.DataAwareItemEvent", "com.hazelcast.collection.impl.common.DataAwareItemEvent(java.lang.String, com.hazelcast.core.ItemEventType, com.hazelcast.nio.serialization.Data, com.hazelcast.core.Member, com.hazelcast.spi.serialization.SerializationService)"], ["E", "com.hazelcast.collection.impl.common.DataAwareItemEvent.getItem()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.collection.impl.common.DataAwareItemEvent.getItemData()"], ["com.hazelcast.collection.impl.txnset.TransactionalSetProxy", "com.hazelcast.collection.impl.txnset.TransactionalSetProxy(java.lang.String, com.hazelcast.transaction.impl.Transaction, com.hazelcast.spi.NodeEngine, com.hazelcast.collection.impl.set.SetService)"], ["boolean", "com.hazelcast.collection.impl.txnset.TransactionalSetProxy.add(E)"], ["java.lang.String", "com.hazelcast.collection.impl.txnset.TransactionalSetProxy.getServiceName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$40.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$40.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.collection.CollectionItem()"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.collection.CollectionItem(long, com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.collection.impl.collection.CollectionItem.getItemId()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.collection.impl.collection.CollectionItem.getValue()"], ["void", "com.hazelcast.collection.impl.collection.CollectionItem.setValue(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.collection.impl.collection.CollectionItem.getCreationTime()"], ["int", "com.hazelcast.collection.impl.collection.CollectionItem.compareTo(com.hazelcast.collection.impl.collection.CollectionItem)"], ["boolean", "com.hazelcast.collection.impl.collection.CollectionItem.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.collection.CollectionItem.hashCode()"], ["int", "com.hazelcast.collection.impl.collection.CollectionItem.getFactoryId()"], ["int", "com.hazelcast.collection.impl.collection.CollectionItem.getId()"], ["void", "com.hazelcast.collection.impl.collection.CollectionItem.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.collection.CollectionItem.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.collection.impl.collection.CollectionItem.compareTo(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$42.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$42.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$30.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.collection.TxCollectionItem", "com.hazelcast.collection.impl.collection.TxCollectionItem()"], ["com.hazelcast.collection.impl.collection.TxCollectionItem", "com.hazelcast.collection.impl.collection.TxCollectionItem(com.hazelcast.collection.impl.collection.CollectionItem)"], ["com.hazelcast.collection.impl.collection.TxCollectionItem", "com.hazelcast.collection.impl.collection.TxCollectionItem(long, com.hazelcast.nio.serialization.Data, java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.collection.impl.collection.TxCollectionItem.getTransactionId()"], ["boolean", "com.hazelcast.collection.impl.collection.TxCollectionItem.isRemoveOperation()"], ["com.hazelcast.collection.impl.collection.TxCollectionItem", "com.hazelcast.collection.impl.collection.TxCollectionItem.setTransactionId(java.lang.String)"], ["com.hazelcast.collection.impl.collection.TxCollectionItem", "com.hazelcast.collection.impl.collection.TxCollectionItem.setRemoveOperation(boolean)"], ["int", "com.hazelcast.collection.impl.collection.TxCollectionItem.getId()"], ["void", "com.hazelcast.collection.impl.collection.TxCollectionItem.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.collection.TxCollectionItem.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.collection.impl.collection.TxCollectionItem.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.collection.TxCollectionItem.hashCode()"], ["com.hazelcast.collection.impl.collection.operations.CollectionAddOperation", "com.hazelcast.collection.impl.collection.operations.CollectionAddOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionAddOperation", "com.hazelcast.collection.impl.collection.operations.CollectionAddOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.collection.impl.collection.operations.CollectionAddOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.collection.operations.CollectionAddOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionAddOperation.run()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionAddOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionAddOperation.getId()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionBackupAwareOperation.getSyncBackupCount()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionBackupAwareOperation.getAsyncBackupCount()"], ["com.hazelcast.collection.impl.collection.operations.CollectionAddBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionAddBackupOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionAddBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionAddBackupOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionAddBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionAddBackupOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionRemoveBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveBackupOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionRemoveBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveBackupOperation(java.lang.String, long)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveBackupOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionGetAllOperation", "com.hazelcast.collection.impl.collection.operations.CollectionGetAllOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionGetAllOperation", "com.hazelcast.collection.impl.collection.operations.CollectionGetAllOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionGetAllOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionGetAllOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionIsEmptyOperation", "com.hazelcast.collection.impl.collection.operations.CollectionIsEmptyOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionIsEmptyOperation", "com.hazelcast.collection.impl.collection.operations.CollectionIsEmptyOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionIsEmptyOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionIsEmptyOperation.getId()"], ["java.lang.String", "com.hazelcast.collection.impl.collection.operations.CollectionOperation.getName()"], ["boolean", "com.hazelcast.collection.impl.collection.operations.CollectionOperation.hasEnoughCapacity(int)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.operations.CollectionOperation.getResponse()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionOperation.getFactoryId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionContainsOperation", "com.hazelcast.collection.impl.collection.operations.CollectionContainsOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionContainsOperation", "com.hazelcast.collection.impl.collection.operations.CollectionContainsOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionContainsOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionContainsOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionClearOperation", "com.hazelcast.collection.impl.collection.operations.CollectionClearOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionClearOperation", "com.hazelcast.collection.impl.collection.operations.CollectionClearOperation(java.lang.String)"], ["boolean", "com.hazelcast.collection.impl.collection.operations.CollectionClearOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.collection.operations.CollectionClearOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionClearOperation.run()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionClearOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionClearOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionAddAllBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllBackupOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionAddAllBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllBackupOperation(java.lang.String, java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllBackupOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation.run()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation.getBackupOperation()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionRemoveOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionReplicationOperation", "com.hazelcast.collection.impl.collection.operations.CollectionReplicationOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionReplicationOperation", "com.hazelcast.collection.impl.collection.operations.CollectionReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.collection.impl.collection.CollectionContainer>, int, int)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionReplicationOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionReplicationOperation.getFactoryId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionMergeBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionMergeBackupOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionMergeBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionMergeBackupOperation(java.lang.String, java.util.Collection<com.hazelcast.collection.impl.collection.CollectionItem>)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionMergeBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionMergeBackupOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionClearBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionClearBackupOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionClearBackupOperation", "com.hazelcast.collection.impl.collection.operations.CollectionClearBackupOperation(java.lang.String, java.util.Set<java.lang.Long>)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionClearBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionClearBackupOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["boolean", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation.run()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionAddAllOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionSizeOperation", "com.hazelcast.collection.impl.collection.operations.CollectionSizeOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionSizeOperation", "com.hazelcast.collection.impl.collection.operations.CollectionSizeOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionSizeOperation.run()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionSizeOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation", "com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation()"], ["com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation", "com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation(java.lang.String, boolean, java.util.Set<com.hazelcast.nio.serialization.Data>)"], ["boolean", "com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation.run()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionCompareAndRemoveOperation.getId()"], ["com.hazelcast.collection.impl.collection.operations.CollectionMergeOperation", "com.hazelcast.collection.impl.collection.operations.CollectionMergeOperation(java.lang.String, com.hazelcast.spi.merge.SplitBrainMergePolicy<java.util.Collection<java.lang.Object>, com.hazelcast.spi.merge.SplitBrainMergeTypes$CollectionMergeTypes>, com.hazelcast.spi.merge.SplitBrainMergeTypes$CollectionMergeTypes)"], ["com.hazelcast.collection.impl.collection.operations.CollectionMergeOperation", "com.hazelcast.collection.impl.collection.operations.CollectionMergeOperation()"], ["void", "com.hazelcast.collection.impl.collection.operations.CollectionMergeOperation.run()"], ["boolean", "com.hazelcast.collection.impl.collection.operations.CollectionMergeOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.collection.operations.CollectionMergeOperation.getBackupOperation()"], ["int", "com.hazelcast.collection.impl.collection.operations.CollectionMergeOperation.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.collection.CollectionEvent", "com.hazelcast.collection.impl.collection.CollectionEvent()"], ["com.hazelcast.collection.impl.collection.CollectionEvent", "com.hazelcast.collection.impl.collection.CollectionEvent(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.core.ItemEventType, com.hazelcast.nio.Address)"], ["java.lang.String", "com.hazelcast.collection.impl.collection.CollectionEvent.getName()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.collection.impl.collection.CollectionEvent.getData()"], ["com.hazelcast.core.ItemEventType", "com.hazelcast.collection.impl.collection.CollectionEvent.getEventType()"], ["com.hazelcast.nio.Address", "com.hazelcast.collection.impl.collection.CollectionEvent.getCaller()"], ["int", "com.hazelcast.collection.impl.collection.CollectionEvent.getFactoryId()"], ["int", "com.hazelcast.collection.impl.collection.CollectionEvent.getId()"], ["void", "com.hazelcast.collection.impl.collection.CollectionEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.collection.CollectionEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$38.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$38.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$45.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$45.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$41.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$41.createNew(java.lang.Object)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.init(com.hazelcast.spi.NodeEngine)"], ["java.lang.String", "com.hazelcast.collection.impl.collection.CollectionContainer.getName()"], ["long", "com.hazelcast.collection.impl.collection.CollectionContainer.add(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.addBackup(long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.collection.CollectionContainer.remove(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.removeBackup(long)"], ["int", "com.hazelcast.collection.impl.collection.CollectionContainer.size()"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.collection.CollectionContainer.clear(boolean)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.clearBackup(java.util.Set<java.lang.Long>)"], ["boolean", "com.hazelcast.collection.impl.collection.CollectionContainer.contains(java.util.Set<com.hazelcast.nio.serialization.Data>)"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.collection.CollectionContainer.addAll(java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.addAllBackup(java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>)"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.collection.CollectionContainer.compareAndRemove(boolean, java.util.Set<com.hazelcast.nio.serialization.Data>)"], ["boolean", "com.hazelcast.collection.impl.collection.CollectionContainer.hasEnoughCapacity(int)"], ["java.lang.Long", "com.hazelcast.collection.impl.collection.CollectionContainer.reserveAdd(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.reserveAddBackup(long, java.lang.String)"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.collection.CollectionContainer.reserveRemove(long, com.hazelcast.nio.serialization.Data, java.lang.String)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.reserveRemoveBackup(long, java.lang.String)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.ensureReserve(long)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.rollbackAdd(long)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.rollbackAddBackup(long)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.rollbackRemove(long)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.rollbackRemoveBackup(long)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.commitAdd(long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.commitAddBackup(long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.collection.impl.collection.CollectionItem", "com.hazelcast.collection.impl.collection.CollectionContainer.commitRemove(long)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.commitRemoveBackup(long)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.rollbackTransaction(java.lang.String)"], ["long", "com.hazelcast.collection.impl.collection.CollectionContainer.nextId()"], ["long", "com.hazelcast.collection.impl.collection.CollectionContainer.getCurrentId()"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.destroy()"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.collection.CollectionContainer.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.collection.impl.collection.CollectionContainer.getFactoryId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$35.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$35.createNew(java.lang.Object)"], ["void", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.initialize()"], ["java.lang.String", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.getName()"], ["int", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.getPartitionId()"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.add(E)"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.remove(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.size()"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.isEmpty()"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.contains(java.lang.Object)"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.containsAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.retainAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.removeAll(java.util.Collection<?>)"], ["void", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.clear()"], ["java.lang.Object[]", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.toArray()"], ["<T> T[]", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.toArray(T[])"], ["java.lang.String", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.addItemListener(com.hazelcast.core.ItemListener<E>, boolean)"], ["boolean", "com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl.removeItemListener(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$32.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$32.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$37.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$37.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$43.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$43.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$26.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$18.createNew(java.lang.Object)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.reset()"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.shutdown(boolean)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.dispatchEvent(com.hazelcast.collection.impl.collection.CollectionEvent, com.hazelcast.core.ItemListener<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.rollbackTransaction(java.lang.String)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.addContainer(java.lang.String, com.hazelcast.collection.impl.collection.CollectionContainer)"], ["java.lang.Runnable", "com.hazelcast.collection.impl.collection.CollectionService.prepareMergeRunnable()"], ["void", "com.hazelcast.collection.impl.collection.CollectionService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.collection.CollectionDataSerializerHook", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook()"], ["int", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$23.createNew(java.lang.Object)"], ["void", "com.hazelcast.collection.impl.collection.CollectionService$Merger.runInternal()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$39.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$39.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$31.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$44.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$44.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$29.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$33.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$33.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$34.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$34.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.collection.CollectionEventFilter", "com.hazelcast.collection.impl.collection.CollectionEventFilter()"], ["com.hazelcast.collection.impl.collection.CollectionEventFilter", "com.hazelcast.collection.impl.collection.CollectionEventFilter(boolean)"], ["boolean", "com.hazelcast.collection.impl.collection.CollectionEventFilter.isIncludeValue()"], ["boolean", "com.hazelcast.collection.impl.collection.CollectionEventFilter.eval(java.lang.Object)"], ["boolean", "com.hazelcast.collection.impl.collection.CollectionEventFilter.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.collection.CollectionEventFilter.hashCode()"], ["int", "com.hazelcast.collection.impl.collection.CollectionEventFilter.getFactoryId()"], ["int", "com.hazelcast.collection.impl.collection.CollectionEventFilter.getId()"], ["void", "com.hazelcast.collection.impl.collection.CollectionEventFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.collection.CollectionEventFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$36.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$36.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$46.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook$46.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.QueueEvictionProcessor", "com.hazelcast.collection.impl.queue.QueueEvictionProcessor(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.collection.impl.queue.QueueEvictionProcessor.process(com.hazelcast.util.scheduler.EntryTaskScheduler<java.lang.String, java.lang.Void>, java.util.Collection<com.hazelcast.util.scheduler.ScheduledEntry<java.lang.String, java.lang.Void>>)"], ["com.hazelcast.collection.impl.queue.QueueDataSerializerHook", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook()"], ["int", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$45.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$45.createNew(java.lang.Object)"], ["void", "com.hazelcast.collection.impl.queue.QueueProxySupport.initialize()"], ["int", "com.hazelcast.collection.impl.queue.QueueProxySupport.getPartitionId()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxySupport.isEmpty()"], ["int", "com.hazelcast.collection.impl.queue.QueueProxySupport.size()"], ["int", "com.hazelcast.collection.impl.queue.QueueProxySupport.remainingCapacity()"], ["void", "com.hazelcast.collection.impl.queue.QueueProxySupport.clear()"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueProxySupport.getServiceName()"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueProxySupport.getName()"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueProxySupport.addItemListener(com.hazelcast.core.ItemListener, boolean)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxySupport.removeItemListener(java.lang.String)"], ["com.hazelcast.collection.impl.queue.QueueService", "com.hazelcast.collection.impl.queue.QueueService(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.scheduleEviction(java.lang.String, long)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.cancelEviction(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.reset()"], ["void", "com.hazelcast.collection.impl.queue.QueueService.shutdown(boolean)"], ["com.hazelcast.collection.impl.queue.QueueContainer", "com.hazelcast.collection.impl.queue.QueueService.getOrCreateContainer(java.lang.String, boolean)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.addContainer(java.lang.String, com.hazelcast.collection.impl.queue.QueueContainer)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueService.containsQueue(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.QueueService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.dispatchEvent(com.hazelcast.collection.impl.queue.QueueEvent, com.hazelcast.core.ItemListener)"], ["com.hazelcast.collection.impl.queue.QueueProxyImpl", "com.hazelcast.collection.impl.queue.QueueService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.destroyDistributedObject(java.lang.String)"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueService.addItemListener(java.lang.String, com.hazelcast.core.ItemListener, boolean, boolean)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueService.removeItemListener(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.collection.impl.queue.QueueService.getNodeEngine()"], ["com.hazelcast.monitor.LocalQueueStats", "com.hazelcast.collection.impl.queue.QueueService.createLocalQueueStats(java.lang.String, int)"], ["com.hazelcast.monitor.LocalQueueStats", "com.hazelcast.collection.impl.queue.QueueService.createLocalQueueStats(java.lang.String)"], ["com.hazelcast.monitor.impl.LocalQueueStatsImpl", "com.hazelcast.collection.impl.queue.QueueService.getLocalQueueStatsImpl(java.lang.String)"], ["com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy", "com.hazelcast.collection.impl.queue.QueueService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.rollbackTransaction(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalQueueStats>", "com.hazelcast.collection.impl.queue.QueueService.getStats()"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueService.getQuorumName(java.lang.String)"], ["java.lang.Runnable", "com.hazelcast.collection.impl.queue.QueueService.prepareMergeRunnable()"], ["com.hazelcast.transaction.TransactionalObject", "com.hazelcast.collection.impl.queue.QueueService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.collection.impl.queue.QueueService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.QueueService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.operations.AddAllBackupOperation", "com.hazelcast.collection.impl.queue.operations.AddAllBackupOperation()"], ["com.hazelcast.collection.impl.queue.operations.AddAllBackupOperation", "com.hazelcast.collection.impl.queue.operations.AddAllBackupOperation(java.lang.String, java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.queue.operations.AddAllBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.queue.operations.AddAllBackupOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.DrainOperation", "com.hazelcast.collection.impl.queue.operations.DrainOperation()"], ["com.hazelcast.collection.impl.queue.operations.DrainOperation", "com.hazelcast.collection.impl.queue.operations.DrainOperation(java.lang.String, int)"], ["void", "com.hazelcast.collection.impl.queue.operations.DrainOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.DrainOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.DrainOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.operations.DrainOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.DrainOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.DrainOperation.getNotifiedKey()"], ["int", "com.hazelcast.collection.impl.queue.operations.DrainOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation()"], ["com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, boolean)"], ["void", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation.getNotifiedKey()"], ["int", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.QueueReplicationOperation", "com.hazelcast.collection.impl.queue.operations.QueueReplicationOperation()"], ["com.hazelcast.collection.impl.queue.operations.QueueReplicationOperation", "com.hazelcast.collection.impl.queue.operations.QueueReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.collection.impl.queue.QueueContainer>, int, int)"], ["void", "com.hazelcast.collection.impl.queue.operations.QueueReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.collection.impl.queue.operations.QueueReplicationOperation.getServiceName()"], ["int", "com.hazelcast.collection.impl.queue.operations.QueueReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.operations.QueueReplicationOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.CompareAndRemoveBackupOperation", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveBackupOperation()"], ["com.hazelcast.collection.impl.queue.operations.CompareAndRemoveBackupOperation", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveBackupOperation(java.lang.String, java.util.Set<java.lang.Long>)"], ["void", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.queue.operations.CompareAndRemoveBackupOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.IsEmptyOperation", "com.hazelcast.collection.impl.queue.operations.IsEmptyOperation()"], ["com.hazelcast.collection.impl.queue.operations.IsEmptyOperation", "com.hazelcast.collection.impl.queue.operations.IsEmptyOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.operations.IsEmptyOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.IsEmptyOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.queue.operations.IsEmptyOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.QueueMergeBackupOperation", "com.hazelcast.collection.impl.queue.operations.QueueMergeBackupOperation()"], ["com.hazelcast.collection.impl.queue.operations.QueueMergeBackupOperation", "com.hazelcast.collection.impl.queue.operations.QueueMergeBackupOperation(java.lang.String, java.util.Collection<com.hazelcast.collection.impl.queue.QueueItem>)"], ["void", "com.hazelcast.collection.impl.queue.operations.QueueMergeBackupOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.QueueMergeBackupOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.queue.operations.QueueMergeBackupOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.OfferBackupOperation", "com.hazelcast.collection.impl.queue.operations.OfferBackupOperation()"], ["com.hazelcast.collection.impl.queue.operations.OfferBackupOperation", "com.hazelcast.collection.impl.queue.operations.OfferBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.collection.impl.queue.operations.OfferBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.queue.operations.OfferBackupOperation.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.operations.OfferBackupOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.PeekOperation", "com.hazelcast.collection.impl.queue.operations.PeekOperation()"], ["com.hazelcast.collection.impl.queue.operations.PeekOperation", "com.hazelcast.collection.impl.queue.operations.PeekOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.operations.PeekOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.PeekOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.queue.operations.PeekOperation.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.operations.PeekOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.ClearOperation", "com.hazelcast.collection.impl.queue.operations.ClearOperation()"], ["com.hazelcast.collection.impl.queue.operations.ClearOperation", "com.hazelcast.collection.impl.queue.operations.ClearOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.operations.ClearOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.ClearOperation.afterRun()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.operations.ClearOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.ClearOperation.shouldBackup()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.ClearOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.ClearOperation.getNotifiedKey()"], ["int", "com.hazelcast.collection.impl.queue.operations.ClearOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.AddAllOperation", "com.hazelcast.collection.impl.queue.operations.AddAllOperation()"], ["com.hazelcast.collection.impl.queue.operations.AddAllOperation", "com.hazelcast.collection.impl.queue.operations.AddAllOperation(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.queue.operations.AddAllOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.AddAllOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.AddAllOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.operations.AddAllOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.AddAllOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.AddAllOperation.getNotifiedKey()"], ["int", "com.hazelcast.collection.impl.queue.operations.AddAllOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.DrainBackupOperation", "com.hazelcast.collection.impl.queue.operations.DrainBackupOperation()"], ["com.hazelcast.collection.impl.queue.operations.DrainBackupOperation", "com.hazelcast.collection.impl.queue.operations.DrainBackupOperation(java.lang.String, java.util.Set<java.lang.Long>)"], ["void", "com.hazelcast.collection.impl.queue.operations.DrainBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.queue.operations.DrainBackupOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.PollBackupOperation", "com.hazelcast.collection.impl.queue.operations.PollBackupOperation()"], ["com.hazelcast.collection.impl.queue.operations.PollBackupOperation", "com.hazelcast.collection.impl.queue.operations.PollBackupOperation(java.lang.String, long)"], ["void", "com.hazelcast.collection.impl.queue.operations.PollBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.queue.operations.PollBackupOperation.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.operations.PollBackupOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.CheckAndEvictOperation", "com.hazelcast.collection.impl.queue.operations.CheckAndEvictOperation()"], ["com.hazelcast.collection.impl.queue.operations.CheckAndEvictOperation", "com.hazelcast.collection.impl.queue.operations.CheckAndEvictOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.operations.CheckAndEvictOperation.run()"], ["int", "com.hazelcast.collection.impl.queue.operations.CheckAndEvictOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.RemoveOperation", "com.hazelcast.collection.impl.queue.operations.RemoveOperation()"], ["com.hazelcast.collection.impl.queue.operations.RemoveOperation", "com.hazelcast.collection.impl.queue.operations.RemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.queue.operations.RemoveOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.RemoveOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.RemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.operations.RemoveOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.RemoveOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.RemoveOperation.getNotifiedKey()"], ["int", "com.hazelcast.collection.impl.queue.operations.RemoveOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.ContainsOperation", "com.hazelcast.collection.impl.queue.operations.ContainsOperation()"], ["com.hazelcast.collection.impl.queue.operations.ContainsOperation", "com.hazelcast.collection.impl.queue.operations.ContainsOperation(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.queue.operations.ContainsOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.ContainsOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.queue.operations.ContainsOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.RemainingCapacityOperation", "com.hazelcast.collection.impl.queue.operations.RemainingCapacityOperation()"], ["com.hazelcast.collection.impl.queue.operations.RemainingCapacityOperation", "com.hazelcast.collection.impl.queue.operations.RemainingCapacityOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.operations.RemainingCapacityOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.RemainingCapacityOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.queue.operations.RemainingCapacityOperation.getId()"], ["int", "com.hazelcast.collection.impl.queue.operations.QueueBackupAwareOperation.getSyncBackupCount()"], ["int", "com.hazelcast.collection.impl.queue.operations.QueueBackupAwareOperation.getAsyncBackupCount()"], ["com.hazelcast.collection.impl.queue.operations.SizeOperation", "com.hazelcast.collection.impl.queue.operations.SizeOperation()"], ["com.hazelcast.collection.impl.queue.operations.SizeOperation", "com.hazelcast.collection.impl.queue.operations.SizeOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.operations.SizeOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.SizeOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.queue.operations.SizeOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.IteratorOperation", "com.hazelcast.collection.impl.queue.operations.IteratorOperation()"], ["com.hazelcast.collection.impl.queue.operations.IteratorOperation", "com.hazelcast.collection.impl.queue.operations.IteratorOperation(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.operations.IteratorOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.IteratorOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.queue.operations.IteratorOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.OfferOperation", "com.hazelcast.collection.impl.queue.operations.OfferOperation()"], ["com.hazelcast.collection.impl.queue.operations.OfferOperation", "com.hazelcast.collection.impl.queue.operations.OfferOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.queue.operations.OfferOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.OfferOperation.afterRun()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.operations.OfferOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.OfferOperation.shouldBackup()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.OfferOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.OfferOperation.getNotifiedKey()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.OfferOperation.getWaitKey()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.OfferOperation.shouldWait()"], ["void", "com.hazelcast.collection.impl.queue.operations.OfferOperation.onWaitExpire()"], ["int", "com.hazelcast.collection.impl.queue.operations.OfferOperation.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.operations.OfferOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.PollOperation", "com.hazelcast.collection.impl.queue.operations.PollOperation()"], ["com.hazelcast.collection.impl.queue.operations.PollOperation", "com.hazelcast.collection.impl.queue.operations.PollOperation(java.lang.String, long)"], ["void", "com.hazelcast.collection.impl.queue.operations.PollOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.PollOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.PollOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.operations.PollOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.PollOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.PollOperation.getNotifiedKey()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.queue.operations.PollOperation.getWaitKey()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.PollOperation.shouldWait()"], ["void", "com.hazelcast.collection.impl.queue.operations.PollOperation.onWaitExpire()"], ["int", "com.hazelcast.collection.impl.queue.operations.PollOperation.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.operations.PollOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.RemoveBackupOperation", "com.hazelcast.collection.impl.queue.operations.RemoveBackupOperation()"], ["com.hazelcast.collection.impl.queue.operations.RemoveBackupOperation", "com.hazelcast.collection.impl.queue.operations.RemoveBackupOperation(java.lang.String, long)"], ["void", "com.hazelcast.collection.impl.queue.operations.RemoveBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.queue.operations.RemoveBackupOperation.getId()"], ["com.hazelcast.collection.impl.queue.operations.QueueMergeOperation", "com.hazelcast.collection.impl.queue.operations.QueueMergeOperation()"], ["com.hazelcast.collection.impl.queue.operations.QueueMergeOperation", "com.hazelcast.collection.impl.queue.operations.QueueMergeOperation(java.lang.String, com.hazelcast.spi.merge.SplitBrainMergePolicy<java.util.Collection<java.lang.Object>, com.hazelcast.spi.merge.SplitBrainMergeTypes$QueueMergeTypes>, com.hazelcast.spi.merge.SplitBrainMergeTypes$QueueMergeTypes)"], ["void", "com.hazelcast.collection.impl.queue.operations.QueueMergeOperation.run()"], ["void", "com.hazelcast.collection.impl.queue.operations.QueueMergeOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.QueueMergeOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.queue.operations.QueueMergeOperation.getBackupOperation()"], ["int", "com.hazelcast.collection.impl.queue.operations.QueueMergeOperation.getId()"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.operations.QueueOperation.getResponse()"], ["java.lang.String", "com.hazelcast.collection.impl.queue.operations.QueueOperation.getServiceName()"], ["void", "com.hazelcast.collection.impl.queue.operations.QueueOperation.afterRun()"], ["void", "com.hazelcast.collection.impl.queue.operations.QueueOperation.beforeRun()"], ["boolean", "com.hazelcast.collection.impl.queue.operations.QueueOperation.hasListener()"], ["void", "com.hazelcast.collection.impl.queue.operations.QueueOperation.publishEvent(com.hazelcast.core.ItemEventType, com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.collection.impl.queue.operations.QueueOperation.getFactoryId()"], ["com.hazelcast.collection.impl.queue.operations.ClearBackupOperation", "com.hazelcast.collection.impl.queue.operations.ClearBackupOperation()"], ["com.hazelcast.collection.impl.queue.operations.ClearBackupOperation", "com.hazelcast.collection.impl.queue.operations.ClearBackupOperation(java.lang.String, java.util.Set<java.lang.Long>)"], ["void", "com.hazelcast.collection.impl.queue.operations.ClearBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.queue.operations.ClearBackupOperation.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$31.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$35.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$35.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.QueueWaitNotifyKey", "com.hazelcast.collection.impl.queue.QueueWaitNotifyKey(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueWaitNotifyKey.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.queue.QueueWaitNotifyKey.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$43.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$43.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$37.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$37.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.QueueProxyImpl", "com.hazelcast.collection.impl.queue.QueueProxyImpl(java.lang.String, com.hazelcast.collection.impl.queue.QueueService, com.hazelcast.spi.NodeEngine, com.hazelcast.config.QueueConfig)"], ["com.hazelcast.monitor.LocalQueueStats", "com.hazelcast.collection.impl.queue.QueueProxyImpl.getLocalQueueStats()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.add(E)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.offer(E)"], ["void", "com.hazelcast.collection.impl.queue.QueueProxyImpl.put(E)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "com.hazelcast.collection.impl.queue.QueueProxyImpl.take()"], ["E", "com.hazelcast.collection.impl.queue.QueueProxyImpl.poll(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.remove(java.lang.Object)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.contains(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.queue.QueueProxyImpl.drainTo(java.util.Collection<? super E>)"], ["int", "com.hazelcast.collection.impl.queue.QueueProxyImpl.drainTo(java.util.Collection<? super E>, int)"], ["E", "com.hazelcast.collection.impl.queue.QueueProxyImpl.remove()"], ["E", "com.hazelcast.collection.impl.queue.QueueProxyImpl.poll()"], ["E", "com.hazelcast.collection.impl.queue.QueueProxyImpl.element()"], ["E", "com.hazelcast.collection.impl.queue.QueueProxyImpl.peek()"], ["java.lang.Object[]", "com.hazelcast.collection.impl.queue.QueueProxyImpl.toArray()"], ["<T> T[]", "com.hazelcast.collection.impl.queue.QueueProxyImpl.toArray(T[])"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.containsAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.removeAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.retainAll(java.util.Collection<?>)"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueProxyImpl.toString()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.removeItemListener(java.lang.String)"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueProxyImpl.addItemListener(com.hazelcast.core.ItemListener, boolean)"], ["void", "com.hazelcast.collection.impl.queue.QueueProxyImpl.clear()"], ["int", "com.hazelcast.collection.impl.queue.QueueProxyImpl.remainingCapacity()"], ["int", "com.hazelcast.collection.impl.queue.QueueProxyImpl.size()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueProxyImpl.isEmpty()"], ["int", "com.hazelcast.collection.impl.queue.QueueProxyImpl.getPartitionId()"], ["void", "com.hazelcast.collection.impl.queue.QueueProxyImpl.initialize()"], ["com.hazelcast.collection.impl.queue.QueueContainer", "com.hazelcast.collection.impl.queue.QueueContainer()"], ["com.hazelcast.collection.impl.queue.QueueContainer", "com.hazelcast.collection.impl.queue.QueueContainer(java.lang.String)"], ["com.hazelcast.collection.impl.queue.QueueContainer", "com.hazelcast.collection.impl.queue.QueueContainer(java.lang.String, com.hazelcast.config.QueueConfig, com.hazelcast.spi.NodeEngine, com.hazelcast.collection.impl.queue.QueueService)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.init(boolean)"], ["com.hazelcast.collection.impl.queue.QueueStoreWrapper", "com.hazelcast.collection.impl.queue.QueueContainer.getStore()"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueContainer.getName()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.txnCheckReserve(long)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.txnEnsureBackupReserve(long, java.lang.String, boolean)"], ["com.hazelcast.collection.impl.queue.QueueItem", "com.hazelcast.collection.impl.queue.QueueContainer.txnPollReserve(long, java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.txnPollBackupReserve(long, java.lang.String)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.collection.impl.queue.QueueContainer.txnCommitPoll(long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.collection.impl.queue.QueueContainer.txnCommitPollBackup(long)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.txnRollbackPoll(long, boolean)"], ["long", "com.hazelcast.collection.impl.queue.QueueContainer.txnOfferReserve(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.txnOfferBackupReserve(long, java.lang.String)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.txnCommitOffer(long, com.hazelcast.nio.serialization.Data, boolean)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.txnRollbackOffer(long)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.txnRollbackOfferBackup(long)"], ["com.hazelcast.collection.impl.queue.QueueItem", "com.hazelcast.collection.impl.queue.QueueContainer.txnPeek(long, java.lang.String)"], ["long", "com.hazelcast.collection.impl.queue.QueueContainer.offer(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.offerBackup(com.hazelcast.nio.serialization.Data, long)"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.queue.QueueContainer.addAll(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.addAllBackup(java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.collection.impl.queue.QueueItem", "com.hazelcast.collection.impl.queue.QueueContainer.peek()"], ["com.hazelcast.collection.impl.queue.QueueItem", "com.hazelcast.collection.impl.queue.QueueContainer.poll()"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.pollBackup(long)"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.queue.QueueContainer.drain(int)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.mapDrainIterator(int, java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.drainFromBackup(java.util.Set<java.lang.Long>)"], ["int", "com.hazelcast.collection.impl.queue.QueueContainer.size()"], ["int", "com.hazelcast.collection.impl.queue.QueueContainer.txMapSize()"], ["int", "com.hazelcast.collection.impl.queue.QueueContainer.backupSize()"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.queue.QueueContainer.clear()"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.clearBackup(java.util.Set<java.lang.Long>)"], ["long", "com.hazelcast.collection.impl.queue.QueueContainer.remove(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.removeBackup(long)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.contains(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.queue.QueueContainer.compareAndRemove(java.util.Collection<com.hazelcast.nio.serialization.Data>, boolean)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.mapIterateAndRemove(java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.compareAndRemoveBackup(java.util.Set<java.lang.Long>)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.hasEnoughCapacity()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.hasEnoughCapacity(int)"], ["java.util.Map<java.lang.Long, com.hazelcast.collection.impl.queue.QueueItem>", "com.hazelcast.collection.impl.queue.QueueContainer.getBackupMap()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.collection.impl.queue.QueueContainer.getDataFromMap(long)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.setConfig(com.hazelcast.config.QueueConfig, com.hazelcast.spi.NodeEngine, com.hazelcast.collection.impl.queue.QueueService)"], ["long", "com.hazelcast.collection.impl.queue.QueueContainer.getCurrentId()"], ["com.hazelcast.collection.impl.queue.QueueWaitNotifyKey", "com.hazelcast.collection.impl.queue.QueueContainer.getPollWaitNotifyKey()"], ["com.hazelcast.collection.impl.queue.QueueWaitNotifyKey", "com.hazelcast.collection.impl.queue.QueueContainer.getOfferWaitNotifyKey()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.collection.impl.queue.QueueContainer.getConfig()"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.setStats(com.hazelcast.monitor.impl.LocalQueueStatsImpl)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.cancelEvictionIfExists()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueContainer.isEvictable()"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.rollbackTransaction(java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.collection.impl.queue.QueueContainer.destroy()"], ["int", "com.hazelcast.collection.impl.queue.QueueContainer.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.QueueContainer.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$29.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$41.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$41.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$38.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$38.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$30.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.QueueEventFilter", "com.hazelcast.collection.impl.queue.QueueEventFilter()"], ["com.hazelcast.collection.impl.queue.QueueEventFilter", "com.hazelcast.collection.impl.queue.QueueEventFilter(boolean)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueEventFilter.isIncludeValue()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueEventFilter.eval(java.lang.Object)"], ["void", "com.hazelcast.collection.impl.queue.QueueEventFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.queue.QueueEventFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.collection.impl.queue.QueueEventFilter.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.QueueEventFilter.getId()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueEventFilter.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.queue.QueueEventFilter.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.QueueEvent", "com.hazelcast.collection.impl.queue.QueueEvent()"], ["com.hazelcast.collection.impl.queue.QueueEvent", "com.hazelcast.collection.impl.queue.QueueEvent(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.core.ItemEventType, com.hazelcast.nio.Address)"], ["void", "com.hazelcast.collection.impl.queue.QueueEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.queue.QueueEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.collection.impl.queue.QueueEvent.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.QueueEvent.getId()"], ["java.lang.String", "com.hazelcast.collection.impl.queue.QueueEvent.getName()"], ["com.hazelcast.core.ItemEventType", "com.hazelcast.collection.impl.queue.QueueEvent.getEventType()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$23.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.QueueItem", "com.hazelcast.collection.impl.queue.QueueItem()"], ["com.hazelcast.collection.impl.queue.QueueItem", "com.hazelcast.collection.impl.queue.QueueItem(com.hazelcast.collection.impl.queue.QueueContainer, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.collection.impl.queue.QueueItem.getData()"], ["void", "com.hazelcast.collection.impl.queue.QueueItem.setData(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.collection.impl.queue.QueueItem.getItemId()"], ["void", "com.hazelcast.collection.impl.queue.QueueItem.setItemId(long)"], ["long", "com.hazelcast.collection.impl.queue.QueueItem.getCreationTime()"], ["com.hazelcast.collection.impl.queue.QueueContainer", "com.hazelcast.collection.impl.queue.QueueItem.getContainer()"], ["int", "com.hazelcast.collection.impl.queue.QueueItem.getFactoryId()"], ["int", "com.hazelcast.collection.impl.queue.QueueItem.getId()"], ["void", "com.hazelcast.collection.impl.queue.QueueItem.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.queue.QueueItem.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.collection.impl.queue.QueueItem.compareTo(com.hazelcast.collection.impl.queue.QueueItem)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueItem.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.queue.QueueItem.hashCode()"], ["int", "com.hazelcast.collection.impl.queue.QueueItem.compareTo(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$32.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$32.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.monitor.impl.LocalQueueStatsImpl", "com.hazelcast.collection.impl.queue.QueueService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueService$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$39.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$39.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$33.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$33.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$40.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$40.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$42.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$42.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.QueueStoreWrapper", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.create(java.lang.String, com.hazelcast.config.QueueStoreConfig, com.hazelcast.spi.serialization.SerializationService, java.lang.ClassLoader)"], ["void", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.store(java.lang.Long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.storeAll(java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.delete(java.lang.Long)"], ["void", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.deleteAll(java.util.Collection<java.lang.Long>)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.load(java.lang.Long)"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.loadAll(java.util.Collection<java.lang.Long>)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.isEnabled()"], ["boolean", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.isBinary()"], ["int", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.getMemoryLimit()"], ["int", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.getBulkLoad()"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.load(java.lang.Long)"], ["void", "com.hazelcast.collection.impl.queue.QueueStoreWrapper.store(java.lang.Long, java.lang.Object)"], ["com.hazelcast.collection.impl.queue.LatencyTrackingQueueStore", "com.hazelcast.collection.impl.queue.LatencyTrackingQueueStore(com.hazelcast.core.QueueStore<T>, com.hazelcast.internal.diagnostics.StoreLatencyPlugin, java.lang.String)"], ["void", "com.hazelcast.collection.impl.queue.LatencyTrackingQueueStore.store(java.lang.Long, T)"], ["void", "com.hazelcast.collection.impl.queue.LatencyTrackingQueueStore.storeAll(java.util.Map<java.lang.Long, T>)"], ["void", "com.hazelcast.collection.impl.queue.LatencyTrackingQueueStore.delete(java.lang.Long)"], ["void", "com.hazelcast.collection.impl.queue.LatencyTrackingQueueStore.deleteAll(java.util.Collection<java.lang.Long>)"], ["T", "com.hazelcast.collection.impl.queue.LatencyTrackingQueueStore.load(java.lang.Long)"], ["java.util.Map<java.lang.Long, T>", "com.hazelcast.collection.impl.queue.LatencyTrackingQueueStore.loadAll(java.util.Collection<java.lang.Long>)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$26.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$44.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$44.createNew(java.lang.Object)"], ["void", "com.hazelcast.collection.impl.queue.QueueService$Merger.runInternal()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$34.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$34.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$22.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueService$2.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.queue.QueueIterator", "com.hazelcast.collection.impl.queue.QueueIterator(java.util.Iterator<com.hazelcast.nio.serialization.Data>, com.hazelcast.spi.serialization.SerializationService, boolean)"], ["boolean", "com.hazelcast.collection.impl.queue.QueueIterator.hasNext()"], ["E", "com.hazelcast.collection.impl.queue.QueueIterator.next()"], ["void", "com.hazelcast.collection.impl.queue.QueueIterator.remove()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$36.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$36.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.collection.impl.queue.QueueDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.set.operations.SetReplicationOperation", "com.hazelcast.collection.impl.set.operations.SetReplicationOperation()"], ["com.hazelcast.collection.impl.set.operations.SetReplicationOperation", "com.hazelcast.collection.impl.set.operations.SetReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.collection.impl.collection.CollectionContainer>, int, int)"], ["int", "com.hazelcast.collection.impl.set.operations.SetReplicationOperation.getId()"], ["com.hazelcast.collection.impl.set.SetProxyImpl", "com.hazelcast.collection.impl.set.SetProxyImpl(java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.collection.impl.set.SetService)"], ["java.lang.String", "com.hazelcast.collection.impl.set.SetProxyImpl.getServiceName()"], ["com.hazelcast.collection.impl.set.SetService", "com.hazelcast.collection.impl.set.SetService(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.collection.impl.set.SetContainer", "com.hazelcast.collection.impl.set.SetService.getOrCreateContainer(java.lang.String, boolean)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, ? extends com.hazelcast.collection.impl.collection.CollectionContainer>", "com.hazelcast.collection.impl.set.SetService.getContainerMap()"], ["java.lang.String", "com.hazelcast.collection.impl.set.SetService.getServiceName()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.collection.impl.set.SetService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.collection.impl.set.SetService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.collection.impl.txnset.TransactionalSetProxy", "com.hazelcast.collection.impl.set.SetService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.set.SetService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["java.lang.String", "com.hazelcast.collection.impl.set.SetService.getQuorumName(java.lang.String)"], ["com.hazelcast.collection.impl.collection.CollectionContainer", "com.hazelcast.collection.impl.set.SetService.getOrCreateContainer(java.lang.String, boolean)"], ["com.hazelcast.transaction.TransactionalObject", "com.hazelcast.collection.impl.set.SetService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["com.hazelcast.collection.impl.set.SetContainer", "com.hazelcast.collection.impl.set.SetContainer()"], ["com.hazelcast.collection.impl.set.SetContainer", "com.hazelcast.collection.impl.set.SetContainer(java.lang.String, com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.collection.impl.set.SetContainer.getConfig()"], ["java.util.Map<java.lang.Long, com.hazelcast.nio.serialization.Data>", "com.hazelcast.collection.impl.set.SetContainer.addAll(java.util.List<com.hazelcast.nio.serialization.Data>)"], ["java.util.Map<java.lang.Long, com.hazelcast.collection.impl.collection.CollectionItem>", "com.hazelcast.collection.impl.set.SetContainer.getMap()"], ["int", "com.hazelcast.collection.impl.set.SetContainer.getId()"], ["java.util.Collection", "com.hazelcast.collection.impl.set.SetContainer.getCollection()"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.collection.impl.set.SetContainer.getConfig()"], ["java.lang.Object", "com.hazelcast.collection.impl.set.SetService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.collection.impl.set.SetService$1.createNew(java.lang.Object)"], ["com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy(com.hazelcast.spi.NodeEngine, com.hazelcast.collection.impl.queue.QueueService, java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["boolean", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy.offer(E)"], ["boolean", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy.take()"], ["E", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy.poll()"], ["E", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy.poll(long, java.util.concurrent.TimeUnit)"], ["E", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy.peek()"], ["E", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy.peek(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxy.toString()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation(java.lang.String, long, long, java.lang.String)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation.run()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation.getWaitKey()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation.shouldWait()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation.onWaitExpire()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation.getBackupOperation()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation(java.lang.String, long)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation.run()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation.getNotifiedKey()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation.isRemoveOperation()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation(java.lang.String, long, long, java.lang.String)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation.run()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation.getId()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation.getWaitKey()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation.shouldWait()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnPeekOperation.onWaitExpire()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation(int, java.lang.String, java.util.List<com.hazelcast.spi.Operation>)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation.beforeRun()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation.run()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation.getNotifiedKey()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnOfferBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferBackupOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnOfferBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferBackupOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferBackupOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferBackupOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferBackupOperation(java.lang.String, long, java.lang.String)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferBackupOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackBackupOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackBackupOperation(java.lang.String, long[])"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackBackupOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollBackupOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollBackupOperation(java.lang.String, long, java.lang.String)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnReservePollBackupOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.BaseTxnQueueOperation", "com.hazelcast.collection.impl.txnqueue.operations.BaseTxnQueueOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.BaseTxnQueueOperation", "com.hazelcast.collection.impl.txnqueue.operations.BaseTxnQueueOperation(java.lang.String, long)"], ["long", "com.hazelcast.collection.impl.txnqueue.operations.BaseTxnQueueOperation.getItemId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation(java.lang.String, long, int, java.lang.String)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation.run()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation.getWaitKey()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation.shouldWait()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation.onWaitExpire()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation.getBackupOperation()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnReserveOfferOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnCommitBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitBackupOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnCommitBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitBackupOperation(java.lang.String, java.util.List<com.hazelcast.spi.Operation>)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitBackupOperation.beforeRun()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitBackupOperation.run()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitBackupOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnCommitBackupOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPollBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollBackupOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPollBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollBackupOperation(java.lang.String, long)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnPollBackupOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareBackupOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareBackupOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareBackupOperation(java.lang.String, long[], java.lang.String)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareBackupOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation.run()"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation.getNotifiedKey()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation.isRemoveOperation()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnOfferOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.QueueTransactionRollbackOperation", "com.hazelcast.collection.impl.txnqueue.operations.QueueTransactionRollbackOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.QueueTransactionRollbackOperation", "com.hazelcast.collection.impl.txnqueue.operations.QueueTransactionRollbackOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.QueueTransactionRollbackOperation.run()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.QueueTransactionRollbackOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation(int, java.lang.String, long[])"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation.run()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation.getBackupOperation()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation.getNotifiedKey()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnRollbackOperation.getId()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareOperation()"], ["com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareOperation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareOperation(int, java.lang.String, long[], java.lang.String)"], ["void", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareOperation.run()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareOperation.getBackupOperation()"], ["int", "com.hazelcast.collection.impl.txnqueue.operations.TxnPrepareOperation.getId()"], ["java.lang.String", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxySupport.getName()"], ["java.lang.String", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxySupport.getServiceName()"], ["int", "com.hazelcast.collection.impl.txnqueue.TransactionalQueueProxySupport.size()"], ["com.hazelcast.collection.impl.txnqueue.TxQueueItem", "com.hazelcast.collection.impl.txnqueue.TxQueueItem()"], ["com.hazelcast.collection.impl.txnqueue.TxQueueItem", "com.hazelcast.collection.impl.txnqueue.TxQueueItem(com.hazelcast.collection.impl.queue.QueueItem)"], ["com.hazelcast.collection.impl.txnqueue.TxQueueItem", "com.hazelcast.collection.impl.txnqueue.TxQueueItem(com.hazelcast.collection.impl.queue.QueueContainer, long, com.hazelcast.nio.serialization.Data)"], ["java.lang.String", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.getTransactionId()"], ["com.hazelcast.collection.impl.txnqueue.TxQueueItem", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.setTransactionId(java.lang.String)"], ["boolean", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.isPollOperation()"], ["com.hazelcast.collection.impl.txnqueue.TxQueueItem", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.setPollOperation(boolean)"], ["void", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.getId()"], ["boolean", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.txnqueue.TxQueueItem.hashCode()"], ["com.hazelcast.collection.impl.txnqueue.QueueTransactionLogRecord", "com.hazelcast.collection.impl.txnqueue.QueueTransactionLogRecord()"], ["com.hazelcast.collection.impl.txnqueue.QueueTransactionLogRecord", "com.hazelcast.collection.impl.txnqueue.QueueTransactionLogRecord(java.lang.String, java.lang.String, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.QueueTransactionLogRecord.newPrepareOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.QueueTransactionLogRecord.newCommitOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txnqueue.QueueTransactionLogRecord.newRollbackOperation()"], ["int", "com.hazelcast.collection.impl.txnqueue.QueueTransactionLogRecord.getId()"], ["com.hazelcast.collection.impl.txnqueue.TransactionLogRecordKey", "com.hazelcast.collection.impl.txnqueue.TransactionLogRecordKey(long, java.lang.String)"], ["boolean", "com.hazelcast.collection.impl.txnqueue.TransactionLogRecordKey.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.txnqueue.TransactionLogRecordKey.hashCode()"], ["long", "com.hazelcast.collection.impl.CollectionTxnUtil.getItemId(com.hazelcast.collection.impl.txncollection.CollectionTxnOperation)"], ["boolean", "com.hazelcast.collection.impl.CollectionTxnUtil.isRemove(long)"], ["void", "com.hazelcast.collection.impl.CollectionTxnUtil.before(java.util.List<com.hazelcast.spi.Operation>, com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.collection.impl.CollectionTxnUtil.after(java.util.List<com.hazelcast.spi.Operation>)"], ["void", "com.hazelcast.collection.impl.CollectionTxnUtil.write(com.hazelcast.nio.ObjectDataOutput, java.util.List<com.hazelcast.spi.Operation>)"], ["com.hazelcast.collection.impl.txnlist.TransactionalListProxy", "com.hazelcast.collection.impl.txnlist.TransactionalListProxy(java.lang.String, com.hazelcast.transaction.impl.Transaction, com.hazelcast.spi.NodeEngine, com.hazelcast.collection.impl.list.ListService)"], ["java.lang.String", "com.hazelcast.collection.impl.txnlist.TransactionalListProxy.getServiceName()"], ["com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord()"], ["com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord(java.lang.String, java.lang.String, java.lang.String, int)"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.newPrepareOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.newCommitOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.newRollbackOperation()"], ["java.lang.Object", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.getKey()"], ["void", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.addOperation(com.hazelcast.collection.impl.txncollection.CollectionTxnOperation)"], ["int", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.removeOperation(long)"], ["void", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.getFactoryId()"], ["int", "com.hazelcast.collection.impl.txncollection.CollectionTransactionLogRecord.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionCommitBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitBackupOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionCommitBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitBackupOperation(java.lang.String, java.lang.String, java.util.List<com.hazelcast.spi.Operation>)"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitBackupOperation.beforeRun()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitBackupOperation.run()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitBackupOperation.afterRun()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitBackupOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTransactionRollbackOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTransactionRollbackOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTransactionRollbackOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTransactionRollbackOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionTransactionRollbackOperation.run()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionTransactionRollbackOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation(int, java.lang.String, java.lang.String, java.util.List<com.hazelcast.spi.Operation>)"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation.beforeRun()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation.run()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation.afterRun()"], ["boolean", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation.getBackupOperation()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionCommitOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveBackupOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveBackupOperation(java.lang.String, long)"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveBackupOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackOperation(int, java.lang.String, java.lang.String, long[])"], ["boolean", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackOperation.run()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionReserveRemoveOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionReserveRemoveOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionReserveRemoveOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionReserveRemoveOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data, java.lang.String)"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionReserveRemoveOperation.getId()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionReserveRemoveOperation.run()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddBackupOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddBackupOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddBackupOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareBackupOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareBackupOperation(java.lang.String, long[], java.lang.String)"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareBackupOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionReserveAddOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionReserveAddOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionReserveAddOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionReserveAddOperation(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionReserveAddOperation.run()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionReserveAddOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation.run()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation.afterRun()"], ["long", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation.getItemId()"], ["boolean", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation.isRemoveOperation()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnAddOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackBackupOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackBackupOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackBackupOperation(java.lang.String, long[])"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackBackupOperation.run()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionRollbackBackupOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation(java.lang.String, long)"], ["boolean", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation.run()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation.afterRun()"], ["long", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation.getItemId()"], ["boolean", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation.isRemoveOperation()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionTxnRemoveOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareOperation()"], ["com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareOperation", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareOperation(int, java.lang.String, java.lang.String, long[], java.lang.String)"], ["boolean", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareOperation.getBackupOperation()"], ["void", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareOperation.run()"], ["int", "com.hazelcast.collection.impl.txncollection.operations.CollectionPrepareOperation.getId()"], ["com.hazelcast.collection.impl.txncollection.AbstractTransactionalCollectionProxy", "com.hazelcast.collection.impl.txncollection.AbstractTransactionalCollectionProxy(java.lang.String, com.hazelcast.transaction.impl.Transaction, com.hazelcast.spi.NodeEngine, S)"], ["java.lang.String", "com.hazelcast.collection.impl.txncollection.AbstractTransactionalCollectionProxy.getName()"], ["boolean", "com.hazelcast.collection.impl.txncollection.AbstractTransactionalCollectionProxy.add(E)"], ["boolean", "com.hazelcast.collection.impl.txncollection.AbstractTransactionalCollectionProxy.remove(E)"], ["int", "com.hazelcast.collection.impl.txncollection.AbstractTransactionalCollectionProxy.size()"], ["boolean", "com.hazelcast.collection.impl.txncollection.TransactionLogRecordKey.equals(java.lang.Object)"], ["int", "com.hazelcast.collection.impl.txncollection.TransactionLogRecordKey.hashCode()"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.version.MemberVersion()"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.version.MemberVersion(int, int, int)"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.version.MemberVersion(java.lang.String)"], ["byte", "com.hazelcast.version.MemberVersion.getMajor()"], ["byte", "com.hazelcast.version.MemberVersion.getMinor()"], ["byte", "com.hazelcast.version.MemberVersion.getPatch()"], ["boolean", "com.hazelcast.version.MemberVersion.isUnknown()"], ["boolean", "com.hazelcast.version.MemberVersion.equals(java.lang.Object)"], ["int", "com.hazelcast.version.MemberVersion.hashCode()"], ["java.lang.String", "com.hazelcast.version.MemberVersion.toString()"], ["void", "com.hazelcast.version.MemberVersion.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.version.MemberVersion.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.version.MemberVersion.of(int, int, int)"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.version.MemberVersion.of(java.lang.String)"], ["int", "com.hazelcast.version.MemberVersion.getFactoryId()"], ["int", "com.hazelcast.version.MemberVersion.getId()"], ["int", "com.hazelcast.version.MemberVersion.compareTo(com.hazelcast.version.MemberVersion)"], ["com.hazelcast.version.Version", "com.hazelcast.version.MemberVersion.asVersion()"], ["int", "com.hazelcast.version.MemberVersion.compareTo(java.lang.Object)"], ["com.hazelcast.version.Version", "com.hazelcast.version.Version()"], ["byte", "com.hazelcast.version.Version.getMajor()"], ["byte", "com.hazelcast.version.Version.getMinor()"], ["boolean", "com.hazelcast.version.Version.equals(java.lang.Object)"], ["int", "com.hazelcast.version.Version.hashCode()"], ["java.lang.String", "com.hazelcast.version.Version.toString()"], ["void", "com.hazelcast.version.Version.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.version.Version.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.version.Version.compareTo(com.hazelcast.version.Version)"], ["int", "com.hazelcast.version.Version.getFactoryId()"], ["int", "com.hazelcast.version.Version.getId()"], ["com.hazelcast.version.Version", "com.hazelcast.version.Version.of(int, int)"], ["com.hazelcast.version.Version", "com.hazelcast.version.Version.of(java.lang.String)"], ["boolean", "com.hazelcast.version.Version.isEqualTo(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isGreaterThan(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isUnknownOrGreaterThan(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isGreaterOrEqual(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isUnknownOrGreaterOrEqual(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isLessThan(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isUnknownOrLessThan(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isLessOrEqual(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isUnknownOrLessOrEqual(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isBetween(com.hazelcast.version.Version, com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.version.Version.isUnknown()"], ["int", "com.hazelcast.version.Version.compareTo(java.lang.Object)"], ["int", "com.hazelcast.version.MajorMinorVersionComparator.compare(com.hazelcast.version.MemberVersion, com.hazelcast.version.MemberVersion)"], ["int", "com.hazelcast.version.MajorMinorVersionComparator.compare(java.lang.Object, java.lang.Object)"], ["com.hazelcast.instance.Node$ShutdownHookPolicy[]", "com.hazelcast.instance.Node$ShutdownHookPolicy.values()"], ["com.hazelcast.instance.Node$ShutdownHookPolicy", "com.hazelcast.instance.Node$ShutdownHookPolicy.valueOf(java.lang.String)"], ["int", "com.hazelcast.instance.HazelcastInstanceFactory$1.compare(com.hazelcast.instance.HazelcastInstanceProxy, com.hazelcast.instance.HazelcastInstanceProxy)"], ["int", "com.hazelcast.instance.HazelcastInstanceFactory$1.compare(java.lang.Object, java.lang.Object)"], ["com.hazelcast.spi.Operation", "com.hazelcast.instance.MemberImpl$MemberAttributeOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.instance.MemberImpl$MemberAttributeOperationSupplier.get()"], ["com.hazelcast.nio.Address", "com.hazelcast.instance.AbstractMember.getAddress()"], ["int", "com.hazelcast.instance.AbstractMember.getPort()"], ["java.net.InetAddress", "com.hazelcast.instance.AbstractMember.getInetAddress()"], ["java.net.InetSocketAddress", "com.hazelcast.instance.AbstractMember.getInetSocketAddress()"], ["java.net.InetSocketAddress", "com.hazelcast.instance.AbstractMember.getSocketAddress()"], ["java.lang.String", "com.hazelcast.instance.AbstractMember.getUuid()"], ["boolean", "com.hazelcast.instance.AbstractMember.isLiteMember()"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.instance.AbstractMember.getAttributes()"], ["void", "com.hazelcast.instance.AbstractMember.updateAttribute(com.hazelcast.cluster.MemberAttributeOperationType, java.lang.String, java.lang.Object)"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.instance.AbstractMember.getVersion()"], ["void", "com.hazelcast.instance.AbstractMember.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.instance.AbstractMember.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.instance.AbstractMember.toString()"], ["int", "com.hazelcast.instance.AbstractMember.hashCode()"], ["boolean", "com.hazelcast.instance.AbstractMember.equals(java.lang.Object)"], ["java.net.SocketAddress", "com.hazelcast.instance.AbstractMember.getSocketAddress()"], ["void", "com.hazelcast.instance.OutOfMemoryHandlerHelper.tryCloseConnections(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.instance.OutOfMemoryHandlerHelper.tryShutdown(com.hazelcast.core.HazelcastInstance)"], ["com.hazelcast.instance.NodeExtension", "com.hazelcast.instance.NodeExtensionFactory.create(com.hazelcast.instance.Node)"], ["com.hazelcast.instance.Node", "com.hazelcast.instance.Node(com.hazelcast.instance.HazelcastInstanceImpl, com.hazelcast.config.Config, com.hazelcast.instance.NodeContext)"], ["com.hazelcast.spi.discovery.integration.DiscoveryService", "com.hazelcast.instance.Node.createDiscoveryService(com.hazelcast.config.DiscoveryConfig, com.hazelcast.core.Member)"], ["com.hazelcast.internal.management.ManagementCenterService", "com.hazelcast.instance.Node.getManagementCenterService()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.instance.Node.getSerializationService()"], ["com.hazelcast.internal.cluster.impl.ClusterServiceImpl", "com.hazelcast.instance.Node.getClusterService()"], ["com.hazelcast.internal.partition.InternalPartitionService", "com.hazelcast.instance.Node.getPartitionService()"], ["com.hazelcast.nio.Address", "com.hazelcast.instance.Node.getMasterAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.instance.Node.getThisAddress()"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.instance.Node.getLocalMember()"], ["boolean", "com.hazelcast.instance.Node.isMaster()"], ["com.hazelcast.security.SecurityService", "com.hazelcast.instance.Node.getSecurityService()"], ["void", "com.hazelcast.instance.Node.shutdown(boolean)"], ["boolean", "com.hazelcast.instance.Node.setShuttingDown()"], ["boolean", "com.hazelcast.instance.Node.isRunning()"], ["void", "com.hazelcast.instance.Node.changeNodeStateToActive()"], ["void", "com.hazelcast.instance.Node.changeNodeStateToPassive()"], ["void", "com.hazelcast.instance.Node.reset()"], ["com.hazelcast.logging.ILogger", "com.hazelcast.instance.Node.getLogger(java.lang.String)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.instance.Node.getLogger(java.lang.Class)"], ["com.hazelcast.spi.properties.HazelcastProperties", "com.hazelcast.instance.Node.getProperties()"], ["com.hazelcast.internal.ascii.TextCommandService", "com.hazelcast.instance.Node.getTextCommandService()"], ["com.hazelcast.nio.ConnectionManager", "com.hazelcast.instance.Node.getConnectionManager()"], ["java.lang.ClassLoader", "com.hazelcast.instance.Node.getConfigClassLoader()"], ["com.hazelcast.spi.impl.NodeEngineImpl", "com.hazelcast.instance.Node.getNodeEngine()"], ["com.hazelcast.instance.NodeExtension", "com.hazelcast.instance.Node.getNodeExtension()"], ["com.hazelcast.spi.discovery.integration.DiscoveryService", "com.hazelcast.instance.Node.getDiscoveryService()"], ["com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage", "com.hazelcast.instance.Node.createSplitBrainJoinMessage()"], ["com.hazelcast.internal.cluster.impl.JoinRequest", "com.hazelcast.instance.Node.createJoinRequest(boolean)"], ["com.hazelcast.internal.cluster.impl.ConfigCheck", "com.hazelcast.instance.Node.createConfigCheck()"], ["void", "com.hazelcast.instance.Node.join()"], ["com.hazelcast.cluster.Joiner", "com.hazelcast.instance.Node.getJoiner()"], ["java.lang.String", "com.hazelcast.instance.Node.getThisUuid()"], ["com.hazelcast.config.Config", "com.hazelcast.instance.Node.getConfig()"], ["com.hazelcast.instance.NodeState", "com.hazelcast.instance.Node.getState()"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.instance.Node.getVersion()"], ["boolean", "com.hazelcast.instance.Node.isLiteMember()"], ["java.lang.String", "com.hazelcast.instance.Node.toString()"], ["com.hazelcast.instance.BuildInfo", "com.hazelcast.instance.Node.getBuildInfo()"], ["com.hazelcast.instance.JetBuildInfo", "com.hazelcast.instance.JetBuildInfo(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.instance.JetBuildInfo.getVersion()"], ["java.lang.String", "com.hazelcast.instance.JetBuildInfo.getBuild()"], ["java.lang.String", "com.hazelcast.instance.JetBuildInfo.getRevision()"], ["java.lang.String", "com.hazelcast.instance.JetBuildInfo.toString()"], ["void", "com.hazelcast.instance.DefaultAddressPicker.pickAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.instance.DefaultAddressPicker.getBindAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.instance.DefaultAddressPicker.getPublicAddress()"], ["java.nio.channels.ServerSocketChannel", "com.hazelcast.instance.DefaultAddressPicker.getServerSocketChannel()"], ["void", "com.hazelcast.instance.NodeShutdownHelper.shutdownNodeByFiringEvents(com.hazelcast.instance.Node, boolean)"], ["java.lang.String", "com.hazelcast.instance.DefaultAddressPicker$InterfaceDefinition.toString()"], ["boolean", "com.hazelcast.instance.DefaultAddressPicker$InterfaceDefinition.equals(java.lang.Object)"], ["int", "com.hazelcast.instance.DefaultAddressPicker$InterfaceDefinition.hashCode()"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.instance.MemberImpl()"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.instance.MemberImpl(com.hazelcast.nio.Address, com.hazelcast.version.MemberVersion, boolean)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.instance.MemberImpl(com.hazelcast.nio.Address, com.hazelcast.version.MemberVersion, boolean, java.lang.String)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.instance.MemberImpl(com.hazelcast.nio.Address, com.hazelcast.version.MemberVersion, boolean, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, boolean)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.instance.MemberImpl(com.hazelcast.nio.Address, com.hazelcast.version.MemberVersion, boolean, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, boolean, int, com.hazelcast.instance.HazelcastInstanceImpl)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.instance.MemberImpl(com.hazelcast.instance.MemberImpl)"], ["void", "com.hazelcast.instance.MemberImpl.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["boolean", "com.hazelcast.instance.MemberImpl.localMember()"], ["java.lang.String", "com.hazelcast.instance.MemberImpl.getStringAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setStringAttribute(java.lang.String, java.lang.String)"], ["java.lang.Boolean", "com.hazelcast.instance.MemberImpl.getBooleanAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setBooleanAttribute(java.lang.String, boolean)"], ["java.lang.Byte", "com.hazelcast.instance.MemberImpl.getByteAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setByteAttribute(java.lang.String, byte)"], ["java.lang.Short", "com.hazelcast.instance.MemberImpl.getShortAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setShortAttribute(java.lang.String, short)"], ["java.lang.Integer", "com.hazelcast.instance.MemberImpl.getIntAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setIntAttribute(java.lang.String, int)"], ["java.lang.Long", "com.hazelcast.instance.MemberImpl.getLongAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setLongAttribute(java.lang.String, long)"], ["java.lang.Float", "com.hazelcast.instance.MemberImpl.getFloatAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setFloatAttribute(java.lang.String, float)"], ["java.lang.Double", "com.hazelcast.instance.MemberImpl.getDoubleAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setDoubleAttribute(java.lang.String, double)"], ["void", "com.hazelcast.instance.MemberImpl.removeAttribute(java.lang.String)"], ["void", "com.hazelcast.instance.MemberImpl.setMemberListJoinVersion(int)"], ["int", "com.hazelcast.instance.MemberImpl.getMemberListJoinVersion()"], ["int", "com.hazelcast.instance.MemberImpl.getFactoryId()"], ["int", "com.hazelcast.instance.MemberImpl.getId()"], ["java.lang.String", "com.hazelcast.instance.HazelcastInstanceProxy.getName()"], ["<K, V> com.hazelcast.core.IMap<K, V>", "com.hazelcast.instance.HazelcastInstanceProxy.getMap(java.lang.String)"], ["<E> com.hazelcast.core.IQueue<E>", "com.hazelcast.instance.HazelcastInstanceProxy.getQueue(java.lang.String)"], ["<E> com.hazelcast.core.ITopic<E>", "com.hazelcast.instance.HazelcastInstanceProxy.getTopic(java.lang.String)"], ["<E> com.hazelcast.core.ITopic<E>", "com.hazelcast.instance.HazelcastInstanceProxy.getReliableTopic(java.lang.String)"], ["<E> com.hazelcast.core.ISet<E>", "com.hazelcast.instance.HazelcastInstanceProxy.getSet(java.lang.String)"], ["<E> com.hazelcast.core.IList<E>", "com.hazelcast.instance.HazelcastInstanceProxy.getList(java.lang.String)"], ["<K, V> com.hazelcast.core.MultiMap<K, V>", "com.hazelcast.instance.HazelcastInstanceProxy.getMultiMap(java.lang.String)"], ["com.hazelcast.mapreduce.JobTracker", "com.hazelcast.instance.HazelcastInstanceProxy.getJobTracker(java.lang.String)"], ["<E> com.hazelcast.ringbuffer.Ringbuffer<E>", "com.hazelcast.instance.HazelcastInstanceProxy.getRingbuffer(java.lang.String)"], ["com.hazelcast.core.ILock", "com.hazelcast.instance.HazelcastInstanceProxy.getLock(java.lang.String)"], ["com.hazelcast.core.IExecutorService", "com.hazelcast.instance.HazelcastInstanceProxy.getExecutorService(java.lang.String)"], ["com.hazelcast.durableexecutor.DurableExecutorService", "com.hazelcast.instance.HazelcastInstanceProxy.getDurableExecutorService(java.lang.String)"], ["<T> T", "com.hazelcast.instance.HazelcastInstanceProxy.executeTransaction(com.hazelcast.transaction.TransactionalTask<T>)"], ["<T> T", "com.hazelcast.instance.HazelcastInstanceProxy.executeTransaction(com.hazelcast.transaction.TransactionOptions, com.hazelcast.transaction.TransactionalTask<T>)"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.instance.HazelcastInstanceProxy.newTransactionContext()"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.instance.HazelcastInstanceProxy.newTransactionContext(com.hazelcast.transaction.TransactionOptions)"], ["com.hazelcast.core.IdGenerator", "com.hazelcast.instance.HazelcastInstanceProxy.getIdGenerator(java.lang.String)"], ["com.hazelcast.flakeidgen.FlakeIdGenerator", "com.hazelcast.instance.HazelcastInstanceProxy.getFlakeIdGenerator(java.lang.String)"], ["com.hazelcast.core.IAtomicLong", "com.hazelcast.instance.HazelcastInstanceProxy.getAtomicLong(java.lang.String)"], ["<K, V> com.hazelcast.core.ReplicatedMap<K, V>", "com.hazelcast.instance.HazelcastInstanceProxy.getReplicatedMap(java.lang.String)"], ["<E> com.hazelcast.core.IAtomicReference<E>", "com.hazelcast.instance.HazelcastInstanceProxy.getAtomicReference(java.lang.String)"], ["com.hazelcast.core.ICountDownLatch", "com.hazelcast.instance.HazelcastInstanceProxy.getCountDownLatch(java.lang.String)"], ["com.hazelcast.core.ISemaphore", "com.hazelcast.instance.HazelcastInstanceProxy.getSemaphore(java.lang.String)"], ["com.hazelcast.core.ICacheManager", "com.hazelcast.instance.HazelcastInstanceProxy.getCacheManager()"], ["com.hazelcast.core.Cluster", "com.hazelcast.instance.HazelcastInstanceProxy.getCluster()"], ["com.hazelcast.core.Member", "com.hazelcast.instance.HazelcastInstanceProxy.getLocalEndpoint()"], ["com.hazelcast.config.Config", "com.hazelcast.instance.HazelcastInstanceProxy.getConfig()"], ["com.hazelcast.core.PartitionService", "com.hazelcast.instance.HazelcastInstanceProxy.getPartitionService()"], ["com.hazelcast.quorum.QuorumService", "com.hazelcast.instance.HazelcastInstanceProxy.getQuorumService()"], ["com.hazelcast.core.ClientService", "com.hazelcast.instance.HazelcastInstanceProxy.getClientService()"], ["com.hazelcast.logging.LoggingService", "com.hazelcast.instance.HazelcastInstanceProxy.getLoggingService()"], ["com.hazelcast.core.LifecycleService", "com.hazelcast.instance.HazelcastInstanceProxy.getLifecycleService()"], ["<T extends com.hazelcast.core.DistributedObject> T", "com.hazelcast.instance.HazelcastInstanceProxy.getDistributedObject(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.instance.HazelcastInstanceProxy.addDistributedObjectListener(com.hazelcast.core.DistributedObjectListener)"], ["boolean", "com.hazelcast.instance.HazelcastInstanceProxy.removeDistributedObjectListener(java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.Object>", "com.hazelcast.instance.HazelcastInstanceProxy.getUserContext()"], ["com.hazelcast.transaction.HazelcastXAResource", "com.hazelcast.instance.HazelcastInstanceProxy.getXAResource()"], ["com.hazelcast.cardinality.CardinalityEstimator", "com.hazelcast.instance.HazelcastInstanceProxy.getCardinalityEstimator(java.lang.String)"], ["com.hazelcast.crdt.pncounter.PNCounter", "com.hazelcast.instance.HazelcastInstanceProxy.getPNCounter(java.lang.String)"], ["com.hazelcast.scheduledexecutor.IScheduledExecutorService", "com.hazelcast.instance.HazelcastInstanceProxy.getScheduledExecutorService(java.lang.String)"], ["void", "com.hazelcast.instance.HazelcastInstanceProxy.shutdown()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.instance.HazelcastInstanceProxy.getSerializationService()"], ["com.hazelcast.instance.HazelcastInstanceImpl", "com.hazelcast.instance.HazelcastInstanceProxy.getOriginal()"], ["java.lang.String", "com.hazelcast.instance.HazelcastInstanceProxy.toString()"], ["int", "com.hazelcast.instance.HazelcastInstanceProxy.hashCode()"], ["boolean", "com.hazelcast.instance.HazelcastInstanceProxy.equals(java.lang.Object)"], ["com.hazelcast.core.Endpoint", "com.hazelcast.instance.HazelcastInstanceProxy.getLocalEndpoint()"], ["com.hazelcast.spi.serialization.SerializationService", "com.hazelcast.instance.HazelcastInstanceProxy.getSerializationService()"], ["com.hazelcast.instance.HazelcastManagedContext", "com.hazelcast.instance.HazelcastManagedContext(com.hazelcast.instance.HazelcastInstanceImpl, com.hazelcast.core.ManagedContext)"], ["java.lang.Object", "com.hazelcast.instance.HazelcastManagedContext.initialize(java.lang.Object)"], ["com.hazelcast.instance.BuildInfo", "com.hazelcast.instance.BuildInfoProvider.getBuildInfo()"], ["com.hazelcast.instance.TerminatedLifecycleService", "com.hazelcast.instance.TerminatedLifecycleService()"], ["boolean", "com.hazelcast.instance.TerminatedLifecycleService.isRunning()"], ["void", "com.hazelcast.instance.TerminatedLifecycleService.shutdown()"], ["void", "com.hazelcast.instance.TerminatedLifecycleService.terminate()"], ["java.lang.String", "com.hazelcast.instance.TerminatedLifecycleService.addLifecycleListener(com.hazelcast.core.LifecycleListener)"], ["boolean", "com.hazelcast.instance.TerminatedLifecycleService.removeLifecycleListener(java.lang.String)"], ["com.hazelcast.instance.DefaultOutOfMemoryHandler", "com.hazelcast.instance.DefaultOutOfMemoryHandler()"], ["com.hazelcast.instance.DefaultOutOfMemoryHandler", "com.hazelcast.instance.DefaultOutOfMemoryHandler(double)"], ["com.hazelcast.instance.DefaultOutOfMemoryHandler", "com.hazelcast.instance.DefaultOutOfMemoryHandler(double, com.hazelcast.util.MemoryInfoAccessor)"], ["void", "com.hazelcast.instance.DefaultOutOfMemoryHandler.onOutOfMemory(java.lang.OutOfMemoryError, com.hazelcast.core.HazelcastInstance[])"], ["boolean", "com.hazelcast.instance.DefaultOutOfMemoryHandler.shouldHandle(java.lang.OutOfMemoryError)"], ["com.hazelcast.instance.NodeState[]", "com.hazelcast.instance.NodeState.values()"], ["com.hazelcast.instance.NodeState", "com.hazelcast.instance.NodeState.valueOf(java.lang.String)"], ["int", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.getOutOfMemoryErrorCount()"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.setServerHandler(com.hazelcast.core.OutOfMemoryHandler)"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.setClientHandler(com.hazelcast.core.OutOfMemoryHandler)"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.registerServer(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.registerClient(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.deregisterServer(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.deregisterClient(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.clearServers()"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.clearClients()"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.inspectOutOfMemoryError(java.lang.Throwable)"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher.onOutOfMemory(java.lang.OutOfMemoryError)"], ["void", "com.hazelcast.instance.OutOfMemoryErrorDispatcher$EmptyOutOfMemoryHandler.onOutOfMemory(java.lang.OutOfMemoryError, com.hazelcast.core.HazelcastInstance[])"], ["boolean", "com.hazelcast.instance.OutOfMemoryErrorDispatcher$EmptyOutOfMemoryHandler.shouldHandle(java.lang.OutOfMemoryError)"], ["com.hazelcast.instance.DelegatingAddressPicker", "com.hazelcast.instance.DelegatingAddressPicker(com.hazelcast.spi.MemberAddressProvider, com.hazelcast.config.NetworkConfig, com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.instance.DelegatingAddressPicker.pickAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.instance.DelegatingAddressPicker.getBindAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.instance.DelegatingAddressPicker.getPublicAddress()"], ["java.nio.channels.ServerSocketChannel", "com.hazelcast.instance.DelegatingAddressPicker.getServerSocketChannel()"], ["com.hazelcast.instance.HazelcastInstanceCacheManager", "com.hazelcast.instance.HazelcastInstanceCacheManager(com.hazelcast.instance.HazelcastInstanceImpl)"], ["<K, V> com.hazelcast.cache.ICache<K, V>", "com.hazelcast.instance.HazelcastInstanceCacheManager.getCache(java.lang.String)"], ["<K, V> com.hazelcast.cache.ICache<K, V>", "com.hazelcast.instance.HazelcastInstanceCacheManager.getCacheByFullName(java.lang.String)"], ["com.hazelcast.instance.DefaultNodeContext", "com.hazelcast.instance.DefaultNodeContext()"], ["com.hazelcast.instance.NodeExtension", "com.hazelcast.instance.DefaultNodeContext.createNodeExtension(com.hazelcast.instance.Node)"], ["com.hazelcast.instance.AddressPicker", "com.hazelcast.instance.DefaultNodeContext.createAddressPicker(com.hazelcast.instance.Node)"], ["com.hazelcast.cluster.Joiner", "com.hazelcast.instance.DefaultNodeContext.createJoiner(com.hazelcast.instance.Node)"], ["com.hazelcast.nio.ConnectionManager", "com.hazelcast.instance.DefaultNodeContext.createConnectionManager(com.hazelcast.instance.Node, java.nio.channels.ServerSocketChannel)"], ["com.hazelcast.internal.jmx.ManagementService", "com.hazelcast.instance.HazelcastInstanceImpl.getManagementService()"], ["java.lang.String", "com.hazelcast.instance.HazelcastInstanceImpl.getName()"], ["<K, V> com.hazelcast.core.IMap<K, V>", "com.hazelcast.instance.HazelcastInstanceImpl.getMap(java.lang.String)"], ["<E> com.hazelcast.core.IQueue<E>", "com.hazelcast.instance.HazelcastInstanceImpl.getQueue(java.lang.String)"], ["<E> com.hazelcast.core.ITopic<E>", "com.hazelcast.instance.HazelcastInstanceImpl.getTopic(java.lang.String)"], ["<E> com.hazelcast.core.ITopic<E>", "com.hazelcast.instance.HazelcastInstanceImpl.getReliableTopic(java.lang.String)"], ["<E> com.hazelcast.core.ISet<E>", "com.hazelcast.instance.HazelcastInstanceImpl.getSet(java.lang.String)"], ["<E> com.hazelcast.core.IList<E>", "com.hazelcast.instance.HazelcastInstanceImpl.getList(java.lang.String)"], ["<K, V> com.hazelcast.core.MultiMap<K, V>", "com.hazelcast.instance.HazelcastInstanceImpl.getMultiMap(java.lang.String)"], ["com.hazelcast.mapreduce.JobTracker", "com.hazelcast.instance.HazelcastInstanceImpl.getJobTracker(java.lang.String)"], ["<E> com.hazelcast.ringbuffer.Ringbuffer<E>", "com.hazelcast.instance.HazelcastInstanceImpl.getRingbuffer(java.lang.String)"], ["com.hazelcast.core.ILock", "com.hazelcast.instance.HazelcastInstanceImpl.getLock(java.lang.String)"], ["<T> T", "com.hazelcast.instance.HazelcastInstanceImpl.executeTransaction(com.hazelcast.transaction.TransactionalTask<T>)"], ["<T> T", "com.hazelcast.instance.HazelcastInstanceImpl.executeTransaction(com.hazelcast.transaction.TransactionOptions, com.hazelcast.transaction.TransactionalTask<T>)"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.instance.HazelcastInstanceImpl.newTransactionContext()"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.instance.HazelcastInstanceImpl.newTransactionContext(com.hazelcast.transaction.TransactionOptions)"], ["com.hazelcast.core.IExecutorService", "com.hazelcast.instance.HazelcastInstanceImpl.getExecutorService(java.lang.String)"], ["com.hazelcast.durableexecutor.DurableExecutorService", "com.hazelcast.instance.HazelcastInstanceImpl.getDurableExecutorService(java.lang.String)"], ["com.hazelcast.core.IdGenerator", "com.hazelcast.instance.HazelcastInstanceImpl.getIdGenerator(java.lang.String)"], ["com.hazelcast.flakeidgen.FlakeIdGenerator", "com.hazelcast.instance.HazelcastInstanceImpl.getFlakeIdGenerator(java.lang.String)"], ["com.hazelcast.core.IAtomicLong", "com.hazelcast.instance.HazelcastInstanceImpl.getAtomicLong(java.lang.String)"], ["<E> com.hazelcast.core.IAtomicReference<E>", "com.hazelcast.instance.HazelcastInstanceImpl.getAtomicReference(java.lang.String)"], ["com.hazelcast.core.ICountDownLatch", "com.hazelcast.instance.HazelcastInstanceImpl.getCountDownLatch(java.lang.String)"], ["com.hazelcast.core.ISemaphore", "com.hazelcast.instance.HazelcastInstanceImpl.getSemaphore(java.lang.String)"], ["<K, V> com.hazelcast.core.ReplicatedMap<K, V>", "com.hazelcast.instance.HazelcastInstanceImpl.getReplicatedMap(java.lang.String)"], ["com.hazelcast.instance.HazelcastInstanceCacheManager", "com.hazelcast.instance.HazelcastInstanceImpl.getCacheManager()"], ["com.hazelcast.core.Cluster", "com.hazelcast.instance.HazelcastInstanceImpl.getCluster()"], ["com.hazelcast.core.Member", "com.hazelcast.instance.HazelcastInstanceImpl.getLocalEndpoint()"], ["com.hazelcast.config.Config", "com.hazelcast.instance.HazelcastInstanceImpl.getConfig()"], ["java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.Object>", "com.hazelcast.instance.HazelcastInstanceImpl.getUserContext()"], ["com.hazelcast.core.PartitionService", "com.hazelcast.instance.HazelcastInstanceImpl.getPartitionService()"], ["com.hazelcast.quorum.QuorumService", "com.hazelcast.instance.HazelcastInstanceImpl.getQuorumService()"], ["com.hazelcast.core.ClientService", "com.hazelcast.instance.HazelcastInstanceImpl.getClientService()"], ["com.hazelcast.logging.LoggingService", "com.hazelcast.instance.HazelcastInstanceImpl.getLoggingService()"], ["com.hazelcast.instance.LifecycleServiceImpl", "com.hazelcast.instance.HazelcastInstanceImpl.getLifecycleService()"], ["void", "com.hazelcast.instance.HazelcastInstanceImpl.shutdown()"], ["<T extends com.hazelcast.core.DistributedObject> T", "com.hazelcast.instance.HazelcastInstanceImpl.getDistributedObject(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.instance.HazelcastInstanceImpl.addDistributedObjectListener(com.hazelcast.core.DistributedObjectListener)"], ["boolean", "com.hazelcast.instance.HazelcastInstanceImpl.removeDistributedObjectListener(java.lang.String)"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.instance.HazelcastInstanceImpl.getSerializationService()"], ["com.hazelcast.memory.MemoryStats", "com.hazelcast.instance.HazelcastInstanceImpl.getMemoryStats()"], ["com.hazelcast.transaction.HazelcastXAResource", "com.hazelcast.instance.HazelcastInstanceImpl.getXAResource()"], ["com.hazelcast.cardinality.CardinalityEstimator", "com.hazelcast.instance.HazelcastInstanceImpl.getCardinalityEstimator(java.lang.String)"], ["com.hazelcast.crdt.pncounter.PNCounter", "com.hazelcast.instance.HazelcastInstanceImpl.getPNCounter(java.lang.String)"], ["com.hazelcast.scheduledexecutor.IScheduledExecutorService", "com.hazelcast.instance.HazelcastInstanceImpl.getScheduledExecutorService(java.lang.String)"], ["boolean", "com.hazelcast.instance.HazelcastInstanceImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.instance.HazelcastInstanceImpl.hashCode()"], ["java.lang.String", "com.hazelcast.instance.HazelcastInstanceImpl.toString()"], ["com.hazelcast.core.ICacheManager", "com.hazelcast.instance.HazelcastInstanceImpl.getCacheManager()"], ["com.hazelcast.core.LifecycleService", "com.hazelcast.instance.HazelcastInstanceImpl.getLifecycleService()"], ["com.hazelcast.core.Endpoint", "com.hazelcast.instance.HazelcastInstanceImpl.getLocalEndpoint()"], ["com.hazelcast.spi.serialization.SerializationService", "com.hazelcast.instance.HazelcastInstanceImpl.getSerializationService()"], ["com.hazelcast.instance.LifecycleServiceImpl", "com.hazelcast.instance.LifecycleServiceImpl(com.hazelcast.instance.HazelcastInstanceImpl)"], ["java.lang.String", "com.hazelcast.instance.LifecycleServiceImpl.addLifecycleListener(com.hazelcast.core.LifecycleListener)"], ["boolean", "com.hazelcast.instance.LifecycleServiceImpl.removeLifecycleListener(java.lang.String)"], ["void", "com.hazelcast.instance.LifecycleServiceImpl.fireLifecycleEvent(com.hazelcast.core.LifecycleEvent$LifecycleState)"], ["void", "com.hazelcast.instance.LifecycleServiceImpl.fireLifecycleEvent(com.hazelcast.core.LifecycleEvent)"], ["boolean", "com.hazelcast.instance.LifecycleServiceImpl.isRunning()"], ["void", "com.hazelcast.instance.LifecycleServiceImpl.shutdown()"], ["void", "com.hazelcast.instance.LifecycleServiceImpl.terminate()"], ["void", "com.hazelcast.instance.LifecycleServiceImpl.runUnderLifecycleLock(java.lang.Runnable)"], ["com.hazelcast.instance.BuildInfo", "com.hazelcast.instance.BuildInfo(java.lang.String, java.lang.String, java.lang.String, int, boolean, byte)"], ["com.hazelcast.instance.BuildInfo", "com.hazelcast.instance.BuildInfo(java.lang.String, java.lang.String, java.lang.String, int, boolean, byte, com.hazelcast.instance.BuildInfo)"], ["java.lang.String", "com.hazelcast.instance.BuildInfo.getRevision()"], ["java.lang.String", "com.hazelcast.instance.BuildInfo.getVersion()"], ["java.lang.String", "com.hazelcast.instance.BuildInfo.getBuild()"], ["int", "com.hazelcast.instance.BuildInfo.getBuildNumber()"], ["boolean", "com.hazelcast.instance.BuildInfo.isEnterprise()"], ["byte", "com.hazelcast.instance.BuildInfo.getSerializationVersion()"], ["com.hazelcast.instance.BuildInfo", "com.hazelcast.instance.BuildInfo.getUpstreamBuildInfo()"], ["com.hazelcast.instance.JetBuildInfo", "com.hazelcast.instance.BuildInfo.getJetBuildInfo()"], ["java.lang.String", "com.hazelcast.instance.BuildInfo.toString()"], ["int", "com.hazelcast.instance.BuildInfo.calculateVersion(java.lang.String)"], ["java.lang.RuntimeException", "com.hazelcast.instance.DefaultNodeExtension$1.get()"], ["java.lang.Object", "com.hazelcast.instance.DefaultNodeExtension$1.get()"], ["void", "com.hazelcast.instance.Node$NodeShutdownHookThread.run()"], ["boolean", "com.hazelcast.instance.DefaultAddressPicker$AddressDefinition.equals(java.lang.Object)"], ["int", "com.hazelcast.instance.DefaultAddressPicker$AddressDefinition.hashCode()"], ["void", "com.hazelcast.instance.HazelcastInstanceFactory$InstanceFuture.setFailure(java.lang.Throwable)"], ["com.hazelcast.internal.usercodedeployment.UserCodeDeploymentClassLoader", "com.hazelcast.instance.Node$1.run()"], ["java.lang.Object", "com.hazelcast.instance.Node$1.run()"], ["com.hazelcast.instance.DefaultNodeExtension", "com.hazelcast.instance.DefaultNodeExtension(com.hazelcast.instance.Node)"], ["void", "com.hazelcast.instance.DefaultNodeExtension.beforeStart()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.printNodeInfo()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.beforeJoin()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.afterStart()"], ["boolean", "com.hazelcast.instance.DefaultNodeExtension.isStartCompleted()"], ["com.hazelcast.security.SecurityContext", "com.hazelcast.instance.DefaultNodeExtension.getSecurityContext()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.instance.DefaultNodeExtension.createSerializationService()"], ["com.hazelcast.security.SecurityService", "com.hazelcast.instance.DefaultNodeExtension.getSecurityService()"], ["<T> T", "com.hazelcast.instance.DefaultNodeExtension.createService(java.lang.Class<T>)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.instance.DefaultNodeExtension.createExtensionServices()"], ["com.hazelcast.nio.MemberSocketInterceptor", "com.hazelcast.instance.DefaultNodeExtension.getMemberSocketInterceptor()"], ["com.hazelcast.internal.networking.ChannelFactory", "com.hazelcast.instance.DefaultNodeExtension.getChannelFactory()"], ["com.hazelcast.internal.networking.ChannelInboundHandler", "com.hazelcast.instance.DefaultNodeExtension.createInboundHandler(com.hazelcast.nio.tcp.TcpIpConnection, com.hazelcast.nio.IOService)"], ["com.hazelcast.internal.networking.ChannelOutboundHandler", "com.hazelcast.instance.DefaultNodeExtension.createOutboundHandler(com.hazelcast.nio.tcp.TcpIpConnection, com.hazelcast.nio.IOService)"], ["void", "com.hazelcast.instance.DefaultNodeExtension.onThreadStart(java.lang.Thread)"], ["void", "com.hazelcast.instance.DefaultNodeExtension.onThreadStop(java.lang.Thread)"], ["com.hazelcast.memory.MemoryStats", "com.hazelcast.instance.DefaultNodeExtension.getMemoryStats()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.beforeShutdown()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.shutdown()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.validateJoinRequest(com.hazelcast.internal.cluster.impl.JoinMessage)"], ["void", "com.hazelcast.instance.DefaultNodeExtension.onClusterStateChange(com.hazelcast.cluster.ClusterState, boolean)"], ["void", "com.hazelcast.instance.DefaultNodeExtension.onPartitionStateChange()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.onMemberListChange()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.onClusterVersionChange(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.instance.DefaultNodeExtension.isNodeVersionCompatibleWith(com.hazelcast.version.Version)"], ["boolean", "com.hazelcast.instance.DefaultNodeExtension.registerListener(java.lang.Object)"], ["com.hazelcast.hotrestart.HotRestartService", "com.hazelcast.instance.DefaultNodeExtension.getHotRestartService()"], ["com.hazelcast.hotrestart.InternalHotRestartService", "com.hazelcast.instance.DefaultNodeExtension.getInternalHotRestartService()"], ["java.lang.String", "com.hazelcast.instance.DefaultNodeExtension.createMemberUuid(com.hazelcast.nio.Address)"], ["com.hazelcast.util.ByteArrayProcessor", "com.hazelcast.instance.DefaultNodeExtension.createMulticastInputProcessor(com.hazelcast.nio.IOService)"], ["com.hazelcast.util.ByteArrayProcessor", "com.hazelcast.instance.DefaultNodeExtension.createMulticastOutputProcessor(com.hazelcast.nio.IOService)"], ["com.hazelcast.internal.management.TimedMemberStateFactory", "com.hazelcast.instance.DefaultNodeExtension.createTimedMemberStateFactory(com.hazelcast.instance.HazelcastInstanceImpl)"], ["com.hazelcast.internal.dynamicconfig.DynamicConfigListener", "com.hazelcast.instance.DefaultNodeExtension.createDynamicConfigListener()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.registerPlugins(com.hazelcast.internal.diagnostics.Diagnostics)"], ["com.hazelcast.internal.management.ManagementCenterConnectionFactory", "com.hazelcast.instance.DefaultNodeExtension.getManagementCenterConnectionFactory()"], ["void", "com.hazelcast.instance.DefaultNodeExtension.sendPhoneHome()"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.instance.HazelcastInstanceFactory.getHazelcastInstance(java.lang.String)"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.instance.HazelcastInstanceFactory.getOrCreateHazelcastInstance(com.hazelcast.config.Config)"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.instance.HazelcastInstanceFactory.newHazelcastInstance(com.hazelcast.config.Config)"], ["java.lang.String", "com.hazelcast.instance.HazelcastInstanceFactory.createInstanceName(com.hazelcast.config.Config)"], ["java.lang.String", "com.hazelcast.instance.HazelcastInstanceFactory.getInstanceName(java.lang.String, com.hazelcast.config.Config)"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.instance.HazelcastInstanceFactory.newHazelcastInstance(com.hazelcast.config.Config, java.lang.String, com.hazelcast.instance.NodeContext)"], ["void", "com.hazelcast.instance.HazelcastInstanceFactory.shutdownAll()"], ["void", "com.hazelcast.instance.HazelcastInstanceFactory.terminateAll()"], ["void", "com.hazelcast.instance.HazelcastInstanceFactory.remove(com.hazelcast.instance.HazelcastInstanceImpl)"], ["com.hazelcast.security.AbstractCredentials", "com.hazelcast.security.AbstractCredentials()"], ["com.hazelcast.security.AbstractCredentials", "com.hazelcast.security.AbstractCredentials(java.lang.String)"], ["java.lang.String", "com.hazelcast.security.AbstractCredentials.getEndpoint()"], ["void", "com.hazelcast.security.AbstractCredentials.setEndpoint(java.lang.String)"], ["java.lang.String", "com.hazelcast.security.AbstractCredentials.getPrincipal()"], ["void", "com.hazelcast.security.AbstractCredentials.setPrincipal(java.lang.String)"], ["int", "com.hazelcast.security.AbstractCredentials.hashCode()"], ["boolean", "com.hazelcast.security.AbstractCredentials.equals(java.lang.Object)"], ["void", "com.hazelcast.security.AbstractCredentials.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.security.AbstractCredentials.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$13.create(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$11.create(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$18.create(java.lang.String, java.lang.String...)"], ["boolean", "com.hazelcast.security.permission.DenyAllPermissionCollection$1.hasMoreElements()"], ["java.security.Permission", "com.hazelcast.security.permission.DenyAllPermissionCollection$1.nextElement()"], ["java.lang.Object", "com.hazelcast.security.permission.DenyAllPermissionCollection$1.nextElement()"], ["com.hazelcast.security.permission.CachePermission", "com.hazelcast.security.permission.CachePermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$4.create(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$17.create(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$15.create(java.lang.String, java.lang.String...)"], ["boolean", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection$1.hasMoreElements()"], ["java.security.Permission", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection$1.nextElement()"], ["java.lang.Object", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection$1.nextElement()"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$20.create(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$14.create(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$9.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.MapReducePermission", "com.hazelcast.security.permission.MapReducePermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$21.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.SetPermission", "com.hazelcast.security.permission.SetPermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.PNCounterPermission", "com.hazelcast.security.permission.PNCounterPermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$12.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.AtomicLongPermission", "com.hazelcast.security.permission.AtomicLongPermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants.getPermission(java.lang.String, java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$2.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.ConfigPermission", "com.hazelcast.security.permission.ConfigPermission()"], ["boolean", "com.hazelcast.security.permission.ConfigPermission.implies(java.security.Permission)"], ["java.lang.String", "com.hazelcast.security.permission.ConfigPermission.getActions()"], ["com.hazelcast.security.permission.TopicPermission", "com.hazelcast.security.permission.TopicPermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$7.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.FlakeIdGeneratorPermission", "com.hazelcast.security.permission.FlakeIdGeneratorPermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.CountDownLatchPermission", "com.hazelcast.security.permission.CountDownLatchPermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.ExecutorServicePermission", "com.hazelcast.security.permission.ExecutorServicePermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.SemaphorePermission", "com.hazelcast.security.permission.SemaphorePermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$5.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.TransactionPermission", "com.hazelcast.security.permission.TransactionPermission()"], ["boolean", "com.hazelcast.security.permission.TransactionPermission.implies(java.security.Permission)"], ["java.lang.String", "com.hazelcast.security.permission.TransactionPermission.getActions()"], ["com.hazelcast.security.permission.ClusterPermission", "com.hazelcast.security.permission.ClusterPermission(java.lang.String)"], ["java.security.PermissionCollection", "com.hazelcast.security.permission.ClusterPermission.newPermissionCollection()"], ["int", "com.hazelcast.security.permission.ClusterPermission.hashCode()"], ["boolean", "com.hazelcast.security.permission.ClusterPermission.equals(java.lang.Object)"], ["com.hazelcast.security.permission.ReplicatedMapPermission", "com.hazelcast.security.permission.ReplicatedMapPermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.CardinalityEstimatorPermission", "com.hazelcast.security.permission.CardinalityEstimatorPermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.DenyAllPermissionCollection", "com.hazelcast.security.permission.DenyAllPermissionCollection()"], ["void", "com.hazelcast.security.permission.DenyAllPermissionCollection.add(java.security.Permission)"], ["boolean", "com.hazelcast.security.permission.DenyAllPermissionCollection.implies(java.security.Permission)"], ["int", "com.hazelcast.security.permission.DenyAllPermissionCollection.hashCode()"], ["java.lang.String", "com.hazelcast.security.permission.DenyAllPermissionCollection.toString()"], ["boolean", "com.hazelcast.security.permission.DenyAllPermissionCollection.equals(java.lang.Object)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$1.create(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$6.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.MultiMapPermission", "com.hazelcast.security.permission.MultiMapPermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$22.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection()"], ["com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection(boolean)"], ["void", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection.add(java.security.Permission)"], ["boolean", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection.implies(java.security.Permission)"], ["int", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection.hashCode()"], ["boolean", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.security.permission.AllPermissions$AllPermissionsCollection.toString()"], ["com.hazelcast.security.permission.InstancePermission", "com.hazelcast.security.permission.InstancePermission(java.lang.String, java.lang.String...)"], ["boolean", "com.hazelcast.security.permission.InstancePermission.implies(java.security.Permission)"], ["java.lang.String", "com.hazelcast.security.permission.InstancePermission.getActions()"], ["int", "com.hazelcast.security.permission.InstancePermission.hashCode()"], ["boolean", "com.hazelcast.security.permission.InstancePermission.equals(java.lang.Object)"], ["com.hazelcast.security.permission.ScheduledExecutorPermission", "com.hazelcast.security.permission.ScheduledExecutorPermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.ListPermission", "com.hazelcast.security.permission.ListPermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$19.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.AtomicReferencePermission", "com.hazelcast.security.permission.AtomicReferencePermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.MapPermission", "com.hazelcast.security.permission.MapPermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.DurableExecutorServicePermission", "com.hazelcast.security.permission.DurableExecutorServicePermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.AllPermissions", "com.hazelcast.security.permission.AllPermissions()"], ["boolean", "com.hazelcast.security.permission.AllPermissions.implies(java.security.Permission)"], ["java.lang.String", "com.hazelcast.security.permission.AllPermissions.getActions()"], ["java.security.PermissionCollection", "com.hazelcast.security.permission.AllPermissions.newPermissionCollection()"], ["java.lang.String", "com.hazelcast.security.permission.AllPermissions.toString()"], ["boolean", "com.hazelcast.security.permission.AllPermissions.equals(java.lang.Object)"], ["int", "com.hazelcast.security.permission.AllPermissions.hashCode()"], ["com.hazelcast.security.permission.RingBufferPermission", "com.hazelcast.security.permission.RingBufferPermission(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.UserCodeDeploymentPermission", "com.hazelcast.security.permission.UserCodeDeploymentPermission(java.lang.String...)"], ["com.hazelcast.security.permission.QueuePermission", "com.hazelcast.security.permission.QueuePermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$8.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.LockPermission", "com.hazelcast.security.permission.LockPermission(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$3.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.permission.ClusterPermissionCollection", "com.hazelcast.security.permission.ClusterPermissionCollection()"], ["com.hazelcast.security.permission.ClusterPermissionCollection", "com.hazelcast.security.permission.ClusterPermissionCollection(java.lang.Class<? extends java.security.Permission>)"], ["void", "com.hazelcast.security.permission.ClusterPermissionCollection.add(java.security.Permission)"], ["void", "com.hazelcast.security.permission.ClusterPermissionCollection.add(java.security.PermissionCollection)"], ["boolean", "com.hazelcast.security.permission.ClusterPermissionCollection.implies(java.security.Permission)"], ["void", "com.hazelcast.security.permission.ClusterPermissionCollection.compact()"], ["java.lang.String", "com.hazelcast.security.permission.ClusterPermissionCollection.toString()"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$10.create(java.lang.String, java.lang.String...)"], ["java.security.Permission", "com.hazelcast.security.permission.ActionConstants$16.create(java.lang.String, java.lang.String...)"], ["com.hazelcast.security.UsernamePasswordCredentials", "com.hazelcast.security.UsernamePasswordCredentials()"], ["com.hazelcast.security.UsernamePasswordCredentials", "com.hazelcast.security.UsernamePasswordCredentials(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.security.UsernamePasswordCredentials.getUsername()"], ["java.lang.String", "com.hazelcast.security.UsernamePasswordCredentials.getPassword()"], ["void", "com.hazelcast.security.UsernamePasswordCredentials.setUsername(java.lang.String)"], ["void", "com.hazelcast.security.UsernamePasswordCredentials.setPassword(java.lang.String)"], ["int", "com.hazelcast.security.UsernamePasswordCredentials.getFactoryId()"], ["int", "com.hazelcast.security.UsernamePasswordCredentials.getClassId()"], ["java.lang.String", "com.hazelcast.security.UsernamePasswordCredentials.toString()"], ["com.hazelcast.logging.Log4j2Factory$Log4j2Logger", "com.hazelcast.logging.Log4j2Factory$Log4j2Logger(org.apache.logging.log4j.spi.ExtendedLogger)"], ["void", "com.hazelcast.logging.Log4j2Factory$Log4j2Logger.log(com.hazelcast.logging.LogEvent)"], ["void", "com.hazelcast.logging.Log4j2Factory$Log4j2Logger.log(java.util.logging.Level, java.lang.String)"], ["void", "com.hazelcast.logging.Log4j2Factory$Log4j2Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["java.util.logging.Level", "com.hazelcast.logging.Log4j2Factory$Log4j2Logger.getLevel()"], ["boolean", "com.hazelcast.logging.Log4j2Factory$Log4j2Logger.isLoggable(java.util.logging.Level)"], ["com.hazelcast.logging.LoggingServiceImpl", "com.hazelcast.logging.LoggingServiceImpl(java.lang.String, java.lang.String, com.hazelcast.instance.BuildInfo)"], ["void", "com.hazelcast.logging.LoggingServiceImpl.setThisMember(com.hazelcast.instance.MemberImpl)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.LoggingServiceImpl.getLogger(java.lang.String)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.LoggingServiceImpl.getLogger(java.lang.Class)"], ["void", "com.hazelcast.logging.LoggingServiceImpl.addLogListener(java.util.logging.Level, com.hazelcast.logging.LogListener)"], ["void", "com.hazelcast.logging.LoggingServiceImpl.removeLogListener(com.hazelcast.logging.LogListener)"], ["com.hazelcast.logging.LoggerFactorySupport", "com.hazelcast.logging.LoggerFactorySupport()"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.LoggerFactorySupport.getLogger(java.lang.String)"], ["void", "com.hazelcast.logging.LoggerFactorySupport.clearLoadedLoggers()"], ["com.hazelcast.logging.AbstractLogger", "com.hazelcast.logging.AbstractLogger()"], ["void", "com.hazelcast.logging.AbstractLogger.finest(java.lang.String)"], ["void", "com.hazelcast.logging.AbstractLogger.finest(java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.logging.AbstractLogger.finest(java.lang.Throwable)"], ["boolean", "com.hazelcast.logging.AbstractLogger.isFinestEnabled()"], ["void", "com.hazelcast.logging.AbstractLogger.fine(java.lang.String)"], ["void", "com.hazelcast.logging.AbstractLogger.fine(java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.logging.AbstractLogger.fine(java.lang.Throwable)"], ["boolean", "com.hazelcast.logging.AbstractLogger.isFineEnabled()"], ["void", "com.hazelcast.logging.AbstractLogger.info(java.lang.String)"], ["boolean", "com.hazelcast.logging.AbstractLogger.isInfoEnabled()"], ["void", "com.hazelcast.logging.AbstractLogger.warning(java.lang.String)"], ["void", "com.hazelcast.logging.AbstractLogger.warning(java.lang.Throwable)"], ["void", "com.hazelcast.logging.AbstractLogger.warning(java.lang.String, java.lang.Throwable)"], ["boolean", "com.hazelcast.logging.AbstractLogger.isWarningEnabled()"], ["void", "com.hazelcast.logging.AbstractLogger.severe(java.lang.String)"], ["void", "com.hazelcast.logging.AbstractLogger.severe(java.lang.Throwable)"], ["void", "com.hazelcast.logging.AbstractLogger.severe(java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.logging.Slf4jFactory$Slf4jLogger.log(java.util.logging.Level, java.lang.String)"], ["void", "com.hazelcast.logging.Slf4jFactory$Slf4jLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["java.util.logging.Level", "com.hazelcast.logging.Slf4jFactory$Slf4jLogger.getLevel()"], ["boolean", "com.hazelcast.logging.Slf4jFactory$Slf4jLogger.isLoggable(java.util.logging.Level)"], ["void", "com.hazelcast.logging.Slf4jFactory$Slf4jLogger.log(com.hazelcast.logging.LogEvent)"], ["com.hazelcast.logging.StandardLoggerFactory", "com.hazelcast.logging.StandardLoggerFactory()"], ["com.hazelcast.logging.StandardLoggerFactory$StandardLogger", "com.hazelcast.logging.StandardLoggerFactory$StandardLogger(java.util.logging.Logger)"], ["void", "com.hazelcast.logging.StandardLoggerFactory$StandardLogger.log(java.util.logging.Level, java.lang.String)"], ["void", "com.hazelcast.logging.StandardLoggerFactory$StandardLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.logging.StandardLoggerFactory$StandardLogger.log(com.hazelcast.logging.LogEvent)"], ["java.util.logging.Level", "com.hazelcast.logging.StandardLoggerFactory$StandardLogger.getLevel()"], ["boolean", "com.hazelcast.logging.StandardLoggerFactory$StandardLogger.isLoggable(java.util.logging.Level)"], ["com.hazelcast.logging.NoLogFactory", "com.hazelcast.logging.NoLogFactory()"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.NoLogFactory.getLogger(java.lang.String)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.Logger.getLogger(java.lang.Class)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.Logger.getLogger(java.lang.String)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.Logger.noLogger()"], ["com.hazelcast.logging.LoggerFactory", "com.hazelcast.logging.Logger.newLoggerFactory(java.lang.String)"], ["java.util.logging.Level", "com.hazelcast.logging.LoggingServiceImpl$LogListenerRegistration.getLevel()"], ["com.hazelcast.logging.LogListener", "com.hazelcast.logging.LoggingServiceImpl$LogListenerRegistration.getLogListener()"], ["boolean", "com.hazelcast.logging.LoggingServiceImpl$LogListenerRegistration.equals(java.lang.Object)"], ["int", "com.hazelcast.logging.LoggingServiceImpl$LogListenerRegistration.hashCode()"], ["com.hazelcast.logging.LogEvent", "com.hazelcast.logging.LogEvent(java.util.logging.LogRecord, com.hazelcast.core.Member)"], ["com.hazelcast.core.Member", "com.hazelcast.logging.LogEvent.getMember()"], ["java.util.logging.LogRecord", "com.hazelcast.logging.LogEvent.getLogRecord()"], ["com.hazelcast.logging.Log4jFactory", "com.hazelcast.logging.Log4jFactory()"], ["com.hazelcast.logging.Slf4jFactory", "com.hazelcast.logging.Slf4jFactory()"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.LoggingServiceImpl$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.logging.LoggingServiceImpl$1.createNew(java.lang.Object)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.logging.LoggerFactorySupport$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.logging.LoggerFactorySupport$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.finest(java.lang.String)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.finest(java.lang.Throwable)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.finest(java.lang.String, java.lang.Throwable)"], ["boolean", "com.hazelcast.logging.NoLogFactory$NoLogger.isFinestEnabled()"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.fine(java.lang.String)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.fine(java.lang.Throwable)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.fine(java.lang.String, java.lang.Throwable)"], ["boolean", "com.hazelcast.logging.NoLogFactory$NoLogger.isFineEnabled()"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.info(java.lang.String)"], ["boolean", "com.hazelcast.logging.NoLogFactory$NoLogger.isInfoEnabled()"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.warning(java.lang.String)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.warning(java.lang.Throwable)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.warning(java.lang.String, java.lang.Throwable)"], ["boolean", "com.hazelcast.logging.NoLogFactory$NoLogger.isWarningEnabled()"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.severe(java.lang.String)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.severe(java.lang.Throwable)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.severe(java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.log(java.util.logging.Level, java.lang.String)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.logging.NoLogFactory$NoLogger.log(com.hazelcast.logging.LogEvent)"], ["java.util.logging.Level", "com.hazelcast.logging.NoLogFactory$NoLogger.getLevel()"], ["boolean", "com.hazelcast.logging.NoLogFactory$NoLogger.isLoggable(java.util.logging.Level)"], ["com.hazelcast.logging.Log4j2Factory", "com.hazelcast.logging.Log4j2Factory()"], ["void", "com.hazelcast.logging.LoggingServiceImpl$DefaultLogger.log(java.util.logging.Level, java.lang.String)"], ["void", "com.hazelcast.logging.LoggingServiceImpl$DefaultLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.logging.LoggingServiceImpl$DefaultLogger.log(com.hazelcast.logging.LogEvent)"], ["java.util.logging.Level", "com.hazelcast.logging.LoggingServiceImpl$DefaultLogger.getLevel()"], ["boolean", "com.hazelcast.logging.LoggingServiceImpl$DefaultLogger.isLoggable(java.util.logging.Level)"], ["void", "com.hazelcast.logging.Log4jFactory$Log4jLogger.log(java.util.logging.Level, java.lang.String)"], ["void", "com.hazelcast.logging.Log4jFactory$Log4jLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["java.util.logging.Level", "com.hazelcast.logging.Log4jFactory$Log4jLogger.getLevel()"], ["boolean", "com.hazelcast.logging.Log4jFactory$Log4jLogger.isLoggable(java.util.logging.Level)"], ["void", "com.hazelcast.logging.Log4jFactory$Log4jLogger.log(com.hazelcast.logging.LogEvent)"], ["com.hazelcast.query.SqlPredicate", "com.hazelcast.query.SqlPredicate(java.lang.String)"], ["com.hazelcast.query.SqlPredicate", "com.hazelcast.query.SqlPredicate()"], ["boolean", "com.hazelcast.query.SqlPredicate.apply(java.util.Map$Entry)"], ["boolean", "com.hazelcast.query.SqlPredicate.isIndexed(com.hazelcast.query.impl.QueryContext)"], ["void", "com.hazelcast.query.SqlPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.SqlPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.SqlPredicate.toString()"], ["boolean", "com.hazelcast.query.SqlPredicate.equals(java.lang.Object)"], ["int", "com.hazelcast.query.SqlPredicate.hashCode()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.SqlPredicate.accept(com.hazelcast.query.impl.predicates.Visitor, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.SqlPredicate.getPredicate()"], ["int", "com.hazelcast.query.SqlPredicate.getFactoryId()"], ["int", "com.hazelcast.query.SqlPredicate.getId()"], ["com.hazelcast.query.Parser", "com.hazelcast.query.Parser()"], ["com.hazelcast.query.QueryConstants[]", "com.hazelcast.query.QueryConstants.values()"], ["com.hazelcast.query.QueryConstants", "com.hazelcast.query.QueryConstants.valueOf(java.lang.String)"], ["java.lang.String", "com.hazelcast.query.QueryConstants.value()"], ["com.hazelcast.query.impl.IndexCopyBehavior[]", "com.hazelcast.query.impl.IndexCopyBehavior.values()"], ["com.hazelcast.query.impl.IndexCopyBehavior", "com.hazelcast.query.impl.IndexCopyBehavior.valueOf(java.lang.String)"], ["com.hazelcast.query.impl.DefaultArgumentParser", "com.hazelcast.query.impl.DefaultArgumentParser()"], ["java.lang.Object", "com.hazelcast.query.impl.DefaultArgumentParser.parse(java.lang.Object)"], ["boolean", "com.hazelcast.query.impl.FastMultiResultSet$It.hasNext()"], ["com.hazelcast.query.impl.QueryableEntry", "com.hazelcast.query.impl.FastMultiResultSet$It.next()"], ["void", "com.hazelcast.query.impl.FastMultiResultSet$It.remove()"], ["java.lang.Object", "com.hazelcast.query.impl.FastMultiResultSet$It.next()"], ["com.hazelcast.query.impl.IndexInfo", "com.hazelcast.query.impl.IndexInfo()"], ["com.hazelcast.query.impl.IndexInfo", "com.hazelcast.query.impl.IndexInfo(java.lang.String, boolean)"], ["void", "com.hazelcast.query.impl.IndexInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.IndexInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.IndexInfo.getAttributeName()"], ["boolean", "com.hazelcast.query.impl.IndexInfo.isOrdered()"], ["int", "com.hazelcast.query.impl.IndexInfo.getFactoryId()"], ["int", "com.hazelcast.query.impl.IndexInfo.getId()"], ["boolean", "com.hazelcast.query.impl.IndexInfo.equals(java.lang.Object)"], ["int", "com.hazelcast.query.impl.IndexInfo.hashCode()"], ["int", "com.hazelcast.query.impl.IndexInfo.compareTo(com.hazelcast.query.impl.IndexInfo)"], ["int", "com.hazelcast.query.impl.IndexInfo.compareTo(java.lang.Object)"], ["com.hazelcast.query.impl.SingleResultSet", "com.hazelcast.query.impl.SingleResultSet(java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.query.impl.QueryableEntry>)"], ["boolean", "com.hazelcast.query.impl.SingleResultSet.contains(java.lang.Object)"], ["int", "com.hazelcast.query.impl.SingleResultSet.size()"], ["com.hazelcast.query.impl.DuplicateDetectingMultiResult", "com.hazelcast.query.impl.DuplicateDetectingMultiResult()"], ["void", "com.hazelcast.query.impl.DuplicateDetectingMultiResult.addResultSet(java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.query.impl.QueryableEntry>)"], ["boolean", "com.hazelcast.query.impl.DuplicateDetectingMultiResult.contains(java.lang.Object)"], ["int", "com.hazelcast.query.impl.DuplicateDetectingMultiResult.size()"], ["com.hazelcast.query.impl.predicates.LikePredicate", "com.hazelcast.query.impl.predicates.LikePredicate()"], ["com.hazelcast.query.impl.predicates.LikePredicate", "com.hazelcast.query.impl.predicates.LikePredicate(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.query.impl.predicates.LikePredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.LikePredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.LikePredicate.toString()"], ["int", "com.hazelcast.query.impl.predicates.LikePredicate.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.RuleBasedQueryOptimizer", "com.hazelcast.query.impl.predicates.RuleBasedQueryOptimizer()"], ["<K, V> com.hazelcast.query.Predicate<K, V>", "com.hazelcast.query.impl.predicates.RuleBasedQueryOptimizer.optimize(com.hazelcast.query.Predicate<K, V>, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.impl.predicates.RegexPredicate", "com.hazelcast.query.impl.predicates.RegexPredicate()"], ["com.hazelcast.query.impl.predicates.RegexPredicate", "com.hazelcast.query.impl.predicates.RegexPredicate(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.query.impl.predicates.RegexPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.RegexPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.RegexPredicate.toString()"], ["int", "com.hazelcast.query.impl.predicates.RegexPredicate.getId()"], ["com.hazelcast.query.impl.predicates.AndPredicate", "com.hazelcast.query.impl.predicates.AndPredicate()"], ["com.hazelcast.query.impl.predicates.AndPredicate", "com.hazelcast.query.impl.predicates.AndPredicate(com.hazelcast.query.Predicate...)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.AndPredicate.accept(com.hazelcast.query.impl.predicates.Visitor, com.hazelcast.query.impl.Indexes)"], ["boolean", "com.hazelcast.query.impl.predicates.AndPredicate.isIndexed(com.hazelcast.query.impl.QueryContext)"], ["boolean", "com.hazelcast.query.impl.predicates.AndPredicate.apply(java.util.Map$Entry)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.AndPredicate.toString()"], ["void", "com.hazelcast.query.impl.predicates.AndPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.AndPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.AndPredicate.negate()"], ["int", "com.hazelcast.query.impl.predicates.AndPredicate.getFactoryId()"], ["int", "com.hazelcast.query.impl.predicates.AndPredicate.getId()"], ["<K, V> com.hazelcast.query.Predicate<K, V>[]", "com.hazelcast.query.impl.predicates.AndPredicate.getPredicates()"], ["<K, V> void", "com.hazelcast.query.impl.predicates.AndPredicate.setPredicates(com.hazelcast.query.Predicate<K, V>[])"], ["com.hazelcast.query.impl.predicates.NotPredicate", "com.hazelcast.query.impl.predicates.NotPredicate(com.hazelcast.query.Predicate)"], ["com.hazelcast.query.impl.predicates.NotPredicate", "com.hazelcast.query.impl.predicates.NotPredicate()"], ["boolean", "com.hazelcast.query.impl.predicates.NotPredicate.apply(java.util.Map$Entry)"], ["void", "com.hazelcast.query.impl.predicates.NotPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.NotPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.NotPredicate.toString()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.NotPredicate.accept(com.hazelcast.query.impl.predicates.Visitor, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.NotPredicate.negate()"], ["int", "com.hazelcast.query.impl.predicates.NotPredicate.getFactoryId()"], ["int", "com.hazelcast.query.impl.predicates.NotPredicate.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.OrPredicate", "com.hazelcast.query.impl.predicates.OrPredicate()"], ["com.hazelcast.query.impl.predicates.OrPredicate", "com.hazelcast.query.impl.predicates.OrPredicate(com.hazelcast.query.Predicate...)"], ["boolean", "com.hazelcast.query.impl.predicates.OrPredicate.isIndexed(com.hazelcast.query.impl.QueryContext)"], ["boolean", "com.hazelcast.query.impl.predicates.OrPredicate.apply(java.util.Map$Entry)"], ["void", "com.hazelcast.query.impl.predicates.OrPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.OrPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.OrPredicate.toString()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.OrPredicate.accept(com.hazelcast.query.impl.predicates.Visitor, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.OrPredicate.negate()"], ["int", "com.hazelcast.query.impl.predicates.OrPredicate.getFactoryId()"], ["int", "com.hazelcast.query.impl.predicates.OrPredicate.getId()"], ["<K, V> com.hazelcast.query.Predicate<K, V>[]", "com.hazelcast.query.impl.predicates.OrPredicate.getPredicates()"], ["<K, V> void", "com.hazelcast.query.impl.predicates.OrPredicate.setPredicates(com.hazelcast.query.Predicate<K, V>[])"], ["com.hazelcast.query.impl.predicates.AbstractVisitor", "com.hazelcast.query.impl.predicates.AbstractVisitor()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.AbstractVisitor.visit(com.hazelcast.query.impl.predicates.AndPredicate, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.AbstractVisitor.visit(com.hazelcast.query.impl.predicates.OrPredicate, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.AbstractVisitor.visit(com.hazelcast.query.impl.predicates.NotPredicate, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.GreaterLessPredicate", "com.hazelcast.query.impl.predicates.GreaterLessPredicate()"], ["com.hazelcast.query.impl.predicates.GreaterLessPredicate", "com.hazelcast.query.impl.predicates.GreaterLessPredicate(java.lang.String, java.lang.Comparable, boolean, boolean)"], ["void", "com.hazelcast.query.impl.predicates.GreaterLessPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.query.impl.predicates.GreaterLessPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.GreaterLessPredicate.toString()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.GreaterLessPredicate.negate()"], ["int", "com.hazelcast.query.impl.predicates.GreaterLessPredicate.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.NotEqualPredicate", "com.hazelcast.query.impl.predicates.NotEqualPredicate()"], ["com.hazelcast.query.impl.predicates.NotEqualPredicate", "com.hazelcast.query.impl.predicates.NotEqualPredicate(java.lang.String, java.lang.Comparable)"], ["boolean", "com.hazelcast.query.impl.predicates.NotEqualPredicate.apply(java.util.Map$Entry)"], ["boolean", "com.hazelcast.query.impl.predicates.NotEqualPredicate.isIndexed(com.hazelcast.query.impl.QueryContext)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.NotEqualPredicate.toString()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.NotEqualPredicate.negate()"], ["int", "com.hazelcast.query.impl.predicates.NotEqualPredicate.getId()"], ["com.hazelcast.query.impl.predicates.InPredicate", "com.hazelcast.query.impl.predicates.InPredicate()"], ["com.hazelcast.query.impl.predicates.InPredicate", "com.hazelcast.query.impl.predicates.InPredicate(java.lang.String, java.lang.Comparable...)"], ["void", "com.hazelcast.query.impl.predicates.InPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.InPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.InPredicate.toString()"], ["int", "com.hazelcast.query.impl.predicates.InPredicate.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.query.Predicate[]", "com.hazelcast.query.impl.predicates.VisitorUtils.acceptVisitor(com.hazelcast.query.Predicate[], com.hazelcast.query.impl.predicates.Visitor, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.impl.predicates.EqualPredicate", "com.hazelcast.query.impl.predicates.EqualPredicate()"], ["com.hazelcast.query.impl.predicates.EqualPredicate", "com.hazelcast.query.impl.predicates.EqualPredicate(java.lang.String)"], ["com.hazelcast.query.impl.predicates.EqualPredicate", "com.hazelcast.query.impl.predicates.EqualPredicate(java.lang.String, java.lang.Comparable)"], ["void", "com.hazelcast.query.impl.predicates.EqualPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.EqualPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.EqualPredicate.toString()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.EqualPredicate.negate()"], ["int", "com.hazelcast.query.impl.predicates.EqualPredicate.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.EmptyOptimizer", "com.hazelcast.query.impl.predicates.EmptyOptimizer()"], ["<K, V> com.hazelcast.query.Predicate<K, V>", "com.hazelcast.query.impl.predicates.EmptyOptimizer.optimize(com.hazelcast.query.Predicate<K, V>, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.impl.predicates.BetweenPredicate", "com.hazelcast.query.impl.predicates.BetweenPredicate()"], ["com.hazelcast.query.impl.predicates.BetweenPredicate", "com.hazelcast.query.impl.predicates.BetweenPredicate(java.lang.String, java.lang.Comparable, java.lang.Comparable)"], ["void", "com.hazelcast.query.impl.predicates.BetweenPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.BetweenPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.BetweenPredicate.toString()"], ["int", "com.hazelcast.query.impl.predicates.BetweenPredicate.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.OrToInVisitor", "com.hazelcast.query.impl.predicates.OrToInVisitor()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.OrToInVisitor.visit(com.hazelcast.query.impl.predicates.OrPredicate, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.impl.predicates.ILikePredicate", "com.hazelcast.query.impl.predicates.ILikePredicate()"], ["com.hazelcast.query.impl.predicates.ILikePredicate", "com.hazelcast.query.impl.predicates.ILikePredicate(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.ILikePredicate.toString()"], ["int", "com.hazelcast.query.impl.predicates.ILikePredicate.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.FlatteningVisitor", "com.hazelcast.query.impl.predicates.FlatteningVisitor()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.FlatteningVisitor.visit(com.hazelcast.query.impl.predicates.AndPredicate, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.FlatteningVisitor.visit(com.hazelcast.query.impl.predicates.OrPredicate, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.FlatteningVisitor.visit(com.hazelcast.query.impl.predicates.NotPredicate, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.QueryOptimizerFactory$Type[]", "com.hazelcast.query.impl.predicates.QueryOptimizerFactory$Type.values()"], ["com.hazelcast.query.impl.predicates.QueryOptimizerFactory$Type", "com.hazelcast.query.impl.predicates.QueryOptimizerFactory$Type.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.PredicateDataSerializerHook", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook()"], ["int", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$7.createNew(java.lang.Object)"], ["boolean", "com.hazelcast.query.impl.predicates.AbstractPredicate.apply(java.util.Map$Entry<K, V>)"], ["void", "com.hazelcast.query.impl.predicates.AbstractPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.AbstractPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.query.impl.predicates.AbstractPredicate.getFactoryId()"], ["boolean", "com.hazelcast.query.impl.predicates.AbstractIndexAwarePredicate.isIndexed(com.hazelcast.query.impl.QueryContext)"], ["com.hazelcast.query.impl.predicates.BetweenVisitor", "com.hazelcast.query.impl.predicates.BetweenVisitor()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.predicates.BetweenVisitor.visit(com.hazelcast.query.impl.predicates.AndPredicate, com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.query.impl.predicates.InstanceOfPredicate", "com.hazelcast.query.impl.predicates.InstanceOfPredicate(java.lang.Class)"], ["com.hazelcast.query.impl.predicates.InstanceOfPredicate", "com.hazelcast.query.impl.predicates.InstanceOfPredicate()"], ["boolean", "com.hazelcast.query.impl.predicates.InstanceOfPredicate.apply(java.util.Map$Entry)"], ["void", "com.hazelcast.query.impl.predicates.InstanceOfPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.predicates.InstanceOfPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.impl.predicates.InstanceOfPredicate.toString()"], ["int", "com.hazelcast.query.impl.predicates.InstanceOfPredicate.getFactoryId()"], ["int", "com.hazelcast.query.impl.predicates.InstanceOfPredicate.getId()"], ["com.hazelcast.query.impl.predicates.QueryOptimizer", "com.hazelcast.query.impl.predicates.QueryOptimizerFactory.newOptimizer(com.hazelcast.spi.properties.HazelcastProperties)"], ["void", "com.hazelcast.query.impl.SortedIndexStore$AddFunctor.invoke(java.lang.Comparable, com.hazelcast.query.impl.QueryableEntry)"], ["void", "com.hazelcast.query.impl.SortedIndexStore$AddFunctor.invoke(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.query.impl.BaseIndexStore.newIndex(java.lang.Object, com.hazelcast.query.impl.QueryableEntry)"], ["void", "com.hazelcast.query.impl.BaseIndexStore.removeIndex(java.lang.Object, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.query.impl.BaseIndexStore.updateIndex(java.lang.Object, java.lang.Object, com.hazelcast.query.impl.QueryableEntry)"], ["void", "com.hazelcast.query.impl.BaseIndexStore.destroy()"], ["com.hazelcast.query.impl.SkipIndexPredicate", "com.hazelcast.query.impl.SkipIndexPredicate(com.hazelcast.query.Predicate)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.impl.SkipIndexPredicate.getTarget()"], ["boolean", "com.hazelcast.query.impl.SkipIndexPredicate.apply(java.util.Map$Entry)"], ["java.lang.String", "com.hazelcast.query.impl.SkipIndexPredicate.toString()"], ["com.hazelcast.query.impl.ComparisonType[]", "com.hazelcast.query.impl.ComparisonType.values()"], ["com.hazelcast.query.impl.ComparisonType", "com.hazelcast.query.impl.ComparisonType.valueOf(java.lang.String)"], ["com.hazelcast.query.impl.SortedIndexStore", "com.hazelcast.query.impl.SortedIndexStore(com.hazelcast.query.impl.IndexCopyBehavior)"], ["void", "com.hazelcast.query.impl.SortedIndexStore.clear()"], ["java.lang.String", "com.hazelcast.query.impl.SortedIndexStore.toString()"], ["com.hazelcast.query.impl.TypeConverters$BaseTypeConverter", "com.hazelcast.query.impl.TypeConverters$BaseTypeConverter()"], ["java.lang.Comparable", "com.hazelcast.query.impl.TypeConverters$BaseTypeConverter.convert(java.lang.Comparable)"], ["void", "com.hazelcast.query.impl.SortedIndexStore$CopyOnWriteRemoveFunctor.invoke(java.lang.Comparable, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.query.impl.SortedIndexStore$CopyOnWriteRemoveFunctor.invoke(java.lang.Object, java.lang.Object)"], ["com.hazelcast.query.impl.FalsePredicate", "com.hazelcast.query.impl.FalsePredicate()"], ["boolean", "com.hazelcast.query.impl.FalsePredicate.apply(java.util.Map$Entry<K, V>)"], ["java.lang.String", "com.hazelcast.query.impl.FalsePredicate.toString()"], ["java.util.Set<com.hazelcast.query.impl.QueryableEntry<K, V>>", "com.hazelcast.query.impl.FalsePredicate.filter(com.hazelcast.query.impl.QueryContext)"], ["boolean", "com.hazelcast.query.impl.FalsePredicate.isIndexed(com.hazelcast.query.impl.QueryContext)"], ["void", "com.hazelcast.query.impl.FalsePredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.FalsePredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.query.impl.FalsePredicate.getFactoryId()"], ["int", "com.hazelcast.query.impl.FalsePredicate.getId()"], ["com.hazelcast.query.impl.CachedQueryEntry", "com.hazelcast.query.impl.CachedQueryEntry()"], ["com.hazelcast.query.impl.CachedQueryEntry", "com.hazelcast.query.impl.CachedQueryEntry(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.nio.serialization.Data, java.lang.Object, com.hazelcast.query.impl.getters.Extractors)"], ["void", "com.hazelcast.query.impl.CachedQueryEntry.init(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.nio.serialization.Data, java.lang.Object, com.hazelcast.query.impl.getters.Extractors)"], ["K", "com.hazelcast.query.impl.CachedQueryEntry.getKey()"], ["V", "com.hazelcast.query.impl.CachedQueryEntry.getValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.query.impl.CachedQueryEntry.getKeyData()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.query.impl.CachedQueryEntry.getValueData()"], ["V", "com.hazelcast.query.impl.CachedQueryEntry.setValue(V)"], ["boolean", "com.hazelcast.query.impl.CachedQueryEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.query.impl.CachedQueryEntry.hashCode()"], ["com.hazelcast.query.impl.IndexImpl$NullObject", "com.hazelcast.query.impl.IndexImpl$NullObject()"], ["int", "com.hazelcast.query.impl.IndexImpl$NullObject.compareTo(java.lang.Object)"], ["int", "com.hazelcast.query.impl.IndexImpl$NullObject.hashCode()"], ["boolean", "com.hazelcast.query.impl.IndexImpl$NullObject.equals(java.lang.Object)"], ["void", "com.hazelcast.query.impl.IndexImpl$NullObject.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.IndexImpl$NullObject.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.query.impl.IndexImpl$NullObject.getFactoryId()"], ["int", "com.hazelcast.query.impl.IndexImpl$NullObject.getId()"], ["com.hazelcast.query.impl.Indexes", "com.hazelcast.query.impl.Indexes(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.map.impl.query.IndexProvider, com.hazelcast.query.impl.getters.Extractors, boolean, com.hazelcast.query.impl.IndexCopyBehavior)"], ["synchronized", "com.hazelcast.query.impl.Indexes.com.hazelcast.query.impl.Index destroyIndex(java.lang.String)"], ["synchronized", "com.hazelcast.query.impl.Indexes.com.hazelcast.query.impl.Index addOrGetIndex(java.lang.String, boolean)"], ["com.hazelcast.query.impl.Index[]", "com.hazelcast.query.impl.Indexes.getIndexes()"], ["void", "com.hazelcast.query.impl.Indexes.destroyIndexes()"], ["void", "com.hazelcast.query.impl.Indexes.clearAll()"], ["void", "com.hazelcast.query.impl.Indexes.removeEntryIndex(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["boolean", "com.hazelcast.query.impl.Indexes.hasIndex()"], ["void", "com.hazelcast.query.impl.Indexes.saveEntryIndex(com.hazelcast.query.impl.QueryableEntry, java.lang.Object)"], ["boolean", "com.hazelcast.query.impl.Indexes.isGlobal()"], ["com.hazelcast.query.impl.Index", "com.hazelcast.query.impl.Indexes.getIndex(java.lang.String)"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore$CopyOnWriteRemoveFunctor.invoke(java.lang.Comparable, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore$CopyOnWriteRemoveFunctor.invoke(java.lang.Object, java.lang.Object)"], ["com.hazelcast.query.impl.UnsortedIndexStore", "com.hazelcast.query.impl.UnsortedIndexStore(com.hazelcast.query.impl.IndexCopyBehavior)"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore.clear()"], ["java.lang.String", "com.hazelcast.query.impl.UnsortedIndexStore.toString()"], ["boolean", "com.hazelcast.query.impl.AndResultSet$It.hasNext()"], ["com.hazelcast.query.impl.QueryableEntry", "com.hazelcast.query.impl.AndResultSet$It.next()"], ["void", "com.hazelcast.query.impl.AndResultSet$It.remove()"], ["java.lang.Object", "com.hazelcast.query.impl.AndResultSet$It.next()"], ["com.hazelcast.query.impl.QueryContext", "com.hazelcast.query.impl.QueryContext(com.hazelcast.query.impl.Indexes)"], ["com.hazelcast.query.impl.Index", "com.hazelcast.query.impl.QueryContext.getIndex(java.lang.String)"], ["com.hazelcast.query.impl.IndexImpl", "com.hazelcast.query.impl.IndexImpl(java.lang.String, boolean, com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.query.impl.getters.Extractors, com.hazelcast.query.impl.IndexCopyBehavior)"], ["com.hazelcast.query.impl.IndexStore", "com.hazelcast.query.impl.IndexImpl.createIndexStore(boolean)"], ["void", "com.hazelcast.query.impl.IndexImpl.saveEntryIndex(com.hazelcast.query.impl.QueryableEntry, java.lang.Object)"], ["void", "com.hazelcast.query.impl.IndexImpl.removeEntryIndex(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["com.hazelcast.core.TypeConverter", "com.hazelcast.query.impl.IndexImpl.getConverter()"], ["void", "com.hazelcast.query.impl.IndexImpl.clear()"], ["void", "com.hazelcast.query.impl.IndexImpl.destroy()"], ["java.lang.String", "com.hazelcast.query.impl.IndexImpl.getAttributeName()"], ["boolean", "com.hazelcast.query.impl.IndexImpl.isOrdered()"], ["com.hazelcast.query.impl.AttributeType[]", "com.hazelcast.query.impl.AttributeType.values()"], ["com.hazelcast.query.impl.AttributeType", "com.hazelcast.query.impl.AttributeType.valueOf(java.lang.String)"], ["com.hazelcast.core.TypeConverter", "com.hazelcast.query.impl.AttributeType.getConverter()"], ["com.hazelcast.query.impl.AndResultSet", "com.hazelcast.query.impl.AndResultSet(java.util.Set<com.hazelcast.query.impl.QueryableEntry>, java.util.List<java.util.Set<com.hazelcast.query.impl.QueryableEntry>>, java.util.List<com.hazelcast.query.Predicate>)"], ["boolean", "com.hazelcast.query.impl.AndResultSet.contains(java.lang.Object)"], ["int", "com.hazelcast.query.impl.AndResultSet.size()"], ["int", "com.hazelcast.query.impl.AndResultSet.estimatedSize()"], ["java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.query.impl.QueryableEntry>", "com.hazelcast.query.impl.BaseIndexStore$CopyInputFunctor.invoke(java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.query.impl.QueryableEntry>)"], ["com.hazelcast.query.impl.OrResultSet", "com.hazelcast.query.impl.OrResultSet(java.util.List<java.util.Set<com.hazelcast.query.impl.QueryableEntry>>)"], ["boolean", "com.hazelcast.query.impl.OrResultSet.contains(java.lang.Object)"], ["int", "com.hazelcast.query.impl.OrResultSet.size()"], ["int", "com.hazelcast.query.impl.OrResultSet.estimatedSize()"], ["com.hazelcast.query.impl.QueryableEntry", "com.hazelcast.query.impl.QueryableEntry()"], ["java.lang.Object", "com.hazelcast.query.impl.QueryableEntry.getAttributeValue(java.lang.String)"], ["com.hazelcast.query.impl.AttributeType", "com.hazelcast.query.impl.QueryableEntry.getAttributeType(java.lang.String)"], ["com.hazelcast.query.impl.MapIndexInfo", "com.hazelcast.query.impl.MapIndexInfo(java.lang.String)"], ["com.hazelcast.query.impl.MapIndexInfo", "com.hazelcast.query.impl.MapIndexInfo()"], ["void", "com.hazelcast.query.impl.MapIndexInfo.addIndexInfo(java.lang.String, boolean)"], ["void", "com.hazelcast.query.impl.MapIndexInfo.addIndexInfos(java.util.Collection<com.hazelcast.query.impl.IndexInfo>)"], ["java.lang.String", "com.hazelcast.query.impl.MapIndexInfo.getMapName()"], ["void", "com.hazelcast.query.impl.MapIndexInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.impl.MapIndexInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.query.impl.MapIndexInfo.getFactoryId()"], ["int", "com.hazelcast.query.impl.MapIndexInfo.getId()"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore$AddFunctor.invoke(java.lang.Comparable, com.hazelcast.query.impl.QueryableEntry)"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore$AddFunctor.invoke(java.lang.Object, java.lang.Object)"], ["com.hazelcast.query.impl.AttributeType", "com.hazelcast.query.impl.getters.ReflectionHelper.getAttributeType(java.lang.Class)"], ["com.hazelcast.query.impl.getters.Getter", "com.hazelcast.query.impl.getters.ReflectionHelper.createGetter(java.lang.Object, java.lang.String)"], ["java.lang.Object", "com.hazelcast.query.impl.getters.ReflectionHelper.extractValue(java.lang.Object, java.lang.String)"], ["<T> T", "com.hazelcast.query.impl.getters.ReflectionHelper.invokeMethod(java.lang.Object, java.lang.String)"], ["com.hazelcast.query.impl.getters.Extractors", "com.hazelcast.query.impl.getters.Extractors(java.util.List<com.hazelcast.config.MapAttributeConfig>, java.lang.ClassLoader)"], ["java.lang.Object", "com.hazelcast.query.impl.getters.Extractors.extract(com.hazelcast.internal.serialization.InternalSerializationService, java.lang.Object, java.lang.String)"], ["com.hazelcast.query.impl.getters.Extractors", "com.hazelcast.query.impl.getters.Extractors.empty()"], ["com.hazelcast.query.impl.getters.FieldGetter", "com.hazelcast.query.impl.getters.FieldGetter(com.hazelcast.query.impl.getters.Getter, java.lang.reflect.Field, java.lang.String, java.lang.Class)"], ["java.lang.String", "com.hazelcast.query.impl.getters.FieldGetter.toString()"], ["com.hazelcast.query.impl.getters.ImmutableMultiResult", "com.hazelcast.query.impl.getters.ImmutableMultiResult(com.hazelcast.query.impl.getters.MultiResult<T>)"], ["void", "com.hazelcast.query.impl.getters.ImmutableMultiResult.add(T)"], ["void", "com.hazelcast.query.impl.getters.ImmutableMultiResult.addNullOrEmptyTarget()"], ["boolean", "com.hazelcast.query.impl.getters.ImmutableMultiResult.isEmpty()"], ["boolean", "com.hazelcast.query.impl.getters.ImmutableMultiResult.isNullEmptyTarget()"], ["void", "com.hazelcast.query.impl.getters.ImmutableMultiResult.setNullOrEmptyTarget(boolean)"], ["com.hazelcast.util.SampleableConcurrentHashMap<java.lang.String, com.hazelcast.query.impl.getters.Getter>", "com.hazelcast.query.impl.getters.EvictableGetterCache$1.createNew(java.lang.Class)"], ["java.lang.Object", "com.hazelcast.query.impl.getters.EvictableGetterCache$1.createNew(java.lang.Object)"], ["java.lang.String", "com.hazelcast.query.impl.getters.MethodGetter.toString()"], ["com.hazelcast.query.impl.getters.ThisGetter", "com.hazelcast.query.impl.getters.ThisGetter(com.hazelcast.query.impl.getters.Getter, java.lang.Object)"], ["com.hazelcast.query.impl.getters.MultiResult", "com.hazelcast.query.impl.getters.MultiResult()"], ["com.hazelcast.query.impl.getters.MultiResult", "com.hazelcast.query.impl.getters.MultiResult(java.util.List<T>)"], ["void", "com.hazelcast.query.impl.getters.MultiResult.add(T)"], ["void", "com.hazelcast.query.impl.getters.MultiResult.addNullOrEmptyTarget()"], ["boolean", "com.hazelcast.query.impl.getters.MultiResult.isEmpty()"], ["boolean", "com.hazelcast.query.impl.getters.MultiResult.isNullEmptyTarget()"], ["void", "com.hazelcast.query.impl.getters.MultiResult.setNullOrEmptyTarget(boolean)"], ["com.hazelcast.query.impl.getters.AbstractMultiValueGetter", "com.hazelcast.query.impl.getters.AbstractMultiValueGetter(com.hazelcast.query.impl.getters.Getter, java.lang.String, java.lang.Class<?>, java.lang.Class)"], ["java.lang.String", "com.hazelcast.query.impl.getters.SuffixModifierUtils.removeModifierSuffix(java.lang.String)"], ["java.lang.String", "com.hazelcast.query.impl.getters.SuffixModifierUtils.getModifierSuffix(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.query.impl.getters.ExtractorHelper.extractAttributeNameNameWithoutArguments(java.lang.String)"], ["java.lang.String", "com.hazelcast.query.impl.getters.ExtractorHelper.extractArgumentsFromAttributeName(java.lang.String)"], ["com.hazelcast.query.impl.getters.Getter", "com.hazelcast.query.impl.getters.Getter(com.hazelcast.query.impl.getters.Getter)"], ["com.hazelcast.query.impl.getters.PortableGetter", "com.hazelcast.query.impl.getters.PortableGetter(com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.query.impl.getters.Getter", "com.hazelcast.query.impl.getters.GetterFactory.newFieldGetter(java.lang.Object, com.hazelcast.query.impl.getters.Getter, java.lang.reflect.Field, java.lang.String)"], ["com.hazelcast.query.impl.getters.Getter", "com.hazelcast.query.impl.getters.GetterFactory.newMethodGetter(java.lang.Object, com.hazelcast.query.impl.getters.Getter, java.lang.reflect.Method, java.lang.String)"], ["com.hazelcast.query.impl.getters.Getter", "com.hazelcast.query.impl.getters.GetterFactory.newThisGetter(com.hazelcast.query.impl.getters.Getter, java.lang.Object)"], ["java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.query.impl.QueryableEntry>", "com.hazelcast.query.impl.BaseIndexStore$PassThroughFunctor.invoke(java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.query.impl.QueryableEntry>)"], ["com.hazelcast.query.impl.DefaultValueCollector", "com.hazelcast.query.impl.DefaultValueCollector()"], ["void", "com.hazelcast.query.impl.DefaultValueCollector.addObject(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.query.impl.DefaultValueCollector.getResult()"], ["com.hazelcast.query.impl.QueryEntry", "com.hazelcast.query.impl.QueryEntry()"], ["com.hazelcast.query.impl.QueryEntry", "com.hazelcast.query.impl.QueryEntry(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.nio.serialization.Data, java.lang.Object, com.hazelcast.query.impl.getters.Extractors)"], ["void", "com.hazelcast.query.impl.QueryEntry.init(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.nio.serialization.Data, java.lang.Object, com.hazelcast.query.impl.getters.Extractors)"], ["java.lang.Object", "com.hazelcast.query.impl.QueryEntry.getKey()"], ["java.lang.Object", "com.hazelcast.query.impl.QueryEntry.getValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.query.impl.QueryEntry.getKeyData()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.query.impl.QueryEntry.getValueData()"], ["java.lang.Object", "com.hazelcast.query.impl.QueryEntry.setValue(java.lang.Object)"], ["boolean", "com.hazelcast.query.impl.QueryEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.query.impl.QueryEntry.hashCode()"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore$CopyOnWriteAddFunctor.invoke(java.lang.Comparable, com.hazelcast.query.impl.QueryableEntry)"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore$CopyOnWriteAddFunctor.invoke(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.query.impl.SortedIndexStore$CopyOnWriteAddFunctor.invoke(java.lang.Comparable, com.hazelcast.query.impl.QueryableEntry)"], ["void", "com.hazelcast.query.impl.SortedIndexStore$CopyOnWriteAddFunctor.invoke(java.lang.Object, java.lang.Object)"], ["com.hazelcast.query.impl.FastMultiResultSet", "com.hazelcast.query.impl.FastMultiResultSet()"], ["void", "com.hazelcast.query.impl.FastMultiResultSet.addResultSet(java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.query.impl.QueryableEntry>)"], ["boolean", "com.hazelcast.query.impl.FastMultiResultSet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.query.impl.FastMultiResultSet.add(com.hazelcast.query.impl.QueryableEntry)"], ["int", "com.hazelcast.query.impl.FastMultiResultSet.size()"], ["boolean", "com.hazelcast.query.impl.FastMultiResultSet.add(java.lang.Object)"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore$RemoveFunctor.invoke(java.lang.Comparable, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.query.impl.UnsortedIndexStore$RemoveFunctor.invoke(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.query.impl.SortedIndexStore$RemoveFunctor.invoke(java.lang.Comparable, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.query.impl.SortedIndexStore$RemoveFunctor.invoke(java.lang.Object, java.lang.Object)"], ["com.hazelcast.query.impl.QueryableEntriesSegment", "com.hazelcast.query.impl.QueryableEntriesSegment(java.util.Collection<com.hazelcast.query.impl.QueryableEntry>, int)"], ["int", "com.hazelcast.query.impl.QueryableEntriesSegment.getNextTableIndexToReadFrom()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.SqlPredicate$3.create(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.PredicateBuilder()"], ["java.lang.String", "com.hazelcast.query.PredicateBuilder.getAttribute()"], ["void", "com.hazelcast.query.PredicateBuilder.setAttribute(java.lang.String)"], ["boolean", "com.hazelcast.query.PredicateBuilder.apply(java.util.Map$Entry)"], ["com.hazelcast.query.EntryObject", "com.hazelcast.query.PredicateBuilder.getEntryObject()"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.PredicateBuilder.and(com.hazelcast.query.Predicate)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.PredicateBuilder.or(com.hazelcast.query.Predicate)"], ["boolean", "com.hazelcast.query.PredicateBuilder.isIndexed(com.hazelcast.query.impl.QueryContext)"], ["void", "com.hazelcast.query.PredicateBuilder.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.PredicateBuilder.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.PredicateBuilder.toString()"], ["com.hazelcast.query.TruePredicate", "com.hazelcast.query.TruePredicate()"], ["<K, V> com.hazelcast.query.TruePredicate<K, V>", "com.hazelcast.query.TruePredicate.truePredicate()"], ["void", "com.hazelcast.query.TruePredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.TruePredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.query.TruePredicate.apply(java.util.Map$Entry)"], ["java.lang.String", "com.hazelcast.query.TruePredicate.toString()"], ["int", "com.hazelcast.query.TruePredicate.getFactoryId()"], ["int", "com.hazelcast.query.TruePredicate.getId()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.SqlPredicate$4.create(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.extractor.ValueCallback", "com.hazelcast.query.extractor.ValueCallback()"], ["com.hazelcast.query.extractor.ValueExtractor", "com.hazelcast.query.extractor.ValueExtractor()"], ["com.hazelcast.query.extractor.ArgumentParser", "com.hazelcast.query.extractor.ArgumentParser()"], ["com.hazelcast.query.extractor.ValueCollector", "com.hazelcast.query.extractor.ValueCollector()"], ["com.hazelcast.query.extractor.ValueReadingException", "com.hazelcast.query.extractor.ValueReadingException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.query.extractor.ValueReader", "com.hazelcast.query.extractor.ValueReader()"], ["com.hazelcast.query.PartitionPredicate", "com.hazelcast.query.PartitionPredicate()"], ["com.hazelcast.query.PartitionPredicate", "com.hazelcast.query.PartitionPredicate(java.lang.Object, com.hazelcast.query.Predicate<K, V>)"], ["java.lang.Object", "com.hazelcast.query.PartitionPredicate.getPartitionKey()"], ["com.hazelcast.query.Predicate<K, V>", "com.hazelcast.query.PartitionPredicate.getTarget()"], ["boolean", "com.hazelcast.query.PartitionPredicate.apply(java.util.Map$Entry<K, V>)"], ["int", "com.hazelcast.query.PartitionPredicate.getFactoryId()"], ["int", "com.hazelcast.query.PartitionPredicate.getId()"], ["void", "com.hazelcast.query.PartitionPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.PartitionPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.query.PartitionPredicate.toString()"], ["com.hazelcast.query.QueryException", "com.hazelcast.query.QueryException()"], ["com.hazelcast.query.QueryException", "com.hazelcast.query.QueryException(java.lang.String)"], ["com.hazelcast.query.QueryException", "com.hazelcast.query.QueryException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.query.QueryException", "com.hazelcast.query.QueryException(java.lang.Throwable)"], ["com.hazelcast.query.EntryObject", "com.hazelcast.query.EntryObject(com.hazelcast.query.PredicateBuilder)"], ["com.hazelcast.query.EntryObject", "com.hazelcast.query.EntryObject.get(java.lang.String)"], ["com.hazelcast.query.EntryObject", "com.hazelcast.query.EntryObject.key()"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.is(java.lang.String)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.isNot(java.lang.String)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.equal(java.lang.Comparable)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.notEqual(java.lang.Comparable)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.isNull()"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.isNotNull()"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.greaterThan(java.lang.Comparable)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.greaterEqual(java.lang.Comparable)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.lessThan(java.lang.Comparable)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.lessEqual(java.lang.Comparable)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.between(java.lang.Comparable, java.lang.Comparable)"], ["com.hazelcast.query.PredicateBuilder", "com.hazelcast.query.EntryObject.in(java.lang.Comparable...)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.SqlPredicate$6.create(java.lang.String, java.lang.Comparable)"], ["void", "com.hazelcast.query.PagingPredicateAccessor.setAnchor(com.hazelcast.query.PagingPredicate, int, java.util.Map$Entry)"], ["java.util.Map$Entry<java.lang.Integer, java.util.Map$Entry>", "com.hazelcast.query.PagingPredicateAccessor.getNearestAnchorEntry(com.hazelcast.query.PagingPredicate)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.SqlPredicate$1.create(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.PagingPredicate", "com.hazelcast.query.PagingPredicate()"], ["com.hazelcast.query.PagingPredicate", "com.hazelcast.query.PagingPredicate(int)"], ["com.hazelcast.query.PagingPredicate", "com.hazelcast.query.PagingPredicate(com.hazelcast.query.Predicate, int)"], ["com.hazelcast.query.PagingPredicate", "com.hazelcast.query.PagingPredicate(java.util.Comparator<java.util.Map$Entry<K, V>>, int)"], ["com.hazelcast.query.PagingPredicate", "com.hazelcast.query.PagingPredicate(com.hazelcast.query.Predicate<K, V>, java.util.Comparator<java.util.Map$Entry<K, V>>, int)"], ["java.util.Set<com.hazelcast.query.impl.QueryableEntry<K, V>>", "com.hazelcast.query.PagingPredicate.filter(com.hazelcast.query.impl.QueryContext)"], ["boolean", "com.hazelcast.query.PagingPredicate.isIndexed(com.hazelcast.query.impl.QueryContext)"], ["boolean", "com.hazelcast.query.PagingPredicate.apply(java.util.Map$Entry)"], ["void", "com.hazelcast.query.PagingPredicate.reset()"], ["void", "com.hazelcast.query.PagingPredicate.nextPage()"], ["void", "com.hazelcast.query.PagingPredicate.previousPage()"], ["com.hazelcast.util.IterationType", "com.hazelcast.query.PagingPredicate.getIterationType()"], ["void", "com.hazelcast.query.PagingPredicate.setIterationType(com.hazelcast.util.IterationType)"], ["int", "com.hazelcast.query.PagingPredicate.getPage()"], ["void", "com.hazelcast.query.PagingPredicate.setPage(int)"], ["int", "com.hazelcast.query.PagingPredicate.getPageSize()"], ["com.hazelcast.query.Predicate<K, V>", "com.hazelcast.query.PagingPredicate.getPredicate()"], ["java.util.Comparator<java.util.Map$Entry<K, V>>", "com.hazelcast.query.PagingPredicate.getComparator()"], ["java.util.Map$Entry<K, V>", "com.hazelcast.query.PagingPredicate.getAnchor()"], ["void", "com.hazelcast.query.PagingPredicate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.query.PagingPredicate.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.query.PagingPredicate.getFactoryId()"], ["int", "com.hazelcast.query.PagingPredicate.getId()"], ["<K, V> com.hazelcast.query.Predicate<K, V>", "com.hazelcast.query.Predicates.alwaysTrue()"], ["<K, V> com.hazelcast.query.Predicate<K, V>", "com.hazelcast.query.Predicates.alwaysFalse()"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.instanceOf(java.lang.Class)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.and(com.hazelcast.query.Predicate...)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.not(com.hazelcast.query.Predicate)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.or(com.hazelcast.query.Predicate...)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.notEqual(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.equal(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.like(java.lang.String, java.lang.String)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.ilike(java.lang.String, java.lang.String)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.regex(java.lang.String, java.lang.String)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.greaterThan(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.greaterEqual(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.lessThan(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.lessEqual(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.between(java.lang.String, java.lang.Comparable, java.lang.Comparable)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.Predicates.in(java.lang.String, java.lang.Comparable...)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.SqlPredicate$2.create(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.query.Predicate", "com.hazelcast.query.SqlPredicate$5.create(java.lang.String, java.lang.Comparable)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.transaction.impl.TransactionDataSerializerHook$1.create(int)"], ["com.hazelcast.transaction.impl.operations.PurgeTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.PurgeTxBackupLogOperation()"], ["com.hazelcast.transaction.impl.operations.PurgeTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.PurgeTxBackupLogOperation(java.lang.String)"], ["void", "com.hazelcast.transaction.impl.operations.PurgeTxBackupLogOperation.run()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.transaction.impl.operations.PurgeTxBackupLogOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.transaction.impl.operations.PurgeTxBackupLogOperation.getId()"], ["com.hazelcast.transaction.impl.operations.RollbackTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.RollbackTxBackupLogOperation()"], ["com.hazelcast.transaction.impl.operations.RollbackTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.RollbackTxBackupLogOperation(java.lang.String)"], ["void", "com.hazelcast.transaction.impl.operations.RollbackTxBackupLogOperation.run()"], ["java.lang.Object", "com.hazelcast.transaction.impl.operations.RollbackTxBackupLogOperation.getResponse()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.transaction.impl.operations.RollbackTxBackupLogOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.transaction.impl.operations.RollbackTxBackupLogOperation.getId()"], ["com.hazelcast.transaction.impl.operations.AbstractTxOperation", "com.hazelcast.transaction.impl.operations.AbstractTxOperation()"], ["java.lang.String", "com.hazelcast.transaction.impl.operations.AbstractTxOperation.getServiceName()"], ["int", "com.hazelcast.transaction.impl.operations.AbstractTxOperation.getFactoryId()"], ["com.hazelcast.transaction.impl.operations.PurgeAllowedDuringPassiveStateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.PurgeAllowedDuringPassiveStateTxBackupLogOperation()"], ["com.hazelcast.transaction.impl.operations.PurgeAllowedDuringPassiveStateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.PurgeAllowedDuringPassiveStateTxBackupLogOperation(java.lang.String)"], ["int", "com.hazelcast.transaction.impl.operations.PurgeAllowedDuringPassiveStateTxBackupLogOperation.getId()"], ["com.hazelcast.transaction.impl.operations.ReplicateAllowedDuringPassiveStateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.ReplicateAllowedDuringPassiveStateTxBackupLogOperation()"], ["com.hazelcast.transaction.impl.operations.ReplicateAllowedDuringPassiveStateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.ReplicateAllowedDuringPassiveStateTxBackupLogOperation(java.util.List<com.hazelcast.transaction.impl.TransactionLogRecord>, java.lang.String, java.lang.String, long, long)"], ["int", "com.hazelcast.transaction.impl.operations.ReplicateAllowedDuringPassiveStateTxBackupLogOperation.getId()"], ["com.hazelcast.transaction.impl.operations.ReplicateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.ReplicateTxBackupLogOperation()"], ["com.hazelcast.transaction.impl.operations.ReplicateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.ReplicateTxBackupLogOperation(java.util.List<com.hazelcast.transaction.impl.TransactionLogRecord>, java.lang.String, java.lang.String, long, long)"], ["void", "com.hazelcast.transaction.impl.operations.ReplicateTxBackupLogOperation.run()"], ["java.lang.Object", "com.hazelcast.transaction.impl.operations.ReplicateTxBackupLogOperation.getResponse()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.transaction.impl.operations.ReplicateTxBackupLogOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.transaction.impl.operations.ReplicateTxBackupLogOperation.getId()"], ["com.hazelcast.transaction.impl.operations.CreateAllowedDuringPassiveStateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.CreateAllowedDuringPassiveStateTxBackupLogOperation()"], ["com.hazelcast.transaction.impl.operations.CreateAllowedDuringPassiveStateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.CreateAllowedDuringPassiveStateTxBackupLogOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.transaction.impl.operations.CreateAllowedDuringPassiveStateTxBackupLogOperation.run()"], ["int", "com.hazelcast.transaction.impl.operations.CreateAllowedDuringPassiveStateTxBackupLogOperation.getId()"], ["com.hazelcast.transaction.impl.operations.BroadcastTxRollbackOperation", "com.hazelcast.transaction.impl.operations.BroadcastTxRollbackOperation()"], ["com.hazelcast.transaction.impl.operations.BroadcastTxRollbackOperation", "com.hazelcast.transaction.impl.operations.BroadcastTxRollbackOperation(java.lang.String)"], ["void", "com.hazelcast.transaction.impl.operations.BroadcastTxRollbackOperation.run()"], ["java.lang.Object", "com.hazelcast.transaction.impl.operations.BroadcastTxRollbackOperation.getResponse()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.transaction.impl.operations.BroadcastTxRollbackOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.transaction.impl.operations.BroadcastTxRollbackOperation.getId()"], ["com.hazelcast.transaction.impl.operations.RollbackAllowedDuringPassiveStateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.RollbackAllowedDuringPassiveStateTxBackupLogOperation()"], ["com.hazelcast.transaction.impl.operations.RollbackAllowedDuringPassiveStateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.RollbackAllowedDuringPassiveStateTxBackupLogOperation(java.lang.String)"], ["int", "com.hazelcast.transaction.impl.operations.RollbackAllowedDuringPassiveStateTxBackupLogOperation.getId()"], ["com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation()"], ["com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation", "com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation.run()"], ["java.lang.Object", "com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation.getResponse()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation.getId()"], ["java.lang.String", "com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation.getCallerUuid()"], ["java.lang.String", "com.hazelcast.transaction.impl.operations.CreateTxBackupLogOperation.getTxnId()"], ["com.hazelcast.transaction.impl.TransactionalObjectKey", "com.hazelcast.transaction.impl.TransactionalObjectKey(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.transaction.impl.TransactionalObjectKey.equals(java.lang.Object)"], ["int", "com.hazelcast.transaction.impl.TransactionalObjectKey.hashCode()"], ["void", "com.hazelcast.transaction.impl.TransactionImpl$1.handleException(java.lang.Throwable)"], ["com.hazelcast.transaction.impl.TransactionImpl", "com.hazelcast.transaction.impl.TransactionImpl(com.hazelcast.transaction.impl.TransactionManagerServiceImpl, com.hazelcast.spi.NodeEngine, com.hazelcast.transaction.TransactionOptions, java.lang.String)"], ["com.hazelcast.transaction.impl.TransactionImpl", "com.hazelcast.transaction.impl.TransactionImpl(com.hazelcast.transaction.impl.TransactionManagerServiceImpl, com.hazelcast.spi.NodeEngine, com.hazelcast.transaction.TransactionOptions, java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.transaction.impl.TransactionImpl.getTxnId()"], ["long", "com.hazelcast.transaction.impl.TransactionImpl.getStartTime()"], ["java.lang.String", "com.hazelcast.transaction.impl.TransactionImpl.getOwnerUuid()"], ["boolean", "com.hazelcast.transaction.impl.TransactionImpl.isOriginatedFromClient()"], ["com.hazelcast.transaction.impl.Transaction$State", "com.hazelcast.transaction.impl.TransactionImpl.getState()"], ["long", "com.hazelcast.transaction.impl.TransactionImpl.getTimeoutMillis()"], ["void", "com.hazelcast.transaction.impl.TransactionImpl.add(com.hazelcast.transaction.impl.TransactionLogRecord)"], ["com.hazelcast.transaction.impl.TransactionLogRecord", "com.hazelcast.transaction.impl.TransactionImpl.get(java.lang.Object)"], ["void", "com.hazelcast.transaction.impl.TransactionImpl.remove(java.lang.Object)"], ["void", "com.hazelcast.transaction.impl.TransactionImpl.begin()"], ["void", "com.hazelcast.transaction.impl.TransactionImpl.prepare()"], ["boolean", "com.hazelcast.transaction.impl.TransactionImpl.requiresPrepare()"], ["void", "com.hazelcast.transaction.impl.TransactionImpl.commit()"], ["void", "com.hazelcast.transaction.impl.TransactionImpl.rollback()"], ["void", "com.hazelcast.transaction.impl.TransactionImpl.ensureBackupLogsExist()"], ["com.hazelcast.transaction.TransactionOptions$TransactionType", "com.hazelcast.transaction.impl.TransactionImpl.getTransactionType()"], ["java.lang.String", "com.hazelcast.transaction.impl.TransactionImpl.toString()"], ["com.hazelcast.transaction.impl.Transaction$State[]", "com.hazelcast.transaction.impl.Transaction$State.values()"], ["com.hazelcast.transaction.impl.Transaction$State", "com.hazelcast.transaction.impl.Transaction$State.valueOf(java.lang.String)"], ["com.hazelcast.transaction.impl.TransactionManagerServiceImpl", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl(com.hazelcast.spi.impl.NodeEngineImpl)"], ["java.lang.String", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.getGroupName()"], ["<T> T", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.executeTransaction(com.hazelcast.transaction.TransactionOptions, com.hazelcast.transaction.TransactionalTask<T>)"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.newTransactionContext(com.hazelcast.transaction.TransactionOptions)"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.newClientTransactionContext(com.hazelcast.transaction.TransactionOptions, java.lang.String)"], ["com.hazelcast.transaction.impl.Transaction", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.newTransaction(com.hazelcast.transaction.TransactionOptions)"], ["com.hazelcast.transaction.impl.Transaction", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.newAllowedDuringPassiveStateTransaction(com.hazelcast.transaction.TransactionOptions)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.reset()"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.shutdown(boolean)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.memberAdded(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.memberRemoved(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.memberAttributeChanged(com.hazelcast.spi.MemberAttributeServiceEvent)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.clientDisconnected(java.lang.String)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.createBackupLog(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.createAllowedDuringPassiveStateBackupLog(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.replicaBackupLog(java.util.List<com.hazelcast.transaction.impl.TransactionLogRecord>, java.lang.String, java.lang.String, long, long)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.rollbackBackupLog(java.lang.String)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl.purgeBackupLog(java.lang.String)"], ["com.hazelcast.transaction.impl.TransactionLog", "com.hazelcast.transaction.impl.TransactionLog()"], ["com.hazelcast.transaction.impl.TransactionLog", "com.hazelcast.transaction.impl.TransactionLog(java.util.List<com.hazelcast.transaction.impl.TransactionLogRecord>)"], ["void", "com.hazelcast.transaction.impl.TransactionLog.add(com.hazelcast.transaction.impl.TransactionLogRecord)"], ["com.hazelcast.transaction.impl.TransactionLogRecord", "com.hazelcast.transaction.impl.TransactionLog.get(java.lang.Object)"], ["void", "com.hazelcast.transaction.impl.TransactionLog.remove(java.lang.Object)"], ["int", "com.hazelcast.transaction.impl.TransactionLog.size()"], ["void", "com.hazelcast.transaction.impl.TransactionLog.commitAsync(com.hazelcast.spi.NodeEngine, com.hazelcast.core.ExecutionCallback)"], ["void", "com.hazelcast.transaction.impl.TransactionLog.rollbackAsync(com.hazelcast.spi.NodeEngine, com.hazelcast.core.ExecutionCallback)"], ["com.hazelcast.transaction.impl.xa.XATransactionDTO", "com.hazelcast.transaction.impl.xa.XATransactionDTO()"], ["com.hazelcast.transaction.impl.xa.XATransactionDTO", "com.hazelcast.transaction.impl.xa.XATransactionDTO(com.hazelcast.transaction.impl.xa.XATransaction)"], ["com.hazelcast.transaction.impl.xa.XATransactionDTO", "com.hazelcast.transaction.impl.xa.XATransactionDTO(java.lang.String, com.hazelcast.transaction.impl.xa.SerializableXID, java.lang.String, long, long, java.util.List<com.hazelcast.transaction.impl.TransactionLogRecord>)"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XATransactionDTO.getTxnId()"], ["com.hazelcast.transaction.impl.xa.SerializableXID", "com.hazelcast.transaction.impl.xa.XATransactionDTO.getXid()"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XATransactionDTO.getOwnerUuid()"], ["long", "com.hazelcast.transaction.impl.xa.XATransactionDTO.getTimeoutMilis()"], ["long", "com.hazelcast.transaction.impl.xa.XATransactionDTO.getStartTime()"], ["void", "com.hazelcast.transaction.impl.xa.XATransactionDTO.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.transaction.impl.xa.XATransactionDTO.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.transaction.impl.xa.XATransactionDTO.getFactoryId()"], ["int", "com.hazelcast.transaction.impl.xa.XATransactionDTO.getId()"], ["com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation()"], ["com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation(java.util.List<com.hazelcast.transaction.impl.TransactionLogRecord>, java.lang.String, com.hazelcast.transaction.impl.xa.SerializableXID, java.lang.String, long, long)"], ["void", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation.run()"], ["boolean", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation.shouldBackup()"], ["int", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation.getSyncBackupCount()"], ["int", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation.getBackupOperation()"], ["int", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionOperation.getId()"], ["com.hazelcast.transaction.impl.xa.operations.CollectRemoteTransactionsOperation", "com.hazelcast.transaction.impl.xa.operations.CollectRemoteTransactionsOperation()"], ["void", "com.hazelcast.transaction.impl.xa.operations.CollectRemoteTransactionsOperation.run()"], ["java.lang.Object", "com.hazelcast.transaction.impl.xa.operations.CollectRemoteTransactionsOperation.getResponse()"], ["int", "com.hazelcast.transaction.impl.xa.operations.CollectRemoteTransactionsOperation.getId()"], ["void", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation$1.onResponse(java.lang.Object)"], ["void", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation$1.onFailure(java.lang.Throwable)"], ["com.hazelcast.transaction.impl.xa.operations.XaReplicationOperation", "com.hazelcast.transaction.impl.xa.operations.XaReplicationOperation()"], ["com.hazelcast.transaction.impl.xa.operations.XaReplicationOperation", "com.hazelcast.transaction.impl.xa.operations.XaReplicationOperation(java.util.List<com.hazelcast.transaction.impl.xa.XATransactionDTO>, int, int)"], ["void", "com.hazelcast.transaction.impl.xa.operations.XaReplicationOperation.run()"], ["int", "com.hazelcast.transaction.impl.xa.operations.XaReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.transaction.impl.xa.operations.XaReplicationOperation.getId()"], ["com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation()"], ["com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation.beforeRun()"], ["void", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation.run()"], ["boolean", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation.shouldBackup()"], ["int", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation.getSyncBackupCount()"], ["int", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation.getBackupOperation()"], ["int", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation.getId()"], ["com.hazelcast.transaction.impl.xa.operations.AbstractXAOperation", "com.hazelcast.transaction.impl.xa.operations.AbstractXAOperation()"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.operations.AbstractXAOperation.getServiceName()"], ["int", "com.hazelcast.transaction.impl.xa.operations.AbstractXAOperation.getFactoryId()"], ["com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionBackupOperation", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionBackupOperation()"], ["com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionBackupOperation", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionBackupOperation(java.util.List<com.hazelcast.transaction.impl.TransactionLogRecord>, java.lang.String, com.hazelcast.transaction.impl.xa.SerializableXID, java.lang.String, long, long)"], ["void", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionBackupOperation.run()"], ["boolean", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionBackupOperation.returnsResponse()"], ["int", "com.hazelcast.transaction.impl.xa.operations.PutRemoteTransactionBackupOperation.getId()"], ["com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionBackupOperation", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionBackupOperation()"], ["com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionBackupOperation", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionBackupOperation(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionBackupOperation.beforeRun()"], ["void", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionBackupOperation.run()"], ["boolean", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionBackupOperation.returnsResponse()"], ["int", "com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionBackupOperation.getId()"], ["com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionBackupOperation", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionBackupOperation()"], ["com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionBackupOperation", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionBackupOperation(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionBackupOperation.beforeRun()"], ["void", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionBackupOperation.run()"], ["boolean", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionBackupOperation.returnsResponse()"], ["int", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionBackupOperation.getId()"], ["com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation()"], ["com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation(com.hazelcast.nio.serialization.Data, boolean)"], ["void", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation.beforeRun()"], ["void", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation.run()"], ["boolean", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation.returnsResponse()"], ["boolean", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation.shouldBackup()"], ["int", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation.getSyncBackupCount()"], ["int", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation.getBackupOperation()"], ["int", "com.hazelcast.transaction.impl.xa.operations.FinalizeRemoteTransactionOperation.getId()"], ["com.hazelcast.transaction.impl.xa.XATransactionContextImpl", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl(com.hazelcast.spi.impl.NodeEngineImpl, javax.transaction.xa.Xid, java.lang.String, int, boolean)"], ["void", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.beginTransaction()"], ["void", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.commitTransaction()"], ["void", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.rollbackTransaction()"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.getTxnId()"], ["<K, V> com.hazelcast.core.TransactionalMap<K, V>", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.getMap(java.lang.String)"], ["<E> com.hazelcast.core.TransactionalQueue<E>", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.getQueue(java.lang.String)"], ["<K, V> com.hazelcast.core.TransactionalMultiMap<K, V>", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.getMultiMap(java.lang.String)"], ["<E> com.hazelcast.core.TransactionalList<E>", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.getList(java.lang.String)"], ["<E> com.hazelcast.core.TransactionalSet<E>", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.getSet(java.lang.String)"], ["com.hazelcast.transaction.TransactionalObject", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.getTransactionalObject(java.lang.String, java.lang.String)"], ["javax.transaction.xa.XAResource", "com.hazelcast.transaction.impl.xa.XATransactionContextImpl.getXaResource()"], ["com.hazelcast.transaction.impl.xa.XAService", "com.hazelcast.transaction.impl.xa.XAService(com.hazelcast.spi.impl.NodeEngineImpl)"], ["void", "com.hazelcast.transaction.impl.xa.XAService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.transaction.impl.xa.XAService.reset()"], ["void", "com.hazelcast.transaction.impl.xa.XAService.shutdown(boolean)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.transaction.impl.xa.XAService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.transaction.impl.xa.XAService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.transaction.impl.xa.XAService.newXATransactionContext(javax.transaction.xa.Xid, java.lang.String, int, boolean)"], ["void", "com.hazelcast.transaction.impl.xa.XAService.putTransaction(com.hazelcast.transaction.impl.xa.XATransaction)"], ["com.hazelcast.spi.Operation", "com.hazelcast.transaction.impl.xa.XAService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.transaction.impl.xa.XAService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.transaction.impl.xa.XAService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.transaction.impl.xa.XAService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.transaction.impl.xa.XAResourceImpl", "com.hazelcast.transaction.impl.xa.XAResourceImpl(com.hazelcast.spi.NodeEngine, com.hazelcast.transaction.impl.xa.XAService)"], ["void", "com.hazelcast.transaction.impl.xa.XAResourceImpl.start(javax.transaction.xa.Xid, int)"], ["void", "com.hazelcast.transaction.impl.xa.XAResourceImpl.end(javax.transaction.xa.Xid, int)"], ["int", "com.hazelcast.transaction.impl.xa.XAResourceImpl.prepare(javax.transaction.xa.Xid)"], ["void", "com.hazelcast.transaction.impl.xa.XAResourceImpl.commit(javax.transaction.xa.Xid, boolean)"], ["void", "com.hazelcast.transaction.impl.xa.XAResourceImpl.rollback(javax.transaction.xa.Xid)"], ["void", "com.hazelcast.transaction.impl.xa.XAResourceImpl.forget(javax.transaction.xa.Xid)"], ["boolean", "com.hazelcast.transaction.impl.xa.XAResourceImpl.isSameRM(javax.transaction.xa.XAResource)"], ["javax.transaction.xa.Xid[]", "com.hazelcast.transaction.impl.xa.XAResourceImpl.recover(int)"], ["int", "com.hazelcast.transaction.impl.xa.XAResourceImpl.getTransactionTimeout()"], ["boolean", "com.hazelcast.transaction.impl.xa.XAResourceImpl.setTransactionTimeout(int)"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XAResourceImpl.getServiceName()"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XAResourceImpl.getName()"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.transaction.impl.xa.XAResourceImpl.getTransactionContext()"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XAResourceImpl.getGroupName()"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XAResourceImpl.toString()"], ["com.hazelcast.transaction.impl.xa.SerializableXID", "com.hazelcast.transaction.impl.xa.SerializableXID()"], ["com.hazelcast.transaction.impl.xa.SerializableXID", "com.hazelcast.transaction.impl.xa.SerializableXID(int, byte[], byte[])"], ["int", "com.hazelcast.transaction.impl.xa.SerializableXID.getFormatId()"], ["byte[]", "com.hazelcast.transaction.impl.xa.SerializableXID.getGlobalTransactionId()"], ["byte[]", "com.hazelcast.transaction.impl.xa.SerializableXID.getBranchQualifier()"], ["void", "com.hazelcast.transaction.impl.xa.SerializableXID.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.transaction.impl.xa.SerializableXID.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.transaction.impl.xa.SerializableXID.equals(java.lang.Object)"], ["int", "com.hazelcast.transaction.impl.xa.SerializableXID.hashCode()"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.SerializableXID.toString()"], ["com.hazelcast.transaction.impl.Transaction", "com.hazelcast.transaction.impl.xa.TransactionAccessor.getTransaction(com.hazelcast.transaction.TransactionContext)"], ["com.hazelcast.transaction.impl.xa.XATransaction", "com.hazelcast.transaction.impl.xa.XATransaction(com.hazelcast.spi.NodeEngine, javax.transaction.xa.Xid, java.lang.String, int, boolean)"], ["com.hazelcast.transaction.impl.xa.XATransaction", "com.hazelcast.transaction.impl.xa.XATransaction(com.hazelcast.spi.NodeEngine, java.util.List<com.hazelcast.transaction.impl.TransactionLogRecord>, java.lang.String, com.hazelcast.transaction.impl.xa.SerializableXID, java.lang.String, long, long)"], ["void", "com.hazelcast.transaction.impl.xa.XATransaction.begin()"], ["void", "com.hazelcast.transaction.impl.xa.XATransaction.prepare()"], ["void", "com.hazelcast.transaction.impl.xa.XATransaction.commit()"], ["void", "com.hazelcast.transaction.impl.xa.XATransaction.commitAsync(com.hazelcast.core.ExecutionCallback)"], ["void", "com.hazelcast.transaction.impl.xa.XATransaction.rollback()"], ["void", "com.hazelcast.transaction.impl.xa.XATransaction.rollbackAsync(com.hazelcast.core.ExecutionCallback)"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XATransaction.getTxnId()"], ["long", "com.hazelcast.transaction.impl.xa.XATransaction.getStartTime()"], ["com.hazelcast.transaction.impl.Transaction$State", "com.hazelcast.transaction.impl.xa.XATransaction.getState()"], ["com.hazelcast.transaction.TransactionOptions$TransactionType", "com.hazelcast.transaction.impl.xa.XATransaction.getTransactionType()"], ["long", "com.hazelcast.transaction.impl.xa.XATransaction.getTimeoutMillis()"], ["void", "com.hazelcast.transaction.impl.xa.XATransaction.add(com.hazelcast.transaction.impl.TransactionLogRecord)"], ["void", "com.hazelcast.transaction.impl.xa.XATransaction.remove(java.lang.Object)"], ["com.hazelcast.transaction.impl.TransactionLogRecord", "com.hazelcast.transaction.impl.xa.XATransaction.get(java.lang.Object)"], ["java.lang.String", "com.hazelcast.transaction.impl.xa.XATransaction.getOwnerUuid()"], ["boolean", "com.hazelcast.transaction.impl.xa.XATransaction.isOriginatedFromClient()"], ["com.hazelcast.transaction.impl.xa.SerializableXID", "com.hazelcast.transaction.impl.xa.XATransaction.getXid()"], ["java.lang.String", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl$TxBackupLog.toString()"], ["java.lang.String", "com.hazelcast.transaction.impl.TransactionContextImpl.getTxnId()"], ["void", "com.hazelcast.transaction.impl.TransactionContextImpl.beginTransaction()"], ["void", "com.hazelcast.transaction.impl.TransactionContextImpl.commitTransaction()"], ["void", "com.hazelcast.transaction.impl.TransactionContextImpl.rollbackTransaction()"], ["<K, V> com.hazelcast.core.TransactionalMap<K, V>", "com.hazelcast.transaction.impl.TransactionContextImpl.getMap(java.lang.String)"], ["<K, V> com.hazelcast.core.TransactionalMultiMap<K, V>", "com.hazelcast.transaction.impl.TransactionContextImpl.getMultiMap(java.lang.String)"], ["<E> com.hazelcast.core.TransactionalQueue<E>", "com.hazelcast.transaction.impl.TransactionContextImpl.getQueue(java.lang.String)"], ["<E> com.hazelcast.core.TransactionalList<E>", "com.hazelcast.transaction.impl.TransactionContextImpl.getList(java.lang.String)"], ["<E> com.hazelcast.core.TransactionalSet<E>", "com.hazelcast.transaction.impl.TransactionContextImpl.getSet(java.lang.String)"], ["com.hazelcast.transaction.TransactionalObject", "com.hazelcast.transaction.impl.TransactionContextImpl.getTransactionalObject(java.lang.String, java.lang.String)"], ["javax.transaction.xa.XAResource", "com.hazelcast.transaction.impl.TransactionContextImpl.getXaResource()"], ["com.hazelcast.transaction.impl.TransactionDataSerializerHook", "com.hazelcast.transaction.impl.TransactionDataSerializerHook()"], ["int", "com.hazelcast.transaction.impl.TransactionDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.transaction.impl.TransactionDataSerializerHook.createFactory()"], ["com.hazelcast.transaction.impl.AllowedDuringPassiveStateTransactionImpl", "com.hazelcast.transaction.impl.AllowedDuringPassiveStateTransactionImpl(com.hazelcast.transaction.impl.TransactionManagerServiceImpl, com.hazelcast.spi.NodeEngine, com.hazelcast.transaction.TransactionOptions, java.lang.String)"], ["void", "com.hazelcast.transaction.impl.TransactionManagerServiceImpl$1.run()"], ["com.hazelcast.transaction.TransactionException", "com.hazelcast.transaction.TransactionException()"], ["com.hazelcast.transaction.TransactionException", "com.hazelcast.transaction.TransactionException(java.lang.String)"], ["com.hazelcast.transaction.TransactionException", "com.hazelcast.transaction.TransactionException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.transaction.TransactionException", "com.hazelcast.transaction.TransactionException(java.lang.Throwable)"], ["com.hazelcast.transaction.TransactionNotActiveException", "com.hazelcast.transaction.TransactionNotActiveException()"], ["com.hazelcast.transaction.TransactionNotActiveException", "com.hazelcast.transaction.TransactionNotActiveException(java.lang.String)"], ["com.hazelcast.transaction.TransactionTimedOutException", "com.hazelcast.transaction.TransactionTimedOutException()"], ["com.hazelcast.transaction.TransactionTimedOutException", "com.hazelcast.transaction.TransactionTimedOutException(java.lang.String)"], ["com.hazelcast.transaction.TransactionTimedOutException", "com.hazelcast.transaction.TransactionTimedOutException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.transaction.TransactionTimedOutException", "com.hazelcast.transaction.TransactionTimedOutException(java.lang.Throwable)"], ["com.hazelcast.transaction.TransactionOptions", "com.hazelcast.transaction.TransactionOptions()"], ["com.hazelcast.transaction.TransactionOptions$TransactionType", "com.hazelcast.transaction.TransactionOptions.getTransactionType()"], ["com.hazelcast.transaction.TransactionOptions", "com.hazelcast.transaction.TransactionOptions.setTransactionType(com.hazelcast.transaction.TransactionOptions$TransactionType)"], ["long", "com.hazelcast.transaction.TransactionOptions.getTimeoutMillis()"], ["com.hazelcast.transaction.TransactionOptions", "com.hazelcast.transaction.TransactionOptions.setTimeout(long, java.util.concurrent.TimeUnit)"], ["int", "com.hazelcast.transaction.TransactionOptions.getDurability()"], ["com.hazelcast.transaction.TransactionOptions", "com.hazelcast.transaction.TransactionOptions.setDurability(int)"], ["com.hazelcast.transaction.TransactionOptions", "com.hazelcast.transaction.TransactionOptions.getDefault()"], ["void", "com.hazelcast.transaction.TransactionOptions.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.transaction.TransactionOptions.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.transaction.TransactionOptions.toString()"], ["com.hazelcast.transaction.TransactionOptions$TransactionType[]", "com.hazelcast.transaction.TransactionOptions$TransactionType.values()"], ["com.hazelcast.transaction.TransactionOptions$TransactionType", "com.hazelcast.transaction.TransactionOptions$TransactionType.valueOf(java.lang.String)"], ["int", "com.hazelcast.transaction.TransactionOptions$TransactionType.id()"], ["com.hazelcast.transaction.TransactionOptions$TransactionType", "com.hazelcast.transaction.TransactionOptions$TransactionType.getByValue(int)"], ["com.hazelcast.osgi.impl.OSGiScriptEngine", "com.hazelcast.osgi.impl.OSGiScriptEngine(javax.script.ScriptEngine, com.hazelcast.osgi.impl.OSGiScriptEngineFactory)"], ["javax.script.Bindings", "com.hazelcast.osgi.impl.OSGiScriptEngine.createBindings()"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngine.eval(java.io.Reader, javax.script.Bindings)"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngine.eval(java.io.Reader, javax.script.ScriptContext)"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngine.eval(java.io.Reader)"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngine.eval(java.lang.String, javax.script.Bindings)"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngine.eval(java.lang.String, javax.script.ScriptContext)"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngine.eval(java.lang.String)"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngine.get(java.lang.String)"], ["javax.script.Bindings", "com.hazelcast.osgi.impl.OSGiScriptEngine.getBindings(int)"], ["javax.script.ScriptContext", "com.hazelcast.osgi.impl.OSGiScriptEngine.getContext()"], ["javax.script.ScriptEngineFactory", "com.hazelcast.osgi.impl.OSGiScriptEngine.getFactory()"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngine.put(java.lang.String, java.lang.Object)"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngine.setBindings(javax.script.Bindings, int)"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngine.setContext(javax.script.ScriptContext)"], ["com.hazelcast.osgi.impl.Activator", "com.hazelcast.osgi.impl.Activator()"], ["void", "com.hazelcast.osgi.impl.Activator.start(org.osgi.framework.BundleContext)"], ["void", "com.hazelcast.osgi.impl.Activator.stop(org.osgi.framework.BundleContext)"], ["com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl(org.osgi.framework.Bundle)"], ["com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl(org.osgi.framework.Bundle, java.lang.String)"], ["java.lang.String", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.getId()"], ["org.osgi.framework.Bundle", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.getOwnerBundle()"], ["boolean", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.isActive()"], ["void", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.activate()"], ["void", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.deactivate()"], ["com.hazelcast.osgi.HazelcastOSGiInstance", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.getDefaultHazelcastInstance()"], ["com.hazelcast.osgi.HazelcastOSGiInstance", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.newHazelcastInstance(com.hazelcast.config.Config)"], ["com.hazelcast.osgi.HazelcastOSGiInstance", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.newHazelcastInstance()"], ["com.hazelcast.osgi.HazelcastOSGiInstance", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.getHazelcastInstanceByName(java.lang.String)"], ["void", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.shutdownHazelcastInstance(com.hazelcast.osgi.HazelcastOSGiInstance)"], ["void", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.shutdownAll()"], ["java.lang.String", "com.hazelcast.osgi.impl.HazelcastOSGiServiceImpl.toString()"], ["void", "com.hazelcast.osgi.impl.ScriptEngineActivator.registerOsgiScriptEngineManager(org.osgi.framework.BundleContext)"], ["com.hazelcast.osgi.impl.OSGiScriptEngineManager", "com.hazelcast.osgi.impl.OSGiScriptEngineManager(org.osgi.framework.BundleContext)"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.reloadManagers()"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.get(java.lang.String)"], ["javax.script.Bindings", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.getBindings()"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.setBindings(javax.script.Bindings)"], ["javax.script.ScriptEngine", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.getEngineByExtension(java.lang.String)"], ["javax.script.ScriptEngine", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.getEngineByMimeType(java.lang.String)"], ["javax.script.ScriptEngine", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.getEngineByName(java.lang.String)"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.put(java.lang.String, java.lang.Object)"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.registerEngineExtension(java.lang.String, javax.script.ScriptEngineFactory)"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.registerEngineMimeType(java.lang.String, javax.script.ScriptEngineFactory)"], ["void", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.registerEngineName(java.lang.String, javax.script.ScriptEngineFactory)"], ["java.lang.String", "com.hazelcast.osgi.impl.OSGiScriptEngineManager.printScriptEngines()"], ["com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl(com.hazelcast.core.HazelcastInstance, com.hazelcast.osgi.HazelcastOSGiService)"], ["java.lang.String", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getName()"], ["<E> com.hazelcast.core.IQueue<E>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getQueue(java.lang.String)"], ["<E> com.hazelcast.core.ITopic<E>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getTopic(java.lang.String)"], ["<E> com.hazelcast.core.ISet<E>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getSet(java.lang.String)"], ["<E> com.hazelcast.core.IList<E>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getList(java.lang.String)"], ["<K, V> com.hazelcast.core.IMap<K, V>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getMap(java.lang.String)"], ["<K, V> com.hazelcast.core.ReplicatedMap<K, V>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getReplicatedMap(java.lang.String)"], ["com.hazelcast.mapreduce.JobTracker", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getJobTracker(java.lang.String)"], ["<K, V> com.hazelcast.core.MultiMap<K, V>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getMultiMap(java.lang.String)"], ["com.hazelcast.core.ILock", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getLock(java.lang.String)"], ["<E> com.hazelcast.ringbuffer.Ringbuffer<E>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getRingbuffer(java.lang.String)"], ["<E> com.hazelcast.core.ITopic<E>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getReliableTopic(java.lang.String)"], ["com.hazelcast.core.ICacheManager", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getCacheManager()"], ["com.hazelcast.core.Cluster", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getCluster()"], ["com.hazelcast.core.Endpoint", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getLocalEndpoint()"], ["com.hazelcast.core.IExecutorService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getExecutorService(java.lang.String)"], ["com.hazelcast.durableexecutor.DurableExecutorService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getDurableExecutorService(java.lang.String)"], ["<T> T", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.executeTransaction(com.hazelcast.transaction.TransactionalTask<T>)"], ["<T> T", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.executeTransaction(com.hazelcast.transaction.TransactionOptions, com.hazelcast.transaction.TransactionalTask<T>)"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.newTransactionContext()"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.newTransactionContext(com.hazelcast.transaction.TransactionOptions)"], ["com.hazelcast.core.IdGenerator", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getIdGenerator(java.lang.String)"], ["com.hazelcast.flakeidgen.FlakeIdGenerator", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getFlakeIdGenerator(java.lang.String)"], ["com.hazelcast.core.IAtomicLong", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getAtomicLong(java.lang.String)"], ["<E> com.hazelcast.core.IAtomicReference<E>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getAtomicReference(java.lang.String)"], ["com.hazelcast.core.ICountDownLatch", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getCountDownLatch(java.lang.String)"], ["com.hazelcast.core.ISemaphore", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getSemaphore(java.lang.String)"], ["java.lang.String", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.addDistributedObjectListener(com.hazelcast.core.DistributedObjectListener)"], ["boolean", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.removeDistributedObjectListener(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getConfig()"], ["com.hazelcast.core.PartitionService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getPartitionService()"], ["com.hazelcast.quorum.QuorumService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getQuorumService()"], ["com.hazelcast.core.ClientService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getClientService()"], ["com.hazelcast.logging.LoggingService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getLoggingService()"], ["com.hazelcast.core.LifecycleService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getLifecycleService()"], ["<T extends com.hazelcast.core.DistributedObject> T", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getDistributedObject(java.lang.String, java.lang.String)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.Object>", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getUserContext()"], ["com.hazelcast.transaction.HazelcastXAResource", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getXAResource()"], ["com.hazelcast.cardinality.CardinalityEstimator", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getCardinalityEstimator(java.lang.String)"], ["com.hazelcast.crdt.pncounter.PNCounter", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getPNCounter(java.lang.String)"], ["com.hazelcast.scheduledexecutor.IScheduledExecutorService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getScheduledExecutorService(java.lang.String)"], ["void", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.shutdown()"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getDelegatedInstance()"], ["com.hazelcast.osgi.HazelcastOSGiService", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.getOwnerService()"], ["boolean", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.hashCode()"], ["java.lang.String", "com.hazelcast.osgi.impl.HazelcastOSGiInstanceImpl.toString()"], ["com.hazelcast.osgi.impl.OSGiScriptEngineFactory", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory(javax.script.ScriptEngineFactory, java.lang.ClassLoader)"], ["java.lang.String", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getEngineName()"], ["java.lang.String", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getEngineVersion()"], ["java.lang.String", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getLanguageName()"], ["java.lang.String", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getLanguageVersion()"], ["java.lang.String", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getMethodCallSyntax(java.lang.String, java.lang.String, java.lang.String...)"], ["java.lang.String", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getOutputStatement(java.lang.String)"], ["java.lang.Object", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getParameter(java.lang.String)"], ["java.lang.String", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getProgram(java.lang.String...)"], ["javax.script.ScriptEngine", "com.hazelcast.osgi.impl.OSGiScriptEngineFactory.getScriptEngine()"], ["com.hazelcast.wan.impl.WanReplicationPublisherDelegate", "com.hazelcast.wan.impl.WanReplicationPublisherDelegate(java.lang.String, com.hazelcast.wan.WanReplicationEndpoint[])"], ["com.hazelcast.wan.WanReplicationEndpoint[]", "com.hazelcast.wan.impl.WanReplicationPublisherDelegate.getEndpoints()"], ["java.lang.String", "com.hazelcast.wan.impl.WanReplicationPublisherDelegate.getName()"], ["void", "com.hazelcast.wan.impl.WanReplicationPublisherDelegate.publishReplicationEvent(java.lang.String, com.hazelcast.wan.ReplicationEventObject)"], ["void", "com.hazelcast.wan.impl.WanReplicationPublisherDelegate.publishReplicationEventBackup(java.lang.String, com.hazelcast.wan.ReplicationEventObject)"], ["void", "com.hazelcast.wan.impl.WanReplicationPublisherDelegate.publishReplicationEvent(com.hazelcast.wan.WanReplicationEvent)"], ["void", "com.hazelcast.wan.impl.WanReplicationPublisherDelegate.checkWanReplicationQueues()"], ["com.hazelcast.wan.impl.WanReplicationPublisherDelegate", "com.hazelcast.wan.impl.WanReplicationServiceImpl$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.wan.impl.WanReplicationServiceImpl$1.createNew(java.lang.Object)"], ["com.hazelcast.wan.impl.WanEventCounter$EventCounter", "com.hazelcast.wan.impl.WanEventCounter$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.wan.impl.WanEventCounter$1.createNew(java.lang.Object)"], ["long", "com.hazelcast.wan.impl.WanEventCounter$EventCounter.getDroppedCount()"], ["long", "com.hazelcast.wan.impl.WanEventCounter$EventCounter.getSyncCount()"], ["long", "com.hazelcast.wan.impl.WanEventCounter$EventCounter.getUpdateCount()"], ["long", "com.hazelcast.wan.impl.WanEventCounter$EventCounter.getRemoveCount()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.wan.impl.WanDataSerializerHook$1.create(int)"], ["com.hazelcast.wan.impl.WanDataSerializerHook", "com.hazelcast.wan.impl.WanDataSerializerHook()"], ["int", "com.hazelcast.wan.impl.WanDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.wan.impl.WanDataSerializerHook.createFactory()"], ["com.hazelcast.wan.impl.WanReplicationServiceImpl", "com.hazelcast.wan.impl.WanReplicationServiceImpl(com.hazelcast.instance.Node)"], ["com.hazelcast.wan.WanReplicationPublisher", "com.hazelcast.wan.impl.WanReplicationServiceImpl.getWanReplicationPublisher(java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.shutdown()"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.pause(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.resume(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.checkWanReplicationQueues(java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.syncMap(java.lang.String, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.syncAllMaps(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.clearQueues(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.addWanReplicationConfig(com.hazelcast.config.WanReplicationConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalWanStats>", "com.hazelcast.wan.impl.WanReplicationServiceImpl.getStats()"], ["com.hazelcast.monitor.WanSyncState", "com.hazelcast.wan.impl.WanReplicationServiceImpl.getWanSyncState()"], ["com.hazelcast.wan.impl.WanEventCounter", "com.hazelcast.wan.impl.WanReplicationServiceImpl.getReceivedEventCounter(java.lang.String)"], ["com.hazelcast.wan.impl.WanEventCounter", "com.hazelcast.wan.impl.WanReplicationServiceImpl.getSentEventCounter(java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanReplicationServiceImpl.removeWanEventCounters(java.lang.String, java.lang.String)"], ["com.hazelcast.wan.impl.WanEventCounterContainer", "com.hazelcast.wan.impl.WanEventCounterContainer()"], ["com.hazelcast.wan.impl.WanEventCounter", "com.hazelcast.wan.impl.WanEventCounterContainer.getWanEventCounter(java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanEventCounterContainer.removeCounter(java.lang.String, java.lang.String)"], ["com.hazelcast.wan.impl.WanEventCounter", "com.hazelcast.wan.impl.WanEventCounterContainer$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.wan.impl.WanEventCounterContainer$1.createNew(java.lang.Object)"], ["com.hazelcast.wan.impl.WanEventCounter", "com.hazelcast.wan.impl.WanEventCounter()"], ["void", "com.hazelcast.wan.impl.WanEventCounter.incrementSync(java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanEventCounter.incrementUpdate(java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanEventCounter.incrementRemove(java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanEventCounter.incrementDropped(java.lang.String)"], ["void", "com.hazelcast.wan.impl.WanEventCounter.removeCounter(java.lang.String)"], ["java.util.concurrent.ConcurrentHashMap<java.lang.String, com.hazelcast.wan.impl.WanEventCounter$EventCounter>", "com.hazelcast.wan.impl.WanEventCounter.getEventCounterMap()"], ["com.hazelcast.wan.WanReplicationEvent", "com.hazelcast.wan.WanReplicationEvent()"], ["com.hazelcast.wan.WanReplicationEvent", "com.hazelcast.wan.WanReplicationEvent(java.lang.String, com.hazelcast.wan.ReplicationEventObject)"], ["java.lang.String", "com.hazelcast.wan.WanReplicationEvent.getServiceName()"], ["void", "com.hazelcast.wan.WanReplicationEvent.setServiceName(java.lang.String)"], ["com.hazelcast.wan.ReplicationEventObject", "com.hazelcast.wan.WanReplicationEvent.getEventObject()"], ["void", "com.hazelcast.wan.WanReplicationEvent.setEventObject(com.hazelcast.wan.ReplicationEventObject)"], ["com.hazelcast.config.WanAcknowledgeType", "com.hazelcast.wan.WanReplicationEvent.getAcknowledgeType()"], ["void", "com.hazelcast.wan.WanReplicationEvent.setAcknowledgeType(com.hazelcast.config.WanAcknowledgeType)"], ["void", "com.hazelcast.wan.WanReplicationEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.wan.WanReplicationEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.wan.WanReplicationEvent.getFactoryId()"], ["int", "com.hazelcast.wan.WanReplicationEvent.getId()"], ["com.hazelcast.wan.WanSyncStatus[]", "com.hazelcast.wan.WanSyncStatus.values()"], ["com.hazelcast.wan.WanSyncStatus", "com.hazelcast.wan.WanSyncStatus.valueOf(java.lang.String)"], ["int", "com.hazelcast.wan.WanSyncStatus.getStatus()"], ["com.hazelcast.wan.WanSyncStatus", "com.hazelcast.wan.WanSyncStatus.getByStatus(int)"], ["com.hazelcast.wan.WANReplicationQueueFullException", "com.hazelcast.wan.WANReplicationQueueFullException(java.lang.String)"], ["com.hazelcast.durableexecutor.StaleTaskIdException", "com.hazelcast.durableexecutor.StaleTaskIdException(java.lang.String)"], ["com.hazelcast.durableexecutor.impl.operations.ShutdownOperation", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation()"], ["com.hazelcast.durableexecutor.impl.operations.ShutdownOperation", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation(java.lang.String)"], ["void", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation.run()"], ["int", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation.getId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation.getFactoryId()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation.getSyncBackupCount()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation.getExecutorContainer()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.ShutdownOperation.getServiceName()"], ["com.hazelcast.durableexecutor.impl.operations.TaskOperation", "com.hazelcast.durableexecutor.impl.operations.TaskOperation()"], ["com.hazelcast.durableexecutor.impl.operations.TaskOperation", "com.hazelcast.durableexecutor.impl.operations.TaskOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.run()"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.getBackupOperation()"], ["int", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.getId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.getFactoryId()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.getSyncBackupCount()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.getExecutorContainer()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.TaskOperation.getServiceName()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.DurableExecutorWaitNotifyKey.equals(java.lang.Object)"], ["int", "com.hazelcast.durableexecutor.impl.operations.DurableExecutorWaitNotifyKey.hashCode()"], ["com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation()"], ["com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation(java.lang.String, int)"], ["void", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.run()"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.getResponse()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.getWaitKey()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.shouldWait()"], ["void", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.onWaitExpire()"], ["int", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.getId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.getFactoryId()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.getSyncBackupCount()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.getExecutorContainer()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation.getServiceName()"], ["com.hazelcast.durableexecutor.impl.operations.PutResultOperation", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation()"], ["com.hazelcast.durableexecutor.impl.operations.PutResultOperation", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation(java.lang.String, int, java.lang.Object)"], ["void", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.run()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.getNotifiedKey()"], ["com.hazelcast.spi.Operation", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.getBackupOperation()"], ["int", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.getId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.getFactoryId()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.getSyncBackupCount()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.getExecutorContainer()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.PutResultOperation.getServiceName()"], ["com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation()"], ["com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation.run()"], ["int", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation.getId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation.getFactoryId()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation.getSyncBackupCount()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation.getExecutorContainer()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.TaskBackupOperation.getServiceName()"], ["com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation()"], ["void", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation.run()"], ["int", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation.getId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation.getFactoryId()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation.getSyncBackupCount()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation.getExecutorContainer()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.DisposeResultBackupOperation.getServiceName()"], ["com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation", "com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation()"], ["com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation", "com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation(java.lang.String, int)"], ["void", "com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation.run()"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation.getResponse()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation.getWaitKey()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation.shouldWait()"], ["void", "com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation.onWaitExpire()"], ["int", "com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation.getId()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.AbstractDurableExecutorOperation.getServiceName()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.AbstractDurableExecutorOperation.getExecutorContainer()"], ["int", "com.hazelcast.durableexecutor.impl.operations.AbstractDurableExecutorOperation.getSyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.AbstractDurableExecutorOperation.getAsyncBackupCount()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.AbstractDurableExecutorOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.AbstractDurableExecutorOperation.getFactoryId()"], ["com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation()"], ["com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation(java.lang.String, int)"], ["void", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.getBackupOperation()"], ["int", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.getId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.getFactoryId()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.getSyncBackupCount()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.getExecutorContainer()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation.getServiceName()"], ["com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation()"], ["com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation(java.lang.String, int, java.lang.Object)"], ["void", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation.run()"], ["int", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation.getId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation.getFactoryId()"], ["boolean", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation.shouldBackup()"], ["int", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation.getSyncBackupCount()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation.getExecutorContainer()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.operations.PutResultBackupOperation.getServiceName()"], ["com.hazelcast.durableexecutor.impl.operations.ReplicationOperation", "com.hazelcast.durableexecutor.impl.operations.ReplicationOperation()"], ["com.hazelcast.durableexecutor.impl.operations.ReplicationOperation", "com.hazelcast.durableexecutor.impl.operations.ReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.durableexecutor.impl.DurableExecutorContainer>)"], ["void", "com.hazelcast.durableexecutor.impl.operations.ReplicationOperation.run()"], ["int", "com.hazelcast.durableexecutor.impl.operations.ReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.durableexecutor.impl.operations.ReplicationOperation.getId()"], ["com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService(com.hazelcast.spi.impl.NodeEngineImpl)"], ["void", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.getPartitionContainer(int)"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.getNodeEngine()"], ["void", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.reset()"], ["void", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.shutdown(boolean)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.shutdownExecutor(java.lang.String)"], ["boolean", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.isShutdown(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.getQuorumName(java.lang.String)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy$1.handleException(java.lang.Throwable)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.retrieveResult(long)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.disposeResult(long)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.retrieveAndDisposeResult(long)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.execute(java.lang.Runnable)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.executeOnKeyOwner(java.lang.Runnable, java.lang.Object)"], ["<T> com.hazelcast.durableexecutor.DurableExecutorServiceFuture<T>", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.submit(java.lang.Runnable, T)"], ["<T> com.hazelcast.durableexecutor.DurableExecutorServiceFuture<T>", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.submit(java.util.concurrent.Callable<T>)"], ["<T> com.hazelcast.durableexecutor.DurableExecutorServiceFuture<T>", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.submitToKeyOwner(java.util.concurrent.Callable<T>, java.lang.Object)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> T", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.shutdown()"], ["boolean", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.isShutdown()"], ["boolean", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.isTerminated()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.getName()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.getServiceName()"], ["java.util.concurrent.Future", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.submit(java.lang.Runnable)"], ["java.util.concurrent.Future", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy.submit(java.util.concurrent.Callable)"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer(com.hazelcast.spi.impl.NodeEngineImpl, java.lang.String, int, int, com.hazelcast.durableexecutor.impl.TaskRingBuffer)"], ["int", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.execute(java.util.concurrent.Callable)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.putBackup(int, java.util.concurrent.Callable)"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.retrieveResult(int)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.disposeResult(int)"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.retrieveAndDisposeResult(int)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.putResult(int, java.lang.Object)"], ["boolean", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.shouldWait(int)"], ["com.hazelcast.durableexecutor.impl.TaskRingBuffer", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.getRingBuffer()"], ["int", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.getDurability()"], ["java.lang.String", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.durableexecutor.impl.DurableExecutorDataSerializerHook$1.create(int)"], ["com.hazelcast.durableexecutor.impl.TaskRingBuffer", "com.hazelcast.durableexecutor.impl.TaskRingBuffer()"], ["com.hazelcast.durableexecutor.impl.TaskRingBuffer", "com.hazelcast.durableexecutor.impl.TaskRingBuffer(int)"], ["int", "com.hazelcast.durableexecutor.impl.TaskRingBuffer.add(java.util.concurrent.Callable)"], ["void", "com.hazelcast.durableexecutor.impl.TaskRingBuffer.remove(int)"], ["void", "com.hazelcast.durableexecutor.impl.TaskRingBuffer.dispose(int)"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.TaskRingBuffer.retrieve(int)"], ["void", "com.hazelcast.durableexecutor.impl.TaskRingBuffer.write(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.durableexecutor.impl.TaskRingBuffer.read(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.durableexecutor.impl.TaskRingBuffer$DurableIterator", "com.hazelcast.durableexecutor.impl.TaskRingBuffer.iterator()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy$DurableExecutorServiceDelegateFuture", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy$DurableExecutorServiceDelegateFuture(com.hazelcast.spi.InternalCompletableFuture, com.hazelcast.spi.serialization.SerializationService, T, long)"], ["long", "com.hazelcast.durableexecutor.impl.DurableExecutorServiceProxy$DurableExecutorServiceDelegateFuture.getTaskId()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorDataSerializerHook", "com.hazelcast.durableexecutor.impl.DurableExecutorDataSerializerHook()"], ["int", "com.hazelcast.durableexecutor.impl.DurableExecutorDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.durableexecutor.impl.DurableExecutorDataSerializerHook.createFactory()"], ["com.hazelcast.durableexecutor.impl.TaskRingBuffer$DurableIterator", "com.hazelcast.durableexecutor.impl.TaskRingBuffer$DurableIterator(com.hazelcast.durableexecutor.impl.TaskRingBuffer)"], ["boolean", "com.hazelcast.durableexecutor.impl.TaskRingBuffer$DurableIterator.hasNext()"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.TaskRingBuffer$DurableIterator.next()"], ["void", "com.hazelcast.durableexecutor.impl.TaskRingBuffer$DurableIterator.remove()"], ["int", "com.hazelcast.durableexecutor.impl.TaskRingBuffer$DurableIterator.getSequence()"], ["boolean", "com.hazelcast.durableexecutor.impl.TaskRingBuffer$DurableIterator.isTask()"], ["com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer", "com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer(com.hazelcast.spi.impl.NodeEngineImpl, int)"], ["com.hazelcast.durableexecutor.impl.DurableExecutorContainer", "com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer.getOrCreateContainer(java.lang.String)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer.createExecutorContainer(java.lang.String, com.hazelcast.durableexecutor.impl.TaskRingBuffer)"], ["com.hazelcast.spi.Operation", "com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer.prepareReplicationOperation(int)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer.clearRingBuffersHavingLesserBackupCountThan(int)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer.executeAll()"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.durableexecutor.impl.DurableExecutorContainer$TaskProcessor.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy$GetAllScheduledOnMemberOperationFactory.get()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy$GetAllScheduledOnMemberOperationFactory.get()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.getName()"], ["void", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.run()"], ["V", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.call()"], ["int", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.getId()"], ["void", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Runnable", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.named(java.lang.String, java.lang.Runnable)"], ["<V> java.util.concurrent.Callable<V>", "com.hazelcast.scheduledexecutor.impl.NamedTaskDecorator.named(java.lang.String, java.util.concurrent.Callable<V>)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorWaitNotifyKey", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorWaitNotifyKey(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorWaitNotifyKey.equals(java.lang.Object)"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorWaitNotifyKey.hashCode()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory(java.lang.String)"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory.getId()"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperationFactory.createOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.DisposeTaskOperation", "com.hazelcast.scheduledexecutor.impl.operations.DisposeTaskOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.DisposeTaskOperation", "com.hazelcast.scheduledexecutor.impl.operations.DisposeTaskOperation(com.hazelcast.scheduledexecutor.ScheduledTaskHandler)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.DisposeTaskOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.operations.DisposeTaskOperation.getBackupOperation()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.DisposeTaskOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.SyncStateOperation", "com.hazelcast.scheduledexecutor.impl.operations.SyncStateOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.SyncStateOperation", "com.hazelcast.scheduledexecutor.impl.operations.SyncStateOperation(java.lang.String, java.lang.String, java.util.Map, com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl, com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.SyncStateOperation.run()"], ["boolean", "com.hazelcast.scheduledexecutor.impl.operations.SyncStateOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.operations.SyncStateOperation.getBackupOperation()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.SyncStateOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.MergeBackupOperation", "com.hazelcast.scheduledexecutor.impl.operations.MergeBackupOperation()"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.MergeBackupOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.MergeBackupOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.AbstractGetAllScheduledOperation", "com.hazelcast.scheduledexecutor.impl.operations.AbstractGetAllScheduledOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.AbstractGetAllScheduledOperation", "com.hazelcast.scheduledexecutor.impl.operations.AbstractGetAllScheduledOperation(java.lang.String)"], ["com.hazelcast.scheduledexecutor.impl.operations.ShutdownOperation", "com.hazelcast.scheduledexecutor.impl.operations.ShutdownOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.ShutdownOperation", "com.hazelcast.scheduledexecutor.impl.operations.ShutdownOperation(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.ShutdownOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.ShutdownOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.MergeOperation", "com.hazelcast.scheduledexecutor.impl.operations.MergeOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.MergeOperation", "com.hazelcast.scheduledexecutor.impl.operations.MergeOperation(java.lang.String, java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$ScheduledExecutorMergeTypes>, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor, com.hazelcast.spi.merge.SplitBrainMergeTypes$ScheduledExecutorMergeTypes>)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.operations.MergeOperation.shouldBackup()"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.MergeOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.MergeOperation.getId()"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.operations.MergeOperation.getBackupOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.DisposeBackupTaskOperation", "com.hazelcast.scheduledexecutor.impl.operations.DisposeBackupTaskOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.DisposeBackupTaskOperation", "com.hazelcast.scheduledexecutor.impl.operations.DisposeBackupTaskOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.DisposeBackupTaskOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.DisposeBackupTaskOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskOperation", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskOperation", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskOperation(java.lang.String, com.hazelcast.scheduledexecutor.impl.TaskDefinition)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskOperation.getId()"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskOperation.getBackupOperation()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.operations.AbstractSchedulerOperation.getSchedulerName()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.operations.AbstractSchedulerOperation.getName()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.operations.AbstractSchedulerOperation.getServiceName()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.AbstractSchedulerOperation.getFactoryId()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer", "com.hazelcast.scheduledexecutor.impl.operations.AbstractSchedulerOperation.getContainer()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperation(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperation.getId()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnPartitionOperation.getResponse()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetStatisticsOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetStatisticsOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetStatisticsOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetStatisticsOperation(com.hazelcast.scheduledexecutor.ScheduledTaskHandler)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.GetStatisticsOperation.run()"], ["com.hazelcast.scheduledexecutor.ScheduledTaskStatistics", "com.hazelcast.scheduledexecutor.impl.operations.GetStatisticsOperation.getResponse()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.GetStatisticsOperation.getId()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.operations.GetStatisticsOperation.getResponse()"], ["boolean", "com.hazelcast.scheduledexecutor.impl.operations.AbstractBackupAwareSchedulerOperation.shouldBackup()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.AbstractBackupAwareSchedulerOperation.getSyncBackupCount()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.AbstractBackupAwareSchedulerOperation.getAsyncBackupCount()"], ["com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskBackupOperation", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskBackupOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskBackupOperation", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskBackupOperation(java.lang.String, com.hazelcast.scheduledexecutor.impl.TaskDefinition)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskBackupOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.ScheduleTaskBackupOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.SyncBackupStateOperation", "com.hazelcast.scheduledexecutor.impl.operations.SyncBackupStateOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.SyncBackupStateOperation", "com.hazelcast.scheduledexecutor.impl.operations.SyncBackupStateOperation(java.lang.String, java.lang.String, java.util.Map, com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl, com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.SyncBackupStateOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.SyncBackupStateOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation", "com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation", "com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation(com.hazelcast.scheduledexecutor.ScheduledTaskHandler)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation.run()"], ["boolean", "com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation.getNotifiedKey()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetDelayOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetDelayOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetDelayOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetDelayOperation(com.hazelcast.scheduledexecutor.ScheduledTaskHandler, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.GetDelayOperation.run()"], ["java.lang.Long", "com.hazelcast.scheduledexecutor.impl.operations.GetDelayOperation.getResponse()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.GetDelayOperation.getId()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.operations.GetDelayOperation.getResponse()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation(com.hazelcast.scheduledexecutor.ScheduledTaskHandler)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation.run()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation.getResponse()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation.getWaitKey()"], ["boolean", "com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation.shouldWait()"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation.onWaitExpire()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.GetResultOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.IsCanceledOperation", "com.hazelcast.scheduledexecutor.impl.operations.IsCanceledOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.IsCanceledOperation", "com.hazelcast.scheduledexecutor.impl.operations.IsCanceledOperation(com.hazelcast.scheduledexecutor.ScheduledTaskHandler)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.IsCanceledOperation.run()"], ["java.lang.Boolean", "com.hazelcast.scheduledexecutor.impl.operations.IsCanceledOperation.getResponse()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.IsCanceledOperation.getId()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.operations.IsCanceledOperation.getResponse()"], ["com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation(com.hazelcast.scheduledexecutor.ScheduledTaskHandler, boolean)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation.run()"], ["java.lang.Boolean", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation.getResponse()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation.getId()"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation.getBackupOperation()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation.getResponse()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnMemberOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnMemberOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnMemberOperation", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnMemberOperation(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnMemberOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnMemberOperation.getId()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.operations.GetAllScheduledOnMemberOperation.getResponse()"], ["com.hazelcast.scheduledexecutor.impl.operations.IsDoneOperation", "com.hazelcast.scheduledexecutor.impl.operations.IsDoneOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.IsDoneOperation", "com.hazelcast.scheduledexecutor.impl.operations.IsDoneOperation(com.hazelcast.scheduledexecutor.ScheduledTaskHandler)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.IsDoneOperation.run()"], ["java.lang.Boolean", "com.hazelcast.scheduledexecutor.impl.operations.IsDoneOperation.getResponse()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.IsDoneOperation.getId()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.operations.IsDoneOperation.getResponse()"], ["com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation", "com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation", "com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation(java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor>>)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation.getId()"], ["com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation()"], ["com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation.run()"], ["int", "com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation.getId()"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainerCollector.getMergePolicyConfig(com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainerCollector.getMergePolicyConfig(java.lang.Object)"], ["com.hazelcast.scheduledexecutor.impl.AbstractScheduledExecutorContainerHolder", "com.hazelcast.scheduledexecutor.impl.AbstractScheduledExecutorContainerHolder(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer", "com.hazelcast.scheduledexecutor.impl.AbstractScheduledExecutorContainerHolder.getContainer(java.lang.String)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer", "com.hazelcast.scheduledexecutor.impl.AbstractScheduledExecutorContainerHolder.getOrCreateContainer(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.AbstractScheduledExecutorContainerHolder.destroy()"], ["void", "com.hazelcast.scheduledexecutor.impl.AbstractScheduledExecutorContainerHolder.destroyContainer(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy$1.handleException(java.lang.Throwable)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorMemberBin$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorMemberBin$1.createNew(java.lang.Object)"], ["V", "com.hazelcast.scheduledexecutor.impl.TaskRunner.call()"], ["void", "com.hazelcast.scheduledexecutor.impl.TaskRunner.run()"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService$2.partitionLost(com.hazelcast.partition.PartitionLostEvent)"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService$1.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult.getReturnValue()"], ["java.lang.Throwable", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult.getException()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult.getId()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult.toString()"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorPartition.prepareReplicationOperation(int, boolean)"], ["com.hazelcast.util.ConstructorFunction<java.lang.String, com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorPartition.getContainerConstructorFunction()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter(java.lang.Runnable)"], ["java.lang.Runnable", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.getRunnable()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.setRunnable(java.lang.Runnable)"], ["V", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.call()"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.getPartitionKey()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.setNode(com.hazelcast.instance.Node)"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.getName()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.save(java.util.Map)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.load(java.util.Map)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.getId()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledRunnableAdapter.toString()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorMemberBin", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorMemberBin(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.util.ConstructorFunction<java.lang.String, com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorMemberBin.getContainerConstructorFunction()"], ["com.hazelcast.scheduledexecutor.impl.InvokeOnMembers", "com.hazelcast.scheduledexecutor.impl.InvokeOnMembers(com.hazelcast.spi.NodeEngine, java.lang.String, com.hazelcast.util.function.Supplier<com.hazelcast.spi.Operation>, java.util.Collection<com.hazelcast.core.Member>)"], ["java.util.Map<com.hazelcast.core.Member, java.lang.Object>", "com.hazelcast.scheduledexecutor.impl.InvokeOnMembers.invoke()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor(com.hazelcast.scheduledexecutor.impl.TaskDefinition)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor(com.hazelcast.scheduledexecutor.impl.TaskDefinition, java.util.Map<?, ?>, com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl, com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult)"], ["com.hazelcast.scheduledexecutor.impl.TaskDefinition", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor.getDefinition()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor.getId()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor.equals(java.lang.Object)"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor.hashCode()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor.toString()"], ["com.hazelcast.scheduledexecutor.impl.TaskDefinition", "com.hazelcast.scheduledexecutor.impl.TaskDefinition()"], ["com.hazelcast.scheduledexecutor.impl.TaskDefinition", "com.hazelcast.scheduledexecutor.impl.TaskDefinition(com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type, java.lang.String, java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.scheduledexecutor.impl.TaskDefinition", "com.hazelcast.scheduledexecutor.impl.TaskDefinition(com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type, java.lang.String, java.util.concurrent.Callable<V>, long, long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.getType()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.getName()"], ["long", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.getInitialDelay()"], ["long", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.getPeriod()"], ["java.util.concurrent.TimeUnit", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.getUnit()"], ["int", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.getId()"], ["void", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.equals(java.lang.Object)"], ["int", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.hashCode()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.TaskDefinition.toString()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.getName()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.getServiceName()"], ["com.hazelcast.scheduledexecutor.IScheduledFuture", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["<V> com.hazelcast.scheduledexecutor.IScheduledFuture<V>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["<V> com.hazelcast.scheduledexecutor.IScheduledFuture<V>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.scheduleOnMember(java.util.concurrent.Callable<V>, com.hazelcast.core.Member, long, java.util.concurrent.TimeUnit)"], ["<V> com.hazelcast.scheduledexecutor.IScheduledFuture<V>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.scheduleOnKeyOwner(java.util.concurrent.Callable<V>, java.lang.Object, long, java.util.concurrent.TimeUnit)"], ["java.util.Map<com.hazelcast.core.Member, com.hazelcast.scheduledexecutor.IScheduledFuture<?>>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.scheduleOnAllMembers(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["<V> java.util.Map<com.hazelcast.core.Member, com.hazelcast.scheduledexecutor.IScheduledFuture<V>>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.scheduleOnAllMembers(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["java.util.Map<com.hazelcast.core.Member, com.hazelcast.scheduledexecutor.IScheduledFuture<?>>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.scheduleOnAllMembersAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.Map<com.hazelcast.core.Member, com.hazelcast.scheduledexecutor.IScheduledFuture<?>>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.scheduleOnMembers(java.lang.Runnable, java.util.Collection<com.hazelcast.core.Member>, long, java.util.concurrent.TimeUnit)"], ["<V> java.util.Map<com.hazelcast.core.Member, com.hazelcast.scheduledexecutor.IScheduledFuture<V>>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.scheduleOnMembers(java.util.concurrent.Callable<V>, java.util.Collection<com.hazelcast.core.Member>, long, java.util.concurrent.TimeUnit)"], ["java.util.Map<com.hazelcast.core.Member, com.hazelcast.scheduledexecutor.IScheduledFuture<?>>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.scheduleOnMembersAtFixedRate(java.lang.Runnable, java.util.Collection<com.hazelcast.core.Member>, long, long, java.util.concurrent.TimeUnit)"], ["<V> java.util.Map<com.hazelcast.core.Member, java.util.List<com.hazelcast.scheduledexecutor.IScheduledFuture<V>>>", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.getAllScheduledFutures()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorServiceProxy.shutdown()"], ["com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper(java.util.concurrent.ScheduledFuture<V>)"], ["long", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.getDelay(java.util.concurrent.TimeUnit)"], ["int", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.compareTo(java.util.concurrent.Delayed)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.cancel(boolean)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.isCancelled()"], ["boolean", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.isDone()"], ["V", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.get()"], ["V", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.get(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.equals(java.lang.Object)"], ["int", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.hashCode()"], ["int", "com.hazelcast.scheduledexecutor.impl.DelegatingScheduledFutureStripper.compareTo(java.lang.Object)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.getHandler()"], ["com.hazelcast.scheduledexecutor.ScheduledTaskStatistics", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.getStats()"], ["long", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.getDelay(java.util.concurrent.TimeUnit)"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.compareTo(java.util.concurrent.Delayed)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.cancel(boolean)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.isCancelled()"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.isDone()"], ["V", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.get()"], ["V", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.get(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.dispose()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledFutureProxy.compareTo(java.lang.Object)"], ["com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService()"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorPartition", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.getPartition(int)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainerHolder", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.getPartitionOrMemberBin(int)"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.getNodeEngine()"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.reset()"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.shutdown(boolean)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.shutdownExecutor(java.lang.String)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.isShutdown(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["java.lang.Runnable", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.prepareMergeRunnable()"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.memberAdded(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.memberRemoved(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.memberAttributeChanged(com.hazelcast.spi.MemberAttributeServiceEvent)"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService.getQuorumName(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorDataSerializerHook$1.create(int)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorPartition$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorPartition$1.createNew(java.lang.Object)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl()"], ["com.hazelcast.nio.Address", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.getAddress()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.getPartitionId()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.getSchedulerName()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.getTaskName()"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.isAssignedToPartition()"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.isAssignedToMember()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.toUrn()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.getId()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.hashCode()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.toString()"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.of(com.hazelcast.nio.Address, java.lang.String, java.lang.String)"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.of(int, java.lang.String, java.lang.String)"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl.of(java.lang.String)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledExecutorDataSerializerHook", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorDataSerializerHook()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorDataSerializerHook.createFactory()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult$ExecutionExceptionDecorator", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult$ExecutionExceptionDecorator(java.lang.Throwable)"], ["com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type[]", "com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type.values()"], ["com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type", "com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type.valueOf(java.lang.String)"], ["byte", "com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type.getId()"], ["com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type", "com.hazelcast.scheduledexecutor.impl.TaskDefinition$Type.getById(int)"], ["void", "com.hazelcast.scheduledexecutor.impl.DistributedScheduledExecutorService$Merger.runInternal()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl(com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl)"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl(long, long, long, long, long)"], ["long", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.getTotalRuns()"], ["long", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.getLastRunDuration(java.util.concurrent.TimeUnit)"], ["long", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.getLastIdleTime(java.util.concurrent.TimeUnit)"], ["long", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.getTotalIdleTime(java.util.concurrent.TimeUnit)"], ["long", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.getTotalRunTime(java.util.concurrent.TimeUnit)"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.getFactoryId()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.getId()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.onInit()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.onBeforeRun()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.onAfterRun()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.snapshot()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl.toString()"], ["java.util.concurrent.ScheduledFuture", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.schedule(com.hazelcast.scheduledexecutor.impl.TaskDefinition)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.cancel(java.lang.String)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.has(java.lang.String)"], ["java.lang.Object", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.get(java.lang.String)"], ["long", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.getDelay(java.lang.String, java.util.concurrent.TimeUnit)"], ["com.hazelcast.scheduledexecutor.ScheduledTaskStatistics", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.getStatistics(java.lang.String)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.isCancelled(java.lang.String)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.isDone(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.destroy()"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.dispose(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.enqueueSuspended(com.hazelcast.scheduledexecutor.impl.TaskDefinition)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.enqueueSuspended(com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor, boolean)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.syncState(java.lang.String, java.util.Map, com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl, com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.shouldParkGetResult(java.lang.String)"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.getDurability()"], ["java.lang.String", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.getName()"], ["int", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.getPartitionId()"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.getNodeEngine()"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.offprintHandler(java.lang.String)"], ["void", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.promoteSuspended()"], ["com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer.merge(com.hazelcast.spi.merge.SplitBrainMergeTypes$ScheduledExecutorMergeTypes, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor, com.hazelcast.spi.merge.SplitBrainMergeTypes$ScheduledExecutorMergeTypes>)"], ["java.util.concurrent.ScheduledFuture", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorMemberOwnedContainer.schedule(com.hazelcast.scheduledexecutor.impl.TaskDefinition)"], ["boolean", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorMemberOwnedContainer.shouldParkGetResult(java.lang.String)"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorMemberOwnedContainer.offprintHandler(java.lang.String)"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.scheduledexecutor.ScheduledTaskHandler()"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.scheduledexecutor.ScheduledTaskHandler.of(java.lang.String)"], ["com.hazelcast.scheduledexecutor.DuplicateTaskException", "com.hazelcast.scheduledexecutor.DuplicateTaskException(java.lang.String)"], ["com.hazelcast.scheduledexecutor.StaleTaskException", "com.hazelcast.scheduledexecutor.StaleTaskException(java.lang.String)"], ["java.lang.Runnable", "com.hazelcast.scheduledexecutor.TaskUtils.named(java.lang.String, java.lang.Runnable)"], ["<V> java.util.concurrent.Callable<V>", "com.hazelcast.scheduledexecutor.TaskUtils.named(java.lang.String, java.util.concurrent.Callable<V>)"], ["com.hazelcast.client.impl.RemoveInterceptorOperationSupplier", "com.hazelcast.client.impl.RemoveInterceptorOperationSupplier(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.RemoveInterceptorOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.client.impl.RemoveInterceptorOperationSupplier.get()"], ["com.hazelcast.client.impl.ReAuthenticationOperationSupplier", "com.hazelcast.client.impl.ReAuthenticationOperationSupplier(java.lang.String, long)"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.ReAuthenticationOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.client.impl.ReAuthenticationOperationSupplier.get()"], ["com.hazelcast.client.impl.operations.ClientReAuthOperation$ClientReauthTask", "com.hazelcast.client.impl.operations.ClientReAuthOperation$ClientReauthTask(com.hazelcast.client.impl.operations.ClientReAuthOperation)"], ["void", "com.hazelcast.client.impl.operations.ClientReAuthOperation$ClientReauthTask.run()"], ["com.hazelcast.client.impl.operations.OnJoinClientOperation", "com.hazelcast.client.impl.operations.OnJoinClientOperation()"], ["com.hazelcast.client.impl.operations.OnJoinClientOperation", "com.hazelcast.client.impl.operations.OnJoinClientOperation(java.util.Map<java.lang.String, java.lang.String>)"], ["void", "com.hazelcast.client.impl.operations.OnJoinClientOperation.run()"], ["java.lang.String", "com.hazelcast.client.impl.operations.OnJoinClientOperation.getServiceName()"], ["boolean", "com.hazelcast.client.impl.operations.OnJoinClientOperation.returnsResponse()"], ["int", "com.hazelcast.client.impl.operations.OnJoinClientOperation.getId()"], ["com.hazelcast.client.impl.operations.GetConnectedClientsOperation", "com.hazelcast.client.impl.operations.GetConnectedClientsOperation()"], ["void", "com.hazelcast.client.impl.operations.GetConnectedClientsOperation.run()"], ["java.lang.Object", "com.hazelcast.client.impl.operations.GetConnectedClientsOperation.getResponse()"], ["int", "com.hazelcast.client.impl.operations.GetConnectedClientsOperation.getId()"], ["com.hazelcast.client.impl.operations.OperationFactoryWrapper", "com.hazelcast.client.impl.operations.OperationFactoryWrapper()"], ["com.hazelcast.client.impl.operations.OperationFactoryWrapper", "com.hazelcast.client.impl.operations.OperationFactoryWrapper(com.hazelcast.spi.OperationFactory, java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.operations.OperationFactoryWrapper.createOperation()"], ["void", "com.hazelcast.client.impl.operations.OperationFactoryWrapper.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.client.impl.operations.OperationFactoryWrapper.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.client.impl.operations.OperationFactoryWrapper.getOperationFactory()"], ["java.lang.String", "com.hazelcast.client.impl.operations.OperationFactoryWrapper.getUuid()"], ["int", "com.hazelcast.client.impl.operations.OperationFactoryWrapper.getFactoryId()"], ["int", "com.hazelcast.client.impl.operations.OperationFactoryWrapper.getId()"], ["java.lang.String", "com.hazelcast.client.impl.operations.OperationFactoryWrapper.toString()"], ["com.hazelcast.client.impl.operations.AbstractClientOperation", "com.hazelcast.client.impl.operations.AbstractClientOperation()"], ["int", "com.hazelcast.client.impl.operations.AbstractClientOperation.getFactoryId()"], ["com.hazelcast.client.impl.operations.ClientDisconnectionOperation", "com.hazelcast.client.impl.operations.ClientDisconnectionOperation()"], ["com.hazelcast.client.impl.operations.ClientDisconnectionOperation", "com.hazelcast.client.impl.operations.ClientDisconnectionOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.client.impl.operations.ClientDisconnectionOperation.run()"], ["boolean", "com.hazelcast.client.impl.operations.ClientDisconnectionOperation.returnsResponse()"], ["int", "com.hazelcast.client.impl.operations.ClientDisconnectionOperation.getId()"], ["java.lang.String", "com.hazelcast.client.impl.operations.ClientDisconnectionOperation.toString()"], ["com.hazelcast.client.impl.operations.ClientDisconnectionOperation$ClientDisconnectedTask", "com.hazelcast.client.impl.operations.ClientDisconnectionOperation$ClientDisconnectedTask(com.hazelcast.client.impl.operations.ClientDisconnectionOperation)"], ["void", "com.hazelcast.client.impl.operations.ClientDisconnectionOperation$ClientDisconnectedTask.run()"], ["com.hazelcast.client.impl.operations.ClientReAuthOperation", "com.hazelcast.client.impl.operations.ClientReAuthOperation()"], ["com.hazelcast.client.impl.operations.ClientReAuthOperation", "com.hazelcast.client.impl.operations.ClientReAuthOperation(java.lang.String, long)"], ["void", "com.hazelcast.client.impl.operations.ClientReAuthOperation.run()"], ["boolean", "com.hazelcast.client.impl.operations.ClientReAuthOperation.returnsResponse()"], ["void", "com.hazelcast.client.impl.operations.ClientReAuthOperation.logError(java.lang.Throwable)"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.client.impl.operations.ClientReAuthOperation.onInvocationException(java.lang.Throwable)"], ["java.lang.String", "com.hazelcast.client.impl.operations.ClientReAuthOperation.getServiceName()"], ["int", "com.hazelcast.client.impl.operations.ClientReAuthOperation.getId()"], ["com.hazelcast.client.impl.ClientServiceProxy", "com.hazelcast.client.impl.ClientServiceProxy(com.hazelcast.instance.Node)"], ["java.lang.String", "com.hazelcast.client.impl.ClientServiceProxy.addClientListener(com.hazelcast.core.ClientListener)"], ["boolean", "com.hazelcast.client.impl.ClientServiceProxy.removeClientListener(java.lang.String)"], ["com.hazelcast.client.impl.ClientEngineImpl$PriorityPartitionSpecificRunnable", "com.hazelcast.client.impl.ClientEngineImpl$PriorityPartitionSpecificRunnable(com.hazelcast.client.impl.protocol.task.MessageTask)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl$PriorityPartitionSpecificRunnable.run()"], ["int", "com.hazelcast.client.impl.ClientEngineImpl$PriorityPartitionSpecificRunnable.getPartitionId()"], ["java.lang.String", "com.hazelcast.client.impl.ClientEngineImpl$PriorityPartitionSpecificRunnable.toString()"], ["java.util.concurrent.atomic.AtomicLong", "com.hazelcast.client.impl.ClientEngineImpl$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.client.impl.ClientEngineImpl$1.createNew(java.lang.Object)"], ["com.hazelcast.client.impl.ClientDataSerializerHook", "com.hazelcast.client.impl.ClientDataSerializerHook()"], ["int", "com.hazelcast.client.impl.ClientDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.client.impl.ClientDataSerializerHook.createFactory()"], ["void", "com.hazelcast.client.impl.ClientEngineImpl$DestroyEndpointTask.run()"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$21.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$77.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$277.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$98.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$209.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$33.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$127.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$50.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$31.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$230.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$125.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$67.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$34.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$365.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$84.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$38.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$10.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$220.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$12.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$276.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$363.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$143.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$124.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$384.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$210.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$357.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$155.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$288.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$364.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$142.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$214.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$87.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$224.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$37.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$6.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$308.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$374.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$173.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$112.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$76.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$139.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$154.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$166.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$283.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$74.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$144.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$240.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$64.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$332.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$55.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$231.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$70.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$42.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$29.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$128.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$147.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$18.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$81.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$229.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$244.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$189.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$41.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$264.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$51.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$22.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$43.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$346.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$28.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$188.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$71.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$293.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.AuthenticationStatus[]", "com.hazelcast.client.impl.protocol.AuthenticationStatus.values()"], ["com.hazelcast.client.impl.protocol.AuthenticationStatus", "com.hazelcast.client.impl.protocol.AuthenticationStatus.valueOf(java.lang.String)"], ["byte", "com.hazelcast.client.impl.protocol.AuthenticationStatus.getId()"], ["com.hazelcast.client.impl.protocol.AuthenticationStatus", "com.hazelcast.client.impl.protocol.AuthenticationStatus.getById(int)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$47.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$177.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterAddMessageTask", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterAddMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterAddMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterAddMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterAddMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterAddMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterAddMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetMessageTask", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetConfiguredReplicaCountMessageTask", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetConfiguredReplicaCountMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetConfiguredReplicaCountMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetConfiguredReplicaCountMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetConfiguredReplicaCountMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetConfiguredReplicaCountMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.crdt.pncounter.PNCounterGetConfiguredReplicaCountMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.CreateProxyMessageTask", "com.hazelcast.client.impl.protocol.task.CreateProxyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.CreateProxyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.CreateProxyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.CreateProxyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.CreateProxyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.CreateProxyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.list.ListClearMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListClearMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListClearMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListClearMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListClearMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListClearMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListClearMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListSetMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSetMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListSetMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListSetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSetMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSetMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListAddAllWithIndexMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListAddAllWithIndexMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddAllWithIndexMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListAddAllWithIndexMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListAddAllWithIndexMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddAllWithIndexMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddAllWithIndexMessageTask.getDistributedObjectName()"], ["void", "com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask$1.itemAdded(com.hazelcast.core.ItemEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask$1.itemRemoved(com.hazelcast.core.ItemEvent)"], ["com.hazelcast.client.impl.protocol.task.list.ListContainsAllMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListContainsAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListContainsAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListContainsAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListContainsAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListContainsAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListContainsAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListAddAllMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListAddAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListAddAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListAddAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListRemoveWithIndexMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListRemoveWithIndexMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveWithIndexMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListRemoveWithIndexMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListRemoveWithIndexMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveWithIndexMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveWithIndexMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListGetAllMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListGetAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListGetAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListGetAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListGetAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListGetAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListGetAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListSubMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListSubMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSubMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListSubMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListSubMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSubMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSubMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListAddWithIndexMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListAddWithIndexMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddWithIndexMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListAddWithIndexMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListAddWithIndexMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddWithIndexMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddWithIndexMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListContainsMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListContainsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListContainsMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListContainsMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListContainsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListContainsMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListContainsMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListSizeMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSizeMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListSizeMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSizeMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListSizeMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListCompareAndRemoveAllMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRemoveAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRemoveAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRemoveAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRemoveAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRemoveAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRemoveAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListIsEmptyMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListIsEmptyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIsEmptyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListIsEmptyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIsEmptyMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIsEmptyMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListIsEmptyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.list.ListRemoveListenerMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListRemoveListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListRemoveListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveListenerMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListCompareAndRetainAllMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRetainAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRetainAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRetainAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRetainAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRetainAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListCompareAndRetainAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListListIteratorMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListListIteratorMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListListIteratorMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListListIteratorMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListListIteratorMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListListIteratorMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListListIteratorMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListRemoveMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListRemoveMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListAddMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListAddMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListAddMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListAddMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListAddMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListLastIndexOfMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListLastIndexOfMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListLastIndexOfMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListLastIndexOfMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListLastIndexOfMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListLastIndexOfMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListLastIndexOfMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListGetMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListGetMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListGetMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListGetMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListGetMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListIndexOfMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListIndexOfMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIndexOfMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListIndexOfMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListIndexOfMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIndexOfMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIndexOfMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.list.ListIteratorMessageTask", "com.hazelcast.client.impl.protocol.task.list.ListIteratorMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIteratorMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.list.ListIteratorMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.list.ListIteratorMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIteratorMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.list.ListIteratorMessageTask.getDistributedObjectName()"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractMultiTargetMessageTask$SingleTargetCallback.notify(java.lang.Object)"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapIsEmptyMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapIsEmptyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapIsEmptyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapIsEmptyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapIsEmptyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapIsEmptyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapIsEmptyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetForUpdateMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetForUpdateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetForUpdateMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetForUpdateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetForUpdateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetForUpdateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetForUpdateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveIfSameMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveIfSameMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveIfSameMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveIfSameMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveIfSameMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveIfSameMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapRemoveIfSameMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSetMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutIfAbsentMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutIfAbsentMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutIfAbsentMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutIfAbsentMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutIfAbsentMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutIfAbsentMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapPutIfAbsentMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSizeMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSizeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSizeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapSizeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapDeleteMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapDeleteMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapDeleteMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapDeleteMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapDeleteMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapDeleteMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapDeleteMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapContainsKeyMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapContainsKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapContainsKeyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapContainsKeyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapContainsKeyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapContainsKeyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapContainsKeyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetWithPredicateMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetWithPredicateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetWithPredicateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapKeySetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceIfSameMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceIfSameMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceIfSameMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceIfSameMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceIfSameMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceIfSameMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapReplaceIfSameMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesWithPredicateMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesWithPredicateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesWithPredicateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmap.TransactionalMapValuesWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.NoSuchMessageTask", "com.hazelcast.client.impl.protocol.task.NoSuchMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.NoSuchMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.NoSuchMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.NoSuchMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.NoSuchMessageTask.getParameters()"], ["int", "com.hazelcast.client.impl.protocol.task.NoSuchMessageTask.getPartitionId()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.NoSuchMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueOfferMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueOfferMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueOfferMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueOfferMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueOfferMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueOfferMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueOfferMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePeekMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePeekMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePeekMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePeekMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePeekMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePeekMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePeekMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueSizeMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueSizeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueSizeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueSizeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueTakeMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueTakeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueTakeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueTakeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueTakeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueTakeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueueTakeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePollMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePollMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePollMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePollMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePollMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePollMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalqueue.TransactionalQueuePollMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractInvocationMessageTask.onResponse(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractInvocationMessageTask.onFailure(java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask", "com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask.get()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask.getParameters()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.DeployClassesMessageTask.get()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferCapacityMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferCapacityMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferCapacityMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferCapacityMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferCapacityMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferCapacityMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferCapacityMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferSizeMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferSizeMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferSizeMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferSizeMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferSizeMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadManyMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadManyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadManyMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadManyMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadManyMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadManyMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadManyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddAllMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddAllMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferAddMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferRemainingCapacityMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferRemainingCapacityMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferRemainingCapacityMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferRemainingCapacityMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferRemainingCapacityMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferRemainingCapacityMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferRemainingCapacityMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferHeadSequenceMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferHeadSequenceMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferHeadSequenceMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferHeadSequenceMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferHeadSequenceMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferHeadSequenceMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferHeadSequenceMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadOneMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadOneMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadOneMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadOneMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadOneMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadOneMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferReadOneMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferTailSequenceMessageTask", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferTailSequenceMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferTailSequenceMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferTailSequenceMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferTailSequenceMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferTailSequenceMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ringbuffer.RingbufferTailSequenceMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapValueCountMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapValueCountMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapValueCountMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapValueCountMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapValueCountMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapValueCountMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapValueCountMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveEntryMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveEntryMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveEntryMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveEntryMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveEntryMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveEntryMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapRemoveEntryMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapGetMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapSizeMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapSizeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapSizeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapSizeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapPutMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapPutMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapPutMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapPutMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapPutMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapPutMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalmultimap.TransactionalMultiMapPutMessageTask.getParameters()"], ["<S> S", "com.hazelcast.client.impl.protocol.task.AbstractMessageTask.getService(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.task.AbstractMessageTask.getPartitionId()"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractMessageTask.run()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AbstractMessageTask.getDistributedObjectType()"], ["com.hazelcast.client.impl.protocol.task.ClientStatisticsMessageTask", "com.hazelcast.client.impl.protocol.task.ClientStatisticsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ClientStatisticsMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.ClientStatisticsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ClientStatisticsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.ClientStatisticsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.ClientStatisticsMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceClearMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceClearMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceClearMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceClearMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceClearMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceClearMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceClearMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceApplyMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceApplyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceApplyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceApplyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceApplyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceApplyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceApplyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceIsNullMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceIsNullMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceIsNullMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceIsNullMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceIsNullMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceIsNullMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceIsNullMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndSetMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndSetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndSetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndSetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndSetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndSetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetAndGetMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetAndGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetAndGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetAndGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetAndGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetAndGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceSetAndGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndAlterMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndAlterMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndAlterMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndAlterMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndAlterMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndAlterMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceGetAndAlterMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceContainsMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceContainsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceContainsMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceContainsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceContainsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceContainsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceContainsMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterAndGetMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterAndGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterAndGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterAndGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterAndGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterAndGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceAlterAndGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceCompareAndSetMessageTask", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceCompareAndSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceCompareAndSetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceCompareAndSetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceCompareAndSetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceCompareAndSetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomicreference.AtomicReferenceCompareAndSetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheIterateEntriesMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateEntriesMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateEntriesMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateEntriesMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateEntriesMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateEntriesMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheFetchNearCacheInvalidationMetadataTask", "com.hazelcast.client.impl.protocol.task.cache.CacheFetchNearCacheInvalidationMetadataTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheFetchNearCacheInvalidationMetadataTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheFetchNearCacheInvalidationMetadataTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheFetchNearCacheInvalidationMetadataTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheFetchNearCacheInvalidationMetadataTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheFetchNearCacheInvalidationMetadataTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheRemovePartitionLostListenerMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheRemovePartitionLostListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemovePartitionLostListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemovePartitionLostListenerMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheRemovePartitionLostListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemovePartitionLostListenerMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheManagementConfigMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheManagementConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheManagementConfigMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheManagementConfigMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheManagementConfigMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheManagementConfigMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheManagementConfigMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheClearMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheClearMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheClearMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheClearMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheClearMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheClearMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheClearMessageTask.getMethodName()"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$CacheEntryListener.handleEvent(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$CacheEntryListener.onRegister(com.hazelcast.cache.impl.CacheService, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$CacheEntryListener.onDeregister(com.hazelcast.cache.impl.CacheService, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$CacheEntryListener.getListener()"], ["boolean", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$CacheEntryListener.eval(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$CacheEntryListener.onDeregister(java.lang.Object, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$CacheEntryListener.onRegister(java.lang.Object, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperation", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperation()"], ["int", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperation.getFactoryId()"], ["int", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperation.getId()"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperation.run()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperation.getResponse()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperation.getServiceName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllMessageTask.getServiceName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheGetAndRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAndRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAndRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAndRemoveMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAndRemoveMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAndRemoveMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllKeysMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllKeysMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllKeysMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllKeysMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllKeysMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllKeysMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllKeysMessageTask.getServiceName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheRemoveInvalidationListenerMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveInvalidationListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveInvalidationListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveInvalidationListenerMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveInvalidationListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveInvalidationListenerMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheGetConfigMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheGetConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetConfigMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetConfigMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheGetConfigMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheGetConfigMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetConfigMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalReadTask", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalReadTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalReadTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalReadTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalReadTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalReadTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalReadTask.getParameters()"], ["java.lang.Boolean", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$1.call()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask$1.call()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.onResponse(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.onFailure(java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.cache.CacheContainsKeyMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheContainsKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheContainsKeyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheContainsKeyMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheContainsKeyMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheContainsKeyMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheContainsKeyMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheAddNearCacheInvalidationListenerTask", "com.hazelcast.client.impl.protocol.task.cache.CacheAddNearCacheInvalidationListenerTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddNearCacheInvalidationListenerTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddNearCacheInvalidationListenerTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheAddNearCacheInvalidationListenerTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddNearCacheInvalidationListenerTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheAddNearCacheInvalidationListenerTask.getRequiredPermission()"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask$1.partitionLost(com.hazelcast.cache.impl.event.CachePartitionLostEvent)"], ["com.hazelcast.client.impl.protocol.task.cache.CacheReplaceMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheReplaceMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheReplaceMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheReplaceMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheReplaceMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheReplaceMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheGetAllMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAllMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAllMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAllMessageTask.getServiceName()"], ["com.hazelcast.client.impl.protocol.task.cache.CachePutAllMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CachePutAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CachePutAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CachePutAllMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CachePutAllMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CachePutAllMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperationFactory", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperationFactory()"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperationFactory.createOperation()"], ["int", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperationFactory.getFactoryId()"], ["int", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperationFactory.getId()"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.client.impl.protocol.task.cache.CachePutMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CachePutMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CachePutMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CachePutMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CachePutMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CachePutMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheGetAndReplaceMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAndReplaceMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAndReplaceMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetAndReplaceMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheSizeMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheSizeMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheSizeMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheSizeMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheSizeMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheRemoveEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveEntryListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveEntryListenerMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveEntryListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveEntryListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveEntryListenerMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheAssignAndGetUuidsMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.cache.CachePutIfAbsentMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CachePutIfAbsentMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CachePutIfAbsentMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CachePutIfAbsentMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CachePutIfAbsentMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CachePutIfAbsentMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.AbstractCacheAllPartitionsTask", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheAllPartitionsTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheAllPartitionsTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheAllPartitionsTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheAllPartitionsTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheAllPartitionsTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddEntryListenerMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheEntryProcessorMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheEntryProcessorMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheEntryProcessorMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheEntryProcessorMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheEntryProcessorMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheEntryProcessorMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheListenerRegistrationMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheListenerRegistrationMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheListenerRegistrationMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheListenerRegistrationMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheListenerRegistrationMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheListenerRegistrationMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheListenerRegistrationMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheGetMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheGetMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheGetMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheLoadAllMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheLoadAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheLoadAllMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheLoadAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheLoadAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheLoadAllMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheLoadAllMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.cache.Pre38CacheAddInvalidationListenerTask", "com.hazelcast.client.impl.protocol.task.cache.Pre38CacheAddInvalidationListenerTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.Pre38CacheAddInvalidationListenerTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.Pre38CacheAddInvalidationListenerTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.Pre38CacheAddInvalidationListenerTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.Pre38CacheAddInvalidationListenerTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.Pre38CacheAddInvalidationListenerTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalSubscribeTask", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalSubscribeTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalSubscribeTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalSubscribeTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalSubscribeTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalSubscribeTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheEventJournalSubscribeTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask.getDistributedObjectName()"], ["void", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheClientNearCacheInvalidationListener.handleEvent(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheClientNearCacheInvalidationListener.onRegister(com.hazelcast.cache.impl.CacheService, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheClientNearCacheInvalidationListener.onDeregister(com.hazelcast.cache.impl.CacheService, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheClientNearCacheInvalidationListener.onDeregister(java.lang.Object, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["void", "com.hazelcast.client.impl.protocol.task.cache.AbstractCacheClientNearCacheInvalidationListener.onRegister(java.lang.Object, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask", "com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.AuthenticationCustomCredentialsMessageTask", "com.hazelcast.client.impl.protocol.task.AuthenticationCustomCredentialsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AuthenticationCustomCredentialsMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AuthenticationCustomCredentialsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AuthenticationCustomCredentialsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.AuthenticationCustomCredentialsMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.AddPartitionLostListenerMessageTask", "com.hazelcast.client.impl.protocol.task.AddPartitionLostListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddPartitionLostListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.AddPartitionLostListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddPartitionLostListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddPartitionLostListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.AddPartitionLostListenerMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.RemoveDistributedObjectListenerMessageTask", "com.hazelcast.client.impl.protocol.task.RemoveDistributedObjectListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemoveDistributedObjectListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.RemoveDistributedObjectListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemoveDistributedObjectListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemoveDistributedObjectListenerMessageTask.getMethodName()"], ["java.lang.Boolean", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask$1.call()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask$1.call()"], ["com.hazelcast.client.impl.protocol.task.transaction.XATransactionCommitMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCommitMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCommitMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCommitMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCommitMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCommitMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCommitMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.transaction.TransactionCreateMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCreateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCreateMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCreateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCreateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCreateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCreateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transaction.TransactionRollbackMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.TransactionRollbackMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionRollbackMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.TransactionRollbackMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionRollbackMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionRollbackMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.TransactionRollbackMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transaction.XACollectTransactionsMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.XACollectTransactionsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XACollectTransactionsMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XACollectTransactionsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XACollectTransactionsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.XACollectTransactionsMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.XACollectTransactionsMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.transaction.XATransactionPrepareMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionPrepareMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionPrepareMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionPrepareMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionPrepareMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionPrepareMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionPrepareMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.transaction.XAFinalizeTransactionMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.XAFinalizeTransactionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XAFinalizeTransactionMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XAFinalizeTransactionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XAFinalizeTransactionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.XAFinalizeTransactionMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.XAFinalizeTransactionMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.transaction.TransactionCommitMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCommitMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCommitMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCommitMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCommitMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCommitMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.TransactionCommitMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transaction.XAClearRemoteTransactionMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.XAClearRemoteTransactionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XAClearRemoteTransactionMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XAClearRemoteTransactionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XAClearRemoteTransactionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.XAClearRemoteTransactionMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.XAClearRemoteTransactionMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.transaction.XATransactionRollbackMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionRollbackMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionRollbackMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionRollbackMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionRollbackMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionRollbackMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionRollbackMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.transaction.XATransactionCreateMessageTask", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCreateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCreateMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCreateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCreateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCreateMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transaction.XATransactionCreateMessageTask.getRequiredPermission()"], ["java.lang.Boolean", "com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask$1.call()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask$1.call()"], ["com.hazelcast.client.impl.protocol.task.condition.ConditionAwaitMessageTask", "com.hazelcast.client.impl.protocol.task.condition.ConditionAwaitMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionAwaitMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.condition.ConditionAwaitMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionAwaitMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionAwaitMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.condition.ConditionAwaitMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.condition.ConditionSignalMessageTask", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.condition.ConditionBeforeAwaitMessageTask", "com.hazelcast.client.impl.protocol.task.condition.ConditionBeforeAwaitMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionBeforeAwaitMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.condition.ConditionBeforeAwaitMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionBeforeAwaitMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionBeforeAwaitMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.condition.ConditionBeforeAwaitMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.condition.ConditionSignalAllMessageTask", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalAllMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalAllMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.condition.ConditionSignalAllMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddTopicConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddTopicConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddTopicConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddCardinalityEstimatorConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddCardinalityEstimatorConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddCardinalityEstimatorConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddListConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddListConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddListConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddReliableTopicConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddReliableTopicConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddReliableTopicConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddMapConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddMapConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddMapConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder(java.lang.String, java.lang.String, boolean, boolean, int, int, com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder, boolean, java.lang.String, com.hazelcast.config.NearCachePreloaderConfig)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.getName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.getInMemoryFormat()"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.isSerializeKeys()"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.isInvalidateOnChange()"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.getTimeToLiveSeconds()"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.getMaxIdleSeconds()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.getEvictionConfigHolder()"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.isCacheLocalEntries()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.getLocalUpdatePolicy()"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.getPreloaderConfig()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.asNearCacheConfig(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder.of(com.hazelcast.config.NearCacheConfig, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.util.Properties, boolean)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder.getClassName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder.getFactoryClassName()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder.getImplementation()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder.getFactoryImplementation()"], ["java.util.Properties", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder.getProperties()"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder.isEnabled()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder.asRingbufferStoreConfig(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder.of(com.hazelcast.config.RingbufferStoreConfig, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddDurableExecutorConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddDurableExecutorConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddDurableExecutorConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.util.Properties, boolean)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder.getClassName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder.getFactoryClassName()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder.getImplementation()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder.getFactoryImplementation()"], ["java.util.Properties", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder.getProperties()"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder.isEnabled()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder.asQueueStoreConfig(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder.of(com.hazelcast.config.QueueStoreConfig, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddReplicatedMapConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddReplicatedMapConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddReplicatedMapConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddMultiMapConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddMultiMapConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddMultiMapConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddRingbufferConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddRingbufferConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddRingbufferConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddScheduledExecutorConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddScheduledExecutorConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddScheduledExecutorConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddExecutorConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddExecutorConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddExecutorConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask.processMessage()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask.onResponse(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AbstractAddConfigMessageTask.onFailure(java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder(int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder(int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder(int, java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder(int, com.hazelcast.nio.serialization.Data, boolean, boolean)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder.getClassName()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder.getListenerImplementation()"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder.getListenerType()"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder.isIncludeValue()"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder.isLocal()"], ["<T extends com.hazelcast.config.ListenerConfig> T", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder.asListenerConfig(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder.of(com.hazelcast.config.ListenerConfig, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddSetConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddSetConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddSetConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddFlakeIdGeneratorConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddFlakeIdGeneratorConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddFlakeIdGeneratorConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder()"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.getBatchSize()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setBatchSize(int)"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.getBufferSize()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setBufferSize(int)"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.getDelaySeconds()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setDelaySeconds(int)"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.isIncludeValue()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setIncludeValue(boolean)"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.isPopulate()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setPopulate(boolean)"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.isCoalesce()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setCoalesce(boolean)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.getInMemoryFormat()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setInMemoryFormat(java.lang.String)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.getName()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setName(java.lang.String)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.getPredicateConfigHolder()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setPredicateConfigHolder(com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.getEvictionConfigHolder()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setEvictionConfigHolder(com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder)"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setListenerConfigs(java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>)"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.setIndexConfigs(java.util.List<com.hazelcast.config.MapIndexConfig>)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.asQueryCacheConfig(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder.of(com.hazelcast.config.QueryCacheConfig, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddSemaphoreConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddSemaphoreConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddSemaphoreConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddCacheConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddCacheConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddCacheConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder()"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.isEnabled()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setEnabled(boolean)"], ["boolean", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.isWriteCoalescing()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setWriteCoalescing(boolean)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.getClassName()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setClassName(java.lang.String)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.getFactoryClassName()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setFactoryClassName(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.getWriteDelaySeconds()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setWriteDelaySeconds(int)"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.getWriteBatchSize()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setWriteBatchSize(int)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.getImplementation()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setImplementation(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.getFactoryImplementation()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setFactoryImplementation(com.hazelcast.nio.serialization.Data)"], ["java.util.Properties", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.getProperties()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.getInitialLoadMode()"], ["void", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.setInitialLoadMode(java.lang.String)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.asMapStoreConfig(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder.of(com.hazelcast.config.MapStoreConfig, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddEventJournalConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddEventJournalConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddEventJournalConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder.getClassName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder.getSql()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder.getImplementation()"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder.asPredicateConfig(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder.of(com.hazelcast.config.PredicateConfig, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder(int, java.lang.String, java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder.getSize()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder.getMaxSizePolicy()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder.getEvictionPolicy()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder.getComparatorClassName()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder.getComparator()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder.asEvictionConfg(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder", "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder.of(com.hazelcast.config.EvictionConfig, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddLockConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddLockConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddLockConfigMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.AddQueueConfigMessageTask", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddQueueConfigMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.dynamicconfig.AddQueueConfigMessageTask.getMethodName()"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractStableClusterMessageTask.onResponse(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractStableClusterMessageTask.onFailure(java.lang.Throwable)"], ["synchronized", "com.hazelcast.client.impl.protocol.task.AbstractMultiTargetMessageTask$MultiTargetCallback.void notify(com.hazelcast.core.Member, java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.AuthenticationBaseMessageTask.processMessage()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.AuthenticationBaseMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListSizeMessageTask", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListSizeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListSizeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListSizeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListRemoveMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListRemoveMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListRemoveMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListRemoveMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListAddMessageTask", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListAddMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListAddMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListAddMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListAddMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListAddMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionallist.TransactionalListAddMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToAddressMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorDisposeResultMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorDisposeResultMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorDisposeResultMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorDisposeResultMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorDisposeResultMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorDisposeResultMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorDisposeResultMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorSubmitToPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorSubmitToPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorSubmitToPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorSubmitToPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorSubmitToPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorSubmitToPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorSubmitToPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorShutdownMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorShutdownMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorShutdownMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorShutdownMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorShutdownMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorShutdownMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorShutdownMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorIsShutdownMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorIsShutdownMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorIsShutdownMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorIsShutdownMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorIsShutdownMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorIsShutdownMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorIsShutdownMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveResultMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveResultMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveResultMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveResultMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveResultMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveResultMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveResultMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveAndDisposeResultMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveAndDisposeResultMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveAndDisposeResultMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveAndDisposeResultMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveAndDisposeResultMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveAndDisposeResultMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.durable.DurableExecutorRetrieveAndDisposeResultMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceCancelOnAddressMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceCancelOnAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceCancelOnAddressMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceSubmitToPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.AbstractExecutorServiceCancelMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.AbstractExecutorServiceCancelMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.AbstractExecutorServiceCancelMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.AbstractExecutorServiceCancelMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.AbstractExecutorServiceCancelMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.AbstractExecutorServiceCancelMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceCancelOnPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceCancelOnPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceCancelOnPartitionMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceShutdownMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceShutdownMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceShutdownMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceShutdownMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceShutdownMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceShutdownMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceShutdownMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceIsShutdownMessageTask", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceIsShutdownMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceIsShutdownMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceIsShutdownMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceIsShutdownMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceIsShutdownMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.executorservice.ExecutorServiceIsShutdownMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.AbstractAllPartitionsMessageTask", "com.hazelcast.client.impl.protocol.task.AbstractAllPartitionsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchTrySetCountMessageTask", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchTrySetCountMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchTrySetCountMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchTrySetCountMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchTrySetCountMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchTrySetCountMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchTrySetCountMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchCountDownMessageTask", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchCountDownMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchCountDownMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchCountDownMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchCountDownMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchCountDownMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchCountDownMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchAwaitMessageTask", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchAwaitMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchAwaitMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchAwaitMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchAwaitMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchAwaitMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchAwaitMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchGetCountMessageTask", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchGetCountMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchGetCountMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchGetCountMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchGetCountMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchGetCountMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.countdownlatch.CountDownLatchGetCountMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueDrainMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueuePollMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueuePollMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueuePollMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePollMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePollMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueuePollMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePollMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueClearMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueClearMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueClearMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueClearMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueClearMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueClearMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueClearMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueTakeMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueTakeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueTakeMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueTakeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueTakeMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueTakeMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueTakeMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueContainsAllMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsAllMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRetainAllMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRetainAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRetainAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRetainAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRetainAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRetainAllMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRetainAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueAddAllMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueAddAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueAddAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueAddAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueAddAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueAddAllMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueAddAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRemoveAllMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRemoveAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRemoveAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRemoveAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRemoveAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRemoveAllMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueCompareAndRemoveAllMessageTask.getDistributedObjectName()"], ["void", "com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask$1.itemAdded(com.hazelcast.core.ItemEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask$1.itemRemoved(com.hazelcast.core.ItemEvent)"], ["com.hazelcast.client.impl.protocol.task.queue.QueueRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueuePutMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueuePutMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueuePutMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueuePutMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePutMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePutMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePutMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueContainsMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueContainsMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueIsEmptyMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueIsEmptyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueIsEmptyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueIsEmptyMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueIsEmptyMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueIsEmptyMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueIsEmptyMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueAddListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueRemainingCapacityMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueRemainingCapacityMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueRemainingCapacityMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemainingCapacityMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemainingCapacityMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueRemainingCapacityMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemainingCapacityMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueIteratorMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueIteratorMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueIteratorMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueIteratorMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueIteratorMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueIteratorMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueIteratorMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueDrainMaxSizeMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMaxSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMaxSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMaxSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMaxSizeMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMaxSizeMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueDrainMaxSizeMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueOfferMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueOfferMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueOfferMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueOfferMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueOfferMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueOfferMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueOfferMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueRemoveListenerMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveListenerMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueRemoveListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueueSizeMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueueSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueueSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueSizeMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueSizeMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueueSizeMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueueSizeMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.queue.QueuePeekMessageTask", "com.hazelcast.client.impl.protocol.task.queue.QueuePeekMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.queue.QueuePeekMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePeekMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePeekMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.queue.QueuePeekMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.queue.QueuePeekMessageTask.getDistributedObjectName()"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask$GetAllScheduledOnMemberOperationFactory.get()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask$GetAllScheduledOnMemberOperationFactory.get()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromAddressMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromAddressMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsCancelledFromPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromAddressMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetStatisticsFromAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorShutdownMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorShutdownMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorShutdownMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorShutdownMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorShutdownMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorShutdownMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorShutdownMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromAddressMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetResultFromPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromAddressMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskGetDelayFromAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromAddressMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorGetAllScheduledMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToAddressMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorSubmitToAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromAddressMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromAddressMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromAddressMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromAddressMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromAddressMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromAddressMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskDisposeFromAddressMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromPartitionMessageTask", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromPartitionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromPartitionMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromPartitionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromPartitionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromPartitionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskIsDoneFromPartitionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetSizeMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetSizeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetSizeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetSizeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetAddMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetAddMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetAddMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetAddMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetAddMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetAddMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetAddMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetRemoveMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetRemoveMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetRemoveMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.transactionalset.TransactionalSetRemoveMessageTask.getParameters()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.AbstractRemoveListenerMessageTask.call()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.AbstractRemoveListenerMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapKeySetMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapKeySetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapKeySetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapKeySetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapKeySetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapKeySetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapKeySetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapPutMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapPutMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapPutMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapPutMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapPutMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapPutMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapPutMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveEntryListenerMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapSizeMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapSizeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapSizeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapSizeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.AbstractMultiMapAddEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.AbstractMultiMapAddEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.AbstractMultiMapAddEntryListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.AbstractMultiMapAddEntryListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.AbstractMultiMapAddEntryListenerMessageTask.getMethodName()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.multimap.AbstractMultiMapAddEntryListenerMessageTask.getKey()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapLockMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapLockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapLockMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapLockMessageTask.getDistributedObjectType()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapLockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapLockMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapLockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapLockMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapTryLockMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapTryLockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapTryLockMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapTryLockMessageTask.getDistributedObjectType()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapTryLockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapTryLockMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapTryLockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapTryLockMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsEntryMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsEntryMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsEntryMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsEntryMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsEntryMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsEntryMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsEntryMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapIsLockedMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapIsLockedMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapIsLockedMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapIsLockedMessageTask.getDistributedObjectType()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapIsLockedMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapIsLockedMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapIsLockedMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapIsLockedMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapClearMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapClearMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapClearMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapClearMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapClearMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapClearMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapClearMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapGetMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsKeyMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsKeyMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsKeyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsKeyMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsKeyMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsKeyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapUnlockMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapUnlockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapUnlockMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapUnlockMessageTask.getDistributedObjectType()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapUnlockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapUnlockMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapUnlockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapUnlockMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapEntrySetMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapEntrySetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapEntrySetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapEntrySetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapEntrySetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapEntrySetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapEntrySetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapValueCountMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValueCountMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValueCountMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValueCountMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValueCountMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValueCountMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValueCountMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapRemoveMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapForceUnlockMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapForceUnlockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapForceUnlockMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapForceUnlockMessageTask.getDistributedObjectType()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapForceUnlockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapForceUnlockMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapForceUnlockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapForceUnlockMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapValuesMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValuesMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValuesMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValuesMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValuesMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValuesMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapValuesMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.multimap.AbstractMultiMapAddEntryListenerMessageTask$MultiMapListener.onEntryEvent(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.multimap.AbstractMultiMapAddEntryListenerMessageTask$MultiMapListener.onMapEvent(com.hazelcast.core.MapEvent)"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsValueMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsValueMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsValueMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsValueMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsValueMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsValueMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapContainsValueMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapDeleteMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapDeleteMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapDeleteMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapDeleteMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapDeleteMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapDeleteMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapDeleteMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerToKeyMessageTask", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerToKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerToKeyMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerToKeyMessageTask.getParameters()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.multimap.MultiMapAddEntryListenerToKeyMessageTask.getKey()"], ["com.hazelcast.client.impl.protocol.task.map.MapAggregateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAggregateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapAggregateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAggregateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAggregateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAggregateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.map.MapValuesWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapValuesWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapValuesWithPredicateMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapValuesWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapValuesWithPredicateMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.map.MapIsEmptyMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapIsEmptyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapIsEmptyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapIsEmptyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapIsEmptyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapIsEmptyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapIsEmptyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapEvictMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapEvictMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEvictMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapEvictMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEvictMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEvictMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapEvictMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapRemoveMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapProjectionWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapProjectionWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapProjectionWithPredicateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapProjectionWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapProjectionWithPredicateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapProjectionWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapRemoveIfSameMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapRemoveIfSameMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveIfSameMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapRemoveIfSameMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveIfSameMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveIfSameMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapRemoveIfSameMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapProjectionMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapProjectionMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapProjectionMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapProjectionMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapProjectionMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapProjectionMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapRemoveEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapRemoveEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveEntryListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveEntryListenerMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapRemoveEntryListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveEntryListenerMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.map.MapEvictAllMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapEvictAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEvictAllMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapEvictAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEvictAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEvictAllMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapEvictAllMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.map.MapTryRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapTryRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryRemoveMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapTryRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryRemoveMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryRemoveMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapTryRemoveMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["void", "com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask.onEvent(com.hazelcast.core.IMapEvent)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.map.MapAddListenerMessageTask.onEvent(java.lang.Object)"], ["com.hazelcast.client.impl.protocol.task.map.MapTryPutMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapTryPutMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryPutMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryPutMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapTryPutMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerToKeyMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerToKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerToKeyMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerToKeyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapMadePublishableMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapMadePublishableMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapMadePublishableMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapMadePublishableMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapMadePublishableMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapMadePublishableMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapMadePublishableMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapReplaceIfSameMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapReplaceIfSameMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapReplaceIfSameMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapReplaceIfSameMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapReplaceIfSameMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapValuesWithPagingPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapValuesWithPagingPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapValuesWithPagingPredicateMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapValuesWithPagingPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapValuesWithPagingPredicateMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.map.MapFetchEntriesMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapFetchEntriesMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchEntriesMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapFetchEntriesMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchEntriesMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchEntriesMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapFetchEntriesMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapSetReadCursorMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapSetReadCursorMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSetReadCursorMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapSetReadCursorMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSetReadCursorMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSetReadCursorMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapSetReadCursorMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeyMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapSubmitToKeyMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapSubmitToKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSubmitToKeyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapSubmitToKeyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSubmitToKeyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSubmitToKeyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapSubmitToKeyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapContainsValueMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapContainsValueMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapContainsValueMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapContainsValueMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapContainsValueMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapContainsValueMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapContainsValueMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapEntrySetMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapEntrySetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapEntrySetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEntrySetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEntrySetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapEntrySetMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.map.AbstractMapAddEntryListenerMessageTask$ClientMapListener.onEntryEvent(com.hazelcast.core.EntryEvent<java.lang.Object, java.lang.Object>)"], ["void", "com.hazelcast.client.impl.protocol.task.map.AbstractMapAddEntryListenerMessageTask$ClientMapListener.onMapEvent(com.hazelcast.core.MapEvent)"], ["com.hazelcast.client.impl.protocol.task.map.MapExecuteWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapExecuteWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteWithPredicateMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapExecuteWithPredicateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteWithPredicateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapExecuteWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapPutMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapPutMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapPutMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperation", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperation()"], ["void", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperation.run()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperation.getResponse()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperation.getServiceName()"], ["int", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperation.getFactoryId()"], ["int", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperation.getId()"], ["com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperationFactory", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperationFactory()"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperationFactory.createOperation()"], ["int", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperationFactory.getFactoryId()"], ["int", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperationFactory.getId()"], ["void", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.client.impl.protocol.task.map.MapAssignAndGetUuidsOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPredicateMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPredicateMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.map.DefaultMapAggregateMessageTask", "com.hazelcast.client.impl.protocol.task.map.DefaultMapAggregateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.AbstractMapQueryMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.AbstractMapQueryMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.map.MapEventJournalSubscribeTask", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalSubscribeTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalSubscribeTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalSubscribeTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalSubscribeTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalSubscribeTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalSubscribeTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapPutIfAbsentMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapPutIfAbsentMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutIfAbsentMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutIfAbsentMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapPutIfAbsentMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapContainsKeyMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapContainsKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapContainsKeyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapContainsKeyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapContainsKeyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapContainsKeyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapContainsKeyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPagingPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPagingPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPagingPredicateMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPagingPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapKeySetWithPagingPredicateMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.map.MapLoadGivenKeysMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapLoadGivenKeysMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLoadGivenKeysMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapLoadGivenKeysMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLoadGivenKeysMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLoadGivenKeysMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapLoadGivenKeysMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAggregateWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAggregateWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapAggregateWithPredicateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAggregateWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAggregateWithPredicateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAggregateWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.Pre38MapAddNearCacheEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.map.Pre38MapAddNearCacheEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.Pre38MapAddNearCacheEntryListenerMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.Pre38MapAddNearCacheEntryListenerMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapClearMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapClearMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapClearMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapClearMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapClearMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapClearMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapClearMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapRemovePartitionLostListenerMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapRemovePartitionLostListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemovePartitionLostListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemovePartitionLostListenerMessageTask.getDistributedObjectName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapRemovePartitionLostListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemovePartitionLostListenerMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.map.MapValuesMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapValuesMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapValuesMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapValuesMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapValuesMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapValuesMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapExecuteOnAllKeysMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnAllKeysMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnAllKeysMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnAllKeysMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnAllKeysMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnAllKeysMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnAllKeysMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.map.MapAddPartitionLostListenerMessageTask$1.partitionLost(com.hazelcast.map.MapPartitionLostEvent)"], ["com.hazelcast.client.impl.protocol.task.map.MapFetchKeysMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapFetchKeysMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchKeysMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapFetchKeysMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchKeysMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchKeysMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapFetchKeysMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.AbstractMapPutMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.AbstractMapPutMessageTask.getServiceName()"], ["com.hazelcast.client.impl.protocol.task.map.MapSetMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapSetMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSetMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddNearCacheInvalidationListenerMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddNearCacheInvalidationListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddNearCacheInvalidationListenerMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddNearCacheInvalidationListenerMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapGetEntryViewMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapGetEntryViewMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapGetEntryViewMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetEntryViewMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetEntryViewMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetEntryViewMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapGetEntryViewMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapEventJournalReadTask", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalReadTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalReadTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalReadTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalReadTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalReadTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapEventJournalReadTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapForceUnlockMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapForceUnlockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapForceUnlockMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapForceUnlockMessageTask.getDistributedObjectType()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapForceUnlockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapForceUnlockMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapForceUnlockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapForceUnlockMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapPutTransientMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapPutTransientMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutTransientMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutTransientMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapPutTransientMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapUnlockMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapUnlockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapUnlockMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapUnlockMessageTask.getDistributedObjectType()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapUnlockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapUnlockMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapUnlockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapUnlockMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapLockMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapLockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLockMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLockMessageTask.getDistributedObjectType()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapLockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLockMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapLockMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapRemoveInterceptorMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapRemoveInterceptorMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveInterceptorMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapRemoveInterceptorMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveInterceptorMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveInterceptorMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapRemoveInterceptorMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddInterceptorMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddInterceptorMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddInterceptorMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapAddInterceptorMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddInterceptorMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddInterceptorMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddInterceptorMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.map.AbstractMapClientNearCacheInvalidationListener.onInvalidate(com.hazelcast.internal.nearcache.impl.invalidation.Invalidation)"], ["com.hazelcast.client.impl.protocol.task.map.MapSizeMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSizeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSizeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapSizeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapDeleteMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapDeleteMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapDeleteMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapDeleteMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapDeleteMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapDeleteMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapDeleteMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapLoadAllMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapLoadAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLoadAllMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapLoadAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLoadAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapLoadAllMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapLoadAllMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapIsLockedMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapIsLockedMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapIsLockedMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapIsLockedMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapIsLockedMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapIsLockedMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapIsLockedMessageTask.getDistributedObjectType()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapIsLockedMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddPartitionLostListenerMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddPartitionLostListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddPartitionLostListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddPartitionLostListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddPartitionLostListenerMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapAddPartitionLostListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddPartitionLostListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.map.MapTryLockMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapTryLockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryLockMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryLockMessageTask.getDistributedObjectType()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapTryLockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryLockMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapTryLockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapTryLockMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.DefaultMapProjectMessageTask", "com.hazelcast.client.impl.protocol.task.map.DefaultMapProjectMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPredicateMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPredicateMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.map.MapGetAllMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapGetAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetAllMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapGetAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetAllMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapGetAllMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapFetchWithQueryMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapFetchWithQueryMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchWithQueryMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapFetchWithQueryMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchWithQueryMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchWithQueryMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapFetchWithQueryMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapDestroyCacheMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapDestroyCacheMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapDestroyCacheMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapDestroyCacheMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapDestroyCacheMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapDestroyCacheMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapDestroyCacheMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapKeySetMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapKeySetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapKeySetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapKeySetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapKeySetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapKeySetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapClearNearCacheMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapClearNearCacheMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapClearNearCacheMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapClearNearCacheMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapClearNearCacheMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapClearNearCacheMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapClearNearCacheMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapRemoveAllMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapRemoveAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveAllMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapRemoveAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapRemoveAllMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapRemoveAllMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapReplaceMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapReplaceMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapReplaceMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapReplaceMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapReplaceMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeysMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeysMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeysMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeysMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeysMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeysMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapExecuteOnKeysMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapFlushMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapFlushMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFlushMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapFlushMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFlushMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFlushMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapFlushMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddIndexMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddIndexMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddIndexMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapAddIndexMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddIndexMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddIndexMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddIndexMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapFetchNearCacheInvalidationMetadataTask", "com.hazelcast.client.impl.protocol.task.map.MapFetchNearCacheInvalidationMetadataTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapFetchNearCacheInvalidationMetadataTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchNearCacheInvalidationMetadataTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchNearCacheInvalidationMetadataTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapFetchNearCacheInvalidationMetadataTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapFetchNearCacheInvalidationMetadataTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.map.AbstractMapAddEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.map.AbstractMapAddEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.AbstractMapAddEntryListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.AbstractMapAddEntryListenerMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.AbstractMapAddEntryListenerMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.map.MapGetMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPagingPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPagingPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPagingPredicateMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPagingPredicateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapEntriesWithPagingPredicateMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerToKeyWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerToKeyWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerToKeyWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapAddEntryListenerToKeyWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.map.MapPutAllMessageTask", "com.hazelcast.client.impl.protocol.task.map.MapPutAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutAllMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.map.MapPutAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.map.MapPutAllMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.map.MapPutAllMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.GetDistributedObjectsMessageTask", "com.hazelcast.client.impl.protocol.task.GetDistributedObjectsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.GetDistributedObjectsMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.GetDistributedObjectsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.GetDistributedObjectsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.GetDistributedObjectsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.GetDistributedObjectsMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorAddMessageTask", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorAddMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorAddMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorAddMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorAddMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorAddMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorAddMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorEstimateMessageTask", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorEstimateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorEstimateMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorEstimateMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorEstimateMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorEstimateMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.cardinality.CardinalityEstimatorEstimateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForMultiMapMessageTask", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForMultiMapMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForMultiMapMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForListMessageTask", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForListMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForListMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForCustomMessageTask", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForCustomMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForCustomMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.mapreduce.AbstractMapReduceTask", "com.hazelcast.client.impl.protocol.task.mapreduce.AbstractMapReduceTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["void", "com.hazelcast.client.impl.protocol.task.mapreduce.AbstractMapReduceTask.onResponse(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.mapreduce.AbstractMapReduceTask.onFailure(java.lang.Throwable)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.AbstractMapReduceTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.mapreduce.AbstractMapReduceTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.AbstractMapReduceTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.mapreduce.AbstractMapReduceTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForSetMessageTask", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForSetMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceJobProcessInformationMessageTask", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceJobProcessInformationMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceJobProcessInformationMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceJobProcessInformationMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceJobProcessInformationMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceJobProcessInformationMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceJobProcessInformationMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForMapMessageTask", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForMapMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceForMapMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceCancelMessageTask", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceCancelMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceCancelMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceCancelMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceCancelMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceCancelMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.mapreduce.MapReduceCancelMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask$MembershipListenerImpl", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask$MembershipListenerImpl(com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask, com.hazelcast.client.ClientEndpoint)"], ["void", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask$MembershipListenerImpl.init(com.hazelcast.core.InitialMembershipEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask$MembershipListenerImpl.memberAdded(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask$MembershipListenerImpl.memberRemoved(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask$MembershipListenerImpl.memberAttributeChanged(com.hazelcast.core.MemberAttributeEvent)"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutAllMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutAllMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutAllMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutAllMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutAllMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutAllMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.query.Predicate", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerWithPredicateMessageTask.getPredicate()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerWithPredicateMessageTask.getKey()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsKeyMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsKeyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsKeyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsKeyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsKeyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsKeyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyWithPredicateMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyWithPredicateMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.query.Predicate", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyWithPredicateMessageTask.getPredicate()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyWithPredicateMessageTask.getKey()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyWithPredicateMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyWithPredicateMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsValueMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsValueMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsValueMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsValueMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsValueMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsValueMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapContainsValueMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.getRequiredPermission()"], ["void", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.entryAdded(com.hazelcast.core.EntryEvent<java.lang.Object, java.lang.Object>)"], ["void", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.entryRemoved(com.hazelcast.core.EntryEvent<java.lang.Object, java.lang.Object>)"], ["void", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.entryUpdated(com.hazelcast.core.EntryEvent<java.lang.Object, java.lang.Object>)"], ["void", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.entryEvicted(com.hazelcast.core.EntryEvent<java.lang.Object, java.lang.Object>)"], ["void", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.mapEvicted(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.replicatedmap.AbstractReplicatedMapAddEntryListenerMessageTask.mapCleared(com.hazelcast.core.MapEvent)"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.query.Predicate", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyMessageTask.getPredicate()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyMessageTask.getKey()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerToKeyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapClearMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapClearMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapClearMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapClearMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapClearMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapClearMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapClearMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapKeySetMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapKeySetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapKeySetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapKeySetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapKeySetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapKeySetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapKeySetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapIsEmptyMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapIsEmptyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapIsEmptyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapIsEmptyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapIsEmptyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapIsEmptyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapIsEmptyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapEntrySetMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapEntrySetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapEntrySetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapEntrySetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapEntrySetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapEntrySetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapEntrySetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.query.Predicate", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerMessageTask.getPredicate()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerMessageTask.getKey()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerMessageTask.getParameters()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddEntryListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapGetMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapGetMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapGetMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapGetMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapValuesMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapValuesMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapValuesMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapValuesMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapValuesMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapValuesMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapValuesMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveEntryListenerMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveEntryListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveEntryListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveEntryListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveEntryListenerMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapRemoveEntryListenerMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapSizeMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapSizeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapSizeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapSizeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapSizeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutMessageTask.getMethodName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutMessageTask.getRequiredPermission()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapPutMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddNearCacheListenerMessageTask", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddNearCacheListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.query.Predicate", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddNearCacheListenerMessageTask.getPredicate()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddNearCacheListenerMessageTask.getKey()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddNearCacheListenerMessageTask.getDistributedObjectName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.replicatedmap.ReplicatedMapAddNearCacheListenerMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.DestroyProxyMessageTask", "com.hazelcast.client.impl.protocol.task.DestroyProxyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.DestroyProxyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.DestroyProxyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.DestroyProxyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.DestroyProxyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.DestroyProxyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask", "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask.get()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask.getParameters()"], ["java.lang.Object", "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask.get()"], ["com.hazelcast.client.impl.protocol.task.RemoveAllListenersMessageTask", "com.hazelcast.client.impl.protocol.task.RemoveAllListenersMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemoveAllListenersMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.RemoveAllListenersMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemoveAllListenersMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemoveAllListenersMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.RemoveAllListenersMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.AuthenticationMessageTask", "com.hazelcast.client.impl.protocol.task.AuthenticationMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AuthenticationMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AuthenticationMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AuthenticationMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.AuthenticationMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.set.SetCompareAndRetainAllMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRetainAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRetainAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRetainAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRetainAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRetainAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRetainAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetIsEmptyMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetIsEmptyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetIsEmptyMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetIsEmptyMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetIsEmptyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetIsEmptyMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetIsEmptyMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetAddMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetAddMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetAddMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetAddMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetContainsAllMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetContainsAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetContainsAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetContainsAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetContainsAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetContainsAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetContainsAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetSizeMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetSizeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetSizeMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetSizeMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetSizeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetSizeMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetSizeMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetRemoveListenerMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetRemoveListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetRemoveListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetRemoveListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetRemoveListenerMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetRemoveListenerMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetCompareAndRemoveAllMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRemoveAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRemoveAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRemoveAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRemoveAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRemoveAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetCompareAndRemoveAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetClearMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetClearMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetClearMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetClearMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetClearMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetClearMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetClearMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetRemoveMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetRemoveMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetRemoveMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetRemoveMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetRemoveMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetRemoveMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetRemoveMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetGetAllMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetGetAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetGetAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetGetAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetGetAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetGetAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetGetAllMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.set.SetAddAllMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetAddAllMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddAllMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetAddAllMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetAddAllMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddAllMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetAddAllMessageTask.getDistributedObjectName()"], ["void", "com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask$1.itemAdded(com.hazelcast.core.ItemEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.set.SetAddListenerMessageTask$1.itemRemoved(com.hazelcast.core.ItemEvent)"], ["com.hazelcast.client.impl.protocol.task.set.SetContainsMessageTask", "com.hazelcast.client.impl.protocol.task.set.SetContainsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetContainsMessageTask.getServiceName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.set.SetContainsMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.set.SetContainsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetContainsMessageTask.getMethodName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.set.SetContainsMessageTask.getDistributedObjectName()"], ["com.hazelcast.client.impl.protocol.task.topic.TopicAddMessageListenerMessageTask", "com.hazelcast.client.impl.protocol.task.topic.TopicAddMessageListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicAddMessageListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.topic.TopicAddMessageListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicAddMessageListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicAddMessageListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.topic.TopicAddMessageListenerMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.topic.TopicAddMessageListenerMessageTask.onMessage(com.hazelcast.core.Message)"], ["com.hazelcast.client.impl.protocol.task.topic.TopicPublishMessageTask", "com.hazelcast.client.impl.protocol.task.topic.TopicPublishMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicPublishMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.topic.TopicPublishMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicPublishMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicPublishMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.topic.TopicPublishMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.topic.TopicRemoveMessageListenerMessageTask", "com.hazelcast.client.impl.protocol.task.topic.TopicRemoveMessageListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicRemoveMessageListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.topic.TopicRemoveMessageListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicRemoveMessageListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.topic.TopicRemoveMessageListenerMessageTask.getMethodName()"], ["com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask", "com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.AddPartitionListenerMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.lock.LockGetLockCountMessageTask", "com.hazelcast.client.impl.protocol.task.lock.LockGetLockCountMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockGetLockCountMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.lock.LockGetLockCountMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockGetLockCountMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockGetLockCountMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.lock.LockGetLockCountMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.lock.LockTryLockMessageTask", "com.hazelcast.client.impl.protocol.task.lock.LockTryLockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockTryLockMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.lock.LockTryLockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockTryLockMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockTryLockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.lock.LockTryLockMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.lock.LockUnlockMessageTask", "com.hazelcast.client.impl.protocol.task.lock.LockUnlockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockUnlockMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.lock.LockUnlockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockUnlockMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockUnlockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.lock.LockUnlockMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.lock.LockLockMessageTask", "com.hazelcast.client.impl.protocol.task.lock.LockLockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockLockMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.lock.LockLockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockLockMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockLockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.lock.LockLockMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.lock.LockIsLockedByCurrentThreadMessageTask", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedByCurrentThreadMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedByCurrentThreadMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedByCurrentThreadMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedByCurrentThreadMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedByCurrentThreadMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedByCurrentThreadMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.lock.LockForceUnlockMessageTask", "com.hazelcast.client.impl.protocol.task.lock.LockForceUnlockMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockForceUnlockMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.lock.LockForceUnlockMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockForceUnlockMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockForceUnlockMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.lock.LockForceUnlockMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.lock.LockGetRemainingLeaseTimeMessageTask", "com.hazelcast.client.impl.protocol.task.lock.LockGetRemainingLeaseTimeMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockGetRemainingLeaseTimeMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.lock.LockGetRemainingLeaseTimeMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockGetRemainingLeaseTimeMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockGetRemainingLeaseTimeMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.lock.LockGetRemainingLeaseTimeMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.lock.LockIsLockedMessageTask", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.lock.LockIsLockedMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.GetPartitionsMessageTask", "com.hazelcast.client.impl.protocol.task.GetPartitionsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.GetPartitionsMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.GetPartitionsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.GetPartitionsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.GetPartitionsMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.GetPartitionsMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask.getParameters()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.AddMembershipListenerMessageTask.getRequiredPermission()"], ["com.hazelcast.client.impl.protocol.task.RemovePartitionLostListenerMessageTask", "com.hazelcast.client.impl.protocol.task.RemovePartitionLostListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemovePartitionLostListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.RemovePartitionLostListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemovePartitionLostListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.RemovePartitionLostListenerMessageTask.getMethodName()"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractAddressMessageTask.processMessage()"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractAddressMessageTask.execute(java.lang.Runnable)"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractAddressMessageTask.onResponse(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractAddressMessageTask.onFailure(java.lang.Throwable)"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask.processMessage()"], ["com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreTryAcquireMessageTask", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreTryAcquireMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreTryAcquireMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreTryAcquireMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreTryAcquireMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreTryAcquireMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreTryAcquireMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreDrainPermitsMessageTask", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreDrainPermitsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreDrainPermitsMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreDrainPermitsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreDrainPermitsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreDrainPermitsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreDrainPermitsMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreInitMessageTask", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreInitMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreInitMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreInitMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreInitMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreInitMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreInitMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAvailablePermitsMessageTasks", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAvailablePermitsMessageTasks(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAvailablePermitsMessageTasks.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAvailablePermitsMessageTasks.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAvailablePermitsMessageTasks.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAvailablePermitsMessageTasks.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAvailablePermitsMessageTasks.getParameters()"], ["com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReducePermitsMessageTask", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReducePermitsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReducePermitsMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReducePermitsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReducePermitsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReducePermitsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReducePermitsMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAcquireMessageTask", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAcquireMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAcquireMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAcquireMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAcquireMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAcquireMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreAcquireMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreIncreasePermitsMessageTask", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreIncreasePermitsMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreIncreasePermitsMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreIncreasePermitsMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreIncreasePermitsMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreIncreasePermitsMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreIncreasePermitsMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReleaseMessageTask", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReleaseMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReleaseMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReleaseMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReleaseMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReleaseMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.semaphore.SemaphoreReleaseMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.AddPartitionLostListenerMessageTask$1.partitionLost(com.hazelcast.partition.PartitionLostEvent)"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongSetMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongSetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongSetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongSetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongSetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongSetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongIncrementAndGetMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongIncrementAndGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongIncrementAndGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongIncrementAndGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongIncrementAndGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongIncrementAndGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongIncrementAndGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAlterMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAlterMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAlterMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAlterMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAlterMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAlterMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAlterMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndIncrementMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndIncrementMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndIncrementMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndIncrementMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndIncrementMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndIncrementMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndIncrementMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongCompareAndSetMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongCompareAndSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongCompareAndSetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongCompareAndSetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongCompareAndSetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongCompareAndSetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongCompareAndSetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAddAndGetMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAddAndGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAddAndGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAddAndGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAddAndGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAddAndGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAddAndGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongApplyMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongApplyMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongApplyMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongApplyMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongApplyMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongApplyMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongApplyMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongDecrementAndGetMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongDecrementAndGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongDecrementAndGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongDecrementAndGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongDecrementAndGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongDecrementAndGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongDecrementAndGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAddMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAddMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAddMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAddMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAddMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAddMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndAddMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterAndGetMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterAndGetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterAndGetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterAndGetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterAndGetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterAndGetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongAlterAndGetMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndSetMessageTask", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndSetMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndSetMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndSetMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndSetMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndSetMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.atomiclong.AtomicLongGetAndSetMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask.processMessage()"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask.execute(java.lang.Runnable)"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask.onResponse(java.lang.Object)"], ["void", "com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask.onFailure(java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask.getParameters()"], ["void", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask.distributedObjectCreated(com.hazelcast.core.DistributedObjectEvent)"], ["void", "com.hazelcast.client.impl.protocol.task.AddDistributedObjectListenerMessageTask.distributedObjectDestroyed(com.hazelcast.core.DistributedObjectEvent)"], ["com.hazelcast.client.impl.protocol.task.PingMessageTask", "com.hazelcast.client.impl.protocol.task.PingMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.PingMessageTask.getServiceName()"], ["java.security.Permission", "com.hazelcast.client.impl.protocol.task.PingMessageTask.getRequiredPermission()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.PingMessageTask.getDistributedObjectName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.task.PingMessageTask.getMethodName()"], ["java.lang.Object[]", "com.hazelcast.client.impl.protocol.task.PingMessageTask.getParameters()"], ["com.hazelcast.client.impl.protocol.task.AbstractTransactionalMessageTask", "com.hazelcast.client.impl.protocol.task.AbstractTransactionalMessageTask(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.instance.Node, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$315.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$321.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$228.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$200.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$322.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$24.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$303.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$43.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$132.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$211.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$54.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$151.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$77.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$3.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$347.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$5.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$135.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$234.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$313.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$356.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$291.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$172.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$386.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$76.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$111.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$9.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$174.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$163.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$16.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$133.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$250.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$138.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$130.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$75.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$38.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$238.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$227.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$32.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$381.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$81.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$222.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$35.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$91.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$52.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$248.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$336.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$247.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$355.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$348.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$217.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$34.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$326.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$1.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$61.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$269.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$157.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$342.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$3.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$292.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$39.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$56.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$241.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$88.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$87.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$60.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$246.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$252.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$100.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$78.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$199.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$57.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$312.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$8.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$285.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$94.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$263.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$89.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$268.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$383.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$29.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$145.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$80.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$294.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$343.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$117.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$82.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$146.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$50.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$140.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$181.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$382.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$299.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$339.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$371.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$19.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$66.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$258.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$215.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$15.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$52.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$314.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$4.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$70.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$13.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$92.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$206.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$310.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$212.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$378.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$360.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$208.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$56.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$78.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$18.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$265.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$190.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$330.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$23.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$88.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$341.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$108.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$116.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$165.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$48.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$279.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$48.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$318.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$369.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$44.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$256.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$27.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$370.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$289.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$35.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$72.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$93.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$191.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$62.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$8.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$301.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$385.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$297.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$260.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$158.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$388.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$169.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$137.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$39.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$236.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$65.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$95.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$180.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$287.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$349.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$10.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$46.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$72.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$185.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$25.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$186.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$221.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$331.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$46.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$82.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$2.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$338.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$380.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$307.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$159.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$179.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$45.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$80.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$11.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$178.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$110.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$120.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$121.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$40.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$316.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$201.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$334.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$84.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$335.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$218.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$375.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$274.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$68.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$49.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$340.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$300.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$232.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$109.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$376.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$358.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$27.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$103.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$351.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$281.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$156.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$20.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$223.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$5.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$37.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$235.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$282.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$309.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$59.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$324.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$290.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$345.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$245.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$372.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$63.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$119.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$187.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$160.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$305.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$115.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$85.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$19.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$239.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$344.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$242.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$85.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$226.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$104.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$73.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$22.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$42.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$53.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$219.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$176.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$168.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$296.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$55.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$337.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$101.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$61.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$170.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$152.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$150.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$68.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$17.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$17.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$161.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$195.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$164.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$202.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.ClientExceptionFactory", "com.hazelcast.client.impl.protocol.ClientExceptionFactory(boolean)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory.createException(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientExceptionFactory.createExceptionMessage(java.lang.Throwable)"], ["void", "com.hazelcast.client.impl.protocol.ClientExceptionFactory.register(int, java.lang.Class, com.hazelcast.client.impl.protocol.ClientExceptionFactory$ExceptionFactory)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$249.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$153.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$193.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$134.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$7.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$148.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$57.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$275.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$373.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$253.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$233.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$40.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$79.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$20.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$69.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$272.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$58.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$379.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$366.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$86.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$1.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$59.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$123.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$298.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$79.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$21.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$216.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$280.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$67.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$266.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$354.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider.initFactories()"], ["com.hazelcast.client.impl.protocol.MessageTaskFactory[]", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider.getFactories()"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$26.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$377.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.util.SafeBuffer", "com.hazelcast.client.impl.protocol.util.SafeBuffer(byte[])"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putLong(int, long)"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putInt(int, int)"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putShort(int, short)"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putByte(int, byte)"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putBytes(int, byte[])"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putBytes(int, byte[], int, int)"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putBytes(int, java.nio.ByteBuffer, int)"], ["int", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putStringUtf8(int, java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.util.SafeBuffer.putStringUtf8(int, java.lang.String, int)"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.wrap(byte[])"], ["byte[]", "com.hazelcast.client.impl.protocol.util.SafeBuffer.byteArray()"], ["int", "com.hazelcast.client.impl.protocol.util.SafeBuffer.capacity()"], ["long", "com.hazelcast.client.impl.protocol.util.SafeBuffer.getLong(int)"], ["int", "com.hazelcast.client.impl.protocol.util.SafeBuffer.getInt(int)"], ["short", "com.hazelcast.client.impl.protocol.util.SafeBuffer.getShort(int)"], ["byte", "com.hazelcast.client.impl.protocol.util.SafeBuffer.getByte(int)"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.getBytes(int, byte[])"], ["void", "com.hazelcast.client.impl.protocol.util.SafeBuffer.getBytes(int, byte[], int, int)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.util.SafeBuffer.getStringUtf8(int, int)"], ["int", "com.hazelcast.client.impl.protocol.util.ParameterUtil.calculateDataSize(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.util.ParameterUtil.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.client.impl.protocol.util.ParameterUtil.calculateDataSize(java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["int", "com.hazelcast.client.impl.protocol.util.ParameterUtil.calculateDataSize(byte[])"], ["int", "com.hazelcast.client.impl.protocol.util.ParameterUtil.calculateDataSize(java.lang.Integer)"], ["int", "com.hazelcast.client.impl.protocol.util.ParameterUtil.calculateDataSize(java.lang.Boolean)"], ["int", "com.hazelcast.client.impl.protocol.util.ParameterUtil.calculateDataSize(java.lang.Long)"], ["com.hazelcast.client.impl.protocol.util.BufferBuilder", "com.hazelcast.client.impl.protocol.util.BufferBuilder()"], ["int", "com.hazelcast.client.impl.protocol.util.BufferBuilder.capacity()"], ["int", "com.hazelcast.client.impl.protocol.util.BufferBuilder.position()"], ["com.hazelcast.client.impl.protocol.util.ClientProtocolBuffer", "com.hazelcast.client.impl.protocol.util.BufferBuilder.buffer()"], ["com.hazelcast.client.impl.protocol.util.BufferBuilder", "com.hazelcast.client.impl.protocol.util.BufferBuilder.append(com.hazelcast.client.impl.protocol.util.ClientProtocolBuffer, int, int)"], ["com.hazelcast.client.impl.protocol.util.ClientProtocolBuffer", "com.hazelcast.client.impl.protocol.util.BufferBuilder.createBuffer(byte[])"], ["com.hazelcast.client.impl.protocol.util.ClientMessageDecoder", "com.hazelcast.client.impl.protocol.util.ClientMessageDecoder(com.hazelcast.nio.Connection, com.hazelcast.client.impl.protocol.util.ClientMessageHandler)"], ["void", "com.hazelcast.client.impl.protocol.util.ClientMessageDecoder.onRead(java.nio.ByteBuffer)"], ["com.hazelcast.client.impl.protocol.util.ClientMessageEncoder", "com.hazelcast.client.impl.protocol.util.ClientMessageEncoder()"], ["boolean", "com.hazelcast.client.impl.protocol.util.ClientMessageEncoder.onWrite(com.hazelcast.client.impl.protocol.ClientMessage, java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.client.impl.protocol.util.ClientMessageEncoder.onWrite(com.hazelcast.internal.networking.OutboundFrame, java.nio.ByteBuffer)"], ["com.hazelcast.client.impl.protocol.util.UnsafeBuffer", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer(byte[])"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.wrap(byte[])"], ["byte[]", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.byteArray()"], ["int", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.capacity()"], ["long", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.getLong(int)"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putLong(int, long)"], ["int", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.getInt(int)"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putInt(int, int)"], ["short", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.getShort(int)"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putShort(int, short)"], ["byte", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.getByte(int)"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putByte(int, byte)"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.getBytes(int, byte[])"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.getBytes(int, byte[], int, int)"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putBytes(int, byte[])"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putBytes(int, byte[], int, int)"], ["void", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putBytes(int, java.nio.ByteBuffer, int)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.getStringUtf8(int, int)"], ["int", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putStringUtf8(int, java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.util.UnsafeBuffer.putStringUtf8(int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight()"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.wrap(byte[], int, boolean)"], ["int", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.index()"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.index(int)"], ["com.hazelcast.client.impl.protocol.util.ClientProtocolBuffer", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.buffer()"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(boolean)"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(byte)"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(int)"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(long)"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(java.lang.String)"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(byte[])"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.util.MessageFlyweight", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.set(java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["boolean", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.getBoolean()"], ["byte", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.getByte()"], ["int", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.getInt()"], ["long", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.getLong()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.getStringUtf8()"], ["byte[]", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.getByteArray()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.client.impl.protocol.util.MessageFlyweight.getData()"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$149.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$16.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$54.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$352.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$359.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$328.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$353.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$102.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$107.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$83.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$26.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$63.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$329.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$251.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$60.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$243.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$25.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$197.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$225.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$66.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$136.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$306.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$175.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$320.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$23.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$171.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$58.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$262.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$129.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$36.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$325.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$311.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$327.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$4.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$162.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$74.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$213.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$196.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$198.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$367.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$71.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$33.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$323.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$65.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$31.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$333.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$141.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$255.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["short", "com.hazelcast.client.impl.protocol.ClientMessage.getVersion()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.setVersion(short)"], ["boolean", "com.hazelcast.client.impl.protocol.ClientMessage.isFlagSet(short)"], ["short", "com.hazelcast.client.impl.protocol.ClientMessage.getFlags()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.addFlag(short)"], ["int", "com.hazelcast.client.impl.protocol.ClientMessage.getMessageType()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.setMessageType(int)"], ["int", "com.hazelcast.client.impl.protocol.ClientMessage.getFrameLength()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.setFrameLength(int)"], ["long", "com.hazelcast.client.impl.protocol.ClientMessage.getCorrelationId()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.setCorrelationId(long)"], ["int", "com.hazelcast.client.impl.protocol.ClientMessage.getPartitionId()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.setPartitionId(int)"], ["int", "com.hazelcast.client.impl.protocol.ClientMessage.getDataOffset()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.setDataOffset(int)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.updateFrameLength()"], ["boolean", "com.hazelcast.client.impl.protocol.ClientMessage.writeTo(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.client.impl.protocol.ClientMessage.readFrom(java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.client.impl.protocol.ClientMessage.isComplete()"], ["boolean", "com.hazelcast.client.impl.protocol.ClientMessage.isUrgent()"], ["boolean", "com.hazelcast.client.impl.protocol.ClientMessage.isRetryable()"], ["boolean", "com.hazelcast.client.impl.protocol.ClientMessage.acquiresResource()"], ["void", "com.hazelcast.client.impl.protocol.ClientMessage.setAcquiresResource(boolean)"], ["void", "com.hazelcast.client.impl.protocol.ClientMessage.setRetryable(boolean)"], ["void", "com.hazelcast.client.impl.protocol.ClientMessage.setOperationName(java.lang.String)"], ["java.lang.String", "com.hazelcast.client.impl.protocol.ClientMessage.getOperationName()"], ["java.lang.String", "com.hazelcast.client.impl.protocol.ClientMessage.toString()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.create()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.createForEncode(int)"], ["int", "com.hazelcast.client.impl.protocol.ClientMessage.findSuitableMessageSize(int)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.createForEncode(com.hazelcast.client.impl.protocol.util.ClientProtocolBuffer, int)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.createForDecode(com.hazelcast.client.impl.protocol.util.ClientProtocolBuffer, int)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.ClientMessage.copy()"], ["int", "com.hazelcast.client.impl.protocol.ClientMessage.hashCode()"], ["boolean", "com.hazelcast.client.impl.protocol.ClientMessage.equals(java.lang.Object)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$254.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$105.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$304.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$182.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$204.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$45.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$64.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$167.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$184.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$106.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$113.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$75.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$273.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$257.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.exception.MaxMessageSizeExceeded", "com.hazelcast.client.impl.protocol.exception.MaxMessageSizeExceeded()"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$30.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$317.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$69.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$267.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$6.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$271.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$259.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$11.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$53.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$83.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$41.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$278.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$387.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$9.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$15.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$131.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$194.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$32.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$49.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$2.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$13.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$36.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$97.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$319.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$99.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$284.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$73.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$12.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$96.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$30.createException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$86.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$118.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$261.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$362.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$114.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$286.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$183.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$368.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$122.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$237.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$203.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$14.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$28.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$47.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$302.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$270.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$51.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$90.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$14.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$44.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$361.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$207.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$350.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$126.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$205.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$192.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$295.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$7.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["java.lang.Throwable", "com.hazelcast.client.impl.protocol.ClientExceptionFactory$24.createException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider$62.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.CollectRemoteTransactionsOperationSupplier", "com.hazelcast.client.impl.CollectRemoteTransactionsOperationSupplier()"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.CollectRemoteTransactionsOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.client.impl.CollectRemoteTransactionsOperationSupplier.get()"], ["com.hazelcast.client.impl.MemberImpl", "com.hazelcast.client.impl.MemberImpl()"], ["com.hazelcast.client.impl.MemberImpl", "com.hazelcast.client.impl.MemberImpl(com.hazelcast.nio.Address, com.hazelcast.version.MemberVersion)"], ["com.hazelcast.client.impl.MemberImpl", "com.hazelcast.client.impl.MemberImpl(com.hazelcast.nio.Address, com.hazelcast.version.MemberVersion, java.lang.String)"], ["com.hazelcast.client.impl.MemberImpl", "com.hazelcast.client.impl.MemberImpl(com.hazelcast.nio.Address, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, boolean)"], ["com.hazelcast.client.impl.MemberImpl", "com.hazelcast.client.impl.MemberImpl(com.hazelcast.nio.Address, com.hazelcast.version.MemberVersion, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, boolean)"], ["com.hazelcast.client.impl.MemberImpl", "com.hazelcast.client.impl.MemberImpl(com.hazelcast.instance.AbstractMember)"], ["boolean", "com.hazelcast.client.impl.MemberImpl.localMember()"], ["java.lang.String", "com.hazelcast.client.impl.MemberImpl.getStringAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.MemberImpl.setStringAttribute(java.lang.String, java.lang.String)"], ["java.lang.Boolean", "com.hazelcast.client.impl.MemberImpl.getBooleanAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.MemberImpl.setBooleanAttribute(java.lang.String, boolean)"], ["java.lang.Byte", "com.hazelcast.client.impl.MemberImpl.getByteAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.MemberImpl.setByteAttribute(java.lang.String, byte)"], ["java.lang.Short", "com.hazelcast.client.impl.MemberImpl.getShortAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.MemberImpl.setShortAttribute(java.lang.String, short)"], ["java.lang.Integer", "com.hazelcast.client.impl.MemberImpl.getIntAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.MemberImpl.setIntAttribute(java.lang.String, int)"], ["java.lang.Long", "com.hazelcast.client.impl.MemberImpl.getLongAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.MemberImpl.setLongAttribute(java.lang.String, long)"], ["java.lang.Float", "com.hazelcast.client.impl.MemberImpl.getFloatAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.MemberImpl.setFloatAttribute(java.lang.String, float)"], ["java.lang.Double", "com.hazelcast.client.impl.MemberImpl.getDoubleAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.MemberImpl.setDoubleAttribute(java.lang.String, double)"], ["void", "com.hazelcast.client.impl.MemberImpl.removeAttribute(java.lang.String)"], ["void", "com.hazelcast.client.impl.ClientPartitionListenerService.onPartitionStateChange()"], ["void", "com.hazelcast.client.impl.ClientPartitionListenerService.registerPartitionListener(com.hazelcast.client.ClientEndpoint, long)"], ["void", "com.hazelcast.client.impl.ClientPartitionListenerService.deregisterPartitionListener(com.hazelcast.client.ClientEndpoint)"], ["java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.Address, java.util.List<java.lang.Integer>>>", "com.hazelcast.client.impl.ClientPartitionListenerService.getPartitions(com.hazelcast.internal.partition.PartitionTableView)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl$ConnectionListenerImpl.connectionAdded(com.hazelcast.nio.Connection)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl$ConnectionListenerImpl.connectionRemoved(com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.client.ClientPrincipal", "com.hazelcast.client.impl.client.ClientPrincipal()"], ["com.hazelcast.client.impl.client.ClientPrincipal", "com.hazelcast.client.impl.client.ClientPrincipal(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.client.impl.client.ClientPrincipal.getUuid()"], ["java.lang.String", "com.hazelcast.client.impl.client.ClientPrincipal.getOwnerUuid()"], ["boolean", "com.hazelcast.client.impl.client.ClientPrincipal.equals(java.lang.Object)"], ["int", "com.hazelcast.client.impl.client.ClientPrincipal.hashCode()"], ["java.lang.String", "com.hazelcast.client.impl.client.ClientPrincipal.toString()"], ["com.hazelcast.client.impl.client.DistributedObjectInfo", "com.hazelcast.client.impl.client.DistributedObjectInfo()"], ["com.hazelcast.client.impl.client.DistributedObjectInfo", "com.hazelcast.client.impl.client.DistributedObjectInfo(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.client.impl.client.DistributedObjectInfo.getServiceName()"], ["java.lang.String", "com.hazelcast.client.impl.client.DistributedObjectInfo.getName()"], ["boolean", "com.hazelcast.client.impl.client.DistributedObjectInfo.equals(java.lang.Object)"], ["int", "com.hazelcast.client.impl.client.DistributedObjectInfo.hashCode()"], ["com.hazelcast.client.impl.ClientEndpointImpl", "com.hazelcast.client.impl.ClientEndpointImpl(com.hazelcast.client.impl.ClientEngineImpl, com.hazelcast.spi.impl.NodeEngineImpl, com.hazelcast.nio.Connection)"], ["com.hazelcast.nio.Connection", "com.hazelcast.client.impl.ClientEndpointImpl.getConnection()"], ["java.lang.String", "com.hazelcast.client.impl.ClientEndpointImpl.getUuid()"], ["boolean", "com.hazelcast.client.impl.ClientEndpointImpl.isAlive()"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.setLoginContext(javax.security.auth.login.LoginContext)"], ["javax.security.auth.Subject", "com.hazelcast.client.impl.ClientEndpointImpl.getSubject()"], ["boolean", "com.hazelcast.client.impl.ClientEndpointImpl.isOwnerConnection()"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.authenticated(com.hazelcast.client.impl.client.ClientPrincipal, com.hazelcast.security.Credentials, boolean, java.lang.String, long)"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.authenticated(com.hazelcast.client.impl.client.ClientPrincipal)"], ["boolean", "com.hazelcast.client.impl.ClientEndpointImpl.isAuthenticated()"], ["int", "com.hazelcast.client.impl.ClientEndpointImpl.getClientVersion()"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.setClientVersion(java.lang.String)"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.setClientStatistics(java.lang.String)"], ["java.lang.String", "com.hazelcast.client.impl.ClientEndpointImpl.getClientStatistics()"], ["java.net.InetSocketAddress", "com.hazelcast.client.impl.ClientEndpointImpl.getSocketAddress()"], ["com.hazelcast.core.ClientType", "com.hazelcast.client.impl.ClientEndpointImpl.getClientType()"], ["com.hazelcast.transaction.TransactionContext", "com.hazelcast.client.impl.ClientEndpointImpl.getTransactionContext(java.lang.String)"], ["com.hazelcast.security.Credentials", "com.hazelcast.client.impl.ClientEndpointImpl.getCredentials()"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.setTransactionContext(com.hazelcast.transaction.TransactionContext)"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.removeTransactionContext(java.lang.String)"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.addListenerDestroyAction(java.lang.String, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.addDestroyAction(java.lang.String, java.util.concurrent.Callable<java.lang.Boolean>)"], ["boolean", "com.hazelcast.client.impl.ClientEndpointImpl.removeDestroyAction(java.lang.String)"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.clearAllListeners()"], ["void", "com.hazelcast.client.impl.ClientEndpointImpl.destroy()"], ["java.lang.String", "com.hazelcast.client.impl.ClientEndpointImpl.toString()"], ["long", "com.hazelcast.client.impl.ClientEndpointImpl.getAuthenticationCorrelationId()"], ["java.net.SocketAddress", "com.hazelcast.client.impl.ClientEndpointImpl.getSocketAddress()"], ["void", "com.hazelcast.client.impl.ClientEngineImpl$ConnectionListenerImpl$1.run()"], ["com.hazelcast.client.impl.CompositeMessageTaskFactory", "com.hazelcast.client.impl.CompositeMessageTaskFactory(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.client.impl.protocol.task.MessageTask", "com.hazelcast.client.impl.CompositeMessageTaskFactory.create(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.client.impl.ClientHeartbeatMonitor", "com.hazelcast.client.impl.ClientHeartbeatMonitor(com.hazelcast.client.ClientEndpointManager, com.hazelcast.client.ClientEngine, com.hazelcast.spi.ExecutionService, com.hazelcast.spi.properties.HazelcastProperties)"], ["void", "com.hazelcast.client.impl.ClientHeartbeatMonitor.start()"], ["void", "com.hazelcast.client.impl.ClientHeartbeatMonitor.run()"], ["com.hazelcast.client.impl.AddInterceptorOperationSupplier", "com.hazelcast.client.impl.AddInterceptorOperationSupplier(java.lang.String, java.lang.String, com.hazelcast.map.MapInterceptor)"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.AddInterceptorOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.client.impl.AddInterceptorOperationSupplier.get()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.client.impl.ClientDataSerializerHook$1.create(int)"], ["com.hazelcast.client.impl.ClientEndpointManagerImpl", "com.hazelcast.client.impl.ClientEndpointManagerImpl(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.client.ClientEndpoint", "com.hazelcast.client.impl.ClientEndpointManagerImpl.getEndpoint(com.hazelcast.nio.Connection)"], ["boolean", "com.hazelcast.client.impl.ClientEndpointManagerImpl.registerEndpoint(com.hazelcast.client.ClientEndpoint)"], ["void", "com.hazelcast.client.impl.ClientEndpointManagerImpl.removeEndpoint(com.hazelcast.client.ClientEndpoint)"], ["void", "com.hazelcast.client.impl.ClientEndpointManagerImpl.clear()"], ["int", "com.hazelcast.client.impl.ClientEndpointManagerImpl.size()"], ["java.lang.Boolean", "com.hazelcast.client.impl.ClientEndpointImpl$1.call()"], ["java.lang.Object", "com.hazelcast.client.impl.ClientEndpointImpl$1.call()"], ["com.hazelcast.client.impl.ClientEngineImpl", "com.hazelcast.client.impl.ClientEngineImpl(com.hazelcast.instance.Node)"], ["java.util.concurrent.ExecutorService", "com.hazelcast.client.impl.ClientEngineImpl.getClientManagementExecutor()"], ["com.hazelcast.nio.ConnectionListener", "com.hazelcast.client.impl.ClientEngineImpl.getConnectionListener()"], ["com.hazelcast.spi.serialization.SerializationService", "com.hazelcast.client.impl.ClientEngineImpl.getSerializationService()"], ["int", "com.hazelcast.client.impl.ClientEngineImpl.getClientEndpointCount()"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.handle(com.hazelcast.client.impl.protocol.ClientMessage, com.hazelcast.nio.Connection)"], ["com.hazelcast.spi.partition.IPartitionService", "com.hazelcast.client.impl.ClientEngineImpl.getPartitionService()"], ["com.hazelcast.internal.cluster.ClusterService", "com.hazelcast.client.impl.ClientEngineImpl.getClusterService()"], ["com.hazelcast.spi.EventService", "com.hazelcast.client.impl.ClientEngineImpl.getEventService()"], ["com.hazelcast.spi.ProxyService", "com.hazelcast.client.impl.ClientEngineImpl.getProxyService()"], ["com.hazelcast.nio.Address", "com.hazelcast.client.impl.ClientEngineImpl.getMasterAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.client.impl.ClientEngineImpl.getThisAddress()"], ["java.lang.String", "com.hazelcast.client.impl.ClientEngineImpl.getThisUuid()"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.client.impl.ClientEngineImpl.getLocalMember()"], ["com.hazelcast.config.Config", "com.hazelcast.client.impl.ClientEngineImpl.getConfig()"], ["com.hazelcast.logging.ILogger", "com.hazelcast.client.impl.ClientEngineImpl.getLogger(java.lang.Class)"], ["com.hazelcast.client.ClientEndpointManager", "com.hazelcast.client.impl.ClientEngineImpl.getEndpointManager()"], ["com.hazelcast.client.impl.protocol.ClientExceptionFactory", "com.hazelcast.client.impl.ClientEngineImpl.getClientExceptionFactory()"], ["com.hazelcast.security.SecurityContext", "com.hazelcast.client.impl.ClientEngineImpl.getSecurityContext()"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.bind(com.hazelcast.client.ClientEndpoint)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.dispatchEvent(com.hazelcast.client.ClientEvent, com.hazelcast.core.ClientListener)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.memberAdded(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.memberRemoved(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.memberAttributeChanged(com.hazelcast.spi.MemberAttributeServiceEvent)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.reset()"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.shutdown(boolean)"], ["boolean", "com.hazelcast.client.impl.ClientEngineImpl.trySetLastAuthenticationCorrelationId(java.lang.String, long)"], ["java.lang.String", "com.hazelcast.client.impl.ClientEngineImpl.addOwnershipMapping(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.client.impl.ClientEngineImpl.removeOwnershipMapping(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.client.impl.ClientEngineImpl.getOwnerUuid(java.lang.String)"], ["com.hazelcast.transaction.TransactionManagerService", "com.hazelcast.client.impl.ClientEngineImpl.getTransactionManagerService()"], ["com.hazelcast.client.impl.ClientPartitionListenerService", "com.hazelcast.client.impl.ClientEngineImpl.getPartitionListenerService()"], ["com.hazelcast.spi.Operation", "com.hazelcast.client.impl.ClientEngineImpl.getPreJoinOperation()"], ["java.util.Map<com.hazelcast.core.ClientType, java.lang.Integer>", "com.hazelcast.client.impl.ClientEngineImpl.getConnectedClientStats()"], ["java.util.Map<java.lang.String, java.lang.String>", "com.hazelcast.client.impl.ClientEngineImpl.getClientStatistics()"], ["void", "com.hazelcast.client.impl.ClientEngineImpl.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.client.ClientEventType[]", "com.hazelcast.client.ClientEventType.values()"], ["com.hazelcast.client.ClientEventType", "com.hazelcast.client.ClientEventType.valueOf(java.lang.String)"], ["com.hazelcast.client.AuthenticationException", "com.hazelcast.client.AuthenticationException()"], ["com.hazelcast.client.AuthenticationException", "com.hazelcast.client.AuthenticationException(java.lang.String)"], ["com.hazelcast.client.UndefinedErrorCodeException", "com.hazelcast.client.UndefinedErrorCodeException(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.client.UndefinedErrorCodeException.getOriginClassName()"], ["com.hazelcast.client.ClientEvent", "com.hazelcast.client.ClientEvent(java.lang.String, com.hazelcast.client.ClientEventType, java.net.InetSocketAddress, com.hazelcast.core.ClientType)"], ["java.lang.String", "com.hazelcast.client.ClientEvent.getUuid()"], ["java.net.InetSocketAddress", "com.hazelcast.client.ClientEvent.getSocketAddress()"], ["com.hazelcast.core.ClientType", "com.hazelcast.client.ClientEvent.getClientType()"], ["com.hazelcast.client.ClientEventType", "com.hazelcast.client.ClientEvent.getEventType()"], ["java.lang.String", "com.hazelcast.client.ClientEvent.toString()"], ["java.net.SocketAddress", "com.hazelcast.client.ClientEvent.getSocketAddress()"], ["<T> java.util.Collection<T>", "com.hazelcast.multimap.impl.ValueCollectionFactory.createCollection(com.hazelcast.config.MultiMapConfig$ValueCollectionType)"], ["<T> java.util.Collection<T>", "com.hazelcast.multimap.impl.ValueCollectionFactory.createCollection(java.util.Collection)"], ["<T> java.util.Collection<T>", "com.hazelcast.multimap.impl.ValueCollectionFactory.createCollection(com.hazelcast.config.MultiMapConfig$ValueCollectionType, int)"], ["<T> java.util.Collection<T>", "com.hazelcast.multimap.impl.ValueCollectionFactory.emptyCollection(com.hazelcast.config.MultiMapConfig$ValueCollectionType)"], ["int", "com.hazelcast.multimap.impl.MultiMapService$3$1.getBackupCount()"], ["int", "com.hazelcast.multimap.impl.MultiMapService$3$1.getAsyncBackupCount()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.ObjectMultiMapProxy", "com.hazelcast.multimap.impl.ObjectMultiMapProxy(com.hazelcast.config.MultiMapConfig, com.hazelcast.multimap.impl.MultiMapService, com.hazelcast.spi.NodeEngine, java.lang.String)"], ["void", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.initialize()"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.put(K, V)"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.remove(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.delete(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.entrySet()"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.containsKey(K)"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.containsValue(java.lang.Object)"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.containsEntry(K, V)"], ["int", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.valueCount(K)"], ["java.lang.String", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.addLocalEntryListener(com.hazelcast.core.EntryListener<K, V>)"], ["java.lang.String", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.addEntryListener(com.hazelcast.core.EntryListener<K, V>, boolean)"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.removeEntryListener(java.lang.String)"], ["java.lang.String", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.addEntryListener(com.hazelcast.core.EntryListener<K, V>, K, boolean)"], ["void", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.lock(K)"], ["void", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.lock(K, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.isLocked(K)"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.tryLock(K)"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.tryLock(K, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.tryLock(K, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.unlock(K)"], ["void", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.forceUnlock(K)"], ["com.hazelcast.monitor.LocalMultiMapStats", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.getLocalMultiMapStats()"], ["<SuppliedValue, Result> Result", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.aggregate(com.hazelcast.mapreduce.aggregation.Supplier<K, V, SuppliedValue>, com.hazelcast.mapreduce.aggregation.Aggregation<K, SuppliedValue, Result>)"], ["<SuppliedValue, Result> Result", "com.hazelcast.multimap.impl.ObjectMultiMapProxy.aggregate(com.hazelcast.mapreduce.aggregation.Supplier<K, V, SuppliedValue>, com.hazelcast.mapreduce.aggregation.Aggregation<K, SuppliedValue, Result>, com.hazelcast.mapreduce.JobTracker)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$26.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$33.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$33.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$30.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.operations.EntrySetOperation", "com.hazelcast.multimap.impl.operations.EntrySetOperation()"], ["com.hazelcast.multimap.impl.operations.EntrySetOperation", "com.hazelcast.multimap.impl.operations.EntrySetOperation(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.operations.EntrySetOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.EntrySetOperation.getId()"], ["com.hazelcast.multimap.impl.operations.EntrySetResponse", "com.hazelcast.multimap.impl.operations.EntrySetResponse()"], ["com.hazelcast.multimap.impl.operations.EntrySetResponse", "com.hazelcast.multimap.impl.operations.EntrySetResponse(java.util.Map<com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.multimap.impl.MultiMapRecord>>, com.hazelcast.spi.NodeEngine)"], ["java.util.Set<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>", "com.hazelcast.multimap.impl.operations.EntrySetResponse.getDataEntrySet()"], ["<K, V> java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.multimap.impl.operations.EntrySetResponse.getObjectEntrySet(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.multimap.impl.operations.EntrySetResponse.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.multimap.impl.operations.EntrySetResponse.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.multimap.impl.operations.EntrySetResponse.getFactoryId()"], ["int", "com.hazelcast.multimap.impl.operations.EntrySetResponse.getId()"], ["com.hazelcast.multimap.impl.operations.PutOperation", "com.hazelcast.multimap.impl.operations.PutOperation()"], ["com.hazelcast.multimap.impl.operations.PutOperation", "com.hazelcast.multimap.impl.operations.PutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, com.hazelcast.nio.serialization.Data, int)"], ["void", "com.hazelcast.multimap.impl.operations.PutOperation.run()"], ["void", "com.hazelcast.multimap.impl.operations.PutOperation.afterRun()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.operations.PutOperation.getBackupOperation()"], ["boolean", "com.hazelcast.multimap.impl.operations.PutOperation.shouldBackup()"], ["void", "com.hazelcast.multimap.impl.operations.PutOperation.onWaitExpire()"], ["int", "com.hazelcast.multimap.impl.operations.PutOperation.getId()"], ["com.hazelcast.multimap.impl.operations.MergeBackupOperation", "com.hazelcast.multimap.impl.operations.MergeBackupOperation()"], ["void", "com.hazelcast.multimap.impl.operations.MergeBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.MergeBackupOperation.getId()"], ["com.hazelcast.multimap.impl.operations.DeleteBackupOperation", "com.hazelcast.multimap.impl.operations.DeleteBackupOperation()"], ["com.hazelcast.multimap.impl.operations.DeleteBackupOperation", "com.hazelcast.multimap.impl.operations.DeleteBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.operations.DeleteBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.DeleteBackupOperation.getId()"], ["com.hazelcast.multimap.impl.operations.MultiMapReplicationOperation", "com.hazelcast.multimap.impl.operations.MultiMapReplicationOperation()"], ["com.hazelcast.multimap.impl.operations.MultiMapReplicationOperation", "com.hazelcast.multimap.impl.operations.MultiMapReplicationOperation(java.util.Map<java.lang.String, java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.multimap.impl.MultiMapValue>>)"], ["void", "com.hazelcast.multimap.impl.operations.MultiMapReplicationOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.MultiMapReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.multimap.impl.operations.MultiMapReplicationOperation.getId()"], ["void", "com.hazelcast.multimap.impl.operations.AbstractKeyBasedMultiMapOperation.setThreadId(long)"], ["com.hazelcast.multimap.impl.operations.ContainsEntryOperation", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation()"], ["com.hazelcast.multimap.impl.operations.ContainsEntryOperation", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.multimap.impl.operations.ContainsEntryOperation", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation.run()"], ["long", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation.getThreadId()"], ["void", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation.setThreadId(long)"], ["int", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation.getId()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation.getWaitKey()"], ["boolean", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation.shouldWait()"], ["void", "com.hazelcast.multimap.impl.operations.ContainsEntryOperation.onWaitExpire()"], ["com.hazelcast.multimap.impl.operations.ClearOperation", "com.hazelcast.multimap.impl.operations.ClearOperation()"], ["com.hazelcast.multimap.impl.operations.ClearOperation", "com.hazelcast.multimap.impl.operations.ClearOperation(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.operations.ClearOperation.beforeRun()"], ["void", "com.hazelcast.multimap.impl.operations.ClearOperation.run()"], ["void", "com.hazelcast.multimap.impl.operations.ClearOperation.afterRun()"], ["boolean", "com.hazelcast.multimap.impl.operations.ClearOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.operations.ClearOperation.getBackupOperation()"], ["int", "com.hazelcast.multimap.impl.operations.ClearOperation.getId()"], ["com.hazelcast.multimap.impl.operations.MergeOperation", "com.hazelcast.multimap.impl.operations.MergeOperation()"], ["com.hazelcast.multimap.impl.operations.MergeOperation", "com.hazelcast.multimap.impl.operations.MergeOperation(java.lang.String, java.util.List<com.hazelcast.multimap.impl.MultiMapMergeContainer>, com.hazelcast.spi.merge.SplitBrainMergePolicy<java.util.Collection<java.lang.Object>, com.hazelcast.spi.merge.SplitBrainMergeTypes$MultiMapMergeTypes>)"], ["void", "com.hazelcast.multimap.impl.operations.MergeOperation.run()"], ["boolean", "com.hazelcast.multimap.impl.operations.MergeOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.operations.MergeOperation.getBackupOperation()"], ["int", "com.hazelcast.multimap.impl.operations.MergeOperation.getId()"], ["com.hazelcast.multimap.impl.operations.GetAllOperation", "com.hazelcast.multimap.impl.operations.GetAllOperation()"], ["com.hazelcast.multimap.impl.operations.GetAllOperation", "com.hazelcast.multimap.impl.operations.GetAllOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.operations.GetAllOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.GetAllOperation.getId()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.multimap.impl.operations.GetAllOperation.getWaitKey()"], ["boolean", "com.hazelcast.multimap.impl.operations.GetAllOperation.shouldWait()"], ["void", "com.hazelcast.multimap.impl.operations.GetAllOperation.onWaitExpire()"], ["com.hazelcast.multimap.impl.operations.CountOperation", "com.hazelcast.multimap.impl.operations.CountOperation()"], ["com.hazelcast.multimap.impl.operations.CountOperation", "com.hazelcast.multimap.impl.operations.CountOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.operations.CountOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.CountOperation.getId()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.multimap.impl.operations.CountOperation.getWaitKey()"], ["boolean", "com.hazelcast.multimap.impl.operations.CountOperation.shouldWait()"], ["void", "com.hazelcast.multimap.impl.operations.CountOperation.onWaitExpire()"], ["com.hazelcast.multimap.impl.operations.RemoveAllBackupOperation", "com.hazelcast.multimap.impl.operations.RemoveAllBackupOperation()"], ["com.hazelcast.multimap.impl.operations.RemoveAllBackupOperation", "com.hazelcast.multimap.impl.operations.RemoveAllBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.operations.RemoveAllBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.RemoveAllBackupOperation.getId()"], ["com.hazelcast.multimap.impl.operations.MultiMapResponse", "com.hazelcast.multimap.impl.operations.MultiMapResponse()"], ["com.hazelcast.multimap.impl.operations.MultiMapResponse", "com.hazelcast.multimap.impl.operations.MultiMapResponse(java.util.Collection, com.hazelcast.config.MultiMapConfig$ValueCollectionType)"], ["long", "com.hazelcast.multimap.impl.operations.MultiMapResponse.getNextRecordId()"], ["com.hazelcast.multimap.impl.operations.MultiMapResponse", "com.hazelcast.multimap.impl.operations.MultiMapResponse.setNextRecordId(long)"], ["java.util.Collection", "com.hazelcast.multimap.impl.operations.MultiMapResponse.getCollection()"], ["java.util.Collection", "com.hazelcast.multimap.impl.operations.MultiMapResponse.getObjectCollection(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.multimap.impl.operations.MultiMapResponse.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.multimap.impl.operations.MultiMapResponse.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.multimap.impl.operations.MultiMapResponse.getFactoryId()"], ["int", "com.hazelcast.multimap.impl.operations.MultiMapResponse.getId()"], ["com.hazelcast.multimap.impl.operations.PutBackupOperation", "com.hazelcast.multimap.impl.operations.PutBackupOperation()"], ["com.hazelcast.multimap.impl.operations.PutBackupOperation", "com.hazelcast.multimap.impl.operations.PutBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, int)"], ["void", "com.hazelcast.multimap.impl.operations.PutBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.PutBackupOperation.getId()"], ["com.hazelcast.multimap.impl.operations.RemoveOperation", "com.hazelcast.multimap.impl.operations.RemoveOperation()"], ["com.hazelcast.multimap.impl.operations.RemoveOperation", "com.hazelcast.multimap.impl.operations.RemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.operations.RemoveOperation.run()"], ["void", "com.hazelcast.multimap.impl.operations.RemoveOperation.afterRun()"], ["boolean", "com.hazelcast.multimap.impl.operations.RemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.operations.RemoveOperation.getBackupOperation()"], ["void", "com.hazelcast.multimap.impl.operations.RemoveOperation.onWaitExpire()"], ["int", "com.hazelcast.multimap.impl.operations.RemoveOperation.getId()"], ["com.hazelcast.multimap.impl.operations.DeleteOperation", "com.hazelcast.multimap.impl.operations.DeleteOperation()"], ["com.hazelcast.multimap.impl.operations.DeleteOperation", "com.hazelcast.multimap.impl.operations.DeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.multimap.impl.operations.DeleteOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.operations.DeleteOperation.getBackupOperation()"], ["boolean", "com.hazelcast.multimap.impl.operations.DeleteOperation.shouldWait()"], ["boolean", "com.hazelcast.multimap.impl.operations.DeleteOperation.shouldBackup()"], ["void", "com.hazelcast.multimap.impl.operations.DeleteOperation.onWaitExpire()"], ["int", "com.hazelcast.multimap.impl.operations.DeleteOperation.getId()"], ["java.lang.Object", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getResponse()"], ["java.lang.String", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getServiceName()"], ["java.lang.String", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getName()"], ["void", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.publishEvent(com.hazelcast.core.EntryEventType, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.toObject(java.lang.Object)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.toData(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getOrCreateContainer()"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getOrCreateContainerWithoutAccess()"], ["com.hazelcast.config.MultiMapConfig$ValueCollectionType", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getValueCollectionType(com.hazelcast.multimap.impl.MultiMapContainer)"], ["boolean", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.isBinary()"], ["int", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getSyncBackupCount()"], ["int", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getServiceNamespace()"], ["int", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getFactoryId()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.multimap.impl.operations.AbstractMultiMapOperation.getServiceNamespace()"], ["com.hazelcast.multimap.impl.operations.SizeOperation", "com.hazelcast.multimap.impl.operations.SizeOperation()"], ["com.hazelcast.multimap.impl.operations.SizeOperation", "com.hazelcast.multimap.impl.operations.SizeOperation(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.operations.SizeOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.SizeOperation.getId()"], ["com.hazelcast.multimap.impl.operations.MultiMapOperationFactory$OperationFactoryType[]", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory$OperationFactoryType.values()"], ["com.hazelcast.multimap.impl.operations.MultiMapOperationFactory$OperationFactoryType", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory$OperationFactoryType.valueOf(java.lang.String)"], ["com.hazelcast.multimap.impl.operations.KeySetOperation", "com.hazelcast.multimap.impl.operations.KeySetOperation()"], ["com.hazelcast.multimap.impl.operations.KeySetOperation", "com.hazelcast.multimap.impl.operations.KeySetOperation(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.operations.KeySetOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.KeySetOperation.getId()"], ["com.hazelcast.multimap.impl.operations.MultiMapOperationFactory", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory()"], ["com.hazelcast.multimap.impl.operations.MultiMapOperationFactory", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory(java.lang.String, com.hazelcast.multimap.impl.operations.MultiMapOperationFactory$OperationFactoryType)"], ["com.hazelcast.multimap.impl.operations.MultiMapOperationFactory", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory(java.lang.String, com.hazelcast.multimap.impl.operations.MultiMapOperationFactory$OperationFactoryType, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.multimap.impl.operations.MultiMapOperationFactory", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory(java.lang.String, com.hazelcast.multimap.impl.operations.MultiMapOperationFactory$OperationFactoryType, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.createOperation()"], ["void", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.getFactoryId()"], ["int", "com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.getId()"], ["com.hazelcast.multimap.impl.operations.RemoveBackupOperation", "com.hazelcast.multimap.impl.operations.RemoveBackupOperation()"], ["com.hazelcast.multimap.impl.operations.RemoveBackupOperation", "com.hazelcast.multimap.impl.operations.RemoveBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.multimap.impl.operations.RemoveBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.RemoveBackupOperation.getId()"], ["boolean", "com.hazelcast.multimap.impl.operations.AbstractBackupAwareMultiMapOperation.shouldBackup()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.multimap.impl.operations.AbstractBackupAwareMultiMapOperation.getWaitKey()"], ["boolean", "com.hazelcast.multimap.impl.operations.AbstractBackupAwareMultiMapOperation.shouldWait()"], ["void", "com.hazelcast.multimap.impl.operations.AbstractBackupAwareMultiMapOperation.onWaitExpire()"], ["com.hazelcast.multimap.impl.operations.RemoveAllOperation", "com.hazelcast.multimap.impl.operations.RemoveAllOperation()"], ["com.hazelcast.multimap.impl.operations.RemoveAllOperation", "com.hazelcast.multimap.impl.operations.RemoveAllOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.multimap.impl.operations.RemoveAllOperation.run()"], ["void", "com.hazelcast.multimap.impl.operations.RemoveAllOperation.afterRun()"], ["boolean", "com.hazelcast.multimap.impl.operations.RemoveAllOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.operations.RemoveAllOperation.getBackupOperation()"], ["void", "com.hazelcast.multimap.impl.operations.RemoveAllOperation.onWaitExpire()"], ["int", "com.hazelcast.multimap.impl.operations.RemoveAllOperation.getId()"], ["com.hazelcast.multimap.impl.operations.ClearBackupOperation", "com.hazelcast.multimap.impl.operations.ClearBackupOperation()"], ["com.hazelcast.multimap.impl.operations.ClearBackupOperation", "com.hazelcast.multimap.impl.operations.ClearBackupOperation(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.operations.ClearBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.ClearBackupOperation.getId()"], ["com.hazelcast.multimap.impl.operations.ValuesOperation", "com.hazelcast.multimap.impl.operations.ValuesOperation()"], ["com.hazelcast.multimap.impl.operations.ValuesOperation", "com.hazelcast.multimap.impl.operations.ValuesOperation(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.operations.ValuesOperation.run()"], ["int", "com.hazelcast.multimap.impl.operations.ValuesOperation.getId()"], ["com.hazelcast.monitor.impl.LocalMultiMapStatsImpl", "com.hazelcast.multimap.impl.MultiMapService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapService$1.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.MultiMapPartitionContainer$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapPartitionContainer$1.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapEventFilter", "com.hazelcast.multimap.impl.MultiMapEventFilter()"], ["com.hazelcast.multimap.impl.MultiMapEventFilter", "com.hazelcast.multimap.impl.MultiMapEventFilter(boolean, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapEventFilter.isIncludeValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.multimap.impl.MultiMapEventFilter.getKey()"], ["void", "com.hazelcast.multimap.impl.MultiMapEventFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.multimap.impl.MultiMapEventFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapEventFilter.eval(java.lang.Object)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapEventFilter.equals(java.lang.Object)"], ["int", "com.hazelcast.multimap.impl.MultiMapEventFilter.hashCode()"], ["int", "com.hazelcast.multimap.impl.MultiMapEventFilter.getFactoryId()"], ["int", "com.hazelcast.multimap.impl.MultiMapEventFilter.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$34.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$34.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapService", "com.hazelcast.multimap.impl.MultiMapService(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.reset()"], ["void", "com.hazelcast.multimap.impl.MultiMapService.shutdown(boolean)"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.MultiMapService.getOrCreateCollectionContainer(int, java.lang.String)"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.MultiMapService.getOrCreateCollectionContainerWithoutAccess(int, java.lang.String)"], ["com.hazelcast.multimap.impl.MultiMapPartitionContainer", "com.hazelcast.multimap.impl.MultiMapService.getPartitionContainer(int)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.multimap.impl.MultiMapService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.spi.serialization.SerializationService", "com.hazelcast.multimap.impl.MultiMapService.getSerializationService()"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.multimap.impl.MultiMapService.getNodeEngine()"], ["void", "com.hazelcast.multimap.impl.MultiMapService.publishMultiMapEvent(java.lang.String, com.hazelcast.core.EntryEventType, int)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.publishEntryEvent(java.lang.String, com.hazelcast.core.EntryEventType, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.hazelcast.multimap.impl.MultiMapService.addListener(java.lang.String, java.util.EventListener, com.hazelcast.nio.serialization.Data, boolean, boolean)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapService.removeListener(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapService.isKnownServiceNamespace(com.hazelcast.spi.ServiceNamespace)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.MultiMapService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.MultiMapService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent, java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.insertMigratedData(int, java.util.Map<java.lang.String, java.util.Map<com.hazelcast.nio.serialization.Data, com.hazelcast.multimap.impl.MultiMapValue>>)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.monitor.LocalMultiMapStats", "com.hazelcast.multimap.impl.MultiMapService.createStats(java.lang.String)"], ["com.hazelcast.monitor.impl.LocalMultiMapStatsImpl", "com.hazelcast.multimap.impl.MultiMapService.getLocalMultiMapStatsImpl(java.lang.String)"], ["<T extends com.hazelcast.transaction.TransactionalObject> T", "com.hazelcast.multimap.impl.MultiMapService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.rollbackTransaction(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.dispatchEvent(com.hazelcast.map.impl.event.EventData, com.hazelcast.core.EntryListener)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalMultiMapStats>", "com.hazelcast.multimap.impl.MultiMapService.getStats()"], ["java.lang.String", "com.hazelcast.multimap.impl.MultiMapService.getQuorumName(java.lang.String)"], ["void", "com.hazelcast.multimap.impl.MultiMapService.ensureQuorumPresent(java.lang.String, com.hazelcast.quorum.QuorumType)"], ["java.lang.Runnable", "com.hazelcast.multimap.impl.MultiMapService.prepareMergeRunnable()"], ["void", "com.hazelcast.multimap.impl.MultiMapService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$37.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$37.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$32.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$32.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapMergeContainer", "com.hazelcast.multimap.impl.MultiMapMergeContainer()"], ["com.hazelcast.multimap.impl.MultiMapMergeContainer", "com.hazelcast.multimap.impl.MultiMapMergeContainer(com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.multimap.impl.MultiMapRecord>, long, long, long, long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.multimap.impl.MultiMapMergeContainer.getKey()"], ["long", "com.hazelcast.multimap.impl.MultiMapMergeContainer.getCreationTime()"], ["long", "com.hazelcast.multimap.impl.MultiMapMergeContainer.getLastAccessTime()"], ["long", "com.hazelcast.multimap.impl.MultiMapMergeContainer.getLastUpdateTime()"], ["long", "com.hazelcast.multimap.impl.MultiMapMergeContainer.getHits()"], ["int", "com.hazelcast.multimap.impl.MultiMapMergeContainer.getFactoryId()"], ["int", "com.hazelcast.multimap.impl.MultiMapMergeContainer.getId()"], ["void", "com.hazelcast.multimap.impl.MultiMapMergeContainer.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.multimap.impl.MultiMapMergeContainer.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.concurrent.lock.LockStoreInfo", "com.hazelcast.multimap.impl.MultiMapService$3.createNew(com.hazelcast.spi.ObjectNamespace)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapService$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$23.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$39.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$39.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapRecord", "com.hazelcast.multimap.impl.MultiMapRecord()"], ["com.hazelcast.multimap.impl.MultiMapRecord", "com.hazelcast.multimap.impl.MultiMapRecord(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapRecord", "com.hazelcast.multimap.impl.MultiMapRecord(long, java.lang.Object)"], ["long", "com.hazelcast.multimap.impl.MultiMapRecord.getRecordId()"], ["void", "com.hazelcast.multimap.impl.MultiMapRecord.setRecordId(long)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapRecord.getObject()"], ["void", "com.hazelcast.multimap.impl.MultiMapRecord.setObject(java.lang.Object)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapRecord.equals(java.lang.Object)"], ["int", "com.hazelcast.multimap.impl.MultiMapRecord.hashCode()"], ["void", "com.hazelcast.multimap.impl.MultiMapRecord.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.multimap.impl.MultiMapRecord.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.multimap.impl.MultiMapRecord.getFactoryId()"], ["int", "com.hazelcast.multimap.impl.MultiMapRecord.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$40.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$40.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$36.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$36.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapService$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$35.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$35.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$41.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$41.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapDataSerializerHook", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook()"], ["int", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$29.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.txn.TxnGenerateRecordIdOperation", "com.hazelcast.multimap.impl.txn.TxnGenerateRecordIdOperation()"], ["com.hazelcast.multimap.impl.txn.TxnGenerateRecordIdOperation", "com.hazelcast.multimap.impl.txn.TxnGenerateRecordIdOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.txn.TxnGenerateRecordIdOperation.run()"], ["int", "com.hazelcast.multimap.impl.txn.TxnGenerateRecordIdOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxy", "com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxy(com.hazelcast.spi.NodeEngine, com.hazelcast.multimap.impl.MultiMapService, java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["boolean", "com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxy.put(K, V)"], ["boolean", "com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxy.remove(java.lang.Object, java.lang.Object)"], ["int", "com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxy.valueCount(K)"], ["java.lang.String", "com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxy.toString()"], ["com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation", "com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation()"], ["com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation", "com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation(java.lang.String, com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.multimap.impl.MultiMapRecord>)"], ["void", "com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation.run()"], ["void", "com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation.afterRun()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation.getBackupOperation()"], ["int", "com.hazelcast.multimap.impl.txn.TxnRemoveAllOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnRemoveAllBackupOperation", "com.hazelcast.multimap.impl.txn.TxnRemoveAllBackupOperation()"], ["com.hazelcast.multimap.impl.txn.TxnRemoveAllBackupOperation", "com.hazelcast.multimap.impl.txn.TxnRemoveAllBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, java.util.Collection<java.lang.Long>)"], ["void", "com.hazelcast.multimap.impl.txn.TxnRemoveAllBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.txn.TxnRemoveAllBackupOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnCommitOperation", "com.hazelcast.multimap.impl.txn.TxnCommitOperation()"], ["com.hazelcast.multimap.impl.txn.TxnCommitOperation", "com.hazelcast.multimap.impl.txn.TxnCommitOperation(int, java.lang.String, com.hazelcast.nio.serialization.Data, long, java.util.List<com.hazelcast.spi.Operation>)"], ["void", "com.hazelcast.multimap.impl.txn.TxnCommitOperation.run()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnCommitOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.TxnCommitOperation.getBackupOperation()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnCommitOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.multimap.impl.txn.TxnCommitOperation.getNotifiedKey()"], ["int", "com.hazelcast.multimap.impl.txn.TxnCommitOperation.getId()"], ["com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord()"], ["com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord(int, com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.newPrepareOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.newCommitOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.newRollbackOperation()"], ["void", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.getKey()"], ["void", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.addOperation(com.hazelcast.spi.Operation)"], ["int", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.size()"], ["java.lang.String", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.toString()"], ["int", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.getFactoryId()"], ["int", "com.hazelcast.multimap.impl.txn.MultiMapTransactionLogRecord.getId()"], ["com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation", "com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation()"], ["com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation", "com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long, boolean)"], ["void", "com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation.run()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation.getWaitKey()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation.shouldWait()"], ["void", "com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation.onWaitExpire()"], ["int", "com.hazelcast.multimap.impl.txn.TxnLockAndGetOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnRollbackBackupOperation", "com.hazelcast.multimap.impl.txn.TxnRollbackBackupOperation()"], ["com.hazelcast.multimap.impl.txn.TxnRollbackBackupOperation", "com.hazelcast.multimap.impl.txn.TxnRollbackBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, java.lang.String, long)"], ["void", "com.hazelcast.multimap.impl.txn.TxnRollbackBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.txn.TxnRollbackBackupOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnCommitBackupOperation", "com.hazelcast.multimap.impl.txn.TxnCommitBackupOperation()"], ["com.hazelcast.multimap.impl.txn.TxnCommitBackupOperation", "com.hazelcast.multimap.impl.txn.TxnCommitBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, java.util.List<com.hazelcast.spi.Operation>, java.lang.String, long)"], ["void", "com.hazelcast.multimap.impl.txn.TxnCommitBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.txn.TxnCommitBackupOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnRemoveOperation", "com.hazelcast.multimap.impl.txn.TxnRemoveOperation()"], ["com.hazelcast.multimap.impl.txn.TxnRemoveOperation", "com.hazelcast.multimap.impl.txn.TxnRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.txn.TxnRemoveOperation.run()"], ["void", "com.hazelcast.multimap.impl.txn.TxnRemoveOperation.afterRun()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnRemoveOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.TxnRemoveOperation.getBackupOperation()"], ["long", "com.hazelcast.multimap.impl.txn.TxnRemoveOperation.getRecordId()"], ["int", "com.hazelcast.multimap.impl.txn.TxnRemoveOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnRemoveBackupOperation", "com.hazelcast.multimap.impl.txn.TxnRemoveBackupOperation()"], ["com.hazelcast.multimap.impl.txn.TxnRemoveBackupOperation", "com.hazelcast.multimap.impl.txn.TxnRemoveBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.txn.TxnRemoveBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.txn.TxnRemoveBackupOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnPrepareBackupOperation", "com.hazelcast.multimap.impl.txn.TxnPrepareBackupOperation()"], ["com.hazelcast.multimap.impl.txn.TxnPrepareBackupOperation", "com.hazelcast.multimap.impl.txn.TxnPrepareBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, java.lang.String)"], ["void", "com.hazelcast.multimap.impl.txn.TxnPrepareBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.txn.TxnPrepareBackupOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnPutOperation", "com.hazelcast.multimap.impl.txn.TxnPutOperation()"], ["com.hazelcast.multimap.impl.txn.TxnPutOperation", "com.hazelcast.multimap.impl.txn.TxnPutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.multimap.impl.txn.TxnPutOperation.run()"], ["void", "com.hazelcast.multimap.impl.txn.TxnPutOperation.afterRun()"], ["long", "com.hazelcast.multimap.impl.txn.TxnPutOperation.getRecordId()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnPutOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.TxnPutOperation.getBackupOperation()"], ["int", "com.hazelcast.multimap.impl.txn.TxnPutOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnRollbackOperation", "com.hazelcast.multimap.impl.txn.TxnRollbackOperation()"], ["com.hazelcast.multimap.impl.txn.TxnRollbackOperation", "com.hazelcast.multimap.impl.txn.TxnRollbackOperation(int, java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.multimap.impl.txn.TxnRollbackOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.TxnRollbackOperation.getBackupOperation()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnRollbackOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.multimap.impl.txn.TxnRollbackOperation.getNotifiedKey()"], ["int", "com.hazelcast.multimap.impl.txn.TxnRollbackOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TransactionRecordKey", "com.hazelcast.multimap.impl.txn.TransactionRecordKey(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.multimap.impl.txn.TransactionRecordKey.equals(java.lang.Object)"], ["int", "com.hazelcast.multimap.impl.txn.TransactionRecordKey.hashCode()"], ["com.hazelcast.multimap.impl.txn.TxnPutBackupOperation", "com.hazelcast.multimap.impl.txn.TxnPutBackupOperation()"], ["com.hazelcast.multimap.impl.txn.TxnPutBackupOperation", "com.hazelcast.multimap.impl.txn.TxnPutBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.multimap.impl.txn.TxnPutBackupOperation.run()"], ["int", "com.hazelcast.multimap.impl.txn.TxnPutBackupOperation.getId()"], ["com.hazelcast.multimap.impl.txn.TxnPrepareOperation", "com.hazelcast.multimap.impl.txn.TxnPrepareOperation()"], ["com.hazelcast.multimap.impl.txn.TxnPrepareOperation", "com.hazelcast.multimap.impl.txn.TxnPrepareOperation(int, java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.multimap.impl.txn.TxnPrepareOperation.run()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnPrepareOperation.shouldBackup()"], ["boolean", "com.hazelcast.multimap.impl.txn.TxnPrepareOperation.shouldWait()"], ["com.hazelcast.spi.Operation", "com.hazelcast.multimap.impl.txn.TxnPrepareOperation.getBackupOperation()"], ["int", "com.hazelcast.multimap.impl.txn.TxnPrepareOperation.getId()"], ["java.lang.String", "com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxySupport.getName()"], ["java.lang.String", "com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxySupport.getServiceName()"], ["int", "com.hazelcast.multimap.impl.txn.TransactionalMultiMapProxySupport.size()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$12.createNew(java.lang.Object)"], ["void", "com.hazelcast.multimap.impl.MultiMapEventsDispatcher.dispatchEvent(com.hazelcast.map.impl.event.EventData, com.hazelcast.core.EntryListener)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$38.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$38.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.MultiMapPartitionContainer.getOrCreateMultiMapContainer(java.lang.String)"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.MultiMapPartitionContainer.getOrCreateMultiMapContainer(java.lang.String, boolean)"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.MultiMapPartitionContainer.getMultiMapContainer(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$31.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapValue", "com.hazelcast.multimap.impl.MultiMapValue(java.util.Collection<com.hazelcast.multimap.impl.MultiMapRecord>)"], ["void", "com.hazelcast.multimap.impl.MultiMapValue.incrementHit()"], ["long", "com.hazelcast.multimap.impl.MultiMapValue.getHits()"], ["void", "com.hazelcast.multimap.impl.MultiMapValue.setHits(long)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapValue.containsRecordId(long)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapValue", "com.hazelcast.multimap.impl.MultiMapContainerSupport.getOrCreateMultiMapValue(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.multimap.impl.MultiMapValue", "com.hazelcast.multimap.impl.MultiMapContainerSupport.getMultiMapValueOrNull(com.hazelcast.nio.serialization.Data)"], ["java.util.concurrent.ConcurrentMap<com.hazelcast.nio.serialization.Data, com.hazelcast.multimap.impl.MultiMapValue>", "com.hazelcast.multimap.impl.MultiMapContainerSupport.getMultiMapValues()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.multimap.impl.MultiMapContainerSupport.getConfig()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$17.createNew(java.lang.Object)"], ["java.lang.String", "com.hazelcast.multimap.impl.MultiMapProxySupport.getName()"], ["int", "com.hazelcast.multimap.impl.MultiMapProxySupport.size()"], ["void", "com.hazelcast.multimap.impl.MultiMapProxySupport.clear()"], ["java.lang.String", "com.hazelcast.multimap.impl.MultiMapProxySupport.getServiceName()"], ["java.lang.String", "com.hazelcast.multimap.impl.MultiMapProxySupport.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapContainer", "com.hazelcast.multimap.impl.MultiMapContainer(java.lang.String, com.hazelcast.multimap.impl.MultiMapService, int)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.canAcquireLock(com.hazelcast.nio.serialization.Data, java.lang.String, long)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.isLocked(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.isTransactionallyLocked(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.txnLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long, boolean)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.unlock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.forceUnlock(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.extendLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["java.lang.String", "com.hazelcast.multimap.impl.MultiMapContainer.getLockOwnerInfo(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.multimap.impl.MultiMapContainer.nextId()"], ["void", "com.hazelcast.multimap.impl.MultiMapContainer.setId(long)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.delete(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.containsKey(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.containsEntry(boolean, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.multimap.impl.MultiMapContainer.containsValue(boolean, com.hazelcast.nio.serialization.Data)"], ["java.util.Map<com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.multimap.impl.MultiMapRecord>>", "com.hazelcast.multimap.impl.MultiMapContainer.copyCollections()"], ["int", "com.hazelcast.multimap.impl.MultiMapContainer.size()"], ["int", "com.hazelcast.multimap.impl.MultiMapContainer.clear()"], ["void", "com.hazelcast.multimap.impl.MultiMapContainer.destroy()"], ["void", "com.hazelcast.multimap.impl.MultiMapContainer.access()"], ["void", "com.hazelcast.multimap.impl.MultiMapContainer.update()"], ["long", "com.hazelcast.multimap.impl.MultiMapContainer.getLastAccessTime()"], ["long", "com.hazelcast.multimap.impl.MultiMapContainer.getLastUpdateTime()"], ["long", "com.hazelcast.multimap.impl.MultiMapContainer.getCreationTime()"], ["long", "com.hazelcast.multimap.impl.MultiMapContainer.getLockedCount()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.multimap.impl.MultiMapContainer.getObjectNamespace()"], ["int", "com.hazelcast.multimap.impl.MultiMapContainer.getPartitionId()"], ["com.hazelcast.multimap.impl.MultiMapValue", "com.hazelcast.multimap.impl.MultiMapContainer.merge(com.hazelcast.multimap.impl.MultiMapMergeContainer, com.hazelcast.spi.merge.SplitBrainMergePolicy<java.util.Collection<java.lang.Object>, com.hazelcast.spi.merge.SplitBrainMergeTypes$MultiMapMergeTypes>)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.multimap.impl.MultiMapContainer.getConfig()"], ["java.util.concurrent.ConcurrentMap", "com.hazelcast.multimap.impl.MultiMapContainer.getMultiMapValues()"], ["com.hazelcast.multimap.impl.MultiMapValue", "com.hazelcast.multimap.impl.MultiMapContainer.getMultiMapValueOrNull(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.multimap.impl.MultiMapValue", "com.hazelcast.multimap.impl.MultiMapContainer.getOrCreateMultiMapValue(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$14.createNew(java.lang.Object)"], ["void", "com.hazelcast.multimap.impl.MultiMapService$Merger.runInternal()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.multimap.impl.MultiMapDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.multimap.impl.MultiMapEventsPublisher", "com.hazelcast.multimap.impl.MultiMapEventsPublisher(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.multimap.impl.MultiMapEventsPublisher.publishMultiMapEvent(java.lang.String, com.hazelcast.core.EntryEventType, int)"], ["void", "com.hazelcast.multimap.impl.MultiMapEventsPublisher.publishEntryEvent(java.lang.String, com.hazelcast.core.EntryEventType, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object)"], ["com.hazelcast.map.MapPartitionLostEvent", "com.hazelcast.map.MapPartitionLostEvent(java.lang.Object, com.hazelcast.core.Member, int, int)"], ["int", "com.hazelcast.map.MapPartitionLostEvent.getPartitionId()"], ["java.lang.String", "com.hazelcast.map.MapPartitionLostEvent.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$57.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$57.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.tx.TxnDeleteOperation", "com.hazelcast.map.impl.tx.TxnDeleteOperation()"], ["com.hazelcast.map.impl.tx.TxnDeleteOperation", "com.hazelcast.map.impl.tx.TxnDeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.tx.TxnDeleteOperation.innerBeforeRun()"], ["void", "com.hazelcast.map.impl.tx.TxnDeleteOperation.run()"], ["boolean", "com.hazelcast.map.impl.tx.TxnDeleteOperation.shouldWait()"], ["void", "com.hazelcast.map.impl.tx.TxnDeleteOperation.afterRun()"], ["void", "com.hazelcast.map.impl.tx.TxnDeleteOperation.onWaitExpire()"], ["long", "com.hazelcast.map.impl.tx.TxnDeleteOperation.getVersion()"], ["void", "com.hazelcast.map.impl.tx.TxnDeleteOperation.setVersion(long)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnDeleteOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.tx.TxnDeleteOperation.shouldNotify()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.tx.TxnDeleteOperation.getBackupOperation()"], ["void", "com.hazelcast.map.impl.tx.TxnDeleteOperation.setOwnerUuid(java.lang.String)"], ["boolean", "com.hazelcast.map.impl.tx.TxnDeleteOperation.shouldBackup()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.tx.TxnDeleteOperation.getNotifiedKey()"], ["int", "com.hazelcast.map.impl.tx.TxnDeleteOperation.getId()"], ["com.hazelcast.map.impl.tx.TxnUnlockOperation", "com.hazelcast.map.impl.tx.TxnUnlockOperation()"], ["com.hazelcast.map.impl.tx.TxnUnlockOperation", "com.hazelcast.map.impl.tx.TxnUnlockOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.tx.TxnUnlockOperation.innerBeforeRun()"], ["void", "com.hazelcast.map.impl.tx.TxnUnlockOperation.run()"], ["boolean", "com.hazelcast.map.impl.tx.TxnUnlockOperation.shouldWait()"], ["long", "com.hazelcast.map.impl.tx.TxnUnlockOperation.getVersion()"], ["void", "com.hazelcast.map.impl.tx.TxnUnlockOperation.setVersion(long)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnUnlockOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.tx.TxnUnlockOperation.shouldNotify()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.tx.TxnUnlockOperation.getBackupOperation()"], ["void", "com.hazelcast.map.impl.tx.TxnUnlockOperation.onWaitExpire()"], ["int", "com.hazelcast.map.impl.tx.TxnUnlockOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.tx.TxnUnlockOperation.getSyncBackupCount()"], ["void", "com.hazelcast.map.impl.tx.TxnUnlockOperation.setOwnerUuid(java.lang.String)"], ["boolean", "com.hazelcast.map.impl.tx.TxnUnlockOperation.shouldBackup()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.tx.TxnUnlockOperation.getNotifiedKey()"], ["int", "com.hazelcast.map.impl.tx.TxnUnlockOperation.getId()"], ["com.hazelcast.map.impl.tx.TxnLockAndGetOperation", "com.hazelcast.map.impl.tx.TxnLockAndGetOperation()"], ["com.hazelcast.map.impl.tx.TxnLockAndGetOperation", "com.hazelcast.map.impl.tx.TxnLockAndGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, java.lang.String, boolean, boolean)"], ["void", "com.hazelcast.map.impl.tx.TxnLockAndGetOperation.run()"], ["boolean", "com.hazelcast.map.impl.tx.TxnLockAndGetOperation.shouldWait()"], ["void", "com.hazelcast.map.impl.tx.TxnLockAndGetOperation.onWaitExpire()"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnLockAndGetOperation.getResponse()"], ["int", "com.hazelcast.map.impl.tx.TxnLockAndGetOperation.getId()"], ["com.hazelcast.map.impl.tx.TxnRollbackBackupOperation", "com.hazelcast.map.impl.tx.TxnRollbackBackupOperation()"], ["void", "com.hazelcast.map.impl.tx.TxnRollbackBackupOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnRollbackBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.tx.TxnRollbackBackupOperation.getId()"], ["com.hazelcast.map.impl.tx.MapTransactionLogRecord", "com.hazelcast.map.impl.tx.MapTransactionLogRecord()"], ["com.hazelcast.map.impl.tx.MapTransactionLogRecord", "com.hazelcast.map.impl.tx.MapTransactionLogRecord(java.lang.String, com.hazelcast.nio.serialization.Data, int, com.hazelcast.spi.Operation, long, java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.newPrepareOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.newCommitOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.newRollbackOperation()"], ["void", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.getKey()"], ["java.lang.String", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.toString()"], ["int", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.getFactoryId()"], ["int", "com.hazelcast.map.impl.tx.MapTransactionLogRecord.getId()"], ["com.hazelcast.map.impl.tx.TxnUnlockBackupOperation", "com.hazelcast.map.impl.tx.TxnUnlockBackupOperation()"], ["com.hazelcast.map.impl.tx.TxnUnlockBackupOperation", "com.hazelcast.map.impl.tx.TxnUnlockBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, java.lang.String)"], ["void", "com.hazelcast.map.impl.tx.TxnUnlockBackupOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnUnlockBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.tx.TxnUnlockBackupOperation.getId()"], ["java.lang.String", "com.hazelcast.map.impl.tx.TransactionalMapProxySupport.getName()"], ["java.lang.String", "com.hazelcast.map.impl.tx.TransactionalMapProxySupport.getServiceName()"], ["com.hazelcast.map.impl.tx.TxnPrepareBackupOperation", "com.hazelcast.map.impl.tx.TxnPrepareBackupOperation()"], ["void", "com.hazelcast.map.impl.tx.TxnPrepareBackupOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnPrepareBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.tx.TxnPrepareBackupOperation.getId()"], ["com.hazelcast.map.impl.tx.TxnRollbackOperation", "com.hazelcast.map.impl.tx.TxnRollbackOperation()"], ["void", "com.hazelcast.map.impl.tx.TxnRollbackOperation.run()"], ["void", "com.hazelcast.map.impl.tx.TxnRollbackOperation.logError(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnRollbackOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.tx.TxnRollbackOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.tx.TxnRollbackOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.tx.TxnRollbackOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.tx.TxnRollbackOperation.getSyncBackupCount()"], ["boolean", "com.hazelcast.map.impl.tx.TxnRollbackOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.tx.TxnRollbackOperation.getNotifiedKey()"], ["int", "com.hazelcast.map.impl.tx.TxnRollbackOperation.getId()"], ["com.hazelcast.map.impl.tx.TxnValueWrapper$Type[]", "com.hazelcast.map.impl.tx.TxnValueWrapper$Type.values()"], ["com.hazelcast.map.impl.tx.TxnValueWrapper$Type", "com.hazelcast.map.impl.tx.TxnValueWrapper$Type.valueOf(java.lang.String)"], ["com.hazelcast.map.impl.tx.TxnSetOperation", "com.hazelcast.map.impl.tx.TxnSetOperation()"], ["com.hazelcast.map.impl.tx.TxnSetOperation", "com.hazelcast.map.impl.tx.TxnSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.tx.TxnSetOperation", "com.hazelcast.map.impl.tx.TxnSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["boolean", "com.hazelcast.map.impl.tx.TxnSetOperation.shouldWait()"], ["void", "com.hazelcast.map.impl.tx.TxnSetOperation.innerBeforeRun()"], ["void", "com.hazelcast.map.impl.tx.TxnSetOperation.run()"], ["long", "com.hazelcast.map.impl.tx.TxnSetOperation.getVersion()"], ["void", "com.hazelcast.map.impl.tx.TxnSetOperation.setVersion(long)"], ["void", "com.hazelcast.map.impl.tx.TxnSetOperation.setOwnerUuid(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnSetOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.tx.TxnSetOperation.shouldNotify()"], ["void", "com.hazelcast.map.impl.tx.TxnSetOperation.onWaitExpire()"], ["boolean", "com.hazelcast.map.impl.tx.TxnSetOperation.shouldBackup()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.tx.TxnSetOperation.getNotifiedKey()"], ["int", "com.hazelcast.map.impl.tx.TxnSetOperation.getId()"], ["com.hazelcast.map.impl.tx.TxnPrepareOperation", "com.hazelcast.map.impl.tx.TxnPrepareOperation()"], ["void", "com.hazelcast.map.impl.tx.TxnPrepareOperation.run()"], ["void", "com.hazelcast.map.impl.tx.TxnPrepareOperation.logError(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TxnPrepareOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.tx.TxnPrepareOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.tx.TxnPrepareOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.tx.TxnPrepareOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.tx.TxnPrepareOperation.getSyncBackupCount()"], ["int", "com.hazelcast.map.impl.tx.TxnPrepareOperation.getId()"], ["com.hazelcast.map.impl.tx.TransactionalMapProxy", "com.hazelcast.map.impl.tx.TransactionalMapProxy(java.lang.String, com.hazelcast.map.impl.MapService, com.hazelcast.spi.NodeEngine, com.hazelcast.transaction.impl.Transaction)"], ["boolean", "com.hazelcast.map.impl.tx.TransactionalMapProxy.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.tx.TransactionalMapProxy.containsKey(java.lang.Object, boolean)"], ["int", "com.hazelcast.map.impl.tx.TransactionalMapProxy.size()"], ["boolean", "com.hazelcast.map.impl.tx.TransactionalMapProxy.isEmpty()"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TransactionalMapProxy.get(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TransactionalMapProxy.get(java.lang.Object, boolean)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TransactionalMapProxy.getForUpdate(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TransactionalMapProxy.put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TransactionalMapProxy.put(java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.map.impl.tx.TransactionalMapProxy.set(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TransactionalMapProxy.putIfAbsent(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TransactionalMapProxy.replace(java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.tx.TransactionalMapProxy.replace(java.lang.Object, java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.tx.TransactionalMapProxy.remove(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.tx.TransactionalMapProxy.remove(java.lang.Object)"], ["void", "com.hazelcast.map.impl.tx.TransactionalMapProxy.delete(java.lang.Object)"], ["java.util.Set", "com.hazelcast.map.impl.tx.TransactionalMapProxy.keySet(com.hazelcast.query.Predicate)"], ["java.util.Collection", "com.hazelcast.map.impl.tx.TransactionalMapProxy.values(com.hazelcast.query.Predicate)"], ["java.lang.String", "com.hazelcast.map.impl.tx.TransactionalMapProxy.toString()"], ["com.hazelcast.map.impl.tx.VersionedValue", "com.hazelcast.map.impl.tx.VersionedValue(com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.tx.VersionedValue", "com.hazelcast.map.impl.tx.VersionedValue()"], ["void", "com.hazelcast.map.impl.tx.VersionedValue.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.tx.VersionedValue.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.tx.VersionedValue.getFactoryId()"], ["int", "com.hazelcast.map.impl.tx.VersionedValue.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter[]", "com.hazelcast.map.impl.MapListenerAdaptors.createListenerAdapters(com.hazelcast.map.listener.MapListener)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$8.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$8.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$83.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$83.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.DefaultMapServiceFactory", "com.hazelcast.map.impl.DefaultMapServiceFactory(com.hazelcast.spi.NodeEngine, com.hazelcast.map.impl.MapServiceContext)"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.map.impl.DefaultMapServiceFactory.getNodeEngine()"], ["com.hazelcast.map.impl.MapServiceContext", "com.hazelcast.map.impl.DefaultMapServiceFactory.getMapServiceContext()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$134.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$134.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.LatencyTrackingMapLoader", "com.hazelcast.map.impl.LatencyTrackingMapLoader(com.hazelcast.core.MapLoader<K, V>, com.hazelcast.internal.diagnostics.StoreLatencyPlugin, java.lang.String)"], ["V", "com.hazelcast.map.impl.LatencyTrackingMapLoader.load(K)"], ["java.util.Map<K, V>", "com.hazelcast.map.impl.LatencyTrackingMapLoader.loadAll(java.util.Collection<K>)"], ["void", "com.hazelcast.map.impl.MapManagedService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.map.impl.MapManagedService.reset()"], ["void", "com.hazelcast.map.impl.MapManagedService.shutdown(boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$120.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$120.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$74.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$74.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.iterator.AbstractMapQueryPartitionIterator", "com.hazelcast.map.impl.iterator.AbstractMapQueryPartitionIterator(com.hazelcast.core.IMap<K, V>, int, int, com.hazelcast.query.Predicate<K, V>, com.hazelcast.projection.Projection<java.util.Map$Entry<K, V>, R>)"], ["boolean", "com.hazelcast.map.impl.iterator.AbstractMapQueryPartitionIterator.hasNext()"], ["R", "com.hazelcast.map.impl.iterator.AbstractMapQueryPartitionIterator.next()"], ["void", "com.hazelcast.map.impl.iterator.AbstractMapQueryPartitionIterator.remove()"], ["com.hazelcast.map.impl.iterator.MapKeysWithCursor", "com.hazelcast.map.impl.iterator.MapKeysWithCursor()"], ["com.hazelcast.map.impl.iterator.MapKeysWithCursor", "com.hazelcast.map.impl.iterator.MapKeysWithCursor(java.util.List<com.hazelcast.nio.serialization.Data>, int)"], ["int", "com.hazelcast.map.impl.iterator.MapKeysWithCursor.getCount()"], ["int", "com.hazelcast.map.impl.iterator.MapKeysWithCursor.getId()"], ["com.hazelcast.map.impl.iterator.MapEntriesWithCursor", "com.hazelcast.map.impl.iterator.MapEntriesWithCursor()"], ["com.hazelcast.map.impl.iterator.MapEntriesWithCursor", "com.hazelcast.map.impl.iterator.MapEntriesWithCursor(java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>, int)"], ["int", "com.hazelcast.map.impl.iterator.MapEntriesWithCursor.getId()"], ["com.hazelcast.map.impl.iterator.AbstractCursor", "com.hazelcast.map.impl.iterator.AbstractCursor()"], ["com.hazelcast.map.impl.iterator.AbstractCursor", "com.hazelcast.map.impl.iterator.AbstractCursor(java.util.List<T>, int)"], ["int", "com.hazelcast.map.impl.iterator.AbstractCursor.getNextTableIndexToReadFrom()"], ["int", "com.hazelcast.map.impl.iterator.AbstractCursor.getFactoryId()"], ["void", "com.hazelcast.map.impl.iterator.AbstractCursor.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.iterator.AbstractCursor.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.map.impl.iterator.AbstractMapPartitionIterator", "com.hazelcast.map.impl.iterator.AbstractMapPartitionIterator(com.hazelcast.core.IMap<K, V>, int, int, boolean)"], ["boolean", "com.hazelcast.map.impl.iterator.AbstractMapPartitionIterator.hasNext()"], ["java.util.Map$Entry<K, V>", "com.hazelcast.map.impl.iterator.AbstractMapPartitionIterator.next()"], ["void", "com.hazelcast.map.impl.iterator.AbstractMapPartitionIterator.remove()"], ["java.lang.Object", "com.hazelcast.map.impl.iterator.AbstractMapPartitionIterator.next()"], ["com.hazelcast.map.impl.iterator.MapPartitionIterator", "com.hazelcast.map.impl.iterator.MapPartitionIterator(com.hazelcast.map.impl.proxy.MapProxyImpl<K, V>, int, int, boolean)"], ["com.hazelcast.map.impl.iterator.MapQueryPartitionIterator", "com.hazelcast.map.impl.iterator.MapQueryPartitionIterator(com.hazelcast.map.impl.proxy.MapProxyImpl<K, V>, int, int, com.hazelcast.query.Predicate<K, V>, com.hazelcast.projection.Projection<java.util.Map$Entry<K, V>, R>)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$30.createNew(java.lang.Object)"], ["<K, V> com.hazelcast.map.impl.EntryCostEstimator<K, V>", "com.hazelcast.map.impl.OwnedEntryCostEstimatorFactory.createMapSizeEstimator(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$65.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$65.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$79.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$79.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$4$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$4$1.onEvent(java.lang.Object)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$1$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$1$1.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$109.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$109.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.InternalMapListenerAdapter.onEvent(com.hazelcast.core.IMapEvent)"], ["com.hazelcast.map.impl.ListenerAdapter[]", "com.hazelcast.map.impl.InternalMapListenerAdapter.getListenerAdapters()"], ["void", "com.hazelcast.map.impl.InternalMapListenerAdapter.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$66.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$66.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.setBackupCount(int)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.incrementHits(long)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.incrementOwnedEntryCount(long)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.incrementBackupEntryCount(long)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.incrementOwnedEntryMemoryCost(long)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.incrementBackupEntryMemoryCost(long)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.incrementLockedEntryCount(long)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.incrementDirtyEntryCount(long)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.incrementHeapCost(long)"], ["com.hazelcast.monitor.impl.LocalMapStatsImpl", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.updateAndGet(com.hazelcast.monitor.impl.LocalMapStatsImpl)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.setLastAccessTime(long)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider$LocalMapOnDemandCalculatedStats.setLastUpdateTime(long)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$110.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$110.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$32.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$32.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$3$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$3$1.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$36.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$36.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.LazyMapEntry", "com.hazelcast.map.impl.LazyMapEntry()"], ["com.hazelcast.map.impl.LazyMapEntry", "com.hazelcast.map.impl.LazyMapEntry(com.hazelcast.nio.serialization.Data, java.lang.Object, com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.map.impl.LazyMapEntry", "com.hazelcast.map.impl.LazyMapEntry(com.hazelcast.nio.serialization.Data, java.lang.Object, com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.query.impl.getters.Extractors)"], ["V", "com.hazelcast.map.impl.LazyMapEntry.setValue(V)"], ["void", "com.hazelcast.map.impl.LazyMapEntry.remove()"], ["boolean", "com.hazelcast.map.impl.LazyMapEntry.hasNullValue()"], ["boolean", "com.hazelcast.map.impl.LazyMapEntry.isModified()"], ["boolean", "com.hazelcast.map.impl.LazyMapEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.LazyMapEntry.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.LazyMapEntry.toString()"], ["void", "com.hazelcast.map.impl.LazyMapEntry.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.map.impl.LazyMapEntry.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["int", "com.hazelcast.map.impl.LazyMapEntry.getFactoryId()"], ["int", "com.hazelcast.map.impl.LazyMapEntry.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$131.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$131.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$104.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$104.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$130.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$130.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$5.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$5.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$81.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$81.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$49.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$49.createNew(java.lang.Object)"], ["com.hazelcast.util.ConstructorFunction<com.hazelcast.spi.NodeEngine, com.hazelcast.map.impl.MapService>", "com.hazelcast.map.impl.MapServiceConstructor.getDefaultMapServiceConstructor()"], ["com.hazelcast.map.impl.DataAwareEntryEvent", "com.hazelcast.map.impl.DataAwareEntryEvent(com.hazelcast.core.Member, int, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.DataAwareEntryEvent.getKeyData()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.DataAwareEntryEvent.getNewValueData()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.DataAwareEntryEvent.getOldValueData()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.DataAwareEntryEvent.getMergingValueData()"], ["K", "com.hazelcast.map.impl.DataAwareEntryEvent.getKey()"], ["V", "com.hazelcast.map.impl.DataAwareEntryEvent.getOldValue()"], ["V", "com.hazelcast.map.impl.DataAwareEntryEvent.getValue()"], ["V", "com.hazelcast.map.impl.DataAwareEntryEvent.getMergingValue()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$89.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$89.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.add(java.lang.Object, java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.addTransient(java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.addBackup(java.lang.Object, java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.remove(java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.removeBackup(java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.reset()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.load(java.lang.Object)"], ["java.util.Map", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.loadAll(java.util.Collection)"], ["void", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.removeAll(java.util.Collection)"], ["boolean", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.loadable(java.lang.Object)"], ["long", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.softFlush()"], ["void", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.hardFlush()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.flush(java.lang.Object, java.lang.Object, boolean)"], ["int", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.notFinishedOperationsCount()"], ["boolean", "com.hazelcast.map.impl.mapstore.EmptyMapDataStore.isPostProcessingMapStore()"], ["com.hazelcast.map.impl.mapstore.MapStoreManager", "com.hazelcast.map.impl.mapstore.MapStoreManagers.createWriteThroughManager(com.hazelcast.map.impl.mapstore.MapStoreContext)"], ["com.hazelcast.map.impl.mapstore.MapStoreManager", "com.hazelcast.map.impl.mapstore.MapStoreManagers.createWriteBehindManager(com.hazelcast.map.impl.mapstore.MapStoreContext)"], ["com.hazelcast.map.impl.mapstore.MapStoreManager", "com.hazelcast.map.impl.mapstore.MapStoreManagers.emptyMapStoreManager()"], ["<K, V> com.hazelcast.map.impl.mapstore.MapDataStore<K, V>", "com.hazelcast.map.impl.mapstore.MapDataStores.createWriteBehindStore(com.hazelcast.map.impl.mapstore.MapStoreContext, int, com.hazelcast.map.impl.mapstore.writebehind.WriteBehindProcessor)"], ["<K, V> com.hazelcast.map.impl.mapstore.MapDataStore<K, V>", "com.hazelcast.map.impl.mapstore.MapDataStores.createWriteThroughStore(com.hazelcast.map.impl.mapstore.MapStoreContext)"], ["<K, V> com.hazelcast.map.impl.mapstore.MapDataStore<K, V>", "com.hazelcast.map.impl.mapstore.MapDataStores.emptyStore()"], ["void", "com.hazelcast.map.impl.mapstore.MapStoreManagers$1.start()"], ["void", "com.hazelcast.map.impl.mapstore.MapStoreManagers$1.stop()"], ["com.hazelcast.map.impl.mapstore.MapDataStore", "com.hazelcast.map.impl.mapstore.MapStoreManagers$1.getMapDataStore(java.lang.String, int)"], ["com.hazelcast.map.impl.mapstore.MapStoreManager", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.getMapStoreManager()"], ["com.hazelcast.map.impl.MapStoreWrapper", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.getMapStoreWrapper()"], ["void", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.start()"], ["void", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.stop()"], ["boolean", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.isWriteBehindMapStoreEnabled()"], ["com.hazelcast.spi.serialization.SerializationService", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.getSerializationService()"], ["com.hazelcast.logging.ILogger", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.getLogger(java.lang.Class)"], ["java.lang.String", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.getMapName()"], ["com.hazelcast.map.impl.MapServiceContext", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.getMapServiceContext()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.getMapStoreConfig()"], ["boolean", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory$EmptyMapStoreContext.isMapLoader()"], ["java.util.Map", "com.hazelcast.map.impl.mapstore.AbstractMapDataStore.loadAll(java.util.Collection)"], ["void", "com.hazelcast.map.impl.mapstore.AbstractMapDataStore.removeAll(java.util.Collection)"], ["com.hazelcast.map.impl.MapStoreWrapper", "com.hazelcast.map.impl.mapstore.AbstractMapDataStore.getStore()"], ["boolean", "com.hazelcast.map.impl.mapstore.AbstractMapDataStore.isPostProcessingMapStore()"], ["com.hazelcast.map.impl.mapstore.MapStoreContext", "com.hazelcast.map.impl.mapstore.MapStoreContextFactory.createMapStoreContext(com.hazelcast.map.impl.MapContainer)"], ["com.hazelcast.map.impl.mapstore.writethrough.WriteThroughManager", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughManager(com.hazelcast.map.impl.mapstore.MapStoreContext)"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughManager.start()"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughManager.stop()"], ["com.hazelcast.map.impl.mapstore.MapDataStore", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughManager.getMapDataStore(java.lang.String, int)"], ["com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore(com.hazelcast.map.impl.MapStoreWrapper, com.hazelcast.internal.serialization.InternalSerializationService)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.add(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.addTransient(com.hazelcast.nio.serialization.Data, long)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.addBackup(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.remove(com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.removeBackup(com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.reset()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.load(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.loadable(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.softFlush()"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.hardFlush()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.flush(com.hazelcast.nio.serialization.Data, java.lang.Object, boolean)"], ["int", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.notFinishedOperationsCount()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.flush(java.lang.Object, java.lang.Object, boolean)"], ["boolean", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.loadable(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.load(java.lang.Object)"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.removeBackup(java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.remove(java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.addBackup(java.lang.Object, java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.addTransient(java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writethrough.WriteThroughStore.add(java.lang.Object, java.lang.Object, long)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker$1.test(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker$1.test(java.lang.Object)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.addFirst(java.util.Collection<E>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.addLast(E)"], ["E", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.peek()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.removeFirstOccurrence(E)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.drainTo(java.util.Collection<E>)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.contains(E)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.size()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.clear()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.BoundedWriteBehindQueue.filter(com.hazelcast.map.impl.mapstore.writebehind.IPredicate<E>, java.util.Collection<E>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.addFirst(java.util.Collection<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.addLast(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.peek()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.removeFirstOccurrence(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.contains(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.size()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.clear()"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.drainTo(java.util.Collection<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.filter(com.hazelcast.map.impl.mapstore.writebehind.IPredicate<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>, java.util.Collection<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.contains(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.removeFirstOccurrence(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.peek()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CoalescedWriteBehindQueue.addLast(java.lang.Object)"], ["<E> com.hazelcast.map.impl.mapstore.writebehind.StoreEvent<E>", "com.hazelcast.map.impl.mapstore.writebehind.StoreEvent.createStoreEvent(E)"], ["E", "com.hazelcast.map.impl.mapstore.writebehind.StoreEvent.getSource()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker$2.test(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker$2.test(java.lang.Object)"], ["com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.addFirst(java.util.Collection<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.addLast(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.peek()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.removeFirstOccurrence(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.contains(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.size()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.clear()"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.drainTo(java.util.Collection<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.filter(com.hazelcast.map.impl.mapstore.writebehind.IPredicate<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>, java.util.Collection<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.contains(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.removeFirstOccurrence(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.peek()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.CyclicWriteBehindQueue.addLast(java.lang.Object)"], ["com.hazelcast.map.impl.mapstore.writebehind.WriteBehindManager", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindManager(com.hazelcast.map.impl.mapstore.MapStoreContext)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindManager.start()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindManager.stop()"], ["com.hazelcast.map.impl.mapstore.MapDataStore", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindManager.getMapDataStore(java.lang.String, int)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor$1.compare(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry, com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor$1.compare(java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor$3.run()"], ["com.hazelcast.map.impl.mapstore.writebehind.StoreWorker", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker(com.hazelcast.map.impl.mapstore.MapStoreContext, com.hazelcast.map.impl.mapstore.writebehind.WriteBehindProcessor)"], ["synchronized", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker.void start()"], ["synchronized", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker.void stop()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker.run()"], ["java.lang.String", "com.hazelcast.map.impl.mapstore.writebehind.StoreWorker.toString()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.addFirst(java.util.Collection<E>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.addLast(E)"], ["E", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.peek()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.removeFirstOccurrence(E)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.contains(E)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.size()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.clear()"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.drainTo(java.util.Collection<E>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.SynchronizedWriteBehindQueue.filter(com.hazelcast.map.impl.mapstore.writebehind.IPredicate<E>, java.util.Collection<E>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindManager$InternalStoreListener.beforeStore(com.hazelcast.map.impl.mapstore.writebehind.StoreEvent<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindManager$InternalStoreListener.afterStore(com.hazelcast.map.impl.mapstore.writebehind.StoreEvent<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore(com.hazelcast.map.impl.mapstore.MapStoreContext, int, com.hazelcast.internal.serialization.InternalSerializationService)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.add(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.add(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry<com.hazelcast.nio.serialization.Data, java.lang.Object>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.addTransient(com.hazelcast.nio.serialization.Data, long)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.addBackup(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.remove(com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.removeBackup(com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.reset()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.load(com.hazelcast.nio.serialization.Data)"], ["java.util.Map", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.loadAll(java.util.Collection)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.loadable(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.notFinishedOperationsCount()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.flush(com.hazelcast.nio.serialization.Data, java.lang.Object, boolean)"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.softFlush()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.hardFlush()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.setWriteBehindQueue(com.hazelcast.map.impl.mapstore.writebehind.WriteBehindQueue<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.setWriteBehindProcessor(com.hazelcast.map.impl.mapstore.writebehind.WriteBehindProcessor)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.setSequence(long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.notifyFlush()"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.getSequenceToFlush()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.setFlushSequences(java.util.Queue<com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore$Sequence>)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.flush(java.lang.Object, java.lang.Object, boolean)"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.loadable(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.load(java.lang.Object)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.removeBackup(java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.remove(java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.addBackup(java.lang.Object, java.lang.Object, long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.addTransient(java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore.add(java.lang.Object, java.lang.Object, long)"], ["com.hazelcast.map.impl.mapstore.writebehind.AbstractWriteBehindProcessor$StoreOperationType[]", "com.hazelcast.map.impl.mapstore.writebehind.AbstractWriteBehindProcessor$StoreOperationType.values()"], ["com.hazelcast.map.impl.mapstore.writebehind.AbstractWriteBehindProcessor$StoreOperationType", "com.hazelcast.map.impl.mapstore.writebehind.AbstractWriteBehindProcessor$StoreOperationType.valueOf(java.lang.String)"], ["<K, V> com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry<K, V>", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries.createDefault(K, V, long, int)"], ["<K, V> com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry<K, V>", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries.createWithoutValue(K)"], ["<K, V> com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry<K, V>", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries.createWithoutValue(K, long, int)"], ["<K, V> com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry<K, V>", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries.emptyDelayedEntry()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries$EmptyDelayedEntry.getKey()"], ["java.lang.Object", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries$EmptyDelayedEntry.getValue()"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries$EmptyDelayedEntry.getStoreTime()"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries$EmptyDelayedEntry.getPartitionId()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries$EmptyDelayedEntry.setStoreTime(long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries$EmptyDelayedEntry.setSequence(long)"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries$EmptyDelayedEntry.getSequence()"], ["com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry(K, V, long, int)"], ["K", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.getKey()"], ["V", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.getValue()"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.getStoreTime()"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.getPartitionId()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.setStoreTime(long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.setSequence(long)"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.getSequence()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.mapstore.writebehind.entry.AddedDelayedEntry.toString()"], ["com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry(K, long, int)"], ["K", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.getKey()"], ["V", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.getValue()"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.getStoreTime()"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.getPartitionId()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.setStoreTime(long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.setSequence(long)"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.getSequence()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.mapstore.writebehind.entry.DeletedDelayedEntry.toString()"], ["com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry(K)"], ["K", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.getKey()"], ["V", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.getValue()"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.getStoreTime()"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.getPartitionId()"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.setStoreTime(long)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.setSequence(long)"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.getSequence()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.mapstore.writebehind.entry.NullValueDelayedEntry.hashCode()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor$2.run()"], ["java.util.Map<java.lang.Integer, java.util.List<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>>", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor.process(java.util.List<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor.callBeforeStoreListeners(java.util.Collection<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor.addStoreListener(com.hazelcast.map.impl.mapstore.writebehind.StoreListener)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor.flush(com.hazelcast.map.impl.mapstore.writebehind.WriteBehindQueue)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor.flush(com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor.callAfterStoreListeners(java.util.Collection<com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry>)"], ["void", "com.hazelcast.map.impl.mapstore.writebehind.DefaultWriteBehindProcessor.flush(java.lang.Object)"], ["com.hazelcast.map.impl.mapstore.writebehind.WriteBehindProcessor", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindProcessors.createWriteBehindProcessor(com.hazelcast.map.impl.mapstore.MapStoreContext)"], ["com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore$Sequence", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore$Sequence(long, boolean)"], ["long", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore$Sequence.getSequence()"], ["boolean", "com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore$Sequence.isFullFlush()"], ["void", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.start()"], ["void", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.stop()"], ["boolean", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.isWriteBehindMapStoreEnabled()"], ["boolean", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.isMapLoader()"], ["com.hazelcast.spi.serialization.SerializationService", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.getSerializationService()"], ["com.hazelcast.logging.ILogger", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.getLogger(java.lang.Class)"], ["java.lang.String", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.getMapName()"], ["com.hazelcast.map.impl.MapServiceContext", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.getMapServiceContext()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.getMapStoreConfig()"], ["com.hazelcast.map.impl.mapstore.MapStoreManager", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.getMapStoreManager()"], ["com.hazelcast.map.impl.MapStoreWrapper", "com.hazelcast.map.impl.mapstore.BasicMapStoreContext.getMapStoreWrapper()"], ["com.hazelcast.map.impl.MapPostJoinAwareService", "com.hazelcast.map.impl.MapPostJoinAwareService(com.hazelcast.map.impl.MapServiceContext)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.MapPostJoinAwareService.getPostJoinOperation()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$75.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$75.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapEntries", "com.hazelcast.map.impl.MapEntries()"], ["com.hazelcast.map.impl.MapEntries", "com.hazelcast.map.impl.MapEntries(int)"], ["com.hazelcast.map.impl.MapEntries", "com.hazelcast.map.impl.MapEntries(java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["void", "com.hazelcast.map.impl.MapEntries.add(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>", "com.hazelcast.map.impl.MapEntries.entries()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.MapEntries.getKey(int)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.MapEntries.getValue(int)"], ["int", "com.hazelcast.map.impl.MapEntries.size()"], ["boolean", "com.hazelcast.map.impl.MapEntries.isEmpty()"], ["void", "com.hazelcast.map.impl.MapEntries.clear()"], ["void", "com.hazelcast.map.impl.MapEntries.putAllToList(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["<K, V> void", "com.hazelcast.map.impl.MapEntries.putAllToMap(com.hazelcast.spi.serialization.SerializationService, java.util.Map<K, V>)"], ["int", "com.hazelcast.map.impl.MapEntries.getFactoryId()"], ["int", "com.hazelcast.map.impl.MapEntries.getId()"], ["void", "com.hazelcast.map.impl.MapEntries.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.MapEntries.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$140.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$140.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$13.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$2$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$2$1.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$141.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$141.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$98.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$98.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$42.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$42.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapEntrySimple", "com.hazelcast.map.impl.MapEntrySimple(K, V)"], ["V", "com.hazelcast.map.impl.MapEntrySimple.setValue(V)"], ["boolean", "com.hazelcast.map.impl.MapEntrySimple.isModified()"], ["boolean", "com.hazelcast.map.impl.MapEntrySimple.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.MapEntrySimple.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$41.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$41.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapListenerAdapter", "com.hazelcast.map.impl.MapListenerAdapter()"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.entryAdded(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.entryRemoved(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.entryUpdated(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.entryEvicted(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.entryExpired(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.entryMerged(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.mapEvicted(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.mapCleared(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.onEntryEvent(com.hazelcast.core.EntryEvent<K, V>)"], ["void", "com.hazelcast.map.impl.MapListenerAdapter.onMapEvent(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.map.impl.InternalEntryListenerAdapter.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.InternalEntryListenerAdapter.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$119.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$119.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$113.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$113.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$129.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$129.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapTransactionalService", "com.hazelcast.map.impl.MapTransactionalService(com.hazelcast.map.impl.MapServiceContext)"], ["com.hazelcast.map.impl.tx.TransactionalMapProxy", "com.hazelcast.map.impl.MapTransactionalService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["void", "com.hazelcast.map.impl.MapTransactionalService.rollbackTransaction(java.lang.String)"], ["com.hazelcast.transaction.TransactionalObject", "com.hazelcast.map.impl.MapTransactionalService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$103.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$103.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.MapContainer$ObjectToData.apply(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.MapContainer$ObjectToData.apply(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$45.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$45.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$3$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$3$1.onEvent(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$4$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$4$1.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.LockAwareLazyMapEntry", "com.hazelcast.map.impl.LockAwareLazyMapEntry()"], ["com.hazelcast.map.impl.LockAwareLazyMapEntry", "com.hazelcast.map.impl.LockAwareLazyMapEntry(com.hazelcast.nio.serialization.Data, java.lang.Object, com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.query.impl.getters.Extractors, java.lang.Boolean)"], ["java.lang.Boolean", "com.hazelcast.map.impl.LockAwareLazyMapEntry.isLocked()"], ["int", "com.hazelcast.map.impl.LockAwareLazyMapEntry.getFactoryId()"], ["int", "com.hazelcast.map.impl.LockAwareLazyMapEntry.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.PartitionContainer$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.PartitionContainer$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$44.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$44.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.PartitionContainer", "com.hazelcast.map.impl.PartitionContainer(com.hazelcast.map.impl.MapService, int)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.map.impl.recordstore.RecordStore>", "com.hazelcast.map.impl.PartitionContainer.getMaps()"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.query.impl.Indexes>", "com.hazelcast.map.impl.PartitionContainer.getIndexes()"], ["int", "com.hazelcast.map.impl.PartitionContainer.getPartitionId()"], ["com.hazelcast.map.impl.MapService", "com.hazelcast.map.impl.PartitionContainer.getMapService()"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.PartitionContainer.getRecordStore(java.lang.String)"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.PartitionContainer.getRecordStore(java.lang.String, boolean)"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.PartitionContainer.getRecordStoreForHotRestart(java.lang.String)"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.PartitionContainer.getExistingRecordStore(java.lang.String)"], ["void", "com.hazelcast.map.impl.PartitionContainer.destroyMap(com.hazelcast.map.impl.MapContainer)"], ["void", "com.hazelcast.map.impl.PartitionContainer.clear(boolean, boolean)"], ["boolean", "com.hazelcast.map.impl.PartitionContainer.hasRunningCleanup()"], ["void", "com.hazelcast.map.impl.PartitionContainer.setHasRunningCleanup(boolean)"], ["long", "com.hazelcast.map.impl.PartitionContainer.getLastCleanupTime()"], ["void", "com.hazelcast.map.impl.PartitionContainer.setLastCleanupTime(long)"], ["long", "com.hazelcast.map.impl.PartitionContainer.getLastCleanupTimeCopy()"], ["void", "com.hazelcast.map.impl.PartitionContainer.setLastCleanupTimeCopy(long)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$122.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$122.createNew(java.lang.Object)"], ["java.lang.Boolean", "com.hazelcast.map.impl.MapKeyLoader$1.call()"], ["java.lang.Object", "com.hazelcast.map.impl.MapKeyLoader$1.call()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$47.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$47.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$106.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$106.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapKeyLoaderUtil$DataToEntry", "com.hazelcast.map.impl.MapKeyLoaderUtil$DataToEntry(com.hazelcast.spi.partition.IPartitionService)"], ["java.util.Map$Entry<java.lang.Integer, com.hazelcast.nio.serialization.Data>", "com.hazelcast.map.impl.MapKeyLoaderUtil$DataToEntry.apply(com.hazelcast.nio.serialization.Data)"], ["java.lang.Object", "com.hazelcast.map.impl.MapKeyLoaderUtil$DataToEntry.apply(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$137.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$137.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$91.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$91.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$62.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$62.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapStoreWrapper", "com.hazelcast.map.impl.MapStoreWrapper(java.lang.String, java.lang.Object)"], ["com.hazelcast.core.MapStore", "com.hazelcast.map.impl.MapStoreWrapper.getMapStore()"], ["void", "com.hazelcast.map.impl.MapStoreWrapper.destroy()"], ["void", "com.hazelcast.map.impl.MapStoreWrapper.init(com.hazelcast.core.HazelcastInstance, java.util.Properties, java.lang.String)"], ["boolean", "com.hazelcast.map.impl.MapStoreWrapper.isMapLoader()"], ["void", "com.hazelcast.map.impl.MapStoreWrapper.instrument(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.map.impl.MapStoreWrapper.delete(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapStoreWrapper.store(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapStoreWrapper.storeAll(java.util.Map)"], ["void", "com.hazelcast.map.impl.MapStoreWrapper.deleteAll(java.util.Collection)"], ["java.lang.Object", "com.hazelcast.map.impl.MapStoreWrapper.load(java.lang.Object)"], ["java.util.Map", "com.hazelcast.map.impl.MapStoreWrapper.loadAll(java.util.Collection)"], ["java.lang.Object", "com.hazelcast.map.impl.MapStoreWrapper.getImpl()"], ["boolean", "com.hazelcast.map.impl.MapStoreWrapper.isPostProcessingMapStore()"], ["java.lang.String", "com.hazelcast.map.impl.MapStoreWrapper.toString()"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.EntryListenerAdaptors$6.createNew(com.hazelcast.core.EntryListener)"], ["java.lang.Object", "com.hazelcast.map.impl.EntryListenerAdaptors$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter[]", "com.hazelcast.map.impl.EntryListenerAdaptors.createListenerAdapters(com.hazelcast.core.EntryListener)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$34.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$34.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.query.Target$TargetFlag[]", "com.hazelcast.map.impl.query.Target$TargetFlag.values()"], ["com.hazelcast.map.impl.query.Target$TargetFlag", "com.hazelcast.map.impl.query.Target$TargetFlag.valueOf(java.lang.String)"], ["com.hazelcast.map.impl.query.PartitionScanRunner", "com.hazelcast.map.impl.query.PartitionScanRunner(com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.query.PartitionScanRunner.run(java.lang.String, com.hazelcast.query.Predicate, int, com.hazelcast.map.impl.query.Result)"], ["com.hazelcast.query.impl.QueryableEntriesSegment", "com.hazelcast.map.impl.query.PartitionScanRunner.run(java.lang.String, com.hazelcast.query.Predicate, int, int, int)"], ["com.hazelcast.aggregation.Aggregator", "com.hazelcast.map.impl.query.ParallelAccumulationExecutor$AccumulatePartitionCallable.call()"], ["java.lang.Object", "com.hazelcast.map.impl.query.ParallelAccumulationExecutor$AccumulatePartitionCallable.call()"], ["com.hazelcast.map.impl.query.QueryResultRow", "com.hazelcast.map.impl.query.QueryResultRow()"], ["com.hazelcast.map.impl.query.QueryResultRow", "com.hazelcast.map.impl.query.QueryResultRow(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.query.QueryResultRow.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.query.QueryResultRow.getValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.query.QueryResultRow.setValue(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.map.impl.query.QueryResultRow.getFactoryId()"], ["int", "com.hazelcast.map.impl.query.QueryResultRow.getId()"], ["void", "com.hazelcast.map.impl.query.QueryResultRow.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.query.QueryResultRow.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.impl.query.QueryResultRow.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.query.QueryResultRow.hashCode()"], ["java.lang.Object", "com.hazelcast.map.impl.query.QueryResultRow.setValue(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.query.QueryResultRow.getValue()"], ["java.lang.Object", "com.hazelcast.map.impl.query.QueryResultRow.getKey()"], ["com.hazelcast.map.impl.query.QueryEntryFactory", "com.hazelcast.map.impl.query.QueryEntryFactory(com.hazelcast.config.CacheDeserializedValues)"], ["com.hazelcast.query.impl.QueryableEntry", "com.hazelcast.map.impl.query.QueryEntryFactory.newEntry(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.nio.serialization.Data, java.lang.Object, com.hazelcast.query.impl.getters.Extractors)"], ["com.hazelcast.map.impl.query.QueryPartitionOperation", "com.hazelcast.map.impl.query.QueryPartitionOperation()"], ["com.hazelcast.map.impl.query.QueryPartitionOperation", "com.hazelcast.map.impl.query.QueryPartitionOperation(com.hazelcast.map.impl.query.Query)"], ["void", "com.hazelcast.map.impl.query.QueryPartitionOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.query.QueryPartitionOperation.getResponse()"], ["int", "com.hazelcast.map.impl.query.QueryPartitionOperation.getId()"], ["boolean", "com.hazelcast.map.impl.query.QueryResultIterator.hasNext()"], ["java.lang.Object", "com.hazelcast.map.impl.query.QueryResultIterator.next()"], ["void", "com.hazelcast.map.impl.query.QueryResultIterator.remove()"], ["com.hazelcast.map.impl.query.QueryResultSizeLimiter", "com.hazelcast.map.impl.query.QueryResultSizeLimiter(com.hazelcast.map.impl.MapServiceContext, com.hazelcast.logging.ILogger)"], ["boolean", "com.hazelcast.map.impl.query.QueryResultSizeLimiter.isQueryResultLimitEnabled()"], ["boolean", "com.hazelcast.map.impl.query.QueryResultSizeLimiter.isPreCheckEnabled()"], ["com.hazelcast.map.impl.query.ParallelPartitionScanExecutor", "com.hazelcast.map.impl.query.ParallelPartitionScanExecutor(com.hazelcast.map.impl.query.PartitionScanRunner, com.hazelcast.util.executor.ManagedExecutorService, int)"], ["void", "com.hazelcast.map.impl.query.ParallelPartitionScanExecutor.execute(java.lang.String, com.hazelcast.query.Predicate, java.util.Collection<java.lang.Integer>, com.hazelcast.map.impl.query.Result)"], ["com.hazelcast.query.impl.QueryableEntriesSegment", "com.hazelcast.map.impl.query.ParallelPartitionScanExecutor.execute(java.lang.String, com.hazelcast.query.Predicate, int, int, int)"], ["com.hazelcast.map.impl.query.Query$QueryBuilder", "com.hazelcast.map.impl.query.Query$QueryBuilder.mapName(java.lang.String)"], ["com.hazelcast.map.impl.query.Query$QueryBuilder", "com.hazelcast.map.impl.query.Query$QueryBuilder.predicate(com.hazelcast.query.Predicate)"], ["com.hazelcast.map.impl.query.Query$QueryBuilder", "com.hazelcast.map.impl.query.Query$QueryBuilder.iterationType(com.hazelcast.util.IterationType)"], ["com.hazelcast.map.impl.query.Query$QueryBuilder", "com.hazelcast.map.impl.query.Query$QueryBuilder.aggregator(com.hazelcast.aggregation.Aggregator)"], ["com.hazelcast.map.impl.query.Query$QueryBuilder", "com.hazelcast.map.impl.query.Query$QueryBuilder.projection(com.hazelcast.projection.Projection)"], ["com.hazelcast.map.impl.query.Query", "com.hazelcast.map.impl.query.Query$QueryBuilder.build()"], ["com.hazelcast.map.impl.query.ResultProcessorRegistry", "com.hazelcast.map.impl.query.ResultProcessorRegistry()"], ["void", "com.hazelcast.map.impl.query.ResultProcessorRegistry.registerProcessor(java.lang.Class<? extends com.hazelcast.map.impl.query.Result>, com.hazelcast.map.impl.query.ResultProcessor)"], ["com.hazelcast.map.impl.query.ResultProcessor", "com.hazelcast.map.impl.query.ResultProcessorRegistry.get(java.lang.Class<? extends com.hazelcast.map.impl.query.Result>)"], ["com.hazelcast.map.impl.query.ParallelAccumulationExecutor", "com.hazelcast.map.impl.query.ParallelAccumulationExecutor(com.hazelcast.util.executor.ManagedExecutorService, com.hazelcast.spi.serialization.SerializationService, int)"], ["com.hazelcast.map.impl.query.AggregationResult", "com.hazelcast.map.impl.query.ParallelAccumulationExecutor.execute(com.hazelcast.aggregation.Aggregator, java.util.Collection<com.hazelcast.query.impl.QueryableEntry>, java.util.Collection<java.lang.Integer>)"], ["com.hazelcast.map.impl.query.QueryResult", "com.hazelcast.map.impl.query.QueryResult()"], ["com.hazelcast.map.impl.query.QueryResult", "com.hazelcast.map.impl.query.QueryResult(com.hazelcast.util.IterationType, com.hazelcast.projection.Projection, com.hazelcast.spi.serialization.SerializationService, long, boolean)"], ["int", "com.hazelcast.map.impl.query.QueryResult.size()"], ["boolean", "com.hazelcast.map.impl.query.QueryResult.isEmpty()"], ["void", "com.hazelcast.map.impl.query.QueryResult.addRow(com.hazelcast.map.impl.query.QueryResultRow)"], ["void", "com.hazelcast.map.impl.query.QueryResult.add(com.hazelcast.query.impl.QueryableEntry)"], ["com.hazelcast.map.impl.query.QueryResult", "com.hazelcast.map.impl.query.QueryResult.createSubResult()"], ["void", "com.hazelcast.map.impl.query.QueryResult.orderAndLimit(com.hazelcast.query.PagingPredicate, java.util.Map$Entry<java.lang.Integer, java.util.Map$Entry>)"], ["void", "com.hazelcast.map.impl.query.QueryResult.completeConstruction(java.util.Collection<java.lang.Integer>)"], ["void", "com.hazelcast.map.impl.query.QueryResult.combine(com.hazelcast.map.impl.query.QueryResult)"], ["void", "com.hazelcast.map.impl.query.QueryResult.onCombineFinished()"], ["void", "com.hazelcast.map.impl.query.QueryResult.setPartitionIds(java.util.Collection<java.lang.Integer>)"], ["int", "com.hazelcast.map.impl.query.QueryResult.getFactoryId()"], ["int", "com.hazelcast.map.impl.query.QueryResult.getId()"], ["void", "com.hazelcast.map.impl.query.QueryResult.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.query.QueryResult.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.QueryResult.createSubResult()"], ["void", "com.hazelcast.map.impl.query.QueryResult.combine(com.hazelcast.map.impl.query.Result)"], ["com.hazelcast.map.impl.query.DefaultIndexProvider", "com.hazelcast.map.impl.query.DefaultIndexProvider()"], ["com.hazelcast.query.impl.Index", "com.hazelcast.map.impl.query.DefaultIndexProvider.createIndex(java.lang.String, boolean, com.hazelcast.query.impl.getters.Extractors, com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.query.impl.IndexCopyBehavior)"], ["java.util.Set", "com.hazelcast.map.impl.query.QueryResultUtils.transformToSet(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.impl.query.QueryResult, com.hazelcast.query.Predicate, com.hazelcast.util.IterationType, boolean, boolean)"], ["com.hazelcast.map.impl.query.Query", "com.hazelcast.map.impl.query.Query()"], ["com.hazelcast.map.impl.query.Query", "com.hazelcast.map.impl.query.Query(java.lang.String, com.hazelcast.query.Predicate, com.hazelcast.util.IterationType, com.hazelcast.aggregation.Aggregator, com.hazelcast.projection.Projection)"], ["java.lang.String", "com.hazelcast.map.impl.query.Query.getMapName()"], ["com.hazelcast.query.Predicate", "com.hazelcast.map.impl.query.Query.getPredicate()"], ["com.hazelcast.util.IterationType", "com.hazelcast.map.impl.query.Query.getIterationType()"], ["com.hazelcast.aggregation.Aggregator", "com.hazelcast.map.impl.query.Query.getAggregator()"], ["java.lang.Class<? extends com.hazelcast.map.impl.query.Result>", "com.hazelcast.map.impl.query.Query.getResultType()"], ["boolean", "com.hazelcast.map.impl.query.Query.isAggregationQuery()"], ["com.hazelcast.projection.Projection", "com.hazelcast.map.impl.query.Query.getProjection()"], ["boolean", "com.hazelcast.map.impl.query.Query.isProjectionQuery()"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.Query.createResult(com.hazelcast.spi.serialization.SerializationService, long)"], ["com.hazelcast.map.impl.query.Query$QueryBuilder", "com.hazelcast.map.impl.query.Query.of()"], ["com.hazelcast.map.impl.query.Query$QueryBuilder", "com.hazelcast.map.impl.query.Query.of(com.hazelcast.map.impl.query.Query)"], ["int", "com.hazelcast.map.impl.query.Query.getFactoryId()"], ["int", "com.hazelcast.map.impl.query.Query.getId()"], ["void", "com.hazelcast.map.impl.query.Query.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.query.Query.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.map.impl.query.AggregationResult", "com.hazelcast.map.impl.query.AggregationResult()"], ["com.hazelcast.map.impl.query.AggregationResult", "com.hazelcast.map.impl.query.AggregationResult(com.hazelcast.aggregation.Aggregator, com.hazelcast.spi.serialization.SerializationService)"], ["<R> com.hazelcast.aggregation.Aggregator<?, R>", "com.hazelcast.map.impl.query.AggregationResult.getAggregator()"], ["void", "com.hazelcast.map.impl.query.AggregationResult.combine(com.hazelcast.map.impl.query.AggregationResult)"], ["void", "com.hazelcast.map.impl.query.AggregationResult.onCombineFinished()"], ["void", "com.hazelcast.map.impl.query.AggregationResult.add(com.hazelcast.query.impl.QueryableEntry)"], ["com.hazelcast.map.impl.query.AggregationResult", "com.hazelcast.map.impl.query.AggregationResult.createSubResult()"], ["void", "com.hazelcast.map.impl.query.AggregationResult.orderAndLimit(com.hazelcast.query.PagingPredicate, java.util.Map$Entry<java.lang.Integer, java.util.Map$Entry>)"], ["void", "com.hazelcast.map.impl.query.AggregationResult.completeConstruction(java.util.Collection<java.lang.Integer>)"], ["void", "com.hazelcast.map.impl.query.AggregationResult.setPartitionIds(java.util.Collection<java.lang.Integer>)"], ["int", "com.hazelcast.map.impl.query.AggregationResult.getFactoryId()"], ["int", "com.hazelcast.map.impl.query.AggregationResult.getId()"], ["void", "com.hazelcast.map.impl.query.AggregationResult.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.query.AggregationResult.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.AggregationResult.createSubResult()"], ["void", "com.hazelcast.map.impl.query.AggregationResult.combine(com.hazelcast.map.impl.query.Result)"], ["com.hazelcast.map.impl.query.CallerRunsPartitionScanExecutor", "com.hazelcast.map.impl.query.CallerRunsPartitionScanExecutor(com.hazelcast.map.impl.query.PartitionScanRunner)"], ["void", "com.hazelcast.map.impl.query.CallerRunsPartitionScanExecutor.execute(java.lang.String, com.hazelcast.query.Predicate, java.util.Collection<java.lang.Integer>, com.hazelcast.map.impl.query.Result)"], ["com.hazelcast.query.impl.QueryableEntriesSegment", "com.hazelcast.map.impl.query.CallerRunsPartitionScanExecutor.execute(java.lang.String, com.hazelcast.query.Predicate, int, int, int)"], ["com.hazelcast.map.impl.query.QueryOperation", "com.hazelcast.map.impl.query.QueryOperation()"], ["com.hazelcast.map.impl.query.QueryOperation", "com.hazelcast.map.impl.query.QueryOperation(com.hazelcast.map.impl.query.Query)"], ["void", "com.hazelcast.map.impl.query.QueryOperation.run()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.map.impl.query.QueryOperation.onInvocationException(java.lang.Throwable)"], ["java.lang.Object", "com.hazelcast.map.impl.query.QueryOperation.getResponse()"], ["int", "com.hazelcast.map.impl.query.QueryOperation.getId()"], ["com.hazelcast.map.impl.query.QueryEventFilter", "com.hazelcast.map.impl.query.QueryEventFilter()"], ["com.hazelcast.map.impl.query.QueryEventFilter", "com.hazelcast.map.impl.query.QueryEventFilter(boolean, com.hazelcast.nio.serialization.Data, com.hazelcast.query.Predicate)"], ["java.lang.Object", "com.hazelcast.map.impl.query.QueryEventFilter.getPredicate()"], ["boolean", "com.hazelcast.map.impl.query.QueryEventFilter.eval(java.lang.Object)"], ["void", "com.hazelcast.map.impl.query.QueryEventFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.query.QueryEventFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.impl.query.QueryEventFilter.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.query.QueryEventFilter.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.query.QueryEventFilter.toString()"], ["int", "com.hazelcast.map.impl.query.QueryEventFilter.getId()"], ["com.hazelcast.map.impl.query.AggregationResultProcessor", "com.hazelcast.map.impl.query.AggregationResultProcessor(com.hazelcast.map.impl.query.AccumulationExecutor, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.map.impl.query.AggregationResult", "com.hazelcast.map.impl.query.AggregationResultProcessor.populateResult(com.hazelcast.map.impl.query.Query, long, java.util.Collection<com.hazelcast.query.impl.QueryableEntry>, java.util.Collection<java.lang.Integer>)"], ["com.hazelcast.map.impl.query.AggregationResult", "com.hazelcast.map.impl.query.AggregationResultProcessor.populateResult(com.hazelcast.map.impl.query.Query, long)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.AggregationResultProcessor.populateResult(com.hazelcast.map.impl.query.Query, long, java.util.Collection, java.util.Collection)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.AggregationResultProcessor.populateResult(com.hazelcast.map.impl.query.Query, long)"], ["com.hazelcast.map.impl.query.QueryResultCollection", "com.hazelcast.map.impl.query.QueryResultCollection(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.util.IterationType, boolean, boolean)"], ["com.hazelcast.map.impl.query.QueryResultCollection", "com.hazelcast.map.impl.query.QueryResultCollection(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.util.IterationType, boolean, boolean, com.hazelcast.map.impl.query.QueryResult)"], ["com.hazelcast.util.IterationType", "com.hazelcast.map.impl.query.QueryResultCollection.getIterationType()"], ["void", "com.hazelcast.map.impl.query.QueryResultCollection.addAllRows(java.util.Collection<com.hazelcast.map.impl.query.QueryResultRow>)"], ["int", "com.hazelcast.map.impl.query.QueryResultCollection.size()"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.ParallelPartitionScanExecutor$QueryPartitionCallable.call()"], ["java.lang.Object", "com.hazelcast.map.impl.query.ParallelPartitionScanExecutor$QueryPartitionCallable.call()"], ["com.hazelcast.map.impl.query.Target$TargetBuilder", "com.hazelcast.map.impl.query.Target$TargetBuilder.allNodes()"], ["com.hazelcast.map.impl.query.Target$TargetBuilder", "com.hazelcast.map.impl.query.Target$TargetBuilder.localNode()"], ["com.hazelcast.map.impl.query.Target$TargetBuilder", "com.hazelcast.map.impl.query.Target$TargetBuilder.partitionOwner(int)"], ["com.hazelcast.map.impl.query.Target", "com.hazelcast.map.impl.query.Target$TargetBuilder.build()"], ["com.hazelcast.map.impl.query.MapQueryEngineImpl", "com.hazelcast.map.impl.query.MapQueryEngineImpl(com.hazelcast.map.impl.MapServiceContext)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.MapQueryEngineImpl.execute(com.hazelcast.map.impl.query.Query, com.hazelcast.map.impl.query.Target)"], ["com.hazelcast.map.impl.query.QueryRunner", "com.hazelcast.map.impl.query.QueryRunner(com.hazelcast.map.impl.MapServiceContext, com.hazelcast.query.impl.predicates.QueryOptimizer, com.hazelcast.map.impl.query.PartitionScanExecutor, com.hazelcast.map.impl.query.ResultProcessorRegistry)"], ["com.hazelcast.map.impl.query.ResultSegment", "com.hazelcast.map.impl.query.QueryRunner.runPartitionScanQueryOnPartitionChunk(com.hazelcast.map.impl.query.Query, int, int, int)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.QueryRunner.runIndexOrPartitionScanQueryOnOwnedPartitions(com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.QueryRunner.runIndexQueryOnOwnedPartitions(com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.QueryRunner.runPartitionIndexOrPartitionScanQueryOnGivenOwnedPartition(com.hazelcast.map.impl.query.Query, int)"], ["com.hazelcast.map.impl.query.CallerRunsAccumulationExecutor", "com.hazelcast.map.impl.query.CallerRunsAccumulationExecutor(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.map.impl.query.AggregationResult", "com.hazelcast.map.impl.query.CallerRunsAccumulationExecutor.execute(com.hazelcast.aggregation.Aggregator, java.util.Collection<com.hazelcast.query.impl.QueryableEntry>, java.util.Collection<java.lang.Integer>)"], ["com.hazelcast.map.impl.query.QueryResultProcessor", "com.hazelcast.map.impl.query.QueryResultProcessor(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.map.impl.query.QueryResult", "com.hazelcast.map.impl.query.QueryResultProcessor.populateResult(com.hazelcast.map.impl.query.Query, long, java.util.Collection<com.hazelcast.query.impl.QueryableEntry>, java.util.Collection<java.lang.Integer>)"], ["com.hazelcast.map.impl.query.QueryResult", "com.hazelcast.map.impl.query.QueryResultProcessor.populateResult(com.hazelcast.map.impl.query.Query, long)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.QueryResultProcessor.populateResult(com.hazelcast.map.impl.query.Query, long, java.util.Collection, java.util.Collection)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.QueryResultProcessor.populateResult(com.hazelcast.map.impl.query.Query, long)"], ["com.hazelcast.map.impl.query.Target", "com.hazelcast.map.impl.query.Target()"], ["java.lang.Integer", "com.hazelcast.map.impl.query.Target.getPartitionId()"], ["boolean", "com.hazelcast.map.impl.query.Target.isTargetLocalNode()"], ["boolean", "com.hazelcast.map.impl.query.Target.isTargetAllNodes()"], ["boolean", "com.hazelcast.map.impl.query.Target.isTargetPartitionOwner()"], ["int", "com.hazelcast.map.impl.query.Target.getFactoryId()"], ["int", "com.hazelcast.map.impl.query.Target.getId()"], ["void", "com.hazelcast.map.impl.query.Target.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.query.Target.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.map.impl.query.Target$TargetBuilder", "com.hazelcast.map.impl.query.Target.of()"], ["com.hazelcast.map.impl.query.ResultSegment", "com.hazelcast.map.impl.query.ResultSegment()"], ["com.hazelcast.map.impl.query.ResultSegment", "com.hazelcast.map.impl.query.ResultSegment(com.hazelcast.map.impl.query.Result, int)"], ["com.hazelcast.map.impl.query.Result", "com.hazelcast.map.impl.query.ResultSegment.getResult()"], ["void", "com.hazelcast.map.impl.query.ResultSegment.setResult(com.hazelcast.map.impl.query.Result)"], ["int", "com.hazelcast.map.impl.query.ResultSegment.getNextTableIndexToReadFrom()"], ["void", "com.hazelcast.map.impl.query.ResultSegment.setNextTableIndexToReadFrom(int)"], ["int", "com.hazelcast.map.impl.query.ResultSegment.getFactoryId()"], ["int", "com.hazelcast.map.impl.query.ResultSegment.getId()"], ["void", "com.hazelcast.map.impl.query.ResultSegment.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.query.ResultSegment.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$26.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$38.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$38.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$5$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$5$1.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.eviction.ExpirationManager", "com.hazelcast.map.impl.eviction.ExpirationManager(com.hazelcast.map.impl.PartitionContainer[], com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.map.impl.eviction.ExpirationManager.scheduleExpirationTask()"], ["void", "com.hazelcast.map.impl.eviction.ExpirationManager.stateChanged(com.hazelcast.core.LifecycleEvent)"], ["void", "com.hazelcast.map.impl.eviction.ExpirationManager.onClusterStateChange(com.hazelcast.cluster.ClusterState)"], ["void", "com.hazelcast.map.impl.eviction.ExpirationManager.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.eviction.ExpirationManager.canPrimaryDriveExpiration()"], ["void", "com.hazelcast.map.impl.eviction.ExpirationManager.sendExpiredKeysToBackups(com.hazelcast.map.impl.recordstore.RecordStore, boolean)"], ["com.hazelcast.map.impl.eviction.EvictionChecker", "com.hazelcast.map.impl.eviction.EvictionChecker(com.hazelcast.util.MemoryInfoAccessor, com.hazelcast.map.impl.MapServiceContext)"], ["boolean", "com.hazelcast.map.impl.eviction.EvictionChecker.checkEvictable(com.hazelcast.map.impl.recordstore.RecordStore)"], ["double", "com.hazelcast.map.impl.eviction.EvictionChecker.translatePerNodeSizeToPartitionSize(com.hazelcast.map.impl.recordstore.RecordStore)"], ["com.hazelcast.map.impl.eviction.EvictorImpl", "com.hazelcast.map.impl.eviction.EvictorImpl(com.hazelcast.map.eviction.MapEvictionPolicy, com.hazelcast.map.impl.eviction.EvictionChecker, com.hazelcast.spi.partition.IPartitionService, int)"], ["void", "com.hazelcast.map.impl.eviction.EvictorImpl.evict(com.hazelcast.map.impl.recordstore.RecordStore, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.eviction.EvictorImpl.checkEvictable(com.hazelcast.map.impl.recordstore.RecordStore)"], ["void", "com.hazelcast.map.impl.eviction.Evictor$1.evict(com.hazelcast.map.impl.recordstore.RecordStore, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.eviction.Evictor$1.checkEvictable(com.hazelcast.map.impl.recordstore.RecordStore)"], ["int", "com.hazelcast.map.impl.eviction.ExpirationManager$ClearExpiredRecordsTask$1.compare(com.hazelcast.map.impl.PartitionContainer, com.hazelcast.map.impl.PartitionContainer)"], ["int", "com.hazelcast.map.impl.eviction.ExpirationManager$ClearExpiredRecordsTask$1.compare(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.eviction.ExpirationManager$ClearExpiredRecordsTask.run()"], ["java.lang.String", "com.hazelcast.map.impl.eviction.ExpirationManager$ClearExpiredRecordsTask.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$52.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$52.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$82.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$82.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$125.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$125.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$135.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$135.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$86.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$86.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$114.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$114.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$90.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$90.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$107.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$107.createNew(java.lang.Object)"], ["com.hazelcast.concurrent.lock.LockStoreInfo", "com.hazelcast.map.impl.MapManagedService$ObjectNamespaceLockStoreInfoConstructorFunction.createNew(com.hazelcast.spi.ObjectNamespace)"], ["java.lang.Object", "com.hazelcast.map.impl.MapManagedService$ObjectNamespaceLockStoreInfoConstructorFunction.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$88.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$88.createNew(java.lang.Object)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.map.impl.MapRemoteService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.map.impl.MapRemoteService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$117.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$117.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$29.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.event.AbstractEventData", "com.hazelcast.map.impl.event.AbstractEventData()"], ["com.hazelcast.map.impl.event.AbstractEventData", "com.hazelcast.map.impl.event.AbstractEventData(java.lang.String, java.lang.String, com.hazelcast.nio.Address, int)"], ["java.lang.String", "com.hazelcast.map.impl.event.AbstractEventData.getSource()"], ["java.lang.String", "com.hazelcast.map.impl.event.AbstractEventData.getMapName()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.event.AbstractEventData.getCaller()"], ["int", "com.hazelcast.map.impl.event.AbstractEventData.getEventType()"], ["void", "com.hazelcast.map.impl.event.AbstractEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.event.AbstractEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.event.AbstractEventData.toString()"], ["com.hazelcast.map.impl.event.MapEventData", "com.hazelcast.map.impl.event.MapEventData()"], ["com.hazelcast.map.impl.event.MapEventData", "com.hazelcast.map.impl.event.MapEventData(java.lang.String, java.lang.String, com.hazelcast.nio.Address, int, int)"], ["int", "com.hazelcast.map.impl.event.MapEventData.getNumberOfEntries()"], ["void", "com.hazelcast.map.impl.event.MapEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.event.MapEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.event.MapEventData.toString()"], ["int", "com.hazelcast.map.impl.event.MapEventData.getEventType()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.event.MapEventData.getCaller()"], ["java.lang.String", "com.hazelcast.map.impl.event.MapEventData.getMapName()"], ["java.lang.String", "com.hazelcast.map.impl.event.MapEventData.getSource()"], ["com.hazelcast.map.impl.event.MapPartitionEventData", "com.hazelcast.map.impl.event.MapPartitionEventData()"], ["com.hazelcast.map.impl.event.MapPartitionEventData", "com.hazelcast.map.impl.event.MapPartitionEventData(java.lang.String, java.lang.String, com.hazelcast.nio.Address, int)"], ["int", "com.hazelcast.map.impl.event.MapPartitionEventData.getPartitionId()"], ["void", "com.hazelcast.map.impl.event.MapPartitionEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.event.MapPartitionEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.event.MapPartitionEventData.toString()"], ["int", "com.hazelcast.map.impl.event.MapPartitionEventData.getEventType()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.event.MapPartitionEventData.getCaller()"], ["java.lang.String", "com.hazelcast.map.impl.event.MapPartitionEventData.getMapName()"], ["java.lang.String", "com.hazelcast.map.impl.event.MapPartitionEventData.getSource()"], ["com.hazelcast.map.impl.event.EntryEventData", "com.hazelcast.map.impl.event.EntryEventData()"], ["com.hazelcast.map.impl.event.EntryEventData", "com.hazelcast.map.impl.event.EntryEventData(java.lang.String, java.lang.String, com.hazelcast.nio.Address, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.map.impl.event.EntryEventData", "com.hazelcast.map.impl.event.EntryEventData(java.lang.String, java.lang.String, com.hazelcast.nio.Address, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.event.EntryEventData.getDataKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.event.EntryEventData.getDataNewValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.event.EntryEventData.getDataOldValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.event.EntryEventData.getDataMergingValue()"], ["void", "com.hazelcast.map.impl.event.EntryEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.event.EntryEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.event.EntryEventData.toString()"], ["int", "com.hazelcast.map.impl.event.EntryEventData.getEventType()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.event.EntryEventData.getCaller()"], ["java.lang.String", "com.hazelcast.map.impl.event.EntryEventData.getMapName()"], ["java.lang.String", "com.hazelcast.map.impl.event.EntryEventData.getSource()"], ["com.hazelcast.map.impl.event.EntryEventData", "com.hazelcast.map.impl.event.QueryCacheNaturalFilteringStrategy$EntryEventDataPerEventTypeCache.getOrCreateEventData(java.lang.String, com.hazelcast.nio.Address, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object, java.lang.Object, int, boolean)"], ["boolean", "com.hazelcast.map.impl.event.QueryCacheNaturalFilteringStrategy$EntryEventDataPerEventTypeCache.isEmpty()"], ["com.hazelcast.map.impl.event.EntryEventData", "com.hazelcast.map.impl.event.DefaultEntryEventFilteringStrategy$DefaultEntryEventDataCache.getOrCreateEventData(java.lang.String, com.hazelcast.nio.Address, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object, java.lang.Object, int, boolean)"], ["boolean", "com.hazelcast.map.impl.event.DefaultEntryEventFilteringStrategy$DefaultEntryEventDataCache.isEmpty()"], ["com.hazelcast.map.impl.event.MapEventPublishingService", "com.hazelcast.map.impl.event.MapEventPublishingService(com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.event.MapEventPublishingService.dispatchEvent(java.lang.Object, com.hazelcast.map.impl.ListenerAdapter)"], ["void", "com.hazelcast.map.impl.event.MapEventPublishingService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.map.impl.event.AbstractFilteringStrategy", "com.hazelcast.map.impl.event.AbstractFilteringStrategy(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.impl.MapServiceContext)"], ["com.hazelcast.map.impl.event.MapEventPublisherImpl", "com.hazelcast.map.impl.event.MapEventPublisherImpl(com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.publishWanReplicationUpdate(java.lang.String, com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.publishWanReplicationRemove(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.publishWanReplicationUpdateBackup(java.lang.String, com.hazelcast.core.EntryView)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.publishWanReplicationRemoveBackup(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.publishMapEvent(com.hazelcast.nio.Address, java.lang.String, com.hazelcast.core.EntryEventType, int)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.publishEvent(com.hazelcast.nio.Address, java.lang.String, com.hazelcast.core.EntryEventType, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.publishEvent(com.hazelcast.nio.Address, java.lang.String, com.hazelcast.core.EntryEventType, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.publishMapPartitionLostEvent(com.hazelcast.nio.Address, java.lang.String, int)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.hintMapEvent(com.hazelcast.nio.Address, java.lang.String, com.hazelcast.core.EntryEventType, int, int)"], ["void", "com.hazelcast.map.impl.event.MapEventPublisherImpl.addEventToQueryCache(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.event.MapEventPublisherImpl.hasEventListener(java.lang.String)"], ["com.hazelcast.map.impl.event.QueryCacheEventPublisher", "com.hazelcast.map.impl.event.QueryCacheEventPublisher(com.hazelcast.map.impl.event.FilteringStrategy, com.hazelcast.map.impl.querycache.QueryCacheContext, com.hazelcast.internal.serialization.InternalSerializationService)"], ["void", "com.hazelcast.map.impl.event.QueryCacheEventPublisher.addEventToQueryCache(java.lang.Object)"], ["void", "com.hazelcast.map.impl.event.QueryCacheEventPublisher.hintMapEvent(com.hazelcast.nio.Address, java.lang.String, com.hazelcast.core.EntryEventType, int, int)"], ["com.hazelcast.map.impl.event.DefaultEntryEventFilteringStrategy", "com.hazelcast.map.impl.event.DefaultEntryEventFilteringStrategy(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.impl.MapServiceContext)"], ["int", "com.hazelcast.map.impl.event.DefaultEntryEventFilteringStrategy.doFilter(com.hazelcast.spi.EventFilter, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object, com.hazelcast.core.EntryEventType, java.lang.String)"], ["com.hazelcast.map.impl.event.EntryEventDataCache", "com.hazelcast.map.impl.event.DefaultEntryEventFilteringStrategy.getEntryEventDataCache()"], ["java.lang.String", "com.hazelcast.map.impl.event.DefaultEntryEventFilteringStrategy.toString()"], ["com.hazelcast.map.impl.event.QueryCacheNaturalFilteringStrategy", "com.hazelcast.map.impl.event.QueryCacheNaturalFilteringStrategy(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.impl.MapServiceContext)"], ["int", "com.hazelcast.map.impl.event.QueryCacheNaturalFilteringStrategy.doFilter(com.hazelcast.spi.EventFilter, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object, com.hazelcast.core.EntryEventType, java.lang.String)"], ["com.hazelcast.map.impl.event.EntryEventDataCache", "com.hazelcast.map.impl.event.QueryCacheNaturalFilteringStrategy.getEntryEventDataCache()"], ["java.lang.String", "com.hazelcast.map.impl.event.QueryCacheNaturalFilteringStrategy.toString()"], ["com.hazelcast.map.impl.PartitioningStrategyFactory", "com.hazelcast.map.impl.PartitioningStrategyFactory(java.lang.ClassLoader)"], ["com.hazelcast.core.PartitioningStrategy", "com.hazelcast.map.impl.PartitioningStrategyFactory.getPartitioningStrategy(java.lang.String, com.hazelcast.config.PartitioningStrategyConfig)"], ["void", "com.hazelcast.map.impl.PartitioningStrategyFactory.removePartitioningStrategyFromCache(java.lang.String)"], ["long", "com.hazelcast.map.impl.OwnedEntryCostEstimatorFactory$ZeroEntryCostEstimator.getEstimate()"], ["void", "com.hazelcast.map.impl.OwnedEntryCostEstimatorFactory$ZeroEntryCostEstimator.adjustEstimateBy(long)"], ["long", "com.hazelcast.map.impl.OwnedEntryCostEstimatorFactory$ZeroEntryCostEstimator.calculateValueCost(java.lang.Object)"], ["long", "com.hazelcast.map.impl.OwnedEntryCostEstimatorFactory$ZeroEntryCostEstimator.calculateEntryCost(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.OwnedEntryCostEstimatorFactory$ZeroEntryCostEstimator.reset()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$73.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$73.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$7.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$7.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$3.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapQuorumAwareService", "com.hazelcast.map.impl.MapQuorumAwareService(com.hazelcast.map.impl.MapServiceContext)"], ["java.lang.String", "com.hazelcast.map.impl.MapQuorumAwareService.getQuorumName(java.lang.String)"], ["void", "com.hazelcast.map.impl.MapQuorumAwareService.onDestroy(java.lang.String)"], ["com.hazelcast.map.impl.MapIndexSynchronizer", "com.hazelcast.map.impl.MapIndexSynchronizer(com.hazelcast.map.impl.MapServiceContext, com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.map.impl.MapIndexSynchronizer.onClusterVersionChange(com.hazelcast.version.Version)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.wan.MapReplicationRemove", "com.hazelcast.map.impl.wan.MapReplicationRemove(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.wan.MapReplicationRemove", "com.hazelcast.map.impl.wan.MapReplicationRemove()"], ["java.lang.String", "com.hazelcast.map.impl.wan.MapReplicationRemove.getMapName()"], ["void", "com.hazelcast.map.impl.wan.MapReplicationRemove.setMapName(java.lang.String)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.wan.MapReplicationRemove.getKey()"], ["void", "com.hazelcast.map.impl.wan.MapReplicationRemove.setKey(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.map.impl.wan.MapReplicationRemove.getRemoveTime()"], ["void", "com.hazelcast.map.impl.wan.MapReplicationRemove.setRemoveTime(long)"], ["void", "com.hazelcast.map.impl.wan.MapReplicationRemove.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.wan.MapReplicationRemove.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.wan.MapReplicationRemove.getFactoryId()"], ["int", "com.hazelcast.map.impl.wan.MapReplicationRemove.getId()"], ["void", "com.hazelcast.map.impl.wan.MapReplicationRemove.incrementEventCount(com.hazelcast.wan.impl.WanEventCounter)"], ["com.hazelcast.map.impl.wan.MapReplicationUpdate", "com.hazelcast.map.impl.wan.MapReplicationUpdate()"], ["com.hazelcast.map.impl.wan.MapReplicationUpdate", "com.hazelcast.map.impl.wan.MapReplicationUpdate(java.lang.String, java.lang.Object, com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["java.lang.String", "com.hazelcast.map.impl.wan.MapReplicationUpdate.getMapName()"], ["void", "com.hazelcast.map.impl.wan.MapReplicationUpdate.setMapName(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.wan.MapReplicationUpdate.getMergePolicy()"], ["void", "com.hazelcast.map.impl.wan.MapReplicationUpdate.setMergePolicy(java.lang.Object)"], ["com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>", "com.hazelcast.map.impl.wan.MapReplicationUpdate.getEntryView()"], ["void", "com.hazelcast.map.impl.wan.MapReplicationUpdate.setEntryView(com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.map.impl.wan.MapReplicationUpdate.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.wan.MapReplicationUpdate.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.wan.MapReplicationUpdate.getFactoryId()"], ["int", "com.hazelcast.map.impl.wan.MapReplicationUpdate.getId()"], ["void", "com.hazelcast.map.impl.wan.MapReplicationUpdate.incrementEventCount(com.hazelcast.wan.impl.WanEventCounter)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.wan.MapReplicationUpdate.getKey()"], ["com.hazelcast.map.impl.EntryEventFilter", "com.hazelcast.map.impl.EntryEventFilter(boolean, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.EntryEventFilter", "com.hazelcast.map.impl.EntryEventFilter()"], ["boolean", "com.hazelcast.map.impl.EntryEventFilter.isIncludeValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.EntryEventFilter.getKey()"], ["boolean", "com.hazelcast.map.impl.EntryEventFilter.eval(java.lang.Object)"], ["void", "com.hazelcast.map.impl.EntryEventFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.EntryEventFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.impl.EntryEventFilter.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.EntryEventFilter.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.EntryEventFilter.toString()"], ["int", "com.hazelcast.map.impl.EntryEventFilter.getFactoryId()"], ["int", "com.hazelcast.map.impl.EntryEventFilter.getId()"], ["com.hazelcast.map.impl.InterceptorRegistry", "com.hazelcast.map.impl.InterceptorRegistry()"], ["java.util.Map<java.lang.String, com.hazelcast.map.MapInterceptor>", "com.hazelcast.map.impl.InterceptorRegistry.getId2InterceptorMap()"], ["synchronized", "com.hazelcast.map.impl.InterceptorRegistry.void register(java.lang.String, com.hazelcast.map.MapInterceptor)"], ["synchronized", "com.hazelcast.map.impl.InterceptorRegistry.void deregister(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$71.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$71.createNew(java.lang.Object)"], ["java.lang.Boolean", "com.hazelcast.map.impl.MapKeyLoader$LoadFinishedFuture.get(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.map.impl.MapKeyLoader$LoadFinishedFuture.onResponse(java.lang.Boolean)"], ["void", "com.hazelcast.map.impl.MapKeyLoader$LoadFinishedFuture.onFailure(java.lang.Throwable)"], ["java.lang.String", "com.hazelcast.map.impl.MapKeyLoader$LoadFinishedFuture.toString()"], ["java.lang.Object", "com.hazelcast.map.impl.MapKeyLoader$LoadFinishedFuture.get(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.map.impl.MapKeyLoader$LoadFinishedFuture.onResponse(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$23.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$2$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$2$1.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$59.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$59.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.PartitionContainer$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.PartitionContainer$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$35.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$35.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.LazyEntryView", "com.hazelcast.map.impl.LazyEntryView()"], ["com.hazelcast.map.impl.LazyEntryView", "com.hazelcast.map.impl.LazyEntryView(K, V, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.merge.MapMergePolicy)"], ["K", "com.hazelcast.map.impl.LazyEntryView.getKey()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setKey(K)"], ["V", "com.hazelcast.map.impl.LazyEntryView.getValue()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setValue(V)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getCost()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setCost(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getCreationTime()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setCreationTime(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getExpirationTime()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setExpirationTime(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getHits()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setHits(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getLastAccessTime()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setLastAccessTime(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getLastStoredTime()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setLastStoredTime(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getLastUpdateTime()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setLastUpdateTime(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getVersion()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setVersion(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getEvictionCriteriaNumber()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setEvictionCriteriaNumber(long)"], ["long", "com.hazelcast.map.impl.LazyEntryView.getTtl()"], ["com.hazelcast.map.impl.LazyEntryView<K, V>", "com.hazelcast.map.impl.LazyEntryView.setTtl(long)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$4.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$39.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$39.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$143.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$143.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.map.impl.client.MapPortableHook$MapPortableFactory.create(int)"], ["com.hazelcast.map.impl.client.MapPortableHook", "com.hazelcast.map.impl.client.MapPortableHook()"], ["int", "com.hazelcast.map.impl.client.MapPortableHook.getFactoryId()"], ["com.hazelcast.nio.serialization.PortableFactory", "com.hazelcast.map.impl.client.MapPortableHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$17.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$5$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$5$1.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$50.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$50.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$142.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$142.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$87.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$87.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapService", "com.hazelcast.map.impl.MapServiceConstructor$1.createNew(com.hazelcast.spi.NodeEngine)"], ["java.lang.Object", "com.hazelcast.map.impl.MapServiceConstructor$1.createNew(java.lang.Object)"], ["<T> com.hazelcast.map.impl.ListenerAdapter<T>", "com.hazelcast.map.impl.ListenerAdapters.createListenerAdapter(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$7$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$7$1.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.MapKeyLoader$Role[]", "com.hazelcast.map.impl.MapKeyLoader$Role.values()"], ["com.hazelcast.map.impl.MapKeyLoader$Role", "com.hazelcast.map.impl.MapKeyLoader$Role.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$92.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$92.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.nearcache.MemberMinimalPartitionService", "com.hazelcast.map.impl.nearcache.MemberMinimalPartitionService(com.hazelcast.spi.partition.IPartitionService)"], ["int", "com.hazelcast.map.impl.nearcache.MemberMinimalPartitionService.getPartitionId(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.map.impl.nearcache.MemberMinimalPartitionService.getPartitionId(java.lang.Object)"], ["int", "com.hazelcast.map.impl.nearcache.MemberMinimalPartitionService.getPartitionCount()"], ["com.hazelcast.map.impl.nearcache.invalidation.MemberMapMetaDataFetcher", "com.hazelcast.map.impl.nearcache.invalidation.MemberMapMetaDataFetcher(com.hazelcast.internal.cluster.ClusterService, com.hazelcast.spi.OperationService, com.hazelcast.logging.ILogger)"], ["com.hazelcast.map.impl.nearcache.invalidation.UuidFilter", "com.hazelcast.map.impl.nearcache.invalidation.UuidFilter()"], ["com.hazelcast.map.impl.nearcache.invalidation.UuidFilter", "com.hazelcast.map.impl.nearcache.invalidation.UuidFilter(java.lang.String)"], ["boolean", "com.hazelcast.map.impl.nearcache.invalidation.UuidFilter.eval(java.lang.Object)"], ["void", "com.hazelcast.map.impl.nearcache.invalidation.UuidFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.nearcache.invalidation.UuidFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.nearcache.invalidation.UuidFilter.toString()"], ["int", "com.hazelcast.map.impl.nearcache.invalidation.UuidFilter.getFactoryId()"], ["int", "com.hazelcast.map.impl.nearcache.invalidation.UuidFilter.getId()"], ["java.lang.Boolean", "com.hazelcast.map.impl.nearcache.MapNearCacheManager$InvalidationAcceptorFilter.apply(com.hazelcast.spi.EventRegistration)"], ["java.lang.Object", "com.hazelcast.map.impl.nearcache.MapNearCacheManager$InvalidationAcceptorFilter.apply(java.lang.Object)"], ["com.hazelcast.map.impl.nearcache.MapNearCacheManager", "com.hazelcast.map.impl.nearcache.MapNearCacheManager(com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.nearcache.MapNearCacheManager.reset()"], ["void", "com.hazelcast.map.impl.nearcache.MapNearCacheManager.shutdown()"], ["boolean", "com.hazelcast.map.impl.nearcache.MapNearCacheManager.destroyNearCache(java.lang.String)"], ["com.hazelcast.internal.nearcache.impl.invalidation.Invalidator", "com.hazelcast.map.impl.nearcache.MapNearCacheManager.getInvalidator()"], ["com.hazelcast.internal.nearcache.impl.invalidation.RepairingHandler", "com.hazelcast.map.impl.nearcache.MapNearCacheManager.newRepairingHandler(java.lang.String, com.hazelcast.internal.nearcache.NearCache)"], ["void", "com.hazelcast.map.impl.nearcache.MapNearCacheManager.deregisterRepairingHandler(java.lang.String)"], ["com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask", "com.hazelcast.map.impl.nearcache.MapNearCacheManager.getRepairingTask()"], ["com.hazelcast.map.impl.MapService", "com.hazelcast.map.impl.AbstractMapServiceFactory.createMapService()"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$9.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$9.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$64.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$64.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.SimpleEntryView", "com.hazelcast.map.impl.SimpleEntryView(K, V)"], ["com.hazelcast.map.impl.SimpleEntryView", "com.hazelcast.map.impl.SimpleEntryView()"], ["K", "com.hazelcast.map.impl.SimpleEntryView.getKey()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setKey(K)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withKey(K)"], ["V", "com.hazelcast.map.impl.SimpleEntryView.getValue()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setValue(V)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withValue(V)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getCost()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setCost(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withCost(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getCreationTime()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setCreationTime(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withCreationTime(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getExpirationTime()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setExpirationTime(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withExpirationTime(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getHits()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setHits(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withHits(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getLastAccessTime()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setLastAccessTime(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withLastAccessTime(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getLastStoredTime()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setLastStoredTime(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withLastStoredTime(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getLastUpdateTime()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setLastUpdateTime(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withLastUpdateTime(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getVersion()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setVersion(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withVersion(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getTtl()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setTtl(long)"], ["com.hazelcast.map.impl.SimpleEntryView<K, V>", "com.hazelcast.map.impl.SimpleEntryView.withTtl(long)"], ["long", "com.hazelcast.map.impl.SimpleEntryView.getEvictionCriteriaNumber()"], ["void", "com.hazelcast.map.impl.SimpleEntryView.setEvictionCriteriaNumber(long)"], ["void", "com.hazelcast.map.impl.SimpleEntryView.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.SimpleEntryView.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.SimpleEntryView.getFactoryId()"], ["int", "com.hazelcast.map.impl.SimpleEntryView.getId()"], ["boolean", "com.hazelcast.map.impl.SimpleEntryView.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.SimpleEntryView.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.SimpleEntryView.toString()"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$1.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$121.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$121.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$9$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$9$1.onEvent(java.lang.Object)"], ["<K, V> com.hazelcast.core.EntryView<K, V>", "com.hazelcast.map.impl.EntryViews.createNullEntryView(K)"], ["<K, V> com.hazelcast.core.EntryView<K, V>", "com.hazelcast.map.impl.EntryViews.createSimpleEntryView()"], ["<K, V> com.hazelcast.core.EntryView<K, V>", "com.hazelcast.map.impl.EntryViews.createSimpleEntryView(K, V, com.hazelcast.map.impl.record.Record)"], ["com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>", "com.hazelcast.map.impl.EntryViews.toSimpleEntryView(com.hazelcast.map.impl.record.Record<com.hazelcast.nio.serialization.Data>)"], ["<K, V> com.hazelcast.core.EntryView<K, V>", "com.hazelcast.map.impl.EntryViews.createLazyEntryView(K, V, com.hazelcast.map.impl.record.Record, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.merge.MapMergePolicy)"], ["<K, V> com.hazelcast.core.EntryView<K, V>", "com.hazelcast.map.impl.EntryViews.convertToLazyEntryView(com.hazelcast.core.EntryView<K, V>, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.merge.MapMergePolicy)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$43.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$43.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.EntryRemovingProcessor", "com.hazelcast.map.impl.EntryRemovingProcessor()"], ["java.lang.Object", "com.hazelcast.map.impl.EntryRemovingProcessor.process(java.util.Map$Entry)"], ["int", "com.hazelcast.map.impl.EntryRemovingProcessor.getFactoryId()"], ["int", "com.hazelcast.map.impl.EntryRemovingProcessor.getId()"], ["void", "com.hazelcast.map.impl.EntryRemovingProcessor.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.EntryRemovingProcessor.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.MapListenerFlagOperator.setAndGetListenerFlags(com.hazelcast.map.impl.ListenerAdapter)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$127.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$127.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapContainer", "com.hazelcast.map.impl.MapContainer(java.lang.String, com.hazelcast.config.Config, com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.MapContainer.initEvictor()"], ["void", "com.hazelcast.map.impl.MapContainer.initWanReplication(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.query.impl.Indexes", "com.hazelcast.map.impl.MapContainer.getIndexes()"], ["com.hazelcast.query.impl.Indexes", "com.hazelcast.map.impl.MapContainer.getIndexes(int)"], ["boolean", "com.hazelcast.map.impl.MapContainer.isGlobalIndexEnabled()"], ["com.hazelcast.wan.WanReplicationPublisher", "com.hazelcast.map.impl.MapContainer.getWanReplicationPublisher()"], ["java.lang.Object", "com.hazelcast.map.impl.MapContainer.getWanMergePolicy()"], ["boolean", "com.hazelcast.map.impl.MapContainer.isWanReplicationEnabled()"], ["boolean", "com.hazelcast.map.impl.MapContainer.isWanRepublishingEnabled()"], ["void", "com.hazelcast.map.impl.MapContainer.checkWanReplicationQueues()"], ["int", "com.hazelcast.map.impl.MapContainer.getTotalBackupCount()"], ["int", "com.hazelcast.map.impl.MapContainer.getBackupCount()"], ["int", "com.hazelcast.map.impl.MapContainer.getAsyncBackupCount()"], ["com.hazelcast.core.PartitioningStrategy", "com.hazelcast.map.impl.MapContainer.getPartitioningStrategy()"], ["com.hazelcast.map.impl.MapServiceContext", "com.hazelcast.map.impl.MapContainer.getMapServiceContext()"], ["com.hazelcast.map.impl.mapstore.MapStoreContext", "com.hazelcast.map.impl.MapContainer.getMapStoreContext()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.map.impl.MapContainer.getMapConfig()"], ["void", "com.hazelcast.map.impl.MapContainer.setMapConfig(com.hazelcast.config.MapConfig)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.map.impl.MapContainer.getEventJournalConfig()"], ["java.lang.String", "com.hazelcast.map.impl.MapContainer.getName()"], ["java.lang.String", "com.hazelcast.map.impl.MapContainer.getQuorumName()"], ["com.hazelcast.core.IFunction<java.lang.Object, com.hazelcast.nio.serialization.Data>", "com.hazelcast.map.impl.MapContainer.toData()"], ["com.hazelcast.util.ConstructorFunction<java.lang.Void, com.hazelcast.map.impl.record.RecordFactory>", "com.hazelcast.map.impl.MapContainer.getRecordFactoryConstructor()"], ["com.hazelcast.query.impl.QueryableEntry", "com.hazelcast.map.impl.MapContainer.newQueryEntry(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["com.hazelcast.map.impl.eviction.Evictor", "com.hazelcast.map.impl.MapContainer.getEvictor()"], ["void", "com.hazelcast.map.impl.MapContainer.setEvictor(com.hazelcast.map.impl.eviction.Evictor)"], ["com.hazelcast.query.impl.getters.Extractors", "com.hazelcast.map.impl.MapContainer.getExtractors()"], ["boolean", "com.hazelcast.map.impl.MapContainer.hasInvalidationListener()"], ["void", "com.hazelcast.map.impl.MapContainer.increaseInvalidationListenerCount()"], ["void", "com.hazelcast.map.impl.MapContainer.decreaseInvalidationListenerCount()"], ["com.hazelcast.map.impl.InterceptorRegistry", "com.hazelcast.map.impl.MapContainer.getInterceptorRegistry()"], ["void", "com.hazelcast.map.impl.MapContainer.onDestroy()"], ["boolean", "com.hazelcast.map.impl.MapContainer.shouldCloneOnEntryProcessing(int)"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.map.impl.MapContainer.getObjectNamespace()"], ["java.util.Map<java.lang.String, java.lang.Boolean>", "com.hazelcast.map.impl.MapContainer.getIndexDefinitions()"], ["void", "com.hazelcast.map.impl.MapContainer.addPartitionIndexToAdd(com.hazelcast.query.impl.IndexInfo)"], ["void", "com.hazelcast.map.impl.MapContainer.clearPartitionIndexesToAdd()"], ["com.hazelcast.map.impl.record.RecordComparator", "com.hazelcast.map.impl.MapServiceContextImpl.getRecordComparator(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.map.impl.MapContainer", "com.hazelcast.map.impl.MapServiceContextImpl.getMapContainer(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.map.impl.MapContainer>", "com.hazelcast.map.impl.MapServiceContextImpl.getMapContainers()"], ["com.hazelcast.map.impl.PartitionContainer", "com.hazelcast.map.impl.MapServiceContextImpl.getPartitionContainer(int)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.initPartitionsContainers()"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.clearMapsHavingLesserBackupCountThan(int, int)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.clearPartitionData(int)"], ["com.hazelcast.map.impl.MapService", "com.hazelcast.map.impl.MapServiceContextImpl.getService()"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.setService(com.hazelcast.map.impl.MapService)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.clearPartitions(boolean, boolean)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.destroyMapStores()"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.flushMaps()"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.destroyMap(java.lang.String)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.reset()"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.shutdown()"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.MapServiceContextImpl.getRecordStore(int, java.lang.String)"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.MapServiceContextImpl.getRecordStore(int, java.lang.String, boolean)"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.MapServiceContextImpl.getExistingRecordStore(int, java.lang.String)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.reloadOwnedPartitions()"], ["java.util.concurrent.atomic.AtomicInteger", "com.hazelcast.map.impl.MapServiceContextImpl.getWriteBehindQueueItemCounter()"], ["com.hazelcast.map.impl.eviction.ExpirationManager", "com.hazelcast.map.impl.MapServiceContextImpl.getExpirationManager()"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.map.impl.MapServiceContextImpl.getNodeEngine()"], ["com.hazelcast.map.merge.MergePolicyProvider", "com.hazelcast.map.impl.MapServiceContextImpl.getMergePolicyProvider()"], ["java.lang.Object", "com.hazelcast.map.impl.MapServiceContextImpl.getMergePolicy(java.lang.String)"], ["com.hazelcast.map.impl.event.MapEventPublisher", "com.hazelcast.map.impl.MapServiceContextImpl.getMapEventPublisher()"], ["com.hazelcast.map.impl.journal.MapEventJournal", "com.hazelcast.map.impl.MapServiceContextImpl.getEventJournal()"], ["com.hazelcast.map.impl.query.MapQueryEngine", "com.hazelcast.map.impl.MapServiceContextImpl.getMapQueryEngine(java.lang.String)"], ["com.hazelcast.map.impl.query.QueryRunner", "com.hazelcast.map.impl.MapServiceContextImpl.getMapQueryRunner(java.lang.String)"], ["com.hazelcast.query.impl.predicates.QueryOptimizer", "com.hazelcast.map.impl.MapServiceContextImpl.getQueryOptimizer()"], ["com.hazelcast.map.impl.LocalMapStatsProvider", "com.hazelcast.map.impl.MapServiceContextImpl.getLocalMapStatsProvider()"], ["java.lang.Object", "com.hazelcast.map.impl.MapServiceContextImpl.toObject(java.lang.Object)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.MapServiceContextImpl.toData(java.lang.Object, com.hazelcast.core.PartitioningStrategy)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.MapServiceContextImpl.toData(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.interceptAfterGet(java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.MapServiceContextImpl.interceptPut(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.interceptAfterPut(java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.MapServiceContextImpl.interceptRemove(java.lang.String, java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.interceptAfterRemove(java.lang.String, java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.addInterceptor(java.lang.String, java.lang.String, com.hazelcast.map.MapInterceptor)"], ["java.lang.String", "com.hazelcast.map.impl.MapServiceContextImpl.generateInterceptorId(java.lang.String, com.hazelcast.map.MapInterceptor)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.removeInterceptor(java.lang.String, java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.MapServiceContextImpl.interceptGet(java.lang.String, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.MapServiceContextImpl.hasInterceptor(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.MapServiceContextImpl.addLocalEventListener(java.lang.Object, java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.MapServiceContextImpl.addLocalEventListener(java.lang.Object, com.hazelcast.spi.EventFilter, java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.MapServiceContextImpl.addLocalPartitionLostListener(com.hazelcast.map.listener.MapPartitionLostListener, java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.MapServiceContextImpl.addEventListener(java.lang.Object, com.hazelcast.spi.EventFilter, java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.MapServiceContextImpl.addPartitionLostListener(com.hazelcast.map.listener.MapPartitionLostListener, java.lang.String)"], ["boolean", "com.hazelcast.map.impl.MapServiceContextImpl.removeEventListener(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.map.impl.MapServiceContextImpl.removePartitionLostListener(java.lang.String, java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperationProvider", "com.hazelcast.map.impl.MapServiceContextImpl.getMapOperationProvider(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperationProvider", "com.hazelcast.map.impl.MapServiceContextImpl.getMapOperationProvider(com.hazelcast.config.MapConfig)"], ["com.hazelcast.map.impl.query.IndexProvider", "com.hazelcast.map.impl.MapServiceContextImpl.getIndexProvider(com.hazelcast.config.MapConfig)"], ["com.hazelcast.query.impl.getters.Extractors", "com.hazelcast.map.impl.MapServiceContextImpl.getExtractors(java.lang.String)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.incrementOperationStats(long, com.hazelcast.monitor.impl.LocalMapStatsImpl, java.lang.String, com.hazelcast.spi.Operation)"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.MapServiceContextImpl.createRecordStore(com.hazelcast.map.impl.MapContainer, int, com.hazelcast.map.impl.MapKeyLoader)"], ["boolean", "com.hazelcast.map.impl.MapServiceContextImpl.removeMapContainer(com.hazelcast.map.impl.MapContainer)"], ["com.hazelcast.core.PartitioningStrategy", "com.hazelcast.map.impl.MapServiceContextImpl.getPartitioningStrategy(java.lang.String, com.hazelcast.config.PartitioningStrategyConfig)"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.removePartitioningStrategyFromCache(java.lang.String)"], ["com.hazelcast.map.impl.PartitionContainer[]", "com.hazelcast.map.impl.MapServiceContextImpl.getPartitionContainers()"], ["void", "com.hazelcast.map.impl.MapServiceContextImpl.onClusterStateChange(com.hazelcast.cluster.ClusterState)"], ["com.hazelcast.map.impl.query.PartitionScanRunner", "com.hazelcast.map.impl.MapServiceContextImpl.getPartitionScanRunner()"], ["com.hazelcast.map.impl.query.ResultProcessorRegistry", "com.hazelcast.map.impl.MapServiceContextImpl.getResultProcessorRegistry()"], ["com.hazelcast.map.impl.nearcache.MapNearCacheManager", "com.hazelcast.map.impl.MapServiceContextImpl.getMapNearCacheManager()"], ["java.lang.String", "com.hazelcast.map.impl.MapServiceContextImpl.addListenerAdapter(com.hazelcast.map.impl.ListenerAdapter, com.hazelcast.spi.EventFilter, java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.MapServiceContextImpl.addLocalListenerAdapter(com.hazelcast.map.impl.ListenerAdapter, java.lang.String)"], ["com.hazelcast.map.impl.querycache.QueryCacheContext", "com.hazelcast.map.impl.MapServiceContextImpl.getQueryCacheContext()"], ["com.hazelcast.query.impl.IndexCopyBehavior", "com.hazelcast.map.impl.MapServiceContextImpl.getIndexCopyBehavior()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$100.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$100.createNew(java.lang.Object)"], ["com.hazelcast.monitor.impl.LocalMapStatsImpl", "com.hazelcast.map.impl.LocalMapStatsProvider$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.LocalMapStatsProvider$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$108.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$108.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.EntryListenerAdaptors$2.createNew(com.hazelcast.core.EntryListener)"], ["java.lang.Object", "com.hazelcast.map.impl.EntryListenerAdaptors$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$95.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$95.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapPartitionLostEventFilter", "com.hazelcast.map.impl.MapPartitionLostEventFilter()"], ["boolean", "com.hazelcast.map.impl.MapPartitionLostEventFilter.eval(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapPartitionLostEventFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.MapPartitionLostEventFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.impl.MapPartitionLostEventFilter.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.MapPartitionLostEventFilter.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.MapPartitionLostEventFilter.toString()"], ["int", "com.hazelcast.map.impl.MapPartitionLostEventFilter.getFactoryId()"], ["int", "com.hazelcast.map.impl.MapPartitionLostEventFilter.getId()"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalMapStats>", "com.hazelcast.map.impl.MapStatisticsAwareService.getStats()"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$1$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$1$1.onEvent(java.lang.Object)"], ["void", "com.hazelcast.map.impl.ExpirationTimeSetter.setExpirationTime(com.hazelcast.map.impl.record.Record, long)"], ["long", "com.hazelcast.map.impl.ExpirationTimeSetter.getIdlenessStartTime(com.hazelcast.map.impl.record.Record)"], ["long", "com.hazelcast.map.impl.ExpirationTimeSetter.getLifeStartTime(com.hazelcast.map.impl.record.Record)"], ["long", "com.hazelcast.map.impl.ExpirationTimeSetter.calculateMaxIdleMillis(com.hazelcast.config.MapConfig)"], ["void", "com.hazelcast.map.impl.ExpirationTimeSetter.setTTLAndUpdateExpiryTime(long, com.hazelcast.map.impl.record.Record, com.hazelcast.config.MapConfig, boolean)"], ["long", "com.hazelcast.map.impl.ExpirationTimeSetter.calculateExpirationWithDelay(long, long, boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$72.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$72.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapDataSerializerHook", "com.hazelcast.map.impl.MapDataSerializerHook()"], ["int", "com.hazelcast.map.impl.MapDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.map.impl.MapDataSerializerHook.createFactory()"], ["com.hazelcast.map.impl.EventListenerFilter", "com.hazelcast.map.impl.EventListenerFilter()"], ["com.hazelcast.map.impl.EventListenerFilter", "com.hazelcast.map.impl.EventListenerFilter(int, com.hazelcast.spi.EventFilter)"], ["void", "com.hazelcast.map.impl.EventListenerFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.EventListenerFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.impl.EventListenerFilter.eval(java.lang.Object)"], ["com.hazelcast.spi.EventFilter", "com.hazelcast.map.impl.EventListenerFilter.getEventFilter()"], ["java.lang.String", "com.hazelcast.map.impl.EventListenerFilter.toString()"], ["int", "com.hazelcast.map.impl.EventListenerFilter.getFactoryId()"], ["int", "com.hazelcast.map.impl.EventListenerFilter.getId()"], ["com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent()"], ["com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.impl.journal.InternalEventJournalMapEvent)"], ["int", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent.getId()"], ["K", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent.getKey()"], ["V", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent.getNewValue()"], ["V", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent.getOldValue()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent.getType()"], ["void", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.journal.DeserializingEventJournalMapEvent.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["T", "com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl$ProjectionAdapter.transform(com.hazelcast.map.impl.journal.InternalEventJournalMapEvent)"], ["java.lang.Object", "com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl$ProjectionAdapter.transform(java.lang.Object)"], ["com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation", "com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation()"], ["com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation", "com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation.beforeRun()"], ["void", "com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation.run()"], ["com.hazelcast.internal.journal.EventJournalInitialSubscriberState", "com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation.getResponse()"], ["int", "com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation.getId()"], ["java.lang.Object", "com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl$1.test(com.hazelcast.map.impl.journal.InternalEventJournalMapEvent)"], ["boolean", "com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl$1.test(java.lang.Object)"], ["com.hazelcast.map.impl.journal.InternalEventJournalMapEvent", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent()"], ["com.hazelcast.map.impl.journal.InternalEventJournalMapEvent", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.getDataKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.getDataNewValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.getDataOldValue()"], ["int", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.getEventType()"], ["int", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.getFactoryId()"], ["int", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.getId()"], ["void", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.journal.InternalEventJournalMapEvent.toString()"], ["com.hazelcast.map.impl.journal.MapEventJournalReadOperation", "com.hazelcast.map.impl.journal.MapEventJournalReadOperation()"], ["com.hazelcast.map.impl.journal.MapEventJournalReadOperation", "com.hazelcast.map.impl.journal.MapEventJournalReadOperation(java.lang.String, long, int, int, com.hazelcast.util.function.Predicate<? super com.hazelcast.map.journal.EventJournalMapEvent<K, V>>, com.hazelcast.projection.Projection<? super com.hazelcast.map.journal.EventJournalMapEvent<K, V>, ? extends T>)"], ["int", "com.hazelcast.map.impl.journal.MapEventJournalReadOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.journal.MapEventJournalReadOperation.getId()"], ["java.lang.String", "com.hazelcast.map.impl.journal.MapEventJournalReadOperation.getServiceName()"], ["com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl", "com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl()"], ["void", "com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl.addItem(long, java.lang.Object)"], ["int", "com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl.getFactoryId()"], ["int", "com.hazelcast.map.impl.journal.MapEventJournalReadResultSetImpl.getId()"], ["com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl(com.hazelcast.spi.NodeEngine, com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.writeUpdateEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.writeAddEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["void", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.writeRemoveEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["void", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.writeEvictEvent(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace, int, com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["long", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.newestSequence(com.hazelcast.spi.ObjectNamespace, int)"], ["long", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.oldestSequence(com.hazelcast.spi.ObjectNamespace, int)"], ["boolean", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.isPersistenceEnabled(com.hazelcast.spi.ObjectNamespace, int)"], ["void", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.destroy(com.hazelcast.spi.ObjectNamespace, int)"], ["void", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.isAvailableOrNextSequence(com.hazelcast.spi.ObjectNamespace, int, long)"], ["boolean", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.isNextAvailableSequence(com.hazelcast.spi.ObjectNamespace, int, long)"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.getWaitNotifyKey(com.hazelcast.spi.ObjectNamespace, int)"], ["<T> long", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.readMany(com.hazelcast.spi.ObjectNamespace, int, long, com.hazelcast.ringbuffer.impl.ReadResultSetImpl<com.hazelcast.map.impl.journal.InternalEventJournalMapEvent, T>)"], ["void", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.cleanup(com.hazelcast.spi.ObjectNamespace, int)"], ["boolean", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.hasEventJournal(com.hazelcast.spi.ObjectNamespace)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.getEventJournalConfig(com.hazelcast.spi.ObjectNamespace)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.map.impl.journal.RingbufferMapEventJournalImpl.toRingbufferConfig(com.hazelcast.config.EventJournalConfig, com.hazelcast.spi.ObjectNamespace)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$101.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$101.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapKeyLoader", "com.hazelcast.map.impl.MapKeyLoader(java.lang.String, com.hazelcast.spi.OperationService, com.hazelcast.spi.partition.IPartitionService, com.hazelcast.internal.cluster.ClusterService, com.hazelcast.spi.ExecutionService, com.hazelcast.core.IFunction<java.lang.Object, com.hazelcast.nio.serialization.Data>)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.MapKeyLoader.startInitialLoad(com.hazelcast.map.impl.mapstore.MapStoreContext, int)"], ["void", "com.hazelcast.map.impl.MapKeyLoader.trackLoading(boolean, java.lang.Throwable)"], ["void", "com.hazelcast.map.impl.MapKeyLoader.triggerLoadingWithDelay()"], ["boolean", "com.hazelcast.map.impl.MapKeyLoader.shouldDoInitialLoad()"], ["void", "com.hazelcast.map.impl.MapKeyLoader.setMaxBatch(int)"], ["void", "com.hazelcast.map.impl.MapKeyLoader.setMaxSize(int)"], ["void", "com.hazelcast.map.impl.MapKeyLoader.setHasBackup(boolean)"], ["void", "com.hazelcast.map.impl.MapKeyLoader.setMapOperationProvider(com.hazelcast.map.impl.operation.MapOperationProvider)"], ["boolean", "com.hazelcast.map.impl.MapKeyLoader.isKeyLoadFinished()"], ["void", "com.hazelcast.map.impl.MapKeyLoader.promoteToLoadedOnMigration()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$31.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapKeyLoader$2.run()"], ["boolean", "com.hazelcast.map.impl.MapMigrationAwareService.isKnownServiceNamespace(com.hazelcast.spi.ServiceNamespace)"], ["void", "com.hazelcast.map.impl.MapMigrationAwareService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.MapMigrationAwareService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.MapMigrationAwareService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent, java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.map.impl.MapMigrationAwareService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.map.impl.MapMigrationAwareService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.map.impl.MapKeyLoader$4.run()"], ["java.lang.Object", "com.hazelcast.map.impl.MapQuorumAwareService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.MapQuorumAwareService$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$94.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$94.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$56.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$56.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$6$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$6$1.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.InternalMapPartitionLostListenerAdapter", "com.hazelcast.map.impl.InternalMapPartitionLostListenerAdapter(com.hazelcast.map.listener.MapPartitionLostListener)"], ["void", "com.hazelcast.map.impl.InternalMapPartitionLostListenerAdapter.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$138.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$138.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapRecordKey", "com.hazelcast.map.impl.MapRecordKey(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.MapRecordKey.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.MapRecordKey.hashCode()"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.EntryListenerAdaptors$4.createNew(com.hazelcast.core.EntryListener)"], ["java.lang.Object", "com.hazelcast.map.impl.EntryListenerAdaptors$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$115.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$115.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$132.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$132.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapMigrationAwareService$TargetIndexes[]", "com.hazelcast.map.impl.MapMigrationAwareService$TargetIndexes.values()"], ["com.hazelcast.map.impl.MapMigrationAwareService$TargetIndexes", "com.hazelcast.map.impl.MapMigrationAwareService$TargetIndexes.valueOf(java.lang.String)"], ["com.hazelcast.map.impl.MapContainer", "com.hazelcast.map.impl.MapServiceContextImpl$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.MapServiceContextImpl$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.EntryListenerAdaptors$1.createNew(com.hazelcast.core.EntryListener)"], ["java.lang.Object", "com.hazelcast.map.impl.EntryListenerAdaptors$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$78.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$78.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$93.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$93.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$126.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$126.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.EntryListenerAdaptors$3.createNew(com.hazelcast.core.EntryListener)"], ["java.lang.Object", "com.hazelcast.map.impl.EntryListenerAdaptors$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$136.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$136.createNew(java.lang.Object)"], ["long", "com.hazelcast.map.impl.BinaryMapEntryCostEstimator.getEstimate()"], ["void", "com.hazelcast.map.impl.BinaryMapEntryCostEstimator.adjustEstimateBy(long)"], ["void", "com.hazelcast.map.impl.BinaryMapEntryCostEstimator.reset()"], ["long", "com.hazelcast.map.impl.BinaryMapEntryCostEstimator.calculateValueCost(com.hazelcast.map.impl.record.Record)"], ["long", "com.hazelcast.map.impl.BinaryMapEntryCostEstimator.calculateEntryCost(com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.record.Record)"], ["long", "com.hazelcast.map.impl.BinaryMapEntryCostEstimator.calculateEntryCost(java.lang.Object, java.lang.Object)"], ["long", "com.hazelcast.map.impl.BinaryMapEntryCostEstimator.calculateValueCost(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$54.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$54.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$33.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$33.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$55.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$55.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.record.RecordFactory", "com.hazelcast.map.impl.MapContainer$1.createNew(java.lang.Void)"], ["java.lang.Object", "com.hazelcast.map.impl.MapContainer$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$128.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$128.createNew(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.MapKeyLoaderUtil$1.hasNext()"], ["java.util.Map<java.lang.Integer, java.util.List<com.hazelcast.nio.serialization.Data>>", "com.hazelcast.map.impl.MapKeyLoaderUtil$1.next()"], ["java.lang.Object", "com.hazelcast.map.impl.MapKeyLoaderUtil$1.next()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$111.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$111.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapService", "com.hazelcast.map.impl.MapService()"], ["void", "com.hazelcast.map.impl.MapService.dispatchEvent(java.lang.Object, com.hazelcast.map.impl.ListenerAdapter)"], ["void", "com.hazelcast.map.impl.MapService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.map.impl.MapService.reset()"], ["void", "com.hazelcast.map.impl.MapService.shutdown(boolean)"], ["boolean", "com.hazelcast.map.impl.MapService.isKnownServiceNamespace(com.hazelcast.spi.ServiceNamespace)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.MapService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.MapService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent, java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.map.impl.MapService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.map.impl.MapService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.map.impl.MapService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.MapService.getPostJoinOperation()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.map.impl.MapService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.map.impl.MapService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.map.impl.MapService.onReplicationEvent(com.hazelcast.wan.WanReplicationEvent)"], ["void", "com.hazelcast.map.impl.MapService.onPartitionLost(com.hazelcast.spi.partition.IPartitionLostEvent)"], ["java.lang.Runnable", "com.hazelcast.map.impl.MapService.prepareMergeRunnable()"], ["<T extends com.hazelcast.transaction.TransactionalObject> T", "com.hazelcast.map.impl.MapService.createTransactionalObject(java.lang.String, com.hazelcast.transaction.impl.Transaction)"], ["void", "com.hazelcast.map.impl.MapService.rollbackTransaction(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalMapStats>", "com.hazelcast.map.impl.MapService.getStats()"], ["java.lang.String", "com.hazelcast.map.impl.MapService.getQuorumName(java.lang.String)"], ["com.hazelcast.map.impl.MapServiceContext", "com.hazelcast.map.impl.MapService.getMapServiceContext()"], ["void", "com.hazelcast.map.impl.MapService.clientDisconnected(java.lang.String)"], ["void", "com.hazelcast.map.impl.MapService.onRegister(java.lang.Object, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["void", "com.hazelcast.map.impl.MapService.onDeregister(java.lang.Object, java.lang.String, java.lang.String, com.hazelcast.spi.EventRegistration)"], ["int", "com.hazelcast.map.impl.MapService.getMigrationStamp()"], ["boolean", "com.hazelcast.map.impl.MapService.validateMigrationStamp(int)"], ["void", "com.hazelcast.map.impl.MapService.onClusterStateChange(com.hazelcast.cluster.ClusterState)"], ["void", "com.hazelcast.map.impl.MapService.onClusterVersionChange(com.hazelcast.version.Version)"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.map.impl.MapService.getObjectNamespace(java.lang.String)"], ["void", "com.hazelcast.map.impl.MapService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["int", "com.hazelcast.map.impl.MapKeyLoaderUtil.getMaxSizePerNode(com.hazelcast.config.MaxSizeConfig)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$46.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$46.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$99.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$99.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$40.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$40.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapReplicationSupportingService.onReplicationEvent(com.hazelcast.wan.WanReplicationEvent)"], ["void", "com.hazelcast.map.impl.record.CachedDataRecord.setValue(com.hazelcast.nio.serialization.Data)"], ["java.lang.Object", "com.hazelcast.map.impl.record.CachedDataRecord.getCachedValueUnsafe()"], ["boolean", "com.hazelcast.map.impl.record.CachedDataRecord.casCachedValue(java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.record.CachedDataRecord.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.record.CachedDataRecord.hashCode()"], ["void", "com.hazelcast.map.impl.record.CachedDataRecord.setValue(java.lang.Object)"], ["long", "com.hazelcast.map.impl.record.DataRecordWithStats.getCost()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.record.DataRecordWithStats.getValue()"], ["void", "com.hazelcast.map.impl.record.DataRecordWithStats.setValue(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.record.DataRecordWithStats.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.record.DataRecordWithStats.hashCode()"], ["void", "com.hazelcast.map.impl.record.DataRecordWithStats.setValue(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.record.DataRecordWithStats.getValue()"], ["com.hazelcast.map.impl.record.RecordInfo", "com.hazelcast.map.impl.record.RecordInfo()"], ["com.hazelcast.map.impl.record.RecordInfo", "com.hazelcast.map.impl.record.RecordInfo(com.hazelcast.map.impl.record.RecordInfo)"], ["long", "com.hazelcast.map.impl.record.RecordInfo.getVersion()"], ["void", "com.hazelcast.map.impl.record.RecordInfo.setVersion(long)"], ["long", "com.hazelcast.map.impl.record.RecordInfo.getHits()"], ["void", "com.hazelcast.map.impl.record.RecordInfo.setHits(long)"], ["long", "com.hazelcast.map.impl.record.RecordInfo.getTtl()"], ["void", "com.hazelcast.map.impl.record.RecordInfo.setTtl(long)"], ["long", "com.hazelcast.map.impl.record.RecordInfo.getCreationTime()"], ["void", "com.hazelcast.map.impl.record.RecordInfo.setCreationTime(long)"], ["long", "com.hazelcast.map.impl.record.RecordInfo.getLastAccessTime()"], ["void", "com.hazelcast.map.impl.record.RecordInfo.setLastAccessTime(long)"], ["long", "com.hazelcast.map.impl.record.RecordInfo.getLastUpdateTime()"], ["void", "com.hazelcast.map.impl.record.RecordInfo.setLastUpdateTime(long)"], ["long", "com.hazelcast.map.impl.record.RecordInfo.getExpirationTime()"], ["void", "com.hazelcast.map.impl.record.RecordInfo.setExpirationTime(long)"], ["long", "com.hazelcast.map.impl.record.RecordInfo.getLastStoredTime()"], ["void", "com.hazelcast.map.impl.record.RecordInfo.setLastStoredTime(long)"], ["void", "com.hazelcast.map.impl.record.RecordInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.record.RecordInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.record.RecordInfo.toString()"], ["int", "com.hazelcast.map.impl.record.RecordInfo.getFactoryId()"], ["int", "com.hazelcast.map.impl.record.RecordInfo.getId()"], ["void", "com.hazelcast.map.impl.record.AbstractRecordWithStats.onStore()"], ["long", "com.hazelcast.map.impl.record.AbstractRecordWithStats.getCost()"], ["long", "com.hazelcast.map.impl.record.AbstractRecordWithStats.getExpirationTime()"], ["void", "com.hazelcast.map.impl.record.AbstractRecordWithStats.setExpirationTime(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecordWithStats.getLastStoredTime()"], ["void", "com.hazelcast.map.impl.record.AbstractRecordWithStats.setLastStoredTime(long)"], ["boolean", "com.hazelcast.map.impl.record.AbstractRecordWithStats.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.record.AbstractRecordWithStats.hashCode()"], ["java.lang.Object", "com.hazelcast.map.impl.record.ObjectRecordWithStats.getValue()"], ["void", "com.hazelcast.map.impl.record.ObjectRecordWithStats.setValue(java.lang.Object)"], ["long", "com.hazelcast.map.impl.record.ObjectRecordWithStats.getCost()"], ["boolean", "com.hazelcast.map.impl.record.ObjectRecordWithStats.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.record.ObjectRecordWithStats.hashCode()"], ["com.hazelcast.map.impl.record.RecordReplicationInfo", "com.hazelcast.map.impl.record.RecordReplicationInfo(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.record.RecordInfo)"], ["com.hazelcast.map.impl.record.RecordReplicationInfo", "com.hazelcast.map.impl.record.RecordReplicationInfo()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.record.RecordReplicationInfo.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.record.RecordReplicationInfo.getValue()"], ["void", "com.hazelcast.map.impl.record.RecordReplicationInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.record.RecordReplicationInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.record.RecordReplicationInfo.toString()"], ["int", "com.hazelcast.map.impl.record.RecordReplicationInfo.getId()"], ["com.hazelcast.map.impl.record.DataRecordFactory", "com.hazelcast.map.impl.record.DataRecordFactory(com.hazelcast.config.MapConfig, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.core.PartitioningStrategy)"], ["void", "com.hazelcast.map.impl.record.DataRecordFactory.setValue(com.hazelcast.map.impl.record.Record<com.hazelcast.nio.serialization.Data>, java.lang.Object)"], ["long", "com.hazelcast.map.impl.record.DataRecord.getCost()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.record.DataRecord.getValue()"], ["void", "com.hazelcast.map.impl.record.DataRecord.setValue(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.record.DataRecord.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.record.DataRecord.hashCode()"], ["void", "com.hazelcast.map.impl.record.DataRecord.setValue(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.record.DataRecord.getValue()"], ["void", "com.hazelcast.map.impl.record.CachedDataRecordWithStats.setValue(com.hazelcast.nio.serialization.Data)"], ["java.lang.Object", "com.hazelcast.map.impl.record.CachedDataRecordWithStats.getCachedValueUnsafe()"], ["boolean", "com.hazelcast.map.impl.record.CachedDataRecordWithStats.casCachedValue(java.lang.Object, java.lang.Object)"], ["long", "com.hazelcast.map.impl.record.CachedDataRecordWithStats.getCost()"], ["boolean", "com.hazelcast.map.impl.record.CachedDataRecordWithStats.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.record.CachedDataRecordWithStats.hashCode()"], ["void", "com.hazelcast.map.impl.record.CachedDataRecordWithStats.setValue(java.lang.Object)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getVersion()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setVersion(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getTtl()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setTtl(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getLastAccessTime()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setLastAccessTime(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getLastUpdateTime()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setLastUpdateTime(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getCreationTime()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setCreationTime(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getHits()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setHits(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getCost()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.onUpdate(long)"], ["java.lang.Object", "com.hazelcast.map.impl.record.AbstractRecord.getCachedValueUnsafe()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.onAccess(long)"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.onStore()"], ["boolean", "com.hazelcast.map.impl.record.AbstractRecord.casCachedValue(java.lang.Object, java.lang.Object)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.record.AbstractRecord.getKey()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setKey(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getSequence()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setSequence(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getExpirationTime()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setExpirationTime(long)"], ["long", "com.hazelcast.map.impl.record.AbstractRecord.getLastStoredTime()"], ["void", "com.hazelcast.map.impl.record.AbstractRecord.setLastStoredTime(long)"], ["boolean", "com.hazelcast.map.impl.record.AbstractRecord.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.record.AbstractRecord.hashCode()"], ["com.hazelcast.map.impl.record.ObjectRecordFactory", "com.hazelcast.map.impl.record.ObjectRecordFactory(com.hazelcast.config.MapConfig, com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.map.impl.record.ObjectRecordFactory.setValue(com.hazelcast.map.impl.record.Record<java.lang.Object>, java.lang.Object)"], ["void", "com.hazelcast.map.impl.record.Records.applyRecordInfo(com.hazelcast.map.impl.record.Record, com.hazelcast.map.impl.record.RecordInfo)"], ["com.hazelcast.map.impl.record.RecordInfo", "com.hazelcast.map.impl.record.Records.buildRecordInfo(com.hazelcast.map.impl.record.Record)"], ["java.lang.Object", "com.hazelcast.map.impl.record.Records.getCachedValue(com.hazelcast.map.impl.record.Record)"], ["java.lang.Object", "com.hazelcast.map.impl.record.Records.getValueOrCachedValue(com.hazelcast.map.impl.record.Record, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.map.impl.record.DataRecordComparator", "com.hazelcast.map.impl.record.DataRecordComparator(com.hazelcast.spi.serialization.SerializationService)"], ["boolean", "com.hazelcast.map.impl.record.DataRecordComparator.isEqual(java.lang.Object, java.lang.Object)"], ["com.hazelcast.map.impl.record.ObjectRecordComparator", "com.hazelcast.map.impl.record.ObjectRecordComparator(com.hazelcast.spi.serialization.SerializationService)"], ["boolean", "com.hazelcast.map.impl.record.ObjectRecordComparator.isEqual(java.lang.Object, java.lang.Object)"], ["long", "com.hazelcast.map.impl.record.ObjectRecord.getCost()"], ["java.lang.Object", "com.hazelcast.map.impl.record.ObjectRecord.getValue()"], ["void", "com.hazelcast.map.impl.record.ObjectRecord.setValue(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.record.ObjectRecord.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.record.ObjectRecord.hashCode()"], ["com.hazelcast.map.impl.MapKeySet", "com.hazelcast.map.impl.MapKeySet(java.util.Set<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.map.impl.MapKeySet", "com.hazelcast.map.impl.MapKeySet()"], ["void", "com.hazelcast.map.impl.MapKeySet.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.MapKeySet.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.MapKeySet.getFactoryId()"], ["int", "com.hazelcast.map.impl.MapKeySet.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$67.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$67.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$112.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$112.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$2.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$68.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$68.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$123.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$123.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$97.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$97.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$105.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$105.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$139.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$139.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.BasicRecordStoreLoader$GivenKeysLoaderTask.call()"], ["com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord(R, com.hazelcast.spi.serialization.SerializationService)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getKey()"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getValue()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getCost()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getCreationTime()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getExpirationTime()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getHits()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getLastAccessTime()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getLastStoredTime()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getLastUpdateTime()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getVersion()"], ["long", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getTtl()"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.getRecord()"], ["boolean", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.recordstore.LazyEntryViewFromRecord.toString()"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.clear(boolean)"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.put(com.hazelcast.nio.serialization.Data, R)"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.updateRecordValue(com.hazelcast.nio.serialization.Data, R, java.lang.Object)"], ["R", "com.hazelcast.map.impl.recordstore.StorageImpl.get(com.hazelcast.nio.serialization.Data)"], ["R", "com.hazelcast.map.impl.recordstore.StorageImpl.getIfSameKey(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.map.impl.recordstore.StorageImpl.size()"], ["boolean", "com.hazelcast.map.impl.recordstore.StorageImpl.isEmpty()"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.destroy(boolean)"], ["com.hazelcast.map.impl.EntryCostEstimator", "com.hazelcast.map.impl.recordstore.StorageImpl.getEntryCostEstimator()"], ["boolean", "com.hazelcast.map.impl.recordstore.StorageImpl.containsKey(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.removeRecord(R)"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.setEntryCostEstimator(com.hazelcast.map.impl.EntryCostEstimator)"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.disposeDeferredBlocks()"], ["com.hazelcast.map.impl.iterator.MapKeysWithCursor", "com.hazelcast.map.impl.recordstore.StorageImpl.fetchKeys(int, int)"], ["com.hazelcast.map.impl.iterator.MapEntriesWithCursor", "com.hazelcast.map.impl.recordstore.StorageImpl.fetchEntries(int, int, com.hazelcast.spi.serialization.SerializationService)"], ["boolean", "com.hazelcast.map.impl.recordstore.StorageImpl.containsKey(java.lang.Object)"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.removeRecord(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.StorageImpl.getIfSameKey(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.StorageImpl.get(java.lang.Object)"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.updateRecordValue(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.recordstore.StorageImpl.put(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.recordstore.RecordStoreLoader$1.loadValues(java.util.List<com.hazelcast.nio.serialization.Data>, boolean)"], ["void", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore.evictExpiredEntries(int, boolean)"], ["boolean", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore.isExpirable()"], ["void", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore.evictEntries(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore.shouldEvict()"], ["boolean", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore.isExpired(com.hazelcast.map.impl.record.Record, long, boolean)"], ["void", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore.doPostEvictionOperations(com.hazelcast.map.impl.record.Record, boolean)"], ["com.hazelcast.map.impl.recordstore.StorageSCHM", "com.hazelcast.map.impl.recordstore.StorageSCHM(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.map.impl.recordstore.DefaultRecordStore", "com.hazelcast.map.impl.recordstore.DefaultRecordStore(com.hazelcast.map.impl.MapContainer, int, com.hazelcast.map.impl.MapKeyLoader, com.hazelcast.logging.ILogger)"], ["com.hazelcast.map.impl.mapstore.MapDataStore<com.hazelcast.nio.serialization.Data, java.lang.Object>", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getMapDataStore()"], ["long", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.softFlush()"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getRecord(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.putRecord(com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.record.Record)"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.putBackup(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.putBackup(com.hazelcast.nio.serialization.Data, java.lang.Object, long, boolean)"], ["com.hazelcast.map.impl.iterator.MapKeysWithCursor", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.fetchKeys(int, int)"], ["com.hazelcast.map.impl.iterator.MapEntriesWithCursor", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.fetchEntries(int, int)"], ["int", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.size()"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.isEmpty()"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.containsValue(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.txnLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long, boolean)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.extendLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.localLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.unlock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.lock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.forceUnlock(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.isLocked(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.isTransactionallyLocked(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.canAcquireLock(com.hazelcast.nio.serialization.Data, java.lang.String, long)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.isLockedBy(com.hazelcast.nio.serialization.Data, java.lang.String, long)"], ["java.lang.String", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getLockOwnerInfo(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.loadRecordOrNull(com.hazelcast.nio.serialization.Data, boolean)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.evict(com.hazelcast.nio.serialization.Data, boolean)"], ["int", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.evictAll(boolean)"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.removeBackup(com.hazelcast.nio.serialization.Data)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.remove(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.remove(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.delete(com.hazelcast.nio.serialization.Data)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.get(com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.readBackupData(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.MapEntries", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getAll(java.util.Set<com.hazelcast.nio.serialization.Data>)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.existInMemory(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.containsKey(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.hasQueryCache()"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.set(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.put(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.merge(com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.merge(com.hazelcast.nio.serialization.Data, com.hazelcast.core.EntryView, com.hazelcast.map.merge.MapMergePolicy)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.replace(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.replace(com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.putTransient(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.putFromLoad(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.putFromLoadBackup(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.setWithUncountedAccess(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.putIfAbsent(com.hazelcast.nio.serialization.Data, java.lang.Object, long)"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getRecordOrNull(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.isKeyLoadFinished()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.checkIfLoaded()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.startLoading()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.setPreMigrationLoadedStatus(boolean)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.isLoaded()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.loadAll(boolean)"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.loadAllFromStore(java.util.List<com.hazelcast.nio.serialization.Data>, boolean)"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.updateLoadStatus(boolean, java.lang.Throwable)"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.maybeDoInitialLoad()"], ["int", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.clear()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.reset()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.destroy()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.clearPartition(boolean, boolean)"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.clearOtherDataThanStorage(boolean)"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.destroyStorageAfterClear(boolean)"], ["com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getExpiredKeys()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.doPostEvictionOperations(com.hazelcast.map.impl.record.Record, boolean)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.isExpired(com.hazelcast.map.impl.record.Record, long, boolean)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.shouldEvict()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.evictEntries(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.isExpirable()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.evictExpiredEntries(int, boolean)"], ["com.hazelcast.map.impl.recordstore.Storage", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getStorage()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.disposeDeferredBlocks()"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.setSizeEstimator(com.hazelcast.map.impl.EntryCostEstimator)"], ["int", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getLockedEntryCount()"], ["int", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getPartitionId()"], ["long", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getOwnedEntryCost()"], ["com.hazelcast.map.impl.MapContainer", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getMapContainer()"], ["java.lang.String", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getName()"], ["com.hazelcast.map.impl.recordstore.Storage", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.createStorage(com.hazelcast.map.impl.record.RecordFactory, com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.createRecord(java.lang.Object, long, long)"], ["void", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.init()"], ["com.hazelcast.monitor.LocalRecordStoreStats", "com.hazelcast.map.impl.recordstore.DefaultRecordStore.getLocalRecordStoreStats()"], ["boolean", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore$ReadOnlyRecordIterator.hasNext()"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore$ReadOnlyRecordIterator.next()"], ["void", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore$ReadOnlyRecordIterator.remove()"], ["java.lang.Object", "com.hazelcast.map.impl.recordstore.AbstractEvictableRecordStore$ReadOnlyRecordIterator.next()"], ["com.hazelcast.map.impl.recordstore.ExpiredKey", "com.hazelcast.map.impl.recordstore.ExpiredKey(com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.recordstore.ExpiredKey.getKey()"], ["long", "com.hazelcast.map.impl.recordstore.ExpiredKey.getCreationTime()"], ["com.hazelcast.monitor.LocalRecordStoreStats", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.getLocalRecordStoreStats()"], ["void", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.init()"], ["com.hazelcast.map.impl.record.Record", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.createRecord(java.lang.Object, long, long)"], ["com.hazelcast.map.impl.recordstore.Storage", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.createStorage(com.hazelcast.map.impl.record.RecordFactory, com.hazelcast.config.InMemoryFormat)"], ["java.lang.String", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.getName()"], ["com.hazelcast.map.impl.MapContainer", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.getMapContainer()"], ["long", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.getOwnedEntryCost()"], ["int", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.getPartitionId()"], ["int", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.getLockedEntryCount()"], ["void", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.setSizeEstimator(com.hazelcast.map.impl.EntryCostEstimator)"], ["void", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.disposeDeferredBlocks()"], ["com.hazelcast.map.impl.recordstore.Storage<com.hazelcast.nio.serialization.Data, ? extends com.hazelcast.map.impl.record.Record>", "com.hazelcast.map.impl.recordstore.AbstractRecordStore.getStorage()"], ["com.hazelcast.map.impl.operation.PutFromLoadAllBackupOperation", "com.hazelcast.map.impl.operation.PutFromLoadAllBackupOperation()"], ["com.hazelcast.map.impl.operation.PutFromLoadAllBackupOperation", "com.hazelcast.map.impl.operation.PutFromLoadAllBackupOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.map.impl.operation.PutFromLoadAllBackupOperation.run()"], ["void", "com.hazelcast.map.impl.operation.PutFromLoadAllBackupOperation.afterRun()"], ["int", "com.hazelcast.map.impl.operation.PutFromLoadAllBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.MapPartitionDestroyOperation", "com.hazelcast.map.impl.operation.MapPartitionDestroyOperation(com.hazelcast.map.impl.PartitionContainer, com.hazelcast.map.impl.MapContainer)"], ["void", "com.hazelcast.map.impl.operation.MapPartitionDestroyOperation.run()"], ["boolean", "com.hazelcast.map.impl.operation.MapPartitionDestroyOperation.validatesTarget()"], ["com.hazelcast.map.impl.operation.PutOperation", "com.hazelcast.map.impl.operation.PutOperation()"], ["com.hazelcast.map.impl.operation.PutOperation", "com.hazelcast.map.impl.operation.PutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.operation.PutOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.PutOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.PutOperation.getId()"], ["com.hazelcast.map.impl.operation.IsPartitionLoadedOperationFactory", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperationFactory()"], ["com.hazelcast.map.impl.operation.IsPartitionLoadedOperationFactory", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.PutFromLoadAllOperation", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation()"], ["com.hazelcast.map.impl.operation.PutFromLoadAllOperation", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation.run()"], ["void", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation.getSyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.PutFromLoadAllOperation.getId()"], ["com.hazelcast.map.impl.operation.PostJoinMapOperation$InterceptorInfo", "com.hazelcast.map.impl.operation.PostJoinMapOperation$InterceptorInfo()"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation$InterceptorInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation$InterceptorInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.PostJoinMapOperation$InterceptorInfo.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.PostJoinMapOperation$InterceptorInfo.getId()"], ["com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation$MetaDataResponse", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation$MetaDataResponse()"], ["java.util.Map<java.lang.String, java.util.List<java.util.Map$Entry<java.lang.Integer, java.lang.Long>>>", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation$MetaDataResponse.getNamePartitionSequenceList()"], ["java.util.Map<java.lang.Integer, java.util.UUID>", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation$MetaDataResponse.getPartitionUuidList()"], ["int", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation$MetaDataResponse.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation$MetaDataResponse.getId()"], ["void", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation$MetaDataResponse.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation$MetaDataResponse.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.map.impl.operation.ContainsKeyOperation", "com.hazelcast.map.impl.operation.ContainsKeyOperation()"], ["com.hazelcast.map.impl.operation.ContainsKeyOperation", "com.hazelcast.map.impl.operation.ContainsKeyOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.operation.ContainsKeyOperation.run()"], ["int", "com.hazelcast.map.impl.operation.ContainsKeyOperation.getId()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.ContainsKeyOperation.getResponse()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.operation.ContainsKeyOperation.getWaitKey()"], ["boolean", "com.hazelcast.map.impl.operation.ContainsKeyOperation.shouldWait()"], ["void", "com.hazelcast.map.impl.operation.ContainsKeyOperation.onWaitExpire()"], ["com.hazelcast.map.impl.operation.AddIndexOperation", "com.hazelcast.map.impl.operation.AddIndexOperation()"], ["com.hazelcast.map.impl.operation.AddIndexOperation", "com.hazelcast.map.impl.operation.AddIndexOperation(java.lang.String, java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.operation.AddIndexOperation.getServiceName()"], ["void", "com.hazelcast.map.impl.operation.AddIndexOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.AddIndexOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.AddIndexOperation.getId()"], ["com.hazelcast.map.impl.operation.MapSizeOperation", "com.hazelcast.map.impl.operation.MapSizeOperation()"], ["com.hazelcast.map.impl.operation.MapSizeOperation", "com.hazelcast.map.impl.operation.MapSizeOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.MapSizeOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MapSizeOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.MapSizeOperation.getId()"], ["com.hazelcast.map.impl.operation.EvictOperation", "com.hazelcast.map.impl.operation.EvictOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.EvictOperation", "com.hazelcast.map.impl.operation.EvictOperation()"], ["void", "com.hazelcast.map.impl.operation.EvictOperation.run()"], ["void", "com.hazelcast.map.impl.operation.EvictOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.EvictOperation.getResponse()"], ["void", "com.hazelcast.map.impl.operation.EvictOperation.onWaitExpire()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.EvictOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.EvictOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.EvictOperation.getSyncBackupCount()"], ["boolean", "com.hazelcast.map.impl.operation.EvictOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.EvictOperation.getId()"], ["com.hazelcast.map.impl.operation.PutAllOperation", "com.hazelcast.map.impl.operation.PutAllOperation()"], ["com.hazelcast.map.impl.operation.PutAllOperation", "com.hazelcast.map.impl.operation.PutAllOperation(java.lang.String, com.hazelcast.map.impl.MapEntries)"], ["void", "com.hazelcast.map.impl.operation.PutAllOperation.run()"], ["void", "com.hazelcast.map.impl.operation.PutAllOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.PutAllOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.PutAllOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.PutAllOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.PutAllOperation.getSyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.PutAllOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.PutAllOperation.getId()"], ["boolean", "com.hazelcast.map.impl.operation.LockAwareOperation.shouldWait()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.operation.LockAwareOperation.getWaitKey()"], ["com.hazelcast.map.impl.operation.MapGetAllOperationFactory", "com.hazelcast.map.impl.operation.MapGetAllOperationFactory()"], ["com.hazelcast.map.impl.operation.MapGetAllOperationFactory", "com.hazelcast.map.impl.operation.MapGetAllOperationFactory(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MapGetAllOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.MapGetAllOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MapGetAllOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.MapGetAllOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.EvictAllBackupOperation", "com.hazelcast.map.impl.operation.EvictAllBackupOperation()"], ["com.hazelcast.map.impl.operation.EvictAllBackupOperation", "com.hazelcast.map.impl.operation.EvictAllBackupOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.EvictAllBackupOperation.run()"], ["int", "com.hazelcast.map.impl.operation.EvictAllBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.GetEntryViewOperation", "com.hazelcast.map.impl.operation.GetEntryViewOperation()"], ["com.hazelcast.map.impl.operation.GetEntryViewOperation", "com.hazelcast.map.impl.operation.GetEntryViewOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.operation.GetEntryViewOperation.run()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.operation.GetEntryViewOperation.getWaitKey()"], ["boolean", "com.hazelcast.map.impl.operation.GetEntryViewOperation.shouldWait()"], ["void", "com.hazelcast.map.impl.operation.GetEntryViewOperation.onWaitExpire()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.GetEntryViewOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.GetEntryViewOperation.getId()"], ["com.hazelcast.map.impl.operation.RemoveFromLoadAllOperation", "com.hazelcast.map.impl.operation.RemoveFromLoadAllOperation()"], ["com.hazelcast.map.impl.operation.RemoveFromLoadAllOperation", "com.hazelcast.map.impl.operation.RemoveFromLoadAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.map.impl.operation.RemoveFromLoadAllOperation.run()"], ["int", "com.hazelcast.map.impl.operation.RemoveFromLoadAllOperation.getId()"], ["com.hazelcast.map.impl.operation.BaseRemoveOperation", "com.hazelcast.map.impl.operation.BaseRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.BaseRemoveOperation", "com.hazelcast.map.impl.operation.BaseRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.BaseRemoveOperation", "com.hazelcast.map.impl.operation.BaseRemoveOperation()"], ["void", "com.hazelcast.map.impl.operation.BaseRemoveOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.BaseRemoveOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.BaseRemoveOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.BaseRemoveOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.BaseRemoveOperation.getSyncBackupCount()"], ["boolean", "com.hazelcast.map.impl.operation.BaseRemoveOperation.shouldBackup()"], ["void", "com.hazelcast.map.impl.operation.BaseRemoveOperation.onWaitExpire()"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createPutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createTryPutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createPutIfAbsentOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createPutTransientOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createTryRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createReplaceOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createRemoveIfSameOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createReplaceIfSameOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createDeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createClearOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createEntryOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createEvictOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createEvictAllOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createContainsKeyOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createGetEntryViewOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createLoadAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createPutAllOperation(java.lang.String, com.hazelcast.map.impl.MapEntries)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createPutAllOperationFactory(java.lang.String, int[], com.hazelcast.map.impl.MapEntries[])"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createMergeOperationFactory(java.lang.String, int[], java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>[], com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createPutFromLoadAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createTxnDeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createTxnLockAndGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, java.lang.String, boolean, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createTxnSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createLegacyMergeOperation(java.lang.String, com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>, com.hazelcast.map.merge.MapMergePolicy, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createMergeOperation(java.lang.String, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>, boolean)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createPartitionWideEntryOperationFactory(java.lang.String, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createPartitionWideEntryWithPredicateOperationFactory(java.lang.String, com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createMultipleEntryOperationFactory(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createContainsValueOperationFactory(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createEvictAllOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createClearOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createMapFlushOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createLoadAllOperationFactory(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createGetAllOperationFactory(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createMapSizeOperationFactory(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createMapFlushOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createLoadMapOperation(java.lang.String, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createFetchKeysOperation(java.lang.String, int, int)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createFetchEntriesOperation(java.lang.String, int, int)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createQueryOperation(com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createQueryPartitionOperation(com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperationProviderDelegator.createFetchWithQueryOperation(java.lang.String, int, int, com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.IsEmptyOperationFactory", "com.hazelcast.map.impl.operation.IsEmptyOperationFactory()"], ["com.hazelcast.map.impl.operation.IsEmptyOperationFactory", "com.hazelcast.map.impl.operation.IsEmptyOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.IsEmptyOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.IsEmptyOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.IsEmptyOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.IsEmptyOperationFactory.getId()"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation$1.onEvent(java.lang.Object)"], ["void", "com.hazelcast.map.impl.operation.EntryOperation$2.run()"], ["com.hazelcast.map.impl.operation.ClearNearCacheOperation", "com.hazelcast.map.impl.operation.ClearNearCacheOperation()"], ["com.hazelcast.map.impl.operation.ClearNearCacheOperation", "com.hazelcast.map.impl.operation.ClearNearCacheOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.ClearNearCacheOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.ClearNearCacheOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.ClearNearCacheOperation.getId()"], ["com.hazelcast.map.impl.operation.LoadAllOperation", "com.hazelcast.map.impl.operation.LoadAllOperation()"], ["com.hazelcast.map.impl.operation.LoadAllOperation", "com.hazelcast.map.impl.operation.LoadAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>, boolean)"], ["void", "com.hazelcast.map.impl.operation.LoadAllOperation.run()"], ["void", "com.hazelcast.map.impl.operation.LoadAllOperation.afterRun()"], ["int", "com.hazelcast.map.impl.operation.LoadAllOperation.getId()"], ["com.hazelcast.map.impl.operation.MapReplicationStateHolder", "com.hazelcast.map.impl.operation.MapReplicationStateHolder()"], ["com.hazelcast.map.impl.operation.MapReplicationStateHolder", "com.hazelcast.map.impl.operation.MapReplicationStateHolder(com.hazelcast.map.impl.operation.MapReplicationOperation)"], ["void", "com.hazelcast.map.impl.operation.MapReplicationStateHolder.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MapReplicationStateHolder.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.MapReplicationStateHolder.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.MapReplicationStateHolder.getId()"], ["void", "com.hazelcast.map.impl.operation.MapReplicationStateHolder.setTarget(com.hazelcast.nio.Address)"], ["com.hazelcast.map.impl.operation.AddIndexOperationFactory", "com.hazelcast.map.impl.operation.AddIndexOperationFactory()"], ["com.hazelcast.map.impl.operation.AddIndexOperationFactory", "com.hazelcast.map.impl.operation.AddIndexOperationFactory(java.lang.String, java.lang.String, boolean)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.AddIndexOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.AddIndexOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.AddIndexOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.AddIndexOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.MapFetchKeysOperation", "com.hazelcast.map.impl.operation.MapFetchKeysOperation()"], ["com.hazelcast.map.impl.operation.MapFetchKeysOperation", "com.hazelcast.map.impl.operation.MapFetchKeysOperation(java.lang.String, int, int)"], ["void", "com.hazelcast.map.impl.operation.MapFetchKeysOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MapFetchKeysOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.MapFetchKeysOperation.getId()"], ["com.hazelcast.map.impl.operation.ReadonlyKeyBasedMapOperation", "com.hazelcast.map.impl.operation.ReadonlyKeyBasedMapOperation()"], ["com.hazelcast.map.impl.operation.ReadonlyKeyBasedMapOperation", "com.hazelcast.map.impl.operation.ReadonlyKeyBasedMapOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.map.impl.operation.ReadonlyKeyBasedMapOperation.getThreadId()"], ["void", "com.hazelcast.map.impl.operation.ReadonlyKeyBasedMapOperation.setThreadId(long)"], ["com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateBackupOperation", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateBackupOperation()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateBackupOperation", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateBackupOperation(java.lang.String, com.hazelcast.map.EntryBackupProcessor, com.hazelcast.query.Predicate)"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory(java.lang.String, com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory.createFactoryOnRunner(com.hazelcast.spi.NodeEngine, int[])"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory.createPartitionOperation(int)"], ["void", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory.createOperation()"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.MultipleEntryWithPredicateOperation", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateOperation()"], ["com.hazelcast.map.impl.operation.MultipleEntryWithPredicateOperation", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["com.hazelcast.query.Predicate", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateOperation.getPredicate()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateOperation.getId()"], ["com.hazelcast.map.impl.operation.MultipleEntryBackupOperation", "com.hazelcast.map.impl.operation.MultipleEntryBackupOperation()"], ["com.hazelcast.map.impl.operation.MultipleEntryBackupOperation", "com.hazelcast.map.impl.operation.MultipleEntryBackupOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryBackupProcessor)"], ["void", "com.hazelcast.map.impl.operation.MultipleEntryBackupOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MultipleEntryBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.MultipleEntryBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.ClearOperation", "com.hazelcast.map.impl.operation.ClearOperation()"], ["com.hazelcast.map.impl.operation.ClearOperation", "com.hazelcast.map.impl.operation.ClearOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.ClearOperation.run()"], ["void", "com.hazelcast.map.impl.operation.ClearOperation.afterRun()"], ["boolean", "com.hazelcast.map.impl.operation.ClearOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.ClearOperation.getSyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.ClearOperation.getAsyncBackupCount()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.ClearOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.ClearOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.ClearOperation.getId()"], ["com.hazelcast.map.impl.operation.MergeOperation", "com.hazelcast.map.impl.operation.MergeOperation()"], ["void", "com.hazelcast.map.impl.operation.MergeOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MergeOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.MergeOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.MergeOperation.getSyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.MergeOperation.getAsyncBackupCount()"], ["void", "com.hazelcast.map.impl.operation.MergeOperation.afterRun()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MergeOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.MergeOperation.getId()"], ["com.hazelcast.map.impl.operation.EntryOperation", "com.hazelcast.map.impl.operation.EntryOperation()"], ["com.hazelcast.map.impl.operation.EntryOperation", "com.hazelcast.map.impl.operation.EntryOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.map.EntryProcessor)"], ["void", "com.hazelcast.map.impl.operation.EntryOperation.innerBeforeRun()"], ["com.hazelcast.spi.CallStatus", "com.hazelcast.map.impl.operation.EntryOperation.call()"], ["void", "com.hazelcast.map.impl.operation.EntryOperation.runOffloaded()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.operation.EntryOperation.getWaitKey()"], ["boolean", "com.hazelcast.map.impl.operation.EntryOperation.shouldWait()"], ["void", "com.hazelcast.map.impl.operation.EntryOperation.onWaitExpire()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.EntryOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.EntryOperation.getBackupOperation()"], ["boolean", "com.hazelcast.map.impl.operation.EntryOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.EntryOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.EntryOperation.getSyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.EntryOperation.getId()"], ["com.hazelcast.map.impl.operation.EntryBackupOperation", "com.hazelcast.map.impl.operation.EntryBackupOperation()"], ["com.hazelcast.map.impl.operation.EntryBackupOperation", "com.hazelcast.map.impl.operation.EntryBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.map.EntryBackupProcessor)"], ["void", "com.hazelcast.map.impl.operation.EntryBackupOperation.innerBeforeRun()"], ["void", "com.hazelcast.map.impl.operation.EntryBackupOperation.run()"], ["int", "com.hazelcast.map.impl.operation.EntryBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.LegacyMergeOperation", "com.hazelcast.map.impl.operation.LegacyMergeOperation()"], ["com.hazelcast.map.impl.operation.LegacyMergeOperation", "com.hazelcast.map.impl.operation.LegacyMergeOperation(java.lang.String, com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>, com.hazelcast.map.merge.MapMergePolicy, boolean)"], ["void", "com.hazelcast.map.impl.operation.LegacyMergeOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.LegacyMergeOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.LegacyMergeOperation.shouldBackup()"], ["void", "com.hazelcast.map.impl.operation.LegacyMergeOperation.afterRun()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.LegacyMergeOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.LegacyMergeOperation.getId()"], ["com.hazelcast.map.impl.operation.ClearOperationFactory", "com.hazelcast.map.impl.operation.ClearOperationFactory()"], ["com.hazelcast.map.impl.operation.ClearOperationFactory", "com.hazelcast.map.impl.operation.ClearOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.ClearOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.ClearOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.ClearOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.ClearOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.TryPutOperation", "com.hazelcast.map.impl.operation.TryPutOperation()"], ["com.hazelcast.map.impl.operation.TryPutOperation", "com.hazelcast.map.impl.operation.TryPutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.operation.TryPutOperation.run()"], ["boolean", "com.hazelcast.map.impl.operation.TryPutOperation.shouldBackup()"], ["void", "com.hazelcast.map.impl.operation.TryPutOperation.onWaitExpire()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.TryPutOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.TryPutOperation.getId()"], ["com.hazelcast.map.impl.operation.EntryOffloadableLockMismatchException", "com.hazelcast.map.impl.operation.EntryOffloadableLockMismatchException(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperation()"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.MapOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.MapOperation.setMapService(com.hazelcast.map.impl.MapService)"], ["void", "com.hazelcast.map.impl.operation.MapOperation.setMapContainer(com.hazelcast.map.impl.MapContainer)"], ["void", "com.hazelcast.map.impl.operation.MapOperation.beforeRun()"], ["void", "com.hazelcast.map.impl.operation.MapOperation.innerBeforeRun()"], ["java.lang.String", "com.hazelcast.map.impl.operation.MapOperation.getServiceName()"], ["boolean", "com.hazelcast.map.impl.operation.MapOperation.isPostProcessing(com.hazelcast.map.impl.recordstore.RecordStore)"], ["void", "com.hazelcast.map.impl.operation.MapOperation.setThreadId(long)"], ["long", "com.hazelcast.map.impl.operation.MapOperation.getThreadId()"], ["void", "com.hazelcast.map.impl.operation.MapOperation.invalidateNearCache(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.map.impl.operation.MapOperation.getFactoryId()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.map.impl.operation.MapOperation.getServiceNamespace()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.map.impl.operation.MapOperation.getServiceNamespace()"], ["com.hazelcast.map.impl.operation.MapNearCacheStateHolder", "com.hazelcast.map.impl.operation.MapNearCacheStateHolder()"], ["com.hazelcast.map.impl.operation.MapNearCacheStateHolder", "com.hazelcast.map.impl.operation.MapNearCacheStateHolder(com.hazelcast.map.impl.operation.MapReplicationOperation)"], ["void", "com.hazelcast.map.impl.operation.MapNearCacheStateHolder.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MapNearCacheStateHolder.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.MapNearCacheStateHolder.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.MapNearCacheStateHolder.getId()"], ["com.hazelcast.map.impl.operation.EvictBackupOperation", "com.hazelcast.map.impl.operation.EvictBackupOperation()"], ["com.hazelcast.map.impl.operation.EvictBackupOperation", "com.hazelcast.map.impl.operation.EvictBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.EvictBackupOperation", "com.hazelcast.map.impl.operation.EvictBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.EvictBackupOperation", "com.hazelcast.map.impl.operation.EvictBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, boolean)"], ["void", "com.hazelcast.map.impl.operation.EvictBackupOperation.run()"], ["void", "com.hazelcast.map.impl.operation.EvictBackupOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.EvictBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.EvictBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.SizeOperationFactory", "com.hazelcast.map.impl.operation.SizeOperationFactory()"], ["com.hazelcast.map.impl.operation.SizeOperationFactory", "com.hazelcast.map.impl.operation.SizeOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.SizeOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.SizeOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.SizeOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.SizeOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.EvictAllOperationFactory", "com.hazelcast.map.impl.operation.EvictAllOperationFactory()"], ["com.hazelcast.map.impl.operation.EvictAllOperationFactory", "com.hazelcast.map.impl.operation.EvictAllOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.EvictAllOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.EvictAllOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.EvictAllOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.EvictAllOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.MultipleEntryWithPredicateBackupOperation", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateBackupOperation()"], ["com.hazelcast.map.impl.operation.MultipleEntryWithPredicateBackupOperation", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateBackupOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryBackupProcessor, com.hazelcast.query.Predicate)"], ["com.hazelcast.query.Predicate", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateBackupOperation.getPredicate()"], ["int", "com.hazelcast.map.impl.operation.MultipleEntryWithPredicateBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.AddInterceptorOperation", "com.hazelcast.map.impl.operation.AddInterceptorOperation()"], ["com.hazelcast.map.impl.operation.AddInterceptorOperation", "com.hazelcast.map.impl.operation.AddInterceptorOperation(java.lang.String, com.hazelcast.map.MapInterceptor, java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.operation.AddInterceptorOperation.getServiceName()"], ["void", "com.hazelcast.map.impl.operation.AddInterceptorOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.AddInterceptorOperation.getResponse()"], ["void", "com.hazelcast.map.impl.operation.AddInterceptorOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.map.impl.operation.AddInterceptorOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.map.impl.operation.AddInterceptorOperation.getName()"], ["int", "com.hazelcast.map.impl.operation.AddInterceptorOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.AddInterceptorOperation.getId()"], ["com.hazelcast.map.impl.operation.MapIsEmptyOperation", "com.hazelcast.map.impl.operation.MapIsEmptyOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapIsEmptyOperation", "com.hazelcast.map.impl.operation.MapIsEmptyOperation()"], ["void", "com.hazelcast.map.impl.operation.MapIsEmptyOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MapIsEmptyOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.MapIsEmptyOperation.getId()"], ["com.hazelcast.map.impl.operation.PutAllBackupOperation", "com.hazelcast.map.impl.operation.PutAllBackupOperation(java.lang.String, com.hazelcast.map.impl.MapEntries, java.util.List<com.hazelcast.map.impl.record.RecordInfo>)"], ["com.hazelcast.map.impl.operation.PutAllBackupOperation", "com.hazelcast.map.impl.operation.PutAllBackupOperation()"], ["void", "com.hazelcast.map.impl.operation.PutAllBackupOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.PutAllBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.PutAllBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.MultipleEntryOperationFactory", "com.hazelcast.map.impl.operation.MultipleEntryOperationFactory()"], ["com.hazelcast.map.impl.operation.MultipleEntryOperationFactory", "com.hazelcast.map.impl.operation.MultipleEntryOperationFactory(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MultipleEntryOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.MultipleEntryOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MultipleEntryOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.MultipleEntryOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.GetAllOperation", "com.hazelcast.map.impl.operation.GetAllOperation()"], ["com.hazelcast.map.impl.operation.GetAllOperation", "com.hazelcast.map.impl.operation.GetAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.map.impl.operation.GetAllOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.GetAllOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.GetAllOperation.getId()"], ["com.hazelcast.map.impl.operation.WriteBehindStateHolder", "com.hazelcast.map.impl.operation.WriteBehindStateHolder()"], ["com.hazelcast.map.impl.operation.WriteBehindStateHolder", "com.hazelcast.map.impl.operation.WriteBehindStateHolder(com.hazelcast.map.impl.operation.MapReplicationOperation)"], ["void", "com.hazelcast.map.impl.operation.WriteBehindStateHolder.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.WriteBehindStateHolder.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.WriteBehindStateHolder.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.WriteBehindStateHolder.getId()"], ["com.hazelcast.map.impl.operation.MapFlushOperation", "com.hazelcast.map.impl.operation.MapFlushOperation()"], ["com.hazelcast.map.impl.operation.MapFlushOperation", "com.hazelcast.map.impl.operation.MapFlushOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.MapFlushOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MapFlushOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.MapFlushOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.MapFlushOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.MapFlushOperation.getSyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MapFlushOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.MapFlushOperation.getId()"], ["com.hazelcast.map.impl.operation.PutTransientOperation", "com.hazelcast.map.impl.operation.PutTransientOperation()"], ["com.hazelcast.map.impl.operation.PutTransientOperation", "com.hazelcast.map.impl.operation.PutTransientOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.operation.PutTransientOperation.run()"], ["void", "com.hazelcast.map.impl.operation.PutTransientOperation.onWaitExpire()"], ["int", "com.hazelcast.map.impl.operation.PutTransientOperation.getId()"], ["com.hazelcast.map.impl.operation.ContainsValueOperation", "com.hazelcast.map.impl.operation.ContainsValueOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.ContainsValueOperation", "com.hazelcast.map.impl.operation.ContainsValueOperation()"], ["void", "com.hazelcast.map.impl.operation.ContainsValueOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.ContainsValueOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.ContainsValueOperation.getId()"], ["com.hazelcast.map.impl.operation.PostJoinMapOperation", "com.hazelcast.map.impl.operation.PostJoinMapOperation()"], ["java.lang.String", "com.hazelcast.map.impl.operation.PostJoinMapOperation.getServiceName()"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation.addMapInterceptors(com.hazelcast.map.impl.MapContainer)"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation.run()"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation.setInfoList(java.util.List<com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo>)"], ["int", "com.hazelcast.map.impl.operation.PostJoinMapOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.PostJoinMapOperation.getId()"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation.addMapIndex(com.hazelcast.map.impl.MapServiceContext, com.hazelcast.map.impl.MapContainer)"], ["void", "com.hazelcast.map.impl.operation.PostJoinMapOperation.setTarget(com.hazelcast.nio.Address)"], ["com.hazelcast.map.impl.operation.MapFetchEntriesOperation", "com.hazelcast.map.impl.operation.MapFetchEntriesOperation()"], ["com.hazelcast.map.impl.operation.MapFetchEntriesOperation", "com.hazelcast.map.impl.operation.MapFetchEntriesOperation(java.lang.String, int, int)"], ["void", "com.hazelcast.map.impl.operation.MapFetchEntriesOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MapFetchEntriesOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.MapFetchEntriesOperation.getId()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryOperation", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryOperation", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation(java.lang.String, com.hazelcast.map.EntryProcessor)"], ["void", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation.innerBeforeRun()"], ["void", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation.getSyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryOperation.getId()"], ["com.hazelcast.map.impl.operation.DefaultMapOperationProvider", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider()"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createMapSizeOperationFactory(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createPutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createTryPutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createPutIfAbsentOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createPutTransientOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createTryRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createReplaceOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createRemoveIfSameOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createReplaceIfSameOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createDeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createClearOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createEntryOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createEvictOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createEvictAllOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createContainsKeyOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createContainsValueOperationFactory(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createGetAllOperationFactory(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createEvictAllOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createClearOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createMapFlushOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createLoadAllOperationFactory(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createGetEntryViewOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createPartitionWideEntryOperationFactory(java.lang.String, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createTxnDeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createTxnLockAndGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, java.lang.String, boolean, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createTxnSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createLegacyMergeOperation(java.lang.String, com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>, com.hazelcast.map.merge.MapMergePolicy, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createMergeOperation(java.lang.String, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createMapFlushOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createLoadMapOperation(java.lang.String, boolean)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createPartitionWideEntryWithPredicateOperationFactory(java.lang.String, com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createMultipleEntryOperationFactory(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createQueryOperation(com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createQueryPartitionOperation(com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createLoadAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createPutAllOperation(java.lang.String, com.hazelcast.map.impl.MapEntries)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createPutAllOperationFactory(java.lang.String, int[], com.hazelcast.map.impl.MapEntries[])"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createMergeOperationFactory(java.lang.String, int[], java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>[], com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createPutFromLoadAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createFetchKeysOperation(java.lang.String, int, int)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createFetchEntriesOperation(java.lang.String, int, int)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.DefaultMapOperationProvider.createFetchWithQueryOperation(java.lang.String, int, int, com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.TryRemoveOperation", "com.hazelcast.map.impl.operation.TryRemoveOperation()"], ["com.hazelcast.map.impl.operation.TryRemoveOperation", "com.hazelcast.map.impl.operation.TryRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.operation.TryRemoveOperation.run()"], ["void", "com.hazelcast.map.impl.operation.TryRemoveOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.TryRemoveOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.TryRemoveOperation.shouldBackup()"], ["void", "com.hazelcast.map.impl.operation.TryRemoveOperation.onWaitExpire()"], ["int", "com.hazelcast.map.impl.operation.TryRemoveOperation.getId()"], ["com.hazelcast.map.impl.operation.PutBackupOperation", "com.hazelcast.map.impl.operation.PutBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.record.RecordInfo)"], ["com.hazelcast.map.impl.operation.PutBackupOperation", "com.hazelcast.map.impl.operation.PutBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.record.RecordInfo, boolean)"], ["com.hazelcast.map.impl.operation.PutBackupOperation", "com.hazelcast.map.impl.operation.PutBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.record.RecordInfo, boolean, boolean)"], ["com.hazelcast.map.impl.operation.PutBackupOperation", "com.hazelcast.map.impl.operation.PutBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.record.RecordInfo, boolean, boolean, boolean)"], ["com.hazelcast.map.impl.operation.PutBackupOperation", "com.hazelcast.map.impl.operation.PutBackupOperation()"], ["void", "com.hazelcast.map.impl.operation.PutBackupOperation.run()"], ["void", "com.hazelcast.map.impl.operation.PutBackupOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.PutBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.PutBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperation", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperation()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperation", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperation(java.lang.String, com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryWithPredicateOperation.getId()"], ["com.hazelcast.map.impl.operation.RemoveInterceptorOperation", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation()"], ["com.hazelcast.map.impl.operation.RemoveInterceptorOperation", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation.getResponse()"], ["void", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.String", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation.getName()"], ["int", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.RemoveInterceptorOperation.getId()"], ["com.hazelcast.map.impl.operation.WanEventHolder", "com.hazelcast.map.impl.operation.WanEventHolder(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.core.EntryEventType)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.operation.WanEventHolder.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.operation.WanEventHolder.getValue()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.map.impl.operation.WanEventHolder.getEventType()"], ["com.hazelcast.map.impl.operation.AwaitMapFlushOperation", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation()"], ["com.hazelcast.map.impl.operation.AwaitMapFlushOperation", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation(java.lang.String, long)"], ["void", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation.innerBeforeRun()"], ["void", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation.getResponse()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation.getWaitKey()"], ["boolean", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation.shouldWait()"], ["void", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation.onWaitExpire()"], ["int", "com.hazelcast.map.impl.operation.AwaitMapFlushOperation.getId()"], ["com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation()"], ["com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation(java.util.List<java.lang.String>)"], ["java.lang.String", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.getServiceName()"], ["void", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.getResponse()"], ["void", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.MapGetInvalidationMetaDataOperation.getId()"], ["com.hazelcast.map.impl.operation.MapFlushOperationFactory", "com.hazelcast.map.impl.operation.MapFlushOperationFactory()"], ["com.hazelcast.map.impl.operation.MapFlushOperationFactory", "com.hazelcast.map.impl.operation.MapFlushOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MapFlushOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.MapFlushOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MapFlushOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.MapFlushOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.RemoveOperation", "com.hazelcast.map.impl.operation.RemoveOperation()"], ["com.hazelcast.map.impl.operation.RemoveOperation", "com.hazelcast.map.impl.operation.RemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["void", "com.hazelcast.map.impl.operation.RemoveOperation.run()"], ["void", "com.hazelcast.map.impl.operation.RemoveOperation.afterRun()"], ["boolean", "com.hazelcast.map.impl.operation.RemoveOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.RemoveOperation.getId()"], ["com.hazelcast.map.impl.operation.ReplaceIfSameOperation", "com.hazelcast.map.impl.operation.ReplaceIfSameOperation()"], ["com.hazelcast.map.impl.operation.ReplaceIfSameOperation", "com.hazelcast.map.impl.operation.ReplaceIfSameOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.operation.ReplaceIfSameOperation.run()"], ["void", "com.hazelcast.map.impl.operation.ReplaceIfSameOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.ReplaceIfSameOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.ReplaceIfSameOperation.shouldBackup()"], ["void", "com.hazelcast.map.impl.operation.ReplaceIfSameOperation.onWaitExpire()"], ["int", "com.hazelcast.map.impl.operation.ReplaceIfSameOperation.getId()"], ["com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation()"], ["com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation(java.lang.String, com.hazelcast.core.EntryEventType, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, long, long, com.hazelcast.map.EntryBackupProcessor)"], ["void", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.run()"], ["boolean", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.returnsResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.getBackupOperation()"], ["boolean", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.getSyncBackupCount()"], ["boolean", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.getNotifiedKey()"], ["java.lang.String", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.getServiceName()"], ["int", "com.hazelcast.map.impl.operation.EntryOffloadableSetUnlockOperation.getId()"], ["com.hazelcast.map.impl.operation.NotifyMapFlushOperation", "com.hazelcast.map.impl.operation.NotifyMapFlushOperation(java.lang.String, long)"], ["com.hazelcast.map.impl.operation.NotifyMapFlushOperation", "com.hazelcast.map.impl.operation.NotifyMapFlushOperation()"], ["void", "com.hazelcast.map.impl.operation.NotifyMapFlushOperation.run()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.operation.NotifyMapFlushOperation.getNotifiedKey()"], ["boolean", "com.hazelcast.map.impl.operation.NotifyMapFlushOperation.shouldNotify()"], ["int", "com.hazelcast.map.impl.operation.NotifyMapFlushOperation.getId()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryOperationFactory", "com.hazelcast.map.impl.operation.PartitionWideEntryOperationFactory()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryOperationFactory", "com.hazelcast.map.impl.operation.PartitionWideEntryOperationFactory(java.lang.String, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.PartitionWideEntryOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.PartitionWideEntryOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.PartitionWideEntryOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory", "com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory()"], ["com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory", "com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory(java.lang.String, int[], com.hazelcast.map.impl.MapEntries[])"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory.createPartitionOperation(int)"], ["void", "com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.PutAllPartitionAwareOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.DeleteOperation", "com.hazelcast.map.impl.operation.DeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.DeleteOperation", "com.hazelcast.map.impl.operation.DeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.DeleteOperation", "com.hazelcast.map.impl.operation.DeleteOperation()"], ["void", "com.hazelcast.map.impl.operation.DeleteOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.DeleteOperation.getResponse()"], ["void", "com.hazelcast.map.impl.operation.DeleteOperation.afterRun()"], ["boolean", "com.hazelcast.map.impl.operation.DeleteOperation.shouldBackup()"], ["void", "com.hazelcast.map.impl.operation.DeleteOperation.onWaitExpire()"], ["int", "com.hazelcast.map.impl.operation.DeleteOperation.getId()"], ["com.hazelcast.map.impl.operation.PutIfAbsentOperation", "com.hazelcast.map.impl.operation.PutIfAbsentOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.PutIfAbsentOperation", "com.hazelcast.map.impl.operation.PutIfAbsentOperation()"], ["void", "com.hazelcast.map.impl.operation.PutIfAbsentOperation.run()"], ["void", "com.hazelcast.map.impl.operation.PutIfAbsentOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.PutIfAbsentOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.PutIfAbsentOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.PutIfAbsentOperation.getId()"], ["com.hazelcast.map.impl.operation.MergeOperationFactory", "com.hazelcast.map.impl.operation.MergeOperationFactory()"], ["com.hazelcast.map.impl.operation.MergeOperationFactory", "com.hazelcast.map.impl.operation.MergeOperationFactory(java.lang.String, int[], java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>[], com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MergeOperationFactory.createPartitionOperation(int)"], ["void", "com.hazelcast.map.impl.operation.MergeOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MergeOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.MergeOperationFactory.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.MergeOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.EvictBatchBackupOperation", "com.hazelcast.map.impl.operation.EvictBatchBackupOperation()"], ["com.hazelcast.map.impl.operation.EvictBatchBackupOperation", "com.hazelcast.map.impl.operation.EvictBatchBackupOperation(java.lang.String, java.util.Collection<com.hazelcast.map.impl.recordstore.ExpiredKey>, int)"], ["void", "com.hazelcast.map.impl.operation.EvictBatchBackupOperation.run()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.map.impl.operation.EvictBatchBackupOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.map.impl.operation.EvictBatchBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.AccumulatorConsumerOperation", "com.hazelcast.map.impl.operation.AccumulatorConsumerOperation()"], ["com.hazelcast.map.impl.operation.AccumulatorConsumerOperation", "com.hazelcast.map.impl.operation.AccumulatorConsumerOperation(java.util.Queue<com.hazelcast.map.impl.querycache.accumulator.Accumulator>, int)"], ["void", "com.hazelcast.map.impl.operation.AccumulatorConsumerOperation.run()"], ["boolean", "com.hazelcast.map.impl.operation.AccumulatorConsumerOperation.returnsResponse()"], ["int", "com.hazelcast.map.impl.operation.AccumulatorConsumerOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.AccumulatorConsumerOperation.getId()"], ["com.hazelcast.map.impl.operation.MapFetchWithQueryOperation", "com.hazelcast.map.impl.operation.MapFetchWithQueryOperation()"], ["com.hazelcast.map.impl.operation.MapFetchWithQueryOperation", "com.hazelcast.map.impl.operation.MapFetchWithQueryOperation(java.lang.String, int, int, com.hazelcast.map.impl.query.Query)"], ["void", "com.hazelcast.map.impl.operation.MapFetchWithQueryOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MapFetchWithQueryOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.MapFetchWithQueryOperation.getId()"], ["com.hazelcast.map.impl.operation.AbstractMultipleEntryBackupOperation", "com.hazelcast.map.impl.operation.AbstractMultipleEntryBackupOperation()"], ["com.hazelcast.map.impl.operation.AbstractMultipleEntryBackupOperation", "com.hazelcast.map.impl.operation.AbstractMultipleEntryBackupOperation(java.lang.String, com.hazelcast.map.EntryBackupProcessor)"], ["com.hazelcast.map.impl.operation.BasePutOperation", "com.hazelcast.map.impl.operation.BasePutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.BasePutOperation", "com.hazelcast.map.impl.operation.BasePutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.BasePutOperation", "com.hazelcast.map.impl.operation.BasePutOperation()"], ["void", "com.hazelcast.map.impl.operation.BasePutOperation.afterRun()"], ["boolean", "com.hazelcast.map.impl.operation.BasePutOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.BasePutOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.BasePutOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.BasePutOperation.getSyncBackupCount()"], ["void", "com.hazelcast.map.impl.operation.BasePutOperation.onWaitExpire()"], ["com.hazelcast.map.impl.operation.EvictAllOperation", "com.hazelcast.map.impl.operation.EvictAllOperation()"], ["com.hazelcast.map.impl.operation.EvictAllOperation", "com.hazelcast.map.impl.operation.EvictAllOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.EvictAllOperation.run()"], ["void", "com.hazelcast.map.impl.operation.EvictAllOperation.afterRun()"], ["boolean", "com.hazelcast.map.impl.operation.EvictAllOperation.shouldBackup()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.EvictAllOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.EvictAllOperation.getSyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.EvictAllOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.EvictAllOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.EvictAllOperation.getId()"], ["void", "com.hazelcast.map.impl.operation.EntryOperation$1.run()"], ["com.hazelcast.map.impl.operation.AbstractMapOperationFactory", "com.hazelcast.map.impl.operation.AbstractMapOperationFactory()"], ["int", "com.hazelcast.map.impl.operation.AbstractMapOperationFactory.getFactoryId()"], ["void", "com.hazelcast.map.impl.operation.EntryOperation$3$1.run()"], ["com.hazelcast.map.impl.operation.ClearExpiredOperation", "com.hazelcast.map.impl.operation.ClearExpiredOperation(int)"], ["java.lang.String", "com.hazelcast.map.impl.operation.ClearExpiredOperation.getServiceName()"], ["void", "com.hazelcast.map.impl.operation.ClearExpiredOperation.run()"], ["void", "com.hazelcast.map.impl.operation.ClearExpiredOperation.onExecutionFailure(java.lang.Throwable)"], ["void", "com.hazelcast.map.impl.operation.ClearExpiredOperation.afterRun()"], ["boolean", "com.hazelcast.map.impl.operation.ClearExpiredOperation.returnsResponse()"], ["com.hazelcast.map.impl.operation.KeyLoadStatusOperationFactory", "com.hazelcast.map.impl.operation.KeyLoadStatusOperationFactory()"], ["com.hazelcast.map.impl.operation.KeyLoadStatusOperationFactory", "com.hazelcast.map.impl.operation.KeyLoadStatusOperationFactory(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.KeyLoadStatusOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.KeyLoadStatusOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.KeyLoadStatusOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.KeyLoadStatusOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryBackupOperation", "com.hazelcast.map.impl.operation.PartitionWideEntryBackupOperation()"], ["com.hazelcast.map.impl.operation.PartitionWideEntryBackupOperation", "com.hazelcast.map.impl.operation.PartitionWideEntryBackupOperation(java.lang.String, com.hazelcast.map.EntryBackupProcessor)"], ["void", "com.hazelcast.map.impl.operation.PartitionWideEntryBackupOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.PartitionWideEntryBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.PartitionWideEntryBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.LoadMapOperation", "com.hazelcast.map.impl.operation.LoadMapOperation()"], ["com.hazelcast.map.impl.operation.LoadMapOperation", "com.hazelcast.map.impl.operation.LoadMapOperation(java.lang.String, boolean)"], ["void", "com.hazelcast.map.impl.operation.LoadMapOperation.run()"], ["int", "com.hazelcast.map.impl.operation.LoadMapOperation.getId()"], ["com.hazelcast.map.impl.operation.SetOperation", "com.hazelcast.map.impl.operation.SetOperation()"], ["com.hazelcast.map.impl.operation.SetOperation", "com.hazelcast.map.impl.operation.SetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.map.impl.operation.SetOperation.run()"], ["void", "com.hazelcast.map.impl.operation.SetOperation.afterRun()"], ["int", "com.hazelcast.map.impl.operation.SetOperation.getId()"], ["com.hazelcast.map.impl.operation.MapOperationProviders", "com.hazelcast.map.impl.operation.MapOperationProviders(com.hazelcast.map.impl.MapServiceContext)"], ["com.hazelcast.map.impl.operation.MapOperationProvider", "com.hazelcast.map.impl.operation.MapOperationProviders.getOperationProvider(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperationProvider", "com.hazelcast.map.impl.operation.MapOperationProviders.getOperationProvider(com.hazelcast.config.MapConfig)"], ["com.hazelcast.map.impl.operation.TriggerLoadIfNeededOperation", "com.hazelcast.map.impl.operation.TriggerLoadIfNeededOperation()"], ["com.hazelcast.map.impl.operation.TriggerLoadIfNeededOperation", "com.hazelcast.map.impl.operation.TriggerLoadIfNeededOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.TriggerLoadIfNeededOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.TriggerLoadIfNeededOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.TriggerLoadIfNeededOperation.returnsResponse()"], ["int", "com.hazelcast.map.impl.operation.TriggerLoadIfNeededOperation.getId()"], ["com.hazelcast.map.impl.operation.RemoveBackupOperation", "com.hazelcast.map.impl.operation.RemoveBackupOperation()"], ["com.hazelcast.map.impl.operation.RemoveBackupOperation", "com.hazelcast.map.impl.operation.RemoveBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.RemoveBackupOperation", "com.hazelcast.map.impl.operation.RemoveBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.RemoveBackupOperation", "com.hazelcast.map.impl.operation.RemoveBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, boolean)"], ["void", "com.hazelcast.map.impl.operation.RemoveBackupOperation.run()"], ["void", "com.hazelcast.map.impl.operation.RemoveBackupOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.RemoveBackupOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.RemoveBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.GetOperation", "com.hazelcast.map.impl.operation.GetOperation()"], ["com.hazelcast.map.impl.operation.GetOperation", "com.hazelcast.map.impl.operation.GetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.operation.GetOperation.run()"], ["void", "com.hazelcast.map.impl.operation.GetOperation.afterRun()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.map.impl.operation.GetOperation.getWaitKey()"], ["boolean", "com.hazelcast.map.impl.operation.GetOperation.shouldWait()"], ["void", "com.hazelcast.map.impl.operation.GetOperation.onWaitExpire()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.operation.GetOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.GetOperation.getId()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.GetOperation.getResponse()"], ["com.hazelcast.map.impl.operation.IsKeyLoadFinishedOperation", "com.hazelcast.map.impl.operation.IsKeyLoadFinishedOperation()"], ["com.hazelcast.map.impl.operation.IsKeyLoadFinishedOperation", "com.hazelcast.map.impl.operation.IsKeyLoadFinishedOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.IsKeyLoadFinishedOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.IsKeyLoadFinishedOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.IsKeyLoadFinishedOperation.returnsResponse()"], ["int", "com.hazelcast.map.impl.operation.IsKeyLoadFinishedOperation.getId()"], ["com.hazelcast.map.impl.operation.WANAwareOperationProvider", "com.hazelcast.map.impl.operation.WANAwareOperationProvider(com.hazelcast.map.impl.MapServiceContext, com.hazelcast.map.impl.operation.MapOperationProvider)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createPutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createTryPutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createPutIfAbsentOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createPutTransientOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createTryRemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createReplaceOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createRemoveIfSameOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createReplaceIfSameOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createDeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createEntryOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createQueryOperation(com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createQueryPartitionOperation(com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createPutAllOperation(java.lang.String, com.hazelcast.map.impl.MapEntries)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createPutAllOperationFactory(java.lang.String, int[], com.hazelcast.map.impl.MapEntries[])"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createPutFromLoadAllOperation(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createTxnDeleteOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createTxnSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createLegacyMergeOperation(java.lang.String, com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>, com.hazelcast.map.merge.MapMergePolicy, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createMergeOperation(java.lang.String, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.nio.serialization.Data, com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes>, boolean)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createPartitionWideEntryOperationFactory(java.lang.String, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createPartitionWideEntryWithPredicateOperationFactory(java.lang.String, com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createMultipleEntryOperationFactory(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createFetchWithQueryOperation(java.lang.String, int, int, com.hazelcast.map.impl.query.Query)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createFetchEntriesOperation(java.lang.String, int, int)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createFetchKeysOperation(java.lang.String, int, int)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createLoadMapOperation(java.lang.String, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createMapFlushOperation(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createMapSizeOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createGetAllOperationFactory(java.lang.String, java.util.List)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createLoadAllOperationFactory(java.lang.String, java.util.List, boolean)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createMapFlushOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createClearOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createEvictAllOperationFactory(java.lang.String)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createContainsValueOperationFactory(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createTxnLockAndGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, java.lang.String, boolean, boolean)"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createMergeOperationFactory(java.lang.String, int[], java.util.List[], com.hazelcast.spi.merge.SplitBrainMergePolicy)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createLoadAllOperation(java.lang.String, java.util.List, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createGetEntryViewOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createContainsKeyOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createEvictAllOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createEvictOperation(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.map.impl.operation.MapOperation", "com.hazelcast.map.impl.operation.WANAwareOperationProvider.createClearOperation(java.lang.String)"], ["com.hazelcast.map.impl.operation.SynchronizeIndexesForPartitionTask", "com.hazelcast.map.impl.operation.SynchronizeIndexesForPartitionTask(int, java.util.List<com.hazelcast.query.impl.MapIndexInfo>, com.hazelcast.map.impl.MapService, com.hazelcast.spi.serialization.SerializationService, com.hazelcast.internal.partition.InternalPartitionService)"], ["void", "com.hazelcast.map.impl.operation.SynchronizeIndexesForPartitionTask.run()"], ["int", "com.hazelcast.map.impl.operation.SynchronizeIndexesForPartitionTask.getPartitionId()"], ["com.hazelcast.map.impl.operation.MapFlushBackupOperation", "com.hazelcast.map.impl.operation.MapFlushBackupOperation()"], ["com.hazelcast.map.impl.operation.MapFlushBackupOperation", "com.hazelcast.map.impl.operation.MapFlushBackupOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.MapFlushBackupOperation.run()"], ["int", "com.hazelcast.map.impl.operation.MapFlushBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.MapLoadAllOperationFactory", "com.hazelcast.map.impl.operation.MapLoadAllOperationFactory()"], ["com.hazelcast.map.impl.operation.MapLoadAllOperationFactory", "com.hazelcast.map.impl.operation.MapLoadAllOperationFactory(java.lang.String, java.util.List<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MapLoadAllOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.MapLoadAllOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.MapLoadAllOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.MapLoadAllOperationFactory.getId()"], ["com.hazelcast.map.impl.operation.EntryOperator", "com.hazelcast.map.impl.operation.EntryOperator.operator(com.hazelcast.map.impl.operation.MapOperation)"], ["com.hazelcast.map.impl.operation.EntryOperator", "com.hazelcast.map.impl.operation.EntryOperator.operator(com.hazelcast.map.impl.operation.MapOperation, java.lang.Object)"], ["com.hazelcast.map.impl.operation.EntryOperator", "com.hazelcast.map.impl.operation.EntryOperator.operator(com.hazelcast.map.impl.operation.MapOperation, java.lang.Object, com.hazelcast.query.Predicate)"], ["com.hazelcast.map.impl.operation.EntryOperator", "com.hazelcast.map.impl.operation.EntryOperator.init(com.hazelcast.nio.serialization.Data, java.lang.Object, java.lang.Object, com.hazelcast.nio.serialization.Data, com.hazelcast.core.EntryEventType)"], ["com.hazelcast.map.impl.operation.EntryOperator", "com.hazelcast.map.impl.operation.EntryOperator.operateOnKey(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.EntryOperator", "com.hazelcast.map.impl.operation.EntryOperator.operateOnKeyValue(com.hazelcast.nio.serialization.Data, java.lang.Object)"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.map.impl.operation.EntryOperator.getEventType()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.EntryOperator.getNewValue()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.EntryOperator.getOldValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.operation.EntryOperator.getResult()"], ["com.hazelcast.map.impl.operation.EntryOperator", "com.hazelcast.map.impl.operation.EntryOperator.doPostOperateOps()"], ["com.hazelcast.map.impl.operation.MapReplicationOperation", "com.hazelcast.map.impl.operation.MapReplicationOperation()"], ["com.hazelcast.map.impl.operation.MapReplicationOperation", "com.hazelcast.map.impl.operation.MapReplicationOperation(com.hazelcast.map.impl.PartitionContainer, int, int)"], ["com.hazelcast.map.impl.operation.MapReplicationOperation", "com.hazelcast.map.impl.operation.MapReplicationOperation(com.hazelcast.map.impl.PartitionContainer, java.util.Collection<com.hazelcast.spi.ServiceNamespace>, int, int)"], ["void", "com.hazelcast.map.impl.operation.MapReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.map.impl.operation.MapReplicationOperation.getServiceName()"], ["int", "com.hazelcast.map.impl.operation.MapReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.operation.MapReplicationOperation.getId()"], ["void", "com.hazelcast.map.impl.operation.MapReplicationOperation.setTarget(com.hazelcast.nio.Address)"], ["com.hazelcast.map.impl.operation.ReplaceOperation", "com.hazelcast.map.impl.operation.ReplaceOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.operation.ReplaceOperation", "com.hazelcast.map.impl.operation.ReplaceOperation()"], ["void", "com.hazelcast.map.impl.operation.ReplaceOperation.run()"], ["boolean", "com.hazelcast.map.impl.operation.ReplaceOperation.shouldBackup()"], ["void", "com.hazelcast.map.impl.operation.ReplaceOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.ReplaceOperation.getResponse()"], ["int", "com.hazelcast.map.impl.operation.ReplaceOperation.getId()"], ["com.hazelcast.map.impl.operation.KeyBasedMapOperation", "com.hazelcast.map.impl.operation.KeyBasedMapOperation()"], ["com.hazelcast.map.impl.operation.KeyBasedMapOperation", "com.hazelcast.map.impl.operation.KeyBasedMapOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.operation.KeyBasedMapOperation.getKey()"], ["long", "com.hazelcast.map.impl.operation.KeyBasedMapOperation.getThreadId()"], ["void", "com.hazelcast.map.impl.operation.KeyBasedMapOperation.setThreadId(long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.operation.KeyBasedMapOperation.getValue()"], ["long", "com.hazelcast.map.impl.operation.KeyBasedMapOperation.getTtl()"], ["com.hazelcast.map.impl.operation.KeyLoadStatusOperation", "com.hazelcast.map.impl.operation.KeyLoadStatusOperation()"], ["com.hazelcast.map.impl.operation.KeyLoadStatusOperation", "com.hazelcast.map.impl.operation.KeyLoadStatusOperation(java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.map.impl.operation.KeyLoadStatusOperation.run()"], ["int", "com.hazelcast.map.impl.operation.KeyLoadStatusOperation.getId()"], ["com.hazelcast.map.impl.operation.ClearBackupOperation", "com.hazelcast.map.impl.operation.ClearBackupOperation()"], ["com.hazelcast.map.impl.operation.ClearBackupOperation", "com.hazelcast.map.impl.operation.ClearBackupOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.ClearBackupOperation.run()"], ["int", "com.hazelcast.map.impl.operation.ClearBackupOperation.getId()"], ["com.hazelcast.map.impl.operation.MultipleEntryOperation", "com.hazelcast.map.impl.operation.MultipleEntryOperation()"], ["com.hazelcast.map.impl.operation.MultipleEntryOperation", "com.hazelcast.map.impl.operation.MultipleEntryOperation(java.lang.String, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryProcessor)"], ["void", "com.hazelcast.map.impl.operation.MultipleEntryOperation.innerBeforeRun()"], ["void", "com.hazelcast.map.impl.operation.MultipleEntryOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.MultipleEntryOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.MultipleEntryOperation.shouldBackup()"], ["int", "com.hazelcast.map.impl.operation.MultipleEntryOperation.getSyncBackupCount()"], ["int", "com.hazelcast.map.impl.operation.MultipleEntryOperation.getAsyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.MultipleEntryOperation.getBackupOperation()"], ["int", "com.hazelcast.map.impl.operation.MultipleEntryOperation.getId()"], ["com.hazelcast.map.impl.operation.MapFlushWaitNotifyKey", "com.hazelcast.map.impl.operation.MapFlushWaitNotifyKey(java.lang.String, int, long)"], ["boolean", "com.hazelcast.map.impl.operation.MapFlushWaitNotifyKey.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.operation.MapFlushWaitNotifyKey.hashCode()"], ["com.hazelcast.map.impl.operation.RemoveIfSameOperation", "com.hazelcast.map.impl.operation.RemoveIfSameOperation()"], ["com.hazelcast.map.impl.operation.RemoveIfSameOperation", "com.hazelcast.map.impl.operation.RemoveIfSameOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.operation.RemoveIfSameOperation.run()"], ["void", "com.hazelcast.map.impl.operation.RemoveIfSameOperation.afterRun()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.RemoveIfSameOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.RemoveIfSameOperation.shouldBackup()"], ["void", "com.hazelcast.map.impl.operation.RemoveIfSameOperation.onWaitExpire()"], ["int", "com.hazelcast.map.impl.operation.RemoveIfSameOperation.getId()"], ["void", "com.hazelcast.map.impl.operation.EntryOperation$3.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["com.hazelcast.map.impl.operation.IsPartitionLoadedOperation", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperation()"], ["com.hazelcast.map.impl.operation.IsPartitionLoadedOperation", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperation(java.lang.String)"], ["void", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperation.getResponse()"], ["boolean", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperation.returnsResponse()"], ["int", "com.hazelcast.map.impl.operation.IsPartitionLoadedOperation.getId()"], ["com.hazelcast.map.impl.operation.ContainsValueOperationFactory", "com.hazelcast.map.impl.operation.ContainsValueOperationFactory()"], ["com.hazelcast.map.impl.operation.ContainsValueOperationFactory", "com.hazelcast.map.impl.operation.ContainsValueOperationFactory(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.operation.ContainsValueOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.operation.ContainsValueOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.operation.ContainsValueOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.operation.ContainsValueOperationFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$80.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$80.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$116.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$116.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$70.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$70.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.MapListenerAdaptors$6.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.MapListenerAdaptors$6.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.EntryListenerAdaptors$5.createNew(com.hazelcast.core.EntryListener)"], ["java.lang.Object", "com.hazelcast.map.impl.EntryListenerAdaptors$5.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$69.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$69.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapPartitionAwareService", "com.hazelcast.map.impl.MapPartitionAwareService(com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.MapPartitionAwareService.onPartitionLost(com.hazelcast.spi.partition.IPartitionLostEvent)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$58.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$58.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$37.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$37.createNew(java.lang.Object)"], ["int", "com.hazelcast.map.impl.MapManagedService$ObjectNamespaceLockStoreInfoConstructorFunction$1.getBackupCount()"], ["int", "com.hazelcast.map.impl.MapManagedService$ObjectNamespaceLockStoreInfoConstructorFunction$1.getAsyncBackupCount()"], ["com.hazelcast.map.impl.recordstore.RecordStore", "com.hazelcast.map.impl.PartitionContainer$3.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.PartitionContainer$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$60.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$60.createNew(java.lang.Object)"], ["K", "com.hazelcast.map.impl.NullEntryView.getKey()"], ["V", "com.hazelcast.map.impl.NullEntryView.getValue()"], ["long", "com.hazelcast.map.impl.NullEntryView.getCost()"], ["long", "com.hazelcast.map.impl.NullEntryView.getCreationTime()"], ["long", "com.hazelcast.map.impl.NullEntryView.getExpirationTime()"], ["long", "com.hazelcast.map.impl.NullEntryView.getHits()"], ["long", "com.hazelcast.map.impl.NullEntryView.getLastAccessTime()"], ["long", "com.hazelcast.map.impl.NullEntryView.getLastStoredTime()"], ["long", "com.hazelcast.map.impl.NullEntryView.getLastUpdateTime()"], ["long", "com.hazelcast.map.impl.NullEntryView.getVersion()"], ["long", "com.hazelcast.map.impl.NullEntryView.getTtl()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$84.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$84.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$8$1.onEvent(com.hazelcast.internal.nearcache.impl.invalidation.Invalidation)"], ["void", "com.hazelcast.map.impl.MapListenerAdaptors$8$1.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$96.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$96.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.MapKeyLoader$3.onResponse(java.lang.Boolean)"], ["void", "com.hazelcast.map.impl.MapKeyLoader$3.onFailure(java.lang.Throwable)"], ["void", "com.hazelcast.map.impl.MapKeyLoader$3.onResponse(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$53.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$53.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$102.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$102.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$6$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.EntryListenerAdaptors$6$1.onEvent(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$61.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$61.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$51.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$51.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$48.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$48.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapKeyLoader$State[]", "com.hazelcast.map.impl.MapKeyLoader$State.values()"], ["com.hazelcast.map.impl.MapKeyLoader$State", "com.hazelcast.map.impl.MapKeyLoader$State.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.LatencyTrackingMapStore", "com.hazelcast.map.impl.LatencyTrackingMapStore(com.hazelcast.core.MapStore<K, V>, com.hazelcast.internal.diagnostics.StoreLatencyPlugin, java.lang.String)"], ["V", "com.hazelcast.map.impl.LatencyTrackingMapStore.load(K)"], ["java.util.Map<K, V>", "com.hazelcast.map.impl.LatencyTrackingMapStore.loadAll(java.util.Collection<K>)"], ["void", "com.hazelcast.map.impl.LatencyTrackingMapStore.store(K, V)"], ["void", "com.hazelcast.map.impl.LatencyTrackingMapStore.storeAll(java.util.Map<K, V>)"], ["void", "com.hazelcast.map.impl.LatencyTrackingMapStore.delete(K)"], ["void", "com.hazelcast.map.impl.LatencyTrackingMapStore.deleteAll(java.util.Collection<K>)"], ["com.hazelcast.map.impl.LocalMapStatsProvider", "com.hazelcast.map.impl.LocalMapStatsProvider(com.hazelcast.map.impl.MapServiceContext)"], ["com.hazelcast.monitor.impl.LocalMapStatsImpl", "com.hazelcast.map.impl.LocalMapStatsProvider.getLocalMapStatsImpl(java.lang.String)"], ["void", "com.hazelcast.map.impl.LocalMapStatsProvider.destroyLocalMapStatsImpl(java.lang.String)"], ["com.hazelcast.monitor.impl.LocalMapStatsImpl", "com.hazelcast.map.impl.LocalMapStatsProvider.createLocalMapStats(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalMapStats>", "com.hazelcast.map.impl.LocalMapStatsProvider.createAllLocalMapStats()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$77.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$77.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$76.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$76.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl$NearCacheInvalidationListener.onInvalidate(com.hazelcast.internal.nearcache.impl.invalidation.Invalidation)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.proxy.MapProxySupport$KeyToData.apply(K)"], ["java.lang.Object", "com.hazelcast.map.impl.proxy.MapProxySupport$KeyToData.apply(java.lang.Object)"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport$MapExecutionCallbackAdapter.onResponse(java.lang.Object)"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport$MapExecutionCallbackAdapter.onFailure(java.lang.Throwable)"], ["com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl(java.lang.String, com.hazelcast.map.impl.MapService, com.hazelcast.spi.NodeEngine, com.hazelcast.config.MapConfig)"], ["com.hazelcast.internal.nearcache.NearCache<java.lang.Object, java.lang.Object>", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl.getNearCache()"], ["void", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl.initialize()"], ["void", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl.clearInternal()"], ["void", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl.loadAllInternal(boolean)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl.executeOnKeyInternal(java.lang.Object, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl.executeOnKeysInternal(java.util.Set<K>, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryProcessor)"], ["void", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl.executeOnEntriesInternal(com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl.addNearCacheInvalidationListener(com.hazelcast.map.impl.nearcache.invalidation.InvalidationListener)"], ["com.hazelcast.map.impl.proxy.MapProxyImpl", "com.hazelcast.map.impl.proxy.MapProxyImpl(java.lang.String, com.hazelcast.map.impl.MapService, com.hazelcast.spi.NodeEngine, com.hazelcast.config.MapConfig)"], ["V", "com.hazelcast.map.impl.proxy.MapProxyImpl.get(java.lang.Object)"], ["V", "com.hazelcast.map.impl.proxy.MapProxyImpl.put(K, V)"], ["V", "com.hazelcast.map.impl.proxy.MapProxyImpl.put(K, V, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.tryPut(K, V, long, java.util.concurrent.TimeUnit)"], ["V", "com.hazelcast.map.impl.proxy.MapProxyImpl.putIfAbsent(K, V)"], ["V", "com.hazelcast.map.impl.proxy.MapProxyImpl.putIfAbsent(K, V, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.putTransient(K, V, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.replace(K, V, V)"], ["V", "com.hazelcast.map.impl.proxy.MapProxyImpl.replace(K, V)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.set(K, V)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.set(K, V, long, java.util.concurrent.TimeUnit)"], ["V", "com.hazelcast.map.impl.proxy.MapProxyImpl.remove(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.remove(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.removeAll(com.hazelcast.query.Predicate<K, V>)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.delete(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.containsValue(java.lang.Object)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.lock(K)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.lock(java.lang.Object, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.unlock(K)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.tryRemove(K, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.isLocked(K)"], ["java.util.Map<K, V>", "com.hazelcast.map.impl.proxy.MapProxyImpl.getAll(java.util.Set<K>)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.putAll(java.util.Map<? extends K, ? extends V>)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.tryLock(K)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.tryLock(K, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.tryLock(K, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.forceUnlock(K)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addInterceptor(com.hazelcast.map.MapInterceptor)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.removeInterceptor(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addLocalEntryListener(com.hazelcast.map.listener.MapListener)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addLocalEntryListener(com.hazelcast.core.EntryListener)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addLocalEntryListener(com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate<K, V>, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addLocalEntryListener(com.hazelcast.core.EntryListener, com.hazelcast.query.Predicate<K, V>, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addLocalEntryListener(com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate<K, V>, K, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addLocalEntryListener(com.hazelcast.core.EntryListener, com.hazelcast.query.Predicate<K, V>, K, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addEntryListener(com.hazelcast.map.listener.MapListener, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addEntryListener(com.hazelcast.core.EntryListener, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addEntryListener(com.hazelcast.map.listener.MapListener, K, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addEntryListener(com.hazelcast.core.EntryListener, K, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addEntryListener(com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate<K, V>, K, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addEntryListener(com.hazelcast.core.EntryListener, com.hazelcast.query.Predicate<K, V>, K, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addEntryListener(com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate<K, V>, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addEntryListener(com.hazelcast.core.EntryListener, com.hazelcast.query.Predicate<K, V>, boolean)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.removeEntryListener(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addPartitionLostListener(com.hazelcast.map.listener.MapPartitionLostListener)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.removePartitionLostListener(java.lang.String)"], ["com.hazelcast.core.EntryView<K, V>", "com.hazelcast.map.impl.proxy.MapProxyImpl.getEntryView(K)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.evict(java.lang.Object)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.evictAll()"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.loadAll(boolean)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.loadAll(java.util.Set<K>, boolean)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.map.impl.proxy.MapProxyImpl.entrySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.map.impl.proxy.MapProxyImpl.entrySet(com.hazelcast.query.Predicate)"], ["java.lang.Object", "com.hazelcast.map.impl.proxy.MapProxyImpl.executeOnKey(K, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.map.impl.proxy.MapProxyImpl.executeOnKeys(java.util.Set<K>, com.hazelcast.map.EntryProcessor)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.submitToKey(K, com.hazelcast.map.EntryProcessor, com.hazelcast.core.ExecutionCallback)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.map.impl.proxy.MapProxyImpl.submitToKey(K, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.map.impl.proxy.MapProxyImpl.executeOnEntries(com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.map.impl.proxy.MapProxyImpl.executeOnEntries(com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate)"], ["<R> R", "com.hazelcast.map.impl.proxy.MapProxyImpl.aggregate(com.hazelcast.aggregation.Aggregator<java.util.Map$Entry<K, V>, R>)"], ["<R> R", "com.hazelcast.map.impl.proxy.MapProxyImpl.aggregate(com.hazelcast.aggregation.Aggregator<java.util.Map$Entry<K, V>, R>, com.hazelcast.query.Predicate<K, V>)"], ["<R> java.util.Collection<R>", "com.hazelcast.map.impl.proxy.MapProxyImpl.project(com.hazelcast.projection.Projection<java.util.Map$Entry<K, V>, R>)"], ["<R> java.util.Collection<R>", "com.hazelcast.map.impl.proxy.MapProxyImpl.project(com.hazelcast.projection.Projection<java.util.Map$Entry<K, V>, R>, com.hazelcast.query.Predicate<K, V>)"], ["<SuppliedValue, Result> Result", "com.hazelcast.map.impl.proxy.MapProxyImpl.aggregate(com.hazelcast.mapreduce.aggregation.Supplier<K, V, SuppliedValue>, com.hazelcast.mapreduce.aggregation.Aggregation<K, SuppliedValue, Result>)"], ["<SuppliedValue, Result> Result", "com.hazelcast.map.impl.proxy.MapProxyImpl.aggregate(com.hazelcast.mapreduce.aggregation.Supplier<K, V, SuppliedValue>, com.hazelcast.mapreduce.aggregation.Aggregation<K, SuppliedValue, Result>, com.hazelcast.mapreduce.JobTracker)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.hazelcast.map.impl.proxy.MapProxyImpl.iterator(int, int, boolean)"], ["<R> java.util.Iterator<R>", "com.hazelcast.map.impl.proxy.MapProxyImpl.iterator(int, int, com.hazelcast.projection.Projection<java.util.Map$Entry<K, V>, R>, com.hazelcast.query.Predicate<K, V>)"], ["<T> com.hazelcast.core.ICompletableFuture<com.hazelcast.ringbuffer.ReadResultSet<T>>", "com.hazelcast.map.impl.proxy.MapProxyImpl.readFromEventJournal(long, int, int, int, com.hazelcast.util.function.Predicate<? super com.hazelcast.map.journal.EventJournalMapEvent<K, V>>, com.hazelcast.projection.Projection<? super com.hazelcast.map.journal.EventJournalMapEvent<K, V>, ? extends T>)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.toString()"], ["com.hazelcast.map.QueryCache<K, V>", "com.hazelcast.map.impl.proxy.MapProxyImpl.getQueryCache(java.lang.String)"], ["com.hazelcast.map.QueryCache<K, V>", "com.hazelcast.map.impl.proxy.MapProxyImpl.getQueryCache(java.lang.String, com.hazelcast.query.Predicate<K, V>, boolean)"], ["com.hazelcast.map.QueryCache<K, V>", "com.hazelcast.map.impl.proxy.MapProxyImpl.getQueryCache(java.lang.String, com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate<K, V>, boolean)"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.map.impl.proxy.MapProxyImpl.getLocalMapStats()"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.addIndex(java.lang.String, boolean)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.executeOnEntriesInternal(com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate, java.util.List)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.map.impl.proxy.MapProxyImpl.executeOnKeyInternal(java.lang.Object, com.hazelcast.map.EntryProcessor, com.hazelcast.core.ExecutionCallback)"], ["java.util.Map", "com.hazelcast.map.impl.proxy.MapProxyImpl.executeOnKeysInternal(java.util.Set, java.util.Set, com.hazelcast.map.EntryProcessor)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.proxy.MapProxyImpl.executeOnKeyInternal(java.lang.Object, com.hazelcast.map.EntryProcessor)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addLocalEntryListenerInternal(java.lang.Object, com.hazelcast.query.Predicate, com.hazelcast.nio.serialization.Data, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addLocalEntryListenerInternal(java.lang.Object)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.removeMapInterceptorInternal(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxyImpl.addMapInterceptorInternal(com.hazelcast.map.MapInterceptor)"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.clearInternal()"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.flush()"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.isEmpty()"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxyImpl.containsValueInternal(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.map.impl.proxy.MapProxyImpl.size()"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.waitUntilLoaded()"], ["int", "com.hazelcast.map.impl.proxy.MapProxyImpl.getTotalBackupCount()"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.setOperationProvider(com.hazelcast.map.impl.operation.MapOperationProvider)"], ["com.hazelcast.map.impl.operation.MapOperationProvider", "com.hazelcast.map.impl.proxy.MapProxyImpl.getOperationProvider()"], ["com.hazelcast.core.PartitioningStrategy", "com.hazelcast.map.impl.proxy.MapProxyImpl.getPartitionStrategy()"], ["void", "com.hazelcast.map.impl.proxy.MapProxyImpl.initialize()"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.proxy.MapProxyImpl.submitToKey(java.lang.Object, com.hazelcast.map.EntryProcessor)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.proxy.MapProxyImpl.removeAsync(java.lang.Object)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.proxy.MapProxyImpl.setAsync(java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.proxy.MapProxyImpl.setAsync(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.proxy.MapProxyImpl.putAsync(java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.proxy.MapProxyImpl.putAsync(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.proxy.MapProxyImpl.getAsync(java.lang.Object)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxySupport.getName()"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxySupport.getServiceName()"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport.initialize()"], ["com.hazelcast.core.PartitioningStrategy", "com.hazelcast.map.impl.proxy.MapProxySupport.getPartitionStrategy()"], ["com.hazelcast.map.impl.operation.MapOperationProvider", "com.hazelcast.map.impl.proxy.MapProxySupport.getOperationProvider()"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport.setOperationProvider(com.hazelcast.map.impl.operation.MapOperationProvider)"], ["int", "com.hazelcast.map.impl.proxy.MapProxySupport.getTotalBackupCount()"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport.waitUntilLoaded()"], ["int", "com.hazelcast.map.impl.proxy.MapProxySupport.size()"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxySupport.containsValueInternal(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.proxy.MapProxySupport.isEmpty()"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport.flush()"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport.clearInternal()"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxySupport.addMapInterceptorInternal(com.hazelcast.map.MapInterceptor)"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport.removeMapInterceptorInternal(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxySupport.addLocalEntryListenerInternal(java.lang.Object)"], ["java.lang.String", "com.hazelcast.map.impl.proxy.MapProxySupport.addLocalEntryListenerInternal(java.lang.Object, com.hazelcast.query.Predicate, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.proxy.MapProxySupport.executeOnKeyInternal(java.lang.Object, com.hazelcast.map.EntryProcessor)"], ["java.util.Map<K, java.lang.Object>", "com.hazelcast.map.impl.proxy.MapProxySupport.executeOnKeysInternal(java.util.Set<K>, java.util.Set<com.hazelcast.nio.serialization.Data>, com.hazelcast.map.EntryProcessor)"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport.executeOnEntriesInternal(com.hazelcast.map.EntryProcessor, com.hazelcast.query.Predicate, java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport.addIndex(java.lang.String, boolean)"], ["com.hazelcast.monitor.LocalMapStats", "com.hazelcast.map.impl.proxy.MapProxySupport.getLocalMapStats()"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport$IncrementStatsExecutionCallback.onResponse(T)"], ["void", "com.hazelcast.map.impl.proxy.MapProxySupport$IncrementStatsExecutionCallback.onFailure(java.lang.Throwable)"], ["void", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl$1.onResponse(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl$1.onFailure(java.lang.Throwable)"], ["void", "com.hazelcast.map.impl.proxy.NearCachedMapProxyImpl$1.onResponse(java.lang.Object)"], ["com.hazelcast.map.impl.MapClientAwareService", "com.hazelcast.map.impl.MapClientAwareService(com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.MapClientAwareService.clientDisconnected(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$118.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$118.createNew(java.lang.Object)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.querycache.NodeInvokerWrapper.invokeOnPartitionOwner(java.lang.Object, int)"], ["java.util.Map<java.lang.Integer, java.lang.Object>", "com.hazelcast.map.impl.querycache.NodeInvokerWrapper.invokeOnAllPartitions(java.lang.Object)"], ["java.util.concurrent.Future", "com.hazelcast.map.impl.querycache.NodeInvokerWrapper.invokeOnTarget(java.lang.Object, com.hazelcast.nio.Address)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.NodeInvokerWrapper.invoke(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.NodeInvokerWrapper.executeOperation(com.hazelcast.spi.Operation)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.NodeInvokerWrapper.invokeOnAllPartitions(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext$2.onEvent(com.hazelcast.core.IMapEvent)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext$2.toString()"], ["void", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext$2.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.newQueryCacheEventDataBuilder(boolean)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.withDataKey(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.withDataNewValue(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.withDataOldValue(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.withSequence(long)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.withEventType(int)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.withPartitionId(int)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.withSerializationService(com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventData", "com.hazelcast.map.impl.querycache.event.QueryCacheEventDataBuilder.build()"], ["com.hazelcast.map.impl.querycache.event.BatchEventData", "com.hazelcast.map.impl.querycache.event.BatchEventData()"], ["com.hazelcast.map.impl.querycache.event.BatchEventData", "com.hazelcast.map.impl.querycache.event.BatchEventData(java.util.Collection<com.hazelcast.map.impl.querycache.event.QueryCacheEventData>, java.lang.String, int)"], ["void", "com.hazelcast.map.impl.querycache.event.BatchEventData.add(com.hazelcast.map.impl.querycache.event.QueryCacheEventData)"], ["boolean", "com.hazelcast.map.impl.querycache.event.BatchEventData.isEmpty()"], ["int", "com.hazelcast.map.impl.querycache.event.BatchEventData.size()"], ["int", "com.hazelcast.map.impl.querycache.event.BatchEventData.getPartitionId()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.BatchEventData.getSource()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.BatchEventData.getMapName()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.querycache.event.BatchEventData.getCaller()"], ["int", "com.hazelcast.map.impl.querycache.event.BatchEventData.getEventType()"], ["long", "com.hazelcast.map.impl.querycache.event.BatchEventData.getSequence()"], ["void", "com.hazelcast.map.impl.querycache.event.BatchEventData.setSequence(long)"], ["void", "com.hazelcast.map.impl.querycache.event.BatchEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.querycache.event.BatchEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.impl.querycache.event.BatchEventData.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.querycache.event.BatchEventData.hashCode()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.BatchEventData.toString()"], ["com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData(java.lang.String, int, int)"], ["int", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData.getNumberOfEntriesAffected()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData.getSource()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData.getMapName()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData.getCaller()"], ["int", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData.getEventType()"], ["void", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.LocalCacheWideEventData.toString()"], ["com.hazelcast.map.impl.querycache.event.sequence.PartitionSequencer", "com.hazelcast.map.impl.querycache.event.sequence.DefaultSubscriberSequencerProvider$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.event.sequence.DefaultSubscriberSequencerProvider$1.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.event.sequence.DefaultSubscriberSequencerProvider", "com.hazelcast.map.impl.querycache.event.sequence.DefaultSubscriberSequencerProvider()"], ["boolean", "com.hazelcast.map.impl.querycache.event.sequence.DefaultSubscriberSequencerProvider.compareAndSetSequence(long, long, int)"], ["long", "com.hazelcast.map.impl.querycache.event.sequence.DefaultSubscriberSequencerProvider.getSequence(int)"], ["void", "com.hazelcast.map.impl.querycache.event.sequence.DefaultSubscriberSequencerProvider.reset(int)"], ["com.hazelcast.map.impl.querycache.event.sequence.DefaultPartitionSequencer", "com.hazelcast.map.impl.querycache.event.sequence.DefaultPartitionSequencer()"], ["long", "com.hazelcast.map.impl.querycache.event.sequence.DefaultPartitionSequencer.nextSequence()"], ["void", "com.hazelcast.map.impl.querycache.event.sequence.DefaultPartitionSequencer.setSequence(long)"], ["boolean", "com.hazelcast.map.impl.querycache.event.sequence.DefaultPartitionSequencer.compareAndSetSequence(long, long)"], ["long", "com.hazelcast.map.impl.querycache.event.sequence.DefaultPartitionSequencer.getSequence()"], ["void", "com.hazelcast.map.impl.querycache.event.sequence.DefaultPartitionSequencer.reset()"], ["com.hazelcast.map.impl.querycache.event.BatchIMapEvent", "com.hazelcast.map.impl.querycache.event.BatchIMapEvent(com.hazelcast.map.impl.querycache.event.BatchEventData)"], ["com.hazelcast.map.impl.querycache.event.BatchEventData", "com.hazelcast.map.impl.querycache.event.BatchIMapEvent.getBatchEventData()"], ["com.hazelcast.core.Member", "com.hazelcast.map.impl.querycache.event.BatchIMapEvent.getMember()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.map.impl.querycache.event.BatchIMapEvent.getEventType()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.BatchIMapEvent.getName()"], ["com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData()"], ["com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData(com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getKey()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getDataKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getDataNewValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getDataOldValue()"], ["long", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getCreationTime()"], ["long", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getSequence()"], ["int", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getPartitionId()"], ["int", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getEventType()"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setSequence(long)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setKey(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setDataKey(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setValue(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setDataNewValue(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setDataOldValue(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setEventType(int)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setPartitionId(int)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getSource()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getMapName()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.getCaller()"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.toString()"], ["boolean", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.equals(java.lang.Object)"], ["int", "com.hazelcast.map.impl.querycache.event.DefaultQueryCacheEventData.hashCode()"], ["com.hazelcast.map.impl.querycache.event.LocalEntryEventData", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData(com.hazelcast.spi.serialization.SerializationService, java.lang.String, int, java.lang.Object, java.lang.Object, java.lang.Object, int)"], ["V", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getValue()"], ["V", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getOldValue()"], ["K", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getKeyData()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getValueData()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getOldValueData()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getSource()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getMapName()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getCaller()"], ["int", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getEventType()"], ["int", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.getPartitionId()"], ["com.hazelcast.map.impl.querycache.event.LocalEntryEventData<K, V>", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.cloneWithoutValue()"], ["void", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.LocalEntryEventData.toString()"], ["com.hazelcast.map.impl.querycache.event.SingleIMapEvent", "com.hazelcast.map.impl.querycache.event.SingleIMapEvent(com.hazelcast.map.impl.querycache.event.QueryCacheEventData)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventData", "com.hazelcast.map.impl.querycache.event.SingleIMapEvent.getEventData()"], ["com.hazelcast.core.Member", "com.hazelcast.map.impl.querycache.event.SingleIMapEvent.getMember()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.map.impl.querycache.event.SingleIMapEvent.getEventType()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.event.SingleIMapEvent.getName()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.InternalQueryCacheListenerAdapter.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.InternalQueryCacheListenerAdapter.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheConfigurator", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheConfigurator(com.hazelcast.config.Config, java.lang.ClassLoader, com.hazelcast.map.impl.querycache.QueryCacheEventService)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheConfigurator.getOrCreateConfiguration(java.lang.String, java.lang.String, java.lang.String)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheConfigurator.getOrNull(java.lang.String, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheConfigurator.removeConfiguration(java.lang.String, java.lang.String)"], ["com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore(com.hazelcast.internal.serialization.InternalSerializationService, com.hazelcast.query.impl.Indexes, com.hazelcast.config.QueryCacheConfig, com.hazelcast.internal.eviction.EvictionListener)"], ["com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.add(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.addWithoutEvictionCheck(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.get(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.remove(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.containsKey(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord>>", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.entrySet()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.clear()"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.isEmpty()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCacheRecordStore.size()"], ["com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEndToEndConstructor", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEndToEndConstructor(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEndToEndConstructor.createPublisherAccumulator(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider(com.hazelcast.util.ContextMutexFactory)"], ["com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache<K, V>", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider.getOrCreateQueryCache(java.lang.String, java.lang.String, com.hazelcast.util.ConstructorFunction<java.lang.String, com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache<K, V>>)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider.removeSingleQueryCache(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider.destroyAllQueryCaches(java.lang.String)"], ["int", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider.getQueryCacheCount(java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService$SimpleQueryCacheListenerAdapter.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService$SimpleQueryCacheListenerAdapter.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEventListenerAdapters$1.createNew(com.hazelcast.map.listener.MapListener)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEventListenerAdapters$1.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContextSupport", "com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContextSupport(com.hazelcast.internal.serialization.InternalSerializationService)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContextSupport.createRecoveryOperation(java.lang.String, java.lang.String, long, int)"], ["java.lang.Boolean", "com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContextSupport.resolveResponseForRecoveryOperation(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContextSupport.createDestroyQueryCacheOperation(java.lang.String, java.lang.String)"], ["com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache", "com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache(java.lang.String, java.lang.String, com.hazelcast.config.QueryCacheConfig, com.hazelcast.core.IMap, com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.QueryCacheContext", "com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache.getContext()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache.setPublisherListenerId(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache.getCacheId()"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache.reachedMaxCapacity()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache.clear()"], ["com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService(com.hazelcast.map.impl.MapServiceContext, com.hazelcast.util.ContextMutexFactory)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.publish(java.lang.String, java.lang.String, com.hazelcast.map.impl.event.EventData, int)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.addListener(java.lang.String, java.lang.String, com.hazelcast.map.listener.MapListener)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.addPublisherListener(java.lang.String, java.lang.String, com.hazelcast.map.impl.ListenerAdapter)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.removePublisherListener(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.addListener(java.lang.String, java.lang.String, com.hazelcast.map.listener.MapListener, com.hazelcast.spi.EventFilter)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.removeListener(java.lang.String, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.removeAllListeners(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.hasListener(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.sendEventToSubscriber(java.lang.String, java.lang.Object, int)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService.publish(java.lang.String, java.lang.String, java.lang.Object, int)"], ["com.hazelcast.map.impl.ListenerAdapter", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEventListenerAdapters.createQueryCacheListenerAdaptor(com.hazelcast.map.listener.MapListener)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.set(java.lang.Object, java.lang.Object, com.hazelcast.core.EntryEventType)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.prepopulate(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.delete(java.lang.Object, com.hazelcast.core.EntryEventType)"], ["int", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.removeEntriesOf(int)"], ["com.hazelcast.core.IMap", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.getDelegate()"], ["com.hazelcast.query.impl.Indexes", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.getIndexes()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.clear()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.setPublisherListenerId(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.getCacheId()"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.reachedMaxCapacity()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.get(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.containsValue(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.isEmpty()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.size()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.addIndex(java.lang.String, boolean)"], ["java.util.Map", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.getAll(java.util.Set)"], ["java.util.Set", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.keySet()"], ["java.util.Set", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.keySet(com.hazelcast.query.Predicate)"], ["java.util.Collection", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.values()"], ["java.util.Collection", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.values(com.hazelcast.query.Predicate)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.addEntryListener(com.hazelcast.map.listener.MapListener, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.addEntryListener(com.hazelcast.map.listener.MapListener, java.lang.Object, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.addEntryListener(com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.addEntryListener(com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate, java.lang.Object, boolean)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.removeEntryListener(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.getName()"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.tryRecover()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NullQueryCache.destroy()"], ["com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry.getOrCreate(java.lang.String)"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry.getOrNull(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry>", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry.getAll()"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry.remove(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry.getOrNull(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry.getOrCreate(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache$1.onEvict(com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord, boolean)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.AbstractInternalQueryCache$1.onEvict(java.lang.Object, com.hazelcast.internal.eviction.Evictable, boolean)"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry$1.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberListener", "com.hazelcast.map.impl.querycache.subscriber.SubscriberListener(com.hazelcast.map.impl.querycache.QueryCacheContext, com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.SubscriberListener.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.SubscriberListener.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap(com.hazelcast.spi.serialization.SerializationService, int)"], ["<C extends com.hazelcast.internal.eviction.EvictionCandidate<com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord>> boolean", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap.tryEvict(C, com.hazelcast.internal.eviction.EvictionListener<com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord>)"], ["com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache(java.lang.String, java.lang.String, com.hazelcast.config.QueryCacheConfig, com.hazelcast.core.IMap, com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.set(K, V, com.hazelcast.core.EntryEventType)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.prepopulate(K, V)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.delete(java.lang.Object, com.hazelcast.core.EntryEventType)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.tryRecover()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.destroy()"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.containsValue(java.lang.Object)"], ["V", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.get(java.lang.Object)"], ["java.util.Map<K, V>", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.getAll(java.util.Set<K>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.entrySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.entrySet(com.hazelcast.query.Predicate)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.isEmpty()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.size()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.addEntryListener(com.hazelcast.map.listener.MapListener, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.addEntryListener(com.hazelcast.map.listener.MapListener, K, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.addEntryListener(com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate<K, V>, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.addEntryListener(com.hazelcast.map.listener.MapListener, com.hazelcast.query.Predicate<K, V>, K, boolean)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.removeEntryListener(java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.addIndex(java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.getName()"], ["com.hazelcast.core.IMap", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.getDelegate()"], ["com.hazelcast.query.impl.Indexes", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.getIndexes()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.removeEntriesOf(int)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.DefaultQueryCache.toString()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEventListenerAdapters$1$1.onEvent(com.hazelcast.core.IMapEvent)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEventListenerAdapters$1$1.onEvent(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry$1.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContext", "com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContext(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberContextSupport", "com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContext.getSubscriberContextSupport()"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulatorFactory", "com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulatorFactory(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulatorFactory.createAccumulator(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory$InternalQueryCacheConstructor.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory$InternalQueryCacheConstructor.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory()"], ["com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory.create(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest, java.lang.String)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory.remove(com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache)"], ["com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory.getOrNull(java.lang.String)"], ["int", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory.getQueryCacheCount()"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.EvictionOperator$1.isEvictionRequired()"], ["com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheConfigurator", "com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheConfigurator(java.lang.ClassLoader, com.hazelcast.map.impl.querycache.QueryCacheEventService)"], ["com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheEndToEndConstructor", "com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheEndToEndConstructor(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheEndToEndConstructor.createSubscriberAccumulator(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache", "com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheEndToEndConstructor.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.AbstractQueryCacheEndToEndConstructor.createNew(java.lang.Object)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.EventPublisherHelper.hasListener(com.hazelcast.map.QueryCache)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.EventPublisherHelper.publishEventLost(com.hazelcast.map.impl.querycache.QueryCacheContext, java.lang.String, java.lang.String, int)"], ["com.hazelcast.core.IMapEvent", "com.hazelcast.map.impl.querycache.subscriber.EventPublisherHelper.createIMapEvent(com.hazelcast.map.impl.event.EventData, com.hazelcast.spi.EventFilter, com.hazelcast.core.Member, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry(com.hazelcast.map.impl.querycache.QueryCacheContext, java.lang.String)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry.getOrCreate(java.lang.String)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry.getOrNull(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.map.impl.querycache.accumulator.Accumulator>", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry.getAll()"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry.remove(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry.getOrNull(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.SubscriberRegistry.getOrCreate(java.lang.Object)"], ["int", "com.hazelcast.map.impl.querycache.subscriber.record.AbstractQueryCacheRecord.getAccessHit()"], ["long", "com.hazelcast.map.impl.querycache.subscriber.record.AbstractQueryCacheRecord.getLastAccessTime()"], ["long", "com.hazelcast.map.impl.querycache.subscriber.record.AbstractQueryCacheRecord.getCreationTime()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.record.AbstractQueryCacheRecord.incrementAccessHit()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.record.AbstractQueryCacheRecord.setAccessTime(long)"], ["com.hazelcast.map.impl.querycache.subscriber.record.ObjectQueryCacheRecord", "com.hazelcast.map.impl.querycache.subscriber.record.ObjectQueryCacheRecord(com.hazelcast.nio.serialization.Data, com.hazelcast.spi.serialization.SerializationService)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.record.ObjectQueryCacheRecord.getValue()"], ["com.hazelcast.map.impl.querycache.subscriber.record.DataQueryCacheRecord", "com.hazelcast.map.impl.querycache.subscriber.record.DataQueryCacheRecord(com.hazelcast.nio.serialization.Data, com.hazelcast.spi.serialization.SerializationService)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.record.DataQueryCacheRecord.getValue()"], ["com.hazelcast.map.impl.querycache.subscriber.record.ObjectQueryCacheRecordFactory", "com.hazelcast.map.impl.querycache.subscriber.record.ObjectQueryCacheRecordFactory(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord", "com.hazelcast.map.impl.querycache.subscriber.record.ObjectQueryCacheRecordFactory.createRecord(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.record.ObjectQueryCacheRecordFactory.isEquals(java.lang.Object, java.lang.Object)"], ["com.hazelcast.map.impl.querycache.subscriber.record.DataQueryCacheRecordFactory", "com.hazelcast.map.impl.querycache.subscriber.record.DataQueryCacheRecordFactory(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord", "com.hazelcast.map.impl.querycache.subscriber.record.DataQueryCacheRecordFactory.createRecord(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.record.DataQueryCacheRecordFactory.isEquals(java.lang.Object, java.lang.Object)"], ["com.hazelcast.map.impl.querycache.subscriber.AbstractSubscriberContext", "com.hazelcast.map.impl.querycache.subscriber.AbstractSubscriberContext(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider", "com.hazelcast.map.impl.querycache.subscriber.AbstractSubscriberContext.getEndToEndQueryCacheProvider()"], ["com.hazelcast.map.impl.querycache.subscriber.MapSubscriberRegistry", "com.hazelcast.map.impl.querycache.subscriber.AbstractSubscriberContext.getMapSubscriberRegistry()"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheFactory", "com.hazelcast.map.impl.querycache.subscriber.AbstractSubscriberContext.getQueryCacheFactory()"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfoSupplier", "com.hazelcast.map.impl.querycache.subscriber.AbstractSubscriberContext.getAccumulatorInfoSupplier()"], ["com.hazelcast.map.impl.querycache.QueryCacheEventService", "com.hazelcast.map.impl.querycache.subscriber.AbstractSubscriberContext.getEventService()"], ["com.hazelcast.map.impl.querycache.QueryCacheConfigurator", "com.hazelcast.map.impl.querycache.subscriber.AbstractSubscriberContext.geQueryCacheConfigurator()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperation()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperation.getResponse()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperation.getId()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory.createOperation()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory.getFactoryId()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory.getId()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.SetReadCursorOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.SetReadCursorOperation()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.SetReadCursorOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.SetReadCursorOperation(java.lang.String, java.lang.String, long, int)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.operation.SetReadCursorOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.operation.SetReadCursorOperation.getResponse()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.SetReadCursorOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.SetReadCursorOperation.getId()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation.getResponse()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation.getId()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation.run()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation.getResponse()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.PublisherCreateOperation.getId()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation()"], ["com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation", "com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation.run()"], ["boolean", "com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation.returnsResponse()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation.getResponse()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation.getFactoryId()"], ["int", "com.hazelcast.map.impl.querycache.subscriber.operation.ReadAndResetAccumulatorOperation.getId()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap$QueryCacheEvictableSamplingEntry.getAccessor()"], ["com.hazelcast.internal.eviction.Evictable", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap$QueryCacheEvictableSamplingEntry.getEvictable()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap$QueryCacheEvictableSamplingEntry.getKey()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap$QueryCacheEvictableSamplingEntry.getValue()"], ["long", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap$QueryCacheEvictableSamplingEntry.getCreationTime()"], ["long", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap$QueryCacheEvictableSamplingEntry.getLastAccessTime()"], ["long", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRecordHashMap$QueryCacheEvictableSamplingEntry.getAccessHit()"], ["com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheScheduler", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheScheduler(com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheScheduler.execute(java.lang.Runnable)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheScheduler.shutdown()"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache<K, V>>", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheEndToEndProvider$1.createNew(java.lang.Object)"], ["java.util.concurrent.ConcurrentMap<java.lang.Integer, java.lang.Long>", "com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulator.getBrokenSequences()"], ["void", "com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulator.accumulate(com.hazelcast.map.impl.querycache.event.QueryCacheEventData)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulator.accumulate(com.hazelcast.map.impl.querycache.event.sequence.Sequenced)"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulatorHandler", "com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulatorHandler(boolean, com.hazelcast.map.impl.querycache.subscriber.InternalQueryCache, com.hazelcast.internal.serialization.InternalSerializationService)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulatorHandler.handle(com.hazelcast.map.impl.querycache.event.QueryCacheEventData, boolean)"], ["void", "com.hazelcast.map.impl.querycache.subscriber.SubscriberAccumulatorHandler.handle(java.lang.Object, boolean)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.newQueryCacheRequest()"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.forMap(com.hazelcast.core.IMap)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.withCacheName(java.lang.String)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.withPredicate(com.hazelcast.query.Predicate)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.withListener(com.hazelcast.map.listener.MapListener)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.withIncludeValue(java.lang.Boolean)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.withContext(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.withQueryCacheConfig(com.hazelcast.config.QueryCacheConfig)"], ["com.hazelcast.core.IMap", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.getMap()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.getMapName()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.getCacheName()"], ["com.hazelcast.query.Predicate", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.getPredicate()"], ["com.hazelcast.map.listener.MapListener", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.getListener()"], ["java.lang.Boolean", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.isIncludeValue()"], ["com.hazelcast.map.impl.querycache.QueryCacheContext", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.getContext()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest.getQueryCacheConfig()"], ["void", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext$1.stateChanged(com.hazelcast.core.LifecycleEvent)"], ["void", "com.hazelcast.map.impl.querycache.publisher.NonStopPublisherAccumulator.accumulate(com.hazelcast.map.impl.querycache.event.sequence.Sequenced)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry$PublisherAccumulatorConstructor.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry$PublisherAccumulatorConstructor.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.publisher.PublisherAccumulatorHandler", "com.hazelcast.map.impl.querycache.publisher.PublisherAccumulatorHandler(com.hazelcast.map.impl.querycache.QueryCacheContext, com.hazelcast.map.impl.querycache.accumulator.AccumulatorProcessor<com.hazelcast.map.impl.querycache.event.sequence.Sequenced>)"], ["void", "com.hazelcast.map.impl.querycache.publisher.PublisherAccumulatorHandler.handle(com.hazelcast.map.impl.querycache.event.sequence.Sequenced, boolean)"], ["void", "com.hazelcast.map.impl.querycache.publisher.PublisherAccumulatorHandler.handle(java.lang.Object, boolean)"], ["com.hazelcast.map.impl.querycache.publisher.PublisherAccumulatorFactory", "com.hazelcast.map.impl.querycache.publisher.PublisherAccumulatorFactory(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.publisher.PublisherAccumulatorFactory.createAccumulator(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry$1.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.publisher.PublisherRegistry", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry(com.hazelcast.map.impl.querycache.QueryCacheContext, java.lang.String)"], ["com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry.getOrCreate(java.lang.String)"], ["com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry.getOrNull(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry>", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry.getAll()"], ["com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry.remove(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry.getOrNull(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry.getOrCreate(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext$1.run()"], ["com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.publisher.PublisherRegistry", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry.getOrCreate(java.lang.String)"], ["com.hazelcast.map.impl.querycache.publisher.PublisherRegistry", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry.getOrNull(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.map.impl.querycache.publisher.PublisherRegistry>", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry.getAll()"], ["com.hazelcast.map.impl.querycache.publisher.PublisherRegistry", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry.remove(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry.getOrNull(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry.getOrCreate(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry(com.hazelcast.map.impl.querycache.QueryCacheContext, java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry.getOrCreate(java.lang.String)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry.getOrNull(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry.getAll()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry.remove(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry.getOrNull(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry.getOrCreate(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.PublisherRegistry$1.createNew(java.lang.Object)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.publisher.AccumulatorSweeper.flushAllAccumulators(com.hazelcast.map.impl.querycache.publisher.PublisherContext)"], ["void", "com.hazelcast.map.impl.querycache.publisher.AccumulatorSweeper.flushAccumulator(com.hazelcast.map.impl.querycache.publisher.PublisherContext, int)"], ["void", "com.hazelcast.map.impl.querycache.publisher.AccumulatorSweeper.removeAccumulator(com.hazelcast.map.impl.querycache.publisher.PublisherContext, int)"], ["void", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext$2.memberRemoved(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext$2.memberAdded(com.hazelcast.core.MembershipEvent)"], ["com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo, com.hazelcast.util.ConstructorFunction<java.lang.Integer, com.hazelcast.map.impl.querycache.accumulator.Accumulator>)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.getOrCreate(java.lang.Integer)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.getOrNull(java.lang.Integer)"], ["java.util.Map<java.lang.Integer, com.hazelcast.map.impl.querycache.accumulator.Accumulator>", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.getAll()"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.remove(java.lang.Integer)"], ["com.hazelcast.spi.EventFilter", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.getEventFilter()"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.getInfo()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.getUuid()"], ["void", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.setUuid(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.getOrNull(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry.getOrCreate(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.publisher.CoalescingPublisherAccumulator.accumulate(com.hazelcast.map.impl.querycache.event.QueryCacheEventData)"], ["void", "com.hazelcast.map.impl.querycache.publisher.CoalescingPublisherAccumulator.accumulate(com.hazelcast.map.impl.querycache.event.sequence.Sequenced)"], ["com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext(com.hazelcast.map.impl.querycache.QueryCacheContext, com.hazelcast.spi.NodeEngine, com.hazelcast.core.IFunction<java.lang.String, java.lang.String>)"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfoSupplier", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.getAccumulatorInfoSupplier()"], ["com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.getMapPublisherRegistry()"], ["com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.getMapListenerRegistry()"], ["com.hazelcast.map.impl.querycache.QueryCacheContext", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.getContext()"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.getNodeEngine()"], ["com.hazelcast.core.IFunction<java.lang.String, java.lang.String>", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.getListenerRegistrator()"], ["void", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.handleDisconnectedSubscriber(java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.handleConnectedSubscriber(java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext.flush()"], ["com.hazelcast.map.impl.querycache.publisher.PublisherRegistry", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry$1.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.publisher.EventPublisherAccumulatorProcessor", "com.hazelcast.map.impl.querycache.publisher.EventPublisherAccumulatorProcessor(com.hazelcast.map.impl.querycache.QueryCacheEventService)"], ["com.hazelcast.map.impl.querycache.publisher.EventPublisherAccumulatorProcessor", "com.hazelcast.map.impl.querycache.publisher.EventPublisherAccumulatorProcessor(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo, com.hazelcast.map.impl.querycache.QueryCacheEventService)"], ["void", "com.hazelcast.map.impl.querycache.publisher.EventPublisherAccumulatorProcessor.process(com.hazelcast.map.impl.querycache.event.sequence.Sequenced)"], ["void", "com.hazelcast.map.impl.querycache.publisher.EventPublisherAccumulatorProcessor.setInfo(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["void", "com.hazelcast.map.impl.querycache.publisher.EventPublisherAccumulatorProcessor.process(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.publisher.CoalescingPublisherAccumulator$CoalescedEventAccumulatorProcessor.process(com.hazelcast.map.impl.querycache.event.sequence.Sequenced)"], ["void", "com.hazelcast.map.impl.querycache.publisher.CoalescingPublisherAccumulator$CoalescedEventAccumulatorProcessor.process(java.lang.Object)"], ["void", "com.hazelcast.map.impl.querycache.publisher.BatchPublisherAccumulator.accumulate(com.hazelcast.map.impl.querycache.event.sequence.Sequenced)"], ["com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry.getOrCreate(java.lang.String)"], ["com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry.getOrNull(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry>", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry.getAll()"], ["com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry.remove(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry.getOrNull(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry.getOrCreate(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.NodeQueryCacheContext", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext(com.hazelcast.map.impl.MapServiceContext)"], ["void", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.destroy()"], ["com.hazelcast.map.impl.querycache.publisher.PublisherContext", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getPublisherContext()"], ["com.hazelcast.map.impl.querycache.subscriber.SubscriberContext", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getSubscriberContext()"], ["void", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.setSubscriberContext(com.hazelcast.map.impl.querycache.subscriber.SubscriberContext)"], ["com.hazelcast.map.impl.querycache.QueryCacheEventService", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getQueryCacheEventService()"], ["com.hazelcast.map.impl.querycache.QueryCacheConfigurator", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getQueryCacheConfigurator()"], ["com.hazelcast.map.impl.querycache.QueryCacheScheduler", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getQueryCacheScheduler()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getSerializationService()"], ["com.hazelcast.nio.Address", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getThisNodesAddress()"], ["int", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getPartitionId(java.lang.Object)"], ["int", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getPartitionCount()"], ["com.hazelcast.map.impl.querycache.InvokerWrapper", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getInvokerWrapper()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.toObject(java.lang.Object)"], ["com.hazelcast.util.ContextMutexFactory", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext.getLifecycleMutexFactory()"], ["boolean", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator$ReadOnlyIterator.hasNext()"], ["T", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator$ReadOnlyIterator.next()"], ["void", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator$ReadOnlyIterator.remove()"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator$ReadOnlyIterator.next()"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorScannerTask", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorScannerTask(com.hazelcast.map.impl.querycache.QueryCacheContext)"], ["void", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorScannerTask.run()"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo()"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.createAccumulatorInfo(com.hazelcast.config.QueryCacheConfig, java.lang.String, java.lang.String, com.hazelcast.query.Predicate)"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.createAccumulatorInfo(java.lang.String, java.lang.String, com.hazelcast.query.Predicate, int, int, long, boolean, boolean, boolean)"], ["int", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.getBatchSize()"], ["int", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.getBufferSize()"], ["long", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.getDelaySeconds()"], ["boolean", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.isIncludeValue()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.getMapName()"], ["java.lang.String", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.getCacheId()"], ["com.hazelcast.query.Predicate", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.getPredicate()"], ["boolean", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.isPublishable()"], ["boolean", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.isPopulate()"], ["void", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.setPublishable(boolean)"], ["boolean", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.isCoalesce()"], ["int", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.getFactoryId()"], ["int", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.getClassId()"], ["void", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo.toString()"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo>", "com.hazelcast.map.impl.querycache.accumulator.DefaultAccumulatorInfoSupplier$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.accumulator.DefaultAccumulatorInfoSupplier$1.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer", "com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer(int)"], ["void", "com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer.add(E)"], ["E", "com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer.get(long)"], ["boolean", "com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer.setHead(long)"], ["E", "com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer.getAndAdvance()"], ["void", "com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer.reset()"], ["int", "com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer.size()"], ["long", "com.hazelcast.map.impl.querycache.accumulator.DefaultCyclicBuffer.getHeadSequence()"], ["com.hazelcast.map.impl.querycache.accumulator.DefaultAccumulatorInfoSupplier", "com.hazelcast.map.impl.querycache.accumulator.DefaultAccumulatorInfoSupplier()"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo", "com.hazelcast.map.impl.querycache.accumulator.DefaultAccumulatorInfoSupplier.getAccumulatorInfoOrNull(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.accumulator.DefaultAccumulatorInfoSupplier.putIfAbsent(java.lang.String, java.lang.String, com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["void", "com.hazelcast.map.impl.querycache.accumulator.DefaultAccumulatorInfoSupplier.remove(java.lang.String, java.lang.String)"], ["int", "com.hazelcast.map.impl.querycache.accumulator.DefaultAccumulatorInfoSupplier.accumulatorInfoCountOfMap(java.lang.String)"], ["void", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.accumulate(E)"], ["int", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.poll(com.hazelcast.map.impl.querycache.accumulator.AccumulatorHandler<E>, int)"], ["int", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.poll(com.hazelcast.map.impl.querycache.accumulator.AccumulatorHandler<E>, long, java.util.concurrent.TimeUnit)"], ["int", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.size()"], ["boolean", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.isEmpty()"], ["com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.getInfo()"], ["boolean", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.setHead(long)"], ["void", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.reset()"], ["com.hazelcast.map.impl.querycache.accumulator.CyclicBuffer", "com.hazelcast.map.impl.querycache.accumulator.BasicAccumulator.getBuffer()"], ["com.hazelcast.map.impl.querycache.accumulator.AbstractAccumulator", "com.hazelcast.map.impl.querycache.accumulator.AbstractAccumulator(com.hazelcast.map.impl.querycache.QueryCacheContext, com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext$RegisterMapListenerFunction.apply(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.impl.querycache.NodeQueryCacheContext$RegisterMapListenerFunction.apply(java.lang.Object)"], ["java.lang.String", "com.hazelcast.map.impl.querycache.ListenerRegistrationHelper.generateListenerName(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.Integer, com.hazelcast.map.impl.querycache.accumulator.Accumulator>", "com.hazelcast.map.impl.querycache.utils.QueryCacheUtil.getAccumulators(com.hazelcast.map.impl.querycache.QueryCacheContext, java.lang.String, java.lang.String)"], ["com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry", "com.hazelcast.map.impl.querycache.utils.QueryCacheUtil.getAccumulatorRegistryOrNull(com.hazelcast.map.impl.querycache.QueryCacheContext, java.lang.String, java.lang.String)"], ["com.hazelcast.map.impl.querycache.accumulator.Accumulator", "com.hazelcast.map.impl.querycache.utils.QueryCacheUtil.getAccumulatorOrNull(com.hazelcast.map.impl.querycache.QueryCacheContext, java.lang.String, java.lang.String, int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$85.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$85.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$133.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$133.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$63.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$63.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.map.impl.MapDataSerializerHook$124.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.map.impl.MapDataSerializerHook$124.createNew(java.lang.Object)"], ["com.hazelcast.map.impl.MapValueCollection", "com.hazelcast.map.impl.MapValueCollection(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.map.impl.MapValueCollection", "com.hazelcast.map.impl.MapValueCollection()"], ["void", "com.hazelcast.map.impl.MapValueCollection.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.impl.MapValueCollection.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.impl.MapValueCollection.getFactoryId()"], ["int", "com.hazelcast.map.impl.MapValueCollection.getId()"], ["com.hazelcast.map.ReachedMaxSizeException", "com.hazelcast.map.ReachedMaxSizeException(java.lang.String)"], ["com.hazelcast.map.QueryResultSizeExceededException", "com.hazelcast.map.QueryResultSizeExceededException(java.lang.String)"], ["com.hazelcast.map.QueryResultSizeExceededException", "com.hazelcast.map.QueryResultSizeExceededException()"], ["com.hazelcast.map.QueryResultSizeExceededException", "com.hazelcast.map.QueryResultSizeExceededException(int, java.lang.String)"], ["com.hazelcast.map.eviction.MapEvictionPolicy", "com.hazelcast.map.eviction.MapEvictionPolicy()"], ["int", "com.hazelcast.map.eviction.MapEvictionPolicy.compare(java.lang.Object, java.lang.Object)"], ["com.hazelcast.map.eviction.RandomEvictionPolicy", "com.hazelcast.map.eviction.RandomEvictionPolicy()"], ["int", "com.hazelcast.map.eviction.RandomEvictionPolicy.compare(com.hazelcast.core.EntryView, com.hazelcast.core.EntryView)"], ["int", "com.hazelcast.map.eviction.RandomEvictionPolicy.getFactoryId()"], ["int", "com.hazelcast.map.eviction.RandomEvictionPolicy.getId()"], ["void", "com.hazelcast.map.eviction.RandomEvictionPolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.eviction.RandomEvictionPolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.eviction.RandomEvictionPolicy.equals(java.lang.Object)"], ["int", "com.hazelcast.map.eviction.RandomEvictionPolicy.hashCode()"], ["com.hazelcast.map.eviction.LFUEvictionPolicy", "com.hazelcast.map.eviction.LFUEvictionPolicy()"], ["int", "com.hazelcast.map.eviction.LFUEvictionPolicy.compare(com.hazelcast.core.EntryView, com.hazelcast.core.EntryView)"], ["int", "com.hazelcast.map.eviction.LFUEvictionPolicy.getFactoryId()"], ["int", "com.hazelcast.map.eviction.LFUEvictionPolicy.getId()"], ["void", "com.hazelcast.map.eviction.LFUEvictionPolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.eviction.LFUEvictionPolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.eviction.LFUEvictionPolicy.equals(java.lang.Object)"], ["int", "com.hazelcast.map.eviction.LFUEvictionPolicy.hashCode()"], ["com.hazelcast.map.eviction.LRUEvictionPolicy", "com.hazelcast.map.eviction.LRUEvictionPolicy()"], ["int", "com.hazelcast.map.eviction.LRUEvictionPolicy.compare(com.hazelcast.core.EntryView, com.hazelcast.core.EntryView)"], ["int", "com.hazelcast.map.eviction.LRUEvictionPolicy.getFactoryId()"], ["int", "com.hazelcast.map.eviction.LRUEvictionPolicy.getId()"], ["void", "com.hazelcast.map.eviction.LRUEvictionPolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.eviction.LRUEvictionPolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.map.eviction.LRUEvictionPolicy.equals(java.lang.Object)"], ["int", "com.hazelcast.map.eviction.LRUEvictionPolicy.hashCode()"], ["void", "com.hazelcast.map.AbstractEntryProcessor$EntryBackupProcessorImpl.processBackup(java.util.Map$Entry<K, V>)"], ["void", "com.hazelcast.map.AbstractEntryProcessor$EntryBackupProcessorImpl.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["com.hazelcast.map.merge.MergePolicyProvider", "com.hazelcast.map.merge.MergePolicyProvider(com.hazelcast.spi.NodeEngine)"], ["java.lang.Object", "com.hazelcast.map.merge.MergePolicyProvider.getMergePolicy(java.lang.String)"], ["com.hazelcast.map.merge.LatestUpdateMapMergePolicy", "com.hazelcast.map.merge.LatestUpdateMapMergePolicy()"], ["java.lang.Object", "com.hazelcast.map.merge.LatestUpdateMapMergePolicy.merge(java.lang.String, com.hazelcast.core.EntryView, com.hazelcast.core.EntryView)"], ["void", "com.hazelcast.map.merge.LatestUpdateMapMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.merge.LatestUpdateMapMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.merge.LatestUpdateMapMergePolicy.getFactoryId()"], ["int", "com.hazelcast.map.merge.LatestUpdateMapMergePolicy.getId()"], ["com.hazelcast.map.merge.IgnoreMergingEntryMapMergePolicy", "com.hazelcast.map.merge.IgnoreMergingEntryMapMergePolicy()"], ["java.lang.Object", "com.hazelcast.map.merge.IgnoreMergingEntryMapMergePolicy.merge(java.lang.String, com.hazelcast.core.EntryView, com.hazelcast.core.EntryView)"], ["void", "com.hazelcast.map.merge.IgnoreMergingEntryMapMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.merge.IgnoreMergingEntryMapMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.merge.IgnoreMergingEntryMapMergePolicy.getFactoryId()"], ["int", "com.hazelcast.map.merge.IgnoreMergingEntryMapMergePolicy.getId()"], ["com.hazelcast.map.merge.HigherHitsMapMergePolicy", "com.hazelcast.map.merge.HigherHitsMapMergePolicy()"], ["java.lang.Object", "com.hazelcast.map.merge.HigherHitsMapMergePolicy.merge(java.lang.String, com.hazelcast.core.EntryView, com.hazelcast.core.EntryView)"], ["void", "com.hazelcast.map.merge.HigherHitsMapMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.merge.HigherHitsMapMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.merge.HigherHitsMapMergePolicy.getFactoryId()"], ["int", "com.hazelcast.map.merge.HigherHitsMapMergePolicy.getId()"], ["com.hazelcast.map.merge.MapMergePolicy", "com.hazelcast.map.merge.MergePolicyProvider$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.map.merge.MergePolicyProvider$1.createNew(java.lang.Object)"], ["com.hazelcast.map.merge.PutIfAbsentMapMergePolicy", "com.hazelcast.map.merge.PutIfAbsentMapMergePolicy()"], ["java.lang.Object", "com.hazelcast.map.merge.PutIfAbsentMapMergePolicy.merge(java.lang.String, com.hazelcast.core.EntryView, com.hazelcast.core.EntryView)"], ["void", "com.hazelcast.map.merge.PutIfAbsentMapMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.merge.PutIfAbsentMapMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.merge.PutIfAbsentMapMergePolicy.getFactoryId()"], ["int", "com.hazelcast.map.merge.PutIfAbsentMapMergePolicy.getId()"], ["com.hazelcast.map.merge.PassThroughMergePolicy", "com.hazelcast.map.merge.PassThroughMergePolicy()"], ["java.lang.Object", "com.hazelcast.map.merge.PassThroughMergePolicy.merge(java.lang.String, com.hazelcast.core.EntryView, com.hazelcast.core.EntryView)"], ["void", "com.hazelcast.map.merge.PassThroughMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.map.merge.PassThroughMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.map.merge.PassThroughMergePolicy.getFactoryId()"], ["int", "com.hazelcast.map.merge.PassThroughMergePolicy.getId()"], ["com.hazelcast.map.EventLostEvent", "com.hazelcast.map.EventLostEvent(java.lang.String, com.hazelcast.core.Member, int)"], ["int", "com.hazelcast.map.EventLostEvent.getPartitionId()"], ["com.hazelcast.core.Member", "com.hazelcast.map.EventLostEvent.getMember()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.map.EventLostEvent.getEventType()"], ["java.lang.String", "com.hazelcast.map.EventLostEvent.getName()"], ["com.hazelcast.map.AbstractEntryProcessor", "com.hazelcast.map.AbstractEntryProcessor()"], ["com.hazelcast.map.AbstractEntryProcessor", "com.hazelcast.map.AbstractEntryProcessor(boolean)"], ["com.hazelcast.map.EntryBackupProcessor<K, V>", "com.hazelcast.map.AbstractEntryProcessor.getBackupProcessor()"], ["com.hazelcast.aggregation.impl.DoubleAverageAggregator", "com.hazelcast.aggregation.impl.DoubleAverageAggregator()"], ["com.hazelcast.aggregation.impl.DoubleAverageAggregator", "com.hazelcast.aggregation.impl.DoubleAverageAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.accumulateExtracted(I, java.lang.Double)"], ["void", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Double", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.DoubleAverageAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.IntegerAverageAggregator", "com.hazelcast.aggregation.impl.IntegerAverageAggregator()"], ["com.hazelcast.aggregation.impl.IntegerAverageAggregator", "com.hazelcast.aggregation.impl.IntegerAverageAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.accumulateExtracted(I, java.lang.Integer)"], ["void", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Double", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.IntegerAverageAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.MinAggregator", "com.hazelcast.aggregation.impl.MinAggregator()"], ["com.hazelcast.aggregation.impl.MinAggregator", "com.hazelcast.aggregation.impl.MinAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.MinAggregator.accumulateExtracted(I, R)"], ["void", "com.hazelcast.aggregation.impl.MinAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["R", "com.hazelcast.aggregation.impl.MinAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.MinAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.MinAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.MinAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.MinAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.MinAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.MinAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.AggregatorDataSerializerHook", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook()"], ["int", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.LongSumAggregator", "com.hazelcast.aggregation.impl.LongSumAggregator()"], ["com.hazelcast.aggregation.impl.LongSumAggregator", "com.hazelcast.aggregation.impl.LongSumAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.LongSumAggregator.accumulateExtracted(I, java.lang.Long)"], ["void", "com.hazelcast.aggregation.impl.LongSumAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Long", "com.hazelcast.aggregation.impl.LongSumAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.LongSumAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.LongSumAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.LongSumAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.LongSumAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.LongSumAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.LongSumAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.DistinctValuesAggregator", "com.hazelcast.aggregation.impl.DistinctValuesAggregator()"], ["com.hazelcast.aggregation.impl.DistinctValuesAggregator", "com.hazelcast.aggregation.impl.DistinctValuesAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.DistinctValuesAggregator.accumulateExtracted(I, R)"], ["void", "com.hazelcast.aggregation.impl.DistinctValuesAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["int", "com.hazelcast.aggregation.impl.DistinctValuesAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.DistinctValuesAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.DistinctValuesAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.DistinctValuesAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.DistinctValuesAggregator.aggregate()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.MaxAggregator", "com.hazelcast.aggregation.impl.MaxAggregator()"], ["com.hazelcast.aggregation.impl.MaxAggregator", "com.hazelcast.aggregation.impl.MaxAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.MaxAggregator.accumulateExtracted(I, R)"], ["void", "com.hazelcast.aggregation.impl.MaxAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["R", "com.hazelcast.aggregation.impl.MaxAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.MaxAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.MaxAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.MaxAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.MaxAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.MaxAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.MaxAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.FixedSumAggregator", "com.hazelcast.aggregation.impl.FixedSumAggregator()"], ["com.hazelcast.aggregation.impl.FixedSumAggregator", "com.hazelcast.aggregation.impl.FixedSumAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.FixedSumAggregator.accumulateExtracted(I, java.lang.Number)"], ["void", "com.hazelcast.aggregation.impl.FixedSumAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Long", "com.hazelcast.aggregation.impl.FixedSumAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.FixedSumAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.FixedSumAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.FixedSumAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.FixedSumAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.FixedSumAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.FixedSumAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.CountAggregator", "com.hazelcast.aggregation.impl.CountAggregator()"], ["com.hazelcast.aggregation.impl.CountAggregator", "com.hazelcast.aggregation.impl.CountAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.CountAggregator.accumulateExtracted(I, java.lang.Object)"], ["void", "com.hazelcast.aggregation.impl.CountAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Long", "com.hazelcast.aggregation.impl.CountAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.CountAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.CountAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.CountAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.CountAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.CountAggregator.aggregate()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.BigIntegerAverageAggregator", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator()"], ["com.hazelcast.aggregation.impl.BigIntegerAverageAggregator", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.accumulateExtracted(I, java.math.BigInteger)"], ["void", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.math.BigDecimal", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.BigIntegerAverageAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.BigDecimalSumAggregator", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator()"], ["com.hazelcast.aggregation.impl.BigDecimalSumAggregator", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.accumulateExtracted(I, java.math.BigDecimal)"], ["void", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.math.BigDecimal", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.BigDecimalSumAggregator.aggregate()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.DoubleSumAggregator", "com.hazelcast.aggregation.impl.DoubleSumAggregator()"], ["com.hazelcast.aggregation.impl.DoubleSumAggregator", "com.hazelcast.aggregation.impl.DoubleSumAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.DoubleSumAggregator.accumulateExtracted(I, java.lang.Double)"], ["void", "com.hazelcast.aggregation.impl.DoubleSumAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Double", "com.hazelcast.aggregation.impl.DoubleSumAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.DoubleSumAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.DoubleSumAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.DoubleSumAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.DoubleSumAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.DoubleSumAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.DoubleSumAggregator.aggregate()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.BigDecimalAverageAggregator", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator()"], ["com.hazelcast.aggregation.impl.BigDecimalAverageAggregator", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.math.BigDecimal", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.BigDecimalAverageAggregator.aggregate()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.AbstractAggregator", "com.hazelcast.aggregation.impl.AbstractAggregator()"], ["com.hazelcast.aggregation.impl.AbstractAggregator", "com.hazelcast.aggregation.impl.AbstractAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.AbstractAggregator.accumulate(I)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.IntegerSumAggregator", "com.hazelcast.aggregation.impl.IntegerSumAggregator()"], ["com.hazelcast.aggregation.impl.IntegerSumAggregator", "com.hazelcast.aggregation.impl.IntegerSumAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.IntegerSumAggregator.accumulateExtracted(I, java.lang.Integer)"], ["void", "com.hazelcast.aggregation.impl.IntegerSumAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Long", "com.hazelcast.aggregation.impl.IntegerSumAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.IntegerSumAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.IntegerSumAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.IntegerSumAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.IntegerSumAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.IntegerSumAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.IntegerSumAggregator.aggregate()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.MaxByAggregator", "com.hazelcast.aggregation.impl.MaxByAggregator()"], ["com.hazelcast.aggregation.impl.MaxByAggregator", "com.hazelcast.aggregation.impl.MaxByAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.MaxByAggregator.accumulateExtracted(I, java.lang.Comparable)"], ["void", "com.hazelcast.aggregation.impl.MaxByAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["I", "com.hazelcast.aggregation.impl.MaxByAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.MaxByAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.MaxByAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.MaxByAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.MaxByAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.MaxByAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.BigIntegerSumAggregator", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator()"], ["com.hazelcast.aggregation.impl.BigIntegerSumAggregator", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.accumulateExtracted(I, java.math.BigInteger)"], ["void", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.math.BigInteger", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.BigIntegerSumAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.MinByAggregator", "com.hazelcast.aggregation.impl.MinByAggregator()"], ["com.hazelcast.aggregation.impl.MinByAggregator", "com.hazelcast.aggregation.impl.MinByAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.MinByAggregator.accumulateExtracted(I, java.lang.Comparable)"], ["void", "com.hazelcast.aggregation.impl.MinByAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["I", "com.hazelcast.aggregation.impl.MinByAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.MinByAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.MinByAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.MinByAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.MinByAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.MinByAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.FloatingPointSumAggregator", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator()"], ["com.hazelcast.aggregation.impl.FloatingPointSumAggregator", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.accumulateExtracted(I, java.lang.Number)"], ["void", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Double", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.FloatingPointSumAggregator.aggregate()"], ["com.hazelcast.aggregation.impl.NumberAverageAggregator", "com.hazelcast.aggregation.impl.NumberAverageAggregator()"], ["com.hazelcast.aggregation.impl.NumberAverageAggregator", "com.hazelcast.aggregation.impl.NumberAverageAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.NumberAverageAggregator.accumulateExtracted(I, java.lang.Number)"], ["void", "com.hazelcast.aggregation.impl.NumberAverageAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Double", "com.hazelcast.aggregation.impl.NumberAverageAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.NumberAverageAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.NumberAverageAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.NumberAverageAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.NumberAverageAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.NumberAverageAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.NumberAverageAggregator.aggregate()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.aggregation.impl.LongAverageAggregator", "com.hazelcast.aggregation.impl.LongAverageAggregator()"], ["com.hazelcast.aggregation.impl.LongAverageAggregator", "com.hazelcast.aggregation.impl.LongAverageAggregator(java.lang.String)"], ["void", "com.hazelcast.aggregation.impl.LongAverageAggregator.accumulateExtracted(I, java.lang.Long)"], ["void", "com.hazelcast.aggregation.impl.LongAverageAggregator.combine(com.hazelcast.aggregation.Aggregator)"], ["java.lang.Double", "com.hazelcast.aggregation.impl.LongAverageAggregator.aggregate()"], ["int", "com.hazelcast.aggregation.impl.LongAverageAggregator.getFactoryId()"], ["int", "com.hazelcast.aggregation.impl.LongAverageAggregator.getId()"], ["void", "com.hazelcast.aggregation.impl.LongAverageAggregator.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.aggregation.impl.LongAverageAggregator.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.aggregation.impl.LongAverageAggregator.accumulateExtracted(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.LongAverageAggregator.aggregate()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook$3.createNew(java.lang.Object)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.count()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.count(java.lang.String)"], ["<I, R> com.hazelcast.aggregation.Aggregator<I, java.util.Set<R>>", "com.hazelcast.aggregation.Aggregators.distinct()"], ["<I, R> com.hazelcast.aggregation.Aggregator<I, java.util.Set<R>>", "com.hazelcast.aggregation.Aggregators.distinct(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigDecimalAvg()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigDecimalAvg(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigIntegerAvg()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigIntegerAvg(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.doubleAvg()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.doubleAvg(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.integerAvg()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.integerAvg(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.longAvg()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.longAvg(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.numberAvg()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.numberAvg(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigDecimalMax()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigDecimalMax(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigInteger>", "com.hazelcast.aggregation.Aggregators.bigIntegerMax()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigInteger>", "com.hazelcast.aggregation.Aggregators.bigIntegerMax(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.doubleMax()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.doubleMax(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Integer>", "com.hazelcast.aggregation.Aggregators.integerMax()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Integer>", "com.hazelcast.aggregation.Aggregators.integerMax(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.longMax()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.longMax(java.lang.String)"], ["<I, R extends java.lang.Comparable> com.hazelcast.aggregation.Aggregator<I, R>", "com.hazelcast.aggregation.Aggregators.comparableMax()"], ["<I, R extends java.lang.Comparable> com.hazelcast.aggregation.Aggregator<I, R>", "com.hazelcast.aggregation.Aggregators.comparableMax(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, I>", "com.hazelcast.aggregation.Aggregators.maxBy(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigDecimalMin()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigDecimalMin(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigInteger>", "com.hazelcast.aggregation.Aggregators.bigIntegerMin()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigInteger>", "com.hazelcast.aggregation.Aggregators.bigIntegerMin(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.doubleMin()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.doubleMin(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Integer>", "com.hazelcast.aggregation.Aggregators.integerMin()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Integer>", "com.hazelcast.aggregation.Aggregators.integerMin(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.longMin()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.longMin(java.lang.String)"], ["<I, R extends java.lang.Comparable> com.hazelcast.aggregation.Aggregator<I, R>", "com.hazelcast.aggregation.Aggregators.comparableMin()"], ["<I, R extends java.lang.Comparable> com.hazelcast.aggregation.Aggregator<I, R>", "com.hazelcast.aggregation.Aggregators.comparableMin(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, I>", "com.hazelcast.aggregation.Aggregators.minBy(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigDecimalSum()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigDecimal>", "com.hazelcast.aggregation.Aggregators.bigDecimalSum(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigInteger>", "com.hazelcast.aggregation.Aggregators.bigIntegerSum()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.math.BigInteger>", "com.hazelcast.aggregation.Aggregators.bigIntegerSum(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.doubleSum()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.doubleSum(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.integerSum()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.integerSum(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.longSum()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.longSum(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.fixedPointSum()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Long>", "com.hazelcast.aggregation.Aggregators.fixedPointSum(java.lang.String)"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.floatingPointSum()"], ["<I> com.hazelcast.aggregation.Aggregator<I, java.lang.Double>", "com.hazelcast.aggregation.Aggregators.floatingPointSum(java.lang.String)"], ["com.hazelcast.aggregation.Aggregator", "com.hazelcast.aggregation.Aggregator()"], ["void", "com.hazelcast.aggregation.Aggregator.onAccumulationFinished()"], ["void", "com.hazelcast.aggregation.Aggregator.onCombinationFinished()"], ["com.hazelcast.cardinality.impl.CardinalityEstimatorContainer", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer()"], ["com.hazelcast.cardinality.impl.CardinalityEstimatorContainer", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer(int, int)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.add(long)"], ["long", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.estimate()"], ["int", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.getBackupCount()"], ["int", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.getAsyncBackupCount()"], ["int", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.getTotalBackupCount()"], ["com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.merge(com.hazelcast.spi.merge.SplitBrainMergeTypes$CardinalityEstimatorMergeTypes, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog, com.hazelcast.spi.merge.SplitBrainMergeTypes$CardinalityEstimatorMergeTypes>, com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.setValue(com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.getFactoryId()"], ["int", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.getId()"], ["boolean", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.equals(java.lang.Object)"], ["int", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainer.hashCode()"], ["java.lang.String", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainerCollector.getContainerName(com.hazelcast.cardinality.impl.CardinalityEstimatorContainer)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorContainerCollector.onDestroy()"], ["com.hazelcast.cardinality.impl.operations.MergeBackupOperation", "com.hazelcast.cardinality.impl.operations.MergeBackupOperation()"], ["com.hazelcast.cardinality.impl.operations.MergeBackupOperation", "com.hazelcast.cardinality.impl.operations.MergeBackupOperation(java.lang.String, com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog)"], ["int", "com.hazelcast.cardinality.impl.operations.MergeBackupOperation.getId()"], ["void", "com.hazelcast.cardinality.impl.operations.MergeBackupOperation.run()"], ["com.hazelcast.cardinality.impl.operations.MergeOperation", "com.hazelcast.cardinality.impl.operations.MergeOperation()"], ["com.hazelcast.cardinality.impl.operations.MergeOperation", "com.hazelcast.cardinality.impl.operations.MergeOperation(java.lang.String, com.hazelcast.spi.merge.SplitBrainMergePolicy<com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog, com.hazelcast.spi.merge.SplitBrainMergeTypes$CardinalityEstimatorMergeTypes>, com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog)"], ["void", "com.hazelcast.cardinality.impl.operations.MergeOperation.run()"], ["int", "com.hazelcast.cardinality.impl.operations.MergeOperation.getId()"], ["boolean", "com.hazelcast.cardinality.impl.operations.MergeOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cardinality.impl.operations.MergeOperation.getBackupOperation()"], ["java.lang.String", "com.hazelcast.cardinality.impl.operations.AbstractCardinalityEstimatorOperation.getServiceName()"], ["int", "com.hazelcast.cardinality.impl.operations.AbstractCardinalityEstimatorOperation.getFactoryId()"], ["java.lang.String", "com.hazelcast.cardinality.impl.operations.AbstractCardinalityEstimatorOperation.getName()"], ["com.hazelcast.cardinality.impl.CardinalityEstimatorContainer", "com.hazelcast.cardinality.impl.operations.AbstractCardinalityEstimatorOperation.getCardinalityEstimatorContainer()"], ["com.hazelcast.cardinality.impl.operations.AggregateBackupOperation", "com.hazelcast.cardinality.impl.operations.AggregateBackupOperation()"], ["com.hazelcast.cardinality.impl.operations.AggregateBackupOperation", "com.hazelcast.cardinality.impl.operations.AggregateBackupOperation(java.lang.String, long)"], ["void", "com.hazelcast.cardinality.impl.operations.AggregateBackupOperation.run()"], ["int", "com.hazelcast.cardinality.impl.operations.AggregateBackupOperation.getId()"], ["com.hazelcast.cardinality.impl.operations.AggregateOperation", "com.hazelcast.cardinality.impl.operations.AggregateOperation()"], ["com.hazelcast.cardinality.impl.operations.AggregateOperation", "com.hazelcast.cardinality.impl.operations.AggregateOperation(java.lang.String, long)"], ["int", "com.hazelcast.cardinality.impl.operations.AggregateOperation.getId()"], ["void", "com.hazelcast.cardinality.impl.operations.AggregateOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.cardinality.impl.operations.AggregateOperation.getBackupOperation()"], ["com.hazelcast.cardinality.impl.operations.CardinalityEstimatorBackupAwareOperation", "com.hazelcast.cardinality.impl.operations.CardinalityEstimatorBackupAwareOperation()"], ["com.hazelcast.cardinality.impl.operations.CardinalityEstimatorBackupAwareOperation", "com.hazelcast.cardinality.impl.operations.CardinalityEstimatorBackupAwareOperation(java.lang.String)"], ["boolean", "com.hazelcast.cardinality.impl.operations.CardinalityEstimatorBackupAwareOperation.shouldBackup()"], ["int", "com.hazelcast.cardinality.impl.operations.CardinalityEstimatorBackupAwareOperation.getSyncBackupCount()"], ["int", "com.hazelcast.cardinality.impl.operations.CardinalityEstimatorBackupAwareOperation.getAsyncBackupCount()"], ["com.hazelcast.cardinality.impl.operations.EstimateOperation", "com.hazelcast.cardinality.impl.operations.EstimateOperation()"], ["com.hazelcast.cardinality.impl.operations.EstimateOperation", "com.hazelcast.cardinality.impl.operations.EstimateOperation(java.lang.String)"], ["int", "com.hazelcast.cardinality.impl.operations.EstimateOperation.getId()"], ["void", "com.hazelcast.cardinality.impl.operations.EstimateOperation.run()"], ["java.lang.Object", "com.hazelcast.cardinality.impl.operations.EstimateOperation.getResponse()"], ["com.hazelcast.cardinality.impl.operations.ReplicationOperation", "com.hazelcast.cardinality.impl.operations.ReplicationOperation()"], ["com.hazelcast.cardinality.impl.operations.ReplicationOperation", "com.hazelcast.cardinality.impl.operations.ReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.cardinality.impl.CardinalityEstimatorContainer>)"], ["void", "com.hazelcast.cardinality.impl.operations.ReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.cardinality.impl.operations.ReplicationOperation.getServiceName()"], ["int", "com.hazelcast.cardinality.impl.operations.ReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.cardinality.impl.operations.ReplicationOperation.getId()"], ["int", "com.hazelcast.cardinality.impl.CardinalityEstimatorProxy.getPartitionId()"], ["java.lang.String", "com.hazelcast.cardinality.impl.CardinalityEstimatorProxy.getName()"], ["java.lang.String", "com.hazelcast.cardinality.impl.CardinalityEstimatorProxy.getServiceName()"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorProxy.add(java.lang.Object)"], ["long", "com.hazelcast.cardinality.impl.CardinalityEstimatorProxy.estimate()"], ["java.lang.String", "com.hazelcast.cardinality.impl.CardinalityEstimatorProxy.toString()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cardinality.impl.CardinalityEstimatorProxy.estimateAsync()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.cardinality.impl.CardinalityEstimatorProxy.addAsync(java.lang.Object)"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder()"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder(int)"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder(int, byte[])"], ["boolean", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.add(long)"], ["long", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.estimate()"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoder", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.merge(com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoder)"], ["int", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.getFactoryId()"], ["int", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.getId()"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.getMemoryFootprint()"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoding", "com.hazelcast.cardinality.impl.hyperloglog.impl.DenseHyperLogLogEncoder.getEncodingType()"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl()"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl(int)"], ["long", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl.estimate()"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl.add(long)"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl.addAll(long[])"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl.merge(com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog)"], ["int", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl.getFactoryId()"], ["int", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl.getId()"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder()"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.init(int, com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder$VariableLengthDiffArray)"], ["boolean", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.add(long)"], ["long", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.estimate()"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoder", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.merge(com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoder)"], ["int", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.getFactoryId()"], ["int", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.getId()"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoding", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.getEncodingType()"], ["int", "com.hazelcast.cardinality.impl.hyperloglog.impl.SparseHyperLogLogEncoder.getMemoryFootprint()"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoding[]", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoding.values()"], ["com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoding", "com.hazelcast.cardinality.impl.hyperloglog.impl.HyperLogLogEncoding.valueOf(java.lang.String)"], ["com.hazelcast.cardinality.impl.CardinalityEstimatorContainer", "com.hazelcast.cardinality.impl.CardinalityEstimatorService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.cardinality.impl.CardinalityEstimatorService$1.createNew(java.lang.Object)"], ["com.hazelcast.cardinality.impl.CardinalityEstimatorService", "com.hazelcast.cardinality.impl.CardinalityEstimatorService()"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.addCardinalityEstimator(java.lang.String, com.hazelcast.cardinality.impl.CardinalityEstimatorContainer)"], ["com.hazelcast.cardinality.impl.CardinalityEstimatorContainer", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.getCardinalityEstimatorContainer(java.lang.String)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.reset()"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.shutdown(boolean)"], ["com.hazelcast.cardinality.impl.CardinalityEstimatorProxy", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["java.lang.String", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.getQuorumName(java.lang.String)"], ["java.lang.Runnable", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.prepareMergeRunnable()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.cardinality.impl.CardinalityEstimatorService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.cardinality.impl.CardinalityEstimatorService$Merger.runInternal()"], ["java.lang.Object", "com.hazelcast.cardinality.impl.CardinalityEstimatorService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.cardinality.impl.CardinalityEstimatorService$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.cardinality.impl.CardinalityEstimatorDataSerializerHook$1.create(int)"], ["com.hazelcast.cardinality.impl.CardinalityEstimatorDataSerializerHook", "com.hazelcast.cardinality.impl.CardinalityEstimatorDataSerializerHook()"], ["int", "com.hazelcast.cardinality.impl.CardinalityEstimatorDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.cardinality.impl.CardinalityEstimatorDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.mapreduce.impl.MapReducePortableHook$1$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReducePortableHook$1$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.ListKeyValueSource", "com.hazelcast.mapreduce.impl.ListKeyValueSource()"], ["com.hazelcast.mapreduce.impl.ListKeyValueSource", "com.hazelcast.mapreduce.impl.ListKeyValueSource(java.lang.String)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.ListKeyValueSource.getListName()"], ["boolean", "com.hazelcast.mapreduce.impl.ListKeyValueSource.open(com.hazelcast.spi.NodeEngine)"], ["boolean", "com.hazelcast.mapreduce.impl.ListKeyValueSource.hasNext()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.ListKeyValueSource.key()"], ["java.util.Map$Entry<java.lang.String, V>", "com.hazelcast.mapreduce.impl.ListKeyValueSource.element()"], ["boolean", "com.hazelcast.mapreduce.impl.ListKeyValueSource.reset()"], ["void", "com.hazelcast.mapreduce.impl.ListKeyValueSource.close()"], ["void", "com.hazelcast.mapreduce.impl.ListKeyValueSource.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.ListKeyValueSource.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.ListKeyValueSource.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.ListKeyValueSource.getId()"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.ListKeyValueSource.key()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook()"], ["int", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl", "com.hazelcast.mapreduce.impl.MapReduceUtil.createJobProcessInformation(com.hazelcast.mapreduce.impl.task.JobTaskConfiguration, com.hazelcast.mapreduce.impl.task.JobSupervisor)"], ["void", "com.hazelcast.mapreduce.impl.MapReduceUtil.notifyRemoteException(com.hazelcast.mapreduce.impl.task.JobSupervisor, java.lang.Throwable)"], ["com.hazelcast.mapreduce.JobPartitionState$State", "com.hazelcast.mapreduce.impl.MapReduceUtil.stateChange(com.hazelcast.nio.Address, int, com.hazelcast.mapreduce.JobPartitionState$State, com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl, com.hazelcast.mapreduce.impl.task.JobTaskConfiguration)"], ["<V> java.util.List<V>", "com.hazelcast.mapreduce.impl.MapReduceUtil.executeOperation(java.util.Collection<com.hazelcast.core.Member>, com.hazelcast.spi.OperationFactory, com.hazelcast.mapreduce.impl.MapReduceService, com.hazelcast.spi.NodeEngine)"], ["<V> V", "com.hazelcast.mapreduce.impl.MapReduceUtil.executeOperation(com.hazelcast.spi.Operation, com.hazelcast.nio.Address, com.hazelcast.mapreduce.impl.MapReduceService, com.hazelcast.spi.NodeEngine)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.MapReduceUtil.buildExecutorName(java.lang.String)"], ["int", "com.hazelcast.mapreduce.impl.MapReduceUtil.mapSize(int)"], ["void", "com.hazelcast.mapreduce.impl.MapReduceUtil.enforcePartitionTableWarmup(com.hazelcast.mapreduce.impl.MapReduceService)"], ["com.hazelcast.mapreduce.impl.task.ReducerTask", "com.hazelcast.mapreduce.impl.task.ReducerTask(java.lang.String, java.lang.String, com.hazelcast.mapreduce.impl.task.JobSupervisor)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.ReducerTask.getName()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.ReducerTask.getJobId()"], ["void", "com.hazelcast.mapreduce.impl.task.ReducerTask.cancel()"], ["void", "com.hazelcast.mapreduce.impl.task.ReducerTask.processChunk(java.util.Map<Key, Chunk>)"], ["void", "com.hazelcast.mapreduce.impl.task.ReducerTask.processChunk(int, com.hazelcast.nio.Address, java.util.Map<Key, Chunk>)"], ["void", "com.hazelcast.mapreduce.impl.task.ReducerTask.run()"], ["void", "com.hazelcast.mapreduce.impl.task.MapCombineTask$NonPartitionBasedProcessor.run()"], ["com.hazelcast.mapreduce.impl.task.MapCombineTask", "com.hazelcast.mapreduce.impl.task.MapCombineTask(com.hazelcast.mapreduce.impl.task.JobTaskConfiguration, com.hazelcast.mapreduce.impl.task.JobSupervisor, com.hazelcast.mapreduce.impl.task.MappingPhase<KeyIn, ValueIn, KeyOut, ValueOut>)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.MapCombineTask.getName()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.MapCombineTask.getJobId()"], ["int", "com.hazelcast.mapreduce.impl.task.MapCombineTask.getChunkSize()"], ["void", "com.hazelcast.mapreduce.impl.task.MapCombineTask.cancel()"], ["void", "com.hazelcast.mapreduce.impl.task.MapCombineTask.process()"], ["void", "com.hazelcast.mapreduce.impl.task.MapCombineTask.processMapping(int, com.hazelcast.mapreduce.impl.task.DefaultContext<KeyOut, ValueOut>, com.hazelcast.mapreduce.KeyValueSource<KeyIn, ValueIn>, boolean)"], ["<K, V> java.util.Map<com.hazelcast.nio.Address, java.util.Map<K, V>>", "com.hazelcast.mapreduce.impl.task.MapCombineTask.mapResultToMember(com.hazelcast.mapreduce.impl.task.JobSupervisor, java.util.Map<K, V>)"], ["com.hazelcast.mapreduce.impl.task.MappingPhase", "com.hazelcast.mapreduce.impl.task.MappingPhase(java.util.Collection<? extends KeyIn>, com.hazelcast.mapreduce.KeyPredicate<? super KeyIn>)"], ["void", "com.hazelcast.mapreduce.impl.task.MappingPhase.cancel()"], ["com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation", "com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation()"], ["com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation", "com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation(com.hazelcast.mapreduce.JobPartitionState[], int)"], ["com.hazelcast.mapreduce.JobPartitionState[]", "com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation.getPartitionStates()"], ["int", "com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation.getProcessedRecords()"], ["void", "com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["int", "com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.task.TransferableJobProcessInformation.getClassId()"], ["com.hazelcast.mapreduce.impl.task.MemberAssigningJobProcessInformationImpl", "com.hazelcast.mapreduce.impl.task.MemberAssigningJobProcessInformationImpl(int, com.hazelcast.mapreduce.impl.task.JobSupervisor)"], ["int", "com.hazelcast.mapreduce.impl.task.MemberAssigningJobProcessInformationImpl.assignMemberId(com.hazelcast.nio.Address, java.lang.String, com.hazelcast.mapreduce.impl.task.JobTaskConfiguration)"], ["void", "com.hazelcast.mapreduce.impl.task.MapCombineTask$PartitionBasedProcessor.run()"], ["void", "com.hazelcast.mapreduce.impl.task.JobSupervisor$1.run()"], ["boolean", "com.hazelcast.mapreduce.impl.task.KeyValueSourceFacade.open(com.hazelcast.spi.NodeEngine)"], ["boolean", "com.hazelcast.mapreduce.impl.task.KeyValueSourceFacade.hasNext()"], ["K", "com.hazelcast.mapreduce.impl.task.KeyValueSourceFacade.key()"], ["java.util.Map$Entry<K, V>", "com.hazelcast.mapreduce.impl.task.KeyValueSourceFacade.element()"], ["boolean", "com.hazelcast.mapreduce.impl.task.KeyValueSourceFacade.reset()"], ["boolean", "com.hazelcast.mapreduce.impl.task.KeyValueSourceFacade.isAllKeysSupported()"], ["void", "com.hazelcast.mapreduce.impl.task.KeyValueSourceFacade.close()"], ["com.hazelcast.mapreduce.impl.task.JobSupervisor", "com.hazelcast.mapreduce.impl.task.JobSupervisor(com.hazelcast.mapreduce.impl.task.JobTaskConfiguration, com.hazelcast.mapreduce.impl.AbstractJobTracker, boolean, com.hazelcast.mapreduce.impl.MapReduceService)"], ["com.hazelcast.mapreduce.impl.MapReduceService", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getMapReduceService()"], ["com.hazelcast.mapreduce.JobTracker", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getJobTracker()"], ["void", "com.hazelcast.mapreduce.impl.task.JobSupervisor.startTasks(com.hazelcast.mapreduce.impl.task.MappingPhase)"], ["void", "com.hazelcast.mapreduce.impl.task.JobSupervisor.onNotification(com.hazelcast.mapreduce.impl.notification.MapReduceNotification)"], ["void", "com.hazelcast.mapreduce.impl.task.JobSupervisor.notifyRemoteException(com.hazelcast.nio.Address, java.lang.Throwable)"], ["boolean", "com.hazelcast.mapreduce.impl.task.JobSupervisor.cancelAndNotify(java.lang.Exception)"], ["com.hazelcast.mapreduce.impl.task.TrackableJobFuture", "com.hazelcast.mapreduce.impl.task.JobSupervisor.cancel()"], ["java.util.Map<java.lang.Object, java.lang.Object>", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getJobResults()"], ["<KeyIn, ValueIn, ValueOut> com.hazelcast.mapreduce.Reducer<ValueIn, ValueOut>", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getReducerByKey(java.lang.Object)"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getReducerAddressByKey(java.lang.Object)"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.task.JobSupervisor.assignKeyReducerAddress(java.lang.Object)"], ["boolean", "com.hazelcast.mapreduce.impl.task.JobSupervisor.checkAssignedMembersAvailable()"], ["boolean", "com.hazelcast.mapreduce.impl.task.JobSupervisor.assignKeyReducerAddress(java.lang.Object, com.hazelcast.nio.Address)"], ["void", "com.hazelcast.mapreduce.impl.task.JobSupervisor.checkFullyProcessed(com.hazelcast.mapreduce.JobProcessInformation)"], ["<K, V> com.hazelcast.mapreduce.impl.task.DefaultContext<K, V>", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getOrCreateContext(com.hazelcast.mapreduce.impl.task.MapCombineTask)"], ["void", "com.hazelcast.mapreduce.impl.task.JobSupervisor.registerReducerEventInterests(int, java.util.Set<com.hazelcast.nio.Address>)"], ["com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getJobProcessInformation()"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getJobOwner()"], ["boolean", "com.hazelcast.mapreduce.impl.task.JobSupervisor.isOwnerNode()"], ["com.hazelcast.mapreduce.impl.task.JobTaskConfiguration", "com.hazelcast.mapreduce.impl.task.JobSupervisor.getConfiguration()"], ["com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl", "com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl(com.hazelcast.nio.Address, com.hazelcast.mapreduce.JobPartitionState$State)"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl.getOwner()"], ["com.hazelcast.mapreduce.JobPartitionState$State", "com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl.getState()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl.toString()"], ["void", "com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.mapreduce.impl.task.JobPartitionStateImpl.hashCode()"], ["com.hazelcast.mapreduce.impl.task.KeyValueJob", "com.hazelcast.mapreduce.impl.task.KeyValueJob(java.lang.String, com.hazelcast.mapreduce.impl.AbstractJobTracker, com.hazelcast.spi.NodeEngine, com.hazelcast.mapreduce.impl.MapReduceService, com.hazelcast.mapreduce.KeyValueSource<KeyIn, ValueIn>)"], ["com.hazelcast.mapreduce.impl.task.TrackableJobFuture", "com.hazelcast.mapreduce.impl.task.TrackableJobFuture(java.lang.String, java.lang.String, com.hazelcast.mapreduce.JobTracker, com.hazelcast.spi.NodeEngine, com.hazelcast.mapreduce.Collator)"], ["void", "com.hazelcast.mapreduce.impl.task.TrackableJobFuture.setResult(java.lang.Object)"], ["com.hazelcast.mapreduce.JobTracker", "com.hazelcast.mapreduce.impl.task.TrackableJobFuture.getJobTracker()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.TrackableJobFuture.getName()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.TrackableJobFuture.getJobId()"], ["com.hazelcast.mapreduce.JobProcessInformation", "com.hazelcast.mapreduce.impl.task.TrackableJobFuture.getJobProcessInformation()"], ["void", "com.hazelcast.mapreduce.impl.task.DefaultContext.setPartitionId(int)"], ["void", "com.hazelcast.mapreduce.impl.task.DefaultContext.emit(KeyIn, ValueIn)"], ["<Chunk> java.util.Map<KeyIn, Chunk>", "com.hazelcast.mapreduce.impl.task.DefaultContext.requestChunk()"], ["int", "com.hazelcast.mapreduce.impl.task.DefaultContext.getCollected()"], ["finalizeCombiners()", "com.hazelcast.mapreduce.impl.task.DefaultContext."], ["com.hazelcast.mapreduce.Combiner<ValueIn, ?>", "com.hazelcast.mapreduce.impl.task.DefaultContext.getOrCreateCombiner(KeyIn)"], ["void", "com.hazelcast.mapreduce.impl.task.DefaultContext.setSerializationService(com.hazelcast.internal.serialization.InternalSerializationService)"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.mapreduce.impl.task.DefaultContext.getSerializationService()"], ["com.hazelcast.mapreduce.Combiner<ValueIn, ?>", "com.hazelcast.mapreduce.impl.task.DefaultContext$CombinerFunction.apply(KeyIn)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.task.DefaultContext$CombinerFunction.apply(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.task.JobSupervisor$GetResultsRunnable", "com.hazelcast.mapreduce.impl.task.JobSupervisor$GetResultsRunnable(com.hazelcast.mapreduce.impl.task.JobSupervisor, com.hazelcast.spi.NodeEngine, com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory, java.lang.String, com.hazelcast.mapreduce.impl.task.JobSupervisor, com.hazelcast.mapreduce.impl.task.TrackableJobFuture)"], ["void", "com.hazelcast.mapreduce.impl.task.JobSupervisor$GetResultsRunnable.run()"], ["com.hazelcast.mapreduce.JobPartitionState[]", "com.hazelcast.mapreduce.impl.task.TrackableJobFuture$JobProcessInformationAdapter.getPartitionStates()"], ["int", "com.hazelcast.mapreduce.impl.task.TrackableJobFuture$JobProcessInformationAdapter.getProcessedRecords()"], ["com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl", "com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl(int, com.hazelcast.mapreduce.impl.task.JobSupervisor)"], ["com.hazelcast.mapreduce.JobPartitionState[]", "com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl.getPartitionStates()"], ["int", "com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl.getProcessedRecords()"], ["void", "com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl.addProcessedRecords(int)"], ["void", "com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl.cancelPartitionState()"], ["boolean", "com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl.updatePartitionState(int, com.hazelcast.mapreduce.JobPartitionState, com.hazelcast.mapreduce.JobPartitionState)"], ["boolean", "com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl.updatePartitionState(com.hazelcast.mapreduce.JobPartitionState[], com.hazelcast.mapreduce.JobPartitionState[])"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl.toString()"], ["void", "com.hazelcast.mapreduce.impl.task.DefaultContext$CollectingCombinerFactory$1.combine(ValueIn)"], ["void", "com.hazelcast.mapreduce.impl.task.DefaultContext$CollectingCombinerFactory$1.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.impl.task.DefaultContext$CollectingCombinerFactory$1."], ["void", "com.hazelcast.mapreduce.impl.task.JobSupervisor$2.run()"], ["com.hazelcast.mapreduce.impl.task.ReducerTaskScheduler$State[]", "com.hazelcast.mapreduce.impl.task.ReducerTaskScheduler$State.values()"], ["com.hazelcast.mapreduce.impl.task.ReducerTaskScheduler$State", "com.hazelcast.mapreduce.impl.task.ReducerTaskScheduler$State.valueOf(java.lang.String)"], ["com.hazelcast.mapreduce.impl.task.KeyValueSourceMappingPhase", "com.hazelcast.mapreduce.impl.task.KeyValueSourceMappingPhase(java.util.Collection<? extends KeyIn>, com.hazelcast.mapreduce.KeyPredicate<? super KeyIn>)"], ["void", "com.hazelcast.mapreduce.impl.task.KeyValueSourceMappingPhase.executeMappingPhase(com.hazelcast.mapreduce.KeyValueSource<KeyIn, ValueIn>, com.hazelcast.mapreduce.Mapper<KeyIn, ValueIn, KeyOut, ValueOut>, com.hazelcast.mapreduce.Context<KeyOut, ValueOut>)"], ["com.hazelcast.mapreduce.impl.task.JobTaskConfiguration", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration(com.hazelcast.nio.Address, com.hazelcast.spi.NodeEngine, int, java.lang.String, java.lang.String, com.hazelcast.mapreduce.Mapper, com.hazelcast.mapreduce.CombinerFactory, com.hazelcast.mapreduce.ReducerFactory, com.hazelcast.mapreduce.KeyValueSource, boolean, com.hazelcast.mapreduce.TopologyChangedStrategy)"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getJobOwner()"], ["int", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getChunkSize()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getName()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getJobId()"], ["com.hazelcast.mapreduce.Mapper", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getMapper()"], ["com.hazelcast.mapreduce.CombinerFactory", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getReducerFactory()"], ["com.hazelcast.mapreduce.KeyValueSource", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getKeyValueSource()"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getNodeEngine()"], ["boolean", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.isCommunicateStats()"], ["com.hazelcast.mapreduce.TopologyChangedStrategy", "com.hazelcast.mapreduce.impl.task.JobTaskConfiguration.getTopologyChangedStrategy()"], ["com.hazelcast.mapreduce.Combiner<ValueIn, java.util.List<ValueIn>>", "com.hazelcast.mapreduce.impl.task.DefaultContext$CollectingCombinerFactory.newCombiner(KeyIn)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.mapreduce.impl.MapReducePortableHook$1.create(int)"], ["com.hazelcast.mapreduce.impl.HashMapAdapter", "com.hazelcast.mapreduce.impl.HashMapAdapter(int, float)"], ["com.hazelcast.mapreduce.impl.HashMapAdapter", "com.hazelcast.mapreduce.impl.HashMapAdapter(int)"], ["com.hazelcast.mapreduce.impl.HashMapAdapter", "com.hazelcast.mapreduce.impl.HashMapAdapter()"], ["com.hazelcast.mapreduce.impl.HashMapAdapter", "com.hazelcast.mapreduce.impl.HashMapAdapter(java.util.Map<? extends K, ? extends V>)"], ["int", "com.hazelcast.mapreduce.impl.HashMapAdapter.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.HashMapAdapter.getId()"], ["void", "com.hazelcast.mapreduce.impl.HashMapAdapter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.HashMapAdapter.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.mapreduce.impl.CombinerResultList", "com.hazelcast.mapreduce.impl.CombinerResultList()"], ["com.hazelcast.mapreduce.impl.CombinerResultList", "com.hazelcast.mapreduce.impl.CombinerResultList(java.util.Collection<? extends E>)"], ["int", "com.hazelcast.mapreduce.impl.CombinerResultList.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.CombinerResultList.getId()"], ["void", "com.hazelcast.mapreduce.impl.CombinerResultList.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.CombinerResultList.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$12.createNew(java.lang.Object)"], ["<K, V> com.hazelcast.mapreduce.Job<K, V>", "com.hazelcast.mapreduce.impl.NodeJobTracker.newJob(com.hazelcast.mapreduce.KeyValueSource<K, V>)"], ["boolean", "com.hazelcast.mapreduce.impl.NodeJobTracker.registerJobSupervisorCancellation(java.lang.String)"], ["boolean", "com.hazelcast.mapreduce.impl.NodeJobTracker.unregisterJobSupervisorCancellation(java.lang.String)"], ["com.hazelcast.mapreduce.impl.SetKeyValueSource", "com.hazelcast.mapreduce.impl.SetKeyValueSource()"], ["com.hazelcast.mapreduce.impl.SetKeyValueSource", "com.hazelcast.mapreduce.impl.SetKeyValueSource(java.lang.String)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.SetKeyValueSource.getSetName()"], ["boolean", "com.hazelcast.mapreduce.impl.SetKeyValueSource.open(com.hazelcast.spi.NodeEngine)"], ["boolean", "com.hazelcast.mapreduce.impl.SetKeyValueSource.hasNext()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.SetKeyValueSource.key()"], ["java.util.Map$Entry<java.lang.String, V>", "com.hazelcast.mapreduce.impl.SetKeyValueSource.element()"], ["boolean", "com.hazelcast.mapreduce.impl.SetKeyValueSource.reset()"], ["void", "com.hazelcast.mapreduce.impl.SetKeyValueSource.close()"], ["void", "com.hazelcast.mapreduce.impl.SetKeyValueSource.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.SetKeyValueSource.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.SetKeyValueSource.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.SetKeyValueSource.getId()"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.SetKeyValueSource.key()"], ["com.hazelcast.mapreduce.impl.MapKeyValueSource", "com.hazelcast.mapreduce.impl.MapKeyValueSource(java.lang.String)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.MapKeyValueSource.getMapName()"], ["boolean", "com.hazelcast.mapreduce.impl.MapKeyValueSource.open(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.mapreduce.impl.MapKeyValueSource.close()"], ["boolean", "com.hazelcast.mapreduce.impl.MapKeyValueSource.hasNext()"], ["K", "com.hazelcast.mapreduce.impl.MapKeyValueSource.key()"], ["java.util.Map$Entry<K, V>", "com.hazelcast.mapreduce.impl.MapKeyValueSource.element()"], ["boolean", "com.hazelcast.mapreduce.impl.MapKeyValueSource.reset()"], ["void", "com.hazelcast.mapreduce.impl.MapKeyValueSource.setPartitionId(int)"], ["void", "com.hazelcast.mapreduce.impl.MapKeyValueSource.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.MapKeyValueSource.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.MapKeyValueSource.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.MapKeyValueSource.getId()"], ["com.hazelcast.mapreduce.impl.notification.LastChunkNotification", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification()"], ["com.hazelcast.mapreduce.impl.notification.LastChunkNotification", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification(com.hazelcast.nio.Address, java.lang.String, java.lang.String, com.hazelcast.nio.Address, int, java.util.Map<KeyOut, Value>)"], ["java.util.Map<KeyOut, Value>", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification.getChunk()"], ["int", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification.getPartitionId()"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification.getSender()"], ["void", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification.getId()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.notification.LastChunkNotification.toString()"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.notification.MemberAwareMapReduceNotification.getAddress()"], ["void", "com.hazelcast.mapreduce.impl.notification.MemberAwareMapReduceNotification.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.notification.MemberAwareMapReduceNotification.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.notification.MemberAwareMapReduceNotification.toString()"], ["com.hazelcast.mapreduce.impl.notification.MapReduceNotification", "com.hazelcast.mapreduce.impl.notification.MapReduceNotification()"], ["com.hazelcast.mapreduce.impl.notification.MapReduceNotification", "com.hazelcast.mapreduce.impl.notification.MapReduceNotification(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.notification.MapReduceNotification.getName()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.notification.MapReduceNotification.getJobId()"], ["void", "com.hazelcast.mapreduce.impl.notification.MapReduceNotification.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.notification.MapReduceNotification.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.notification.MapReduceNotification.toString()"], ["com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification", "com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification()"], ["com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification", "com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification(com.hazelcast.nio.Address, java.lang.String, java.lang.String, int)"], ["int", "com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification.getPartitionId()"], ["void", "com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification.getId()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.notification.ReducingFinishedNotification.toString()"], ["com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification()"], ["com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification(com.hazelcast.nio.Address, java.lang.String, java.lang.String, java.util.Map<KeyOut, Value>, int)"], ["java.util.Map<KeyOut, Value>", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification.getChunk()"], ["int", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification.getPartitionId()"], ["void", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification.getId()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.notification.IntermediateChunkNotification.toString()"], ["boolean", "com.hazelcast.mapreduce.impl.MapReduceService$JobSupervisorKey.equals(java.lang.Object)"], ["int", "com.hazelcast.mapreduce.impl.MapReduceService$JobSupervisorKey.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.ReducingSubmittableJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingSubmittableJobImpl.onKeys(java.lang.Iterable<EntryKey>)"], ["com.hazelcast.mapreduce.ReducingSubmittableJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingSubmittableJobImpl.onKeys(EntryKey...)"], ["com.hazelcast.mapreduce.ReducingSubmittableJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingSubmittableJobImpl.keyPredicate(com.hazelcast.mapreduce.KeyPredicate<EntryKey>)"], ["com.hazelcast.mapreduce.ReducingSubmittableJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingSubmittableJobImpl.chunkSize(int)"], ["com.hazelcast.mapreduce.ReducingSubmittableJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingSubmittableJobImpl.topologyChangedStrategy(com.hazelcast.mapreduce.TopologyChangedStrategy)"], ["com.hazelcast.mapreduce.JobCompletableFuture<java.util.Map<Key, Value>>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingSubmittableJobImpl.submit()"], ["<ValueOut> com.hazelcast.mapreduce.JobCompletableFuture<ValueOut>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingSubmittableJobImpl.submit(com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, Value>, ValueOut>)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$23.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.NodeJobTracker", "com.hazelcast.mapreduce.impl.MapReduceService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceService$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.MapReduceService", "com.hazelcast.mapreduce.impl.MapReduceService(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.mapreduce.JobTracker", "com.hazelcast.mapreduce.impl.MapReduceService.getJobTracker(java.lang.String)"], ["com.hazelcast.mapreduce.impl.task.JobSupervisor", "com.hazelcast.mapreduce.impl.MapReduceService.getJobSupervisor(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.mapreduce.impl.MapReduceService.registerJobSupervisorCancellation(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.mapreduce.impl.MapReduceService.unregisterJobSupervisorCancellation(java.lang.String, java.lang.String)"], ["com.hazelcast.mapreduce.impl.task.JobSupervisor", "com.hazelcast.mapreduce.impl.MapReduceService.createJobSupervisor(com.hazelcast.mapreduce.impl.task.JobTaskConfiguration)"], ["boolean", "com.hazelcast.mapreduce.impl.MapReduceService.destroyJobSupervisor(com.hazelcast.mapreduce.impl.task.JobSupervisor)"], ["java.util.concurrent.ExecutorService", "com.hazelcast.mapreduce.impl.MapReduceService.getExecutorService(java.lang.String)"], ["void", "com.hazelcast.mapreduce.impl.MapReduceService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.mapreduce.impl.MapReduceService.reset()"], ["void", "com.hazelcast.mapreduce.impl.MapReduceService.shutdown(boolean)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.mapreduce.impl.MapReduceService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.mapreduce.impl.MapReduceService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.MapReduceService.getKeyMember(java.lang.Object)"], ["boolean", "com.hazelcast.mapreduce.impl.MapReduceService.checkAssignedMembersAvailable(java.util.Collection<com.hazelcast.nio.Address>)"], ["<R> R", "com.hazelcast.mapreduce.impl.MapReduceService.processRequest(com.hazelcast.nio.Address, com.hazelcast.mapreduce.impl.operation.ProcessingOperation)"], ["void", "com.hazelcast.mapreduce.impl.MapReduceService.sendNotification(com.hazelcast.nio.Address, com.hazelcast.mapreduce.impl.notification.MapReduceNotification)"], ["com.hazelcast.nio.Address", "com.hazelcast.mapreduce.impl.MapReduceService.getLocalAddress()"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.mapreduce.impl.MapReduceService.getNodeEngine()"], ["void", "com.hazelcast.mapreduce.impl.MapReduceService.dispatchEvent(com.hazelcast.mapreduce.impl.notification.MapReduceNotification)"], ["<ValueOut> com.hazelcast.mapreduce.ReducingSubmittableJob<EntryKey, Key, ValueOut>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingJobImpl.reducer(com.hazelcast.mapreduce.ReducerFactory<Key, Value, ValueOut>)"], ["com.hazelcast.mapreduce.ReducingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingJobImpl.onKeys(java.lang.Iterable<EntryKey>)"], ["com.hazelcast.mapreduce.ReducingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingJobImpl.onKeys(EntryKey...)"], ["com.hazelcast.mapreduce.ReducingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingJobImpl.keyPredicate(com.hazelcast.mapreduce.KeyPredicate<EntryKey>)"], ["com.hazelcast.mapreduce.ReducingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingJobImpl.chunkSize(int)"], ["com.hazelcast.mapreduce.ReducingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingJobImpl.topologyChangedStrategy(com.hazelcast.mapreduce.TopologyChangedStrategy)"], ["com.hazelcast.mapreduce.JobCompletableFuture<java.util.Map<Key, java.util.List<Value>>>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingJobImpl.submit()"], ["<ValueOut> com.hazelcast.mapreduce.JobCompletableFuture<ValueOut>", "com.hazelcast.mapreduce.impl.AbstractJob$ReducingJobImpl.submit(com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.util.List<Value>>, ValueOut>)"], ["com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation()"], ["com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation(java.lang.String, java.lang.String, int, com.hazelcast.mapreduce.KeyValueSource<K, V>, com.hazelcast.mapreduce.Mapper, com.hazelcast.mapreduce.CombinerFactory, com.hazelcast.mapreduce.ReducerFactory, boolean, com.hazelcast.mapreduce.TopologyChangedStrategy)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation.getServiceName()"], ["void", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation.run()"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.KeyValueJobOperation.getId()"], ["com.hazelcast.mapreduce.impl.operation.NotifyRemoteExceptionOperation", "com.hazelcast.mapreduce.impl.operation.NotifyRemoteExceptionOperation()"], ["com.hazelcast.mapreduce.impl.operation.NotifyRemoteExceptionOperation", "com.hazelcast.mapreduce.impl.operation.NotifyRemoteExceptionOperation(java.lang.String, java.lang.String, java.lang.Throwable)"], ["boolean", "com.hazelcast.mapreduce.impl.operation.NotifyRemoteExceptionOperation.returnsResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.NotifyRemoteExceptionOperation.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.NotifyRemoteExceptionOperation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.NotifyRemoteExceptionOperation.getId()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionResult", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionResult", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult(com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState, int)"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult.getResultState()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult.getPartitionId()"], ["void", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult.getId()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult.toString()"], ["com.hazelcast.mapreduce.impl.operation.ProcessStatsUpdateOperation", "com.hazelcast.mapreduce.impl.operation.ProcessStatsUpdateOperation()"], ["com.hazelcast.mapreduce.impl.operation.ProcessStatsUpdateOperation", "com.hazelcast.mapreduce.impl.operation.ProcessStatsUpdateOperation(java.lang.String, java.lang.String, int)"], ["void", "com.hazelcast.mapreduce.impl.operation.ProcessStatsUpdateOperation.run()"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.ProcessStatsUpdateOperation.getResponse()"], ["int", "com.hazelcast.mapreduce.impl.operation.ProcessStatsUpdateOperation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.ProcessStatsUpdateOperation.getId()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionMapping", "com.hazelcast.mapreduce.impl.operation.RequestPartitionMapping()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionMapping", "com.hazelcast.mapreduce.impl.operation.RequestPartitionMapping(java.lang.String, java.lang.String)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.RequestPartitionMapping.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.RequestPartitionMapping.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionMapping.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionMapping.getId()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionProcessed", "com.hazelcast.mapreduce.impl.operation.RequestPartitionProcessed()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionProcessed", "com.hazelcast.mapreduce.impl.operation.RequestPartitionProcessed(java.lang.String, java.lang.String, int, com.hazelcast.mapreduce.JobPartitionState$State)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.RequestPartitionProcessed.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.RequestPartitionProcessed.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionProcessed.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionProcessed.getId()"], ["com.hazelcast.mapreduce.impl.operation.CancelJobSupervisorOperation", "com.hazelcast.mapreduce.impl.operation.CancelJobSupervisorOperation()"], ["com.hazelcast.mapreduce.impl.operation.CancelJobSupervisorOperation", "com.hazelcast.mapreduce.impl.operation.CancelJobSupervisorOperation(java.lang.String, java.lang.String)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.CancelJobSupervisorOperation.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.CancelJobSupervisorOperation.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.CancelJobSupervisorOperation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.CancelJobSupervisorOperation.getId()"], ["com.hazelcast.mapreduce.impl.operation.ProcessingOperation", "com.hazelcast.mapreduce.impl.operation.ProcessingOperation()"], ["com.hazelcast.mapreduce.impl.operation.ProcessingOperation", "com.hazelcast.mapreduce.impl.operation.ProcessingOperation(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.operation.ProcessingOperation.getServiceName()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.operation.ProcessingOperation.getName()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.operation.ProcessingOperation.getJobId()"], ["com.hazelcast.mapreduce.impl.operation.RequestMemberIdAssignment", "com.hazelcast.mapreduce.impl.operation.RequestMemberIdAssignment()"], ["com.hazelcast.mapreduce.impl.operation.RequestMemberIdAssignment", "com.hazelcast.mapreduce.impl.operation.RequestMemberIdAssignment(java.lang.String, java.lang.String)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.RequestMemberIdAssignment.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.RequestMemberIdAssignment.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestMemberIdAssignment.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestMemberIdAssignment.getId()"], ["com.hazelcast.mapreduce.impl.operation.FireNotificationOperation", "com.hazelcast.mapreduce.impl.operation.FireNotificationOperation()"], ["com.hazelcast.mapreduce.impl.operation.FireNotificationOperation", "com.hazelcast.mapreduce.impl.operation.FireNotificationOperation(com.hazelcast.mapreduce.impl.notification.MapReduceNotification)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.FireNotificationOperation.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.FireNotificationOperation.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.FireNotificationOperation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.FireNotificationOperation.getId()"], ["com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation()"], ["com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation(java.lang.String, java.lang.String, java.util.Collection<K>, com.hazelcast.mapreduce.KeyPredicate<? super K>)"], ["boolean", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation.returnsResponse()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation.getServiceName()"], ["void", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation.run()"], ["void", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.StartProcessingJobOperation.getId()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionReducing", "com.hazelcast.mapreduce.impl.operation.RequestPartitionReducing()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionReducing", "com.hazelcast.mapreduce.impl.operation.RequestPartitionReducing(java.lang.String, java.lang.String, int)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.RequestPartitionReducing.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.RequestPartitionReducing.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionReducing.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.RequestPartitionReducing.getId()"], ["com.hazelcast.mapreduce.impl.operation.PostPonePartitionProcessing", "com.hazelcast.mapreduce.impl.operation.PostPonePartitionProcessing()"], ["com.hazelcast.mapreduce.impl.operation.PostPonePartitionProcessing", "com.hazelcast.mapreduce.impl.operation.PostPonePartitionProcessing(java.lang.String, java.lang.String, int)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.PostPonePartitionProcessing.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.PostPonePartitionProcessing.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.PostPonePartitionProcessing.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.PostPonePartitionProcessing.getId()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState[]", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState.values()"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState.valueOf(java.lang.String)"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState", "com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState.byOrdinal(int)"], ["com.hazelcast.mapreduce.impl.operation.GetResultOperation", "com.hazelcast.mapreduce.impl.operation.GetResultOperation()"], ["com.hazelcast.mapreduce.impl.operation.GetResultOperation", "com.hazelcast.mapreduce.impl.operation.GetResultOperation(java.lang.String, java.lang.String)"], ["java.util.Map", "com.hazelcast.mapreduce.impl.operation.GetResultOperation.getResult()"], ["void", "com.hazelcast.mapreduce.impl.operation.GetResultOperation.run()"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.GetResultOperation.getResponse()"], ["int", "com.hazelcast.mapreduce.impl.operation.GetResultOperation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.GetResultOperation.getId()"], ["com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory", "com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory()"], ["com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory", "com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory.createOperation()"], ["void", "com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.GetResultOperationFactory.getId()"], ["com.hazelcast.mapreduce.impl.operation.KeysAssignmentOperation", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentOperation()"], ["com.hazelcast.mapreduce.impl.operation.KeysAssignmentOperation", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentOperation(java.lang.String, java.lang.String, java.util.Set<java.lang.Object>)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentOperation.getResponse()"], ["void", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentOperation.run()"], ["int", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentOperation.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentOperation.getId()"], ["com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult()"], ["com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult(com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState, java.util.Map<java.lang.Object, com.hazelcast.nio.Address>)"], ["com.hazelcast.mapreduce.impl.operation.RequestPartitionResult$ResultState", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult.getResultState()"], ["java.util.Map<java.lang.Object, com.hazelcast.nio.Address>", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult.getAssignment()"], ["void", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.operation.KeysAssignmentResult.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.MapReduceSimpleEntry", "com.hazelcast.mapreduce.impl.MapReduceSimpleEntry()"], ["com.hazelcast.mapreduce.impl.MapReduceSimpleEntry", "com.hazelcast.mapreduce.impl.MapReduceSimpleEntry(K, V)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.mapreduce.impl.MapReduceSimpleEntry.getKeyData()"], ["K", "com.hazelcast.mapreduce.impl.MapReduceSimpleEntry.getKey()"], ["V", "com.hazelcast.mapreduce.impl.MapReduceSimpleEntry.getValue()"], ["V", "com.hazelcast.mapreduce.impl.MapReduceSimpleEntry.setValue(V)"], ["void", "com.hazelcast.mapreduce.impl.MapReduceSimpleEntry.setKeyData(com.hazelcast.nio.serialization.Data)"], ["K", "com.hazelcast.mapreduce.impl.MapReduceSimpleEntry.setKey(K)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.AbstractJob", "com.hazelcast.mapreduce.impl.AbstractJob(java.lang.String, com.hazelcast.mapreduce.JobTracker, com.hazelcast.mapreduce.KeyValueSource<KeyIn, ValueIn>)"], ["<KeyOut, ValueOut> com.hazelcast.mapreduce.MappingJob<KeyIn, KeyOut, ValueOut>", "com.hazelcast.mapreduce.impl.AbstractJob.mapper(com.hazelcast.mapreduce.Mapper<KeyIn, ValueIn, KeyOut, ValueOut>)"], ["com.hazelcast.mapreduce.Job<KeyIn, ValueIn>", "com.hazelcast.mapreduce.impl.AbstractJob.onKeys(java.lang.Iterable<? extends KeyIn>)"], ["com.hazelcast.mapreduce.Job<KeyIn, ValueIn>", "com.hazelcast.mapreduce.impl.AbstractJob.onKeys(KeyIn...)"], ["com.hazelcast.mapreduce.Job<KeyIn, ValueIn>", "com.hazelcast.mapreduce.impl.AbstractJob.keyPredicate(com.hazelcast.mapreduce.KeyPredicate<? super KeyIn>)"], ["com.hazelcast.mapreduce.Job<KeyIn, ValueIn>", "com.hazelcast.mapreduce.impl.AbstractJob.chunkSize(int)"], ["com.hazelcast.mapreduce.Job<KeyIn, ValueIn>", "com.hazelcast.mapreduce.impl.AbstractJob.topologyChangedStrategy(com.hazelcast.mapreduce.TopologyChangedStrategy)"], ["void", "com.hazelcast.mapreduce.impl.AbstractJobTracker.destroy()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.AbstractJobTracker.getPartitionKey()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.AbstractJobTracker.getName()"], ["java.lang.String", "com.hazelcast.mapreduce.impl.AbstractJobTracker.getServiceName()"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.mapreduce.impl.AbstractJobTracker.getJobTrackerConfig()"], ["<V> boolean", "com.hazelcast.mapreduce.impl.AbstractJobTracker.registerTrackableJob(com.hazelcast.mapreduce.impl.task.TrackableJobFuture<V>)"], ["<V> com.hazelcast.mapreduce.impl.task.TrackableJobFuture<V>", "com.hazelcast.mapreduce.impl.AbstractJobTracker.unregisterTrackableJob(java.lang.String)"], ["<V> com.hazelcast.mapreduce.impl.task.TrackableJobFuture<V>", "com.hazelcast.mapreduce.impl.AbstractJobTracker.getTrackableJob(java.lang.String)"], ["<Key, Chunk> void", "com.hazelcast.mapreduce.impl.AbstractJobTracker.registerReducerTask(com.hazelcast.mapreduce.impl.task.ReducerTask<Key, Chunk>)"], ["com.hazelcast.mapreduce.impl.task.ReducerTask", "com.hazelcast.mapreduce.impl.AbstractJobTracker.unregisterReducerTask(java.lang.String)"], ["<Key, Chunk> com.hazelcast.mapreduce.impl.task.ReducerTask<Key, Chunk>", "com.hazelcast.mapreduce.impl.AbstractJobTracker.getReducerTask(java.lang.String)"], ["<KeyIn, ValueIn, KeyOut, ValueOut, Chunk> void", "com.hazelcast.mapreduce.impl.AbstractJobTracker.registerMapCombineTask(com.hazelcast.mapreduce.impl.task.MapCombineTask<KeyIn, ValueIn, KeyOut, ValueOut, Chunk>)"], ["com.hazelcast.mapreduce.impl.task.MapCombineTask", "com.hazelcast.mapreduce.impl.AbstractJobTracker.unregisterMapCombineTask(java.lang.String)"], ["<KeyIn, ValueIn, KeyOut, ValueOut, Chunk> com.hazelcast.mapreduce.impl.task.MapCombineTask<KeyIn, ValueIn, KeyOut, ValueOut, Chunk>", "com.hazelcast.mapreduce.impl.AbstractJobTracker.getMapCombineTask(java.lang.String)"], ["com.hazelcast.mapreduce.TrackableJob", "com.hazelcast.mapreduce.impl.AbstractJobTracker.getTrackableJob(java.lang.String)"], ["com.hazelcast.mapreduce.MappingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.onKeys(java.lang.Iterable<? extends EntryKey>)"], ["com.hazelcast.mapreduce.MappingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.onKeys(EntryKey...)"], ["com.hazelcast.mapreduce.MappingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.keyPredicate(com.hazelcast.mapreduce.KeyPredicate<? super EntryKey>)"], ["com.hazelcast.mapreduce.MappingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.chunkSize(int)"], ["com.hazelcast.mapreduce.MappingJob<EntryKey, Key, Value>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.topologyChangedStrategy(com.hazelcast.mapreduce.TopologyChangedStrategy)"], ["<ValueOut> com.hazelcast.mapreduce.ReducingJob<EntryKey, Key, ValueOut>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.combiner(com.hazelcast.mapreduce.CombinerFactory<? super Key, ? super Value, ? extends ValueOut>)"], ["<ValueOut> com.hazelcast.mapreduce.ReducingSubmittableJob<EntryKey, Key, ValueOut>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.reducer(com.hazelcast.mapreduce.ReducerFactory<? super Key, ? super Value, ? extends ValueOut>)"], ["com.hazelcast.mapreduce.JobCompletableFuture<java.util.Map<Key, java.util.List<Value>>>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.submit()"], ["<ValueOut> com.hazelcast.mapreduce.JobCompletableFuture<ValueOut>", "com.hazelcast.mapreduce.impl.AbstractJob$MappingJobImpl.submit(com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.util.List<Value>>, ValueOut>)"], ["com.hazelcast.mapreduce.impl.MultiMapKeyValueSource", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource(java.lang.String)"], ["java.lang.String", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.getMultiMapName()"], ["boolean", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.open(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.close()"], ["boolean", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.hasNext()"], ["K", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.key()"], ["java.util.Map$Entry<K, V>", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.element()"], ["boolean", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.reset()"], ["void", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.setPartitionId(int)"], ["void", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.getFactoryId()"], ["int", "com.hazelcast.mapreduce.impl.MultiMapKeyValueSource.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.impl.MapReducePortableHook", "com.hazelcast.mapreduce.impl.MapReducePortableHook()"], ["int", "com.hazelcast.mapreduce.impl.MapReducePortableHook.getFactoryId()"], ["com.hazelcast.nio.serialization.PortableFactory", "com.hazelcast.mapreduce.impl.MapReducePortableHook.createFactory()"], ["com.hazelcast.mapreduce.KeyValueSource", "com.hazelcast.mapreduce.KeyValueSource()"], ["boolean", "com.hazelcast.mapreduce.KeyValueSource.isAllKeysSupported()"], ["<K, V> com.hazelcast.mapreduce.KeyValueSource<K, V>", "com.hazelcast.mapreduce.KeyValueSource.fromMap(com.hazelcast.core.IMap<? super K, ? extends V>)"], ["<K, V> com.hazelcast.mapreduce.KeyValueSource<K, V>", "com.hazelcast.mapreduce.KeyValueSource.fromMultiMap(com.hazelcast.core.MultiMap<? super K, ? extends V>)"], ["<V> com.hazelcast.mapreduce.KeyValueSource<java.lang.String, V>", "com.hazelcast.mapreduce.KeyValueSource.fromList(com.hazelcast.core.IList<? extends V>)"], ["<V> com.hazelcast.mapreduce.KeyValueSource<java.lang.String, V>", "com.hazelcast.mapreduce.KeyValueSource.fromSet(com.hazelcast.core.ISet<? extends V>)"], ["com.hazelcast.mapreduce.Combiner", "com.hazelcast.mapreduce.Combiner()"], ["void", "com.hazelcast.mapreduce.Combiner.beginCombine()"], ["void", "com.hazelcast.mapreduce.Combiner.reset()"], ["finalizeCombine()", "com.hazelcast.mapreduce.Combiner."], ["com.hazelcast.mapreduce.LifecycleMapperAdapter", "com.hazelcast.mapreduce.LifecycleMapperAdapter()"], ["void", "com.hazelcast.mapreduce.LifecycleMapperAdapter.initialize(com.hazelcast.mapreduce.Context<KeyOut, ValueOut>)"], ["finalized(com.hazelcast.mapreduce.Context<KeyOut,", "com.hazelcast.mapreduce.LifecycleMapperAdapter.ValueOut>)"], ["com.hazelcast.mapreduce.Reducer", "com.hazelcast.mapreduce.Reducer()"], ["void", "com.hazelcast.mapreduce.Reducer.beginReduce()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgCombiner.combine(java.math.BigInteger)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgCombiner.finalizeChunk()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgCombiner.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgCombiner.combine(java.lang.Object)"], ["java.lang.Long", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Long>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.mapreduce.Combiner<java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumCombinerFactory.getId()"], ["java.lang.Comparable", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Comparable>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$1.collate(java.lang.Iterable)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumCombiner.combine(java.math.BigInteger)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumCombiner.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumCombiner.combine(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.CountAggregation", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Long>, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Object>", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Object>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Object, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation.getReducerFactory()"], ["java.lang.Double", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Double>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$1.collate(java.lang.Iterable)"], ["java.lang.Double", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Double>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$1.collate(java.lang.Iterable)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinCombiner.combine(java.lang.Integer)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinCombiner.combine(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxReducerFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.SupplierConsumingMapper.map(Key, ValueIn, com.hazelcast.mapreduce.Context<Key, ValueOut>)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.SupplierConsumingMapper.getFactoryId()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.SupplierConsumingMapper.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.SupplierConsumingMapper.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.SupplierConsumingMapper.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.mapreduce.Reducer<com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>>", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxReducer.reduce(java.lang.Integer)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumReducer.reduce(java.lang.Integer)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Object, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountCombinerFactory.getId()"], ["com.hazelcast.mapreduce.Combiner<java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinCombinerFactory.getId()"], ["com.hazelcast.mapreduce.Reducer<java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumReducerFactory.getId()"], ["com.hazelcast.mapreduce.Combiner<java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxCombinerFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumReducerFactory.getId()"], ["com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>>, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.math.BigDecimal>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.math.BigDecimal, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.Reducer<java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumReducerFactory.getId()"], ["com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.math.BigDecimal>, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.math.BigDecimal>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation.getReducerFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$44.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$44.createNew(java.lang.Object)"], ["java.math.BigInteger", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.math.BigInteger>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.mapreduce.aggregation.impl.AcceptAllSupplier", "com.hazelcast.mapreduce.aggregation.impl.AcceptAllSupplier(com.hazelcast.mapreduce.aggregation.PropertyExtractor<ValueIn, ValueOut>)"], ["ValueOut", "com.hazelcast.mapreduce.aggregation.impl.AcceptAllSupplier.apply(java.util.Map$Entry<KeyIn, ValueIn>)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.AcceptAllSupplier.getFactoryId()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.AcceptAllSupplier.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.AcceptAllSupplier.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.AcceptAllSupplier.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.math.BigInteger>, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.math.BigInteger>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation.getReducerFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$32.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$32.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$1.collate(java.lang.Iterable)"], ["java.math.BigInteger", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.math.BigInteger>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$1.collate(java.lang.Iterable)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumReducer.reduce(java.math.BigDecimal)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinReducer.reduce(java.lang.Integer)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple", "com.hazelcast.mapreduce.aggregation.impl.AvgTuple(F, S)"], ["F", "com.hazelcast.mapreduce.aggregation.impl.AvgTuple.getFirst()"], ["S", "com.hazelcast.mapreduce.aggregation.impl.AvgTuple.getSecond()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.AvgTuple.getFactoryId()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.AvgTuple.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.AvgTuple.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.AvgTuple.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<java.lang.Integer, java.util.Set<DistinctType>>, java.util.Set<DistinctType>>", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, java.lang.Integer, DistinctType>", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, DistinctType>)"], ["com.hazelcast.mapreduce.CombinerFactory<java.lang.Integer, DistinctType, java.util.Set<DistinctType>>", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<java.lang.Integer, java.util.Set<DistinctType>, java.util.Set<DistinctType>>", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation.getReducerFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxReducerFactory.getId()"], ["com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.math.BigInteger>, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.math.BigInteger>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation.getReducerFactory()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinReducer.reduce(java.lang.Double)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinReducer.reduce(java.lang.Object)"], ["java.lang.Integer", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Integer>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Double>, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Double>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Double>, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Double>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.Combiner<java.lang.Double, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>>", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgCombinerFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$41.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$41.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxReducer.reduce(java.math.BigDecimal)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxReducer.reduce(java.lang.Object)"], ["java.math.BigDecimal", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.math.BigDecimal>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$51.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$51.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountCombiner.combine(java.lang.Object)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountCombiner."], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$6.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinReducer.reduce(java.math.BigInteger)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinReducer.reduce(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>>", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgReducerFactory.getId()"], ["com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Integer>, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Integer>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation.getReducerFactory()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgReducer.reduce(com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgReducer.finalizeReduce()"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumCombinerFactory.getId()"], ["com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Integer>, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Integer>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation.getReducerFactory()"], ["java.lang.Long", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Long>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Double>, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Double>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation.getReducerFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$31.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>>", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgReducerFactory.getId()"], ["com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>>, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Double>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Double, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>>", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>>", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation.getReducerFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$48.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$48.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>>, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Long>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Long, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>>", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>>", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation.getReducerFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinCombiner.combine(java.lang.Double)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinCombiner.combine(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Long>, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Long>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.Reducer<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinReducerFactory.getId()"], ["com.hazelcast.mapreduce.aggregation.impl.SimpleEntry", "com.hazelcast.mapreduce.aggregation.impl.SimpleEntry()"], ["K", "com.hazelcast.mapreduce.aggregation.impl.SimpleEntry.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.mapreduce.aggregation.impl.SimpleEntry.getKeyData()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.mapreduce.aggregation.impl.SimpleEntry.getValueData()"], ["V", "com.hazelcast.mapreduce.aggregation.impl.SimpleEntry.getValue()"], ["V", "com.hazelcast.mapreduce.aggregation.impl.SimpleEntry.setValue(V)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$45.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$45.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>>, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Integer>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Integer, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>>", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>>", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Comparable>, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Comparable>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.Reducer<com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgReducerFactory.getId()"], ["com.hazelcast.mapreduce.Combiner<java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinCombinerFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$39.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$39.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinCombiner.combine(java.math.BigDecimal)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinCombiner.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinCombiner.combine(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumCombiner.combine(java.lang.Long)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$35.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$35.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgCombiner.combine(java.lang.Long)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgCombiner.finalizeChunk()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgCombiner.combine(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxCombinerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxCombiner.combine(java.lang.Integer)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxCombiner.combine(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinReducer.reduce(java.lang.Comparable)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinReducer.reduce(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxCombinerFactory.getId()"], ["com.hazelcast.mapreduce.Reducer<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxReducer.reduce(java.lang.Double)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxReducer.reduce(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgReducer.reduce(com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgReducer.finalizeReduce()"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgReducer.reduce(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$23.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Integer>, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Integer>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.Reducer<java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinReducer.reduce(java.lang.Long)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinCombinerFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$53.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$53.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumCombiner.combine(java.lang.Integer)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumCombiner.combine(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinCombinerFactory.getId()"], ["java.math.BigInteger", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$1.collate(java.lang.Iterable)"], ["java.lang.Double", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$1.collate(java.lang.Iterable)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxReducer.reduce(java.math.BigInteger)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxReducer.reduce(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier", "com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier(com.hazelcast.mapreduce.KeyPredicate<KeyIn>)"], ["com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier", "com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier(com.hazelcast.mapreduce.KeyPredicate<KeyIn>, com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>)"], ["ValueOut", "com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier.apply(java.util.Map$Entry<KeyIn, ValueIn>)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier.getFactoryId()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.KeyPredicateSupplier.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.mapreduce.Reducer<java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$IntegerMinReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinCombiner.combine(java.lang.Long)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation$LongMinCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$52.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$52.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$26.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumCombiner.combine(java.lang.Double)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumCombiner.combine(java.lang.Object)"], ["java.math.BigDecimal", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.math.BigDecimal>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$1.collate(java.lang.Iterable)"], ["java.lang.Integer", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Integer>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.mapreduce.aggregation.impl.SetAdapter", "com.hazelcast.mapreduce.aggregation.impl.SetAdapter()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.SetAdapter.getFactoryId()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.SetAdapter.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.SetAdapter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.SetAdapter.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Integer", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Integer>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.IntegerMinAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$42.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$42.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxCombinerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountReducer.reduce(java.lang.Long)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$CountReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumCombinerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumReducer.reduce(java.math.BigInteger)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation$BigIntegerSumReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Integer, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>>", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgCombinerFactory.getId()"], ["com.hazelcast.mapreduce.Combiner<java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinCombinerFactory.getId()"], ["com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier", "com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier(com.hazelcast.query.Predicate<KeyIn, ValueIn>)"], ["com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier", "com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier(com.hazelcast.query.Predicate<KeyIn, ValueIn>, com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>)"], ["ValueOut", "com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier.apply(java.util.Map$Entry<KeyIn, ValueIn>)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier.getFactoryId()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.PredicateSupplier.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$54.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$54.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.IntegerMaxAggregation$IntegerMaxReducerFactory.getId()"], ["com.hazelcast.mapreduce.Reducer<java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DoubleMinAggregation$DoubleMinReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesReducer.reduce(java.util.Set<DistinctType>)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesReducer.reduce(java.lang.Object)"], ["java.math.BigInteger", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.math.BigInteger>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$1.collate(java.lang.Iterable)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgCombiner.combine(java.math.BigDecimal)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgCombiner.finalizeChunk()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgCombiner.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgCombiner.combine(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValueMapper.map(Key, Value, com.hazelcast.mapreduce.Context<java.lang.Integer, DistinctType>)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValueMapper.getFactoryId()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValueMapper.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValueMapper.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValueMapper.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.mapreduce.Reducer<java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxReducerFactory.getId()"], ["com.hazelcast.mapreduce.Combiner<java.lang.Long, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>>", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$LongAvgCombinerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxCombiner.combine(java.lang.Double)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$49.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$49.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgReducer.reduce(com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgReducer.finalizeReduce()"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgReducer.reduce(java.lang.Object)"], ["java.lang.Integer", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.mapreduce.Combiner<java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumCombinerFactory.getId()"], ["java.lang.Long", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Long>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.CountAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Comparable>, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Comparable>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation.getReducerFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$2.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgReducer.reduce(com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgReducer.finalizeReduce()"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgReducer.reduce(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DoubleMaxAggregation$DoubleMaxCombinerFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$13.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxCombiner.combine(java.math.BigDecimal)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxCombiner.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxCombiner.combine(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation$BigDecimalMaxReducerFactory.getId()"], ["java.math.BigDecimal", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.math.BigDecimal>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$1.collate(java.lang.Iterable)"], ["java.lang.Double", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Double>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$38.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$38.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<DistinctType, java.util.Set<DistinctType>>", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesCombinerFactory.newCombiner(java.lang.Integer)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesCombinerFactory.getId()"], ["com.hazelcast.mapreduce.Combiner", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesCombinerFactory.newCombiner(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$24.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgReducer.reduce(com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgReducer.finalizeReduce()"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgReducer.reduce(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.math.BigDecimal>, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.math.BigDecimal>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMaxAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.math.BigInteger>, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.math.BigInteger>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerSumAggregation.getReducerFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.math.BigInteger, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation$BigIntegerAvgCombinerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgCombiner.combine(java.lang.Double)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgCombiner.finalizeChunk()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleAvgAggregation$DoubleAvgCombiner.combine(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxCombiner.combine(java.lang.Long)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$47.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$47.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.math.BigDecimal, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$BigDecimalAvgCombinerFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$34.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$34.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$16.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxCombiner.combine(java.lang.Comparable)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$43.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$43.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$36.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$36.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Long>, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Long>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation.getReducerFactory()"], ["java.math.BigDecimal", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigDecimal>>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalAvgAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.mapreduce.Reducer<java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumReducerFactory.newReducer(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.IntegerSumAggregation$IntegerSumReducerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumReducer.reduce(java.lang.Double)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.DoubleSumAggregation$DoubleSumReducer.reduce(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgCombiner.combine(java.lang.Integer)"], ["com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgCombiner.finalizeChunk()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.IntegerAvgAggregation$IntegerAvgCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$33.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$33.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$19.createNew(java.lang.Object)"], ["java.lang.Long", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.lang.Long>>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.LongAvgAggregation$1.collate(java.lang.Iterable)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxReducer.reduce(java.lang.Comparable)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.ComparableMaxAggregation$ComparableMaxReducer.reduce(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$30.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$11.createNew(java.lang.Object)"], ["java.lang.Comparable", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Comparable>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$1.collate(java.lang.Iterable)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$40.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$40.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumCombinerFactory.getId()"], ["com.hazelcast.mapreduce.Combiner<java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxCombinerFactory.getId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinCombiner.combine(java.lang.Comparable)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinCombiner."], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.ComparableMinAggregation$ComparableMinCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.Reducer<java.util.Set<DistinctType>, java.util.Set<DistinctType>>", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesReducerFactory.newReducer(java.lang.Integer)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesReducerFactory.getId()"], ["com.hazelcast.mapreduce.Reducer", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesReducerFactory.newReducer(java.lang.Object)"], ["com.hazelcast.mapreduce.Combiner<java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinCombinerFactory.newCombiner(Key)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinCombinerFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$46.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$46.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumCombiner.combine(java.math.BigDecimal)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumCombiner.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation$BigDecimalSumCombiner.combine(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinCombiner.combine(java.math.BigInteger)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinCombiner.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMinAggregation$BigIntegerMinCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$29.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$50.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$50.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesCombiner.combine(DistinctType)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.DistinctValuesAggregation$DistinctValuesCombiner."], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$37.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$37.createNew(java.lang.Object)"], ["java.lang.Long", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$1.collate(java.lang.Iterable<java.util.Map$Entry<Key, java.lang.Long>>)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$1.collate(java.lang.Iterable)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumReducer.reduce(java.lang.Long)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongSumAggregation$LongSumReducer.reduce(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$55.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$55.createNew(java.lang.Object)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxReducer.reduce(java.lang.Long)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.LongMaxAggregation$LongMaxReducer.reduce(java.lang.Object)"], ["int", "com.hazelcast.mapreduce.aggregation.impl.AbstractAggregationReducerFactory.getFactoryId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.AbstractAggregationReducerFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.AbstractAggregationReducerFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.math.BigDecimal>, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.math.BigDecimal>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalSumAggregation.getReducerFactory()"], ["com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>>, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.math.BigInteger>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.math.BigInteger, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>, com.hazelcast.mapreduce.aggregation.impl.AvgTuple<java.lang.Long, java.math.BigInteger>>", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerAvgAggregation.getReducerFactory()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxCombiner.combine(java.math.BigInteger)"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxCombiner.reset()"], ["finalizeChunk()", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxCombiner."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigIntegerMaxAggregation$BigIntegerMaxCombiner.combine(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry<Key, java.lang.Long>, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation.getCollator()"], ["com.hazelcast.mapreduce.Mapper<Key, Value, Key, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, Value, java.lang.Long>)"], ["com.hazelcast.mapreduce.CombinerFactory<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.impl.LongMinAggregation.getReducerFactory()"], ["int", "com.hazelcast.mapreduce.aggregation.impl.AbstractAggregationCombinerFactory.getFactoryId()"], ["void", "com.hazelcast.mapreduce.aggregation.impl.AbstractAggregationCombinerFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.AbstractAggregationCombinerFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinReducer.reduce(java.math.BigDecimal)"], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinReducer."], ["finalizeReduce()", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinReducer."], ["void", "com.hazelcast.mapreduce.aggregation.impl.BigDecimalMinAggregation$BigDecimalMinReducer.reduce(java.lang.Object)"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, Value, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.Aggregations.count()"], ["<Key, Value, DistinctType> com.hazelcast.mapreduce.aggregation.Aggregation<Key, Value, java.util.Set<DistinctType>>", "com.hazelcast.mapreduce.aggregation.Aggregations.distinctValues()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, Value, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.Aggregations.integerAvg()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.Aggregations.integerSum()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.Aggregations.integerMin()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Integer, java.lang.Integer>", "com.hazelcast.mapreduce.aggregation.Aggregations.integerMax()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.Aggregations.longAvg()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.Aggregations.longSum()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.Aggregations.longMin()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Long, java.lang.Long>", "com.hazelcast.mapreduce.aggregation.Aggregations.longMax()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.Aggregations.doubleAvg()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.Aggregations.doubleSum()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.Aggregations.doubleMin()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Double, java.lang.Double>", "com.hazelcast.mapreduce.aggregation.Aggregations.doubleMax()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.Aggregations.bigDecimalAvg()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.Aggregations.bigDecimalSum()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.Aggregations.bigDecimalMin()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.math.BigDecimal, java.math.BigDecimal>", "com.hazelcast.mapreduce.aggregation.Aggregations.bigDecimalMax()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.Aggregations.bigIntegerAvg()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.Aggregations.bigIntegerSum()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.Aggregations.bigIntegerMin()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.math.BigInteger, java.math.BigInteger>", "com.hazelcast.mapreduce.aggregation.Aggregations.bigIntegerMax()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.Aggregations.comparableMin()"], ["<Key, Value> com.hazelcast.mapreduce.aggregation.Aggregation<Key, java.lang.Comparable, java.lang.Comparable>", "com.hazelcast.mapreduce.aggregation.Aggregations.comparableMax()"], ["com.hazelcast.mapreduce.Collator<java.util.Map$Entry, Result>", "com.hazelcast.mapreduce.aggregation.Aggregations$AggregationAdapter.getCollator()"], ["com.hazelcast.mapreduce.Mapper", "com.hazelcast.mapreduce.aggregation.Aggregations$AggregationAdapter.getMapper(com.hazelcast.mapreduce.aggregation.Supplier<Key, ?, Supplied>)"], ["com.hazelcast.mapreduce.CombinerFactory", "com.hazelcast.mapreduce.aggregation.Aggregations$AggregationAdapter.getCombinerFactory()"], ["com.hazelcast.mapreduce.ReducerFactory", "com.hazelcast.mapreduce.aggregation.Aggregations$AggregationAdapter.getReducerFactory()"], ["com.hazelcast.mapreduce.aggregation.Supplier", "com.hazelcast.mapreduce.aggregation.Supplier()"], ["<KeyIn, ValueIn, ValueOut> com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>", "com.hazelcast.mapreduce.aggregation.Supplier.all()"], ["<KeyIn, ValueIn, ValueOut> com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>", "com.hazelcast.mapreduce.aggregation.Supplier.all(com.hazelcast.mapreduce.aggregation.PropertyExtractor<ValueIn, ValueOut>)"], ["<KeyIn, ValueIn, ValueOut> com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>", "com.hazelcast.mapreduce.aggregation.Supplier.fromPredicate(com.hazelcast.query.Predicate<KeyIn, ValueIn>)"], ["<KeyIn, ValueIn, ValueOut> com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>", "com.hazelcast.mapreduce.aggregation.Supplier.fromPredicate(com.hazelcast.query.Predicate<KeyIn, ValueIn>, com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>)"], ["<KeyIn, ValueIn, ValueOut> com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>", "com.hazelcast.mapreduce.aggregation.Supplier.fromKeyPredicate(com.hazelcast.mapreduce.KeyPredicate<KeyIn>)"], ["<KeyIn, ValueIn, ValueOut> com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>", "com.hazelcast.mapreduce.aggregation.Supplier.fromKeyPredicate(com.hazelcast.mapreduce.KeyPredicate<KeyIn>, com.hazelcast.mapreduce.aggregation.Supplier<KeyIn, ValueIn, ValueOut>)"], ["com.hazelcast.mapreduce.JobPartitionState$State[]", "com.hazelcast.mapreduce.JobPartitionState$State.values()"], ["com.hazelcast.mapreduce.JobPartitionState$State", "com.hazelcast.mapreduce.JobPartitionState$State.valueOf(java.lang.String)"], ["com.hazelcast.mapreduce.JobPartitionState$State", "com.hazelcast.mapreduce.JobPartitionState$State.byOrdinal(int)"], ["com.hazelcast.mapreduce.TopologyChangedException", "com.hazelcast.mapreduce.TopologyChangedException()"], ["com.hazelcast.mapreduce.TopologyChangedException", "com.hazelcast.mapreduce.TopologyChangedException(java.lang.String)"], ["com.hazelcast.mapreduce.RemoteMapReduceException", "com.hazelcast.mapreduce.RemoteMapReduceException(java.lang.String, java.util.List<java.lang.Exception>)"], ["com.hazelcast.mapreduce.TopologyChangedStrategy[]", "com.hazelcast.mapreduce.TopologyChangedStrategy.values()"], ["com.hazelcast.mapreduce.TopologyChangedStrategy", "com.hazelcast.mapreduce.TopologyChangedStrategy.valueOf(java.lang.String)"], ["com.hazelcast.replicatedmap.impl.ReplicatedMapEvictionProcessor", "com.hazelcast.replicatedmap.impl.ReplicatedMapEvictionProcessor(com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore, com.hazelcast.spi.NodeEngine, int)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapEvictionProcessor.process(com.hazelcast.util.scheduler.EntryTaskScheduler<java.lang.Object, java.lang.Object>, java.util.Collection<com.hazelcast.util.scheduler.ScheduledEntry<java.lang.Object, java.lang.Object>>)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.ReplicatedMapService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.ReplicatedMapService$1.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore", "com.hazelcast.replicatedmap.impl.PartitionContainer$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.PartitionContainer$1.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.ReplicatedMapService", "com.hazelcast.replicatedmap.impl.ReplicatedMapService(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.reset()"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.shutdown(boolean)"], ["com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getLocalMapStatsImpl(java.lang.String)"], ["com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.createReplicatedMapStats(java.lang.String)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getReplicatedMapConfig(java.lang.String)"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getReplicatedRecordStore(java.lang.String, boolean, java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getReplicatedRecordStore(java.lang.String, boolean, int)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.initializeListeners(java.lang.String)"], ["com.hazelcast.replicatedmap.impl.PartitionContainer", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getPartitionContainer(int)"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getNodeEngine()"], ["com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getEventPublishingService()"], ["com.hazelcast.spi.Operation", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["java.lang.Runnable", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.prepareMergeRunnable()"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalReplicatedMapStats>", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getStats()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getQuorumName(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.ensureQuorumPresent(java.lang.String, com.hazelcast.quorum.QuorumType)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.triggerAntiEntropy()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.ReplicatedMapService.getMergePolicy(java.lang.String)"], ["com.hazelcast.replicatedmap.impl.PartitionContainer", "com.hazelcast.replicatedmap.impl.PartitionContainer(com.hazelcast.replicatedmap.impl.ReplicatedMapService, int)"], ["boolean", "com.hazelcast.replicatedmap.impl.PartitionContainer.isEmpty()"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore>", "com.hazelcast.replicatedmap.impl.PartitionContainer.getStores()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore", "com.hazelcast.replicatedmap.impl.PartitionContainer.getOrCreateRecordStore(java.lang.String)"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore", "com.hazelcast.replicatedmap.impl.PartitionContainer.getRecordStore(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.PartitionContainer.shutdown()"], ["void", "com.hazelcast.replicatedmap.impl.PartitionContainer.destroy(java.lang.String)"], ["com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService", "com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService(com.hazelcast.replicatedmap.impl.ReplicatedMapService)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService.addEventListener(java.util.EventListener, com.hazelcast.spi.EventFilter, java.lang.String)"], ["boolean", "com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService.removeEventListener(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService.fireMapClearedEvent(int, java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService.fireEntryListenerEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, com.hazelcast.nio.Address)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService.fireEntryListenerEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.core.EntryEventType, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.replicatedmap.impl.client.ReplicatedMapValueCollection", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapValueCollection(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapValueCollection.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapValueCollection.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapValueCollection.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapValueCollection.getClassId()"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1.create(int)"], ["com.hazelcast.replicatedmap.impl.client.ReplicatedMapKeys", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapKeys()"], ["com.hazelcast.replicatedmap.impl.client.ReplicatedMapKeys", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapKeys(java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapKeys.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapKeys.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapKeys.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapKeys.getClassId()"], ["com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook()"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook.getFactoryId()"], ["com.hazelcast.nio.serialization.PortableFactory", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook.createFactory()"], ["com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries()"], ["com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries(int)"], ["com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries(java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.add(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["java.util.List<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.entries()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.getKey(int)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.getValue(int)"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.size()"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.getClassId()"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook$1$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.getValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.getOldValue()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.getEventType()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.getUuid()"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.getNumberOfAffectedEntries()"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableEntryEvent.getClassId()"], ["com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl", "com.hazelcast.replicatedmap.impl.ReplicatedMapService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.ReplicatedMapService$2.createNew(java.lang.Object)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.initialize()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.getName()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.getPartitionKey()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.getServiceName()"], ["int", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.size()"], ["boolean", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.isEmpty()"], ["boolean", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.containsValue(java.lang.Object)"], ["V", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.get(java.lang.Object)"], ["V", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.put(K, V)"], ["V", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.put(K, V, long, java.util.concurrent.TimeUnit)"], ["V", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.remove(java.lang.Object)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.clear()"], ["boolean", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.removeEntryListener(java.lang.String)"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.addEntryListener(com.hazelcast.core.EntryListener<K, V>)"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.addEntryListener(com.hazelcast.core.EntryListener<K, V>, K)"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.addEntryListener(com.hazelcast.core.EntryListener<K, V>, com.hazelcast.query.Predicate<K, V>)"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.addEntryListener(com.hazelcast.core.EntryListener<K, V>, com.hazelcast.query.Predicate<K, V>, K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.entrySet()"], ["int", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.hashCode()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.toString()"], ["com.hazelcast.monitor.LocalReplicatedMapStats", "com.hazelcast.replicatedmap.impl.ReplicatedMapProxy.getReplicatedMapStats()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.KeySetIteratorFactory$KeySetIterator.hasNext()"], ["K", "com.hazelcast.replicatedmap.impl.record.KeySetIteratorFactory$KeySetIterator.next()"], ["void", "com.hazelcast.replicatedmap.impl.record.KeySetIteratorFactory$KeySetIterator.remove()"], ["com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage()"], ["long", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.getVersion()"], ["void", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.syncVersion(long)"], ["void", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.setVersion(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.incrementVersion()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecord<K, V>", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.get(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecord<K, V>", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.put(K, com.hazelcast.replicatedmap.impl.record.ReplicatedRecord<K, V>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.remove(K, com.hazelcast.replicatedmap.impl.record.ReplicatedRecord<K, V>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.containsKey(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, com.hazelcast.replicatedmap.impl.record.ReplicatedRecord<K, V>>>", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.entrySet()"], ["java.util.Collection<com.hazelcast.replicatedmap.impl.record.ReplicatedRecord<K, V>>", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.values()"], ["void", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.clear()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.isEmpty()"], ["int", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.size()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage.isStale(long)"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedEntryEventFilter", "com.hazelcast.replicatedmap.impl.record.ReplicatedEntryEventFilter(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.ReplicatedEntryEventFilter.eval(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecord", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord(K, V, long)"], ["K", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getKey()"], ["K", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getKeyInternal()"], ["V", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getValue()"], ["V", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getValueInternal()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.isTombstone()"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getTtlMillis()"], ["V", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.setValue(V, long)"], ["V", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.setValueInternal(V, long)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getUpdateTime()"], ["void", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.setUpdateTime(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getHits()"], ["void", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.setHits(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getLastAccessTime()"], ["void", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.setLastAccessTime(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.getCreationTime()"], ["void", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.setCreationTime(long)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.equals(java.lang.Object)"], ["int", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.hashCode()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.record.ReplicatedRecord.toString()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView()"], ["K", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getKey()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView<K, V>", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.setKey(K)"], ["V", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getValue()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView<K, V>", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.setValue(V)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getCost()"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getCreationTime()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView<K, V>", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.setCreationTime(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getExpirationTime()"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getHits()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView<K, V>", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.setHits(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getLastAccessTime()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView<K, V>", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.setLastAccessTime(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getLastStoredTime()"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getLastUpdateTime()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView<K, V>", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.setLastUpdateTime(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getVersion()"], ["long", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getTtl()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView<K, V>", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.setTtl(long)"], ["void", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView.toString()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore$RecordIterator.hasNext()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecord<K, V>", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore$RecordIterator.next()"], ["void", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore$RecordIterator.remove()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore$RecordIterator.next()"], ["com.hazelcast.replicatedmap.impl.record.DataReplicatedRecordStore", "com.hazelcast.replicatedmap.impl.record.DataReplicatedRecordStore(java.lang.String, com.hazelcast.replicatedmap.impl.ReplicatedMapService, int)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.DataReplicatedRecordStore.unmarshall(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.DataReplicatedRecordStore.marshall(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore(java.lang.String, com.hazelcast.replicatedmap.impl.ReplicatedMapService, int)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.removeWithVersion(java.lang.Object, long)"], ["void", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.evict(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.get(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.put(java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit, boolean)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.putWithVersion(java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit, boolean, long)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.containsValue(java.lang.Object)"], ["java.util.Set", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.keySet(boolean)"], ["java.util.Collection", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.values(boolean)"], ["java.util.Collection", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.values(java.util.Comparator)"], ["java.util.Set", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.entrySet(boolean)"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedRecord", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.getReplicatedRecord(java.lang.Object)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.isEmpty()"], ["int", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.size()"], ["void", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.clear()"], ["void", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.clearWithVersion(long)"], ["void", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.reset()"], ["java.util.Iterator", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.recordIterator()"], ["void", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.putRecords(java.util.Collection<com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo>, long)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.merge(com.hazelcast.spi.merge.SplitBrainMergeTypes$ReplicatedMapMergeTypes, com.hazelcast.spi.merge.SplitBrainMergePolicy<java.lang.Object, com.hazelcast.spi.merge.SplitBrainMergeTypes$ReplicatedMapMergeTypes>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore.merge(java.lang.Object, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView, com.hazelcast.replicatedmap.merge.ReplicatedMapMergePolicy)"], ["com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo()"], ["com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getKey()"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.setKey(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getValue()"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.setValue(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getTtl()"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.setTtl(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getHits()"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.setHits(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getLastAccessTime()"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.setLastAccessTime(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getLastUpdateTime()"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.setLastUpdateTime(long)"], ["long", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getCreationTime()"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.setCreationTime(long)"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.toString()"], ["int", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo.getId()"], ["com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage<K, V>", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.getStorage()"], ["java.util.concurrent.atomic.AtomicReference<com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage<K, V>>", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.getStorageRef()"], ["com.hazelcast.util.scheduler.EntryTaskScheduler", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.getTtlEvictionScheduler()"], ["int", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.getPartitionId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.getName()"], ["com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.getStats()"], ["void", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.destroy()"], ["long", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.getVersion()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.isStale(long)"], ["com.hazelcast.util.scheduler.ScheduledEntry<java.lang.Object, java.lang.Object>", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.cancelTtlEntry(java.lang.Object)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.scheduleTtlEntry(long, java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.isLoaded()"], ["void", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.setLoaded(boolean)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.equals(java.lang.Object)"], ["int", "com.hazelcast.replicatedmap.impl.record.AbstractBaseReplicatedRecordStore.hashCode()"], ["com.hazelcast.replicatedmap.impl.record.ObjectReplicatedRecordStorage", "com.hazelcast.replicatedmap.impl.record.ObjectReplicatedRecordStorage(java.lang.String, com.hazelcast.replicatedmap.impl.ReplicatedMapService, int)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.ObjectReplicatedRecordStorage.unmarshall(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.ObjectReplicatedRecordStorage.marshall(java.lang.Object)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.ValuesIteratorFactory$ValuesIterator.hasNext()"], ["V", "com.hazelcast.replicatedmap.impl.record.ValuesIteratorFactory$ValuesIterator.next()"], ["void", "com.hazelcast.replicatedmap.impl.record.ValuesIteratorFactory$ValuesIterator.remove()"], ["com.hazelcast.replicatedmap.impl.record.LazySet", "com.hazelcast.replicatedmap.impl.record.LazySet(com.hazelcast.replicatedmap.impl.record.LazySet$IteratorFactory<K, V, R>, com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage<K, V>)"], ["int", "com.hazelcast.replicatedmap.impl.record.LazySet.size()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazySet.isEmpty()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazySet.contains(java.lang.Object)"], ["java.lang.Object[]", "com.hazelcast.replicatedmap.impl.record.LazySet.toArray()"], ["<T> T[]", "com.hazelcast.replicatedmap.impl.record.LazySet.toArray(T[])"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazySet.add(R)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazySet.remove(java.lang.Object)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazySet.containsAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazySet.addAll(java.util.Collection<? extends R>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazySet.retainAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazySet.removeAll(java.util.Collection<?>)"], ["void", "com.hazelcast.replicatedmap.impl.record.LazySet.clear()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.hazelcast.replicatedmap.impl.record.EntrySetIteratorFactory.create(java.util.Iterator<java.util.Map$Entry<K, com.hazelcast.replicatedmap.impl.record.ReplicatedRecord<K, V>>>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.EntrySetIteratorFactory$EntrySetIterator.hasNext()"], ["java.util.Map$Entry<K, V>", "com.hazelcast.replicatedmap.impl.record.EntrySetIteratorFactory$EntrySetIterator.next()"], ["void", "com.hazelcast.replicatedmap.impl.record.EntrySetIteratorFactory$EntrySetIterator.remove()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.record.EntrySetIteratorFactory$EntrySetIterator.next()"], ["com.hazelcast.replicatedmap.impl.record.ReplicatedQueryEventFilter", "com.hazelcast.replicatedmap.impl.record.ReplicatedQueryEventFilter(com.hazelcast.nio.serialization.Data, com.hazelcast.query.Predicate)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.ReplicatedQueryEventFilter.eval(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.record.LazyCollection", "com.hazelcast.replicatedmap.impl.record.LazyCollection(com.hazelcast.replicatedmap.impl.record.LazySet$IteratorFactory<K, V, V>, com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage<K, V>)"], ["int", "com.hazelcast.replicatedmap.impl.record.LazyCollection.size()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazyCollection.isEmpty()"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazyCollection.contains(java.lang.Object)"], ["java.lang.Object[]", "com.hazelcast.replicatedmap.impl.record.LazyCollection.toArray()"], ["<T> T[]", "com.hazelcast.replicatedmap.impl.record.LazyCollection.toArray(T[])"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazyCollection.add(V)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazyCollection.remove(java.lang.Object)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazyCollection.containsAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazyCollection.addAll(java.util.Collection<? extends V>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazyCollection.removeAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.replicatedmap.impl.record.LazyCollection.retainAll(java.util.Collection<?>)"], ["void", "com.hazelcast.replicatedmap.impl.record.LazyCollection.clear()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.replicatedmap.impl.ReplicatedMapSplitBrainHandlerService.getReplicatedMapConfig(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.EntrySetOperation", "com.hazelcast.replicatedmap.impl.operation.EntrySetOperation()"], ["com.hazelcast.replicatedmap.impl.operation.EntrySetOperation", "com.hazelcast.replicatedmap.impl.operation.EntrySetOperation(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.operation.EntrySetOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.EntrySetOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.EntrySetOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.EntrySetOperation.getName()"], ["com.hazelcast.replicatedmap.impl.operation.EvictionOperation", "com.hazelcast.replicatedmap.impl.operation.EvictionOperation()"], ["com.hazelcast.replicatedmap.impl.operation.EvictionOperation", "com.hazelcast.replicatedmap.impl.operation.EvictionOperation(com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore, java.util.Collection<com.hazelcast.util.scheduler.ScheduledEntry<java.lang.Object, java.lang.Object>>)"], ["void", "com.hazelcast.replicatedmap.impl.operation.EvictionOperation.run()"], ["boolean", "com.hazelcast.replicatedmap.impl.operation.EvictionOperation.validatesTarget()"], ["int", "com.hazelcast.replicatedmap.impl.operation.EvictionOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.EvictionOperation.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.PutOperation", "com.hazelcast.replicatedmap.impl.operation.PutOperation()"], ["com.hazelcast.replicatedmap.impl.operation.PutOperation", "com.hazelcast.replicatedmap.impl.operation.PutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.replicatedmap.impl.operation.PutOperation", "com.hazelcast.replicatedmap.impl.operation.PutOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.replicatedmap.impl.operation.PutOperation.run()"], ["void", "com.hazelcast.replicatedmap.impl.operation.PutOperation.afterRun()"], ["int", "com.hazelcast.replicatedmap.impl.operation.PutOperation.getId()"], ["com.hazelcast.replicatedmap.impl.operation.VersionResponsePair", "com.hazelcast.replicatedmap.impl.operation.VersionResponsePair()"], ["com.hazelcast.replicatedmap.impl.operation.VersionResponsePair", "com.hazelcast.replicatedmap.impl.operation.VersionResponsePair(java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.VersionResponsePair.getResponse()"], ["long", "com.hazelcast.replicatedmap.impl.operation.VersionResponsePair.getVersion()"], ["void", "com.hazelcast.replicatedmap.impl.operation.VersionResponsePair.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.impl.operation.VersionResponsePair.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.replicatedmap.impl.operation.VersionResponsePair.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.operation.VersionResponsePair.getId()"], ["com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation", "com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation()"], ["com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation", "com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation.getName()"], ["com.hazelcast.replicatedmap.impl.operation.AbstractSerializableOperation", "com.hazelcast.replicatedmap.impl.operation.AbstractSerializableOperation()"], ["int", "com.hazelcast.replicatedmap.impl.operation.AbstractSerializableOperation.getFactoryId()"], ["com.hazelcast.replicatedmap.impl.operation.PutAllOperation", "com.hazelcast.replicatedmap.impl.operation.PutAllOperation()"], ["com.hazelcast.replicatedmap.impl.operation.PutAllOperation", "com.hazelcast.replicatedmap.impl.operation.PutAllOperation(java.lang.String, com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries)"], ["void", "com.hazelcast.replicatedmap.impl.operation.PutAllOperation.run()"], ["int", "com.hazelcast.replicatedmap.impl.operation.PutAllOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.PutAllOperation.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory", "com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory()"], ["com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory", "com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory(java.lang.String, com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries)"], ["com.hazelcast.spi.Operation", "com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory.createOperation()"], ["void", "com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.IsEmptyOperation", "com.hazelcast.replicatedmap.impl.operation.IsEmptyOperation()"], ["com.hazelcast.replicatedmap.impl.operation.IsEmptyOperation", "com.hazelcast.replicatedmap.impl.operation.IsEmptyOperation(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.operation.IsEmptyOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.IsEmptyOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.IsEmptyOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.IsEmptyOperation.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.ClearOperation", "com.hazelcast.replicatedmap.impl.operation.ClearOperation()"], ["com.hazelcast.replicatedmap.impl.operation.ClearOperation", "com.hazelcast.replicatedmap.impl.operation.ClearOperation(java.lang.String, boolean)"], ["com.hazelcast.replicatedmap.impl.operation.ClearOperation", "com.hazelcast.replicatedmap.impl.operation.ClearOperation(java.lang.String, boolean, long)"], ["void", "com.hazelcast.replicatedmap.impl.operation.ClearOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ClearOperation.getResponse()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.ClearOperation.getServiceName()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ClearOperation.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ClearOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.ClearOperation.getName()"], ["com.hazelcast.replicatedmap.impl.operation.MergeOperation", "com.hazelcast.replicatedmap.impl.operation.MergeOperation()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.MergeOperation.getName()"], ["void", "com.hazelcast.replicatedmap.impl.operation.MergeOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.MergeOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.MergeOperation.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.AbstractNamedSerializableOperation", "com.hazelcast.replicatedmap.impl.operation.AbstractNamedSerializableOperation()"], ["com.hazelcast.replicatedmap.impl.operation.LegacyMergeOperation", "com.hazelcast.replicatedmap.impl.operation.LegacyMergeOperation()"], ["com.hazelcast.replicatedmap.impl.operation.LegacyMergeOperation", "com.hazelcast.replicatedmap.impl.operation.LegacyMergeOperation(java.lang.String, java.lang.Object, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView, com.hazelcast.replicatedmap.merge.ReplicatedMapMergePolicy)"], ["void", "com.hazelcast.replicatedmap.impl.operation.LegacyMergeOperation.run()"], ["int", "com.hazelcast.replicatedmap.impl.operation.LegacyMergeOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.LegacyMergeOperation.getName()"], ["com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory", "com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory()"], ["com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory", "com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory.createOperation()"], ["void", "com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ClearOperationFactory.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$29.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.ContainsValueOperation", "com.hazelcast.replicatedmap.impl.operation.ContainsValueOperation()"], ["com.hazelcast.replicatedmap.impl.operation.ContainsValueOperation", "com.hazelcast.replicatedmap.impl.operation.ContainsValueOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.replicatedmap.impl.operation.ContainsValueOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ContainsValueOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ContainsValueOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.ContainsValueOperation.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.RemoveOperation", "com.hazelcast.replicatedmap.impl.operation.RemoveOperation()"], ["com.hazelcast.replicatedmap.impl.operation.RemoveOperation", "com.hazelcast.replicatedmap.impl.operation.RemoveOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.replicatedmap.impl.operation.RemoveOperation.run()"], ["void", "com.hazelcast.replicatedmap.impl.operation.RemoveOperation.afterRun()"], ["int", "com.hazelcast.replicatedmap.impl.operation.RemoveOperation.getId()"], ["com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook.createFactory()"], ["com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateToCallerOperation", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateToCallerOperation()"], ["com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateToCallerOperation", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateToCallerOperation(java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.replicatedmap.impl.operation.VersionResponsePair, long, boolean)"], ["void", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateToCallerOperation.run()"], ["void", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateToCallerOperation.afterRun()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateToCallerOperation.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$23.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory", "com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory()"], ["com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory", "com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory(java.lang.String, int[], java.util.List<com.hazelcast.spi.merge.SplitBrainMergeTypes$ReplicatedMapMergeTypes>[], com.hazelcast.spi.merge.SplitBrainMergePolicy<java.lang.Object, com.hazelcast.spi.merge.SplitBrainMergeTypes$ReplicatedMapMergeTypes>)"], ["com.hazelcast.spi.Operation", "com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory.createPartitionOperation(int)"], ["void", "com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.impl.operation.MergeOperationFactory.getId()"], ["com.hazelcast.replicatedmap.impl.operation.SizeOperation", "com.hazelcast.replicatedmap.impl.operation.SizeOperation()"], ["com.hazelcast.replicatedmap.impl.operation.SizeOperation", "com.hazelcast.replicatedmap.impl.operation.SizeOperation(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.operation.SizeOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.SizeOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.SizeOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.SizeOperation.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.AbstractReplicatedMapOperation", "com.hazelcast.replicatedmap.impl.operation.AbstractReplicatedMapOperation()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.AbstractReplicatedMapOperation.getName()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.AbstractReplicatedMapOperation.getResponse()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.CheckReplicaVersionOperation", "com.hazelcast.replicatedmap.impl.operation.CheckReplicaVersionOperation()"], ["com.hazelcast.replicatedmap.impl.operation.CheckReplicaVersionOperation", "com.hazelcast.replicatedmap.impl.operation.CheckReplicaVersionOperation(com.hazelcast.replicatedmap.impl.PartitionContainer)"], ["void", "com.hazelcast.replicatedmap.impl.operation.CheckReplicaVersionOperation.run()"], ["int", "com.hazelcast.replicatedmap.impl.operation.CheckReplicaVersionOperation.getId()"], ["com.hazelcast.replicatedmap.impl.operation.KeySetOperation", "com.hazelcast.replicatedmap.impl.operation.KeySetOperation()"], ["com.hazelcast.replicatedmap.impl.operation.KeySetOperation", "com.hazelcast.replicatedmap.impl.operation.KeySetOperation(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.operation.KeySetOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.KeySetOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.KeySetOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.KeySetOperation.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$26.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$30.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.GetOperation", "com.hazelcast.replicatedmap.impl.operation.GetOperation()"], ["com.hazelcast.replicatedmap.impl.operation.GetOperation", "com.hazelcast.replicatedmap.impl.operation.GetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.replicatedmap.impl.operation.GetOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.GetOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.GetOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.GetOperation.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.SyncReplicatedMapDataOperation", "com.hazelcast.replicatedmap.impl.operation.SyncReplicatedMapDataOperation()"], ["com.hazelcast.replicatedmap.impl.operation.SyncReplicatedMapDataOperation", "com.hazelcast.replicatedmap.impl.operation.SyncReplicatedMapDataOperation(java.lang.String, java.util.Set<com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo>, long)"], ["void", "com.hazelcast.replicatedmap.impl.operation.SyncReplicatedMapDataOperation.run()"], ["int", "com.hazelcast.replicatedmap.impl.operation.SyncReplicatedMapDataOperation.getId()"], ["com.hazelcast.replicatedmap.impl.operation.RequestMapDataOperation", "com.hazelcast.replicatedmap.impl.operation.RequestMapDataOperation()"], ["com.hazelcast.replicatedmap.impl.operation.RequestMapDataOperation", "com.hazelcast.replicatedmap.impl.operation.RequestMapDataOperation(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.operation.RequestMapDataOperation.run()"], ["int", "com.hazelcast.replicatedmap.impl.operation.RequestMapDataOperation.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$31.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.ReplicationOperation", "com.hazelcast.replicatedmap.impl.operation.ReplicationOperation()"], ["com.hazelcast.replicatedmap.impl.operation.ReplicationOperation", "com.hazelcast.replicatedmap.impl.operation.ReplicationOperation(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.replicatedmap.impl.PartitionContainer, int)"], ["void", "com.hazelcast.replicatedmap.impl.operation.ReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.ReplicationOperation.getServiceName()"], ["boolean", "com.hazelcast.replicatedmap.impl.operation.ReplicationOperation.isEmpty()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ReplicationOperation.getId()"], ["com.hazelcast.replicatedmap.impl.operation.ValuesOperation", "com.hazelcast.replicatedmap.impl.operation.ValuesOperation()"], ["com.hazelcast.replicatedmap.impl.operation.ValuesOperation", "com.hazelcast.replicatedmap.impl.operation.ValuesOperation(java.lang.String)"], ["void", "com.hazelcast.replicatedmap.impl.operation.ValuesOperation.run()"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ValuesOperation.getResponse()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ValuesOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.ValuesOperation.getName()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateOperation", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateOperation()"], ["com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateOperation", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, com.hazelcast.replicatedmap.impl.operation.VersionResponsePair, boolean, com.hazelcast.nio.Address)"], ["void", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateOperation.run()"], ["int", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateOperation.getId()"], ["java.lang.String", "com.hazelcast.replicatedmap.impl.operation.ReplicateUpdateOperation.getName()"], ["void", "com.hazelcast.replicatedmap.impl.ReplicatedMapService$AntiEntropyTask.run()"], ["com.hazelcast.replicatedmap.ReplicatedMapCantBeCreatedOnLiteMemberException", "com.hazelcast.replicatedmap.ReplicatedMapCantBeCreatedOnLiteMemberException(com.hazelcast.nio.Address)"], ["com.hazelcast.replicatedmap.ReplicatedMapCantBeCreatedOnLiteMemberException", "com.hazelcast.replicatedmap.ReplicatedMapCantBeCreatedOnLiteMemberException(java.lang.String)"], ["com.hazelcast.replicatedmap.merge.MergePolicyProvider", "com.hazelcast.replicatedmap.merge.MergePolicyProvider(com.hazelcast.spi.NodeEngine)"], ["java.lang.Object", "com.hazelcast.replicatedmap.merge.MergePolicyProvider.getMergePolicy(java.lang.String)"], ["java.lang.Object", "com.hazelcast.replicatedmap.merge.LatestUpdateMapMergePolicy.merge(java.lang.String, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView)"], ["int", "com.hazelcast.replicatedmap.merge.LatestUpdateMapMergePolicy.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.merge.LatestUpdateMapMergePolicy.getId()"], ["void", "com.hazelcast.replicatedmap.merge.LatestUpdateMapMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.merge.LatestUpdateMapMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.replicatedmap.merge.HigherHitsMapMergePolicy.merge(java.lang.String, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView)"], ["int", "com.hazelcast.replicatedmap.merge.HigherHitsMapMergePolicy.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.merge.HigherHitsMapMergePolicy.getId()"], ["void", "com.hazelcast.replicatedmap.merge.HigherHitsMapMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.merge.HigherHitsMapMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.replicatedmap.merge.ReplicatedMapMergePolicy", "com.hazelcast.replicatedmap.merge.MergePolicyProvider$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.replicatedmap.merge.MergePolicyProvider$1.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.replicatedmap.merge.PutIfAbsentMapMergePolicy.merge(java.lang.String, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView)"], ["int", "com.hazelcast.replicatedmap.merge.PutIfAbsentMapMergePolicy.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.merge.PutIfAbsentMapMergePolicy.getId()"], ["void", "com.hazelcast.replicatedmap.merge.PutIfAbsentMapMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.merge.PutIfAbsentMapMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.replicatedmap.merge.PassThroughMergePolicy.merge(java.lang.String, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView, com.hazelcast.replicatedmap.impl.record.ReplicatedMapEntryView)"], ["int", "com.hazelcast.replicatedmap.merge.PassThroughMergePolicy.getFactoryId()"], ["int", "com.hazelcast.replicatedmap.merge.PassThroughMergePolicy.getId()"], ["void", "com.hazelcast.replicatedmap.merge.PassThroughMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.replicatedmap.merge.PassThroughMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.spi.MembershipServiceEvent", "com.hazelcast.spi.MembershipServiceEvent(com.hazelcast.core.MembershipEvent)"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.spi.MembershipServiceEvent.getMember()"], ["com.hazelcast.core.Member", "com.hazelcast.spi.MembershipServiceEvent.getMember()"], ["V", "com.hazelcast.spi.impl.executionservice.impl.BasicCompletableFuture.get(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.spi.impl.executionservice.impl.BasicCompletableFuture.isDone()"], ["boolean", "com.hazelcast.spi.impl.executionservice.impl.BasicCompletableFuture.isCancelled()"], ["boolean", "com.hazelcast.spi.impl.executionservice.impl.BasicCompletableFuture.shouldCancel(boolean)"], ["com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.util.executor.LoggingScheduledExecutor", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.getScheduledExecutorService()"], ["com.hazelcast.util.executor.ManagedExecutorService", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.register(java.lang.String, int, int, com.hazelcast.util.executor.ExecutorType)"], ["com.hazelcast.util.executor.ManagedExecutorService", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.getExecutor(java.lang.String)"], ["com.hazelcast.util.executor.ManagedExecutorService", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.getDurable(java.lang.String)"], ["java.util.concurrent.ExecutorService", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.getScheduledDurable(java.lang.String)"], ["<V> com.hazelcast.core.ICompletableFuture<V>", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.asCompletableFuture(java.util.concurrent.Future<V>)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.execute(java.lang.String, java.lang.Runnable)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.executeDurable(java.lang.String, java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.submit(java.lang.String, java.util.concurrent.Callable<T>)"], ["<V> java.util.concurrent.ScheduledFuture<java.util.concurrent.Future<V>>", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.scheduleDurable(java.lang.String, java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.spi.TaskScheduler", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.getGlobalTaskScheduler()"], ["com.hazelcast.spi.TaskScheduler", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.getTaskScheduler(java.lang.String)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.shutdown()"], ["void", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.shutdownExecutor(java.lang.String)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.shutdownDurableExecutor(java.lang.String)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.shutdownScheduledDurableExecutor(java.lang.String)"], ["java.util.concurrent.ExecutorService", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl.getDurable(java.lang.String)"], ["com.hazelcast.util.executor.ManagedExecutorService", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl$2.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.executionservice.impl.DelegatingTaskScheduler", "com.hazelcast.spi.impl.executionservice.impl.DelegatingTaskScheduler(java.util.concurrent.ScheduledExecutorService, java.util.concurrent.ExecutorService)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.DelegatingTaskScheduler.execute(java.lang.Runnable)"], ["<V> java.util.concurrent.ScheduledFuture<java.util.concurrent.Future<V>>", "com.hazelcast.spi.impl.executionservice.impl.DelegatingTaskScheduler.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl$4.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)"], ["com.hazelcast.spi.impl.executionservice.impl.DelegatingCallableTaskDecorator", "com.hazelcast.spi.impl.executionservice.impl.DelegatingCallableTaskDecorator(java.util.concurrent.Callable<V>, java.util.concurrent.ExecutorService)"], ["java.lang.Object", "com.hazelcast.spi.impl.executionservice.impl.DelegatingCallableTaskDecorator.call()"], ["com.hazelcast.util.executor.ManagedExecutorService", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.CompletableFutureTask.run()"], ["java.lang.String", "com.hazelcast.spi.impl.executionservice.impl.CompletableFutureTask.toString()"], ["com.hazelcast.spi.impl.executionservice.impl.DelegatingTaskDecorator", "com.hazelcast.spi.impl.executionservice.impl.DelegatingTaskDecorator(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.DelegatingTaskDecorator.run()"], ["java.lang.String", "com.hazelcast.spi.impl.executionservice.impl.DelegatingTaskDecorator.toString()"], ["com.hazelcast.spi.impl.executionservice.impl.DelegateAndSkipOnConcurrentExecutionDecorator", "com.hazelcast.spi.impl.executionservice.impl.DelegateAndSkipOnConcurrentExecutionDecorator(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.DelegateAndSkipOnConcurrentExecutionDecorator.run()"], ["java.lang.String", "com.hazelcast.spi.impl.executionservice.impl.DelegateAndSkipOnConcurrentExecutionDecorator.toString()"], ["com.hazelcast.util.executor.ManagedExecutorService", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl$3.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.spi.impl.executionservice.impl.ExecutionServiceImpl$3.createNew(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.executionservice.impl.DelegateAndSkipOnConcurrentExecutionDecorator$DelegateDecorator.run()"], ["java.lang.String", "com.hazelcast.spi.impl.executionservice.impl.DelegateAndSkipOnConcurrentExecutionDecorator$DelegateDecorator.toString()"], ["com.hazelcast.spi.impl.SerializableList", "com.hazelcast.spi.impl.SerializableList()"], ["com.hazelcast.spi.impl.SerializableList", "com.hazelcast.spi.impl.SerializableList(java.util.List<com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.spi.impl.SerializableList.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.SerializableList.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.SerializableList.getFactoryId()"], ["int", "com.hazelcast.spi.impl.SerializableList.getId()"], ["int", "com.hazelcast.spi.impl.SerializableList.size()"], ["com.hazelcast.spi.impl.BinaryOperationFactory", "com.hazelcast.spi.impl.BinaryOperationFactory()"], ["com.hazelcast.spi.impl.BinaryOperationFactory", "com.hazelcast.spi.impl.BinaryOperationFactory(com.hazelcast.spi.Operation, com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.spi.impl.BinaryOperationFactory", "com.hazelcast.spi.impl.BinaryOperationFactory(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.BinaryOperationFactory.createOperation()"], ["void", "com.hazelcast.spi.impl.BinaryOperationFactory.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.BinaryOperationFactory.readData(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.spi.impl.BinaryOperationFactory.setNode(com.hazelcast.instance.Node)"], ["int", "com.hazelcast.spi.impl.BinaryOperationFactory.getFactoryId()"], ["int", "com.hazelcast.spi.impl.BinaryOperationFactory.getId()"], ["com.hazelcast.spi.impl.PacketDispatcher", "com.hazelcast.spi.impl.PacketDispatcher(com.hazelcast.logging.ILogger, com.hazelcast.spi.impl.PacketHandler, com.hazelcast.spi.impl.PacketHandler, com.hazelcast.spi.impl.PacketHandler, com.hazelcast.spi.impl.PacketHandler, com.hazelcast.spi.impl.PacketHandler, com.hazelcast.spi.impl.PacketHandler)"], ["void", "com.hazelcast.spi.impl.PacketDispatcher.handle(com.hazelcast.nio.Packet)"], ["com.hazelcast.spi.impl.PortableItemEvent", "com.hazelcast.spi.impl.PortableItemEvent()"], ["com.hazelcast.spi.impl.PortableItemEvent", "com.hazelcast.spi.impl.PortableItemEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.core.ItemEventType, java.lang.String)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.PortableItemEvent.getItem()"], ["com.hazelcast.core.ItemEventType", "com.hazelcast.spi.impl.PortableItemEvent.getEventType()"], ["java.lang.String", "com.hazelcast.spi.impl.PortableItemEvent.getUuid()"], ["int", "com.hazelcast.spi.impl.PortableItemEvent.getFactoryId()"], ["int", "com.hazelcast.spi.impl.PortableItemEvent.getClassId()"], ["void", "com.hazelcast.spi.impl.PortableItemEvent.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.spi.impl.PortableItemEvent.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["com.hazelcast.nio.serialization.Portable", "com.hazelcast.spi.impl.SpiPortableHook$1.create(int)"], ["void", "com.hazelcast.spi.impl.NodeEngineImpl$ConnectionManagerPacketHandler.handle(com.hazelcast.nio.Packet)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyEventProcessor.run()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.ProxyEventProcessor.getKey()"], ["com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation", "com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation()"], ["com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation", "com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation(java.util.Collection<com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo>)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation.run()"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation.getServiceName()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation.getFactoryId()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation.getId()"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation$CreateProxyTask.run()"], ["com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation", "com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation()"], ["com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation", "com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation.run()"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation.getServiceName()"], ["java.lang.Object", "com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation.getResponse()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation.getFactoryId()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.operations.InitializeDistributedObjectOperation.getId()"], ["com.hazelcast.spi.impl.proxyservice.impl.operations.DistributedObjectDestroyOperation", "com.hazelcast.spi.impl.proxyservice.impl.operations.DistributedObjectDestroyOperation()"], ["com.hazelcast.spi.impl.proxyservice.impl.operations.DistributedObjectDestroyOperation", "com.hazelcast.spi.impl.proxyservice.impl.operations.DistributedObjectDestroyOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.operations.DistributedObjectDestroyOperation.run()"], ["java.lang.Object", "com.hazelcast.spi.impl.proxyservice.impl.operations.DistributedObjectDestroyOperation.getResponse()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.operations.DistributedObjectDestroyOperation.getFactoryId()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.operations.DistributedObjectDestroyOperation.getId()"], ["com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl$1.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo", "com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo.getServiceName()"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo.getObjectName()"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo.toString()"], ["com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectFuture", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectFuture()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectFuture.get()"], ["com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket()"], ["com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket(com.hazelcast.core.DistributedObjectEvent$EventType, java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket.getServiceName()"], ["com.hazelcast.core.DistributedObjectEvent$EventType", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket.getEventType()"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket.getName()"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket.toString()"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl$2.handleException(java.lang.Throwable)"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry.getServiceName()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry.getProxyCount()"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry.getProxyInfos(java.util.Collection<com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo>)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry.getDistributedObjects(java.util.Collection<com.hazelcast.core.DistributedObject>)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry.getOrCreateProxy(java.lang.String, boolean)"], ["com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectFuture", "com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry.getOrCreateProxyFuture(java.lang.String, boolean, boolean)"], ["com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectFuture", "com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry.createProxy(java.lang.String, boolean, boolean)"], ["com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl(com.hazelcast.spi.impl.NodeEngineImpl)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.init()"], ["int", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.getProxyCount()"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.initializeDistributedObject(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.getOrCreateRegistry(java.lang.String)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.getDistributedObject(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.destroyDistributedObject(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.destroyLocalDistributedObject(java.lang.String, java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.addProxyListener(com.hazelcast.core.DistributedObjectListener)"], ["boolean", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.removeProxyListener(java.lang.String)"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.dispatchEvent(com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket, java.lang.Object)"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.getPostJoinOperation()"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.shutdown()"], ["void", "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl.dispatchEvent(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.spi.impl.OperationResponseHandlerFactory$NoResponseHandler.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["com.hazelcast.spi.impl.PortableDistributedObjectEvent", "com.hazelcast.spi.impl.PortableDistributedObjectEvent()"], ["com.hazelcast.spi.impl.PortableDistributedObjectEvent", "com.hazelcast.spi.impl.PortableDistributedObjectEvent(com.hazelcast.core.DistributedObjectEvent$EventType, java.lang.String, java.lang.String)"], ["com.hazelcast.core.DistributedObjectEvent$EventType", "com.hazelcast.spi.impl.PortableDistributedObjectEvent.getEventType()"], ["java.lang.String", "com.hazelcast.spi.impl.PortableDistributedObjectEvent.getName()"], ["java.lang.String", "com.hazelcast.spi.impl.PortableDistributedObjectEvent.getServiceName()"], ["int", "com.hazelcast.spi.impl.PortableDistributedObjectEvent.getFactoryId()"], ["int", "com.hazelcast.spi.impl.PortableDistributedObjectEvent.getClassId()"], ["void", "com.hazelcast.spi.impl.PortableDistributedObjectEvent.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.spi.impl.PortableDistributedObjectEvent.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["boolean", "com.hazelcast.spi.impl.AbstractInvocationFuture.isDone()"], ["boolean", "com.hazelcast.spi.impl.AbstractInvocationFuture.cancel(boolean)"], ["boolean", "com.hazelcast.spi.impl.AbstractInvocationFuture.isCancelled()"], ["V", "com.hazelcast.spi.impl.AbstractInvocationFuture.join()"], ["V", "com.hazelcast.spi.impl.AbstractInvocationFuture.get()"], ["V", "com.hazelcast.spi.impl.AbstractInvocationFuture.get(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.spi.impl.AbstractInvocationFuture.andThen(com.hazelcast.core.ExecutionCallback<V>)"], ["void", "com.hazelcast.spi.impl.AbstractInvocationFuture.andThen(com.hazelcast.core.ExecutionCallback<V>, java.util.concurrent.Executor)"], ["boolean", "com.hazelcast.spi.impl.AbstractInvocationFuture.complete(java.lang.Object)"], ["java.lang.String", "com.hazelcast.spi.impl.AbstractInvocationFuture.toString()"], ["com.hazelcast.spi.impl.PortableMapPartitionLostEvent", "com.hazelcast.spi.impl.PortableMapPartitionLostEvent()"], ["com.hazelcast.spi.impl.PortableMapPartitionLostEvent", "com.hazelcast.spi.impl.PortableMapPartitionLostEvent(int, java.lang.String)"], ["int", "com.hazelcast.spi.impl.PortableMapPartitionLostEvent.getPartitionId()"], ["java.lang.String", "com.hazelcast.spi.impl.PortableMapPartitionLostEvent.getUuid()"], ["int", "com.hazelcast.spi.impl.PortableMapPartitionLostEvent.getFactoryId()"], ["int", "com.hazelcast.spi.impl.PortableMapPartitionLostEvent.getClassId()"], ["void", "com.hazelcast.spi.impl.PortableMapPartitionLostEvent.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.spi.impl.PortableMapPartitionLostEvent.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["com.hazelcast.spi.impl.PortableCollection", "com.hazelcast.spi.impl.PortableCollection()"], ["com.hazelcast.spi.impl.PortableCollection", "com.hazelcast.spi.impl.PortableCollection(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["int", "com.hazelcast.spi.impl.PortableCollection.getFactoryId()"], ["int", "com.hazelcast.spi.impl.PortableCollection.getClassId()"], ["void", "com.hazelcast.spi.impl.PortableCollection.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.spi.impl.PortableCollection.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["com.hazelcast.spi.impl.sequence.CallIdSequence", "com.hazelcast.spi.impl.sequence.CallIdFactory.newCallIdSequence(boolean, int, long)"], ["com.hazelcast.spi.impl.sequence.FailFastCallIdSequence", "com.hazelcast.spi.impl.sequence.FailFastCallIdSequence(int)"], ["com.hazelcast.spi.impl.sequence.AbstractCallIdSequence", "com.hazelcast.spi.impl.sequence.AbstractCallIdSequence(int)"], ["long", "com.hazelcast.spi.impl.sequence.AbstractCallIdSequence.next()"], ["long", "com.hazelcast.spi.impl.sequence.AbstractCallIdSequence.getLastCallId()"], ["int", "com.hazelcast.spi.impl.sequence.AbstractCallIdSequence.getMaxConcurrentInvocations()"], ["void", "com.hazelcast.spi.impl.sequence.AbstractCallIdSequence.complete()"], ["long", "com.hazelcast.spi.impl.sequence.AbstractCallIdSequence.forceNext()"], ["com.hazelcast.spi.impl.sequence.CallIdSequenceWithBackpressure", "com.hazelcast.spi.impl.sequence.CallIdSequenceWithBackpressure(int, long)"], ["com.hazelcast.spi.impl.sequence.CallIdSequenceWithoutBackpressure", "com.hazelcast.spi.impl.sequence.CallIdSequenceWithoutBackpressure()"], ["long", "com.hazelcast.spi.impl.sequence.CallIdSequenceWithoutBackpressure.getLastCallId()"], ["int", "com.hazelcast.spi.impl.sequence.CallIdSequenceWithoutBackpressure.getMaxConcurrentInvocations()"], ["long", "com.hazelcast.spi.impl.sequence.CallIdSequenceWithoutBackpressure.next()"], ["long", "com.hazelcast.spi.impl.sequence.CallIdSequenceWithoutBackpressure.forceNext()"], ["void", "com.hazelcast.spi.impl.sequence.CallIdSequenceWithoutBackpressure.complete()"], ["com.hazelcast.spi.impl.UnmodifiableLazyList$UnmodifiableLazyListIterator", "com.hazelcast.spi.impl.UnmodifiableLazyList$UnmodifiableLazyListIterator(com.hazelcast.spi.impl.UnmodifiableLazyList, java.util.ListIterator)"], ["boolean", "com.hazelcast.spi.impl.UnmodifiableLazyList$UnmodifiableLazyListIterator.hasNext()"], ["E", "com.hazelcast.spi.impl.UnmodifiableLazyList$UnmodifiableLazyListIterator.next()"], ["boolean", "com.hazelcast.spi.impl.UnmodifiableLazyList$UnmodifiableLazyListIterator.hasPrevious()"], ["E", "com.hazelcast.spi.impl.UnmodifiableLazyList$UnmodifiableLazyListIterator.previous()"], ["int", "com.hazelcast.spi.impl.UnmodifiableLazyList$UnmodifiableLazyListIterator.nextIndex()"], ["int", "com.hazelcast.spi.impl.UnmodifiableLazyList$UnmodifiableLazyListIterator.previousIndex()"], ["void", "com.hazelcast.spi.impl.OperationResponseHandlerFactory$ErrorLoggingResponseHandler.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["com.hazelcast.spi.impl.PortableEntryEvent", "com.hazelcast.spi.impl.PortableEntryEvent()"], ["com.hazelcast.spi.impl.PortableEntryEvent", "com.hazelcast.spi.impl.PortableEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.core.EntryEventType, java.lang.String)"], ["com.hazelcast.spi.impl.PortableEntryEvent", "com.hazelcast.spi.impl.PortableEntryEvent(com.hazelcast.core.EntryEventType, java.lang.String, int)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.PortableEntryEvent.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.PortableEntryEvent.getValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.PortableEntryEvent.getOldValue()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.PortableEntryEvent.getMergingValue()"], ["com.hazelcast.core.EntryEventType", "com.hazelcast.spi.impl.PortableEntryEvent.getEventType()"], ["java.lang.String", "com.hazelcast.spi.impl.PortableEntryEvent.getUuid()"], ["int", "com.hazelcast.spi.impl.PortableEntryEvent.getNumberOfAffectedEntries()"], ["int", "com.hazelcast.spi.impl.PortableEntryEvent.getFactoryId()"], ["int", "com.hazelcast.spi.impl.PortableEntryEvent.getClassId()"], ["void", "com.hazelcast.spi.impl.PortableEntryEvent.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.spi.impl.PortableEntryEvent.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["boolean", "com.hazelcast.spi.impl.operationutil.Operations.isJoinOperation(com.hazelcast.spi.Operation)"], ["boolean", "com.hazelcast.spi.impl.operationutil.Operations.isMigrationOperation(com.hazelcast.spi.Operation)"], ["boolean", "com.hazelcast.spi.impl.operationutil.Operations.isWanReplicationOperation(com.hazelcast.spi.Operation)"], ["com.hazelcast.spi.impl.operationparker.impl.WaitSet", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl$1.createNew(com.hazelcast.spi.WaitNotifyKey)"], ["java.lang.Object", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl$1.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.operationparker.impl.WaitSet", "com.hazelcast.spi.impl.operationparker.impl.WaitSet(com.hazelcast.logging.ILogger, com.hazelcast.spi.NodeEngine, java.util.Map<com.hazelcast.spi.WaitNotifyKey, com.hazelcast.spi.impl.operationparker.impl.WaitSet>, java.util.Queue<com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry>)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.populate(com.hazelcast.spi.LiveOperations)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.park(com.hazelcast.spi.BlockingOperation)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.unpark(com.hazelcast.spi.Notifier, com.hazelcast.spi.WaitNotifyKey)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.onPartitionMigrate(com.hazelcast.nio.Address, com.hazelcast.internal.partition.MigrationInfo)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.onShutdown()"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.invalidateAll(java.lang.String)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.cancelAll(java.lang.String, java.lang.Throwable)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.cancelAll(java.lang.String, java.lang.Object, java.lang.Throwable)"], ["int", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.size()"], ["int", "com.hazelcast.spi.impl.operationparker.impl.WaitSet.totalValidWaitingOperationCount()"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl$ExpirationTask.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.getOperation()"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.setValid(boolean)"], ["boolean", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.isValid()"], ["boolean", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.needsInvalidation()"], ["boolean", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.isExpired()"], ["boolean", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.isCancelled()"], ["boolean", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.isCallTimedOut()"], ["boolean", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.shouldWait()"], ["long", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.getDelay(java.util.concurrent.TimeUnit)"], ["int", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.compareTo(java.util.concurrent.Delayed)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.run()"], ["int", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.hashCode()"], ["boolean", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.equals(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.logError(java.lang.Throwable)"], ["boolean", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.returnsResponse()"], ["java.lang.String", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.getServiceName()"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.onExpire()"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.onCancel()"], ["void", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.cancel(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.operationparker.impl.WaitSetEntry.compareTo(java.lang.Object)"], ["com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl(com.hazelcast.spi.impl.NodeEngineImpl)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.populate(com.hazelcast.spi.LiveOperations)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.park(com.hazelcast.spi.BlockingOperation)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.unpark(com.hazelcast.spi.Notifier)"], ["int", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.getParkQueueCount()"], ["int", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.getTotalParkedOperationCount()"], ["int", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.getTotalValidWaitingOperationCount()"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.onMemberLeft(com.hazelcast.instance.MemberImpl)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.onClientDisconnected(java.lang.String)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.onPartitionMigrate(com.hazelcast.nio.Address, com.hazelcast.internal.partition.MigrationInfo)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.cancelParkedOperations(java.lang.String, java.lang.Object, java.lang.Throwable)"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.reset()"], ["void", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.shutdown()"], ["java.lang.String", "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl.toString()"], ["com.hazelcast.spi.impl.merge.AtomicReferenceMergingValueImpl", "com.hazelcast.spi.impl.merge.AtomicReferenceMergingValueImpl()"], ["com.hazelcast.spi.impl.merge.AtomicReferenceMergingValueImpl", "com.hazelcast.spi.impl.merge.AtomicReferenceMergingValueImpl(com.hazelcast.spi.serialization.SerializationService)"], ["int", "com.hazelcast.spi.impl.merge.AtomicReferenceMergingValueImpl.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getValue()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getDeserializedValue()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setValue(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getKey()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getDeserializedKey()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setKey(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getCost()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setCost(long)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getCreationTime()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setCreationTime(long)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getExpirationTime()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setExpirationTime(long)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getHits()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setHits(long)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getLastAccessTime()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setLastAccessTime(long)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getLastStoredTime()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setLastStoredTime(long)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getLastUpdateTime()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setLastUpdateTime(long)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getVersion()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setVersion(long)"], ["long", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getTtl()"], ["com.hazelcast.spi.impl.merge.MapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setTtl(long)"], ["void", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getFactoryId()"], ["int", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getId()"], ["boolean", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.toString()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getKey()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.MapMergingEntryImpl.getValue()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.merge.AtomicLongMergingValueImpl", "com.hazelcast.spi.impl.merge.AtomicLongMergingValueImpl()"], ["com.hazelcast.spi.impl.merge.AtomicLongMergingValueImpl", "com.hazelcast.spi.impl.merge.AtomicLongMergingValueImpl(com.hazelcast.spi.serialization.SerializationService)"], ["int", "com.hazelcast.spi.impl.merge.AtomicLongMergingValueImpl.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$17.createNew(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.merge.AbstractContainerMerger.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$10.createNew(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.AbstractSplitBrainHandlerService$StoreCollector.getPartitionId()"], ["void", "com.hazelcast.spi.impl.merge.AbstractSplitBrainHandlerService$StoreCollector.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$11.createNew(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergeRunnable$LegacyOperationBiConsumer$1.onResponse(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergeRunnable$LegacyOperationBiConsumer$1.onFailure(java.lang.Throwable)"], ["com.hazelcast.spi.impl.merge.AbstractMergingValueImpl", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl()"], ["com.hazelcast.spi.impl.merge.AbstractMergingValueImpl", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl(com.hazelcast.spi.serialization.SerializationService)"], ["V", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.getValue()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.getDeserializedValue()"], ["T", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.setValue(V)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.getFactoryId()"], ["boolean", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.merge.AbstractMergingValueImpl.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl()"], ["com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getKey()"], ["<DK> DK", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getDeserializedKey()"], ["com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.setKey(com.hazelcast.nio.serialization.Data)"], ["<DV> DV", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getDeserializedValue()"], ["com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.setValues(java.util.Collection<java.lang.Object>)"], ["long", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getCreationTime()"], ["com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.setCreationTime(long)"], ["long", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getHits()"], ["com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.setHits(long)"], ["long", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getLastAccessTime()"], ["com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.setLastAccessTime(long)"], ["long", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getLastUpdateTime()"], ["com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.setLastUpdateTime(long)"], ["void", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getFactoryId()"], ["int", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getId()"], ["boolean", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.toString()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getKey()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.MultiMapMergingEntryImpl.getValue()"], ["com.hazelcast.spi.impl.merge.CacheMergingEntryImpl", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl()"], ["com.hazelcast.spi.impl.merge.CacheMergingEntryImpl", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getValue()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getDeserializedValue()"], ["com.hazelcast.spi.impl.merge.CacheMergingEntryImpl", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.setValue(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getKey()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getDeserializedKey()"], ["com.hazelcast.spi.impl.merge.CacheMergingEntryImpl", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.setKey(com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getCreationTime()"], ["com.hazelcast.spi.impl.merge.CacheMergingEntryImpl", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.setCreationTime(long)"], ["long", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getExpirationTime()"], ["com.hazelcast.spi.impl.merge.CacheMergingEntryImpl", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.setExpirationTime(long)"], ["long", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getHits()"], ["com.hazelcast.spi.impl.merge.CacheMergingEntryImpl", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.setHits(long)"], ["long", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getLastAccessTime()"], ["com.hazelcast.spi.impl.merge.CacheMergingEntryImpl", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.setLastAccessTime(long)"], ["void", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getFactoryId()"], ["int", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getId()"], ["boolean", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.toString()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getKey()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.CacheMergingEntryImpl.getValue()"], ["void", "com.hazelcast.spi.impl.merge.AbstractContainerCollector.run()"], ["java.util.concurrent.ConcurrentMap<java.lang.Integer, java.util.Collection<C>>", "com.hazelcast.spi.impl.merge.AbstractContainerCollector.getCollectedContainers()"], ["void", "com.hazelcast.spi.impl.merge.AbstractContainerCollector.destroy()"], ["int", "com.hazelcast.spi.impl.merge.AbstractContainerCollector$CollectContainerRunnable.getPartitionId()"], ["void", "com.hazelcast.spi.impl.merge.AbstractContainerCollector$CollectContainerRunnable.run()"], ["com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl()"], ["com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl(com.hazelcast.spi.serialization.SerializationService)"], ["V", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.getValue()"], ["<DV> DV", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.getDeserializedValue()"], ["T", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.setValue(V)"], ["void", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.getFactoryId()"], ["boolean", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.toString()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.AbstractCollectionMergingValueImpl.getValue()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.merge.CollectionMergingValueImpl", "com.hazelcast.spi.impl.merge.CollectionMergingValueImpl()"], ["com.hazelcast.spi.impl.merge.CollectionMergingValueImpl", "com.hazelcast.spi.impl.merge.CollectionMergingValueImpl(com.hazelcast.spi.serialization.SerializationService)"], ["int", "com.hazelcast.spi.impl.merge.CollectionMergingValueImpl.getId()"], ["com.hazelcast.spi.impl.merge.AbstractContainerCollector$EmptyIterator", "com.hazelcast.spi.impl.merge.AbstractContainerCollector$EmptyIterator(com.hazelcast.spi.impl.merge.AbstractContainerCollector)"], ["boolean", "com.hazelcast.spi.impl.merge.AbstractContainerCollector$EmptyIterator.hasNext()"], ["C", "com.hazelcast.spi.impl.merge.AbstractContainerCollector$EmptyIterator.next()"], ["void", "com.hazelcast.spi.impl.merge.AbstractContainerCollector$EmptyIterator.remove()"], ["java.lang.Runnable", "com.hazelcast.spi.impl.merge.AbstractSplitBrainHandlerService.prepareMergeRunnable()"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer.accept(java.lang.Integer, MergingItem)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer.accept(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergeRunnable.run()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$19.createNew(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergeRunnable$LegacyOperationBiConsumer.accept(java.lang.Integer, com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergeRunnable$LegacyOperationBiConsumer.accept(java.lang.Object, java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl()"], ["com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl(com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.spi.merge.RingbufferMergeData", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.getValue()"], ["<DV> DV", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.getDeserializedValue()"], ["com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.setValues(com.hazelcast.spi.merge.RingbufferMergeData)"], ["void", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.getFactoryId()"], ["int", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.getId()"], ["boolean", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.toString()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.RingbufferMergingValueImpl.getValue()"], ["void", "com.hazelcast.spi.impl.merge.AbstractContainerMerger$1.onResponse(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.merge.AbstractContainerMerger$1.onFailure(java.lang.Throwable)"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl()"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl(com.hazelcast.spi.serialization.SerializationService)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getValue()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getDeserializedValue()"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.setValue(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getKey()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getDeserializedKey()"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.setKey(java.lang.Object)"], ["long", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getCreationTime()"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.setCreationTime(long)"], ["long", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getHits()"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.setHits(long)"], ["long", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getLastAccessTime()"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.setLastAccessTime(long)"], ["long", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getLastUpdateTime()"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.setLastUpdateTime(long)"], ["long", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getTtl()"], ["com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.setTtl(long)"], ["void", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getFactoryId()"], ["int", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.getId()"], ["boolean", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl.toString()"], ["com.hazelcast.spi.impl.merge.CardinalityEstimatorMergingEntry", "com.hazelcast.spi.impl.merge.CardinalityEstimatorMergingEntry()"], ["com.hazelcast.spi.impl.merge.CardinalityEstimatorMergingEntry", "com.hazelcast.spi.impl.merge.CardinalityEstimatorMergingEntry(com.hazelcast.spi.serialization.SerializationService)"], ["int", "com.hazelcast.spi.impl.merge.CardinalityEstimatorMergingEntry.getId()"], ["com.hazelcast.spi.impl.merge.QueueMergingValueImpl", "com.hazelcast.spi.impl.merge.QueueMergingValueImpl()"], ["com.hazelcast.spi.impl.merge.QueueMergingValueImpl", "com.hazelcast.spi.impl.merge.QueueMergingValueImpl(com.hazelcast.spi.serialization.SerializationService)"], ["int", "com.hazelcast.spi.impl.merge.QueueMergingValueImpl.getId()"], ["com.hazelcast.spi.impl.merge.AbstractSplitBrainMergePolicy", "com.hazelcast.spi.impl.merge.AbstractSplitBrainMergePolicy()"], ["int", "com.hazelcast.spi.impl.merge.AbstractSplitBrainMergePolicy.getFactoryId()"], ["void", "com.hazelcast.spi.impl.merge.AbstractSplitBrainMergePolicy.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.AbstractSplitBrainMergePolicy.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$5.createNew(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.merge.AbstractSplitBrainHandlerService$1.run()"], ["int", "com.hazelcast.spi.impl.merge.AbstractSplitBrainHandlerService$1.getPartitionId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$CollectionMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingValue(com.hazelcast.spi.serialization.SerializationService, java.util.Collection<com.hazelcast.collection.impl.collection.CollectionItem>)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$QueueMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingValue(com.hazelcast.spi.serialization.SerializationService, java.util.Queue<com.hazelcast.collection.impl.queue.QueueItem>)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$AtomicLongMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingValue(com.hazelcast.spi.serialization.SerializationService, java.lang.Long)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$AtomicReferenceMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingValue(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.core.EntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.map.impl.record.Record)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$MapMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.map.impl.record.Record)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.cache.CacheEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["<R extends com.hazelcast.cache.impl.record.CacheRecord> com.hazelcast.spi.merge.SplitBrainMergeTypes$CacheMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, R)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$ReplicatedMapMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.replicatedmap.impl.record.ReplicatedRecord)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$MultiMapMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.multimap.impl.MultiMapMergeContainer)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$MultiMapMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.multimap.impl.MultiMapContainer, com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.multimap.impl.MultiMapRecord>, long)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$RingbufferMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingValue(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.ringbuffer.impl.Ringbuffer<java.lang.Object>)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$CardinalityEstimatorMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, java.lang.String, com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog)"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes$ScheduledExecutorMergeTypes", "com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingEntry(com.hazelcast.spi.serialization.SerializationService, com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor)"], ["com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook()"], ["int", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook.createFactory()"], ["com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl()"], ["com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl(com.hazelcast.spi.serialization.SerializationService)"], ["K", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.getKey()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.getDeserializedKey()"], ["T", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.setKey(K)"], ["V", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.getValue()"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.getDeserializedValue()"], ["T", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.setValue(V)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.setSerializationService(com.hazelcast.spi.serialization.SerializationService)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.getFactoryId()"], ["boolean", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$8.createNew(java.lang.Object)"], ["boolean", "com.hazelcast.spi.impl.merge.AbstractNamedContainerCollector$ContainerIterator.hasNext()"], ["C", "com.hazelcast.spi.impl.merge.AbstractNamedContainerCollector$ContainerIterator.next()"], ["void", "com.hazelcast.spi.impl.merge.AbstractNamedContainerCollector$ContainerIterator.remove()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.merge.ScheduledExecutorMergingEntryImpl", "com.hazelcast.spi.impl.merge.ScheduledExecutorMergingEntryImpl()"], ["com.hazelcast.spi.impl.merge.ScheduledExecutorMergingEntryImpl", "com.hazelcast.spi.impl.merge.ScheduledExecutorMergingEntryImpl(com.hazelcast.spi.serialization.SerializationService)"], ["int", "com.hazelcast.spi.impl.merge.ScheduledExecutorMergingEntryImpl.getId()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook$7.createNew(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.AbstractCompletableFuture.andThen(com.hazelcast.core.ExecutionCallback<V>)"], ["void", "com.hazelcast.spi.impl.AbstractCompletableFuture.andThen(com.hazelcast.core.ExecutionCallback<V>, java.util.concurrent.Executor)"], ["boolean", "com.hazelcast.spi.impl.AbstractCompletableFuture.isDone()"], ["boolean", "com.hazelcast.spi.impl.AbstractCompletableFuture.cancel(boolean)"], ["boolean", "com.hazelcast.spi.impl.AbstractCompletableFuture.isCancelled()"], ["V", "com.hazelcast.spi.impl.AbstractCompletableFuture.get()"], ["V", "com.hazelcast.spi.impl.AbstractCompletableFuture.get(long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.spi.impl.SpiPortableHook", "com.hazelcast.spi.impl.SpiPortableHook()"], ["int", "com.hazelcast.spi.impl.SpiPortableHook.getFactoryId()"], ["com.hazelcast.nio.serialization.PortableFactory", "com.hazelcast.spi.impl.SpiPortableHook.createFactory()"], ["com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl", "com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl(com.hazelcast.spi.impl.NodeEngineImpl)"], ["synchronized", "com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl.void start()"], ["synchronized", "com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl.void shutdown(boolean)"], ["synchronized", "com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl.void registerService(java.lang.String, java.lang.Object)"], ["com.hazelcast.spi.impl.servicemanager.ServiceInfo", "com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl.getServiceInfo(java.lang.String)"], ["<S> java.util.List<S>", "com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl.getServices(java.lang.Class<S>)"], ["<T> T", "com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl.getService(java.lang.String)"], ["<T extends com.hazelcast.spi.SharedService> T", "com.hazelcast.spi.impl.servicemanager.impl.ServiceManagerImpl.getSharedService(java.lang.String)"], ["com.hazelcast.spi.impl.servicemanager.ServiceInfo", "com.hazelcast.spi.impl.servicemanager.ServiceInfo(java.lang.String, java.lang.Object)"], ["java.lang.String", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.getName()"], ["<T> T", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.getService()"], ["boolean", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.isCoreService()"], ["boolean", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.isManagedService()"], ["boolean", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.isConfigurableService()"], ["boolean", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.isInstanceOf(java.lang.Class)"], ["boolean", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.servicemanager.ServiceInfo.toString()"], ["void", "com.hazelcast.spi.impl.NodeEngineImpl$JetPacketHandler.handle(com.hazelcast.nio.Packet)"], ["boolean", "com.hazelcast.spi.impl.SerializableList$1.hasNext()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.SerializableList$1.next()"], ["java.lang.Object", "com.hazelcast.spi.impl.SerializableList$1.next()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.spi.impl.SpiDataSerializerHook$1.create(int)"], ["void", "com.hazelcast.spi.impl.AbstractInvocationFuture$1.run()"], ["com.hazelcast.spi.impl.PortableCachePartitionLostEvent", "com.hazelcast.spi.impl.PortableCachePartitionLostEvent()"], ["com.hazelcast.spi.impl.PortableCachePartitionLostEvent", "com.hazelcast.spi.impl.PortableCachePartitionLostEvent(int, java.lang.String)"], ["int", "com.hazelcast.spi.impl.PortableCachePartitionLostEvent.getPartitionId()"], ["java.lang.String", "com.hazelcast.spi.impl.PortableCachePartitionLostEvent.getUuid()"], ["int", "com.hazelcast.spi.impl.PortableCachePartitionLostEvent.getFactoryId()"], ["int", "com.hazelcast.spi.impl.PortableCachePartitionLostEvent.getClassId()"], ["void", "com.hazelcast.spi.impl.PortableCachePartitionLostEvent.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.spi.impl.PortableCachePartitionLostEvent.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["com.hazelcast.spi.impl.NodeEngineImpl", "com.hazelcast.spi.impl.NodeEngineImpl(com.hazelcast.instance.Node)"], ["com.hazelcast.logging.LoggingService", "com.hazelcast.spi.impl.NodeEngineImpl.getLoggingService()"], ["com.hazelcast.internal.metrics.MetricsRegistry", "com.hazelcast.spi.impl.NodeEngineImpl.getMetricsRegistry()"], ["void", "com.hazelcast.spi.impl.NodeEngineImpl.start()"], ["com.hazelcast.spi.impl.PacketHandler", "com.hazelcast.spi.impl.NodeEngineImpl.getPacketDispatcher()"], ["com.hazelcast.internal.diagnostics.Diagnostics", "com.hazelcast.spi.impl.NodeEngineImpl.getDiagnostics()"], ["com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService", "com.hazelcast.spi.impl.NodeEngineImpl.getConfigurationService()"], ["com.hazelcast.spi.impl.servicemanager.ServiceManager", "com.hazelcast.spi.impl.NodeEngineImpl.getServiceManager()"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.impl.NodeEngineImpl.getThisAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.impl.NodeEngineImpl.getMasterAddress()"], ["com.hazelcast.instance.MemberImpl", "com.hazelcast.spi.impl.NodeEngineImpl.getLocalMember()"], ["com.hazelcast.config.Config", "com.hazelcast.spi.impl.NodeEngineImpl.getConfig()"], ["java.lang.ClassLoader", "com.hazelcast.spi.impl.NodeEngineImpl.getConfigClassLoader()"], ["com.hazelcast.spi.impl.eventservice.InternalEventService", "com.hazelcast.spi.impl.NodeEngineImpl.getEventService()"], ["com.hazelcast.spi.serialization.SerializationService", "com.hazelcast.spi.impl.NodeEngineImpl.getSerializationService()"], ["com.hazelcast.spi.impl.operationservice.InternalOperationService", "com.hazelcast.spi.impl.NodeEngineImpl.getOperationService()"], ["com.hazelcast.spi.impl.executionservice.InternalExecutionService", "com.hazelcast.spi.impl.NodeEngineImpl.getExecutionService()"], ["com.hazelcast.internal.partition.InternalPartitionService", "com.hazelcast.spi.impl.NodeEngineImpl.getPartitionService()"], ["com.hazelcast.internal.cluster.ClusterService", "com.hazelcast.spi.impl.NodeEngineImpl.getClusterService()"], ["com.hazelcast.internal.management.ManagementCenterService", "com.hazelcast.spi.impl.NodeEngineImpl.getManagementCenterService()"], ["com.hazelcast.spi.impl.proxyservice.InternalProxyService", "com.hazelcast.spi.impl.NodeEngineImpl.getProxyService()"], ["com.hazelcast.spi.impl.operationparker.OperationParker", "com.hazelcast.spi.impl.NodeEngineImpl.getOperationParker()"], ["com.hazelcast.wan.WanReplicationService", "com.hazelcast.spi.impl.NodeEngineImpl.getWanReplicationService()"], ["com.hazelcast.quorum.impl.QuorumServiceImpl", "com.hazelcast.spi.impl.NodeEngineImpl.getQuorumService()"], ["com.hazelcast.transaction.TransactionManagerService", "com.hazelcast.spi.impl.NodeEngineImpl.getTransactionManagerService()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.spi.impl.NodeEngineImpl.toData(java.lang.Object)"], ["<T> T", "com.hazelcast.spi.impl.NodeEngineImpl.toObject(java.lang.Object)"], ["<T> T", "com.hazelcast.spi.impl.NodeEngineImpl.toObject(java.lang.Object, java.lang.Class)"], ["boolean", "com.hazelcast.spi.impl.NodeEngineImpl.isActive()"], ["boolean", "com.hazelcast.spi.impl.NodeEngineImpl.isRunning()"], ["com.hazelcast.core.HazelcastInstance", "com.hazelcast.spi.impl.NodeEngineImpl.getHazelcastInstance()"], ["com.hazelcast.logging.ILogger", "com.hazelcast.spi.impl.NodeEngineImpl.getLogger(java.lang.String)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.spi.impl.NodeEngineImpl.getLogger(java.lang.Class)"], ["com.hazelcast.spi.properties.HazelcastProperties", "com.hazelcast.spi.impl.NodeEngineImpl.getProperties()"], ["<T> T", "com.hazelcast.spi.impl.NodeEngineImpl.getService(java.lang.String)"], ["<T extends com.hazelcast.spi.SharedService> T", "com.hazelcast.spi.impl.NodeEngineImpl.getSharedService(java.lang.String)"], ["com.hazelcast.version.MemberVersion", "com.hazelcast.spi.impl.NodeEngineImpl.getVersion()"], ["com.hazelcast.spi.merge.SplitBrainMergePolicyProvider", "com.hazelcast.spi.impl.NodeEngineImpl.getSplitBrainMergePolicyProvider()"], ["<S> java.util.Collection<S>", "com.hazelcast.spi.impl.NodeEngineImpl.getServices(java.lang.Class<S>)"], ["com.hazelcast.instance.Node", "com.hazelcast.spi.impl.NodeEngineImpl.getNode()"], ["void", "com.hazelcast.spi.impl.NodeEngineImpl.onMemberLeft(com.hazelcast.instance.MemberImpl)"], ["void", "com.hazelcast.spi.impl.NodeEngineImpl.onClientDisconnected(java.lang.String)"], ["void", "com.hazelcast.spi.impl.NodeEngineImpl.onPartitionMigrate(com.hazelcast.internal.partition.MigrationInfo)"], ["com.hazelcast.spi.Operation[]", "com.hazelcast.spi.impl.NodeEngineImpl.getPostJoinOperations()"], ["com.hazelcast.spi.Operation[]", "com.hazelcast.spi.impl.NodeEngineImpl.getPreJoinOperations()"], ["void", "com.hazelcast.spi.impl.NodeEngineImpl.reset()"], ["void", "com.hazelcast.spi.impl.NodeEngineImpl.shutdown(boolean)"], ["com.hazelcast.core.Member", "com.hazelcast.spi.impl.NodeEngineImpl.getLocalMember()"], ["com.hazelcast.quorum.QuorumService", "com.hazelcast.spi.impl.NodeEngineImpl.getQuorumService()"], ["com.hazelcast.spi.ProxyService", "com.hazelcast.spi.impl.NodeEngineImpl.getProxyService()"], ["com.hazelcast.spi.EventService", "com.hazelcast.spi.impl.NodeEngineImpl.getEventService()"], ["com.hazelcast.spi.partition.IPartitionService", "com.hazelcast.spi.impl.NodeEngineImpl.getPartitionService()"], ["com.hazelcast.spi.ExecutionService", "com.hazelcast.spi.impl.NodeEngineImpl.getExecutionService()"], ["com.hazelcast.spi.OperationService", "com.hazelcast.spi.impl.NodeEngineImpl.getOperationService()"], ["com.hazelcast.spi.impl.AbstractNamedOperation", "com.hazelcast.spi.impl.AbstractNamedOperation()"], ["java.lang.String", "com.hazelcast.spi.impl.AbstractNamedOperation.getName()"], ["com.hazelcast.spi.impl.CountingMigrationAwareService", "com.hazelcast.spi.impl.CountingMigrationAwareService(com.hazelcast.spi.FragmentedMigrationAwareService)"], ["boolean", "com.hazelcast.spi.impl.CountingMigrationAwareService.isKnownServiceNamespace(com.hazelcast.spi.ServiceNamespace)"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.CountingMigrationAwareService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.CountingMigrationAwareService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent, java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.spi.impl.CountingMigrationAwareService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.spi.impl.CountingMigrationAwareService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.spi.impl.CountingMigrationAwareService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["int", "com.hazelcast.spi.impl.CountingMigrationAwareService.getMigrationStamp()"], ["boolean", "com.hazelcast.spi.impl.CountingMigrationAwareService.validateMigrationStamp(int)"], ["com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier.backupHandler()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier.responseQueueSize()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["com.hazelcast.spi.impl.PacketHandler", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier.get()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier.start()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier.shutdown()"], ["com.hazelcast.util.concurrent.IdleStrategy", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier.getIdleStrategy(com.hazelcast.spi.properties.HazelcastProperties, com.hazelcast.spi.properties.HazelcastProperty)"], ["java.lang.Object", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier.get()"], ["com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$PartitionResponse", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$PartitionResponse()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$PartitionResponse.addResults(java.util.Map<java.lang.Integer, java.lang.Object>)"], ["java.lang.Object[]", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$PartitionResponse.getResults()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$PartitionResponse.getFactoryId()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$PartitionResponse.getId()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$PartitionResponse.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$PartitionResponse.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$1.toString()"], ["com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory()"], ["com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory.createFactoryOnRunner(com.hazelcast.spi.NodeEngine, int[])"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory.createOperation()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$OperationResponseHandlerImpl.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation()"], ["com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation(com.hazelcast.spi.OperationFactory, int[])"], ["com.hazelcast.spi.OperationFactory", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation.getOperationFactory()"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation.returnsResponse()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation.run()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation.onExecutionFailure(java.lang.Throwable)"], ["int", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation.getFactoryId()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation.getId()"], ["com.hazelcast.spi.impl.operationservice.impl.operations.Backup", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup()"], ["com.hazelcast.spi.impl.operationservice.impl.operations.Backup", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup(com.hazelcast.spi.Operation, com.hazelcast.nio.Address, long[], boolean)"], ["com.hazelcast.spi.impl.operationservice.impl.operations.Backup", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.Address, long[], boolean)"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.getBackupOp()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.beforeRun()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.run()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.afterRun()"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.returnsResponse()"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.validatesTarget()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.onExecutionFailure(java.lang.Throwable)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.logError(java.lang.Throwable)"], ["int", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.getFactoryId()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.operations.Backup.getId()"], ["com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory", "com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareFactoryAccessor.extractPartitionAware(com.hazelcast.spi.OperationFactory)"], ["java.lang.Thread", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor$1.newThread(java.lang.Runnable)"], ["com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry(com.hazelcast.logging.ILogger, com.hazelcast.spi.impl.sequence.CallIdSequence)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry.register(com.hazelcast.spi.impl.operationservice.impl.Invocation)"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry.deregister(com.hazelcast.spi.impl.operationservice.impl.Invocation)"], ["int", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry.size()"], ["java.util.Set<java.util.Map$Entry<java.lang.Long, com.hazelcast.spi.impl.operationservice.impl.Invocation>>", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry.entrySet()"], ["com.hazelcast.spi.impl.operationservice.impl.Invocation", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry.get(long)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry.reset(java.lang.Throwable)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry.shutdown()"], ["java.lang.String", "com.hazelcast.spi.impl.operationservice.impl.InvocationConstant.toString()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OutboundResponseHandler.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.OutboundResponseHandler.send(com.hazelcast.nio.Address, com.hazelcast.spi.impl.operationservice.impl.responses.Response)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OutboundResponseHandler.sendBackupAck(com.hazelcast.nio.Address, long, boolean)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor$MonitorInvocationsTask.run0()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor$FixedRateMonitorTask.run()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse", "com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse", "com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse(java.lang.Throwable, long, boolean)"], ["java.lang.Throwable", "com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.getCause()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.getId()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.toString()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.CallTimeoutResponse", "com.hazelcast.spi.impl.operationservice.impl.responses.CallTimeoutResponse()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.CallTimeoutResponse", "com.hazelcast.spi.impl.operationservice.impl.responses.CallTimeoutResponse(long, boolean)"], ["int", "com.hazelcast.spi.impl.operationservice.impl.responses.CallTimeoutResponse.getFactoryId()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.responses.CallTimeoutResponse.getId()"], ["java.lang.String", "com.hazelcast.spi.impl.operationservice.impl.responses.CallTimeoutResponse.toString()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse", "com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse", "com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse(java.lang.Object, long, int, boolean)"], ["java.lang.Object", "com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse.getValue()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse.getBackupAcks()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse.getId()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse.toString()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.BackupAckResponse", "com.hazelcast.spi.impl.operationservice.impl.responses.BackupAckResponse()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.BackupAckResponse", "com.hazelcast.spi.impl.operationservice.impl.responses.BackupAckResponse(long, boolean)"], ["int", "com.hazelcast.spi.impl.operationservice.impl.responses.BackupAckResponse.getId()"], ["java.lang.String", "com.hazelcast.spi.impl.operationservice.impl.responses.BackupAckResponse.toString()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.Response", "com.hazelcast.spi.impl.operationservice.impl.responses.Response()"], ["com.hazelcast.spi.impl.operationservice.impl.responses.Response", "com.hazelcast.spi.impl.operationservice.impl.responses.Response(long, boolean)"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.responses.Response.isUrgent()"], ["long", "com.hazelcast.spi.impl.operationservice.impl.responses.Response.getCallId()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.responses.Response.getFactoryId()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.responses.Response.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.responses.Response.readData(com.hazelcast.nio.ObjectDataInput)"], ["long", "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.executedOperationsCount()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(java.lang.Runnable)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl.run(com.hazelcast.nio.Packet)"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.impl.operationservice.impl.PartitionInvocation.getTarget()"], ["com.hazelcast.spi.impl.operationservice.impl.Invocation$HeartbeatTimeout[]", "com.hazelcast.spi.impl.operationservice.impl.Invocation$HeartbeatTimeout.values()"], ["com.hazelcast.spi.impl.operationservice.impl.Invocation$HeartbeatTimeout", "com.hazelcast.spi.impl.operationservice.impl.Invocation$HeartbeatTimeout.valueOf(java.lang.String)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.Invocation$InvocationRetryTask.run()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler.handle(com.hazelcast.nio.Packet)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler.notifyBackupComplete(long)"], ["java.util.concurrent.ConcurrentMap<com.hazelcast.nio.Address, java.util.concurrent.atomic.AtomicLong>", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor.getHeartbeatPerMember()"], ["long", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor.getHeartbeatBroadcastPeriodMillis()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor.handle(com.hazelcast.nio.Packet)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor.start()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor.shutdown()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor.awaitTermination(long)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.run()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor$MonitorTask.run()"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.impl.operationservice.impl.TargetInvocation.getTarget()"], ["com.hazelcast.spi.impl.operationexecutor.OperationRunner", "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerFactoryImpl.createAdHocRunner()"], ["com.hazelcast.spi.impl.operationexecutor.OperationRunner", "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerFactoryImpl.createPartitionRunner(int)"], ["com.hazelcast.spi.impl.operationexecutor.OperationRunner", "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerFactoryImpl.createGenericRunner()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor$OnMemberLeftTask.run0()"], ["com.hazelcast.spi.impl.operationservice.impl.OutboundOperationHandler", "com.hazelcast.spi.impl.operationservice.impl.OutboundOperationHandler(com.hazelcast.instance.Node, com.hazelcast.nio.Address, com.hazelcast.internal.serialization.InternalSerializationService)"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.OutboundOperationHandler.send(com.hazelcast.spi.Operation, com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.OutboundOperationHandler.send(com.hazelcast.spi.Operation, com.hazelcast.nio.Connection)"], ["com.hazelcast.spi.impl.operationservice.impl.batching.PartitionAwareCallableBatchingRunnable", "com.hazelcast.spi.impl.operationservice.impl.batching.PartitionAwareCallableBatchingRunnable(com.hazelcast.spi.NodeEngine, com.hazelcast.spi.impl.operationservice.impl.batching.PartitionAwareCallableFactory)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.batching.PartitionAwareCallableBatchingRunnable.run()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.spi.impl.operationservice.impl.batching.PartitionAwareCallableBatchingRunnable.getFuture()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$AsyncSingleThreadedResponseHandler.handle(com.hazelcast.nio.Packet)"], ["com.hazelcast.spi.InternalCompletableFuture", "com.hazelcast.spi.impl.operationservice.impl.InvocationBuilderImpl.invoke()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor$ProcessOperationControlTask.run0()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor$BroadcastOperationControlTask.run0()"], ["com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl(com.hazelcast.spi.impl.NodeEngineImpl)"], ["com.hazelcast.spi.impl.operationservice.impl.OutboundResponseHandler", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getOutboundResponseHandler()"], ["com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getInboundResponseHandlerSupplier()"], ["com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getInvocationMonitor()"], ["com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getInvocationRegistry()"], ["com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getBackupHandler()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getPartitionThreadCount()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getGenericThreadCount()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getRunningOperationsCount()"], ["long", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getExecutedOperationCount()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getRemoteOperationsCount()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getOperationExecutorQueueSize()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getPriorityOperationExecutorQueueSize()"], ["com.hazelcast.spi.impl.operationexecutor.OperationExecutor", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getOperationExecutor()"], ["int", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.getResponseQueueSize()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.populate(com.hazelcast.spi.LiveOperations)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.execute(com.hazelcast.spi.impl.PartitionSpecificRunnable)"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.createInvocationBuilder(java.lang.String, com.hazelcast.spi.Operation, int)"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.createInvocationBuilder(java.lang.String, com.hazelcast.spi.Operation, com.hazelcast.nio.Address)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.run(com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.execute(com.hazelcast.spi.Operation)"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.isRunAllowed(com.hazelcast.spi.Operation)"], ["<E> com.hazelcast.spi.InternalCompletableFuture<E>", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnPartition(java.lang.String, com.hazelcast.spi.Operation, int)"], ["<E> com.hazelcast.spi.InternalCompletableFuture<E>", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnPartition(com.hazelcast.spi.Operation)"], ["<E> com.hazelcast.spi.InternalCompletableFuture<E>", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnTarget(java.lang.String, com.hazelcast.spi.Operation, com.hazelcast.nio.Address)"], ["<V> void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.asyncInvokeOnPartition(java.lang.String, com.hazelcast.spi.Operation, int, com.hazelcast.core.ExecutionCallback<V>)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.onStartAsyncOperation(com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.onCompletionAsyncOperation(com.hazelcast.spi.Operation)"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.isCallTimedOut(com.hazelcast.spi.Operation)"], ["java.util.Map<java.lang.Integer, java.lang.Object>", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnAllPartitions(java.lang.String, com.hazelcast.spi.OperationFactory)"], ["java.util.Map<java.lang.Integer, java.lang.Object>", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnPartitions(java.lang.String, com.hazelcast.spi.OperationFactory, java.util.Collection<java.lang.Integer>)"], ["java.util.Map<java.lang.Integer, java.lang.Object>", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.invokeOnPartitions(java.lang.String, com.hazelcast.spi.OperationFactory, int[])"], ["boolean", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.send(com.hazelcast.spi.Operation, com.hazelcast.nio.Address)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.onMemberLeft(com.hazelcast.instance.MemberImpl)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.reset()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.start()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.shutdownInvocations()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl.shutdownOperationExecutor()"], ["void", "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$AsyncMultithreadedResponseHandler.handle(com.hazelcast.nio.Packet)"], ["void", "com.hazelcast.spi.impl.operationservice.impl.Invocation.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["com.hazelcast.spi.impl.operationservice.impl.InvocationFuture", "com.hazelcast.spi.impl.operationservice.impl.Invocation.invoke()"], ["com.hazelcast.spi.impl.operationservice.impl.InvocationFuture", "com.hazelcast.spi.impl.operationservice.impl.Invocation.invokeAsync()"], ["java.lang.String", "com.hazelcast.spi.impl.operationservice.impl.Invocation.toString()"], ["com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl(com.hazelcast.spi.properties.HazelcastProperties, com.hazelcast.logging.LoggingService, com.hazelcast.nio.Address, com.hazelcast.spi.impl.operationexecutor.OperationRunnerFactory, com.hazelcast.instance.NodeExtension, java.lang.String, java.lang.ClassLoader)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["com.hazelcast.spi.impl.operationexecutor.OperationRunner[]", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getPartitionOperationRunners()"], ["com.hazelcast.spi.impl.operationexecutor.OperationRunner[]", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getGenericOperationRunners()"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.populate(com.hazelcast.spi.LiveOperations)"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getRunningOperationCount()"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getQueueSize()"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getPriorityQueueSize()"], ["long", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getExecutedOperationCount()"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getPartitionThreadCount()"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getGenericThreadCount()"], ["boolean", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.isOperationThread()"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.getPartitionThreadId(int)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.execute(com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.execute(com.hazelcast.spi.impl.PartitionSpecificRunnable)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.handle(com.hazelcast.nio.Packet)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.executeOnPartitionThreads(java.lang.Runnable)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.interruptPartitionThreads()"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.run(com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.runOrExecute(com.hazelcast.spi.Operation)"], ["boolean", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.isRunAllowed(com.hazelcast.spi.Operation)"], ["boolean", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.isInvocationAllowed(com.hazelcast.spi.Operation, boolean)"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.toPartitionThreadIndex(int)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.start()"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.shutdown()"], ["java.lang.String", "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl.toString()"], ["com.hazelcast.spi.impl.operationexecutor.impl.PartitionOperationThread", "com.hazelcast.spi.impl.operationexecutor.impl.PartitionOperationThread(java.lang.String, int, com.hazelcast.spi.impl.operationexecutor.impl.OperationQueue, com.hazelcast.logging.ILogger, com.hazelcast.instance.NodeExtension, com.hazelcast.spi.impl.operationexecutor.OperationRunner[], java.lang.ClassLoader)"], ["com.hazelcast.spi.impl.operationexecutor.OperationRunner", "com.hazelcast.spi.impl.operationexecutor.impl.PartitionOperationThread.getOperationRunner(int)"], ["java.lang.String", "com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue$1.toString()"], ["com.hazelcast.spi.impl.operationexecutor.impl.OperationThread", "com.hazelcast.spi.impl.operationexecutor.impl.OperationThread(java.lang.String, int, com.hazelcast.spi.impl.operationexecutor.impl.OperationQueue, com.hazelcast.logging.ILogger, com.hazelcast.instance.NodeExtension, boolean, java.lang.ClassLoader)"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.getThreadId()"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.run()"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.shutdown()"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.OperationThread.awaitTermination(int, java.util.concurrent.TimeUnit)"], ["com.hazelcast.spi.impl.operationexecutor.impl.GenericOperationThread", "com.hazelcast.spi.impl.operationexecutor.impl.GenericOperationThread(java.lang.String, int, com.hazelcast.spi.impl.operationexecutor.impl.OperationQueue, com.hazelcast.logging.ILogger, com.hazelcast.instance.NodeExtension, com.hazelcast.spi.impl.operationexecutor.OperationRunner, boolean, java.lang.ClassLoader)"], ["com.hazelcast.spi.impl.operationexecutor.OperationRunner", "com.hazelcast.spi.impl.operationexecutor.impl.GenericOperationThread.getOperationRunner(int)"], ["com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue", "com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue()"], ["com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue", "com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue(java.util.concurrent.BlockingQueue<java.lang.Object>, java.util.Queue<java.lang.Object>)"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue.normalSize()"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue.prioritySize()"], ["int", "com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue.size()"], ["void", "com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue.add(java.lang.Object, boolean)"], ["java.lang.Object", "com.hazelcast.spi.impl.operationexecutor.impl.DefaultOperationQueue.take(boolean)"], ["com.hazelcast.spi.impl.operationexecutor.OperationRunner", "com.hazelcast.spi.impl.operationexecutor.OperationRunner(int)"], ["java.lang.Object", "com.hazelcast.spi.impl.operationexecutor.OperationRunner.currentTask()"], ["void", "com.hazelcast.spi.impl.operationexecutor.OperationRunner.setCurrentThread(java.lang.Thread)"], ["java.lang.Thread", "com.hazelcast.spi.impl.operationexecutor.OperationRunner.currentThread()"], ["int", "com.hazelcast.spi.impl.operationexecutor.OperationRunner.getPartitionId()"], ["com.hazelcast.spi.impl.operationexecutor.slowoperationdetector.SlowOperationDetector", "com.hazelcast.spi.impl.operationexecutor.slowoperationdetector.SlowOperationDetector(com.hazelcast.logging.LoggingService, com.hazelcast.spi.impl.operationexecutor.OperationRunner[], com.hazelcast.spi.impl.operationexecutor.OperationRunner[], com.hazelcast.spi.properties.HazelcastProperties, java.lang.String)"], ["void", "com.hazelcast.spi.impl.operationexecutor.slowoperationdetector.SlowOperationDetector.start()"], ["void", "com.hazelcast.spi.impl.operationexecutor.slowoperationdetector.SlowOperationDetector.shutdown()"], ["void", "com.hazelcast.spi.impl.operationexecutor.slowoperationdetector.SlowOperationDetector$DetectorThread.run()"], ["com.hazelcast.spi.impl.SpiDataSerializerHook", "com.hazelcast.spi.impl.SpiDataSerializerHook()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.spi.impl.SpiDataSerializerHook.createFactory()"], ["int", "com.hazelcast.spi.impl.SpiDataSerializerHook.getFactoryId()"], ["com.hazelcast.spi.impl.PortablePartitionLostEvent", "com.hazelcast.spi.impl.PortablePartitionLostEvent()"], ["com.hazelcast.spi.impl.PortablePartitionLostEvent", "com.hazelcast.spi.impl.PortablePartitionLostEvent(int, int, com.hazelcast.nio.Address)"], ["int", "com.hazelcast.spi.impl.PortablePartitionLostEvent.getPartitionId()"], ["int", "com.hazelcast.spi.impl.PortablePartitionLostEvent.getLostBackupCount()"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.impl.PortablePartitionLostEvent.getSource()"], ["int", "com.hazelcast.spi.impl.PortablePartitionLostEvent.getFactoryId()"], ["int", "com.hazelcast.spi.impl.PortablePartitionLostEvent.getClassId()"], ["void", "com.hazelcast.spi.impl.PortablePartitionLostEvent.writePortable(com.hazelcast.nio.serialization.PortableWriter)"], ["void", "com.hazelcast.spi.impl.PortablePartitionLostEvent.readPortable(com.hazelcast.nio.serialization.PortableReader)"], ["com.hazelcast.spi.OperationResponseHandler", "com.hazelcast.spi.impl.OperationResponseHandlerFactory.createEmptyResponseHandler()"], ["com.hazelcast.spi.OperationResponseHandler", "com.hazelcast.spi.impl.OperationResponseHandlerFactory.createErrorLoggingResponseHandler(com.hazelcast.logging.ILogger)"], ["com.hazelcast.spi.impl.UnmodifiableLazyList", "com.hazelcast.spi.impl.UnmodifiableLazyList()"], ["com.hazelcast.spi.impl.UnmodifiableLazyList", "com.hazelcast.spi.impl.UnmodifiableLazyList(java.util.List, com.hazelcast.spi.serialization.SerializationService)"], ["int", "com.hazelcast.spi.impl.UnmodifiableLazyList.size()"], ["boolean", "com.hazelcast.spi.impl.UnmodifiableLazyList.remove(java.lang.Object)"], ["boolean", "com.hazelcast.spi.impl.UnmodifiableLazyList.removeAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.spi.impl.UnmodifiableLazyList.retainAll(java.util.Collection<?>)"], ["void", "com.hazelcast.spi.impl.UnmodifiableLazyList.clear()"], ["E", "com.hazelcast.spi.impl.UnmodifiableLazyList.get(int)"], ["void", "com.hazelcast.spi.impl.UnmodifiableLazyList.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.UnmodifiableLazyList.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.impl.UnmodifiableLazyList.getFactoryId()"], ["int", "com.hazelcast.spi.impl.UnmodifiableLazyList.getId()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperationSupplier", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperationSupplier(com.hazelcast.spi.impl.eventservice.impl.Registration, com.hazelcast.internal.cluster.ClusterService)"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperationSupplier.get()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation", "com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation", "com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation(java.util.Collection<com.hazelcast.spi.impl.eventservice.impl.Registration>)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation.run()"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation.returnsResponse()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation.getFactoryId()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation.getId()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperation", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperation()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperation", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperation(java.lang.String, java.lang.String, int)"], ["java.lang.Object", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperation.getResponse()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperation.getId()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperation.getFactoryId()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperation.onInvocationException(java.lang.Throwable)"], ["com.hazelcast.spi.impl.eventservice.impl.operations.SendEventOperation", "com.hazelcast.spi.impl.eventservice.impl.operations.SendEventOperation()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.SendEventOperation", "com.hazelcast.spi.impl.eventservice.impl.operations.SendEventOperation(com.hazelcast.spi.impl.eventservice.impl.EventEnvelope, int)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.operations.SendEventOperation.run()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.SendEventOperation.getFactoryId()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.SendEventOperation.getId()"], ["void", "com.hazelcast.spi.impl.eventservice.impl.operations.AbstractRegistrationOperation.run()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.spi.impl.eventservice.impl.operations.AbstractRegistrationOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.AbstractRegistrationOperation.getFactoryId()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperationSupplier", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperationSupplier(com.hazelcast.spi.impl.eventservice.impl.Registration, com.hazelcast.internal.cluster.ClusterService)"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperationSupplier.get()"], ["java.lang.Object", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperationSupplier.get()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperation", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperation()"], ["com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperation", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperation(com.hazelcast.spi.impl.eventservice.impl.Registration, int)"], ["java.lang.Object", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperation.getResponse()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperation.getId()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperation.getFactoryId()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperation.onInvocationException(java.lang.Throwable)"], ["com.hazelcast.spi.impl.eventservice.impl.Registration", "com.hazelcast.spi.impl.eventservice.impl.Registration()"], ["com.hazelcast.spi.impl.eventservice.impl.Registration", "com.hazelcast.spi.impl.eventservice.impl.Registration(java.lang.String, java.lang.String, java.lang.String, com.hazelcast.spi.EventFilter, com.hazelcast.nio.Address, java.lang.Object, boolean)"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.Registration.getServiceName()"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.Registration.getTopic()"], ["com.hazelcast.spi.EventFilter", "com.hazelcast.spi.impl.eventservice.impl.Registration.getFilter()"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.Registration.getId()"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.impl.eventservice.impl.Registration.getSubscriber()"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.Registration.isLocalOnly()"], ["java.lang.Object", "com.hazelcast.spi.impl.eventservice.impl.Registration.getListener()"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.Registration.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.eventservice.impl.Registration.hashCode()"], ["void", "com.hazelcast.spi.impl.eventservice.impl.Registration.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.Registration.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.Registration.toString()"], ["com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl(com.hazelcast.spi.impl.NodeEngineImpl)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.close(com.hazelcast.spi.EventRegistration)"], ["int", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.getEventThreadCount()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.getEventQueueCapacity()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.getEventQueueSize()"], ["com.hazelcast.spi.EventRegistration", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.registerLocalListener(java.lang.String, java.lang.String, java.lang.Object)"], ["com.hazelcast.spi.EventRegistration", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.registerLocalListener(java.lang.String, java.lang.String, com.hazelcast.spi.EventFilter, java.lang.Object)"], ["com.hazelcast.spi.EventRegistration", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.registerListener(java.lang.String, java.lang.String, java.lang.Object)"], ["com.hazelcast.spi.EventRegistration", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.registerListener(java.lang.String, java.lang.String, com.hazelcast.spi.EventFilter, java.lang.Object)"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.handleRegistration(com.hazelcast.spi.impl.eventservice.impl.Registration)"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.deregisterListener(java.lang.String, java.lang.String, java.lang.Object)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.deregisterAllListeners(java.lang.String, java.lang.String)"], ["com.hazelcast.util.executor.StripedExecutor", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.getEventExecutor()"], ["com.hazelcast.spi.EventRegistration[]", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.getRegistrationsAsArray(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.hasEventRegistration(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.publishEvent(java.lang.String, java.lang.String, java.lang.Object, int)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.publishEvent(java.lang.String, com.hazelcast.spi.EventRegistration, java.lang.Object, int)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.publishEvent(java.lang.String, java.util.Collection<com.hazelcast.spi.EventRegistration>, java.lang.Object, int)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.publishRemoteEvent(java.lang.String, java.util.Collection<com.hazelcast.spi.EventRegistration>, java.lang.Object, int)"], ["com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.getSegment(java.lang.String, boolean)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.executeEventCallback(java.lang.Runnable)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.handle(com.hazelcast.nio.Packet)"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.getPreJoinOperation()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.getPostJoinOperation()"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.shutdown()"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl.onMemberLeft(com.hazelcast.instance.MemberImpl)"], ["java.lang.Object", "com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment$1.createNew(java.lang.Object)"], ["com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter()"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter.eval(java.lang.Object)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter.hashCode()"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter.toString()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter.getFactoryId()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter.getId()"], ["com.hazelcast.spi.impl.eventservice.impl.RemoteEventProcessor", "com.hazelcast.spi.impl.eventservice.impl.RemoteEventProcessor(com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl, com.hazelcast.nio.Packet)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.RemoteEventProcessor.run()"], ["com.hazelcast.spi.impl.eventservice.impl.EventProcessor", "com.hazelcast.spi.impl.eventservice.impl.EventProcessor(com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl, com.hazelcast.spi.impl.eventservice.impl.EventEnvelope, int)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventProcessor.run()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.EventProcessor.getKey()"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.EventProcessor.toString()"], ["com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher", "com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher(com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl, java.lang.String, java.lang.Object, java.lang.Object, int, long)"], ["long", "com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher.getTimeout()"], ["java.util.concurrent.TimeUnit", "com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher.getTimeUnit()"], ["void", "com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher.run()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher.getKey()"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher.getServiceName()"], ["java.lang.Object", "com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher.getEvent()"], ["com.hazelcast.spi.impl.eventservice.impl.FutureUtilExceptionHandler", "com.hazelcast.spi.impl.eventservice.impl.FutureUtilExceptionHandler(com.hazelcast.logging.ILogger, java.lang.String)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.FutureUtilExceptionHandler.handleException(java.lang.Throwable)"], ["com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment", "com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment(java.lang.String, S)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.spi.impl.eventservice.impl.Registration>", "com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment.getRegistrationIdMap()"], ["java.util.concurrent.ConcurrentMap<java.lang.String, java.util.Collection<com.hazelcast.spi.impl.eventservice.impl.Registration>>", "com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment.getRegistrations()"], ["boolean", "com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment.addRegistration(java.lang.String, com.hazelcast.spi.impl.eventservice.impl.Registration)"], ["com.hazelcast.spi.impl.eventservice.impl.Registration", "com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment.removeRegistration(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.impl.eventservice.impl.EventEnvelope", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope()"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope.getServiceName()"], ["java.lang.Object", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope.getEvent()"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope.getEventId()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope.getFactoryId()"], ["int", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope.getId()"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.spi.impl.eventservice.impl.EventEnvelope.toString()"], ["com.hazelcast.spi.impl.SimpleExecutionCallback", "com.hazelcast.spi.impl.SimpleExecutionCallback()"], ["void", "com.hazelcast.spi.impl.SimpleExecutionCallback.onResponse(E)"], ["void", "com.hazelcast.spi.impl.SimpleExecutionCallback.onFailure(java.lang.Throwable)"], ["com.hazelcast.spi.impl.AbstractCompletableFuture$ExecutionCallbackRunnable", "com.hazelcast.spi.impl.AbstractCompletableFuture$ExecutionCallbackRunnable(java.lang.Class<?>, java.lang.Object, com.hazelcast.core.ExecutionCallback<V>, com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.spi.impl.AbstractCompletableFuture$ExecutionCallbackRunnable.run()"], ["com.hazelcast.spi.properties.HazelcastProperties", "com.hazelcast.spi.properties.HazelcastProperties(com.hazelcast.config.Config)"], ["com.hazelcast.spi.properties.HazelcastProperties", "com.hazelcast.spi.properties.HazelcastProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.spi.properties.HazelcastProperties.get(java.lang.String)"], ["java.lang.String", "com.hazelcast.spi.properties.HazelcastProperties.getString(com.hazelcast.spi.properties.HazelcastProperty)"], ["boolean", "com.hazelcast.spi.properties.HazelcastProperties.getBoolean(com.hazelcast.spi.properties.HazelcastProperty)"], ["int", "com.hazelcast.spi.properties.HazelcastProperties.getInteger(com.hazelcast.spi.properties.HazelcastProperty)"], ["long", "com.hazelcast.spi.properties.HazelcastProperties.getLong(com.hazelcast.spi.properties.HazelcastProperty)"], ["float", "com.hazelcast.spi.properties.HazelcastProperties.getFloat(com.hazelcast.spi.properties.HazelcastProperty)"], ["double", "com.hazelcast.spi.properties.HazelcastProperties.getDouble(com.hazelcast.spi.properties.HazelcastProperty)"], ["long", "com.hazelcast.spi.properties.HazelcastProperties.getNanos(com.hazelcast.spi.properties.HazelcastProperty)"], ["long", "com.hazelcast.spi.properties.HazelcastProperties.getMillis(com.hazelcast.spi.properties.HazelcastProperty)"], ["int", "com.hazelcast.spi.properties.HazelcastProperties.getSeconds(com.hazelcast.spi.properties.HazelcastProperty)"], ["<E extends java.lang.Enum> E", "com.hazelcast.spi.properties.HazelcastProperties.getEnum(com.hazelcast.spi.properties.HazelcastProperty, java.lang.Class<E>)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String, boolean)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String, java.lang.Integer)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String, java.lang.Byte)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String, java.lang.Integer, java.util.concurrent.TimeUnit)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String, java.lang.Long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String, com.hazelcast.spi.properties.HazelcastProperty)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty(java.lang.String, java.lang.String, java.util.concurrent.TimeUnit, com.hazelcast.spi.properties.HazelcastProperty)"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty.setDeprecatedName(java.lang.String)"], ["java.lang.String", "com.hazelcast.spi.properties.HazelcastProperty.getDeprecatedName()"], ["java.lang.String", "com.hazelcast.spi.properties.HazelcastProperty.getName()"], ["java.lang.String", "com.hazelcast.spi.properties.HazelcastProperty.getDefaultValue()"], ["java.util.concurrent.TimeUnit", "com.hazelcast.spi.properties.HazelcastProperty.getTimeUnit()"], ["com.hazelcast.spi.properties.HazelcastProperty", "com.hazelcast.spi.properties.HazelcastProperty.getParent()"], ["void", "com.hazelcast.spi.properties.HazelcastProperty.setSystemProperty(java.lang.String)"], ["java.lang.String", "com.hazelcast.spi.properties.HazelcastProperty.getSystemProperty()"], ["java.lang.String", "com.hazelcast.spi.properties.HazelcastProperty.toString()"], ["com.hazelcast.spi.partition.IPartitionLostEvent", "com.hazelcast.spi.partition.IPartitionLostEvent()"], ["com.hazelcast.spi.partition.IPartitionLostEvent", "com.hazelcast.spi.partition.IPartitionLostEvent(int, int, com.hazelcast.nio.Address)"], ["int", "com.hazelcast.spi.partition.IPartitionLostEvent.getPartitionId()"], ["int", "com.hazelcast.spi.partition.IPartitionLostEvent.getLostReplicaIndex()"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.partition.IPartitionLostEvent.getEventSource()"], ["void", "com.hazelcast.spi.partition.IPartitionLostEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.partition.IPartitionLostEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.spi.partition.IPartitionLostEvent.toString()"], ["com.hazelcast.spi.partition.MigrationEndpoint[]", "com.hazelcast.spi.partition.MigrationEndpoint.values()"], ["com.hazelcast.spi.partition.MigrationEndpoint", "com.hazelcast.spi.partition.MigrationEndpoint.valueOf(java.lang.String)"], ["void", "com.hazelcast.spi.partition.MigrationEndpoint.writeTo(com.hazelcast.spi.partition.MigrationEndpoint, java.io.DataOutput)"], ["com.hazelcast.spi.partition.MigrationEndpoint", "com.hazelcast.spi.partition.MigrationEndpoint.readFrom(java.io.DataInput)"], ["boolean", "com.hazelcast.spi.Operation.executedLocally()"], ["boolean", "com.hazelcast.spi.Operation.isUrgent()"], ["void", "com.hazelcast.spi.Operation.beforeRun()"], ["void", "com.hazelcast.spi.Operation.run()"], ["com.hazelcast.spi.CallStatus", "com.hazelcast.spi.Operation.call()"], ["void", "com.hazelcast.spi.Operation.afterRun()"], ["boolean", "com.hazelcast.spi.Operation.returnsResponse()"], ["java.lang.Object", "com.hazelcast.spi.Operation.getResponse()"], ["java.lang.String", "com.hazelcast.spi.Operation.getServiceName()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.Operation.setServiceName(java.lang.String)"], ["int", "com.hazelcast.spi.Operation.getPartitionId()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.Operation.setPartitionId(int)"], ["int", "com.hazelcast.spi.Operation.getReplicaIndex()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.Operation.setReplicaIndex(int)"], ["long", "com.hazelcast.spi.Operation.getCallId()"], ["boolean", "com.hazelcast.spi.Operation.validatesTarget()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.Operation.setValidateTarget(boolean)"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.spi.Operation.getNodeEngine()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.Operation.setNodeEngine(com.hazelcast.spi.NodeEngine)"], ["<T> T", "com.hazelcast.spi.Operation.getService()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.Operation.setService(java.lang.Object)"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.Operation.getCallerAddress()"], ["com.hazelcast.nio.Connection", "com.hazelcast.spi.Operation.getConnection()"], ["com.hazelcast.spi.OperationResponseHandler", "com.hazelcast.spi.Operation.getOperationResponseHandler()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.Operation.setOperationResponseHandler(com.hazelcast.spi.OperationResponseHandler)"], ["void", "com.hazelcast.spi.Operation.sendResponse(java.lang.Object)"], ["long", "com.hazelcast.spi.Operation.getInvocationTime()"], ["long", "com.hazelcast.spi.Operation.getCallTimeout()"], ["long", "com.hazelcast.spi.Operation.getWaitTimeout()"], ["void", "com.hazelcast.spi.Operation.setWaitTimeout(long)"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.spi.Operation.onInvocationException(java.lang.Throwable)"], ["java.lang.String", "com.hazelcast.spi.Operation.getCallerUuid()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.Operation.setCallerUuid(java.lang.String)"], ["void", "com.hazelcast.spi.Operation.onExecutionFailure(java.lang.Throwable)"], ["void", "com.hazelcast.spi.Operation.logError(java.lang.Throwable)"], ["void", "com.hazelcast.spi.Operation.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.Operation.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.spi.Operation.toString()"], ["com.hazelcast.spi.CallStatus[]", "com.hazelcast.spi.CallStatus.values()"], ["com.hazelcast.spi.CallStatus", "com.hazelcast.spi.CallStatus.valueOf(java.lang.String)"], ["com.hazelcast.spi.PartitionMigrationEvent", "com.hazelcast.spi.PartitionMigrationEvent(com.hazelcast.spi.partition.MigrationEndpoint, int, int, int)"], ["com.hazelcast.spi.partition.MigrationEndpoint", "com.hazelcast.spi.PartitionMigrationEvent.getMigrationEndpoint()"], ["int", "com.hazelcast.spi.PartitionMigrationEvent.getPartitionId()"], ["int", "com.hazelcast.spi.PartitionMigrationEvent.getCurrentReplicaIndex()"], ["int", "com.hazelcast.spi.PartitionMigrationEvent.getNewReplicaIndex()"], ["boolean", "com.hazelcast.spi.PartitionMigrationEvent.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.PartitionMigrationEvent.hashCode()"], ["java.lang.String", "com.hazelcast.spi.PartitionMigrationEvent.toString()"], ["java.lang.String", "com.hazelcast.spi.AbstractWaitNotifyKey.getServiceName()"], ["java.lang.String", "com.hazelcast.spi.AbstractWaitNotifyKey.getObjectName()"], ["boolean", "com.hazelcast.spi.AbstractWaitNotifyKey.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.AbstractWaitNotifyKey.hashCode()"], ["void", "com.hazelcast.spi.OperationAccessor.setCallerAddress(com.hazelcast.spi.Operation, com.hazelcast.nio.Address)"], ["void", "com.hazelcast.spi.OperationAccessor.setConnection(com.hazelcast.spi.Operation, com.hazelcast.nio.Connection)"], ["void", "com.hazelcast.spi.OperationAccessor.setCallId(com.hazelcast.spi.Operation, long)"], ["boolean", "com.hazelcast.spi.OperationAccessor.deactivate(com.hazelcast.spi.Operation)"], ["boolean", "com.hazelcast.spi.OperationAccessor.hasActiveInvocation(com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.spi.OperationAccessor.setInvocationTime(com.hazelcast.spi.Operation, long)"], ["void", "com.hazelcast.spi.OperationAccessor.setCallTimeout(com.hazelcast.spi.Operation, long)"], ["com.hazelcast.spi.CallsPerMember", "com.hazelcast.spi.CallsPerMember(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.spi.CallsPerMember.add(com.hazelcast.nio.Address, long)"], ["void", "com.hazelcast.spi.CallsPerMember.addOpToCancel(com.hazelcast.nio.Address, long)"], ["com.hazelcast.spi.OperationControl", "com.hazelcast.spi.CallsPerMember.toOpControl(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.spi.CallsPerMember.clear()"], ["void", "com.hazelcast.spi.CallsPerMember.ensureMember(com.hazelcast.nio.Address)"], ["com.hazelcast.spi.CallsPerMember$CategorizedCallIds", "com.hazelcast.spi.CallsPerMember.getOrCreateCallIdsForMember(com.hazelcast.nio.Address)"], ["com.hazelcast.spi.DistributedObjectNamespace", "com.hazelcast.spi.DistributedObjectNamespace()"], ["com.hazelcast.spi.DistributedObjectNamespace", "com.hazelcast.spi.DistributedObjectNamespace(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.DistributedObjectNamespace", "com.hazelcast.spi.DistributedObjectNamespace(com.hazelcast.spi.ObjectNamespace)"], ["void", "com.hazelcast.spi.DistributedObjectNamespace.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.DistributedObjectNamespace.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.spi.DistributedObjectNamespace.getFactoryId()"], ["int", "com.hazelcast.spi.DistributedObjectNamespace.getId()"], ["com.hazelcast.spi.ExceptionAction[]", "com.hazelcast.spi.ExceptionAction.values()"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.spi.ExceptionAction.valueOf(java.lang.String)"], ["com.hazelcast.spi.MemberAttributeServiceEvent", "com.hazelcast.spi.MemberAttributeServiceEvent()"], ["com.hazelcast.spi.MemberAttributeServiceEvent", "com.hazelcast.spi.MemberAttributeServiceEvent(com.hazelcast.core.Cluster, com.hazelcast.instance.MemberImpl, com.hazelcast.cluster.MemberAttributeOperationType, java.lang.String, java.lang.Object)"], ["com.hazelcast.spi.PartitionReplicationEvent", "com.hazelcast.spi.PartitionReplicationEvent(int, int)"], ["int", "com.hazelcast.spi.PartitionReplicationEvent.getPartitionId()"], ["int", "com.hazelcast.spi.PartitionReplicationEvent.getReplicaIndex()"], ["java.lang.String", "com.hazelcast.spi.PartitionReplicationEvent.toString()"], ["com.hazelcast.spi.AbstractLocalOperation", "com.hazelcast.spi.AbstractLocalOperation()"], ["int", "com.hazelcast.spi.AbstractLocalOperation.getFactoryId()"], ["int", "com.hazelcast.spi.AbstractLocalOperation.getId()"], ["com.hazelcast.spi.OperationControl", "com.hazelcast.spi.OperationControl()"], ["com.hazelcast.spi.OperationControl", "com.hazelcast.spi.OperationControl(long[], long[])"], ["long[]", "com.hazelcast.spi.OperationControl.runningOperations()"], ["long[]", "com.hazelcast.spi.OperationControl.operationsToCancel()"], ["int", "com.hazelcast.spi.OperationControl.getFactoryId()"], ["int", "com.hazelcast.spi.OperationControl.getId()"], ["void", "com.hazelcast.spi.OperationControl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.OperationControl.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.spi.merge.DiscardMergePolicy", "com.hazelcast.spi.merge.DiscardMergePolicy()"], ["V", "com.hazelcast.spi.merge.DiscardMergePolicy.merge(T, T)"], ["int", "com.hazelcast.spi.merge.DiscardMergePolicy.getId()"], ["com.hazelcast.spi.merge.SplitBrainMergeTypes", "com.hazelcast.spi.merge.SplitBrainMergeTypes()"], ["com.hazelcast.spi.merge.RingbufferMergeData", "com.hazelcast.spi.merge.RingbufferMergeData(int)"], ["com.hazelcast.spi.merge.RingbufferMergeData", "com.hazelcast.spi.merge.RingbufferMergeData(com.hazelcast.ringbuffer.impl.Ringbuffer<java.lang.Object>)"], ["long", "com.hazelcast.spi.merge.RingbufferMergeData.getTailSequence()"], ["void", "com.hazelcast.spi.merge.RingbufferMergeData.setTailSequence(long)"], ["long", "com.hazelcast.spi.merge.RingbufferMergeData.getHeadSequence()"], ["void", "com.hazelcast.spi.merge.RingbufferMergeData.setHeadSequence(long)"], ["int", "com.hazelcast.spi.merge.RingbufferMergeData.getCapacity()"], ["int", "com.hazelcast.spi.merge.RingbufferMergeData.size()"], ["long", "com.hazelcast.spi.merge.RingbufferMergeData.add(java.lang.Object)"], ["<E> E", "com.hazelcast.spi.merge.RingbufferMergeData.read(long)"], ["void", "com.hazelcast.spi.merge.RingbufferMergeData.set(long, java.lang.Object)"], ["void", "com.hazelcast.spi.merge.RingbufferMergeData.clear()"], ["java.lang.Object[]", "com.hazelcast.spi.merge.RingbufferMergeData.getItems()"], ["boolean", "com.hazelcast.spi.merge.RingbufferMergeDataReadOnlyIterator.hasNext()"], ["E", "com.hazelcast.spi.merge.RingbufferMergeDataReadOnlyIterator.next()"], ["void", "com.hazelcast.spi.merge.RingbufferMergeDataReadOnlyIterator.remove()"], ["com.hazelcast.spi.merge.SplitBrainMergePolicyProvider", "com.hazelcast.spi.merge.SplitBrainMergePolicyProvider(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.spi.merge.SplitBrainMergePolicy", "com.hazelcast.spi.merge.SplitBrainMergePolicyProvider.getMergePolicy(java.lang.String)"], ["com.hazelcast.spi.merge.ExpirationTimeMergePolicy", "com.hazelcast.spi.merge.ExpirationTimeMergePolicy()"], ["V", "com.hazelcast.spi.merge.ExpirationTimeMergePolicy.merge(T, T)"], ["int", "com.hazelcast.spi.merge.ExpirationTimeMergePolicy.getId()"], ["java.lang.Object", "com.hazelcast.spi.merge.ExpirationTimeMergePolicy.merge(com.hazelcast.spi.merge.MergingValue, com.hazelcast.spi.merge.MergingValue)"], ["com.hazelcast.spi.merge.PutIfAbsentMergePolicy", "com.hazelcast.spi.merge.PutIfAbsentMergePolicy()"], ["V", "com.hazelcast.spi.merge.PutIfAbsentMergePolicy.merge(T, T)"], ["int", "com.hazelcast.spi.merge.PutIfAbsentMergePolicy.getId()"], ["com.hazelcast.spi.merge.HigherHitsMergePolicy", "com.hazelcast.spi.merge.HigherHitsMergePolicy()"], ["V", "com.hazelcast.spi.merge.HigherHitsMergePolicy.merge(T, T)"], ["int", "com.hazelcast.spi.merge.HigherHitsMergePolicy.getId()"], ["java.lang.Object", "com.hazelcast.spi.merge.HigherHitsMergePolicy.merge(com.hazelcast.spi.merge.MergingValue, com.hazelcast.spi.merge.MergingValue)"], ["com.hazelcast.spi.merge.LatestUpdateMergePolicy", "com.hazelcast.spi.merge.LatestUpdateMergePolicy()"], ["V", "com.hazelcast.spi.merge.LatestUpdateMergePolicy.merge(T, T)"], ["int", "com.hazelcast.spi.merge.LatestUpdateMergePolicy.getId()"], ["java.lang.Object", "com.hazelcast.spi.merge.LatestUpdateMergePolicy.merge(com.hazelcast.spi.merge.MergingValue, com.hazelcast.spi.merge.MergingValue)"], ["com.hazelcast.spi.merge.LatestAccessMergePolicy", "com.hazelcast.spi.merge.LatestAccessMergePolicy()"], ["V", "com.hazelcast.spi.merge.LatestAccessMergePolicy.merge(T, T)"], ["int", "com.hazelcast.spi.merge.LatestAccessMergePolicy.getId()"], ["java.lang.Object", "com.hazelcast.spi.merge.LatestAccessMergePolicy.merge(com.hazelcast.spi.merge.MergingValue, com.hazelcast.spi.merge.MergingValue)"], ["com.hazelcast.spi.merge.PassThroughMergePolicy", "com.hazelcast.spi.merge.PassThroughMergePolicy()"], ["V", "com.hazelcast.spi.merge.PassThroughMergePolicy.merge(T, T)"], ["int", "com.hazelcast.spi.merge.PassThroughMergePolicy.getId()"], ["com.hazelcast.spi.merge.HyperLogLogMergePolicy", "com.hazelcast.spi.merge.HyperLogLogMergePolicy()"], ["com.hazelcast.cardinality.impl.hyperloglog.HyperLogLog", "com.hazelcast.spi.merge.HyperLogLogMergePolicy.merge(com.hazelcast.spi.merge.SplitBrainMergeTypes$CardinalityEstimatorMergeTypes, com.hazelcast.spi.merge.SplitBrainMergeTypes$CardinalityEstimatorMergeTypes)"], ["int", "com.hazelcast.spi.merge.HyperLogLogMergePolicy.getId()"], ["java.lang.Object", "com.hazelcast.spi.merge.HyperLogLogMergePolicy.merge(com.hazelcast.spi.merge.MergingValue, com.hazelcast.spi.merge.MergingValue)"], ["com.hazelcast.spi.merge.SplitBrainMergePolicy", "com.hazelcast.spi.merge.SplitBrainMergePolicyProvider$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.spi.merge.SplitBrainMergePolicyProvider$1.createNew(java.lang.Object)"], ["com.hazelcast.spi.discovery.impl.DefaultDiscoveryServiceProvider", "com.hazelcast.spi.discovery.impl.DefaultDiscoveryServiceProvider()"], ["com.hazelcast.spi.discovery.integration.DiscoveryService", "com.hazelcast.spi.discovery.impl.DefaultDiscoveryServiceProvider.newDiscoveryService(com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings)"], ["com.hazelcast.spi.discovery.impl.PredefinedDiscoveryService", "com.hazelcast.spi.discovery.impl.PredefinedDiscoveryService(com.hazelcast.spi.discovery.DiscoveryStrategy)"], ["void", "com.hazelcast.spi.discovery.impl.PredefinedDiscoveryService.start()"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.spi.discovery.impl.PredefinedDiscoveryService.discoverLocalMetadata()"], ["void", "com.hazelcast.spi.discovery.impl.PredefinedDiscoveryService.destroy()"], ["com.hazelcast.spi.discovery.impl.DefaultDiscoveryService", "com.hazelcast.spi.discovery.impl.DefaultDiscoveryService(com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings)"], ["void", "com.hazelcast.spi.discovery.impl.DefaultDiscoveryService.start()"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.spi.discovery.impl.DefaultDiscoveryService.discoverLocalMetadata()"], ["void", "com.hazelcast.spi.discovery.impl.DefaultDiscoveryService.destroy()"], ["com.hazelcast.spi.discovery.DiscoveryNode", "com.hazelcast.spi.discovery.DiscoveryNode()"], ["com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings()"], ["com.hazelcast.spi.discovery.DiscoveryNode", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.getDiscoveryNode()"], ["com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.setDiscoveryNode(com.hazelcast.spi.discovery.DiscoveryNode)"], ["com.hazelcast.logging.ILogger", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.getLogger()"], ["com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.setLogger(com.hazelcast.logging.ILogger)"], ["java.lang.ClassLoader", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.getConfigClassLoader()"], ["com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.setConfigClassLoader(java.lang.ClassLoader)"], ["com.hazelcast.config.DiscoveryConfig", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.getDiscoveryConfig()"], ["com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.setDiscoveryConfig(com.hazelcast.config.DiscoveryConfig)"], ["com.hazelcast.spi.discovery.integration.DiscoveryMode", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.getDiscoveryMode()"], ["com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings", "com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings.setDiscoveryMode(com.hazelcast.spi.discovery.integration.DiscoveryMode)"], ["com.hazelcast.spi.discovery.integration.DiscoveryMode[]", "com.hazelcast.spi.discovery.integration.DiscoveryMode.values()"], ["com.hazelcast.spi.discovery.integration.DiscoveryMode", "com.hazelcast.spi.discovery.integration.DiscoveryMode.valueOf(java.lang.String)"], ["com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoverySender", "com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoverySender(com.hazelcast.spi.discovery.DiscoveryNode, java.net.MulticastSocket, com.hazelcast.logging.ILogger, java.lang.String, int)"], ["void", "com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoverySender.run()"], ["void", "com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoverySender.stop()"], ["com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoveryReceiver", "com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoveryReceiver(java.net.MulticastSocket, com.hazelcast.logging.ILogger)"], ["com.hazelcast.spi.discovery.multicast.impl.MulticastMemberInfo", "com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoveryReceiver.receive()"], ["com.hazelcast.spi.discovery.multicast.impl.MulticastMemberInfo", "com.hazelcast.spi.discovery.multicast.impl.MulticastMemberInfo(java.lang.String, int)"], ["int", "com.hazelcast.spi.discovery.multicast.impl.MulticastMemberInfo.getPort()"], ["java.lang.String", "com.hazelcast.spi.discovery.multicast.impl.MulticastMemberInfo.getHost()"], ["void", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategy$PortValueValidator.validate(java.lang.Integer)"], ["void", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategy$PortValueValidator.validate(java.lang.Comparable)"], ["com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategy", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategy(com.hazelcast.spi.discovery.DiscoveryNode, com.hazelcast.logging.ILogger, java.util.Map<java.lang.String, java.lang.Comparable>)"], ["void", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategy.start()"], ["void", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategy.destroy()"], ["com.hazelcast.spi.partitiongroup.PartitionGroupStrategy", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategy.getPartitionGroupStrategy()"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategy.discoverLocalMetadata()"], ["com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategyFactory", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategyFactory()"], ["java.lang.Class<? extends com.hazelcast.spi.discovery.DiscoveryStrategy>", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategyFactory.getDiscoveryStrategyType()"], ["com.hazelcast.spi.discovery.DiscoveryStrategy", "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategyFactory.newDiscoveryStrategy(com.hazelcast.spi.discovery.DiscoveryNode, com.hazelcast.logging.ILogger, java.util.Map<java.lang.String, java.lang.Comparable>)"], ["com.hazelcast.spi.discovery.SimpleDiscoveryNode", "com.hazelcast.spi.discovery.SimpleDiscoveryNode(com.hazelcast.nio.Address)"], ["com.hazelcast.spi.discovery.SimpleDiscoveryNode", "com.hazelcast.spi.discovery.SimpleDiscoveryNode(com.hazelcast.nio.Address, java.util.Map<java.lang.String, java.lang.Object>)"], ["com.hazelcast.spi.discovery.SimpleDiscoveryNode", "com.hazelcast.spi.discovery.SimpleDiscoveryNode(com.hazelcast.nio.Address, com.hazelcast.nio.Address)"], ["com.hazelcast.spi.discovery.SimpleDiscoveryNode", "com.hazelcast.spi.discovery.SimpleDiscoveryNode(com.hazelcast.nio.Address, com.hazelcast.nio.Address, java.util.Map<java.lang.String, java.lang.Object>)"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.discovery.SimpleDiscoveryNode.getPrivateAddress()"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.discovery.SimpleDiscoveryNode.getPublicAddress()"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.spi.discovery.SimpleDiscoveryNode.getProperties()"], ["com.hazelcast.spi.discovery.AbstractDiscoveryStrategy", "com.hazelcast.spi.discovery.AbstractDiscoveryStrategy(com.hazelcast.logging.ILogger, java.util.Map<java.lang.String, java.lang.Comparable>)"], ["void", "com.hazelcast.spi.discovery.AbstractDiscoveryStrategy.destroy()"], ["void", "com.hazelcast.spi.discovery.AbstractDiscoveryStrategy.start()"], ["com.hazelcast.spi.partitiongroup.PartitionGroupStrategy", "com.hazelcast.spi.discovery.AbstractDiscoveryStrategy.getPartitionGroupStrategy()"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.spi.discovery.AbstractDiscoveryStrategy.discoverLocalMetadata()"], ["com.hazelcast.spi.partitiongroup.PartitionGroupMetaData[]", "com.hazelcast.spi.partitiongroup.PartitionGroupMetaData.values()"], ["com.hazelcast.spi.partitiongroup.PartitionGroupMetaData", "com.hazelcast.spi.partitiongroup.PartitionGroupMetaData.valueOf(java.lang.String)"], ["java.lang.String", "com.hazelcast.spi.AbstractDistributedObject.getPartitionKey()"], ["void", "com.hazelcast.spi.AbstractDistributedObject.destroy()"], ["com.hazelcast.spi.NodeEngine", "com.hazelcast.spi.AbstractDistributedObject.getNodeEngine()"], ["S", "com.hazelcast.spi.AbstractDistributedObject.getService()"], ["com.hazelcast.spi.OperationService", "com.hazelcast.spi.AbstractDistributedObject.getOperationService()"], ["void", "com.hazelcast.spi.AbstractDistributedObject.invalidate()"], ["boolean", "com.hazelcast.spi.AbstractDistributedObject.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.AbstractDistributedObject.hashCode()"], ["java.lang.String", "com.hazelcast.spi.AbstractDistributedObject.toString()"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.InvocationBuilder.setReplicaIndex(int)"], ["boolean", "com.hazelcast.spi.InvocationBuilder.isResultDeserialized()"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.InvocationBuilder.setResultDeserialized(boolean)"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.InvocationBuilder.setTryCount(int)"], ["boolean", "com.hazelcast.spi.InvocationBuilder.shouldFailOnIndeterminateOperationState()"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.InvocationBuilder.setFailOnIndeterminateOperationState(boolean)"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.InvocationBuilder.setTryPauseMillis(long)"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.InvocationBuilder.setCallTimeout(long)"], ["java.lang.String", "com.hazelcast.spi.InvocationBuilder.getServiceName()"], ["com.hazelcast.spi.Operation", "com.hazelcast.spi.InvocationBuilder.getOp()"], ["int", "com.hazelcast.spi.InvocationBuilder.getReplicaIndex()"], ["int", "com.hazelcast.spi.InvocationBuilder.getTryCount()"], ["long", "com.hazelcast.spi.InvocationBuilder.getTryPauseMillis()"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.InvocationBuilder.getTarget()"], ["int", "com.hazelcast.spi.InvocationBuilder.getPartitionId()"], ["long", "com.hazelcast.spi.InvocationBuilder.getCallTimeout()"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.InvocationBuilder.setExecutionCallback(com.hazelcast.core.ExecutionCallback<java.lang.Object>)"], ["com.hazelcast.spi.InvocationBuilder", "com.hazelcast.spi.InvocationBuilder.setDoneCallback(java.lang.Runnable)"], ["com.hazelcast.spi.DefaultObjectNamespace", "com.hazelcast.spi.DefaultObjectNamespace()"], ["com.hazelcast.spi.DefaultObjectNamespace", "com.hazelcast.spi.DefaultObjectNamespace(java.lang.String, java.lang.String)"], ["com.hazelcast.spi.DefaultObjectNamespace", "com.hazelcast.spi.DefaultObjectNamespace(com.hazelcast.spi.ObjectNamespace)"], ["java.lang.String", "com.hazelcast.spi.DefaultObjectNamespace.getServiceName()"], ["java.lang.String", "com.hazelcast.spi.DefaultObjectNamespace.getObjectName()"], ["void", "com.hazelcast.spi.DefaultObjectNamespace.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.spi.DefaultObjectNamespace.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.spi.DefaultObjectNamespace.equals(java.lang.Object)"], ["int", "com.hazelcast.spi.DefaultObjectNamespace.hashCode()"], ["java.lang.String", "com.hazelcast.spi.DefaultObjectNamespace.toString()"], ["com.hazelcast.spi.exception.RetryableIOException", "com.hazelcast.spi.exception.RetryableIOException()"], ["com.hazelcast.spi.exception.RetryableIOException", "com.hazelcast.spi.exception.RetryableIOException(java.lang.String)"], ["com.hazelcast.spi.exception.RetryableIOException", "com.hazelcast.spi.exception.RetryableIOException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.spi.exception.RetryableIOException", "com.hazelcast.spi.exception.RetryableIOException(java.lang.Throwable)"], ["com.hazelcast.spi.exception.CallerNotMemberException", "com.hazelcast.spi.exception.CallerNotMemberException(com.hazelcast.nio.Address, com.hazelcast.nio.Address, int, java.lang.String, java.lang.String)"], ["com.hazelcast.spi.exception.CallerNotMemberException", "com.hazelcast.spi.exception.CallerNotMemberException(java.lang.String)"], ["com.hazelcast.spi.exception.DistributedObjectDestroyedException", "com.hazelcast.spi.exception.DistributedObjectDestroyedException(java.lang.String)"], ["com.hazelcast.spi.exception.TargetNotMemberException", "com.hazelcast.spi.exception.TargetNotMemberException(java.lang.String)"], ["com.hazelcast.spi.exception.TargetNotMemberException", "com.hazelcast.spi.exception.TargetNotMemberException(com.hazelcast.nio.Address, int, java.lang.String, java.lang.String)"], ["com.hazelcast.spi.exception.ResponseAlreadySentException", "com.hazelcast.spi.exception.ResponseAlreadySentException()"], ["com.hazelcast.spi.exception.ResponseAlreadySentException", "com.hazelcast.spi.exception.ResponseAlreadySentException(java.lang.String)"], ["com.hazelcast.spi.exception.ServiceNotFoundException", "com.hazelcast.spi.exception.ServiceNotFoundException(java.lang.String)"], ["com.hazelcast.spi.exception.TargetDisconnectedException", "com.hazelcast.spi.exception.TargetDisconnectedException(java.lang.String)"], ["com.hazelcast.spi.exception.TargetDisconnectedException", "com.hazelcast.spi.exception.TargetDisconnectedException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.spi.exception.RetryableHazelcastException", "com.hazelcast.spi.exception.RetryableHazelcastException()"], ["com.hazelcast.spi.exception.RetryableHazelcastException", "com.hazelcast.spi.exception.RetryableHazelcastException(java.lang.String)"], ["com.hazelcast.spi.exception.RetryableHazelcastException", "com.hazelcast.spi.exception.RetryableHazelcastException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.spi.exception.RetryableHazelcastException", "com.hazelcast.spi.exception.RetryableHazelcastException(java.lang.Throwable)"], ["com.hazelcast.spi.exception.PartitionMigratingException", "com.hazelcast.spi.exception.PartitionMigratingException(com.hazelcast.nio.Address, int, java.lang.String, java.lang.String)"], ["com.hazelcast.spi.exception.PartitionMigratingException", "com.hazelcast.spi.exception.PartitionMigratingException(java.lang.String)"], ["com.hazelcast.spi.exception.WrongTargetException", "com.hazelcast.spi.exception.WrongTargetException(com.hazelcast.nio.Address, com.hazelcast.nio.Address, int, int, java.lang.String)"], ["com.hazelcast.spi.exception.WrongTargetException", "com.hazelcast.spi.exception.WrongTargetException(com.hazelcast.nio.Address, com.hazelcast.nio.Address, int, int, java.lang.String, java.lang.String)"], ["com.hazelcast.spi.exception.WrongTargetException", "com.hazelcast.spi.exception.WrongTargetException(java.lang.String)"], ["com.hazelcast.nio.Address", "com.hazelcast.spi.exception.WrongTargetException.getTarget()"], ["com.hazelcast.nio.ConnectionType[]", "com.hazelcast.nio.ConnectionType.values()"], ["com.hazelcast.nio.ConnectionType", "com.hazelcast.nio.ConnectionType.valueOf(java.lang.String)"], ["boolean", "com.hazelcast.nio.ConnectionType.isBinary()"], ["boolean", "com.hazelcast.nio.ConnectionType.isClient()"], ["void", "com.hazelcast.nio.NodeIOService$1.run()"], ["<T> T", "com.hazelcast.nio.ClassLoaderUtil.getOrCreate(T, java.lang.ClassLoader, java.lang.String)"], ["<T> T", "com.hazelcast.nio.ClassLoaderUtil.newInstance(java.lang.ClassLoader, java.lang.String)"], ["<T> T", "com.hazelcast.nio.ClassLoaderUtil.newInstance(java.lang.Class<T>, java.lang.ClassLoader, java.lang.String)"], ["boolean", "com.hazelcast.nio.ClassLoaderUtil.isClassAvailable(java.lang.ClassLoader, java.lang.String)"], ["boolean", "com.hazelcast.nio.ClassLoaderUtil.isInternalType(java.lang.Class)"], ["boolean", "com.hazelcast.nio.ClassLoaderUtil.isClassDefined(java.lang.String)"], ["boolean", "com.hazelcast.nio.ClassLoaderUtil.implementsInterfaceWithSameName(java.lang.Class<?>, java.lang.Class<?>)"], ["com.hazelcast.nio.SerializationClassNameFilter", "com.hazelcast.nio.SerializationClassNameFilter(com.hazelcast.config.JavaSerializationFilterConfig)"], ["void", "com.hazelcast.nio.SerializationClassNameFilter.filter(java.lang.String)"], ["java.lang.String", "com.hazelcast.nio.Protocols.toUserFriendlyString(java.lang.String)"], ["void", "com.hazelcast.nio.IOUtil$1.write(int)"], ["void", "com.hazelcast.nio.IOUtil$1.write(byte[], int, int)"], ["com.hazelcast.nio.NodeIOService", "com.hazelcast.nio.NodeIOService(com.hazelcast.instance.Node, com.hazelcast.spi.impl.NodeEngineImpl)"], ["java.lang.String", "com.hazelcast.nio.NodeIOService.getHazelcastName()"], ["com.hazelcast.logging.LoggingService", "com.hazelcast.nio.NodeIOService.getLoggingService()"], ["boolean", "com.hazelcast.nio.NodeIOService.isActive()"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.NodeIOService.getThisAddress()"], ["void", "com.hazelcast.nio.NodeIOService.onFatalError(java.lang.Exception)"], ["com.hazelcast.config.SocketInterceptorConfig", "com.hazelcast.nio.NodeIOService.getSocketInterceptorConfig()"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.nio.NodeIOService.getSymmetricEncryptionConfig()"], ["com.hazelcast.config.SSLConfig", "com.hazelcast.nio.NodeIOService.getSSLConfig()"], ["com.hazelcast.client.ClientEngine", "com.hazelcast.nio.NodeIOService.getClientEngine()"], ["com.hazelcast.internal.ascii.TextCommandService", "com.hazelcast.nio.NodeIOService.getTextCommandService()"], ["boolean", "com.hazelcast.nio.NodeIOService.isMemcacheEnabled()"], ["boolean", "com.hazelcast.nio.NodeIOService.isRestEnabled()"], ["boolean", "com.hazelcast.nio.NodeIOService.isHealthcheckEnabled()"], ["void", "com.hazelcast.nio.NodeIOService.removeEndpoint(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.nio.NodeIOService.onDisconnect(com.hazelcast.nio.Address, java.lang.Throwable)"], ["void", "com.hazelcast.nio.NodeIOService.onSuccessfulConnection(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.nio.NodeIOService.onFailedConnection(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.nio.NodeIOService.shouldConnectTo(com.hazelcast.nio.Address)"], ["boolean", "com.hazelcast.nio.NodeIOService.isSocketBind()"], ["boolean", "com.hazelcast.nio.NodeIOService.isSocketBindAny()"], ["int", "com.hazelcast.nio.NodeIOService.getSocketReceiveBufferSize()"], ["int", "com.hazelcast.nio.NodeIOService.getSocketSendBufferSize()"], ["boolean", "com.hazelcast.nio.NodeIOService.useDirectSocketBuffer()"], ["int", "com.hazelcast.nio.NodeIOService.getSocketClientReceiveBufferSize()"], ["int", "com.hazelcast.nio.NodeIOService.getSocketClientSendBufferSize()"], ["void", "com.hazelcast.nio.NodeIOService.configureSocket(java.net.Socket)"], ["void", "com.hazelcast.nio.NodeIOService.interceptSocket(java.net.Socket, boolean)"], ["boolean", "com.hazelcast.nio.NodeIOService.isSocketInterceptorEnabled()"], ["int", "com.hazelcast.nio.NodeIOService.getSocketConnectTimeoutSeconds()"], ["int", "com.hazelcast.nio.NodeIOService.getInputSelectorThreadCount()"], ["int", "com.hazelcast.nio.NodeIOService.getOutputSelectorThreadCount()"], ["long", "com.hazelcast.nio.NodeIOService.getConnectionMonitorInterval()"], ["int", "com.hazelcast.nio.NodeIOService.getConnectionMonitorMaxFaults()"], ["int", "com.hazelcast.nio.NodeIOService.getBalancerIntervalSeconds()"], ["void", "com.hazelcast.nio.NodeIOService.executeAsync(java.lang.Runnable)"], ["com.hazelcast.spi.EventService", "com.hazelcast.nio.NodeIOService.getEventService()"], ["com.hazelcast.internal.serialization.InternalSerializationService", "com.hazelcast.nio.NodeIOService.getSerializationService()"], ["com.hazelcast.internal.networking.ChannelFactory", "com.hazelcast.nio.NodeIOService.getChannelFactory()"], ["com.hazelcast.nio.MemberSocketInterceptor", "com.hazelcast.nio.NodeIOService.getMemberSocketInterceptor()"], ["com.hazelcast.internal.networking.ChannelInboundHandler", "com.hazelcast.nio.NodeIOService.createInboundHandler(com.hazelcast.nio.tcp.TcpIpConnection)"], ["com.hazelcast.internal.networking.ChannelOutboundHandler", "com.hazelcast.nio.NodeIOService.createOutboundHandler(com.hazelcast.nio.tcp.TcpIpConnection)"], ["com.hazelcast.nio.tcp.TcpIpConnection", "com.hazelcast.nio.tcp.TcpIpConnection(com.hazelcast.nio.tcp.TcpIpConnectionManager, int, com.hazelcast.internal.networking.Channel)"], ["com.hazelcast.internal.networking.Channel", "com.hazelcast.nio.tcp.TcpIpConnection.getChannel()"], ["com.hazelcast.nio.ConnectionType", "com.hazelcast.nio.tcp.TcpIpConnection.getType()"], ["void", "com.hazelcast.nio.tcp.TcpIpConnection.setType(com.hazelcast.nio.ConnectionType)"], ["com.hazelcast.nio.tcp.TcpIpConnectionManager", "com.hazelcast.nio.tcp.TcpIpConnection.getConnectionManager()"], ["java.net.InetAddress", "com.hazelcast.nio.tcp.TcpIpConnection.getInetAddress()"], ["int", "com.hazelcast.nio.tcp.TcpIpConnection.getPort()"], ["java.net.InetSocketAddress", "com.hazelcast.nio.tcp.TcpIpConnection.getRemoteSocketAddress()"], ["boolean", "com.hazelcast.nio.tcp.TcpIpConnection.isAlive()"], ["long", "com.hazelcast.nio.tcp.TcpIpConnection.lastWriteTimeMillis()"], ["long", "com.hazelcast.nio.tcp.TcpIpConnection.lastReadTimeMillis()"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.tcp.TcpIpConnection.getEndPoint()"], ["void", "com.hazelcast.nio.tcp.TcpIpConnection.setEndPoint(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.nio.tcp.TcpIpConnection.setErrorHandler(com.hazelcast.nio.tcp.TcpIpConnectionErrorHandler)"], ["int", "com.hazelcast.nio.tcp.TcpIpConnection.getConnectionId()"], ["boolean", "com.hazelcast.nio.tcp.TcpIpConnection.isClient()"], ["boolean", "com.hazelcast.nio.tcp.TcpIpConnection.write(com.hazelcast.internal.networking.OutboundFrame)"], ["boolean", "com.hazelcast.nio.tcp.TcpIpConnection.equals(java.lang.Object)"], ["int", "com.hazelcast.nio.tcp.TcpIpConnection.hashCode()"], ["void", "com.hazelcast.nio.tcp.TcpIpConnection.close(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "com.hazelcast.nio.tcp.TcpIpConnection.getCloseCause()"], ["java.lang.String", "com.hazelcast.nio.tcp.TcpIpConnection.getCloseReason()"], ["java.lang.String", "com.hazelcast.nio.tcp.TcpIpConnection.toString()"], ["com.hazelcast.nio.tcp.TcpIpConnectionErrorHandler", "com.hazelcast.nio.tcp.TcpIpConnectionManager$1.createNew(com.hazelcast.nio.Address)"], ["java.lang.Object", "com.hazelcast.nio.tcp.TcpIpConnectionManager$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.nio.tcp.TcpIpAcceptor$AcceptorIOThread.run()"], ["com.hazelcast.nio.tcp.TcpIpConnector$ConnectTask", "com.hazelcast.nio.tcp.TcpIpConnector$ConnectTask(com.hazelcast.nio.tcp.TcpIpConnector, com.hazelcast.nio.Address, boolean)"], ["void", "com.hazelcast.nio.tcp.TcpIpConnector$ConnectTask.run()"], ["com.hazelcast.nio.tcp.PacketEncoder", "com.hazelcast.nio.tcp.PacketEncoder()"], ["boolean", "com.hazelcast.nio.tcp.PacketEncoder.onWrite(com.hazelcast.nio.Packet, java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.nio.tcp.PacketEncoder.onWrite(com.hazelcast.internal.networking.OutboundFrame, java.nio.ByteBuffer)"], ["com.hazelcast.nio.tcp.TcpIpConnector", "com.hazelcast.nio.tcp.TcpIpConnector(com.hazelcast.nio.tcp.TcpIpConnectionManager)"], ["void", "com.hazelcast.nio.tcp.TcpIpConnectionManager$SendTask.run()"], ["void", "com.hazelcast.nio.tcp.TcpIpAcceptor$AcceptorIOThread$1.run()"], ["com.hazelcast.nio.tcp.TcpIpAcceptor", "com.hazelcast.nio.tcp.TcpIpAcceptor(java.nio.channels.ServerSocketChannel, com.hazelcast.nio.tcp.TcpIpConnectionManager)"], ["void", "com.hazelcast.nio.tcp.TcpIpAcceptor.provideMetrics(com.hazelcast.internal.metrics.MetricsRegistry)"], ["com.hazelcast.nio.tcp.TcpIpAcceptor", "com.hazelcast.nio.tcp.TcpIpAcceptor.start()"], ["synchronized", "com.hazelcast.nio.tcp.TcpIpAcceptor.void shutdown()"], ["void", "com.hazelcast.nio.tcp.TcpIpConnectionManager$2.run()"], ["int", "com.hazelcast.nio.tcp.TcpIpConnectionManager$2.getKey()"], ["com.hazelcast.nio.tcp.TcpIpConnectionChannelErrorHandler", "com.hazelcast.nio.tcp.TcpIpConnectionChannelErrorHandler(com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.nio.tcp.TcpIpConnectionChannelErrorHandler.onError(com.hazelcast.internal.networking.Channel, java.lang.Throwable)"], ["void", "com.hazelcast.nio.tcp.TcpIpConnectionManager$3.run()"], ["int", "com.hazelcast.nio.tcp.TcpIpConnectionManager$3.getKey()"], ["com.hazelcast.nio.tcp.TcpIpConnectionManager", "com.hazelcast.nio.tcp.TcpIpConnectionManager(com.hazelcast.nio.IOService, java.nio.channels.ServerSocketChannel, com.hazelcast.logging.LoggingService, com.hazelcast.internal.metrics.MetricsRegistry, com.hazelcast.internal.networking.EventLoopGroup)"], ["com.hazelcast.nio.tcp.TcpIpConnectionManager", "com.hazelcast.nio.tcp.TcpIpConnectionManager(com.hazelcast.nio.IOService, java.nio.channels.ServerSocketChannel, com.hazelcast.logging.LoggingService, com.hazelcast.internal.metrics.MetricsRegistry, com.hazelcast.internal.networking.EventLoopGroup, com.hazelcast.spi.properties.HazelcastProperties)"], ["com.hazelcast.nio.IOService", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getIoService()"], ["com.hazelcast.internal.networking.EventLoopGroup", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getEventLoopGroup()"], ["int", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getActiveConnectionCount()"], ["int", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getAllTextConnections()"], ["int", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getConnectionCount()"], ["void", "com.hazelcast.nio.tcp.TcpIpConnectionManager.incrementTextConnections()"], ["void", "com.hazelcast.nio.tcp.TcpIpConnectionManager.addConnectionListener(com.hazelcast.nio.ConnectionListener)"], ["void", "com.hazelcast.nio.tcp.TcpIpConnectionManager.handle(com.hazelcast.nio.Packet)"], ["synchronized", "com.hazelcast.nio.tcp.TcpIpConnectionManager.boolean registerConnection(com.hazelcast.nio.Address, com.hazelcast.nio.Connection)"], ["com.hazelcast.nio.Connection", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getConnection(com.hazelcast.nio.Address)"], ["com.hazelcast.nio.Connection", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getOrConnect(com.hazelcast.nio.Address)"], ["com.hazelcast.nio.Connection", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getOrConnect(com.hazelcast.nio.Address, boolean)"], ["void", "com.hazelcast.nio.tcp.TcpIpConnectionManager.onConnectionClose(com.hazelcast.nio.Connection)"], ["synchronized", "com.hazelcast.nio.tcp.TcpIpConnectionManager.void start()"], ["synchronized", "com.hazelcast.nio.tcp.TcpIpConnectionManager.void stop()"], ["synchronized", "com.hazelcast.nio.tcp.TcpIpConnectionManager.void shutdown()"], ["int", "com.hazelcast.nio.tcp.TcpIpConnectionManager.getCurrentClientConnections()"], ["boolean", "com.hazelcast.nio.tcp.TcpIpConnectionManager.isLive()"], ["boolean", "com.hazelcast.nio.tcp.TcpIpConnectionManager.transmit(com.hazelcast.nio.Packet, com.hazelcast.nio.Connection)"], ["boolean", "com.hazelcast.nio.tcp.TcpIpConnectionManager.transmit(com.hazelcast.nio.Packet, com.hazelcast.nio.Address)"], ["java.lang.String", "com.hazelcast.nio.tcp.TcpIpConnectionManager.toString()"], ["com.hazelcast.nio.tcp.PacketDecoder", "com.hazelcast.nio.tcp.PacketDecoder(com.hazelcast.nio.tcp.TcpIpConnection, com.hazelcast.spi.impl.PacketHandler)"], ["void", "com.hazelcast.nio.tcp.PacketDecoder.onRead(java.nio.ByteBuffer)"], ["com.hazelcast.nio.tcp.MemberChannelInitializer", "com.hazelcast.nio.tcp.MemberChannelInitializer(com.hazelcast.logging.ILogger, com.hazelcast.nio.IOService)"], ["com.hazelcast.nio.tcp.TcpIpConnectionErrorHandler", "com.hazelcast.nio.tcp.TcpIpConnectionErrorHandler(com.hazelcast.nio.tcp.TcpIpConnectionManager, com.hazelcast.nio.Address)"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.tcp.TcpIpConnectionErrorHandler.getEndPoint()"], ["synchronized", "com.hazelcast.nio.tcp.TcpIpConnectionErrorHandler.void onError(java.lang.Throwable)"], ["synchronized", "com.hazelcast.nio.tcp.TcpIpConnectionErrorHandler.void reset()"], ["void", "com.hazelcast.nio.IOUtil.compactOrClear(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "com.hazelcast.nio.IOUtil.newByteBuffer(int, boolean)"], ["void", "com.hazelcast.nio.IOUtil.writeByteArray(com.hazelcast.nio.ObjectDataOutput, byte[])"], ["byte[]", "com.hazelcast.nio.IOUtil.readByteArray(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.nio.IOUtil.writeObject(com.hazelcast.nio.ObjectDataOutput, java.lang.Object)"], ["<T> T", "com.hazelcast.nio.IOUtil.readObject(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.nio.IOUtil.readFullyOrNothing(java.io.InputStream, byte[])"], ["void", "com.hazelcast.nio.IOUtil.readFully(java.io.InputStream, byte[])"], ["java.io.ObjectInputStream", "com.hazelcast.nio.IOUtil.newObjectInputStream(java.lang.ClassLoader, com.hazelcast.nio.ClassNameFilter, java.io.InputStream)"], ["java.io.OutputStream", "com.hazelcast.nio.IOUtil.newOutputStream(java.nio.ByteBuffer)"], ["java.io.InputStream", "com.hazelcast.nio.IOUtil.newInputStream(java.nio.ByteBuffer)"], ["int", "com.hazelcast.nio.IOUtil.copyToHeapBuffer(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["byte[]", "com.hazelcast.nio.IOUtil.compress(byte[])"], ["byte[]", "com.hazelcast.nio.IOUtil.decompress(byte[])"], ["void", "com.hazelcast.nio.IOUtil.writeAttributeValue(java.lang.Object, com.hazelcast.nio.ObjectDataOutput)"], ["java.lang.Object", "com.hazelcast.nio.IOUtil.readAttributeValue(com.hazelcast.nio.ObjectDataInput)"], ["void", "com.hazelcast.nio.IOUtil.closeResource(java.io.Closeable)"], ["void", "com.hazelcast.nio.IOUtil.close(java.net.ServerSocket)"], ["void", "com.hazelcast.nio.IOUtil.deleteQuietly(java.io.File)"], ["void", "com.hazelcast.nio.IOUtil.delete(java.io.File)"], ["void", "com.hazelcast.nio.IOUtil.rename(java.io.File, java.io.File)"], ["java.lang.String", "com.hazelcast.nio.IOUtil.toFileName(java.lang.String)"], ["java.lang.String", "com.hazelcast.nio.IOUtil.getPath(java.lang.String...)"], ["java.io.File", "com.hazelcast.nio.IOUtil.getFileFromResources(java.lang.String)"], ["java.io.InputStream", "com.hazelcast.nio.IOUtil.getFileFromResourcesAsStream(java.lang.String)"], ["void", "com.hazelcast.nio.IOUtil.copy(java.io.File, java.io.File)"], ["void", "com.hazelcast.nio.IOUtil.copy(java.io.InputStream, java.io.File)"], ["void", "com.hazelcast.nio.IOUtil.copyFile(java.io.File, java.io.File, long)"], ["byte[]", "com.hazelcast.nio.IOUtil.toByteArray(java.io.InputStream)"], ["void", "com.hazelcast.nio.IOUtil.drainTo(java.io.InputStream, java.io.OutputStream)"], ["java.lang.String", "com.hazelcast.nio.IOUtil.toDebugString(java.lang.String, java.nio.ByteBuffer)"], ["sun.misc.Unsafe", "com.hazelcast.nio.UnsafeHelper$1.run()"], ["java.lang.Object", "com.hazelcast.nio.UnsafeHelper$1.run()"], ["int", "com.hazelcast.nio.IOUtil$2.read()"], ["int", "com.hazelcast.nio.IOUtil$2.read(byte[], int, int)"], ["char", "com.hazelcast.nio.Bits.readChar(byte[], int, boolean)"], ["char", "com.hazelcast.nio.Bits.readCharB(byte[], int)"], ["char", "com.hazelcast.nio.Bits.readCharL(byte[], int)"], ["void", "com.hazelcast.nio.Bits.writeChar(byte[], int, char, boolean)"], ["void", "com.hazelcast.nio.Bits.writeCharB(byte[], int, char)"], ["void", "com.hazelcast.nio.Bits.writeCharL(byte[], int, char)"], ["short", "com.hazelcast.nio.Bits.readShort(byte[], int, boolean)"], ["short", "com.hazelcast.nio.Bits.readShortB(byte[], int)"], ["short", "com.hazelcast.nio.Bits.readShortL(byte[], int)"], ["void", "com.hazelcast.nio.Bits.writeShort(byte[], int, short, boolean)"], ["void", "com.hazelcast.nio.Bits.writeShortB(byte[], int, short)"], ["void", "com.hazelcast.nio.Bits.writeShortL(byte[], int, short)"], ["int", "com.hazelcast.nio.Bits.readInt(byte[], int, boolean)"], ["int", "com.hazelcast.nio.Bits.readIntB(byte[], int)"], ["int", "com.hazelcast.nio.Bits.readIntL(byte[], int)"], ["int", "com.hazelcast.nio.Bits.readIntL(java.nio.ByteBuffer)"], ["void", "com.hazelcast.nio.Bits.writeInt(byte[], int, int, boolean)"], ["void", "com.hazelcast.nio.Bits.writeIntB(byte[], int, int)"], ["void", "com.hazelcast.nio.Bits.writeIntL(byte[], int, int)"], ["long", "com.hazelcast.nio.Bits.readLong(byte[], int, boolean)"], ["long", "com.hazelcast.nio.Bits.readLongB(byte[], int)"], ["long", "com.hazelcast.nio.Bits.readLongL(byte[], int)"], ["void", "com.hazelcast.nio.Bits.writeLong(byte[], int, long, boolean)"], ["void", "com.hazelcast.nio.Bits.writeLongB(byte[], int, long)"], ["void", "com.hazelcast.nio.Bits.writeLongL(byte[], int, long)"], ["int", "com.hazelcast.nio.Bits.writeUtf8Char(byte[], int, int)"], ["int", "com.hazelcast.nio.Bits.readUtf8Char(byte[], int, char[], int)"], ["char", "com.hazelcast.nio.Bits.readUtf8Char(java.io.DataInput, byte)"], ["byte", "com.hazelcast.nio.Bits.setBit(byte, int)"], ["byte", "com.hazelcast.nio.Bits.clearBit(byte, int)"], ["byte", "com.hazelcast.nio.Bits.invertBit(byte, int)"], ["int", "com.hazelcast.nio.Bits.setBit(int, int)"], ["int", "com.hazelcast.nio.Bits.clearBit(int, int)"], ["int", "com.hazelcast.nio.Bits.invertBit(int, int)"], ["boolean", "com.hazelcast.nio.Bits.isBitSet(int, int)"], ["int", "com.hazelcast.nio.Bits.combineToInt(short, short)"], ["short", "com.hazelcast.nio.Bits.extractShort(int, boolean)"], ["long", "com.hazelcast.nio.Bits.combineToLong(int, int)"], ["int", "com.hazelcast.nio.Bits.extractInt(long, boolean)"], ["com.hazelcast.nio.Packet$Type[]", "com.hazelcast.nio.Packet$Type.values()"], ["com.hazelcast.nio.Packet$Type", "com.hazelcast.nio.Packet$Type.valueOf(java.lang.String)"], ["com.hazelcast.nio.Packet$Type", "com.hazelcast.nio.Packet$Type.fromFlags(int)"], ["java.lang.String", "com.hazelcast.nio.Packet$Type.describeFlags(char)"], ["com.hazelcast.nio.serialization.SerializableByConvention$Reason[]", "com.hazelcast.nio.serialization.SerializableByConvention$Reason.values()"], ["com.hazelcast.nio.serialization.SerializableByConvention$Reason", "com.hazelcast.nio.serialization.SerializableByConvention$Reason.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder(int, int)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder(int, int, int)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addIntField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addLongField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addUTFField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addBooleanField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addByteField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addBooleanArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addCharField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addDoubleField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addFloatField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addShortField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addByteArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addCharArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addIntArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addLongArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addDoubleArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addFloatArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addShortArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addUTFArrayField(java.lang.String)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addPortableField(java.lang.String, com.hazelcast.nio.serialization.ClassDefinition)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addPortableArrayField(java.lang.String, com.hazelcast.nio.serialization.ClassDefinition)"], ["com.hazelcast.nio.serialization.ClassDefinitionBuilder", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.addField(com.hazelcast.internal.serialization.impl.FieldDefinitionImpl)"], ["com.hazelcast.nio.serialization.ClassDefinition", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.build()"], ["int", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.getFactoryId()"], ["int", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.getClassId()"], ["int", "com.hazelcast.nio.serialization.ClassDefinitionBuilder.getVersion()"], ["com.hazelcast.nio.serialization.FieldType[]", "com.hazelcast.nio.serialization.FieldType.values()"], ["com.hazelcast.nio.serialization.FieldType", "com.hazelcast.nio.serialization.FieldType.valueOf(java.lang.String)"], ["byte", "com.hazelcast.nio.serialization.FieldType.getId()"], ["com.hazelcast.nio.serialization.FieldType", "com.hazelcast.nio.serialization.FieldType.get(byte)"], ["boolean", "com.hazelcast.nio.serialization.FieldType.isArrayType()"], ["com.hazelcast.nio.serialization.FieldType", "com.hazelcast.nio.serialization.FieldType.getSingleType()"], ["boolean", "com.hazelcast.nio.serialization.FieldType.hasDefiniteSize()"], ["int", "com.hazelcast.nio.serialization.FieldType.getTypeSize()"], ["com.hazelcast.nio.serialization.DataType[]", "com.hazelcast.nio.serialization.DataType.values()"], ["com.hazelcast.nio.serialization.DataType", "com.hazelcast.nio.serialization.DataType.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.HazelcastSerializationException", "com.hazelcast.nio.serialization.HazelcastSerializationException(java.lang.String)"], ["com.hazelcast.nio.serialization.HazelcastSerializationException", "com.hazelcast.nio.serialization.HazelcastSerializationException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.nio.serialization.HazelcastSerializationException", "com.hazelcast.nio.serialization.HazelcastSerializationException(java.lang.Throwable)"], ["void", "com.hazelcast.nio.NodeIOService$2.run()"], ["com.hazelcast.nio.ascii.TextEncoder", "com.hazelcast.nio.ascii.TextEncoder(com.hazelcast.nio.tcp.TcpIpConnection)"], ["void", "com.hazelcast.nio.ascii.TextEncoder.enqueue(com.hazelcast.internal.ascii.TextCommand)"], ["boolean", "com.hazelcast.nio.ascii.TextEncoder.onWrite(com.hazelcast.internal.ascii.TextCommand, java.nio.ByteBuffer)"], ["boolean", "com.hazelcast.nio.ascii.TextEncoder.onWrite(com.hazelcast.internal.networking.OutboundFrame, java.nio.ByteBuffer)"], ["com.hazelcast.nio.ascii.TextDecoder", "com.hazelcast.nio.ascii.TextDecoder(com.hazelcast.nio.tcp.TcpIpConnection, com.hazelcast.nio.ascii.TextEncoder)"], ["void", "com.hazelcast.nio.ascii.TextDecoder.sendResponse(com.hazelcast.internal.ascii.TextCommand)"], ["void", "com.hazelcast.nio.ascii.TextDecoder.onRead(java.nio.ByteBuffer)"], ["void", "com.hazelcast.nio.ascii.TextDecoder.publishRequest(com.hazelcast.internal.ascii.TextCommand)"], ["com.hazelcast.nio.ascii.TextEncoder", "com.hazelcast.nio.ascii.TextDecoder.getEncoder()"], ["void", "com.hazelcast.nio.ascii.TextDecoder.closeConnection()"], ["java.lang.String", "com.hazelcast.nio.Packet$Type$1.describeFlags(char)"], ["com.hazelcast.nio.Packet", "com.hazelcast.nio.Packet()"], ["com.hazelcast.nio.Packet", "com.hazelcast.nio.Packet(byte[])"], ["com.hazelcast.nio.Packet", "com.hazelcast.nio.Packet(byte[], int)"], ["com.hazelcast.nio.Connection", "com.hazelcast.nio.Packet.getConn()"], ["com.hazelcast.nio.Packet", "com.hazelcast.nio.Packet.setConn(com.hazelcast.nio.Connection)"], ["com.hazelcast.nio.Packet$Type", "com.hazelcast.nio.Packet.getPacketType()"], ["com.hazelcast.nio.Packet", "com.hazelcast.nio.Packet.setPacketType(com.hazelcast.nio.Packet$Type)"], ["com.hazelcast.nio.Packet", "com.hazelcast.nio.Packet.raiseFlags(int)"], ["com.hazelcast.nio.Packet", "com.hazelcast.nio.Packet.resetFlagsTo(int)"], ["boolean", "com.hazelcast.nio.Packet.isFlagRaised(int)"], ["char", "com.hazelcast.nio.Packet.getFlags()"], ["int", "com.hazelcast.nio.Packet.getPartitionId()"], ["boolean", "com.hazelcast.nio.Packet.isUrgent()"], ["int", "com.hazelcast.nio.Packet.packetSize()"], ["boolean", "com.hazelcast.nio.Packet.equals(java.lang.Object)"], ["int", "com.hazelcast.nio.Packet.hashCode()"], ["java.lang.String", "com.hazelcast.nio.Packet.toString()"], ["com.hazelcast.nio.PacketIOHelper", "com.hazelcast.nio.PacketIOHelper()"], ["boolean", "com.hazelcast.nio.PacketIOHelper.writeTo(com.hazelcast.nio.Packet, java.nio.ByteBuffer)"], ["com.hazelcast.nio.Packet", "com.hazelcast.nio.PacketIOHelper.readFrom(java.nio.ByteBuffer)"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.Address()"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.Address(java.lang.String, int)"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.Address(java.net.InetAddress, int)"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.Address(java.net.InetSocketAddress)"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.Address(java.lang.String, java.net.InetAddress, int)"], ["com.hazelcast.nio.Address", "com.hazelcast.nio.Address(com.hazelcast.nio.Address)"], ["java.lang.String", "com.hazelcast.nio.Address.getHost()"], ["int", "com.hazelcast.nio.Address.getPort()"], ["java.net.InetAddress", "com.hazelcast.nio.Address.getInetAddress()"], ["java.net.InetSocketAddress", "com.hazelcast.nio.Address.getInetSocketAddress()"], ["boolean", "com.hazelcast.nio.Address.isIPv4()"], ["boolean", "com.hazelcast.nio.Address.isIPv6()"], ["java.lang.String", "com.hazelcast.nio.Address.getScopeId()"], ["void", "com.hazelcast.nio.Address.setScopeId(java.lang.String)"], ["java.lang.String", "com.hazelcast.nio.Address.getScopedHost()"], ["int", "com.hazelcast.nio.Address.getFactoryId()"], ["int", "com.hazelcast.nio.Address.getId()"], ["void", "com.hazelcast.nio.Address.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.nio.Address.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.nio.Address.equals(java.lang.Object)"], ["int", "com.hazelcast.nio.Address.hashCode()"], ["java.lang.String", "com.hazelcast.nio.Address.toString()"], ["V", "com.hazelcast.nio.ClassLoaderUtil$ClassLoaderWeakCache.get(java.lang.ClassLoader, java.lang.String)"], ["java.lang.String", "com.hazelcast.nio.Packet$Type$2.describeFlags(char)"], ["void", "com.hazelcast.nio.NodeIOService$ReconnectionTask.run()"], ["com.hazelcast.nio.ssl.SSLEngineFactorySupport", "com.hazelcast.nio.ssl.SSLEngineFactorySupport()"], ["javax.net.ssl.TrustManagerFactory", "com.hazelcast.nio.ssl.SSLEngineFactorySupport.loadTrustManagerFactory(java.lang.String, java.lang.String, java.lang.String)"], ["javax.net.ssl.TrustManagerFactory", "com.hazelcast.nio.ssl.SSLEngineFactorySupport.loadTrustManagerFactory(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["javax.net.ssl.KeyManagerFactory", "com.hazelcast.nio.ssl.SSLEngineFactorySupport.loadKeyManagerFactory(java.lang.String, java.lang.String, java.lang.String)"], ["javax.net.ssl.KeyManagerFactory", "com.hazelcast.nio.ssl.SSLEngineFactorySupport.loadKeyManagerFactory(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.nio.ssl.SSLEngineFactorySupport.loadKeyStore(java.security.KeyStore, char[], java.lang.String)"], ["com.hazelcast.nio.ssl.BasicSSLContextFactory", "com.hazelcast.nio.ssl.BasicSSLContextFactory()"], ["void", "com.hazelcast.nio.ssl.BasicSSLContextFactory.init(java.util.Properties)"], ["javax.net.ssl.SSLContext", "com.hazelcast.nio.ssl.BasicSSLContextFactory.getSSLContext()"], ["com.hazelcast.hotrestart.BackupTaskState[]", "com.hazelcast.hotrestart.BackupTaskState.values()"], ["com.hazelcast.hotrestart.BackupTaskState", "com.hazelcast.hotrestart.BackupTaskState.valueOf(java.lang.String)"], ["boolean", "com.hazelcast.hotrestart.BackupTaskState.isDone()"], ["boolean", "com.hazelcast.hotrestart.BackupTaskState.inProgress()"], ["com.hazelcast.hotrestart.NoopInternalHotRestartService", "com.hazelcast.hotrestart.NoopInternalHotRestartService()"], ["boolean", "com.hazelcast.hotrestart.NoopInternalHotRestartService.triggerForceStart()"], ["boolean", "com.hazelcast.hotrestart.NoopInternalHotRestartService.triggerPartialStart()"], ["boolean", "com.hazelcast.hotrestart.NoopInternalHotRestartService.isMemberExcluded(com.hazelcast.nio.Address, java.lang.String)"], ["void", "com.hazelcast.hotrestart.NoopInternalHotRestartService.notifyExcludedMember(com.hazelcast.nio.Address)"], ["void", "com.hazelcast.hotrestart.NoopInternalHotRestartService.handleExcludedMemberUuids(com.hazelcast.nio.Address, java.util.Set<java.lang.String>)"], ["com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO", "com.hazelcast.hotrestart.NoopInternalHotRestartService.getCurrentClusterHotRestartStatus()"], ["void", "com.hazelcast.hotrestart.NoopInternalHotRestartService.resetHotRestartData()"], ["void", "com.hazelcast.hotrestart.NoopInternalHotRestartService.waitPartitionReplicaSyncOnCluster(long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.hotrestart.BackupTaskStatus", "com.hazelcast.hotrestart.BackupTaskStatus(com.hazelcast.hotrestart.BackupTaskState, int, int)"], ["com.hazelcast.hotrestart.BackupTaskState", "com.hazelcast.hotrestart.BackupTaskStatus.getState()"], ["int", "com.hazelcast.hotrestart.BackupTaskStatus.getCompleted()"], ["int", "com.hazelcast.hotrestart.BackupTaskStatus.getTotal()"], ["float", "com.hazelcast.hotrestart.BackupTaskStatus.getProgress()"], ["java.lang.String", "com.hazelcast.hotrestart.BackupTaskStatus.toString()"], ["boolean", "com.hazelcast.hotrestart.BackupTaskStatus.equals(java.lang.Object)"], ["int", "com.hazelcast.hotrestart.BackupTaskStatus.hashCode()"], ["com.hazelcast.hotrestart.NoOpHotRestartService", "com.hazelcast.hotrestart.NoOpHotRestartService()"], ["void", "com.hazelcast.hotrestart.NoOpHotRestartService.backup()"], ["void", "com.hazelcast.hotrestart.NoOpHotRestartService.backup(long)"], ["com.hazelcast.hotrestart.BackupTaskStatus", "com.hazelcast.hotrestart.NoOpHotRestartService.getBackupTaskStatus()"], ["void", "com.hazelcast.hotrestart.NoOpHotRestartService.interruptLocalBackupTask()"], ["void", "com.hazelcast.hotrestart.NoOpHotRestartService.interruptBackupTask()"], ["boolean", "com.hazelcast.hotrestart.NoOpHotRestartService.isHotBackupEnabled()"], ["com.hazelcast.projection.impl.SingleAttributeProjection", "com.hazelcast.projection.impl.SingleAttributeProjection(java.lang.String)"], ["O", "com.hazelcast.projection.impl.SingleAttributeProjection.transform(I)"], ["int", "com.hazelcast.projection.impl.SingleAttributeProjection.getFactoryId()"], ["int", "com.hazelcast.projection.impl.SingleAttributeProjection.getId()"], ["void", "com.hazelcast.projection.impl.SingleAttributeProjection.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.projection.impl.SingleAttributeProjection.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.projection.impl.ProjectionDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.projection.impl.ProjectionDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.projection.impl.ProjectionDataSerializerHook", "com.hazelcast.projection.impl.ProjectionDataSerializerHook()"], ["int", "com.hazelcast.projection.impl.ProjectionDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.projection.impl.ProjectionDataSerializerHook.createFactory()"], ["I", "com.hazelcast.projection.impl.IdentityProjection.transform(I)"], ["int", "com.hazelcast.projection.impl.IdentityProjection.getFactoryId()"], ["int", "com.hazelcast.projection.impl.IdentityProjection.getId()"], ["void", "com.hazelcast.projection.impl.IdentityProjection.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.projection.impl.IdentityProjection.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.projection.impl.ProjectionDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.projection.impl.ProjectionDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.projection.impl.ProjectionDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.projection.impl.ProjectionDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.projection.impl.MultiAttributeProjection", "com.hazelcast.projection.impl.MultiAttributeProjection(java.lang.String...)"], ["java.lang.Object[]", "com.hazelcast.projection.impl.MultiAttributeProjection.transform(I)"], ["int", "com.hazelcast.projection.impl.MultiAttributeProjection.getFactoryId()"], ["int", "com.hazelcast.projection.impl.MultiAttributeProjection.getId()"], ["void", "com.hazelcast.projection.impl.MultiAttributeProjection.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.projection.impl.MultiAttributeProjection.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Object", "com.hazelcast.projection.impl.MultiAttributeProjection.transform(java.lang.Object)"], ["com.hazelcast.projection.Projection", "com.hazelcast.projection.Projection()"], ["<T> com.hazelcast.projection.Projection<T, T>", "com.hazelcast.projection.Projections.identity()"], ["<I, O> com.hazelcast.projection.Projection<I, O>", "com.hazelcast.projection.Projections.singleAttribute(java.lang.String)"], ["<I> com.hazelcast.projection.Projection<I, java.lang.Object[]>", "com.hazelcast.projection.Projections.multiAttribute(java.lang.String...)"], ["com.hazelcast.topic.impl.TopicService", "com.hazelcast.topic.impl.TopicService()"], ["void", "com.hazelcast.topic.impl.TopicService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.monitor.impl.LocalTopicStatsImpl>", "com.hazelcast.topic.impl.TopicService.getStatsMap()"], ["void", "com.hazelcast.topic.impl.TopicService.reset()"], ["void", "com.hazelcast.topic.impl.TopicService.shutdown(boolean)"], ["java.util.concurrent.locks.Lock", "com.hazelcast.topic.impl.TopicService.getOrderLock(java.lang.String)"], ["com.hazelcast.core.ITopic", "com.hazelcast.topic.impl.TopicService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.topic.impl.TopicService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.topic.impl.TopicService.dispatchEvent(java.lang.Object, java.lang.Object)"], ["com.hazelcast.monitor.impl.LocalTopicStatsImpl", "com.hazelcast.topic.impl.TopicService.getLocalTopicStats(java.lang.String)"], ["void", "com.hazelcast.topic.impl.TopicService.incrementPublishes(java.lang.String)"], ["void", "com.hazelcast.topic.impl.TopicService.incrementReceivedMessages(java.lang.String)"], ["void", "com.hazelcast.topic.impl.TopicService.publishMessage(java.lang.String, java.lang.Object, boolean)"], ["java.lang.String", "com.hazelcast.topic.impl.TopicService.addMessageListener(java.lang.String, com.hazelcast.core.MessageListener, boolean)"], ["boolean", "com.hazelcast.topic.impl.TopicService.removeMessageListener(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalTopicStats>", "com.hazelcast.topic.impl.TopicService.getStats()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.topic.impl.TopicService.createDistributedObject(java.lang.String)"], ["com.hazelcast.topic.impl.TopicProxySupport", "com.hazelcast.topic.impl.TopicProxySupport(java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.topic.impl.TopicService)"], ["void", "com.hazelcast.topic.impl.TopicProxySupport.initialize()"], ["com.hazelcast.monitor.LocalTopicStats", "com.hazelcast.topic.impl.TopicProxySupport.getLocalTopicStatsInternal()"], ["void", "com.hazelcast.topic.impl.TopicProxySupport.publishInternal(java.lang.Object)"], ["java.lang.String", "com.hazelcast.topic.impl.TopicProxySupport.addMessageListenerInternal(com.hazelcast.core.MessageListener)"], ["boolean", "com.hazelcast.topic.impl.TopicProxySupport.removeMessageListenerInternal(java.lang.String)"], ["java.lang.String", "com.hazelcast.topic.impl.TopicProxySupport.getServiceName()"], ["java.lang.String", "com.hazelcast.topic.impl.TopicProxySupport.getName()"], ["com.hazelcast.topic.impl.TopicProxy", "com.hazelcast.topic.impl.TopicProxy(java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.topic.impl.TopicService)"], ["void", "com.hazelcast.topic.impl.TopicProxy.publish(E)"], ["java.lang.String", "com.hazelcast.topic.impl.TopicProxy.addMessageListener(com.hazelcast.core.MessageListener<E>)"], ["boolean", "com.hazelcast.topic.impl.TopicProxy.removeMessageListener(java.lang.String)"], ["com.hazelcast.monitor.LocalTopicStats", "com.hazelcast.topic.impl.TopicProxy.getLocalTopicStats()"], ["com.hazelcast.monitor.impl.LocalTopicStatsImpl", "com.hazelcast.topic.impl.TopicService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.topic.impl.TopicService$1.createNew(java.lang.Object)"], ["com.hazelcast.topic.impl.TopicDataSerializerHook", "com.hazelcast.topic.impl.TopicDataSerializerHook()"], ["int", "com.hazelcast.topic.impl.TopicDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.topic.impl.TopicDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.topic.impl.TopicDataSerializerHook$1.create(int)"], ["com.hazelcast.topic.impl.TotalOrderedTopicProxy", "com.hazelcast.topic.impl.TotalOrderedTopicProxy(java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.topic.impl.TopicService)"], ["void", "com.hazelcast.topic.impl.TotalOrderedTopicProxy.publish(E)"], ["com.hazelcast.topic.impl.DataAwareMessage", "com.hazelcast.topic.impl.DataAwareMessage(java.lang.String, com.hazelcast.nio.serialization.Data, long, com.hazelcast.core.Member, com.hazelcast.spi.serialization.SerializationService)"], ["java.lang.Object", "com.hazelcast.topic.impl.DataAwareMessage.getMessageObject()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.topic.impl.DataAwareMessage.getMessageData()"], ["com.hazelcast.topic.impl.PublishOperation", "com.hazelcast.topic.impl.PublishOperation()"], ["com.hazelcast.topic.impl.PublishOperation", "com.hazelcast.topic.impl.PublishOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.topic.impl.PublishOperation.beforeRun()"], ["void", "com.hazelcast.topic.impl.PublishOperation.run()"], ["int", "com.hazelcast.topic.impl.PublishOperation.getFactoryId()"], ["int", "com.hazelcast.topic.impl.PublishOperation.getId()"], ["java.lang.String", "com.hazelcast.topic.impl.PublishOperation.getServiceName()"], ["com.hazelcast.topic.impl.TopicEvent", "com.hazelcast.topic.impl.TopicEvent()"], ["com.hazelcast.topic.impl.TopicEvent", "com.hazelcast.topic.impl.TopicEvent(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.Address)"], ["int", "com.hazelcast.topic.impl.TopicEvent.getFactoryId()"], ["int", "com.hazelcast.topic.impl.TopicEvent.getId()"], ["void", "com.hazelcast.topic.impl.TopicEvent.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.topic.impl.TopicEvent.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.topic.impl.TopicEvent.toString()"], ["com.hazelcast.topic.impl.reliable.ReliableTopicService", "com.hazelcast.topic.impl.reliable.ReliableTopicService(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.topic.impl.reliable.ReliableTopicService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.topic.impl.reliable.ReliableTopicService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.monitor.impl.LocalTopicStatsImpl", "com.hazelcast.topic.impl.reliable.ReliableTopicService.getLocalTopicStats(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalTopicStats>", "com.hazelcast.topic.impl.reliable.ReliableTopicService.getStats()"], ["void", "com.hazelcast.topic.impl.reliable.ReliableTopicService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.topic.impl.reliable.ReliableTopicService.reset()"], ["void", "com.hazelcast.topic.impl.reliable.ReliableTopicService.shutdown(boolean)"], ["com.hazelcast.topic.impl.reliable.ReliableTopicMessage", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage()"], ["com.hazelcast.topic.impl.reliable.ReliableTopicMessage", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.Address)"], ["long", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage.getPublishTime()"], ["com.hazelcast.nio.Address", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage.getPublisherAddress()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage.getPayload()"], ["int", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage.getFactoryId()"], ["int", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage.getId()"], ["void", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.topic.impl.reliable.ReliableTopicMessage.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.monitor.impl.LocalTopicStatsImpl", "com.hazelcast.topic.impl.reliable.ReliableTopicService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.topic.impl.reliable.ReliableTopicService$1.createNew(java.lang.Object)"], ["com.hazelcast.topic.impl.reliable.MessageRunner", "com.hazelcast.topic.impl.reliable.MessageRunner(java.lang.String, com.hazelcast.topic.ReliableMessageListener<E>, com.hazelcast.ringbuffer.Ringbuffer<com.hazelcast.topic.impl.reliable.ReliableTopicMessage>, java.lang.String, int, com.hazelcast.spi.serialization.SerializationService, java.util.concurrent.Executor, java.util.concurrent.ConcurrentMap<java.lang.String, com.hazelcast.topic.impl.reliable.MessageRunner<E>>, com.hazelcast.logging.ILogger)"], ["void", "com.hazelcast.topic.impl.reliable.MessageRunner.next()"], ["void", "com.hazelcast.topic.impl.reliable.MessageRunner.onResponse(com.hazelcast.ringbuffer.ReadResultSet<com.hazelcast.topic.impl.reliable.ReliableTopicMessage>)"], ["void", "com.hazelcast.topic.impl.reliable.MessageRunner.onFailure(java.lang.Throwable)"], ["void", "com.hazelcast.topic.impl.reliable.MessageRunner.cancel()"], ["boolean", "com.hazelcast.topic.impl.reliable.MessageRunner.isCancelled()"], ["void", "com.hazelcast.topic.impl.reliable.MessageRunner.onResponse(java.lang.Object)"], ["com.hazelcast.topic.impl.reliable.ReliableMessageListenerAdapter", "com.hazelcast.topic.impl.reliable.ReliableMessageListenerAdapter(com.hazelcast.core.MessageListener<E>)"], ["long", "com.hazelcast.topic.impl.reliable.ReliableMessageListenerAdapter.retrieveInitialSequence()"], ["void", "com.hazelcast.topic.impl.reliable.ReliableMessageListenerAdapter.storeSequence(long)"], ["boolean", "com.hazelcast.topic.impl.reliable.ReliableMessageListenerAdapter.isLossTolerant()"], ["void", "com.hazelcast.topic.impl.reliable.ReliableMessageListenerAdapter.onMessage(com.hazelcast.core.Message<E>)"], ["boolean", "com.hazelcast.topic.impl.reliable.ReliableMessageListenerAdapter.isTerminal(java.lang.Throwable)"], ["java.lang.String", "com.hazelcast.topic.impl.reliable.ReliableMessageListenerAdapter.toString()"], ["com.hazelcast.topic.impl.reliable.ReliableTopicProxy", "com.hazelcast.topic.impl.reliable.ReliableTopicProxy(java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.topic.impl.reliable.ReliableTopicService, com.hazelcast.config.ReliableTopicConfig)"], ["java.lang.String", "com.hazelcast.topic.impl.reliable.ReliableTopicProxy.getServiceName()"], ["java.lang.String", "com.hazelcast.topic.impl.reliable.ReliableTopicProxy.getName()"], ["void", "com.hazelcast.topic.impl.reliable.ReliableTopicProxy.publish(E)"], ["java.lang.String", "com.hazelcast.topic.impl.reliable.ReliableTopicProxy.addMessageListener(com.hazelcast.core.MessageListener<E>)"], ["boolean", "com.hazelcast.topic.impl.reliable.ReliableTopicProxy.removeMessageListener(java.lang.String)"], ["com.hazelcast.monitor.LocalTopicStats", "com.hazelcast.topic.impl.reliable.ReliableTopicProxy.getLocalTopicStats()"], ["com.hazelcast.topic.TopicOverloadPolicy[]", "com.hazelcast.topic.TopicOverloadPolicy.values()"], ["com.hazelcast.topic.TopicOverloadPolicy", "com.hazelcast.topic.TopicOverloadPolicy.valueOf(java.lang.String)"], ["com.hazelcast.topic.TopicOverloadException", "com.hazelcast.topic.TopicOverloadException(java.lang.String)"], ["com.hazelcast.cluster.MemberAttributeOperationType[]", "com.hazelcast.cluster.MemberAttributeOperationType.values()"], ["com.hazelcast.cluster.MemberAttributeOperationType", "com.hazelcast.cluster.MemberAttributeOperationType.valueOf(java.lang.String)"], ["int", "com.hazelcast.cluster.MemberAttributeOperationType.getId()"], ["com.hazelcast.cluster.MemberAttributeOperationType", "com.hazelcast.cluster.MemberAttributeOperationType.getValue(int)"], ["com.hazelcast.cluster.impl.VectorClock", "com.hazelcast.cluster.impl.VectorClock()"], ["com.hazelcast.cluster.impl.VectorClock", "com.hazelcast.cluster.impl.VectorClock(com.hazelcast.cluster.impl.VectorClock)"], ["java.lang.Long", "com.hazelcast.cluster.impl.VectorClock.getTimestampForReplica(java.lang.String)"], ["void", "com.hazelcast.cluster.impl.VectorClock.setReplicaTimestamp(java.lang.String, long)"], ["void", "com.hazelcast.cluster.impl.VectorClock.merge(com.hazelcast.cluster.impl.VectorClock)"], ["boolean", "com.hazelcast.cluster.impl.VectorClock.isAfter(com.hazelcast.cluster.impl.VectorClock)"], ["boolean", "com.hazelcast.cluster.impl.VectorClock.isEmpty()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Long>>", "com.hazelcast.cluster.impl.VectorClock.entrySet()"], ["void", "com.hazelcast.cluster.impl.VectorClock.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.cluster.impl.VectorClock.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.cluster.impl.VectorClock.equals(java.lang.Object)"], ["int", "com.hazelcast.cluster.impl.VectorClock.hashCode()"], ["java.lang.String", "com.hazelcast.cluster.impl.VectorClock.toString()"], ["int", "com.hazelcast.cluster.impl.VectorClock.getFactoryId()"], ["int", "com.hazelcast.cluster.impl.VectorClock.getId()"], ["com.hazelcast.cluster.impl.TcpIpJoiner", "com.hazelcast.cluster.impl.TcpIpJoiner(com.hazelcast.instance.Node)"], ["boolean", "com.hazelcast.cluster.impl.TcpIpJoiner.isClaimingMaster()"], ["void", "com.hazelcast.cluster.impl.TcpIpJoiner.doJoin()"], ["void", "com.hazelcast.cluster.impl.TcpIpJoiner.searchForOtherClusters()"], ["java.lang.String", "com.hazelcast.cluster.impl.TcpIpJoiner.getType()"], ["boolean", "com.hazelcast.cluster.memberselector.MemberSelectors$4.select(com.hazelcast.core.Member)"], ["boolean", "com.hazelcast.cluster.memberselector.MemberSelectors$2.select(com.hazelcast.core.Member)"], ["boolean", "com.hazelcast.cluster.memberselector.MemberSelectors$1.select(com.hazelcast.core.Member)"], ["com.hazelcast.core.MemberSelector", "com.hazelcast.cluster.memberselector.MemberSelectors.or(com.hazelcast.core.MemberSelector...)"], ["com.hazelcast.core.MemberSelector", "com.hazelcast.cluster.memberselector.MemberSelectors.and(com.hazelcast.core.MemberSelector...)"], ["boolean", "com.hazelcast.cluster.memberselector.MemberSelectors$3.select(com.hazelcast.core.Member)"], ["com.hazelcast.cluster.memberselector.OrMemberSelector", "com.hazelcast.cluster.memberselector.OrMemberSelector(com.hazelcast.core.MemberSelector...)"], ["boolean", "com.hazelcast.cluster.memberselector.OrMemberSelector.select(com.hazelcast.core.Member)"], ["com.hazelcast.cluster.memberselector.AndMemberSelector", "com.hazelcast.cluster.memberselector.AndMemberSelector(com.hazelcast.core.MemberSelector...)"], ["boolean", "com.hazelcast.cluster.memberselector.AndMemberSelector.select(com.hazelcast.core.Member)"], ["com.hazelcast.cluster.ClusterState[]", "com.hazelcast.cluster.ClusterState.values()"], ["com.hazelcast.cluster.ClusterState", "com.hazelcast.cluster.ClusterState.valueOf(java.lang.String)"], ["boolean", "com.hazelcast.cluster.ClusterState.isJoinAllowed()"], ["boolean", "com.hazelcast.cluster.ClusterState.isMigrationAllowed()"], ["void", "com.hazelcast.util.FutureUtil$5.handleException(java.lang.Throwable)"], ["boolean", "com.hazelcast.util.ServiceLoader$ClassIterator.hasNext()"], ["void", "com.hazelcast.util.ServiceLoader$ClassIterator.remove()"], ["java.lang.Object", "com.hazelcast.util.ServiceLoader$ClassIterator.next()"], ["com.hazelcast.util.MutableLong", "com.hazelcast.util.MutableLong()"], ["com.hazelcast.util.MutableLong", "com.hazelcast.util.MutableLong.valueOf(long)"], ["boolean", "com.hazelcast.util.MutableLong.equals(java.lang.Object)"], ["int", "com.hazelcast.util.MutableLong.hashCode()"], ["java.lang.String", "com.hazelcast.util.MutableLong.toString()"], ["int", "com.hazelcast.util.SortingUtil$1.compare(java.util.Map$Entry, java.util.Map$Entry)"], ["int", "com.hazelcast.util.SortingUtil$1.compare(java.lang.Object, java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.hazelcast.util.ConcurrentReferenceHashMap$EntrySet.iterator()"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$EntrySet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$EntrySet.remove(java.lang.Object)"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap$EntrySet.size()"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$EntrySet.isEmpty()"], ["void", "com.hazelcast.util.ConcurrentReferenceHashMap$EntrySet.clear()"], ["com.hazelcast.util.ServiceLoader$ServiceDefinition", "com.hazelcast.util.ServiceLoader$ServiceDefinition(java.lang.String, java.lang.ClassLoader)"], ["boolean", "com.hazelcast.util.ServiceLoader$ServiceDefinition.equals(java.lang.Object)"], ["int", "com.hazelcast.util.ServiceLoader$ServiceDefinition.hashCode()"], ["<E> void", "com.hazelcast.util.ConcurrencyUtil.setMax(E, java.util.concurrent.atomic.AtomicLongFieldUpdater<E>, long)"], ["boolean", "com.hazelcast.util.ConcurrencyUtil.setIfEqualOrGreaterThan(java.util.concurrent.atomic.AtomicLong, long)"], ["<K, V> V", "com.hazelcast.util.ConcurrencyUtil.getOrPutSynchronized(java.util.concurrent.ConcurrentMap<K, V>, K, java.lang.Object, com.hazelcast.util.ConstructorFunction<K, V>)"], ["<K, V> V", "com.hazelcast.util.ConcurrencyUtil.getOrPutSynchronized(java.util.concurrent.ConcurrentMap<K, V>, K, com.hazelcast.util.ContextMutexFactory, com.hazelcast.util.ConstructorFunction<K, V>)"], ["<K, V> V", "com.hazelcast.util.ConcurrencyUtil.getOrPutIfAbsent(java.util.concurrent.ConcurrentMap<K, V>, K, com.hazelcast.util.ConstructorFunction<K, V>)"], ["com.hazelcast.util.AddressUtil$Ip4AddressMatcher", "com.hazelcast.util.AddressUtil$Ip4AddressMatcher()"], ["boolean", "com.hazelcast.util.AddressUtil$Ip4AddressMatcher.isIPv4()"], ["boolean", "com.hazelcast.util.AddressUtil$Ip4AddressMatcher.isIPv6()"], ["void", "com.hazelcast.util.AddressUtil$Ip4AddressMatcher.setAddress(java.lang.String[])"], ["boolean", "com.hazelcast.util.AddressUtil$Ip4AddressMatcher.match(com.hazelcast.util.AddressUtil$AddressMatcher)"], ["java.lang.String", "com.hazelcast.util.AddressUtil$Ip4AddressMatcher.getAddress()"], ["int", "com.hazelcast.util.SortingUtil.compare(java.util.Comparator<java.util.Map$Entry>, com.hazelcast.util.IterationType, java.util.Map$Entry, java.util.Map$Entry)"], ["com.hazelcast.internal.util.ResultSet", "com.hazelcast.util.SortingUtil.getSortedQueryResultSet(java.util.List<java.util.Map$Entry>, com.hazelcast.query.PagingPredicate, com.hazelcast.util.IterationType)"], ["boolean", "com.hazelcast.util.SortingUtil.compareAnchor(com.hazelcast.query.PagingPredicate, com.hazelcast.query.impl.QueryableEntry, java.util.Map$Entry<java.lang.Integer, java.util.Map$Entry>)"], ["java.lang.RuntimeException", "com.hazelcast.util.ExceptionUtil$1.create(java.lang.Throwable, java.lang.String)"], ["com.hazelcast.util.SampleableConcurrentHashMap", "com.hazelcast.util.SampleableConcurrentHashMap(int)"], ["com.hazelcast.util.SampleableConcurrentHashMap", "com.hazelcast.util.SampleableConcurrentHashMap(int, float, int, com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType, com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType, java.util.EnumSet<com.hazelcast.util.ConcurrentReferenceHashMap$Option>)"], ["int", "com.hazelcast.util.SampleableConcurrentHashMap.fetchKeys(int, int, java.util.List<K>)"], ["int", "com.hazelcast.util.SampleableConcurrentHashMap.fetchEntries(int, int, java.util.List<java.util.Map$Entry<K, V>>)"], ["<E extends com.hazelcast.util.SampleableConcurrentHashMap$SamplingEntry> java.lang.Iterable<E>", "com.hazelcast.util.SampleableConcurrentHashMap.getRandomSamples(int)"], ["<T> T", "com.hazelcast.util.IterableUtil.getFirst(java.lang.Iterable<T>, T)"], ["<T, R> java.lang.Iterable<R>", "com.hazelcast.util.IterableUtil.map(java.lang.Iterable<T>, com.hazelcast.core.IFunction<T, R>)"], ["<T, R> java.util.Iterator<R>", "com.hazelcast.util.IterableUtil.map(java.util.Iterator<T>, com.hazelcast.core.IFunction<T, R>)"], ["<T, R> java.util.Iterator<R>", "com.hazelcast.util.IterableUtil.limit(java.util.Iterator<R>, int)"], ["<T> java.lang.Iterable<T>", "com.hazelcast.util.IterableUtil.nullToEmpty(java.lang.Iterable<T>)"], ["<K, V> java.util.Map<K, V>", "com.hazelcast.util.MapUtil.createHashMap(int)"], ["<K, V> java.util.Map<K, V>", "com.hazelcast.util.MapUtil.createHashMapAdapter(int)"], ["<K, V> java.util.Map<K, V>", "com.hazelcast.util.MapUtil.createLinkedHashMap(int)"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "com.hazelcast.util.MapUtil.createConcurrentHashMap(int)"], ["<V> com.hazelcast.util.collection.Int2ObjectHashMap<V>", "com.hazelcast.util.MapUtil.createInt2ObjectHashMap(int)"], ["boolean", "com.hazelcast.util.MapUtil.isNullOrEmpty(java.util.Map)"], ["java.lang.String", "com.hazelcast.util.UuidUtil.createClusterUuid()"], ["java.lang.String", "com.hazelcast.util.UuidUtil.createMemberUuid(com.hazelcast.nio.Address)"], ["java.lang.String", "com.hazelcast.util.UuidUtil.createClientUuid(com.hazelcast.nio.Address)"], ["java.lang.String", "com.hazelcast.util.UuidUtil.newUnsecureUuidString()"], ["java.lang.String", "com.hazelcast.util.UuidUtil.newSecureUuidString()"], ["java.util.UUID", "com.hazelcast.util.UuidUtil.newUnsecureUUID()"], ["java.util.UUID", "com.hazelcast.util.UuidUtil.newSecureUUID()"], ["com.hazelcast.util.ContextMutexFactory", "com.hazelcast.util.ContextMutexFactory()"], ["com.hazelcast.util.ContextMutexFactory$Mutex", "com.hazelcast.util.ContextMutexFactory.mutexFor(java.lang.Object)"], ["K", "com.hazelcast.util.ConcurrentReferenceHashMap$KeyIterator.next()"], ["K", "com.hazelcast.util.ConcurrentReferenceHashMap$KeyIterator.nextElement()"], ["void", "com.hazelcast.util.FutureUtil$8.handleException(java.lang.Throwable)"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap$KeySet.size()"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$KeySet.isEmpty()"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$KeySet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$KeySet.remove(java.lang.Object)"], ["void", "com.hazelcast.util.ConcurrentReferenceHashMap$KeySet.clear()"], ["java.util.Map$Entry<K, V>", "com.hazelcast.util.ConcurrentReferenceHashMap$EntryIterator.next()"], ["java.lang.Object", "com.hazelcast.util.ConcurrentReferenceHashMap$EntryIterator.next()"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap$SoftValueReference.keyHash()"], ["java.lang.Object", "com.hazelcast.util.ConcurrentReferenceHashMap$SoftValueReference.keyRef()"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap(int, float, int, com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType, com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType, java.util.EnumSet<com.hazelcast.util.ConcurrentReferenceHashMap$Option>)"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap(int, float, int)"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap(int, float)"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap(int, com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType, com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType)"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap(com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType, com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType)"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap(com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType, com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType, java.util.EnumSet<com.hazelcast.util.ConcurrentReferenceHashMap$Option>)"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap(int)"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap()"], ["com.hazelcast.util.ConcurrentReferenceHashMap", "com.hazelcast.util.ConcurrentReferenceHashMap(java.util.Map<? extends K, ? extends V>)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap.isEmpty()"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap.size()"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap.get(java.lang.Object)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap.containsValue(java.lang.Object)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap.contains(java.lang.Object)"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap.put(K, V)"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap.putIfAbsent(K, V)"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap.applyIfAbsent(K, com.hazelcast.core.IFunction<? super K, ? extends V>)"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap.applyIfPresent(K, com.hazelcast.core.IBiFunction<? super K, ? super V, ? extends V>)"], ["void", "com.hazelcast.util.ConcurrentReferenceHashMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap.remove(java.lang.Object)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap.replace(K, V, V)"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap.replace(K, V)"], ["void", "com.hazelcast.util.ConcurrentReferenceHashMap.clear()"], ["void", "com.hazelcast.util.ConcurrentReferenceHashMap.purgeStaleEntries()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.hazelcast.util.ConcurrentReferenceHashMap.entrySet()"], ["int", "com.hazelcast.util.HashUtil$NarrowDirectLoadStrategy.getInt(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["long", "com.hazelcast.util.HashUtil$NarrowDirectLoadStrategy.getLong(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["byte", "com.hazelcast.util.HashUtil$NarrowDirectLoadStrategy.getByte(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["long", "com.hazelcast.util.HashUtil$NarrowDirectLoadStrategy.getLong(java.lang.Object, long)"], ["int", "com.hazelcast.util.HashUtil$NarrowDirectLoadStrategy.getInt(java.lang.Object, long)"], ["byte", "com.hazelcast.util.HashUtil$NarrowDirectLoadStrategy.getByte(java.lang.Object, long)"], ["boolean", "com.hazelcast.util.CollectionUtil.isEmpty(java.util.Collection)"], ["boolean", "com.hazelcast.util.CollectionUtil.isNotEmpty(java.util.Collection)"], ["<K, V> java.util.List<V>", "com.hazelcast.util.CollectionUtil.addToValueList(java.util.Map<K, java.util.List<V>>, K, V)"], ["<T> T", "com.hazelcast.util.CollectionUtil.getItemAtPositionOrNull(java.util.Collection<T>, int)"], ["<C> java.util.Collection<com.hazelcast.nio.serialization.Data>", "com.hazelcast.util.CollectionUtil.objectToDataCollection(java.util.Collection<C>, com.hazelcast.spi.serialization.SerializationService)"], ["<C> void", "com.hazelcast.util.CollectionUtil.objectToDataCollection(java.util.Collection<C>, java.util.Collection<com.hazelcast.nio.serialization.Data>, com.hazelcast.spi.serialization.SerializationService, java.lang.String)"], ["int[]", "com.hazelcast.util.CollectionUtil.toIntArray(java.util.Collection<java.lang.Integer>)"], ["long[]", "com.hazelcast.util.CollectionUtil.toLongArray(java.util.Collection<java.lang.Long>)"], ["<T> java.util.Collection<T>", "com.hazelcast.util.CollectionUtil.nullToEmpty(java.util.Collection<T>)"], ["boolean", "com.hazelcast.util.SampleableConcurrentHashMap$LazySamplingEntryIterableIterator.hasNext()"], ["E", "com.hazelcast.util.SampleableConcurrentHashMap$LazySamplingEntryIterableIterator.next()"], ["void", "com.hazelcast.util.SampleableConcurrentHashMap$LazySamplingEntryIterableIterator.remove()"], ["java.lang.Object", "com.hazelcast.util.SampleableConcurrentHashMap$LazySamplingEntryIterableIterator.next()"], ["void", "com.hazelcast.util.ContextMutexFactory$Mutex.close()"], ["com.hazelcast.util.PhoneHome$PhoneHomeParameterCreator", "com.hazelcast.util.PhoneHome$PhoneHomeParameterCreator()"], ["com.hazelcast.util.PhoneHome$PhoneHomeParameterCreator", "com.hazelcast.util.PhoneHome$PhoneHomeParameterCreator.addParam(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.util.ServiceLoader$NewInstanceIterator.hasNext()"], ["T", "com.hazelcast.util.ServiceLoader$NewInstanceIterator.next()"], ["void", "com.hazelcast.util.ServiceLoader$NewInstanceIterator.remove()"], ["long", "com.hazelcast.util.Clock.currentTimeMillis()"], ["java.lang.String", "com.hazelcast.util.ExceptionUtil.toString(java.lang.Throwable)"], ["java.lang.RuntimeException", "com.hazelcast.util.ExceptionUtil.peel(java.lang.Throwable)"], ["<T extends java.lang.Throwable> java.lang.Throwable", "com.hazelcast.util.ExceptionUtil.peel(java.lang.Throwable, java.lang.Class<T>, java.lang.String)"], ["<T extends java.lang.Throwable> java.lang.Throwable", "com.hazelcast.util.ExceptionUtil.peel(java.lang.Throwable, java.lang.Class<T>, java.lang.String, com.hazelcast.util.ExceptionUtil$RuntimeExceptionFactory)"], ["java.lang.RuntimeException", "com.hazelcast.util.ExceptionUtil.rethrow(java.lang.Throwable)"], ["java.lang.RuntimeException", "com.hazelcast.util.ExceptionUtil.rethrow(java.lang.Throwable, com.hazelcast.util.ExceptionUtil$RuntimeExceptionFactory)"], ["<T extends java.lang.Throwable> java.lang.RuntimeException", "com.hazelcast.util.ExceptionUtil.rethrow(java.lang.Throwable, java.lang.Class<T>)"], ["<T extends java.lang.Throwable> java.lang.RuntimeException", "com.hazelcast.util.ExceptionUtil.rethrowAllowedTypeFirst(java.lang.Throwable, java.lang.Class<T>)"], ["java.lang.RuntimeException", "com.hazelcast.util.ExceptionUtil.rethrowAllowInterrupted(java.lang.Throwable)"], ["<T> T", "com.hazelcast.util.ExceptionUtil.sneakyThrow(java.lang.Throwable)"], ["void", "com.hazelcast.util.ExceptionUtil.fixAsyncStackTrace(java.lang.Throwable, java.lang.StackTraceElement[])"], ["void", "com.hazelcast.util.ExceptionUtil.fixAsyncStackTrace(java.lang.Throwable, java.lang.StackTraceElement[], java.lang.String)"], ["boolean", "com.hazelcast.util.OsHelper.isUnixFamily()"], ["com.hazelcast.util.collection.LongIterator", "com.hazelcast.util.collection.LongIterator(long, long[])"], ["boolean", "com.hazelcast.util.collection.LongIterator.hasNext()"], ["java.lang.Long", "com.hazelcast.util.collection.LongIterator.next()"], ["void", "com.hazelcast.util.collection.LongIterator.remove()"], ["long", "com.hazelcast.util.collection.LongIterator.nextValue()"], ["java.lang.Object", "com.hazelcast.util.collection.LongIterator.next()"], ["java.lang.Long", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.getKey()"], ["java.lang.Long", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.getValue()"], ["java.lang.Long", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.setValue(java.lang.Long)"], ["java.util.Map$Entry<java.lang.Long, java.lang.Long>", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.next()"], ["com.hazelcast.util.collection.Long2LongHashMap$EntryIterator", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.reset()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.next()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.setValue(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.getValue()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap$EntryIterator.getKey()"], ["com.hazelcast.util.collection.Int2ObjectHashMap$KeyIterator", "com.hazelcast.util.collection.Int2ObjectHashMap$KeyIterator(com.hazelcast.util.collection.Int2ObjectHashMap)"], ["java.lang.Integer", "com.hazelcast.util.collection.Int2ObjectHashMap$KeyIterator.next()"], ["int", "com.hazelcast.util.collection.Int2ObjectHashMap$KeyIterator.nextInt()"], ["void", "com.hazelcast.util.collection.Int2ObjectHashMap$KeyIterator.remove()"], ["java.lang.Object", "com.hazelcast.util.collection.Int2ObjectHashMap$KeyIterator.next()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$KeyIterator.hasNext()"], ["int", "com.hazelcast.util.collection.Int2ObjectHashMap$ValueCollection.size()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$ValueCollection.isEmpty()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$ValueCollection.contains(java.lang.Object)"], ["void", "com.hazelcast.util.collection.Int2ObjectHashMap$ValueCollection.clear()"], ["java.util.Iterator", "com.hazelcast.util.collection.Int2ObjectHashMap$ValueCollection.iterator()"], ["T", "com.hazelcast.util.collection.Long2ObjectHashMap$ValueIterator.next()"], ["T", "com.hazelcast.util.collection.Int2ObjectHashMap$ValueIterator.next()"], ["int", "com.hazelcast.util.collection.Long2ObjectHashMap$ValueCollection.size()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$ValueCollection.isEmpty()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$ValueCollection.contains(java.lang.Object)"], ["void", "com.hazelcast.util.collection.Long2ObjectHashMap$ValueCollection.clear()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$AbstractIterator.hasNext()"], ["void", "com.hazelcast.util.collection.Int2ObjectHashMap$AbstractIterator.remove()"], ["com.hazelcast.util.collection.Long2LongHashMap$UnboxingBiConsumer", "com.hazelcast.util.collection.Long2LongHashMap$UnboxingBiConsumer(com.hazelcast.util.function.BiConsumer<? super java.lang.Long, ? super java.lang.Long>)"], ["void", "com.hazelcast.util.collection.Long2LongHashMap$UnboxingBiConsumer.accept(long, long)"], ["com.hazelcast.util.collection.Long2LongHashMap$LongLongCursor", "com.hazelcast.util.collection.Long2LongHashMap$LongLongCursor(com.hazelcast.util.collection.Long2LongHashMap)"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap$LongLongCursor.advance()"], ["long", "com.hazelcast.util.collection.Long2LongHashMap$LongLongCursor.key()"], ["long", "com.hazelcast.util.collection.Long2LongHashMap$LongLongCursor.value()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap$4.get()"], ["com.hazelcast.util.collection.Long2ObjectHashMap$KeySet", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet(com.hazelcast.util.collection.Long2ObjectHashMap)"], ["int", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet.size()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet.isEmpty()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet.contains(long)"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet.remove(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet.remove(long)"], ["void", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet.clear()"], ["java.util.Iterator", "com.hazelcast.util.collection.Long2ObjectHashMap$KeySet.iterator()"], ["com.hazelcast.util.collection.IntHashSet", "com.hazelcast.util.collection.IntHashSet(int, int)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.add(java.lang.Integer)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.add(int)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.remove(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.remove(int)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.contains(int)"], ["int", "com.hazelcast.util.collection.IntHashSet.size()"], ["boolean", "com.hazelcast.util.collection.IntHashSet.isEmpty()"], ["void", "com.hazelcast.util.collection.IntHashSet.clear()"], ["boolean", "com.hazelcast.util.collection.IntHashSet.addAll(java.util.Collection<? extends java.lang.Integer>)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.containsAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.containsAll(com.hazelcast.util.collection.IntHashSet)"], ["com.hazelcast.util.collection.IntHashSet", "com.hazelcast.util.collection.IntHashSet.difference(com.hazelcast.util.collection.IntHashSet)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.removeAll(java.util.Collection<?>)"], ["com.hazelcast.util.collection.IntIterator", "com.hazelcast.util.collection.IntHashSet.iterator()"], ["void", "com.hazelcast.util.collection.IntHashSet.copy(com.hazelcast.util.collection.IntHashSet)"], ["java.lang.String", "com.hazelcast.util.collection.IntHashSet.toString()"], ["java.lang.Object[]", "com.hazelcast.util.collection.IntHashSet.toArray()"], ["<T> T[]", "com.hazelcast.util.collection.IntHashSet.toArray(T[])"], ["boolean", "com.hazelcast.util.collection.IntHashSet.equals(java.lang.Object)"], ["int", "com.hazelcast.util.collection.IntHashSet.hashCode()"], ["boolean", "com.hazelcast.util.collection.IntHashSet.retainAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.util.collection.IntHashSet.add(java.lang.Object)"], ["java.util.Iterator", "com.hazelcast.util.collection.IntHashSet.iterator()"], ["com.hazelcast.util.collection.BiInt2ObjectMap", "com.hazelcast.util.collection.BiInt2ObjectMap()"], ["com.hazelcast.util.collection.BiInt2ObjectMap", "com.hazelcast.util.collection.BiInt2ObjectMap(int, double)"], ["int", "com.hazelcast.util.collection.BiInt2ObjectMap.capacity()"], ["double", "com.hazelcast.util.collection.BiInt2ObjectMap.loadFactor()"], ["V", "com.hazelcast.util.collection.BiInt2ObjectMap.put(int, int, V)"], ["V", "com.hazelcast.util.collection.BiInt2ObjectMap.get(int, int)"], ["V", "com.hazelcast.util.collection.BiInt2ObjectMap.remove(int, int)"], ["void", "com.hazelcast.util.collection.BiInt2ObjectMap.forEach(com.hazelcast.util.collection.BiInt2ObjectMap$EntryConsumer<V>)"], ["void", "com.hazelcast.util.collection.BiInt2ObjectMap.forEach(com.hazelcast.util.function.Consumer<V>)"], ["int", "com.hazelcast.util.collection.BiInt2ObjectMap.size()"], ["boolean", "com.hazelcast.util.collection.BiInt2ObjectMap.isEmpty()"], ["com.hazelcast.util.collection.Int2ObjectHashMap$KeySet", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet(com.hazelcast.util.collection.Int2ObjectHashMap)"], ["int", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet.size()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet.isEmpty()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet.contains(int)"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet.remove(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet.remove(int)"], ["void", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet.clear()"], ["java.util.Iterator", "com.hazelcast.util.collection.Int2ObjectHashMap$KeySet.iterator()"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap$3.test(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.LongHashSet$3.test(E)"], ["com.hazelcast.util.collection.InternalSetMultimap", "com.hazelcast.util.collection.InternalSetMultimap()"], ["void", "com.hazelcast.util.collection.InternalSetMultimap.put(K, V)"], ["java.util.Set<java.util.Map$Entry<K, java.util.Set<V>>>", "com.hazelcast.util.collection.InternalSetMultimap.entrySet()"], ["com.hazelcast.util.collection.Long2LongHashMap", "com.hazelcast.util.collection.Long2LongHashMap(int, double, long)"], ["com.hazelcast.util.collection.Long2LongHashMap", "com.hazelcast.util.collection.Long2LongHashMap(long)"], ["com.hazelcast.util.collection.Long2LongHashMap", "com.hazelcast.util.collection.Long2LongHashMap(com.hazelcast.util.collection.Long2LongHashMap)"], ["int", "com.hazelcast.util.collection.Long2LongHashMap.size()"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap.isEmpty()"], ["long", "com.hazelcast.util.collection.Long2LongHashMap.get(long)"], ["long", "com.hazelcast.util.collection.Long2LongHashMap.put(long, long)"], ["void", "com.hazelcast.util.collection.Long2LongHashMap.longForEach(com.hazelcast.util.function.LongLongConsumer)"], ["com.hazelcast.util.collection.Long2LongHashMap$LongLongCursor", "com.hazelcast.util.collection.Long2LongHashMap.cursor()"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap.containsKey(long)"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap.containsValue(long)"], ["void", "com.hazelcast.util.collection.Long2LongHashMap.clear()"], ["java.lang.Long", "com.hazelcast.util.collection.Long2LongHashMap.get(java.lang.Object)"], ["java.lang.Long", "com.hazelcast.util.collection.Long2LongHashMap.put(java.lang.Long, java.lang.Long)"], ["void", "com.hazelcast.util.collection.Long2LongHashMap.forEach(com.hazelcast.util.function.BiConsumer<? super java.lang.Long, ? super java.lang.Long>)"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap.containsValue(java.lang.Object)"], ["void", "com.hazelcast.util.collection.Long2LongHashMap.putAll(java.util.Map<? extends java.lang.Long, ? extends java.lang.Long>)"], ["java.util.Set<java.util.Map$Entry<java.lang.Long, java.lang.Long>>", "com.hazelcast.util.collection.Long2LongHashMap.entrySet()"], ["java.lang.Long", "com.hazelcast.util.collection.Long2LongHashMap.remove(java.lang.Object)"], ["long", "com.hazelcast.util.collection.Long2LongHashMap.remove(long)"], ["java.lang.String", "com.hazelcast.util.collection.Long2LongHashMap.toString()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap.remove(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap.put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap.get(java.lang.Object)"], ["int", "com.hazelcast.util.collection.Long2ObjectHashMap$EntrySet.size()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$EntrySet.isEmpty()"], ["java.util.Iterator<java.util.Map$Entry<java.lang.Long, V>>", "com.hazelcast.util.collection.Long2ObjectHashMap$EntrySet.iterator()"], ["void", "com.hazelcast.util.collection.Long2ObjectHashMap$EntrySet.clear()"], ["void", "com.hazelcast.util.collection.Long2LongHashMap$1.accept(long, long)"], ["com.hazelcast.util.collection.Int2ObjectHashMap", "com.hazelcast.util.collection.Int2ObjectHashMap()"], ["com.hazelcast.util.collection.Int2ObjectHashMap", "com.hazelcast.util.collection.Int2ObjectHashMap(int)"], ["com.hazelcast.util.collection.Int2ObjectHashMap", "com.hazelcast.util.collection.Int2ObjectHashMap(int, double)"], ["double", "com.hazelcast.util.collection.Int2ObjectHashMap.loadFactor()"], ["int", "com.hazelcast.util.collection.Int2ObjectHashMap.capacity()"], ["int", "com.hazelcast.util.collection.Int2ObjectHashMap.resizeThreshold()"], ["int", "com.hazelcast.util.collection.Int2ObjectHashMap.size()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap.isEmpty()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap.containsKey(int)"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap.containsValue(java.lang.Object)"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap.get(java.lang.Object)"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap.get(int)"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap.computeIfAbsent(int, com.hazelcast.util.function.IntFunction<? extends V>)"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap.put(java.lang.Integer, V)"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap.put(int, V)"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap.remove(java.lang.Object)"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap.remove(int)"], ["void", "com.hazelcast.util.collection.Int2ObjectHashMap.clear()"], ["void", "com.hazelcast.util.collection.Int2ObjectHashMap.compact()"], ["void", "com.hazelcast.util.collection.Int2ObjectHashMap.putAll(java.util.Map<? extends java.lang.Integer, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<java.lang.Integer, V>>", "com.hazelcast.util.collection.Int2ObjectHashMap.entrySet()"], ["java.lang.String", "com.hazelcast.util.collection.Int2ObjectHashMap.toString()"], ["java.util.Set", "com.hazelcast.util.collection.Int2ObjectHashMap.keySet()"], ["java.lang.Object", "com.hazelcast.util.collection.Int2ObjectHashMap.put(java.lang.Object, java.lang.Object)"], ["com.hazelcast.util.collection.LongHashSet", "com.hazelcast.util.collection.LongHashSet(int, long)"], ["com.hazelcast.util.collection.LongHashSet", "com.hazelcast.util.collection.LongHashSet(long[], long)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.add(java.lang.Long)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.add(long)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.remove(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.remove(long)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.contains(long)"], ["int", "com.hazelcast.util.collection.LongHashSet.size()"], ["boolean", "com.hazelcast.util.collection.LongHashSet.isEmpty()"], ["void", "com.hazelcast.util.collection.LongHashSet.clear()"], ["boolean", "com.hazelcast.util.collection.LongHashSet.addAll(java.util.Collection<? extends java.lang.Long>)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.containsAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.containsAll(com.hazelcast.util.collection.LongHashSet)"], ["com.hazelcast.util.collection.LongHashSet", "com.hazelcast.util.collection.LongHashSet.difference(com.hazelcast.util.collection.LongHashSet)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.removeAll(java.util.Collection<?>)"], ["com.hazelcast.util.collection.LongIterator", "com.hazelcast.util.collection.LongHashSet.iterator()"], ["void", "com.hazelcast.util.collection.LongHashSet.copy(com.hazelcast.util.collection.LongHashSet)"], ["java.lang.String", "com.hazelcast.util.collection.LongHashSet.toString()"], ["java.lang.Object[]", "com.hazelcast.util.collection.LongHashSet.toArray()"], ["<T> T[]", "com.hazelcast.util.collection.LongHashSet.toArray(T[])"], ["boolean", "com.hazelcast.util.collection.LongHashSet.equals(java.lang.Object)"], ["int", "com.hazelcast.util.collection.LongHashSet.hashCode()"], ["boolean", "com.hazelcast.util.collection.LongHashSet.retainAll(java.util.Collection<?>)"], ["boolean", "com.hazelcast.util.collection.LongHashSet.add(java.lang.Object)"], ["java.util.Iterator", "com.hazelcast.util.collection.LongHashSet.iterator()"], ["boolean", "com.hazelcast.util.collection.LongHashSet$1.test(E)"], ["boolean", "com.hazelcast.util.collection.LongHashSet$1.test(java.lang.Object)"], ["java.util.Map$Entry<java.lang.Integer, V>", "com.hazelcast.util.collection.Int2ObjectHashMap$EntryIterator.next()"], ["java.lang.Integer", "com.hazelcast.util.collection.Int2ObjectHashMap$EntryIterator.getKey()"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap$EntryIterator.getValue()"], ["V", "com.hazelcast.util.collection.Int2ObjectHashMap$EntryIterator.setValue(V)"], ["java.lang.Object", "com.hazelcast.util.collection.Int2ObjectHashMap$EntryIterator.next()"], ["java.lang.Object", "com.hazelcast.util.collection.Int2ObjectHashMap$EntryIterator.getKey()"], ["boolean", "com.hazelcast.util.collection.InflatableSet$HybridIterator.hasNext()"], ["T", "com.hazelcast.util.collection.InflatableSet$HybridIterator.next()"], ["void", "com.hazelcast.util.collection.InflatableSet$HybridIterator.remove()"], ["boolean", "com.hazelcast.util.collection.IntHashSet$3.test(E)"], ["java.util.Map$Entry<java.lang.Long, V>", "com.hazelcast.util.collection.Long2ObjectHashMap$EntryIterator.next()"], ["java.lang.Long", "com.hazelcast.util.collection.Long2ObjectHashMap$EntryIterator.getKey()"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap$EntryIterator.getValue()"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap$EntryIterator.setValue(V)"], ["java.lang.Object", "com.hazelcast.util.collection.Long2ObjectHashMap$EntryIterator.next()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2ObjectHashMap$EntryIterator.getKey()"], ["com.hazelcast.util.collection.ComposedKeyMap", "com.hazelcast.util.collection.ComposedKeyMap()"], ["V", "com.hazelcast.util.collection.ComposedKeyMap.put(K1, K2, V)"], ["V", "com.hazelcast.util.collection.ComposedKeyMap.get(K1, K2)"], ["com.hazelcast.util.collection.IntIterator", "com.hazelcast.util.collection.IntIterator(int, int[])"], ["boolean", "com.hazelcast.util.collection.IntIterator.hasNext()"], ["java.lang.Integer", "com.hazelcast.util.collection.IntIterator.next()"], ["void", "com.hazelcast.util.collection.IntIterator.remove()"], ["int", "com.hazelcast.util.collection.IntIterator.nextValue()"], ["java.lang.Object", "com.hazelcast.util.collection.IntIterator.next()"], ["<T> com.hazelcast.util.collection.InflatableSet$Builder<T>", "com.hazelcast.util.collection.InflatableSet.newBuilder(int)"], ["<T> com.hazelcast.util.collection.InflatableSet$Builder<T>", "com.hazelcast.util.collection.InflatableSet.newBuilder(java.util.List<T>)"], ["int", "com.hazelcast.util.collection.InflatableSet.size()"], ["boolean", "com.hazelcast.util.collection.InflatableSet.isEmpty()"], ["boolean", "com.hazelcast.util.collection.InflatableSet.contains(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.InflatableSet.add(T)"], ["boolean", "com.hazelcast.util.collection.InflatableSet.remove(java.lang.Object)"], ["void", "com.hazelcast.util.collection.InflatableSet.clear()"], ["com.hazelcast.util.collection.InternalListMultiMap", "com.hazelcast.util.collection.InternalListMultiMap()"], ["void", "com.hazelcast.util.collection.InternalListMultiMap.put(K, V)"], ["java.util.Set<java.util.Map$Entry<K, java.util.List<V>>>", "com.hazelcast.util.collection.InternalListMultiMap.entrySet()"], ["com.hazelcast.util.collection.Long2LongHashMap$EntryIteratorSupplier", "com.hazelcast.util.collection.Long2LongHashMap$EntryIteratorSupplier(com.hazelcast.util.collection.Long2LongHashMap$EntryIterator)"], ["java.util.Iterator<java.util.Map$Entry<java.lang.Long, java.lang.Long>>", "com.hazelcast.util.collection.Long2LongHashMap$EntryIteratorSupplier.get()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap$EntryIteratorSupplier.get()"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap$2.test(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.IntHashSet$1.test(E)"], ["boolean", "com.hazelcast.util.collection.IntHashSet$1.test(java.lang.Object)"], ["com.hazelcast.util.collection.MapDelegatingSet", "com.hazelcast.util.collection.MapDelegatingSet(java.util.Map<?, ?>, com.hazelcast.util.function.Supplier<java.util.Iterator<V>>, com.hazelcast.util.function.Predicate)"], ["int", "com.hazelcast.util.collection.MapDelegatingSet.size()"], ["boolean", "com.hazelcast.util.collection.MapDelegatingSet.isEmpty()"], ["boolean", "com.hazelcast.util.collection.MapDelegatingSet.contains(java.lang.Object)"], ["void", "com.hazelcast.util.collection.MapDelegatingSet.clear()"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap$AbstractIterator.hasNext()"], ["void", "com.hazelcast.util.collection.Long2LongHashMap$AbstractIterator.remove()"], ["com.hazelcast.util.collection.Long2ObjectHashMap$KeyIterator", "com.hazelcast.util.collection.Long2ObjectHashMap$KeyIterator(com.hazelcast.util.collection.Long2ObjectHashMap)"], ["java.lang.Long", "com.hazelcast.util.collection.Long2ObjectHashMap$KeyIterator.next()"], ["long", "com.hazelcast.util.collection.Long2ObjectHashMap$KeyIterator.nextLong()"], ["void", "com.hazelcast.util.collection.Long2ObjectHashMap$KeyIterator.remove()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2ObjectHashMap$KeyIterator.next()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$KeyIterator.hasNext()"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap$5.test(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.LongHashSet$2.test(E)"], ["<T> T[]", "com.hazelcast.util.collection.ArrayUtils.createCopy(T[])"], ["<T> void", "com.hazelcast.util.collection.ArrayUtils.copyWithoutNulls(T[], T[])"], ["<T> boolean", "com.hazelcast.util.collection.ArrayUtils.contains(T[], T)"], ["<T> T", "com.hazelcast.util.collection.ArrayUtils.getItemAtPositionOrNull(T[], int)"], ["<T> void", "com.hazelcast.util.collection.ArrayUtils.concat(T[], T[], T[])"], ["void", "com.hazelcast.util.collection.ArrayUtils.boundsCheck(int, int, int)"], ["com.hazelcast.util.collection.Long2ObjectHashMap", "com.hazelcast.util.collection.Long2ObjectHashMap()"], ["com.hazelcast.util.collection.Long2ObjectHashMap", "com.hazelcast.util.collection.Long2ObjectHashMap(int)"], ["com.hazelcast.util.collection.Long2ObjectHashMap", "com.hazelcast.util.collection.Long2ObjectHashMap(int, double)"], ["double", "com.hazelcast.util.collection.Long2ObjectHashMap.loadFactor()"], ["int", "com.hazelcast.util.collection.Long2ObjectHashMap.capacity()"], ["int", "com.hazelcast.util.collection.Long2ObjectHashMap.resizeThreshold()"], ["int", "com.hazelcast.util.collection.Long2ObjectHashMap.size()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap.isEmpty()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap.containsKey(java.lang.Object)"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap.containsKey(long)"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap.containsValue(java.lang.Object)"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap.get(java.lang.Object)"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap.get(long)"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap.computeIfAbsent(long, com.hazelcast.util.function.LongFunction<? extends V>)"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap.put(java.lang.Long, V)"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap.put(long, V)"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap.remove(java.lang.Object)"], ["V", "com.hazelcast.util.collection.Long2ObjectHashMap.remove(long)"], ["void", "com.hazelcast.util.collection.Long2ObjectHashMap.clear()"], ["void", "com.hazelcast.util.collection.Long2ObjectHashMap.compact()"], ["void", "com.hazelcast.util.collection.Long2ObjectHashMap.putAll(java.util.Map<? extends java.lang.Long, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<java.lang.Long, V>>", "com.hazelcast.util.collection.Long2ObjectHashMap.entrySet()"], ["java.lang.String", "com.hazelcast.util.collection.Long2ObjectHashMap.toString()"], ["java.util.Set", "com.hazelcast.util.collection.Long2ObjectHashMap.keySet()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2ObjectHashMap.put(java.lang.Object, java.lang.Object)"], ["com.hazelcast.util.collection.Long2LongHashMap$IteratorSupplier", "com.hazelcast.util.collection.Long2LongHashMap$IteratorSupplier(com.hazelcast.util.collection.Long2LongHashMap$LongIterator)"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap$IteratorSupplier.get()"], ["com.hazelcast.util.collection.InflatableSet$State[]", "com.hazelcast.util.collection.InflatableSet$State.values()"], ["com.hazelcast.util.collection.InflatableSet$State", "com.hazelcast.util.collection.InflatableSet$State.valueOf(java.lang.String)"], ["int", "com.hazelcast.util.collection.InflatableSet$Builder.size()"], ["com.hazelcast.util.collection.InflatableSet$Builder", "com.hazelcast.util.collection.InflatableSet$Builder.add(T)"], ["boolean", "com.hazelcast.util.collection.IntHashSet$2.test(E)"], ["java.lang.Long", "com.hazelcast.util.collection.Long2LongHashMap$LongIterator.next()"], ["long", "com.hazelcast.util.collection.Long2LongHashMap$LongIterator.nextValue()"], ["com.hazelcast.util.collection.Long2LongHashMap$LongIterator", "com.hazelcast.util.collection.Long2LongHashMap$LongIterator.reset()"], ["void", "com.hazelcast.util.collection.Long2LongHashMap$LongIterator.remove()"], ["boolean", "com.hazelcast.util.collection.Long2LongHashMap$LongIterator.hasNext()"], ["java.lang.Object", "com.hazelcast.util.collection.Long2LongHashMap$LongIterator.next()"], ["boolean", "com.hazelcast.util.collection.Long2ObjectHashMap$AbstractIterator.hasNext()"], ["void", "com.hazelcast.util.collection.Long2ObjectHashMap$AbstractIterator.remove()"], ["int", "com.hazelcast.util.collection.Int2ObjectHashMap$EntrySet.size()"], ["boolean", "com.hazelcast.util.collection.Int2ObjectHashMap$EntrySet.isEmpty()"], ["java.util.Iterator<java.util.Map$Entry<java.lang.Integer, V>>", "com.hazelcast.util.collection.Int2ObjectHashMap$EntrySet.iterator()"], ["void", "com.hazelcast.util.collection.Int2ObjectHashMap$EntrySet.clear()"], ["com.hazelcast.util.RuntimeMemoryInfoAccessor", "com.hazelcast.util.RuntimeMemoryInfoAccessor()"], ["long", "com.hazelcast.util.RuntimeMemoryInfoAccessor.getTotalMemory()"], ["long", "com.hazelcast.util.RuntimeMemoryInfoAccessor.getFreeMemory()"], ["long", "com.hazelcast.util.RuntimeMemoryInfoAccessor.getMaxMemory()"], ["com.hazelcast.util.UnmodifiableListIterator", "com.hazelcast.util.UnmodifiableListIterator()"], ["void", "com.hazelcast.util.UnmodifiableListIterator.set(E)"], ["void", "com.hazelcast.util.UnmodifiableListIterator.add(E)"], ["void", "com.hazelcast.util.FutureUtil$3.handleException(java.lang.Throwable)"], ["com.hazelcast.util.scheduler.CoalescingDelayedTrigger", "com.hazelcast.util.scheduler.CoalescingDelayedTrigger(com.hazelcast.spi.ExecutionService, long, long, java.lang.Runnable)"], ["void", "com.hazelcast.util.scheduler.CoalescingDelayedTrigger.executeWithDelay()"], ["com.hazelcast.util.scheduler.ScheduledEntry", "com.hazelcast.util.scheduler.ScheduledEntry(K, V, long, int, long)"], ["K", "com.hazelcast.util.scheduler.ScheduledEntry.getKey()"], ["V", "com.hazelcast.util.scheduler.ScheduledEntry.getValue()"], ["V", "com.hazelcast.util.scheduler.ScheduledEntry.setValue(V)"], ["long", "com.hazelcast.util.scheduler.ScheduledEntry.getScheduledDelayMillis()"], ["int", "com.hazelcast.util.scheduler.ScheduledEntry.getActualDelaySeconds()"], ["long", "com.hazelcast.util.scheduler.ScheduledEntry.getScheduleId()"], ["long", "com.hazelcast.util.scheduler.ScheduledEntry.getActualDelayMillis()"], ["boolean", "com.hazelcast.util.scheduler.ScheduledEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.util.scheduler.ScheduledEntry.hashCode()"], ["java.lang.String", "com.hazelcast.util.scheduler.ScheduledEntry.toString()"], ["com.hazelcast.util.scheduler.CompositeKey", "com.hazelcast.util.scheduler.CompositeKey(java.lang.Object, long)"], ["java.lang.Object", "com.hazelcast.util.scheduler.CompositeKey.getKey()"], ["boolean", "com.hazelcast.util.scheduler.CompositeKey.equals(java.lang.Object)"], ["int", "com.hazelcast.util.scheduler.CompositeKey.hashCode()"], ["java.lang.String", "com.hazelcast.util.scheduler.CompositeKey.toString()"], ["<K, V> com.hazelcast.util.scheduler.EntryTaskScheduler<K, V>", "com.hazelcast.util.scheduler.EntryTaskSchedulerFactory.newScheduler(com.hazelcast.spi.TaskScheduler, com.hazelcast.util.scheduler.ScheduledEntryProcessor<K, V>, com.hazelcast.util.scheduler.ScheduleType)"], ["com.hazelcast.util.scheduler.ScheduleType[]", "com.hazelcast.util.scheduler.ScheduleType.values()"], ["com.hazelcast.util.scheduler.ScheduleType", "com.hazelcast.util.scheduler.ScheduleType.valueOf(java.lang.String)"], ["boolean", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler.schedule(long, K, V)"], ["com.hazelcast.util.scheduler.ScheduledEntry<K, V>", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler.cancel(K)"], ["int", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler.cancelIfExists(K, V)"], ["com.hazelcast.util.scheduler.ScheduledEntry<K, V>", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler.get(K)"], ["com.hazelcast.util.scheduler.ScheduledEntry<K, V>", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler.getByCompositeKey(K)"], ["void", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler.cancelAll()"], ["java.lang.String", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler.toString()"], ["int", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler.size()"], ["int", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler$1.compare(com.hazelcast.util.scheduler.ScheduledEntry, com.hazelcast.util.scheduler.ScheduledEntry)"], ["int", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler$1.compare(java.lang.Object, java.lang.Object)"], ["void", "com.hazelcast.util.scheduler.SecondsBasedEntryTaskScheduler$EntryProcessorExecutor.run()"], ["int", "com.hazelcast.util.HashUtil$ByteArrayLoadStrategy.getInt(byte[], long)"], ["long", "com.hazelcast.util.HashUtil$ByteArrayLoadStrategy.getLong(byte[], long)"], ["byte", "com.hazelcast.util.HashUtil$ByteArrayLoadStrategy.getByte(byte[], long)"], ["long", "com.hazelcast.util.HashUtil$ByteArrayLoadStrategy.getLong(java.lang.Object, long)"], ["int", "com.hazelcast.util.HashUtil$ByteArrayLoadStrategy.getInt(java.lang.Object, long)"], ["byte", "com.hazelcast.util.HashUtil$ByteArrayLoadStrategy.getByte(java.lang.Object, long)"], ["void", "com.hazelcast.util.PhoneHome$1.run()"], ["void", "com.hazelcast.util.FutureUtil$2.handleException(java.lang.Throwable)"], ["long", "com.hazelcast.util.ThreadUtil.getThreadId()"], ["void", "com.hazelcast.util.ThreadUtil.setThreadId(long)"], ["void", "com.hazelcast.util.ThreadUtil.removeThreadId()"], ["java.lang.String", "com.hazelcast.util.ThreadUtil.createThreadName(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.util.ThreadUtil.createThreadPoolName(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.util.ThreadUtil.assertRunningOnPartitionThread()"], ["com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType[]", "com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType.values()"], ["com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType", "com.hazelcast.util.ConcurrentReferenceHashMap$ReferenceType.valueOf(java.lang.String)"], ["void", "com.hazelcast.util.FutureUtil$4.handleException(java.lang.Throwable)"], ["int", "com.hazelcast.util.RandomPicker.getInt(int)"], ["int", "com.hazelcast.util.RandomPicker.getInt(int, int)"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap$Values.size()"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$Values.isEmpty()"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$Values.contains(java.lang.Object)"], ["void", "com.hazelcast.util.ConcurrentReferenceHashMap$Values.clear()"], ["boolean", "com.hazelcast.util.ServiceLoader$URLDefinition.equals(java.lang.Object)"], ["int", "com.hazelcast.util.ServiceLoader$URLDefinition.hashCode()"], ["java.lang.String", "com.hazelcast.util.MD5Util.toMD5String(java.lang.String)"], ["com.hazelcast.util.Clock$ClockImpl", "com.hazelcast.util.Clock$ClockImpl()"], ["com.hazelcast.util.ConcurrentReferenceHashMap$Option[]", "com.hazelcast.util.ConcurrentReferenceHashMap$Option.values()"], ["com.hazelcast.util.ConcurrentReferenceHashMap$Option", "com.hazelcast.util.ConcurrentReferenceHashMap$Option.valueOf(java.lang.String)"], ["com.hazelcast.util.FutureUtil$ExceptionHandler", "com.hazelcast.util.FutureUtil.logAllExceptions(com.hazelcast.logging.ILogger, java.lang.String, java.util.logging.Level)"], ["com.hazelcast.util.FutureUtil$ExceptionHandler", "com.hazelcast.util.FutureUtil.logAllExceptions(java.lang.String, java.util.logging.Level)"], ["com.hazelcast.util.FutureUtil$ExceptionHandler", "com.hazelcast.util.FutureUtil.logAllExceptions(com.hazelcast.logging.ILogger, java.util.logging.Level)"], ["com.hazelcast.util.FutureUtil$ExceptionHandler", "com.hazelcast.util.FutureUtil.logAllExceptions(java.util.logging.Level)"], ["<V> java.util.Collection<V>", "com.hazelcast.util.FutureUtil.returnWithDeadline(java.util.Collection<java.util.concurrent.Future<V>>, long, java.util.concurrent.TimeUnit)"], ["<V> java.util.Collection<V>", "com.hazelcast.util.FutureUtil.returnWithDeadline(java.util.Collection<java.util.concurrent.Future<V>>, long, java.util.concurrent.TimeUnit, com.hazelcast.util.FutureUtil$ExceptionHandler)"], ["<V> java.util.Collection<V>", "com.hazelcast.util.FutureUtil.returnWithDeadline(java.util.Collection<java.util.concurrent.Future<V>>, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit)"], ["<V> java.util.Collection<V>", "com.hazelcast.util.FutureUtil.returnWithDeadline(java.util.Collection<java.util.concurrent.Future<V>>, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit, com.hazelcast.util.FutureUtil$ExceptionHandler)"], ["void", "com.hazelcast.util.FutureUtil.waitForever(java.util.Collection<? extends java.util.concurrent.Future>, com.hazelcast.util.FutureUtil$ExceptionHandler)"], ["void", "com.hazelcast.util.FutureUtil.waitForever(java.util.Collection<? extends java.util.concurrent.Future>)"], ["void", "com.hazelcast.util.FutureUtil.waitWithDeadline(java.util.Collection<? extends java.util.concurrent.Future>, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.util.FutureUtil.waitUntilAllRespondedWithDeadline(java.util.Collection<? extends java.util.concurrent.Future>, long, java.util.concurrent.TimeUnit, com.hazelcast.util.FutureUtil$ExceptionHandler)"], ["void", "com.hazelcast.util.FutureUtil.waitWithDeadline(java.util.Collection<? extends java.util.concurrent.Future>, long, java.util.concurrent.TimeUnit, com.hazelcast.util.FutureUtil$ExceptionHandler)"], ["void", "com.hazelcast.util.FutureUtil.waitWithDeadline(java.util.Collection<? extends java.util.concurrent.Future>, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.util.FutureUtil.waitWithDeadline(java.util.Collection<? extends java.util.concurrent.Future>, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit, com.hazelcast.util.FutureUtil$ExceptionHandler)"], ["boolean", "com.hazelcast.util.FutureUtil.allDone(java.util.Collection<java.util.concurrent.Future>)"], ["void", "com.hazelcast.util.FutureUtil.checkAllDone(java.util.Collection<java.util.concurrent.Future>)"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap$WeakKeyReference.keyHash()"], ["java.lang.Object", "com.hazelcast.util.ConcurrentReferenceHashMap$WeakKeyReference.keyRef()"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap$ValueIterator.next()"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap$ValueIterator.nextElement()"], ["int", "com.hazelcast.util.HashUtil.MurmurHash3_x86_32(byte[], int, int)"], ["int", "com.hazelcast.util.HashUtil.MurmurHash3_x86_32_direct(long, int, int)"], ["int", "com.hazelcast.util.HashUtil.MurmurHash3_x86_32_direct(com.hazelcast.internal.memory.MemoryAccessor, long, int, int)"], ["long", "com.hazelcast.util.HashUtil.MurmurHash3_x64_64(byte[], int, int)"], ["long", "com.hazelcast.util.HashUtil.MurmurHash3_x64_64_direct(long, int, int)"], ["long", "com.hazelcast.util.HashUtil.MurmurHash3_x64_64_direct(com.hazelcast.internal.memory.MemoryAccessor, long, int, int)"], ["int", "com.hazelcast.util.HashUtil.MurmurHash3_fmix(int)"], ["long", "com.hazelcast.util.HashUtil.MurmurHash3_fmix(long)"], ["long", "com.hazelcast.util.HashUtil.fastLongMix(long)"], ["int", "com.hazelcast.util.HashUtil.fastIntMix(int)"], ["int", "com.hazelcast.util.HashUtil.hashCode(java.lang.Object...)"], ["int", "com.hazelcast.util.HashUtil.hashToIndex(int, int)"], ["int", "com.hazelcast.util.HashUtil.computePerturbationValue(int)"], ["com.hazelcast.util.ItemCounter", "com.hazelcast.util.ItemCounter()"], ["long", "com.hazelcast.util.ItemCounter.total()"], ["long", "com.hazelcast.util.ItemCounter.get(T)"], ["void", "com.hazelcast.util.ItemCounter.set(T, long)"], ["void", "com.hazelcast.util.ItemCounter.inc(T)"], ["void", "com.hazelcast.util.ItemCounter.add(T, long)"], ["void", "com.hazelcast.util.ItemCounter.reset()"], ["void", "com.hazelcast.util.ItemCounter.clear()"], ["long", "com.hazelcast.util.ItemCounter.getAndSet(T, long)"], ["void", "com.hazelcast.util.ItemCounter.remove(T)"], ["boolean", "com.hazelcast.util.ItemCounter.equals(java.lang.Object)"], ["int", "com.hazelcast.util.ItemCounter.hashCode()"], ["java.lang.String", "com.hazelcast.util.ItemCounter.toString()"], ["void", "com.hazelcast.util.FutureUtil$10.handleException(java.lang.Throwable)"], ["void", "com.hazelcast.util.FutureUtil$6.handleException(java.lang.Throwable)"], ["com.hazelcast.util.StateMachine", "com.hazelcast.util.StateMachine(T)"], ["<T extends java.lang.Enum<T>> com.hazelcast.util.StateMachine<T>", "com.hazelcast.util.StateMachine.of(T)"], ["void", "com.hazelcast.util.StateMachine.nextOrStay(T)"], ["boolean", "com.hazelcast.util.StateMachine.is(T, T...)"], ["java.lang.String", "com.hazelcast.util.StateMachine.toString()"], ["com.hazelcast.util.AddressUtil$AddressHolder", "com.hazelcast.util.AddressUtil$AddressHolder(java.lang.String, int, java.lang.String)"], ["java.lang.String", "com.hazelcast.util.AddressUtil$AddressHolder.toString()"], ["java.lang.String", "com.hazelcast.util.AddressUtil$AddressHolder.getAddress()"], ["java.lang.String", "com.hazelcast.util.AddressUtil$AddressHolder.getScopeId()"], ["int", "com.hazelcast.util.AddressUtil$AddressHolder.getPort()"], ["int", "com.hazelcast.util.HashUtil$WideDirectLoadStrategy.getInt(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["long", "com.hazelcast.util.HashUtil$WideDirectLoadStrategy.getLong(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["byte", "com.hazelcast.util.HashUtil$WideDirectLoadStrategy.getByte(com.hazelcast.internal.memory.MemoryAccessor, long)"], ["long", "com.hazelcast.util.HashUtil$WideDirectLoadStrategy.getLong(java.lang.Object, long)"], ["int", "com.hazelcast.util.HashUtil$WideDirectLoadStrategy.getInt(java.lang.Object, long)"], ["byte", "com.hazelcast.util.HashUtil$WideDirectLoadStrategy.getByte(java.lang.Object, long)"], ["com.hazelcast.util.UnmodifiableIterator", "com.hazelcast.util.UnmodifiableIterator()"], ["void", "com.hazelcast.util.UnmodifiableIterator.remove()"], ["void", "com.hazelcast.util.FutureUtil$7.handleException(java.lang.Throwable)"], ["boolean", "com.hazelcast.util.IterableUtil$2.hasNext()"], ["R", "com.hazelcast.util.IterableUtil$2.next()"], ["void", "com.hazelcast.util.IterableUtil$2.remove()"], ["void", "com.hazelcast.util.FutureUtil$9.handleException(java.lang.Throwable)"], ["com.hazelcast.util.PhoneHome", "com.hazelcast.util.PhoneHome(com.hazelcast.instance.Node)"], ["void", "com.hazelcast.util.PhoneHome.check(com.hazelcast.instance.Node)"], ["void", "com.hazelcast.util.PhoneHome.shutdown()"], ["java.lang.String", "com.hazelcast.util.PhoneHome.convertToLetter(int)"], ["java.util.Map<java.lang.String, java.lang.String>", "com.hazelcast.util.PhoneHome.phoneHome(com.hazelcast.instance.Node)"], ["com.hazelcast.util.PhoneHome$PhoneHomeParameterCreator", "com.hazelcast.util.PhoneHome.createParameters(com.hazelcast.instance.Node)"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap$SoftKeyReference.keyHash()"], ["java.lang.Object", "com.hazelcast.util.ConcurrentReferenceHashMap$SoftKeyReference.keyRef()"], ["void", "com.hazelcast.util.EmptyStatement.ignore(java.lang.Throwable)"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap$WeakValueReference.keyHash()"], ["java.lang.Object", "com.hazelcast.util.ConcurrentReferenceHashMap$WeakValueReference.keyRef()"], ["<T> T", "com.hazelcast.util.ServiceLoader.load(java.lang.Class<T>, java.lang.String, java.lang.ClassLoader)"], ["<T> java.util.Iterator<T>", "com.hazelcast.util.ServiceLoader.iterator(java.lang.Class<T>, java.lang.String, java.lang.ClassLoader)"], ["<T> java.util.Iterator<java.lang.Class<T>>", "com.hazelcast.util.ServiceLoader.classIterator(java.lang.Class<T>, java.lang.String, java.lang.ClassLoader)"], ["com.hazelcast.util.AddressUtil$Ip6AddressMatcher", "com.hazelcast.util.AddressUtil$Ip6AddressMatcher()"], ["boolean", "com.hazelcast.util.AddressUtil$Ip6AddressMatcher.isIPv4()"], ["boolean", "com.hazelcast.util.AddressUtil$Ip6AddressMatcher.isIPv6()"], ["void", "com.hazelcast.util.AddressUtil$Ip6AddressMatcher.setAddress(java.lang.String[])"], ["boolean", "com.hazelcast.util.AddressUtil$Ip6AddressMatcher.match(com.hazelcast.util.AddressUtil$AddressMatcher)"], ["java.lang.String", "com.hazelcast.util.AddressUtil$Ip6AddressMatcher.getAddress()"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap$WriteThroughEntry.setValue(V)"], ["int", "com.hazelcast.util.ItemCounter$1.compare(T, T)"], ["void", "com.hazelcast.util.HashUtil$LoadStrategy.putByte(R, long, byte)"], ["java.lang.String", "com.hazelcast.util.Preconditions.checkHasText(java.lang.String, java.lang.String)"], ["<T> T", "com.hazelcast.util.Preconditions.checkNotNull(T, java.lang.String)"], ["<T> java.lang.Iterable<T>", "com.hazelcast.util.Preconditions.checkNoNullInside(java.lang.Iterable<T>, java.lang.String)"], ["<T> T", "com.hazelcast.util.Preconditions.checkNotNull(T)"], ["<E> E", "com.hazelcast.util.Preconditions.isNotNull(E, java.lang.String)"], ["long", "com.hazelcast.util.Preconditions.checkNotNegative(long, java.lang.String)"], ["int", "com.hazelcast.util.Preconditions.checkNotNegative(int, java.lang.String)"], ["long", "com.hazelcast.util.Preconditions.checkNegative(long, java.lang.String)"], ["long", "com.hazelcast.util.Preconditions.checkPositive(long, java.lang.String)"], ["double", "com.hazelcast.util.Preconditions.checkPositive(double, java.lang.String)"], ["int", "com.hazelcast.util.Preconditions.checkPositive(int, java.lang.String)"], ["int", "com.hazelcast.util.Preconditions.checkBackupCount(int, int)"], ["int", "com.hazelcast.util.Preconditions.checkAsyncBackupCount(int, int)"], ["<E> E", "com.hazelcast.util.Preconditions.checkInstanceOf(java.lang.Class<E>, java.lang.Object, java.lang.String)"], ["<E> E", "com.hazelcast.util.Preconditions.checkInstanceOf(java.lang.Class<E>, java.lang.Object)"], ["<E> E", "com.hazelcast.util.Preconditions.checkNotInstanceOf(java.lang.Class, E, java.lang.String)"], ["void", "com.hazelcast.util.Preconditions.checkFalse(boolean, java.lang.String)"], ["void", "com.hazelcast.util.Preconditions.checkTrue(boolean, java.lang.String)"], ["<T> java.util.Iterator<T>", "com.hazelcast.util.Preconditions.checkHasNext(java.util.Iterator<T>, java.lang.String)"], ["void", "com.hazelcast.util.Preconditions.checkState(boolean, java.lang.String)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$HashIterator.hasMoreElements()"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$HashIterator.hasNext()"], ["void", "com.hazelcast.util.ConcurrentReferenceHashMap$HashIterator.remove()"], ["boolean", "com.hazelcast.util.ICMPHelper.isRawSocketPermitted()"], ["com.hazelcast.util.IterationType[]", "com.hazelcast.util.IterationType.values()"], ["com.hazelcast.util.IterationType", "com.hazelcast.util.IterationType.valueOf(java.lang.String)"], ["byte", "com.hazelcast.util.IterationType.getId()"], ["com.hazelcast.util.IterationType", "com.hazelcast.util.IterationType.getById(byte)"], ["void", "com.hazelcast.util.FutureUtil$CollectAllExceptionHandler.handleException(java.lang.Throwable)"], ["void", "com.hazelcast.util.FutureUtil$1.handleException(java.lang.Throwable)"], ["com.hazelcast.util.MutableInteger", "com.hazelcast.util.MutableInteger()"], ["int", "com.hazelcast.util.MutableInteger.getAndInc()"], ["<E> java.util.Set<E>", "com.hazelcast.util.SetUtil.createHashSet(int)"], ["<E> java.util.Set<E>", "com.hazelcast.util.SetUtil.createLinkedHashSet(int)"], ["boolean", "com.hazelcast.util.IterableUtil$3.hasNext()"], ["R", "com.hazelcast.util.IterableUtil$3.next()"], ["void", "com.hazelcast.util.IterableUtil$3.remove()"], ["int", "com.hazelcast.util.JsonUtil.getInt(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String)"], ["int", "com.hazelcast.util.JsonUtil.getInt(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String, int)"], ["long", "com.hazelcast.util.JsonUtil.getLong(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String)"], ["long", "com.hazelcast.util.JsonUtil.getLong(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String, long)"], ["double", "com.hazelcast.util.JsonUtil.getDouble(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String)"], ["double", "com.hazelcast.util.JsonUtil.getDouble(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String, double)"], ["float", "com.hazelcast.util.JsonUtil.getFloat(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String)"], ["float", "com.hazelcast.util.JsonUtil.getFloat(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String, float)"], ["java.lang.String", "com.hazelcast.util.JsonUtil.getString(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String)"], ["java.lang.String", "com.hazelcast.util.JsonUtil.getString(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.util.JsonUtil.getBoolean(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String)"], ["boolean", "com.hazelcast.util.JsonUtil.getBoolean(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String, boolean)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.util.JsonUtil.getArray(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.util.JsonUtil.getArray(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String, com.hazelcast.com.eclipsesource.json.JsonArray)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.util.JsonUtil.getObject(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.util.JsonUtil.getObject(com.hazelcast.com.eclipsesource.json.JsonObject, java.lang.String, com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.util.concurrent.BusySpinIdleStrategy", "com.hazelcast.util.concurrent.BusySpinIdleStrategy()"], ["boolean", "com.hazelcast.util.concurrent.BusySpinIdleStrategy.idle(long)"], ["com.hazelcast.util.concurrent.NoOpIdleStrategy", "com.hazelcast.util.concurrent.NoOpIdleStrategy()"], ["boolean", "com.hazelcast.util.concurrent.NoOpIdleStrategy.idle(long)"], ["com.hazelcast.util.concurrent.BackoffIdleStrategy", "com.hazelcast.util.concurrent.BackoffIdleStrategy(long, long, long, long)"], ["boolean", "com.hazelcast.util.concurrent.BackoffIdleStrategy.idle(long)"], ["com.hazelcast.util.concurrent.BackoffIdleStrategy", "com.hazelcast.util.concurrent.BackoffIdleStrategy.createBackoffIdleStrategy(java.lang.String)"], ["com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry", "com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry(K, V)"], ["com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry", "com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry(java.util.Map$Entry<? extends K, ? extends V>)"], ["K", "com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry.getKey()"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry.getValue()"], ["V", "com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry.setValue(V)"], ["boolean", "com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry.hashCode()"], ["java.lang.String", "com.hazelcast.util.ConcurrentReferenceHashMap$SimpleEntry.toString()"], ["int", "com.hazelcast.util.SortingUtil$2.compare(com.hazelcast.query.impl.QueryableEntry, com.hazelcast.query.impl.QueryableEntry)"], ["int", "com.hazelcast.util.SortingUtil$2.compare(java.lang.Object, java.lang.Object)"], ["com.hazelcast.util.AddressUtil$InvalidAddressException", "com.hazelcast.util.AddressUtil$InvalidAddressException(java.lang.String)"], ["com.hazelcast.util.AddressUtil$InvalidAddressException", "com.hazelcast.util.AddressUtil$InvalidAddressException(java.lang.String, boolean)"], ["boolean", "com.hazelcast.util.AddressUtil$AddressMatcher.match(java.lang.String)"], ["java.lang.String", "com.hazelcast.util.AddressUtil$AddressMatcher.toString()"], ["boolean", "com.hazelcast.util.Base64.isBase64(java.lang.String)"], ["boolean", "com.hazelcast.util.Base64.isBase64(byte)"], ["synchronized", "com.hazelcast.util.Base64.byte[] removeWhiteSpace(byte[])"], ["synchronized", "com.hazelcast.util.Base64.boolean isArrayByteBase64(byte[])"], ["synchronized", "com.hazelcast.util.Base64.byte[] encode(byte[])"], ["synchronized", "com.hazelcast.util.Base64.byte[] decode(byte[])"], ["synchronized", "com.hazelcast.util.Base64.int getDecodedDataLength(byte[])"], ["boolean", "com.hazelcast.util.AddressUtil.matchAnyInterface(java.lang.String, java.util.Collection<java.lang.String>)"], ["boolean", "com.hazelcast.util.AddressUtil.matchInterface(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.util.AddressUtil.matchAnyDomain(java.lang.String, java.util.Collection<java.lang.String>)"], ["boolean", "com.hazelcast.util.AddressUtil.matchDomain(java.lang.String, java.lang.String)"], ["com.hazelcast.util.AddressUtil$AddressHolder", "com.hazelcast.util.AddressUtil.getAddressHolder(java.lang.String)"], ["com.hazelcast.util.AddressUtil$AddressHolder", "com.hazelcast.util.AddressUtil.getAddressHolder(java.lang.String, int)"], ["boolean", "com.hazelcast.util.AddressUtil.isIpAddress(java.lang.String)"], ["java.net.InetAddress", "com.hazelcast.util.AddressUtil.fixScopeIdAndGetInetAddress(java.net.InetAddress)"], ["java.net.Inet6Address", "com.hazelcast.util.AddressUtil.getInetAddressFor(java.net.Inet6Address, java.lang.String)"], ["com.hazelcast.util.AddressUtil$AddressMatcher", "com.hazelcast.util.AddressUtil.getAddressMatcher(java.lang.String)"], ["com.hazelcast.util.SampleableConcurrentHashMap$SamplingEntry", "com.hazelcast.util.SampleableConcurrentHashMap$SamplingEntry(K, V)"], ["K", "com.hazelcast.util.SampleableConcurrentHashMap$SamplingEntry.getEntryKey()"], ["V", "com.hazelcast.util.SampleableConcurrentHashMap$SamplingEntry.getEntryValue()"], ["boolean", "com.hazelcast.util.SampleableConcurrentHashMap$SamplingEntry.equals(java.lang.Object)"], ["int", "com.hazelcast.util.SampleableConcurrentHashMap$SamplingEntry.hashCode()"], ["java.lang.String", "com.hazelcast.util.SampleableConcurrentHashMap$SamplingEntry.toString()"], ["java.lang.String", "com.hazelcast.util.StringUtil.bytesToString(byte[], int, int)"], ["java.lang.String", "com.hazelcast.util.StringUtil.bytesToString(byte[])"], ["byte[]", "com.hazelcast.util.StringUtil.stringToBytes(java.lang.String)"], ["boolean", "com.hazelcast.util.StringUtil.isNullOrEmpty(java.lang.String)"], ["boolean", "com.hazelcast.util.StringUtil.isNullOrEmptyAfterTrim(java.lang.String)"], ["java.lang.String", "com.hazelcast.util.StringUtil.upperCaseInternal(java.lang.String)"], ["java.lang.String", "com.hazelcast.util.StringUtil.lowerCaseInternal(java.lang.String)"], ["java.lang.String", "com.hazelcast.util.StringUtil.timeToString(long)"], ["java.lang.String", "com.hazelcast.util.StringUtil.timeToStringFriendly(long)"], ["int", "com.hazelcast.util.StringUtil.indexOf(java.lang.String, char, int)"], ["int", "com.hazelcast.util.StringUtil.indexOf(java.lang.String, char)"], ["int", "com.hazelcast.util.StringUtil.lastIndexOf(java.lang.String, char, int)"], ["int", "com.hazelcast.util.StringUtil.lastIndexOf(java.lang.String, char)"], ["java.lang.String[]", "com.hazelcast.util.StringUtil.tokenizeVersionString(java.lang.String)"], ["java.lang.String", "com.hazelcast.util.StringUtil.getterIntoProperty(java.lang.String)"], ["java.lang.String", "com.hazelcast.util.StringUtil.trim(java.lang.String)"], ["java.lang.String[]", "com.hazelcast.util.StringUtil.splitByComma(java.lang.String, boolean)"], ["java.lang.String[]", "com.hazelcast.util.StringUtil.intersection(java.lang.String[], java.lang.String[])"], ["java.lang.String[]", "com.hazelcast.util.StringUtil.subraction(java.lang.String[], java.lang.String[])"], ["boolean", "com.hazelcast.util.StringUtil.equalsIgnoreCase(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.util.executor.CompletedFuture$1.run()"], ["com.hazelcast.util.executor.NamedThreadPoolExecutor", "com.hazelcast.util.executor.NamedThreadPoolExecutor(java.lang.String, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory)"], ["java.lang.String", "com.hazelcast.util.executor.NamedThreadPoolExecutor.getName()"], ["int", "com.hazelcast.util.executor.NamedThreadPoolExecutor.getQueueSize()"], ["int", "com.hazelcast.util.executor.NamedThreadPoolExecutor.getRemainingQueueCapacity()"], ["java.lang.String", "com.hazelcast.util.executor.NamedThreadPoolExecutor.toString()"], ["com.hazelcast.util.executor.PoolExecutorThreadFactory", "com.hazelcast.util.executor.PoolExecutorThreadFactory(java.lang.String, java.lang.ClassLoader)"], ["com.hazelcast.util.executor.SingleExecutorThreadFactory", "com.hazelcast.util.executor.SingleExecutorThreadFactory(java.lang.ClassLoader, java.lang.String)"], ["com.hazelcast.util.executor.CompletedFuture", "com.hazelcast.util.executor.CompletedFuture(com.hazelcast.spi.serialization.SerializationService, java.lang.Object, java.util.concurrent.Executor)"], ["V", "com.hazelcast.util.executor.CompletedFuture.get()"], ["V", "com.hazelcast.util.executor.CompletedFuture.get(long, java.util.concurrent.TimeUnit)"], ["V", "com.hazelcast.util.executor.CompletedFuture.join()"], ["boolean", "com.hazelcast.util.executor.CompletedFuture.complete(java.lang.Object)"], ["boolean", "com.hazelcast.util.executor.CompletedFuture.cancel(boolean)"], ["boolean", "com.hazelcast.util.executor.CompletedFuture.isCancelled()"], ["boolean", "com.hazelcast.util.executor.CompletedFuture.isDone()"], ["void", "com.hazelcast.util.executor.CompletedFuture.andThen(com.hazelcast.core.ExecutionCallback<V>)"], ["void", "com.hazelcast.util.executor.CompletedFuture.andThen(com.hazelcast.core.ExecutionCallback<V>, java.util.concurrent.Executor)"], ["com.hazelcast.util.executor.CachedExecutorServiceDelegate", "com.hazelcast.util.executor.CachedExecutorServiceDelegate(com.hazelcast.spi.NodeEngine, java.lang.String, java.util.concurrent.ExecutorService, int, int)"], ["java.lang.String", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.getName()"], ["long", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.getCompletedTaskCount()"], ["int", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.getMaximumPoolSize()"], ["int", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.getPoolSize()"], ["int", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.getQueueSize()"], ["int", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.getRemainingQueueCapacity()"], ["void", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.submit(java.util.concurrent.Callable<T>)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.submit(java.lang.Runnable, T)"], ["void", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.shutdown()"], ["boolean", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.isShutdown()"], ["boolean", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.isTerminated()"], ["boolean", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> T", "com.hazelcast.util.executor.CachedExecutorServiceDelegate.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["com.hazelcast.util.executor.StripedExecutor", "com.hazelcast.util.executor.StripedExecutor(com.hazelcast.logging.ILogger, java.lang.String, int, int)"], ["int", "com.hazelcast.util.executor.StripedExecutor.getWorkQueueSize()"], ["long", "com.hazelcast.util.executor.StripedExecutor.processedCount()"], ["void", "com.hazelcast.util.executor.StripedExecutor.shutdown()"], ["boolean", "com.hazelcast.util.executor.StripedExecutor.isLive()"], ["void", "com.hazelcast.util.executor.StripedExecutor.execute(java.lang.Runnable)"], ["com.hazelcast.util.executor.HazelcastManagedThread", "com.hazelcast.util.executor.HazelcastManagedThread()"], ["com.hazelcast.util.executor.HazelcastManagedThread", "com.hazelcast.util.executor.HazelcastManagedThread(java.lang.Runnable)"], ["com.hazelcast.util.executor.HazelcastManagedThread", "com.hazelcast.util.executor.HazelcastManagedThread(java.lang.String)"], ["com.hazelcast.util.executor.HazelcastManagedThread", "com.hazelcast.util.executor.HazelcastManagedThread(java.lang.Runnable, java.lang.String)"], ["void", "com.hazelcast.util.executor.HazelcastManagedThread.setContextClassLoader(java.lang.ClassLoader)"], ["void", "com.hazelcast.util.executor.HazelcastManagedThread.run()"], ["void", "com.hazelcast.util.executor.CachedExecutorServiceDelegate$Worker.run()"], ["boolean", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.isPeriodic()"], ["long", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.getDelay(java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.run()"], ["int", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.compareTo(java.util.concurrent.Delayed)"], ["boolean", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.equals(java.lang.Object)"], ["int", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.hashCode()"], ["boolean", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.cancel(boolean)"], ["boolean", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.isCancelled()"], ["boolean", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.isDone()"], ["V", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.get()"], ["V", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.get(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.toString()"], ["int", "com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture.compareTo(java.lang.Object)"], ["void", "com.hazelcast.util.executor.StripedExecutor$Worker.run()"], ["com.hazelcast.util.executor.DelegatingFuture", "com.hazelcast.util.executor.DelegatingFuture(com.hazelcast.spi.InternalCompletableFuture, com.hazelcast.spi.serialization.SerializationService)"], ["com.hazelcast.util.executor.DelegatingFuture", "com.hazelcast.util.executor.DelegatingFuture(com.hazelcast.spi.InternalCompletableFuture, com.hazelcast.spi.serialization.SerializationService, V)"], ["V", "com.hazelcast.util.executor.DelegatingFuture.get()"], ["V", "com.hazelcast.util.executor.DelegatingFuture.get(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.util.executor.DelegatingFuture.cancel(boolean)"], ["boolean", "com.hazelcast.util.executor.DelegatingFuture.isCancelled()"], ["boolean", "com.hazelcast.util.executor.DelegatingFuture.isDone()"], ["boolean", "com.hazelcast.util.executor.DelegatingFuture.complete(java.lang.Object)"], ["V", "com.hazelcast.util.executor.DelegatingFuture.join()"], ["void", "com.hazelcast.util.executor.DelegatingFuture.andThen(com.hazelcast.core.ExecutionCallback<V>)"], ["void", "com.hazelcast.util.executor.DelegatingFuture.andThen(com.hazelcast.core.ExecutionCallback<V>, java.util.concurrent.Executor)"], ["com.hazelcast.util.executor.ExecutorType[]", "com.hazelcast.util.executor.ExecutorType.values()"], ["com.hazelcast.util.executor.ExecutorType", "com.hazelcast.util.executor.ExecutorType.valueOf(java.lang.String)"], ["com.hazelcast.util.executor.AbstractExecutorThreadFactory", "com.hazelcast.util.executor.AbstractExecutorThreadFactory(java.lang.ClassLoader)"], ["java.lang.Thread", "com.hazelcast.util.executor.AbstractExecutorThreadFactory.newThread(java.lang.Runnable)"], ["void", "com.hazelcast.util.executor.DelegatingFuture$DelegatingExecutionCallback.onResponse(java.lang.Object)"], ["void", "com.hazelcast.util.executor.DelegatingFuture$DelegatingExecutionCallback.onFailure(java.lang.Throwable)"], ["com.hazelcast.util.executor.CompletableFutureTask", "com.hazelcast.util.executor.CompletableFutureTask(java.util.concurrent.Callable<V>, java.util.concurrent.ExecutorService)"], ["com.hazelcast.util.executor.CompletableFutureTask", "com.hazelcast.util.executor.CompletableFutureTask(java.lang.Runnable, V, java.util.concurrent.ExecutorService)"], ["void", "com.hazelcast.util.executor.CompletableFutureTask.run()"], ["java.lang.String", "com.hazelcast.util.executor.CompletableFutureTask.toString()"], ["com.hazelcast.util.executor.LoggingScheduledExecutor", "com.hazelcast.util.executor.LoggingScheduledExecutor(com.hazelcast.logging.ILogger, int, java.util.concurrent.ThreadFactory)"], ["com.hazelcast.util.executor.LoggingScheduledExecutor", "com.hazelcast.util.executor.LoggingScheduledExecutor(com.hazelcast.logging.ILogger, int, java.util.concurrent.ThreadFactory, boolean)"], ["com.hazelcast.util.executor.LoggingScheduledExecutor", "com.hazelcast.util.executor.LoggingScheduledExecutor(com.hazelcast.logging.ILogger, int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)"], ["com.hazelcast.util.executor.LoggingScheduledExecutor", "com.hazelcast.util.executor.LoggingScheduledExecutor(com.hazelcast.logging.ILogger, int, java.util.concurrent.ThreadFactory, boolean, java.util.concurrent.RejectedExecutionHandler)"], ["void", "com.hazelcast.util.executor.LoggingScheduledExecutor.notifyShutdownInitiated()"], ["java.lang.String", "com.hazelcast.util.executor.DelegatingFuture$1.toString()"], ["com.hazelcast.util.executor.PoolExecutorThreadFactory$ManagedThread", "com.hazelcast.util.executor.PoolExecutorThreadFactory$ManagedThread(com.hazelcast.util.executor.PoolExecutorThreadFactory, java.lang.Runnable, java.lang.String, int)"], ["com.hazelcast.util.executor.SingleExecutorThreadFactory$ManagedThread", "com.hazelcast.util.executor.SingleExecutorThreadFactory$ManagedThread(com.hazelcast.util.executor.SingleExecutorThreadFactory, java.lang.Runnable)"], ["long", "com.hazelcast.util.OperatingSystemMXBeanSupport.readLongAttribute(java.lang.String, long)"], ["double", "com.hazelcast.util.OperatingSystemMXBeanSupport.getSystemLoadAverage()"], ["int", "com.hazelcast.util.QueueUtil.drainQueue(java.util.Queue<?>)"], ["int", "com.hazelcast.util.QueueUtil.drainQueue(java.util.Queue<?>, int)"], ["boolean", "com.hazelcast.util.QuickMath.isPowerOfTwo(long)"], ["int", "com.hazelcast.util.QuickMath.modPowerOfTwo(int, int)"], ["long", "com.hazelcast.util.QuickMath.modPowerOfTwo(long, int)"], ["int", "com.hazelcast.util.QuickMath.nextPowerOfTwo(int)"], ["long", "com.hazelcast.util.QuickMath.nextPowerOfTwo(long)"], ["int", "com.hazelcast.util.QuickMath.log2(int)"], ["int", "com.hazelcast.util.QuickMath.log2(long)"], ["int", "com.hazelcast.util.QuickMath.divideByAndCeilToInt(double, int)"], ["long", "com.hazelcast.util.QuickMath.divideByAndCeilToLong(double, int)"], ["int", "com.hazelcast.util.QuickMath.divideByAndRoundToInt(double, int)"], ["long", "com.hazelcast.util.QuickMath.divideByAndRoundToLong(double, int)"], ["int", "com.hazelcast.util.QuickMath.normalize(int, int)"], ["long", "com.hazelcast.util.QuickMath.normalize(long, int)"], ["java.lang.String", "com.hazelcast.util.QuickMath.bytesToHex(byte[])"], ["int", "com.hazelcast.util.QuickMath.compareIntegers(int, int)"], ["int", "com.hazelcast.util.QuickMath.compareLongs(long, long)"], ["boolean", "com.hazelcast.util.BitSetUtils.hasAtLeastOneBitSet(java.util.BitSet, java.lang.Iterable<java.lang.Integer>)"], ["boolean", "com.hazelcast.util.BitSetUtils.hasAllBitsSet(java.util.BitSet, java.lang.Iterable<java.lang.Integer>)"], ["void", "com.hazelcast.util.BitSetUtils.setBits(java.util.BitSet, java.lang.Iterable<java.lang.Integer>)"], ["void", "com.hazelcast.util.BitSetUtils.unsetBits(java.util.BitSet, java.lang.Iterable<java.lang.Integer>)"], ["com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy(java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.concurrent.atomicreference.AtomicReferenceService)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.alter(com.hazelcast.core.IFunction<E, E>)"], ["E", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.alterAndGet(com.hazelcast.core.IFunction<E, E>)"], ["E", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.getAndAlter(com.hazelcast.core.IFunction<E, E>)"], ["<R> R", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.apply(com.hazelcast.core.IFunction<E, R>)"], ["<R> com.hazelcast.spi.InternalCompletableFuture<R>", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.applyAsync(com.hazelcast.core.IFunction<E, R>)"], ["<R> com.hazelcast.spi.InternalCompletableFuture<R>", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncApply(com.hazelcast.core.IFunction<E, R>)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.clear()"], ["boolean", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.compareAndSet(E, E)"], ["E", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.get()"], ["boolean", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.contains(E)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.set(E)"], ["E", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.getAndSet(E)"], ["E", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.setAndGet(E)"], ["boolean", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.isNull()"], ["java.lang.String", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.getName()"], ["int", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.getPartitionId()"], ["java.lang.String", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.getServiceName()"], ["java.lang.String", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.toString()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncApply(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncGetAndAlter(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncAlterAndGet(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncAlter(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncContains(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncClear()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncIsNull()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncSetAndGet(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncGetAndSet(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncSet(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncGet()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.asyncCompareAndSet(java.lang.Object, java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.applyAsync(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.getAndAlterAsync(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.alterAndGetAsync(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.alterAsync(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.containsAsync(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.clearAsync()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.isNullAsync()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.getAndSetAsync(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.setAsync(java.lang.Object)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.getAsync()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy.compareAndSetAsync(java.lang.Object, java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.concurrent.atomicreference.AtomicReferenceDataSerializerHook$1.create(int)"], ["com.hazelcast.concurrent.atomicreference.operations.ApplyOperation", "com.hazelcast.concurrent.atomicreference.operations.ApplyOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.ApplyOperation", "com.hazelcast.concurrent.atomicreference.operations.ApplyOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.ApplyOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.operations.ApplyOperation.getResponse()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.ApplyOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.MergeBackupOperation", "com.hazelcast.concurrent.atomicreference.operations.MergeBackupOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.MergeBackupOperation", "com.hazelcast.concurrent.atomicreference.operations.MergeBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.MergeBackupOperation.run()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.MergeBackupOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.GetAndAlterOperation", "com.hazelcast.concurrent.atomicreference.operations.GetAndAlterOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.GetAndAlterOperation", "com.hazelcast.concurrent.atomicreference.operations.GetAndAlterOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.GetAndAlterOperation.run()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.GetAndAlterOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.AbstractAtomicReferenceOperation", "com.hazelcast.concurrent.atomicreference.operations.AbstractAtomicReferenceOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.AbstractAtomicReferenceOperation", "com.hazelcast.concurrent.atomicreference.operations.AbstractAtomicReferenceOperation(java.lang.String)"], ["java.lang.String", "com.hazelcast.concurrent.atomicreference.operations.AbstractAtomicReferenceOperation.getName()"], ["java.lang.String", "com.hazelcast.concurrent.atomicreference.operations.AbstractAtomicReferenceOperation.getServiceName()"], ["com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer", "com.hazelcast.concurrent.atomicreference.operations.AbstractAtomicReferenceOperation.getReferenceContainer()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.AbstractAtomicReferenceOperation.getFactoryId()"], ["com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation", "com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation", "com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation.getResponse()"], ["boolean", "com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.SetBackupOperation", "com.hazelcast.concurrent.atomicreference.operations.SetBackupOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.SetBackupOperation", "com.hazelcast.concurrent.atomicreference.operations.SetBackupOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.SetBackupOperation.run()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.SetBackupOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation", "com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation", "com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.MergeOperation", "com.hazelcast.concurrent.atomicreference.operations.MergeOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.MergeOperation", "com.hazelcast.concurrent.atomicreference.operations.MergeOperation(java.lang.String, com.hazelcast.spi.merge.SplitBrainMergePolicy<java.lang.Object, com.hazelcast.spi.merge.SplitBrainMergeTypes$AtomicReferenceMergeTypes>, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.MergeOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomicreference.operations.MergeOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.MergeOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.AbstractAlterOperation", "com.hazelcast.concurrent.atomicreference.operations.AbstractAlterOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.AbstractAlterOperation", "com.hazelcast.concurrent.atomicreference.operations.AbstractAlterOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.operations.AbstractAlterOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomicreference.operations.AbstractAlterOperation.getBackupOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation", "com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation", "com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.ContainsOperation", "com.hazelcast.concurrent.atomicreference.operations.ContainsOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.ContainsOperation", "com.hazelcast.concurrent.atomicreference.operations.ContainsOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.ContainsOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.operations.ContainsOperation.getResponse()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.ContainsOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceReplicationOperation", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceReplicationOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceReplicationOperation", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.nio.serialization.Data>)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceReplicationOperation.getServiceName()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceReplicationOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.SetOperation", "com.hazelcast.concurrent.atomicreference.operations.SetOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.SetOperation", "com.hazelcast.concurrent.atomicreference.operations.SetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.SetOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomicreference.operations.SetOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.SetOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.AlterOperation", "com.hazelcast.concurrent.atomicreference.operations.AlterOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.AlterOperation", "com.hazelcast.concurrent.atomicreference.operations.AlterOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.AlterOperation.run()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.AlterOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.GetOperation", "com.hazelcast.concurrent.atomicreference.operations.GetOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.GetOperation", "com.hazelcast.concurrent.atomicreference.operations.GetOperation(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.GetOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.operations.GetOperation.getResponse()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.GetOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceBackupAwareOperation", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceBackupAwareOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceBackupAwareOperation", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceBackupAwareOperation(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceBackupAwareOperation.shouldBackup()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceBackupAwareOperation.getSyncBackupCount()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.AtomicReferenceBackupAwareOperation.getAsyncBackupCount()"], ["com.hazelcast.concurrent.atomicreference.operations.AlterAndGetOperation", "com.hazelcast.concurrent.atomicreference.operations.AlterAndGetOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.AlterAndGetOperation", "com.hazelcast.concurrent.atomicreference.operations.AlterAndGetOperation(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.AlterAndGetOperation.run()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.AlterAndGetOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.operations.IsNullOperation", "com.hazelcast.concurrent.atomicreference.operations.IsNullOperation()"], ["com.hazelcast.concurrent.atomicreference.operations.IsNullOperation", "com.hazelcast.concurrent.atomicreference.operations.IsNullOperation(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomicreference.operations.IsNullOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.operations.IsNullOperation.getResponse()"], ["int", "com.hazelcast.concurrent.atomicreference.operations.IsNullOperation.getId()"], ["com.hazelcast.concurrent.atomicreference.AtomicReferenceDataSerializerHook", "com.hazelcast.concurrent.atomicreference.AtomicReferenceDataSerializerHook()"], ["int", "com.hazelcast.concurrent.atomicreference.AtomicReferenceDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.concurrent.atomicreference.AtomicReferenceDataSerializerHook.createFactory()"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService$2.createNew(java.lang.Object)"], ["com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer.get()"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer.set(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer.compareAndSet(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer.contains(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer.getAndSet(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer.isNull()"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService$Merger.runInternal()"], ["com.hazelcast.concurrent.atomicreference.AtomicReferenceService", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService()"], ["com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.getReferenceContainer(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.containsReferenceContainer(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.reset()"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.shutdown(boolean)"], ["com.hazelcast.concurrent.atomicreference.AtomicReferenceProxy", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["java.lang.String", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.getQuorumName(java.lang.String)"], ["java.lang.Runnable", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.prepareMergeRunnable()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService.createDistributedObject(java.lang.String)"], ["java.lang.String", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainerCollector.getContainerName(com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer)"], ["void", "com.hazelcast.concurrent.atomicreference.AtomicReferenceContainerCollector.onDestroy()"], ["com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.atomicreference.AtomicReferenceService$1.createNew(java.lang.Object)"], ["com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation", "com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation()"], ["com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation", "com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation.getResponse()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation.getWaitKey()"], ["boolean", "com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation.shouldWait()"], ["void", "com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation.onWaitExpire()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.AwaitOperation.getId()"], ["com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchBackupOperation", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchBackupOperation()"], ["com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchBackupOperation", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchBackupOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchBackupOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchBackupOperation.getResponse()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchBackupOperation.getId()"], ["com.hazelcast.concurrent.countdownlatch.operations.BackupAwareCountDownLatchOperation", "com.hazelcast.concurrent.countdownlatch.operations.BackupAwareCountDownLatchOperation(java.lang.String)"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.countdownlatch.operations.BackupAwareCountDownLatchOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.BackupAwareCountDownLatchOperation.getSyncBackupCount()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.BackupAwareCountDownLatchOperation.getAsyncBackupCount()"], ["com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchReplicationOperation", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchReplicationOperation()"], ["com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchReplicationOperation", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchReplicationOperation(java.util.Collection<com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer>)"], ["void", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchReplicationOperation.getServiceName()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.CountDownLatchReplicationOperation.getId()"], ["com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation()"], ["com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation.getResponse()"], ["boolean", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation.shouldBackup()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation.getId()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation.getSyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.countdownlatch.operations.SetCountOperation.getBackupOperation()"], ["com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation()"], ["com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation(java.lang.String)"], ["void", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation.run()"], ["boolean", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation.shouldBackup()"], ["boolean", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation.getNotifiedKey()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation.getId()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation.getSyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.countdownlatch.operations.CountDownOperation.getBackupOperation()"], ["java.lang.String", "com.hazelcast.concurrent.countdownlatch.operations.AbstractCountDownLatchOperation.getServiceName()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.AbstractCountDownLatchOperation.getFactoryId()"], ["com.hazelcast.concurrent.countdownlatch.operations.GetCountOperation", "com.hazelcast.concurrent.countdownlatch.operations.GetCountOperation()"], ["com.hazelcast.concurrent.countdownlatch.operations.GetCountOperation", "com.hazelcast.concurrent.countdownlatch.operations.GetCountOperation(java.lang.String)"], ["void", "com.hazelcast.concurrent.countdownlatch.operations.GetCountOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.countdownlatch.operations.GetCountOperation.getResponse()"], ["int", "com.hazelcast.concurrent.countdownlatch.operations.GetCountOperation.getId()"], ["com.hazelcast.concurrent.countdownlatch.CountDownLatchDataSerializerHook", "com.hazelcast.concurrent.countdownlatch.CountDownLatchDataSerializerHook()"], ["int", "com.hazelcast.concurrent.countdownlatch.CountDownLatchDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.concurrent.countdownlatch.CountDownLatchDataSerializerHook.createFactory()"], ["com.hazelcast.concurrent.countdownlatch.CountDownLatchService", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService()"], ["int", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.getCount(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.setCount(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.setCountDirect(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.countDown(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.shouldWait(java.lang.String)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.reset()"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.shutdown(boolean)"], ["com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.getCountDownLatchContainer(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.containsLatch(java.lang.String)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.add(com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer)"], ["java.lang.String", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.getQuorumName(java.lang.String)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService.createDistributedObject(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.concurrent.countdownlatch.CountDownLatchDataSerializerHook$1.create(int)"], ["java.lang.Object", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.countdownlatch.CountDownLatchService$1.createNew(java.lang.Object)"], ["com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer()"], ["com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer(java.lang.String)"], ["int", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.countDown()"], ["int", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.getCount()"], ["java.lang.String", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.getName()"], ["boolean", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.setCount(int)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.setCountDirect(int)"], ["int", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.getFactoryId()"], ["int", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.getId()"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer.toString()"], ["com.hazelcast.concurrent.countdownlatch.LatchKey", "com.hazelcast.concurrent.countdownlatch.LatchKey(java.lang.String)"], ["com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy", "com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy(java.lang.String, com.hazelcast.spi.NodeEngine)"], ["java.lang.String", "com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy.getName()"], ["boolean", "com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy.await(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy.countDown()"], ["int", "com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy.getCount()"], ["boolean", "com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy.trySetCount(int)"], ["java.lang.String", "com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy.getServiceName()"], ["java.lang.String", "com.hazelcast.concurrent.countdownlatch.CountDownLatchProxy.toString()"], ["com.hazelcast.concurrent.lock.LockServiceImpl", "com.hazelcast.concurrent.lock.LockServiceImpl(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.reset()"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.shutdown(boolean)"], ["long", "com.hazelcast.concurrent.lock.LockServiceImpl.getMaxLeaseTimeInMillis()"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.registerLockStoreConstructor(java.lang.String, com.hazelcast.util.ConstructorFunction<com.hazelcast.spi.ObjectNamespace, com.hazelcast.concurrent.lock.LockStoreInfo>)"], ["com.hazelcast.concurrent.lock.LockStore", "com.hazelcast.concurrent.lock.LockServiceImpl.createLockStore(int, com.hazelcast.spi.ObjectNamespace)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.clearLockStore(int, com.hazelcast.spi.ObjectNamespace)"], ["com.hazelcast.concurrent.lock.LockStoreContainer", "com.hazelcast.concurrent.lock.LockServiceImpl.getLockContainer(int)"], ["com.hazelcast.concurrent.lock.LockStoreImpl", "com.hazelcast.concurrent.lock.LockServiceImpl.getLockStore(int, com.hazelcast.spi.ObjectNamespace)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.memberAdded(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.memberRemoved(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.memberAttributeChanged(com.hazelcast.spi.MemberAttributeServiceEvent)"], ["boolean", "com.hazelcast.concurrent.lock.LockServiceImpl.isKnownServiceNamespace(com.hazelcast.spi.ServiceNamespace)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.lock.LockServiceImpl.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.lock.LockServiceImpl.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent, java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.concurrent.lock.LockServiceImpl.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl.clientDisconnected(java.lang.String)"], ["long", "com.hazelcast.concurrent.lock.LockServiceImpl.getMaxLeaseTimeInMillis(com.hazelcast.spi.properties.HazelcastProperties)"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockServiceImpl.getQuorumName(java.lang.String)"], ["com.hazelcast.concurrent.lock.operations.UnlockIfLeaseExpiredOperation", "com.hazelcast.concurrent.lock.operations.UnlockIfLeaseExpiredOperation()"], ["com.hazelcast.concurrent.lock.operations.UnlockIfLeaseExpiredOperation", "com.hazelcast.concurrent.lock.operations.UnlockIfLeaseExpiredOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, int)"], ["void", "com.hazelcast.concurrent.lock.operations.UnlockIfLeaseExpiredOperation.run()"], ["boolean", "com.hazelcast.concurrent.lock.operations.UnlockIfLeaseExpiredOperation.shouldBackup()"], ["int", "com.hazelcast.concurrent.lock.operations.UnlockIfLeaseExpiredOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.LockBackupOperation", "com.hazelcast.concurrent.lock.operations.LockBackupOperation()"], ["com.hazelcast.concurrent.lock.operations.LockBackupOperation", "com.hazelcast.concurrent.lock.operations.LockBackupOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, long, java.lang.String)"], ["void", "com.hazelcast.concurrent.lock.operations.LockBackupOperation.run()"], ["int", "com.hazelcast.concurrent.lock.operations.LockBackupOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.AwaitBackupOperation", "com.hazelcast.concurrent.lock.operations.AwaitBackupOperation()"], ["com.hazelcast.concurrent.lock.operations.AwaitBackupOperation", "com.hazelcast.concurrent.lock.operations.AwaitBackupOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.concurrent.lock.operations.AwaitBackupOperation.run()"], ["int", "com.hazelcast.concurrent.lock.operations.AwaitBackupOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.AwaitOperation", "com.hazelcast.concurrent.lock.operations.AwaitOperation()"], ["com.hazelcast.concurrent.lock.operations.AwaitOperation", "com.hazelcast.concurrent.lock.operations.AwaitOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, long, java.lang.String)"], ["com.hazelcast.concurrent.lock.operations.AwaitOperation", "com.hazelcast.concurrent.lock.operations.AwaitOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, long, java.lang.String, long)"], ["void", "com.hazelcast.concurrent.lock.operations.AwaitOperation.run()"], ["com.hazelcast.concurrent.lock.ConditionKey", "com.hazelcast.concurrent.lock.operations.AwaitOperation.getWaitKey()"], ["boolean", "com.hazelcast.concurrent.lock.operations.AwaitOperation.shouldWait()"], ["boolean", "com.hazelcast.concurrent.lock.operations.AwaitOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.lock.operations.AwaitOperation.getBackupOperation()"], ["void", "com.hazelcast.concurrent.lock.operations.AwaitOperation.onWaitExpire()"], ["int", "com.hazelcast.concurrent.lock.operations.AwaitOperation.getId()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.lock.operations.AwaitOperation.getWaitKey()"], ["com.hazelcast.concurrent.lock.operations.SignalBackupOperation", "com.hazelcast.concurrent.lock.operations.SignalBackupOperation()"], ["com.hazelcast.concurrent.lock.operations.SignalBackupOperation", "com.hazelcast.concurrent.lock.operations.SignalBackupOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, java.lang.String, boolean)"], ["int", "com.hazelcast.concurrent.lock.operations.SignalBackupOperation.getId()"], ["void", "com.hazelcast.concurrent.lock.operations.SignalBackupOperation.run()"], ["com.hazelcast.concurrent.lock.operations.LocalLockCleanupOperation", "com.hazelcast.concurrent.lock.operations.LocalLockCleanupOperation()"], ["com.hazelcast.concurrent.lock.operations.LocalLockCleanupOperation", "com.hazelcast.concurrent.lock.operations.LocalLockCleanupOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, java.lang.String)"], ["void", "com.hazelcast.concurrent.lock.operations.LocalLockCleanupOperation.run()"], ["boolean", "com.hazelcast.concurrent.lock.operations.LocalLockCleanupOperation.shouldBackup()"], ["int", "com.hazelcast.concurrent.lock.operations.LocalLockCleanupOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.GetRemainingLeaseTimeOperation", "com.hazelcast.concurrent.lock.operations.GetRemainingLeaseTimeOperation()"], ["com.hazelcast.concurrent.lock.operations.GetRemainingLeaseTimeOperation", "com.hazelcast.concurrent.lock.operations.GetRemainingLeaseTimeOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.concurrent.lock.operations.GetRemainingLeaseTimeOperation.getId()"], ["void", "com.hazelcast.concurrent.lock.operations.GetRemainingLeaseTimeOperation.run()"], ["com.hazelcast.concurrent.lock.operations.BaseSignalOperation", "com.hazelcast.concurrent.lock.operations.BaseSignalOperation()"], ["com.hazelcast.concurrent.lock.operations.BaseSignalOperation", "com.hazelcast.concurrent.lock.operations.BaseSignalOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, java.lang.String, boolean)"], ["void", "com.hazelcast.concurrent.lock.operations.BaseSignalOperation.run()"], ["com.hazelcast.concurrent.lock.operations.SignalOperation", "com.hazelcast.concurrent.lock.operations.SignalOperation()"], ["com.hazelcast.concurrent.lock.operations.SignalOperation", "com.hazelcast.concurrent.lock.operations.SignalOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, java.lang.String, boolean)"], ["void", "com.hazelcast.concurrent.lock.operations.SignalOperation.beforeRun()"], ["boolean", "com.hazelcast.concurrent.lock.operations.SignalOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.lock.operations.SignalOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.lock.operations.SignalOperation.getId()"], ["void", "com.hazelcast.concurrent.lock.operations.SignalOperation.run()"], ["com.hazelcast.concurrent.lock.operations.UnlockOperation", "com.hazelcast.concurrent.lock.operations.UnlockOperation()"], ["com.hazelcast.concurrent.lock.operations.UnlockOperation", "com.hazelcast.concurrent.lock.operations.UnlockOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.concurrent.lock.operations.UnlockOperation", "com.hazelcast.concurrent.lock.operations.UnlockOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, boolean)"], ["com.hazelcast.concurrent.lock.operations.UnlockOperation", "com.hazelcast.concurrent.lock.operations.UnlockOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, boolean, long)"], ["void", "com.hazelcast.concurrent.lock.operations.UnlockOperation.run()"], ["void", "com.hazelcast.concurrent.lock.operations.UnlockOperation.afterRun()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.lock.operations.UnlockOperation.getBackupOperation()"], ["boolean", "com.hazelcast.concurrent.lock.operations.UnlockOperation.shouldBackup()"], ["boolean", "com.hazelcast.concurrent.lock.operations.UnlockOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.lock.operations.UnlockOperation.getNotifiedKey()"], ["int", "com.hazelcast.concurrent.lock.operations.UnlockOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.LockReplicationOperation", "com.hazelcast.concurrent.lock.operations.LockReplicationOperation()"], ["com.hazelcast.concurrent.lock.operations.LockReplicationOperation", "com.hazelcast.concurrent.lock.operations.LockReplicationOperation(com.hazelcast.concurrent.lock.LockStoreContainer, int, int)"], ["com.hazelcast.concurrent.lock.operations.LockReplicationOperation", "com.hazelcast.concurrent.lock.operations.LockReplicationOperation(com.hazelcast.concurrent.lock.LockStoreContainer, int, int, java.util.Collection<com.hazelcast.spi.ServiceNamespace>)"], ["void", "com.hazelcast.concurrent.lock.operations.LockReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.concurrent.lock.operations.LockReplicationOperation.getServiceName()"], ["boolean", "com.hazelcast.concurrent.lock.operations.LockReplicationOperation.isEmpty()"], ["int", "com.hazelcast.concurrent.lock.operations.LockReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.concurrent.lock.operations.LockReplicationOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.UnlockBackupOperation", "com.hazelcast.concurrent.lock.operations.UnlockBackupOperation()"], ["com.hazelcast.concurrent.lock.operations.UnlockBackupOperation", "com.hazelcast.concurrent.lock.operations.UnlockBackupOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, java.lang.String, boolean)"], ["void", "com.hazelcast.concurrent.lock.operations.UnlockBackupOperation.run()"], ["int", "com.hazelcast.concurrent.lock.operations.UnlockBackupOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.IsLockedOperation", "com.hazelcast.concurrent.lock.operations.IsLockedOperation()"], ["com.hazelcast.concurrent.lock.operations.IsLockedOperation", "com.hazelcast.concurrent.lock.operations.IsLockedOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.concurrent.lock.operations.IsLockedOperation", "com.hazelcast.concurrent.lock.operations.IsLockedOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long)"], ["int", "com.hazelcast.concurrent.lock.operations.IsLockedOperation.getId()"], ["void", "com.hazelcast.concurrent.lock.operations.IsLockedOperation.run()"], ["com.hazelcast.concurrent.lock.operations.AbstractLockOperation", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation()"], ["com.hazelcast.concurrent.lock.operations.AbstractLockOperation", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, long, long)"], ["java.lang.Object", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.getResponse()"], ["int", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.getSyncBackupCount()"], ["int", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.getAsyncBackupCount()"], ["void", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.setAsyncBackup(boolean)"], ["java.lang.String", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.getServiceName()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.getKey()"], ["java.lang.String", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.getName()"], ["com.hazelcast.spi.ServiceNamespace", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.getServiceNamespace()"], ["int", "com.hazelcast.concurrent.lock.operations.AbstractLockOperation.getFactoryId()"], ["com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation()"], ["com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, java.lang.String)"], ["com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, java.lang.String, long)"], ["void", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation.beforeRun()"], ["void", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation.run()"], ["boolean", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation.shouldNotify()"], ["boolean", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation.getBackupOperation()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation.getNotifiedKey()"], ["int", "com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.BeforeAwaitBackupOperation", "com.hazelcast.concurrent.lock.operations.BeforeAwaitBackupOperation()"], ["com.hazelcast.concurrent.lock.operations.BeforeAwaitBackupOperation", "com.hazelcast.concurrent.lock.operations.BeforeAwaitBackupOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, java.lang.String, java.lang.String)"], ["void", "com.hazelcast.concurrent.lock.operations.BeforeAwaitBackupOperation.run()"], ["int", "com.hazelcast.concurrent.lock.operations.BeforeAwaitBackupOperation.getId()"], ["com.hazelcast.concurrent.lock.operations.GetLockCountOperation", "com.hazelcast.concurrent.lock.operations.GetLockCountOperation()"], ["com.hazelcast.concurrent.lock.operations.GetLockCountOperation", "com.hazelcast.concurrent.lock.operations.GetLockCountOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.concurrent.lock.operations.GetLockCountOperation.getId()"], ["void", "com.hazelcast.concurrent.lock.operations.GetLockCountOperation.run()"], ["com.hazelcast.concurrent.lock.operations.LockOperation", "com.hazelcast.concurrent.lock.operations.LockOperation()"], ["com.hazelcast.concurrent.lock.operations.LockOperation", "com.hazelcast.concurrent.lock.operations.LockOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, long, long)"], ["com.hazelcast.concurrent.lock.operations.LockOperation", "com.hazelcast.concurrent.lock.operations.LockOperation(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data, long, long, long, long)"], ["void", "com.hazelcast.concurrent.lock.operations.LockOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.lock.operations.LockOperation.getBackupOperation()"], ["boolean", "com.hazelcast.concurrent.lock.operations.LockOperation.shouldBackup()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.lock.operations.LockOperation.getWaitKey()"], ["boolean", "com.hazelcast.concurrent.lock.operations.LockOperation.shouldWait()"], ["void", "com.hazelcast.concurrent.lock.operations.LockOperation.onWaitExpire()"], ["int", "com.hazelcast.concurrent.lock.operations.LockOperation.getId()"], ["com.hazelcast.concurrent.lock.LockStoreImpl", "com.hazelcast.concurrent.lock.LockStoreImpl()"], ["com.hazelcast.concurrent.lock.LockStoreImpl", "com.hazelcast.concurrent.lock.LockStoreImpl(com.hazelcast.concurrent.lock.LockService, com.hazelcast.spi.ObjectNamespace, com.hazelcast.util.scheduler.EntryTaskScheduler<com.hazelcast.nio.serialization.Data, java.lang.Integer>, int, int)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.lock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.localLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.txnLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long, boolean)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.extendLeaseTime(com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["com.hazelcast.concurrent.lock.LockResourceImpl", "com.hazelcast.concurrent.lock.LockStoreImpl.getLock(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.isLocked(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.isLockedBy(com.hazelcast.nio.serialization.Data, java.lang.String, long)"], ["int", "com.hazelcast.concurrent.lock.LockStoreImpl.getLockCount(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.concurrent.lock.LockStoreImpl.getLockedEntryCount()"], ["long", "com.hazelcast.concurrent.lock.LockStoreImpl.getRemainingLeaseTime(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.canAcquireLock(com.hazelcast.nio.serialization.Data, java.lang.String, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.shouldBlockReads(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.unlock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.forceUnlock(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.concurrent.lock.LockStoreImpl.getVersion(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.removeLocalLocks()"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.hasLock()"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.clear()"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.concurrent.lock.LockStoreImpl.getNamespace()"], ["int", "com.hazelcast.concurrent.lock.LockStoreImpl.getBackupCount()"], ["int", "com.hazelcast.concurrent.lock.LockStoreImpl.getAsyncBackupCount()"], ["int", "com.hazelcast.concurrent.lock.LockStoreImpl.getTotalBackupCount()"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.addAwait(com.hazelcast.nio.serialization.Data, java.lang.String, java.lang.String, long)"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.removeAwait(com.hazelcast.nio.serialization.Data, java.lang.String, java.lang.String, long)"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.signal(com.hazelcast.nio.serialization.Data, java.lang.String, int, java.lang.String)"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.lock.LockStoreImpl.getNotifiedKey(com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.removeSignalKey(com.hazelcast.concurrent.lock.ConditionKey)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreImpl.hasSignalKey(com.hazelcast.concurrent.lock.ConditionKey)"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.registerExpiredAwaitOp(com.hazelcast.concurrent.lock.operations.AwaitOperation)"], ["com.hazelcast.concurrent.lock.operations.AwaitOperation", "com.hazelcast.concurrent.lock.LockStoreImpl.pollExpiredAwaitOp(com.hazelcast.nio.serialization.Data)"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockStoreImpl.getOwnerInfo(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.concurrent.lock.LockStoreImpl.getFactoryId()"], ["int", "com.hazelcast.concurrent.lock.LockStoreImpl.getId()"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.lock.LockStoreImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockStoreImpl.toString()"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl$4.run()"], ["int", "com.hazelcast.concurrent.lock.LockServiceImpl$4.getPartitionId()"], ["int", "com.hazelcast.concurrent.lock.LockServiceImpl$2$1.getBackupCount()"], ["int", "com.hazelcast.concurrent.lock.LockServiceImpl$2$1.getAsyncBackupCount()"], ["com.hazelcast.concurrent.lock.LockDataSerializerHook", "com.hazelcast.concurrent.lock.LockDataSerializerHook()"], ["int", "com.hazelcast.concurrent.lock.LockDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.concurrent.lock.LockDataSerializerHook.createFactory()"], ["com.hazelcast.concurrent.lock.LockStoreProxy", "com.hazelcast.concurrent.lock.LockStoreProxy(com.hazelcast.concurrent.lock.LockStoreContainer, com.hazelcast.spi.ObjectNamespace)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.lock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.localLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.txnLock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long, long, boolean)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.extendLeaseTime(com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.unlock(com.hazelcast.nio.serialization.Data, java.lang.String, long, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.isLocked(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.isLockedBy(com.hazelcast.nio.serialization.Data, java.lang.String, long)"], ["int", "com.hazelcast.concurrent.lock.LockStoreProxy.getLockCount(com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.concurrent.lock.LockStoreProxy.getLockedEntryCount()"], ["long", "com.hazelcast.concurrent.lock.LockStoreProxy.getRemainingLeaseTime(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.canAcquireLock(com.hazelcast.nio.serialization.Data, java.lang.String, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.shouldBlockReads(com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockStoreProxy.forceUnlock(com.hazelcast.nio.serialization.Data)"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockStoreProxy.getOwnerInfo(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.concurrent.lock.LockStoreContainer", "com.hazelcast.concurrent.lock.LockStoreContainer(com.hazelcast.concurrent.lock.LockServiceImpl, int)"], ["com.hazelcast.concurrent.lock.LockStoreImpl", "com.hazelcast.concurrent.lock.LockStoreContainer.getLockStore(com.hazelcast.spi.ObjectNamespace)"], ["void", "com.hazelcast.concurrent.lock.LockStoreContainer.put(com.hazelcast.concurrent.lock.LockStoreImpl)"], ["com.hazelcast.concurrent.lock.LockStoreInfo", "com.hazelcast.concurrent.lock.LockServiceImpl$2.createNew(com.hazelcast.spi.ObjectNamespace)"], ["java.lang.Object", "com.hazelcast.concurrent.lock.LockServiceImpl$2.createNew(java.lang.Object)"], ["com.hazelcast.concurrent.lock.WaitersInfo", "com.hazelcast.concurrent.lock.WaitersInfo()"], ["com.hazelcast.concurrent.lock.WaitersInfo", "com.hazelcast.concurrent.lock.WaitersInfo(java.lang.String)"], ["void", "com.hazelcast.concurrent.lock.WaitersInfo.addWaiter(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.lock.WaitersInfo.removeWaiter(java.lang.String, long)"], ["java.lang.String", "com.hazelcast.concurrent.lock.WaitersInfo.getConditionId()"], ["boolean", "com.hazelcast.concurrent.lock.WaitersInfo.hasWaiter()"], ["int", "com.hazelcast.concurrent.lock.WaitersInfo.getFactoryId()"], ["int", "com.hazelcast.concurrent.lock.WaitersInfo.getId()"], ["void", "com.hazelcast.concurrent.lock.WaitersInfo.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.lock.WaitersInfo.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.concurrent.lock.ConditionKey", "com.hazelcast.concurrent.lock.ConditionKey(java.lang.String, com.hazelcast.nio.serialization.Data, java.lang.String, java.lang.String, long)"], ["java.lang.String", "com.hazelcast.concurrent.lock.ConditionKey.getServiceName()"], ["java.lang.String", "com.hazelcast.concurrent.lock.ConditionKey.getUuid()"], ["java.lang.String", "com.hazelcast.concurrent.lock.ConditionKey.getObjectName()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.concurrent.lock.ConditionKey.getKey()"], ["java.lang.String", "com.hazelcast.concurrent.lock.ConditionKey.getConditionId()"], ["long", "com.hazelcast.concurrent.lock.ConditionKey.getThreadId()"], ["boolean", "com.hazelcast.concurrent.lock.ConditionKey.equals(java.lang.Object)"], ["int", "com.hazelcast.concurrent.lock.ConditionKey.hashCode()"], ["java.lang.String", "com.hazelcast.concurrent.lock.ConditionKey.toString()"], ["long", "com.hazelcast.concurrent.lock.WaitersInfo$ConditionWaiter.getThreadId()"], ["java.lang.String", "com.hazelcast.concurrent.lock.WaitersInfo$ConditionWaiter.getCaller()"], ["boolean", "com.hazelcast.concurrent.lock.WaitersInfo$ConditionWaiter.equals(java.lang.Object)"], ["int", "com.hazelcast.concurrent.lock.WaitersInfo$ConditionWaiter.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.concurrent.lock.LockDataSerializerHook$1.create(int)"], ["com.hazelcast.concurrent.lock.LockProxy", "com.hazelcast.concurrent.lock.LockProxy(com.hazelcast.spi.NodeEngine, com.hazelcast.concurrent.lock.LockServiceImpl, java.lang.String)"], ["boolean", "com.hazelcast.concurrent.lock.LockProxy.isLocked()"], ["boolean", "com.hazelcast.concurrent.lock.LockProxy.isLockedByCurrentThread()"], ["int", "com.hazelcast.concurrent.lock.LockProxy.getLockCount()"], ["long", "com.hazelcast.concurrent.lock.LockProxy.getRemainingLeaseTime()"], ["void", "com.hazelcast.concurrent.lock.LockProxy.lock()"], ["void", "com.hazelcast.concurrent.lock.LockProxy.lock(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.concurrent.lock.LockProxy.lockInterruptibly()"], ["boolean", "com.hazelcast.concurrent.lock.LockProxy.tryLock()"], ["boolean", "com.hazelcast.concurrent.lock.LockProxy.tryLock(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.concurrent.lock.LockProxy.tryLock(long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.concurrent.lock.LockProxy.unlock()"], ["void", "com.hazelcast.concurrent.lock.LockProxy.forceUnlock()"], ["java.util.concurrent.locks.Condition", "com.hazelcast.concurrent.lock.LockProxy.newCondition()"], ["com.hazelcast.core.ICondition", "com.hazelcast.concurrent.lock.LockProxy.newCondition(java.lang.String)"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockProxy.getName()"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockProxy.getServiceName()"], ["java.lang.Object", "com.hazelcast.concurrent.lock.LockProxy.getKey()"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.concurrent.lock.LockProxy.getKeyData()"], ["int", "com.hazelcast.concurrent.lock.LockProxy.getPartitionId()"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockProxy.toString()"], ["com.hazelcast.concurrent.lock.LockResourceImpl", "com.hazelcast.concurrent.lock.LockStoreImpl$1.createNew(com.hazelcast.nio.serialization.Data)"], ["java.lang.Object", "com.hazelcast.concurrent.lock.LockStoreImpl$1.createNew(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.concurrent.lock.LockServiceImpl$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.lock.LockServiceImpl$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.concurrent.lock.LockEvictionProcessor$UnlockResponseHandler.sendResponse(com.hazelcast.spi.Operation, java.lang.Object)"], ["com.hazelcast.concurrent.lock.ConditionImpl", "com.hazelcast.concurrent.lock.ConditionImpl(com.hazelcast.concurrent.lock.LockProxy, java.lang.String)"], ["void", "com.hazelcast.concurrent.lock.ConditionImpl.await()"], ["void", "com.hazelcast.concurrent.lock.ConditionImpl.awaitUninterruptibly()"], ["long", "com.hazelcast.concurrent.lock.ConditionImpl.awaitNanos(long)"], ["boolean", "com.hazelcast.concurrent.lock.ConditionImpl.await(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.concurrent.lock.ConditionImpl.awaitUntil(java.util.Date)"], ["void", "com.hazelcast.concurrent.lock.ConditionImpl.signal()"], ["void", "com.hazelcast.concurrent.lock.ConditionImpl.signalAll()"], ["void", "com.hazelcast.concurrent.lock.LockServiceImpl$3.run()"], ["int", "com.hazelcast.concurrent.lock.LockServiceImpl$3.getPartitionId()"], ["com.hazelcast.concurrent.lock.LockStoreImpl", "com.hazelcast.concurrent.lock.LockStoreContainer$1.createNew(com.hazelcast.spi.ObjectNamespace)"], ["java.lang.Object", "com.hazelcast.concurrent.lock.LockStoreContainer$1.createNew(java.lang.Object)"], ["void", "com.hazelcast.concurrent.lock.ObjectNamespaceSerializationHelper.writeNamespaceCompatibly(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.ObjectDataOutput)"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.concurrent.lock.ObjectNamespaceSerializationHelper.readNamespaceCompatibly(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.concurrent.lock.InternalLockNamespace", "com.hazelcast.concurrent.lock.InternalLockNamespace()"], ["com.hazelcast.concurrent.lock.InternalLockNamespace", "com.hazelcast.concurrent.lock.InternalLockNamespace(java.lang.String)"], ["java.lang.String", "com.hazelcast.concurrent.lock.InternalLockNamespace.getServiceName()"], ["java.lang.String", "com.hazelcast.concurrent.lock.InternalLockNamespace.getObjectName()"], ["void", "com.hazelcast.concurrent.lock.InternalLockNamespace.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.lock.InternalLockNamespace.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.concurrent.lock.InternalLockNamespace.equals(java.lang.Object)"], ["int", "com.hazelcast.concurrent.lock.InternalLockNamespace.hashCode()"], ["java.lang.String", "com.hazelcast.concurrent.lock.InternalLockNamespace.toString()"], ["com.hazelcast.concurrent.lock.LockResourceImpl", "com.hazelcast.concurrent.lock.LockResourceImpl()"], ["com.hazelcast.concurrent.lock.LockResourceImpl", "com.hazelcast.concurrent.lock.LockResourceImpl(com.hazelcast.nio.serialization.Data, com.hazelcast.concurrent.lock.LockStoreImpl)"], ["com.hazelcast.nio.serialization.Data", "com.hazelcast.concurrent.lock.LockResourceImpl.getKey()"], ["boolean", "com.hazelcast.concurrent.lock.LockResourceImpl.isLocked()"], ["boolean", "com.hazelcast.concurrent.lock.LockResourceImpl.isLockedBy(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.lock.LockResourceImpl.signal(java.lang.String, int, java.lang.String)"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockResourceImpl.getOwner()"], ["boolean", "com.hazelcast.concurrent.lock.LockResourceImpl.isTransactional()"], ["boolean", "com.hazelcast.concurrent.lock.LockResourceImpl.isLocal()"], ["boolean", "com.hazelcast.concurrent.lock.LockResourceImpl.shouldBlockReads()"], ["long", "com.hazelcast.concurrent.lock.LockResourceImpl.getThreadId()"], ["int", "com.hazelcast.concurrent.lock.LockResourceImpl.getLockCount()"], ["long", "com.hazelcast.concurrent.lock.LockResourceImpl.getAcquireTime()"], ["long", "com.hazelcast.concurrent.lock.LockResourceImpl.getRemainingLeaseTime()"], ["long", "com.hazelcast.concurrent.lock.LockResourceImpl.getExpirationTime()"], ["int", "com.hazelcast.concurrent.lock.LockResourceImpl.getVersion()"], ["int", "com.hazelcast.concurrent.lock.LockResourceImpl.getFactoryId()"], ["int", "com.hazelcast.concurrent.lock.LockResourceImpl.getId()"], ["void", "com.hazelcast.concurrent.lock.LockResourceImpl.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.lock.LockResourceImpl.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.concurrent.lock.LockResourceImpl.equals(java.lang.Object)"], ["int", "com.hazelcast.concurrent.lock.LockResourceImpl.hashCode()"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockResourceImpl.toString()"], ["com.hazelcast.concurrent.lock.LockWaitNotifyKey", "com.hazelcast.concurrent.lock.LockWaitNotifyKey(com.hazelcast.spi.ObjectNamespace, com.hazelcast.nio.serialization.Data)"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockWaitNotifyKey.getServiceName()"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockWaitNotifyKey.getObjectName()"], ["boolean", "com.hazelcast.concurrent.lock.LockWaitNotifyKey.equals(java.lang.Object)"], ["int", "com.hazelcast.concurrent.lock.LockWaitNotifyKey.hashCode()"], ["java.lang.String", "com.hazelcast.concurrent.lock.LockWaitNotifyKey.toString()"], ["com.hazelcast.concurrent.lock.LockEvictionProcessor", "com.hazelcast.concurrent.lock.LockEvictionProcessor(com.hazelcast.spi.NodeEngine, com.hazelcast.spi.ObjectNamespace)"], ["void", "com.hazelcast.concurrent.lock.LockEvictionProcessor.process(com.hazelcast.util.scheduler.EntryTaskScheduler<com.hazelcast.nio.serialization.Data, java.lang.Integer>, java.util.Collection<com.hazelcast.util.scheduler.ScheduledEntry<com.hazelcast.nio.serialization.Data, java.lang.Integer>>)"], ["com.hazelcast.concurrent.lock.LockProxySupport", "com.hazelcast.concurrent.lock.LockProxySupport(com.hazelcast.spi.ObjectNamespace, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockProxySupport.isLocked(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockProxySupport.isLockedByCurrentThread(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.concurrent.lock.LockProxySupport.getLockCount(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["long", "com.hazelcast.concurrent.lock.LockProxySupport.getRemainingLeaseTime(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.lock.LockProxySupport.lock(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.lock.LockProxySupport.lock(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data, long)"], ["void", "com.hazelcast.concurrent.lock.LockProxySupport.lockInterruptly(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.lock.LockProxySupport.lockInterruptly(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data, long)"], ["boolean", "com.hazelcast.concurrent.lock.LockProxySupport.tryLock(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["boolean", "com.hazelcast.concurrent.lock.LockProxySupport.tryLock(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.concurrent.lock.LockProxySupport.tryLock(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data, long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.concurrent.lock.LockProxySupport.unlock(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["void", "com.hazelcast.concurrent.lock.LockProxySupport.forceUnlock(com.hazelcast.spi.NodeEngine, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.ObjectNamespace", "com.hazelcast.concurrent.lock.LockProxySupport.getNamespace()"], ["com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberBackupOperation", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberBackupOperation()"], ["com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberBackupOperation", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberBackupOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberBackupOperation.run()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberBackupOperation.getId()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreBackupAwareOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreBackupAwareOperation.getSyncBackupCount()"], ["com.hazelcast.concurrent.semaphore.operations.DrainOperation", "com.hazelcast.concurrent.semaphore.operations.DrainOperation()"], ["com.hazelcast.concurrent.semaphore.operations.DrainOperation", "com.hazelcast.concurrent.semaphore.operations.DrainOperation(java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.operations.DrainOperation.run()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.DrainOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.semaphore.operations.DrainOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.semaphore.operations.DrainOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.AcquireOperation", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation()"], ["com.hazelcast.concurrent.semaphore.operations.AcquireOperation", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation(java.lang.String, int, long)"], ["void", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation.run()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation.getWaitKey()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation.shouldWait()"], ["void", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation.onWaitExpire()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.semaphore.operations.AcquireOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.IncreaseOperation", "com.hazelcast.concurrent.semaphore.operations.IncreaseOperation()"], ["com.hazelcast.concurrent.semaphore.operations.IncreaseOperation", "com.hazelcast.concurrent.semaphore.operations.IncreaseOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.semaphore.operations.IncreaseOperation.run()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.IncreaseOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.semaphore.operations.IncreaseOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.semaphore.operations.IncreaseOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.ReduceOperation", "com.hazelcast.concurrent.semaphore.operations.ReduceOperation()"], ["com.hazelcast.concurrent.semaphore.operations.ReduceOperation", "com.hazelcast.concurrent.semaphore.operations.ReduceOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.semaphore.operations.ReduceOperation.run()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.ReduceOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.semaphore.operations.ReduceOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.semaphore.operations.ReduceOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.InitBackupOperation", "com.hazelcast.concurrent.semaphore.operations.InitBackupOperation()"], ["com.hazelcast.concurrent.semaphore.operations.InitBackupOperation", "com.hazelcast.concurrent.semaphore.operations.InitBackupOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.semaphore.operations.InitBackupOperation.run()"], ["int", "com.hazelcast.concurrent.semaphore.operations.InitBackupOperation.getId()"], ["java.lang.String", "com.hazelcast.concurrent.semaphore.operations.SemaphoreOperation.getServiceName()"], ["java.lang.Object", "com.hazelcast.concurrent.semaphore.operations.SemaphoreOperation.getResponse()"], ["com.hazelcast.concurrent.semaphore.SemaphoreContainer", "com.hazelcast.concurrent.semaphore.operations.SemaphoreOperation.getSemaphoreContainer()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreOperation.getFactoryId()"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.concurrent.semaphore.operations.ReleaseOperation", "com.hazelcast.concurrent.semaphore.operations.ReleaseOperation()"], ["com.hazelcast.concurrent.semaphore.operations.ReleaseOperation", "com.hazelcast.concurrent.semaphore.operations.ReleaseOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.semaphore.operations.ReleaseOperation.run()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.ReleaseOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.semaphore.operations.ReleaseOperation.getNotifiedKey()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.ReleaseOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.semaphore.operations.ReleaseOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.semaphore.operations.ReleaseOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.IncreaseBackupOperation", "com.hazelcast.concurrent.semaphore.operations.IncreaseBackupOperation()"], ["com.hazelcast.concurrent.semaphore.operations.IncreaseBackupOperation", "com.hazelcast.concurrent.semaphore.operations.IncreaseBackupOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.semaphore.operations.IncreaseBackupOperation.run()"], ["int", "com.hazelcast.concurrent.semaphore.operations.IncreaseBackupOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.ReduceBackupOperation", "com.hazelcast.concurrent.semaphore.operations.ReduceBackupOperation()"], ["com.hazelcast.concurrent.semaphore.operations.ReduceBackupOperation", "com.hazelcast.concurrent.semaphore.operations.ReduceBackupOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.semaphore.operations.ReduceBackupOperation.run()"], ["int", "com.hazelcast.concurrent.semaphore.operations.ReduceBackupOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.DrainBackupOperation", "com.hazelcast.concurrent.semaphore.operations.DrainBackupOperation()"], ["com.hazelcast.concurrent.semaphore.operations.DrainBackupOperation", "com.hazelcast.concurrent.semaphore.operations.DrainBackupOperation(java.lang.String, int, java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.operations.DrainBackupOperation.run()"], ["int", "com.hazelcast.concurrent.semaphore.operations.DrainBackupOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.ReleaseBackupOperation", "com.hazelcast.concurrent.semaphore.operations.ReleaseBackupOperation()"], ["com.hazelcast.concurrent.semaphore.operations.ReleaseBackupOperation", "com.hazelcast.concurrent.semaphore.operations.ReleaseBackupOperation(java.lang.String, int, java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.operations.ReleaseBackupOperation.run()"], ["int", "com.hazelcast.concurrent.semaphore.operations.ReleaseBackupOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.SemaphoreReplicationOperation", "com.hazelcast.concurrent.semaphore.operations.SemaphoreReplicationOperation()"], ["com.hazelcast.concurrent.semaphore.operations.SemaphoreReplicationOperation", "com.hazelcast.concurrent.semaphore.operations.SemaphoreReplicationOperation(java.util.Map<java.lang.String, com.hazelcast.concurrent.semaphore.SemaphoreContainer>)"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.concurrent.semaphore.operations.SemaphoreReplicationOperation.getServiceName()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreReplicationOperation.getId()"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreBackupOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreBackupOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation()"], ["com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.run()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.shouldBackup()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.getAsyncBackupCount()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.getSyncBackupCount()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.getBackupOperation()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.shouldNotify()"], ["com.hazelcast.spi.WaitNotifyKey", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.getNotifiedKey()"], ["int", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.getId()"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.writeInternal(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.semaphore.operations.SemaphoreDetachMemberOperation.readInternal(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.concurrent.semaphore.operations.InitOperation", "com.hazelcast.concurrent.semaphore.operations.InitOperation()"], ["com.hazelcast.concurrent.semaphore.operations.InitOperation", "com.hazelcast.concurrent.semaphore.operations.InitOperation(java.lang.String, int)"], ["void", "com.hazelcast.concurrent.semaphore.operations.InitOperation.run()"], ["boolean", "com.hazelcast.concurrent.semaphore.operations.InitOperation.shouldBackup()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.semaphore.operations.InitOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.semaphore.operations.InitOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.AcquireBackupOperation", "com.hazelcast.concurrent.semaphore.operations.AcquireBackupOperation()"], ["com.hazelcast.concurrent.semaphore.operations.AcquireBackupOperation", "com.hazelcast.concurrent.semaphore.operations.AcquireBackupOperation(java.lang.String, int, java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.operations.AcquireBackupOperation.run()"], ["int", "com.hazelcast.concurrent.semaphore.operations.AcquireBackupOperation.getId()"], ["com.hazelcast.concurrent.semaphore.operations.AvailableOperation", "com.hazelcast.concurrent.semaphore.operations.AvailableOperation()"], ["com.hazelcast.concurrent.semaphore.operations.AvailableOperation", "com.hazelcast.concurrent.semaphore.operations.AvailableOperation(java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.operations.AvailableOperation.run()"], ["int", "com.hazelcast.concurrent.semaphore.operations.AvailableOperation.getId()"], ["com.hazelcast.concurrent.semaphore.SemaphoreDataSerializerHook", "com.hazelcast.concurrent.semaphore.SemaphoreDataSerializerHook()"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.concurrent.semaphore.SemaphoreDataSerializerHook.createFactory()"], ["com.hazelcast.concurrent.semaphore.SemaphoreProxy", "com.hazelcast.concurrent.semaphore.SemaphoreProxy(java.lang.String, com.hazelcast.concurrent.semaphore.SemaphoreService, com.hazelcast.spi.NodeEngine)"], ["java.lang.String", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.getName()"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.init(int)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.acquire()"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.acquire(int)"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.availablePermits()"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.drainPermits()"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.reducePermits(int)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.increasePermits(int)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.release()"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.release(int)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.tryAcquire()"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.tryAcquire(int)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.tryAcquire(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.tryAcquire(int, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.getServiceName()"], ["java.lang.String", "com.hazelcast.concurrent.semaphore.SemaphoreProxy.toString()"], ["com.hazelcast.concurrent.semaphore.SemaphoreService", "com.hazelcast.concurrent.semaphore.SemaphoreService(com.hazelcast.spi.NodeEngine)"], ["com.hazelcast.concurrent.semaphore.SemaphoreContainer", "com.hazelcast.concurrent.semaphore.SemaphoreService.getSemaphoreContainer(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreService.containsSemaphore(java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.reset()"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.shutdown(boolean)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.memberAdded(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.memberRemoved(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.memberAttributeChanged(com.hazelcast.spi.MemberAttributeServiceEvent)"], ["com.hazelcast.concurrent.semaphore.SemaphoreProxy", "com.hazelcast.concurrent.semaphore.SemaphoreService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.semaphore.SemaphoreService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.insertMigrationData(java.util.Map<java.lang.String, com.hazelcast.concurrent.semaphore.SemaphoreContainer>)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreService.clientDisconnected(java.lang.String)"], ["java.lang.String", "com.hazelcast.concurrent.semaphore.SemaphoreService.getQuorumName(java.lang.String)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.concurrent.semaphore.SemaphoreService.createDistributedObject(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.semaphore.SemaphoreService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.semaphore.SemaphoreService$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.concurrent.semaphore.SemaphoreDataSerializerHook$1.create(int)"], ["com.hazelcast.concurrent.semaphore.SemaphoreContainer", "com.hazelcast.concurrent.semaphore.SemaphoreService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.semaphore.SemaphoreService$2.createNew(java.lang.Object)"], ["com.hazelcast.concurrent.semaphore.SemaphoreWaitNotifyKey", "com.hazelcast.concurrent.semaphore.SemaphoreWaitNotifyKey(java.lang.String, java.lang.String)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreWaitNotifyKey.equals(java.lang.Object)"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreWaitNotifyKey.hashCode()"], ["com.hazelcast.concurrent.semaphore.SemaphoreContainer", "com.hazelcast.concurrent.semaphore.SemaphoreContainer()"], ["com.hazelcast.concurrent.semaphore.SemaphoreContainer", "com.hazelcast.concurrent.semaphore.SemaphoreContainer(int, com.hazelcast.config.SemaphoreConfig)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.detachAll(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.init(int)"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.getAvailable()"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.isAvailable(int)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.acquire(java.lang.String, int)"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.drain(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.increase(int)"], ["boolean", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.reduce(int)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.release(java.lang.String, int)"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.getPartitionId()"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.getSyncBackupCount()"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.getAsyncBackupCount()"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.setInitialized()"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.getTotalBackupCount()"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.getFactoryId()"], ["int", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.getId()"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.concurrent.semaphore.SemaphoreContainer.toString()"], ["com.hazelcast.concurrent.atomiclong.AtomicLongContainer", "com.hazelcast.concurrent.atomiclong.AtomicLongService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.AtomicLongService$1.createNew(java.lang.Object)"], ["com.hazelcast.concurrent.atomiclong.operations.AtomicLongBackupAwareOperation", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongBackupAwareOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.AtomicLongBackupAwareOperation", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongBackupAwareOperation(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongBackupAwareOperation.shouldBackup()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongBackupAwareOperation.getSyncBackupCount()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongBackupAwareOperation.getAsyncBackupCount()"], ["com.hazelcast.concurrent.atomiclong.operations.ApplyOperation", "com.hazelcast.concurrent.atomiclong.operations.ApplyOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.ApplyOperation", "com.hazelcast.concurrent.atomiclong.operations.ApplyOperation(java.lang.String, com.hazelcast.core.IFunction<java.lang.Long, R>)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.ApplyOperation.run()"], ["R", "com.hazelcast.concurrent.atomiclong.operations.ApplyOperation.getResponse()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.ApplyOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.MergeBackupOperation", "com.hazelcast.concurrent.atomiclong.operations.MergeBackupOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.MergeBackupOperation", "com.hazelcast.concurrent.atomiclong.operations.MergeBackupOperation(java.lang.String, java.lang.Long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.MergeBackupOperation.run()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.MergeBackupOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.AddBackupOperation", "com.hazelcast.concurrent.atomiclong.operations.AddBackupOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.AddBackupOperation", "com.hazelcast.concurrent.atomiclong.operations.AddBackupOperation(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.AddBackupOperation.run()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AddBackupOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation", "com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation", "com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation", "com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation", "com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.GetAndAlterOperation", "com.hazelcast.concurrent.atomiclong.operations.GetAndAlterOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.GetAndAlterOperation", "com.hazelcast.concurrent.atomiclong.operations.GetAndAlterOperation(java.lang.String, com.hazelcast.core.IFunction<java.lang.Long, java.lang.Long>)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.GetAndAlterOperation.run()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.GetAndAlterOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation", "com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation", "com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation(java.lang.String, long, long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.AbstractAtomicLongOperation", "com.hazelcast.concurrent.atomiclong.operations.AbstractAtomicLongOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.AbstractAtomicLongOperation", "com.hazelcast.concurrent.atomiclong.operations.AbstractAtomicLongOperation(java.lang.String)"], ["com.hazelcast.concurrent.atomiclong.AtomicLongContainer", "com.hazelcast.concurrent.atomiclong.operations.AbstractAtomicLongOperation.getLongContainer()"], ["java.lang.String", "com.hazelcast.concurrent.atomiclong.operations.AbstractAtomicLongOperation.getServiceName()"], ["java.lang.String", "com.hazelcast.concurrent.atomiclong.operations.AbstractAtomicLongOperation.getName()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AbstractAtomicLongOperation.getFactoryId()"], ["com.hazelcast.concurrent.atomiclong.operations.SetBackupOperation", "com.hazelcast.concurrent.atomiclong.operations.SetBackupOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.SetBackupOperation", "com.hazelcast.concurrent.atomiclong.operations.SetBackupOperation(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.SetBackupOperation.run()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.SetBackupOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.MergeOperation", "com.hazelcast.concurrent.atomiclong.operations.MergeOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.MergeOperation", "com.hazelcast.concurrent.atomiclong.operations.MergeOperation(java.lang.String, com.hazelcast.spi.merge.SplitBrainMergePolicy<java.lang.Long, com.hazelcast.spi.merge.SplitBrainMergeTypes$AtomicLongMergeTypes>, long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.MergeOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomiclong.operations.MergeOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.MergeOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.AtomicLongReplicationOperation", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongReplicationOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.AtomicLongReplicationOperation", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongReplicationOperation(java.util.Map<java.lang.String, java.lang.Long>)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongReplicationOperation.run()"], ["java.lang.String", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongReplicationOperation.getServiceName()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongReplicationOperation.getFactoryId()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AtomicLongReplicationOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.AbstractAlterOperation", "com.hazelcast.concurrent.atomiclong.operations.AbstractAlterOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.AbstractAlterOperation", "com.hazelcast.concurrent.atomiclong.operations.AbstractAlterOperation(java.lang.String, com.hazelcast.core.IFunction<java.lang.Long, java.lang.Long>)"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.operations.AbstractAlterOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomiclong.operations.AbstractAlterOperation.getBackupOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation", "com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation", "com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation.getResponse()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.SetOperation", "com.hazelcast.concurrent.atomiclong.operations.SetOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.SetOperation", "com.hazelcast.concurrent.atomiclong.operations.SetOperation(java.lang.String, long)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.SetOperation.run()"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomiclong.operations.SetOperation.getBackupOperation()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.SetOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.AlterOperation", "com.hazelcast.concurrent.atomiclong.operations.AlterOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.AlterOperation", "com.hazelcast.concurrent.atomiclong.operations.AlterOperation(java.lang.String, com.hazelcast.core.IFunction<java.lang.Long, java.lang.Long>)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.AlterOperation.run()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AlterOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.GetOperation", "com.hazelcast.concurrent.atomiclong.operations.GetOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.GetOperation", "com.hazelcast.concurrent.atomiclong.operations.GetOperation(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.GetOperation.run()"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.operations.GetOperation.getResponse()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.GetOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.operations.AlterAndGetOperation", "com.hazelcast.concurrent.atomiclong.operations.AlterAndGetOperation()"], ["com.hazelcast.concurrent.atomiclong.operations.AlterAndGetOperation", "com.hazelcast.concurrent.atomiclong.operations.AlterAndGetOperation(java.lang.String, com.hazelcast.core.IFunction<java.lang.Long, java.lang.Long>)"], ["void", "com.hazelcast.concurrent.atomiclong.operations.AlterAndGetOperation.run()"], ["int", "com.hazelcast.concurrent.atomiclong.operations.AlterAndGetOperation.getId()"], ["com.hazelcast.concurrent.atomiclong.AtomicLongProxy", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy(java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.concurrent.atomiclong.AtomicLongService)"], ["java.lang.String", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getName()"], ["int", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getPartitionId()"], ["java.lang.String", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getServiceName()"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.addAndGet(long)"], ["boolean", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.compareAndSet(long, long)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.set(long)"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAndSet(long)"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAndAdd(long)"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.decrementAndGet()"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.get()"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.incrementAndGet()"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAndIncrement()"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.alter(com.hazelcast.core.IFunction<java.lang.Long, java.lang.Long>)"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.alterAndGet(com.hazelcast.core.IFunction<java.lang.Long, java.lang.Long>)"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAndAlter(com.hazelcast.core.IFunction<java.lang.Long, java.lang.Long>)"], ["<R> R", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.apply(com.hazelcast.core.IFunction<java.lang.Long, R>)"], ["<R> com.hazelcast.spi.InternalCompletableFuture<R>", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.applyAsync(com.hazelcast.core.IFunction<java.lang.Long, R>)"], ["<R> com.hazelcast.spi.InternalCompletableFuture<R>", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncApply(com.hazelcast.core.IFunction<java.lang.Long, R>)"], ["java.lang.String", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.toString()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncApply(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncGetAndAlter(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncAlterAndGet(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncAlter(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncSet(long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncGetAndIncrement()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncIncrementAndGet()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncGetAndSet(long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncGetAndAdd(long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncGet()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncDecrementAndGet()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncCompareAndSet(long, long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.asyncAddAndGet(long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.applyAsync(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAndAlterAsync(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.alterAndGetAsync(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.alterAsync(com.hazelcast.core.IFunction)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.setAsync(long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAndIncrementAsync()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.incrementAndGetAsync()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAndSetAsync(long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAndAddAsync(long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.getAsync()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.decrementAndGetAsync()"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.compareAndSetAsync(long, long)"], ["com.hazelcast.core.ICompletableFuture", "com.hazelcast.concurrent.atomiclong.AtomicLongProxy.addAndGetAsync(long)"], ["com.hazelcast.concurrent.atomiclong.AtomicLongDataSerializerHook", "com.hazelcast.concurrent.atomiclong.AtomicLongDataSerializerHook()"], ["int", "com.hazelcast.concurrent.atomiclong.AtomicLongDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.concurrent.atomiclong.AtomicLongDataSerializerHook.createFactory()"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.AtomicLongService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.concurrent.atomiclong.AtomicLongService$2.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.concurrent.atomiclong.AtomicLongDataSerializerHook$1.create(int)"], ["java.lang.String", "com.hazelcast.concurrent.atomiclong.AtomicLongContainerCollector.getContainerName(com.hazelcast.concurrent.atomiclong.AtomicLongContainer)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongContainerCollector.onDestroy()"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongService$Merger.runInternal()"], ["com.hazelcast.concurrent.atomiclong.AtomicLongContainer", "com.hazelcast.concurrent.atomiclong.AtomicLongContainer()"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongContainer.get()"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongContainer.addAndGet(long)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongContainer.set(long)"], ["boolean", "com.hazelcast.concurrent.atomiclong.AtomicLongContainer.compareAndSet(long, long)"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongContainer.getAndAdd(long)"], ["long", "com.hazelcast.concurrent.atomiclong.AtomicLongContainer.getAndSet(long)"], ["com.hazelcast.concurrent.atomiclong.AtomicLongService", "com.hazelcast.concurrent.atomiclong.AtomicLongService()"], ["com.hazelcast.concurrent.atomiclong.AtomicLongContainer", "com.hazelcast.concurrent.atomiclong.AtomicLongService.getLongContainer(java.lang.String)"], ["boolean", "com.hazelcast.concurrent.atomiclong.AtomicLongService.containsAtomicLong(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongService.reset()"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongService.shutdown(boolean)"], ["com.hazelcast.concurrent.atomiclong.AtomicLongProxy", "com.hazelcast.concurrent.atomiclong.AtomicLongService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongService.beforeMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["com.hazelcast.spi.Operation", "com.hazelcast.concurrent.atomiclong.AtomicLongService.prepareReplicationOperation(com.hazelcast.spi.PartitionReplicationEvent)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongService.commitMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["void", "com.hazelcast.concurrent.atomiclong.AtomicLongService.rollbackMigration(com.hazelcast.spi.PartitionMigrationEvent)"], ["java.lang.String", "com.hazelcast.concurrent.atomiclong.AtomicLongService.getQuorumName(java.lang.String)"], ["java.lang.Runnable", "com.hazelcast.concurrent.atomiclong.AtomicLongService.prepareMergeRunnable()"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.concurrent.atomiclong.AtomicLongService.createDistributedObject(java.lang.String)"], ["com.hazelcast.concurrent.idgen.IdGeneratorService", "com.hazelcast.concurrent.idgen.IdGeneratorService(com.hazelcast.spi.NodeEngine)"], ["void", "com.hazelcast.concurrent.idgen.IdGeneratorService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.concurrent.idgen.IdGeneratorService.reset()"], ["void", "com.hazelcast.concurrent.idgen.IdGeneratorService.shutdown(boolean)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.concurrent.idgen.IdGeneratorService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.concurrent.idgen.IdGeneratorService.destroyDistributedObject(java.lang.String)"], ["com.hazelcast.concurrent.idgen.IdGeneratorProxy", "com.hazelcast.concurrent.idgen.IdGeneratorProxy(com.hazelcast.core.IAtomicLong, java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.concurrent.idgen.IdGeneratorService)"], ["boolean", "com.hazelcast.concurrent.idgen.IdGeneratorProxy.init(long)"], ["long", "com.hazelcast.concurrent.idgen.IdGeneratorProxy.newId()"], ["java.lang.String", "com.hazelcast.concurrent.idgen.IdGeneratorProxy.getName()"], ["java.lang.String", "com.hazelcast.concurrent.idgen.IdGeneratorProxy.getServiceName()"], ["com.hazelcast.concurrent.idgen.IdGeneratorImpl", "com.hazelcast.concurrent.idgen.IdGeneratorImpl(com.hazelcast.core.IAtomicLong)"], ["boolean", "com.hazelcast.concurrent.idgen.IdGeneratorImpl.init(long)"], ["long", "com.hazelcast.concurrent.idgen.IdGeneratorImpl.newId()"], ["java.lang.String", "com.hazelcast.concurrent.idgen.IdGeneratorImpl.getPartitionKey()"], ["java.lang.String", "com.hazelcast.concurrent.idgen.IdGeneratorImpl.getName()"], ["java.lang.String", "com.hazelcast.concurrent.idgen.IdGeneratorImpl.getServiceName()"], ["void", "com.hazelcast.concurrent.idgen.IdGeneratorImpl.destroy()"], ["com.hazelcast.executor.impl.ExecutorServiceProxy", "com.hazelcast.executor.impl.ExecutorServiceProxy(java.lang.String, com.hazelcast.spi.NodeEngine, com.hazelcast.executor.impl.DistributedExecutorService)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.execute(java.lang.Runnable, com.hazelcast.core.MemberSelector)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.executeOnMembers(java.lang.Runnable, com.hazelcast.core.MemberSelector)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.executor.impl.ExecutorServiceProxy.submit(java.util.concurrent.Callable<T>, com.hazelcast.core.MemberSelector)"], ["<T> java.util.Map<com.hazelcast.core.Member, java.util.concurrent.Future<T>>", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMembers(java.util.concurrent.Callable<T>, com.hazelcast.core.MemberSelector)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submit(java.lang.Runnable, com.hazelcast.core.MemberSelector, com.hazelcast.core.ExecutionCallback)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMembers(java.lang.Runnable, com.hazelcast.core.MemberSelector, com.hazelcast.core.MultiExecutionCallback)"], ["<T> void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submit(java.util.concurrent.Callable<T>, com.hazelcast.core.MemberSelector, com.hazelcast.core.ExecutionCallback<T>)"], ["<T> void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMembers(java.util.concurrent.Callable<T>, com.hazelcast.core.MemberSelector, com.hazelcast.core.MultiExecutionCallback)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.execute(java.lang.Runnable)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.executeOnKeyOwner(java.lang.Runnable, java.lang.Object)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.executeOnMember(java.lang.Runnable, com.hazelcast.core.Member)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.executeOnMembers(java.lang.Runnable, java.util.Collection<com.hazelcast.core.Member>)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.executeOnAllMembers(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.executor.impl.ExecutorServiceProxy.submit(java.lang.Runnable, T)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.executor.impl.ExecutorServiceProxy.submit(java.util.concurrent.Callable<T>)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToKeyOwner(java.util.concurrent.Callable<T>, java.lang.Object)"], ["<T> java.util.concurrent.Future<T>", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMember(java.util.concurrent.Callable<T>, com.hazelcast.core.Member)"], ["<T> java.util.Map<com.hazelcast.core.Member, java.util.concurrent.Future<T>>", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMembers(java.util.concurrent.Callable<T>, java.util.Collection<com.hazelcast.core.Member>)"], ["<T> java.util.Map<com.hazelcast.core.Member, java.util.concurrent.Future<T>>", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToAllMembers(java.util.concurrent.Callable<T>)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submit(java.lang.Runnable, com.hazelcast.core.ExecutionCallback)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToKeyOwner(java.lang.Runnable, java.lang.Object, com.hazelcast.core.ExecutionCallback)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMember(java.lang.Runnable, com.hazelcast.core.Member, com.hazelcast.core.ExecutionCallback)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMembers(java.lang.Runnable, java.util.Collection<com.hazelcast.core.Member>, com.hazelcast.core.MultiExecutionCallback)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToAllMembers(java.lang.Runnable, com.hazelcast.core.MultiExecutionCallback)"], ["<T> void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submit(java.util.concurrent.Callable<T>, com.hazelcast.core.ExecutionCallback<T>)"], ["<T> void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToKeyOwner(java.util.concurrent.Callable<T>, java.lang.Object, com.hazelcast.core.ExecutionCallback<T>)"], ["<T> void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMember(java.util.concurrent.Callable<T>, com.hazelcast.core.Member, com.hazelcast.core.ExecutionCallback<T>)"], ["<T> void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToMembers(java.util.concurrent.Callable<T>, java.util.Collection<com.hazelcast.core.Member>, com.hazelcast.core.MultiExecutionCallback)"], ["<T> void", "com.hazelcast.executor.impl.ExecutorServiceProxy.submitToAllMembers(java.util.concurrent.Callable<T>, com.hazelcast.core.MultiExecutionCallback)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.hazelcast.executor.impl.ExecutorServiceProxy.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.hazelcast.executor.impl.ExecutorServiceProxy.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.hazelcast.executor.impl.ExecutorServiceProxy.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> T", "com.hazelcast.executor.impl.ExecutorServiceProxy.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.hazelcast.executor.impl.ExecutorServiceProxy.isShutdown()"], ["boolean", "com.hazelcast.executor.impl.ExecutorServiceProxy.isTerminated()"], ["boolean", "com.hazelcast.executor.impl.ExecutorServiceProxy.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy.shutdown()"], ["com.hazelcast.monitor.LocalExecutorStats", "com.hazelcast.executor.impl.ExecutorServiceProxy.getLocalExecutorStats()"], ["java.lang.String", "com.hazelcast.executor.impl.ExecutorServiceProxy.getServiceName()"], ["java.lang.String", "com.hazelcast.executor.impl.ExecutorServiceProxy.getName()"], ["java.lang.String", "com.hazelcast.executor.impl.ExecutorServiceProxy.toString()"], ["com.hazelcast.executor.impl.operations.ShutdownOperation", "com.hazelcast.executor.impl.operations.ShutdownOperation()"], ["com.hazelcast.executor.impl.operations.ShutdownOperation", "com.hazelcast.executor.impl.operations.ShutdownOperation(java.lang.String)"], ["java.lang.String", "com.hazelcast.executor.impl.operations.ShutdownOperation.getServiceName()"], ["void", "com.hazelcast.executor.impl.operations.ShutdownOperation.run()"], ["java.lang.Object", "com.hazelcast.executor.impl.operations.ShutdownOperation.getResponse()"], ["int", "com.hazelcast.executor.impl.operations.ShutdownOperation.getFactoryId()"], ["int", "com.hazelcast.executor.impl.operations.ShutdownOperation.getId()"], ["com.hazelcast.executor.impl.operations.CallableTaskOperation", "com.hazelcast.executor.impl.operations.CallableTaskOperation()"], ["com.hazelcast.executor.impl.operations.CallableTaskOperation", "com.hazelcast.executor.impl.operations.CallableTaskOperation(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data)"], ["int", "com.hazelcast.executor.impl.operations.CallableTaskOperation.getId()"], ["int", "com.hazelcast.executor.impl.operations.CallableTaskOperation.getFactoryId()"], ["java.lang.String", "com.hazelcast.executor.impl.operations.CallableTaskOperation.getServiceName()"], ["java.lang.String", "com.hazelcast.executor.impl.operations.CallableTaskOperation.getName()"], ["com.hazelcast.executor.impl.operations.MemberCallableTaskOperation", "com.hazelcast.executor.impl.operations.MemberCallableTaskOperation()"], ["com.hazelcast.executor.impl.operations.MemberCallableTaskOperation", "com.hazelcast.executor.impl.operations.MemberCallableTaskOperation(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.ExceptionAction", "com.hazelcast.executor.impl.operations.MemberCallableTaskOperation.onInvocationException(java.lang.Throwable)"], ["int", "com.hazelcast.executor.impl.operations.MemberCallableTaskOperation.getId()"], ["int", "com.hazelcast.executor.impl.operations.MemberCallableTaskOperation.getFactoryId()"], ["java.lang.String", "com.hazelcast.executor.impl.operations.MemberCallableTaskOperation.getServiceName()"], ["java.lang.String", "com.hazelcast.executor.impl.operations.MemberCallableTaskOperation.getName()"], ["com.hazelcast.executor.impl.operations.CancellationOperation", "com.hazelcast.executor.impl.operations.CancellationOperation()"], ["com.hazelcast.executor.impl.operations.CancellationOperation", "com.hazelcast.executor.impl.operations.CancellationOperation(java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.executor.impl.operations.CancellationOperation.getServiceName()"], ["void", "com.hazelcast.executor.impl.operations.CancellationOperation.run()"], ["java.lang.Object", "com.hazelcast.executor.impl.operations.CancellationOperation.getResponse()"], ["java.lang.String", "com.hazelcast.executor.impl.operations.CancellationOperation.getName()"], ["int", "com.hazelcast.executor.impl.operations.CancellationOperation.getFactoryId()"], ["int", "com.hazelcast.executor.impl.operations.CancellationOperation.getId()"], ["com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation", "com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation()"], ["com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation", "com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.spi.CallStatus", "com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation.call()"], ["java.lang.String", "com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation.getName()"], ["java.lang.String", "com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation.getServiceName()"], ["int", "com.hazelcast.executor.impl.operations.AbstractCallableTaskOperation.getFactoryId()"], ["com.hazelcast.executor.impl.RunnableAdapter", "com.hazelcast.executor.impl.RunnableAdapter()"], ["com.hazelcast.executor.impl.RunnableAdapter", "com.hazelcast.executor.impl.RunnableAdapter(java.lang.Runnable)"], ["java.lang.Runnable", "com.hazelcast.executor.impl.RunnableAdapter.getRunnable()"], ["void", "com.hazelcast.executor.impl.RunnableAdapter.setRunnable(java.lang.Runnable)"], ["V", "com.hazelcast.executor.impl.RunnableAdapter.call()"], ["java.lang.Object", "com.hazelcast.executor.impl.RunnableAdapter.getPartitionKey()"], ["void", "com.hazelcast.executor.impl.RunnableAdapter.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.executor.impl.RunnableAdapter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.executor.impl.RunnableAdapter.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.executor.impl.RunnableAdapter.getFactoryId()"], ["int", "com.hazelcast.executor.impl.RunnableAdapter.getId()"], ["java.lang.String", "com.hazelcast.executor.impl.RunnableAdapter.toString()"], ["void", "com.hazelcast.executor.impl.ExecutorServiceProxy$1.handleException(java.lang.Throwable)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.executor.impl.ExecutorDataSerializerHook$1.create(int)"], ["com.hazelcast.executor.impl.DistributedExecutorService", "com.hazelcast.executor.impl.DistributedExecutorService()"], ["void", "com.hazelcast.executor.impl.DistributedExecutorService.init(com.hazelcast.spi.NodeEngine, java.util.Properties)"], ["void", "com.hazelcast.executor.impl.DistributedExecutorService.reset()"], ["void", "com.hazelcast.executor.impl.DistributedExecutorService.shutdown(boolean)"], ["void", "com.hazelcast.executor.impl.DistributedExecutorService.execute(java.lang.String, java.lang.String, java.util.concurrent.Callable, com.hazelcast.spi.Operation)"], ["boolean", "com.hazelcast.executor.impl.DistributedExecutorService.cancel(java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.executor.impl.DistributedExecutorService.getName(java.lang.String)"], ["void", "com.hazelcast.executor.impl.DistributedExecutorService.shutdownExecutor(java.lang.String)"], ["boolean", "com.hazelcast.executor.impl.DistributedExecutorService.isShutdown(java.lang.String)"], ["com.hazelcast.executor.impl.ExecutorServiceProxy", "com.hazelcast.executor.impl.DistributedExecutorService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.executor.impl.DistributedExecutorService.destroyDistributedObject(java.lang.String)"], ["void", "com.hazelcast.executor.impl.DistributedExecutorService.populate(com.hazelcast.spi.LiveOperations)"], ["java.util.Map<java.lang.String, com.hazelcast.monitor.LocalExecutorStats>", "com.hazelcast.executor.impl.DistributedExecutorService.getStats()"], ["java.lang.String", "com.hazelcast.executor.impl.DistributedExecutorService.getQuorumName(java.lang.String)"], ["com.hazelcast.core.DistributedObject", "com.hazelcast.executor.impl.DistributedExecutorService.createDistributedObject(java.lang.String)"], ["void", "com.hazelcast.executor.impl.ExecutionCallbackAdapterFactory$InnerExecutionCallback.onResponse(V)"], ["void", "com.hazelcast.executor.impl.ExecutionCallbackAdapterFactory$InnerExecutionCallback.onFailure(java.lang.Throwable)"], ["boolean", "com.hazelcast.executor.impl.CancellableDelegatingFuture.cancel(boolean)"], ["java.lang.Object", "com.hazelcast.executor.impl.DistributedExecutorService$2.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.executor.impl.DistributedExecutorService$2.createNew(java.lang.Object)"], ["com.hazelcast.executor.impl.ExecutorDataSerializerHook", "com.hazelcast.executor.impl.ExecutorDataSerializerHook()"], ["int", "com.hazelcast.executor.impl.ExecutorDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.executor.impl.ExecutorDataSerializerHook.createFactory()"], ["void", "com.hazelcast.executor.impl.DistributedExecutorService$CallableProcessor.run()"], ["com.hazelcast.monitor.impl.LocalExecutorStatsImpl", "com.hazelcast.executor.impl.DistributedExecutorService$1.createNew(java.lang.String)"], ["java.lang.Object", "com.hazelcast.executor.impl.DistributedExecutorService$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$13.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$13.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$53.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$53.createNew(java.lang.Object)"], ["com.hazelcast.config.WanAcknowledgeType[]", "com.hazelcast.config.WanAcknowledgeType.values()"], ["com.hazelcast.config.WanAcknowledgeType", "com.hazelcast.config.WanAcknowledgeType.valueOf(java.lang.String)"], ["int", "com.hazelcast.config.WanAcknowledgeType.getId()"], ["com.hazelcast.config.WanAcknowledgeType", "com.hazelcast.config.WanAcknowledgeType.getById(int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$26.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$26.createNew(java.lang.Object)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MergePolicyConfig$MergePolicyConfigReadOnly.setPolicy(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MergePolicyConfig$MergePolicyConfigReadOnly.setBatchSize(int)"], ["com.hazelcast.config.MultiMapConfigReadOnly", "com.hazelcast.config.MultiMapConfigReadOnly(com.hazelcast.config.MultiMapConfig)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setValueCollectionType(java.lang.String)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setValueCollectionType(com.hazelcast.config.MultiMapConfig$ValueCollectionType)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.addEntryListenerConfig(com.hazelcast.config.EntryListenerConfig)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setEntryListenerConfigs(java.util.List<com.hazelcast.config.EntryListenerConfig>)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setBinary(boolean)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setSyncBackupCount(int)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$22.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$22.createNew(java.lang.Object)"], ["com.hazelcast.config.MemberAddressProviderConfig", "com.hazelcast.config.MemberAddressProviderConfig()"], ["boolean", "com.hazelcast.config.MemberAddressProviderConfig.isEnabled()"], ["com.hazelcast.config.MemberAddressProviderConfig", "com.hazelcast.config.MemberAddressProviderConfig.setEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.MemberAddressProviderConfig.getClassName()"], ["com.hazelcast.config.MemberAddressProviderConfig", "com.hazelcast.config.MemberAddressProviderConfig.setClassName(java.lang.String)"], ["java.util.Properties", "com.hazelcast.config.MemberAddressProviderConfig.getProperties()"], ["com.hazelcast.config.MemberAddressProviderConfig", "com.hazelcast.config.MemberAddressProviderConfig.setProperties(java.util.Properties)"], ["com.hazelcast.spi.MemberAddressProvider", "com.hazelcast.config.MemberAddressProviderConfig.getImplementation()"], ["com.hazelcast.config.MemberAddressProviderConfig", "com.hazelcast.config.MemberAddressProviderConfig.setImplementation(com.hazelcast.spi.MemberAddressProvider)"], ["java.lang.String", "com.hazelcast.config.MemberAddressProviderConfig.toString()"], ["boolean", "com.hazelcast.config.MemberAddressProviderConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MemberAddressProviderConfig.hashCode()"], ["com.hazelcast.config.CredentialsFactoryConfig", "com.hazelcast.config.CredentialsFactoryConfig()"], ["com.hazelcast.config.CredentialsFactoryConfig", "com.hazelcast.config.CredentialsFactoryConfig(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CredentialsFactoryConfig.getClassName()"], ["com.hazelcast.config.CredentialsFactoryConfig", "com.hazelcast.config.CredentialsFactoryConfig.setClassName(java.lang.String)"], ["com.hazelcast.security.ICredentialsFactory", "com.hazelcast.config.CredentialsFactoryConfig.getImplementation()"], ["com.hazelcast.config.CredentialsFactoryConfig", "com.hazelcast.config.CredentialsFactoryConfig.setImplementation(com.hazelcast.security.ICredentialsFactory)"], ["java.util.Properties", "com.hazelcast.config.CredentialsFactoryConfig.getProperties()"], ["com.hazelcast.config.CredentialsFactoryConfig", "com.hazelcast.config.CredentialsFactoryConfig.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.CredentialsFactoryConfig.toString()"], ["boolean", "com.hazelcast.config.CredentialsFactoryConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CredentialsFactoryConfig.hashCode()"], ["com.hazelcast.config.MapStoreConfig$InitialLoadMode[]", "com.hazelcast.config.MapStoreConfig$InitialLoadMode.values()"], ["com.hazelcast.config.MapStoreConfig$InitialLoadMode", "com.hazelcast.config.MapStoreConfig$InitialLoadMode.valueOf(java.lang.String)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig(java.lang.String, boolean)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig(java.lang.String, boolean, int)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig(com.hazelcast.config.QuorumConfig)"], ["java.lang.String", "com.hazelcast.config.QuorumConfig.getName()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig.setName(java.lang.String)"], ["boolean", "com.hazelcast.config.QuorumConfig.isEnabled()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig.setEnabled(boolean)"], ["int", "com.hazelcast.config.QuorumConfig.getSize()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig.setSize(int)"], ["com.hazelcast.quorum.QuorumType", "com.hazelcast.config.QuorumConfig.getType()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig.setType(com.hazelcast.quorum.QuorumType)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig.setListenerConfigs(java.util.List<com.hazelcast.config.QuorumListenerConfig>)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig.addListenerConfig(com.hazelcast.config.QuorumListenerConfig)"], ["java.lang.String", "com.hazelcast.config.QuorumConfig.getQuorumFunctionClassName()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig.setQuorumFunctionClassName(java.lang.String)"], ["com.hazelcast.quorum.QuorumFunction", "com.hazelcast.config.QuorumConfig.getQuorumFunctionImplementation()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.QuorumConfig.setQuorumFunctionImplementation(com.hazelcast.quorum.QuorumFunction)"], ["java.lang.String", "com.hazelcast.config.QuorumConfig.toString()"], ["int", "com.hazelcast.config.QuorumConfig.getFactoryId()"], ["int", "com.hazelcast.config.QuorumConfig.getId()"], ["void", "com.hazelcast.config.QuorumConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.QuorumConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.config.ProbabilisticQuorumConfigBuilder", "com.hazelcast.config.QuorumConfig.newProbabilisticQuorumConfigBuilder(java.lang.String, int)"], ["com.hazelcast.config.RecentlyActiveQuorumConfigBuilder", "com.hazelcast.config.QuorumConfig.newRecentlyActiveQuorumConfigBuilder(java.lang.String, int, int)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig(com.hazelcast.config.RingbufferStoreConfig)"], ["com.hazelcast.core.RingbufferStore", "com.hazelcast.config.RingbufferStoreConfig.getStoreImplementation()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig.setStoreImplementation(com.hazelcast.core.RingbufferStore)"], ["boolean", "com.hazelcast.config.RingbufferStoreConfig.isEnabled()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig.setEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.RingbufferStoreConfig.getClassName()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig.setClassName(java.lang.String)"], ["java.util.Properties", "com.hazelcast.config.RingbufferStoreConfig.getProperties()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.RingbufferStoreConfig.getProperty(java.lang.String)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig.setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.config.RingbufferStoreConfig.getFactoryClassName()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig.setFactoryClassName(java.lang.String)"], ["com.hazelcast.core.RingbufferStoreFactory", "com.hazelcast.config.RingbufferStoreConfig.getFactoryImplementation()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig.setFactoryImplementation(com.hazelcast.core.RingbufferStoreFactory)"], ["java.lang.String", "com.hazelcast.config.RingbufferStoreConfig.toString()"], ["com.hazelcast.config.RingbufferStoreConfig$RingbufferStoreConfigReadOnly", "com.hazelcast.config.RingbufferStoreConfig.getAsReadOnly()"], ["int", "com.hazelcast.config.RingbufferStoreConfig.getFactoryId()"], ["int", "com.hazelcast.config.RingbufferStoreConfig.getId()"], ["void", "com.hazelcast.config.RingbufferStoreConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.RingbufferStoreConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.RingbufferStoreConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.RingbufferStoreConfig.hashCode()"], ["com.hazelcast.config.InMemoryXmlConfig", "com.hazelcast.config.InMemoryXmlConfig(java.lang.String)"], ["com.hazelcast.config.InMemoryXmlConfig", "com.hazelcast.config.InMemoryXmlConfig(java.lang.String, java.util.Properties)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$19.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$19.createNew(java.lang.Object)"], ["com.hazelcast.config.ProbabilisticQuorumConfigBuilder", "com.hazelcast.config.ProbabilisticQuorumConfigBuilder.withSuspicionThreshold(double)"], ["com.hazelcast.config.ProbabilisticQuorumConfigBuilder", "com.hazelcast.config.ProbabilisticQuorumConfigBuilder.withMaxSampleSize(int)"], ["com.hazelcast.config.ProbabilisticQuorumConfigBuilder", "com.hazelcast.config.ProbabilisticQuorumConfigBuilder.withMinStdDeviationMillis(long)"], ["com.hazelcast.config.ProbabilisticQuorumConfigBuilder", "com.hazelcast.config.ProbabilisticQuorumConfigBuilder.withAcceptableHeartbeatPauseMillis(long)"], ["com.hazelcast.config.ProbabilisticQuorumConfigBuilder", "com.hazelcast.config.ProbabilisticQuorumConfigBuilder.withHeartbeatIntervalMillis(long)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.ProbabilisticQuorumConfigBuilder.build()"], ["com.hazelcast.config.LegacyCacheConfig", "com.hazelcast.config.LegacyCacheConfig()"], ["com.hazelcast.config.LegacyCacheConfig", "com.hazelcast.config.LegacyCacheConfig(com.hazelcast.config.CacheConfig<K, V>)"], ["void", "com.hazelcast.config.LegacyCacheConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.LegacyCacheConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Class", "com.hazelcast.config.LegacyCacheConfig.getClassType()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.LegacyCacheConfig.getConfigAndReset()"], ["com.hazelcast.config.InvalidConfigurationException", "com.hazelcast.config.InvalidConfigurationException(java.lang.String)"], ["com.hazelcast.config.InvalidConfigurationException", "com.hazelcast.config.InvalidConfigurationException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig$ExpiryPolicyType[]", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig$ExpiryPolicyType.values()"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig$ExpiryPolicyType", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig$ExpiryPolicyType.valueOf(java.lang.String)"], ["com.hazelcast.config.GroupConfig", "com.hazelcast.config.GroupConfig()"], ["com.hazelcast.config.GroupConfig", "com.hazelcast.config.GroupConfig(java.lang.String)"], ["com.hazelcast.config.GroupConfig", "com.hazelcast.config.GroupConfig(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.config.GroupConfig.getName()"], ["com.hazelcast.config.GroupConfig", "com.hazelcast.config.GroupConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.GroupConfig.getPassword()"], ["com.hazelcast.config.GroupConfig", "com.hazelcast.config.GroupConfig.setPassword(java.lang.String)"], ["int", "com.hazelcast.config.GroupConfig.hashCode()"], ["boolean", "com.hazelcast.config.GroupConfig.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.config.GroupConfig.toString()"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.config.AtomicReferenceConfig(java.lang.String)"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.config.AtomicReferenceConfig(com.hazelcast.config.AtomicReferenceConfig)"], ["java.lang.Class", "com.hazelcast.config.AtomicReferenceConfig.getProvidedMergeTypes()"], ["int", "com.hazelcast.config.AtomicReferenceConfig.getId()"], ["void", "com.hazelcast.config.AtomicReferenceConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.AtomicReferenceConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.AtomicReferenceConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.AtomicReferenceConfig.hashCode()"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.config.AtomicReferenceConfig.getAsReadOnly()"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicReferenceConfig.getAsReadOnly()"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig()"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig(java.lang.String, int, java.lang.String, boolean)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig(java.lang.String)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig(com.hazelcast.config.PNCounterConfig)"], ["java.lang.String", "com.hazelcast.config.PNCounterConfig.getName()"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig.setName(java.lang.String)"], ["boolean", "com.hazelcast.config.PNCounterConfig.isStatisticsEnabled()"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig.setStatisticsEnabled(boolean)"], ["int", "com.hazelcast.config.PNCounterConfig.getReplicaCount()"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig.setReplicaCount(int)"], ["java.lang.String", "com.hazelcast.config.PNCounterConfig.getQuorumName()"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig.setQuorumName(java.lang.String)"], ["int", "com.hazelcast.config.PNCounterConfig.getFactoryId()"], ["int", "com.hazelcast.config.PNCounterConfig.getId()"], ["void", "com.hazelcast.config.PNCounterConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.PNCounterConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.PNCounterConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.PNCounterConfig.hashCode()"], ["com.hazelcast.config.AbstractConfigBuilder", "com.hazelcast.config.AbstractConfigBuilder()"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig()"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig(java.lang.String)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig(java.lang.String, int, int, int)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig(java.lang.String, int, int, int, java.lang.String)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)"], ["java.lang.String", "com.hazelcast.config.DurableExecutorConfig.getName()"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig.setName(java.lang.String)"], ["int", "com.hazelcast.config.DurableExecutorConfig.getPoolSize()"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig.setPoolSize(int)"], ["int", "com.hazelcast.config.DurableExecutorConfig.getDurability()"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig.setDurability(int)"], ["int", "com.hazelcast.config.DurableExecutorConfig.getCapacity()"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig.setCapacity(int)"], ["java.lang.String", "com.hazelcast.config.DurableExecutorConfig.getQuorumName()"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.DurableExecutorConfig.toString()"], ["int", "com.hazelcast.config.DurableExecutorConfig.getFactoryId()"], ["int", "com.hazelcast.config.DurableExecutorConfig.getId()"], ["void", "com.hazelcast.config.DurableExecutorConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.DurableExecutorConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.DurableExecutorConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.DurableExecutorConfig.hashCode()"], ["java.lang.Comparable", "com.hazelcast.config.properties.PropertyTypeConverter$6.convert(java.lang.Comparable)"], ["com.hazelcast.config.properties.PropertyTypeConverter[]", "com.hazelcast.config.properties.PropertyTypeConverter.values()"], ["com.hazelcast.config.properties.PropertyTypeConverter", "com.hazelcast.config.properties.PropertyTypeConverter.valueOf(java.lang.String)"], ["com.hazelcast.config.properties.SimplePropertyDefinition", "com.hazelcast.config.properties.SimplePropertyDefinition(java.lang.String, com.hazelcast.core.TypeConverter)"], ["com.hazelcast.config.properties.SimplePropertyDefinition", "com.hazelcast.config.properties.SimplePropertyDefinition(java.lang.String, boolean, com.hazelcast.core.TypeConverter)"], ["com.hazelcast.config.properties.SimplePropertyDefinition", "com.hazelcast.config.properties.SimplePropertyDefinition(java.lang.String, boolean, com.hazelcast.core.TypeConverter, com.hazelcast.config.properties.ValueValidator)"], ["com.hazelcast.core.TypeConverter", "com.hazelcast.config.properties.SimplePropertyDefinition.typeConverter()"], ["java.lang.String", "com.hazelcast.config.properties.SimplePropertyDefinition.key()"], ["com.hazelcast.config.properties.ValueValidator", "com.hazelcast.config.properties.SimplePropertyDefinition.validator()"], ["boolean", "com.hazelcast.config.properties.SimplePropertyDefinition.optional()"], ["java.lang.Comparable", "com.hazelcast.config.properties.PropertyTypeConverter$1.convert(java.lang.Comparable)"], ["java.lang.Comparable", "com.hazelcast.config.properties.PropertyTypeConverter$7.convert(java.lang.Comparable)"], ["java.lang.Comparable", "com.hazelcast.config.properties.PropertyTypeConverter$5.convert(java.lang.Comparable)"], ["java.lang.Comparable", "com.hazelcast.config.properties.PropertyTypeConverter$4.convert(java.lang.Comparable)"], ["java.lang.Comparable", "com.hazelcast.config.properties.PropertyTypeConverter$3.convert(java.lang.Comparable)"], ["java.lang.Comparable", "com.hazelcast.config.properties.PropertyTypeConverter$2.convert(java.lang.Comparable)"], ["com.hazelcast.config.properties.ValidationException", "com.hazelcast.config.properties.ValidationException(java.lang.String)"], ["com.hazelcast.config.properties.ValidationException", "com.hazelcast.config.properties.ValidationException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.config.properties.ValidationException", "com.hazelcast.config.properties.ValidationException(java.lang.Throwable)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig()"], ["com.hazelcast.config.GlobalSerializerConfig", "com.hazelcast.config.SerializationConfig.getGlobalSerializerConfig()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setGlobalSerializerConfig(com.hazelcast.config.GlobalSerializerConfig)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.addSerializerConfig(com.hazelcast.config.SerializerConfig)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setSerializerConfigs(java.util.Collection<com.hazelcast.config.SerializerConfig>)"], ["int", "com.hazelcast.config.SerializationConfig.getPortableVersion()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setPortableVersion(int)"], ["java.util.Map<java.lang.Integer, java.lang.String>", "com.hazelcast.config.SerializationConfig.getDataSerializableFactoryClasses()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setDataSerializableFactoryClasses(java.util.Map<java.lang.Integer, java.lang.String>)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.addDataSerializableFactoryClass(int, java.lang.String)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.addDataSerializableFactoryClass(int, java.lang.Class<? extends com.hazelcast.nio.serialization.DataSerializableFactory>)"], ["java.util.Map<java.lang.Integer, com.hazelcast.nio.serialization.DataSerializableFactory>", "com.hazelcast.config.SerializationConfig.getDataSerializableFactories()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setDataSerializableFactories(java.util.Map<java.lang.Integer, com.hazelcast.nio.serialization.DataSerializableFactory>)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.addDataSerializableFactory(int, com.hazelcast.nio.serialization.DataSerializableFactory)"], ["java.util.Map<java.lang.Integer, java.lang.String>", "com.hazelcast.config.SerializationConfig.getPortableFactoryClasses()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setPortableFactoryClasses(java.util.Map<java.lang.Integer, java.lang.String>)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.addPortableFactoryClass(int, java.lang.Class<? extends com.hazelcast.nio.serialization.PortableFactory>)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.addPortableFactoryClass(int, java.lang.String)"], ["java.util.Map<java.lang.Integer, com.hazelcast.nio.serialization.PortableFactory>", "com.hazelcast.config.SerializationConfig.getPortableFactories()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setPortableFactories(java.util.Map<java.lang.Integer, com.hazelcast.nio.serialization.PortableFactory>)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.addPortableFactory(int, com.hazelcast.nio.serialization.PortableFactory)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.addClassDefinition(com.hazelcast.nio.serialization.ClassDefinition)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setClassDefinitions(java.util.Set<com.hazelcast.nio.serialization.ClassDefinition>)"], ["boolean", "com.hazelcast.config.SerializationConfig.isCheckClassDefErrors()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setCheckClassDefErrors(boolean)"], ["boolean", "com.hazelcast.config.SerializationConfig.isUseNativeByteOrder()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setUseNativeByteOrder(boolean)"], ["java.nio.ByteOrder", "com.hazelcast.config.SerializationConfig.getByteOrder()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setByteOrder(java.nio.ByteOrder)"], ["boolean", "com.hazelcast.config.SerializationConfig.isEnableCompression()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setEnableCompression(boolean)"], ["boolean", "com.hazelcast.config.SerializationConfig.isEnableSharedObject()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setEnableSharedObject(boolean)"], ["boolean", "com.hazelcast.config.SerializationConfig.isAllowUnsafe()"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.SerializationConfig.setAllowUnsafe(boolean)"], ["java.lang.String", "com.hazelcast.config.SerializationConfig.toString()"], ["com.hazelcast.config.MapAttributeConfigReadOnly", "com.hazelcast.config.MapAttributeConfigReadOnly(com.hazelcast.config.MapAttributeConfig)"], ["com.hazelcast.config.MapAttributeConfig", "com.hazelcast.config.MapAttributeConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.MapAttributeConfig", "com.hazelcast.config.MapAttributeConfigReadOnly.setExtractor(java.lang.String)"], ["com.hazelcast.config.MaxSizeConfig$MaxSizePolicy[]", "com.hazelcast.config.MaxSizeConfig$MaxSizePolicy.values()"], ["com.hazelcast.config.MaxSizeConfig$MaxSizePolicy", "com.hazelcast.config.MaxSizeConfig$MaxSizePolicy.valueOf(java.lang.String)"], ["com.hazelcast.config.PartitioningStrategyConfigReadOnly", "com.hazelcast.config.PartitioningStrategyConfigReadOnly(com.hazelcast.config.PartitioningStrategyConfig)"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfigReadOnly.setPartitioningStrategyClass(java.lang.String)"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfigReadOnly.setPartitionStrategy(com.hazelcast.core.PartitioningStrategy)"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfigReadOnly.setPartitioningStrategy(com.hazelcast.core.PartitioningStrategy)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.CountDownLatchConfig$CountDownLatchConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.CountDownLatchConfig$CountDownLatchConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.LoginModuleConfig$LoginModuleUsage[]", "com.hazelcast.config.LoginModuleConfig$LoginModuleUsage.values()"], ["com.hazelcast.config.LoginModuleConfig$LoginModuleUsage", "com.hazelcast.config.LoginModuleConfig$LoginModuleUsage.valueOf(java.lang.String)"], ["com.hazelcast.config.LoginModuleConfig$LoginModuleUsage", "com.hazelcast.config.LoginModuleConfig$LoginModuleUsage.get(java.lang.String)"], ["com.hazelcast.config.JavaSerializationFilterConfig", "com.hazelcast.config.JavaSerializationFilterConfig.getInstance(com.hazelcast.spi.properties.HazelcastProperties)"], ["com.hazelcast.config.ClassFilter", "com.hazelcast.config.JavaSerializationFilterConfig.getBlacklist()"], ["com.hazelcast.config.ClassFilter", "com.hazelcast.config.JavaSerializationFilterConfig.getWhitelist()"], ["int", "com.hazelcast.config.JavaSerializationFilterConfig.hashCode()"], ["boolean", "com.hazelcast.config.JavaSerializationFilterConfig.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.config.JavaSerializationFilterConfig.toString()"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfig()"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfig(com.hazelcast.config.SemaphoreConfig)"], ["com.hazelcast.config.SemaphoreConfigReadOnly", "com.hazelcast.config.SemaphoreConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.SemaphoreConfig.getName()"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfig.setName(java.lang.String)"], ["int", "com.hazelcast.config.SemaphoreConfig.getInitialPermits()"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfig.setInitialPermits(int)"], ["int", "com.hazelcast.config.SemaphoreConfig.getBackupCount()"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfig.setBackupCount(int)"], ["int", "com.hazelcast.config.SemaphoreConfig.getAsyncBackupCount()"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfig.setAsyncBackupCount(int)"], ["int", "com.hazelcast.config.SemaphoreConfig.getTotalBackupCount()"], ["java.lang.String", "com.hazelcast.config.SemaphoreConfig.getQuorumName()"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.SemaphoreConfig.toString()"], ["int", "com.hazelcast.config.SemaphoreConfig.getFactoryId()"], ["int", "com.hazelcast.config.SemaphoreConfig.getId()"], ["void", "com.hazelcast.config.SemaphoreConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.SemaphoreConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.SemaphoreConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.SemaphoreConfig.hashCode()"], ["com.hazelcast.config.CachePartitionLostListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfig()"], ["com.hazelcast.config.CachePartitionLostListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfig(java.lang.String)"], ["com.hazelcast.config.CachePartitionLostListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfig(com.hazelcast.cache.impl.event.CachePartitionLostListener)"], ["com.hazelcast.config.CachePartitionLostListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfig(com.hazelcast.config.CachePartitionLostListenerConfig)"], ["com.hazelcast.config.CachePartitionLostListenerConfigReadOnly", "com.hazelcast.config.CachePartitionLostListenerConfig.getAsReadOnly()"], ["com.hazelcast.cache.impl.event.CachePartitionLostListener", "com.hazelcast.config.CachePartitionLostListenerConfig.getImplementation()"], ["com.hazelcast.config.CachePartitionLostListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfig.setImplementation(com.hazelcast.cache.impl.event.CachePartitionLostListener)"], ["boolean", "com.hazelcast.config.CachePartitionLostListenerConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CachePartitionLostListenerConfig.hashCode()"], ["int", "com.hazelcast.config.CachePartitionLostListenerConfig.getId()"], ["java.util.EventListener", "com.hazelcast.config.CachePartitionLostListenerConfig.getImplementation()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfig.getAsReadOnly()"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfig()"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfig(java.lang.String, boolean, boolean)"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfig(com.hazelcast.core.EntryListener, boolean, boolean)"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfig(com.hazelcast.map.listener.MapListener, boolean, boolean)"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfig(com.hazelcast.config.EntryListenerConfig)"], ["com.hazelcast.config.EntryListenerConfigReadOnly", "com.hazelcast.config.EntryListenerConfig.getAsReadOnly()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.EntryListenerConfig.setImplementation(java.util.EventListener)"], ["com.hazelcast.core.EntryListener", "com.hazelcast.config.EntryListenerConfig.getImplementation()"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfig.setImplementation(com.hazelcast.core.EntryListener)"], ["boolean", "com.hazelcast.config.EntryListenerConfig.isLocal()"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfig.setLocal(boolean)"], ["boolean", "com.hazelcast.config.EntryListenerConfig.isIncludeValue()"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfig.setIncludeValue(boolean)"], ["java.lang.String", "com.hazelcast.config.EntryListenerConfig.toString()"], ["boolean", "com.hazelcast.config.EntryListenerConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.EntryListenerConfig.hashCode()"], ["int", "com.hazelcast.config.EntryListenerConfig.getId()"], ["void", "com.hazelcast.config.EntryListenerConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.EntryListenerConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.util.EventListener", "com.hazelcast.config.EntryListenerConfig.getImplementation()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.EntryListenerConfig.getAsReadOnly()"], ["com.hazelcast.config.EntryListenerConfigReadOnly", "com.hazelcast.config.EntryListenerConfigReadOnly(com.hazelcast.config.EntryListenerConfig)"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfigReadOnly.setImplementation(com.hazelcast.core.EntryListener)"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfigReadOnly.setLocal(boolean)"], ["com.hazelcast.config.EntryListenerConfig", "com.hazelcast.config.EntryListenerConfigReadOnly.setIncludeValue(boolean)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.EntryListenerConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.EntryListenerConfigReadOnly.setImplementation(java.util.EventListener)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$21.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$21.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$25.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$25.createNew(java.lang.Object)"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MaxSizeConfig()"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MaxSizeConfig(int, com.hazelcast.config.MaxSizeConfig$MaxSizePolicy)"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MaxSizeConfig(com.hazelcast.config.MaxSizeConfig)"], ["com.hazelcast.config.MaxSizeConfigReadOnly", "com.hazelcast.config.MaxSizeConfig.getAsReadOnly()"], ["int", "com.hazelcast.config.MaxSizeConfig.getSize()"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MaxSizeConfig.setSize(int)"], ["com.hazelcast.config.MaxSizeConfig$MaxSizePolicy", "com.hazelcast.config.MaxSizeConfig.getMaxSizePolicy()"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MaxSizeConfig.setMaxSizePolicy(com.hazelcast.config.MaxSizeConfig$MaxSizePolicy)"], ["void", "com.hazelcast.config.MaxSizeConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.MaxSizeConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.config.MaxSizeConfig.toString()"], ["boolean", "com.hazelcast.config.MaxSizeConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MaxSizeConfig.hashCode()"], ["boolean", "com.hazelcast.config.AbstractXmlConfigHelper$IterableNodeList$1.hasNext()"], ["org.w3c.dom.Node", "com.hazelcast.config.AbstractXmlConfigHelper$IterableNodeList$1.next()"], ["void", "com.hazelcast.config.AbstractXmlConfigHelper$IterableNodeList$1.remove()"], ["java.lang.Object", "com.hazelcast.config.AbstractXmlConfigHelper$IterableNodeList$1.next()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$51.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$51.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$54.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$54.createNew(java.lang.Object)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.config.AtomicLongConfig(java.lang.String)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.config.AtomicLongConfig(com.hazelcast.config.AtomicLongConfig)"], ["java.lang.Class", "com.hazelcast.config.AtomicLongConfig.getProvidedMergeTypes()"], ["int", "com.hazelcast.config.AtomicLongConfig.getId()"], ["void", "com.hazelcast.config.AtomicLongConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.AtomicLongConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.AtomicLongConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.AtomicLongConfig.hashCode()"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.config.AtomicLongConfig.getAsReadOnly()"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicLongConfig.getAsReadOnly()"], ["com.hazelcast.config.ClasspathXmlConfig", "com.hazelcast.config.ClasspathXmlConfig(java.lang.String)"], ["com.hazelcast.config.ClasspathXmlConfig", "com.hazelcast.config.ClasspathXmlConfig(java.lang.String, java.util.Properties)"], ["com.hazelcast.config.ClasspathXmlConfig", "com.hazelcast.config.ClasspathXmlConfig(java.lang.ClassLoader, java.lang.String)"], ["com.hazelcast.config.ClasspathXmlConfig", "com.hazelcast.config.ClasspathXmlConfig(java.lang.ClassLoader, java.lang.String, java.util.Properties)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig(java.lang.String)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)"], ["java.lang.String", "com.hazelcast.config.ReplicatedMapConfig.getName()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setName(java.lang.String)"], ["long", "com.hazelcast.config.ReplicatedMapConfig.getReplicationDelayMillis()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setReplicationDelayMillis(long)"], ["int", "com.hazelcast.config.ReplicatedMapConfig.getConcurrencyLevel()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setConcurrencyLevel(int)"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.config.ReplicatedMapConfig.getInMemoryFormat()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["java.util.concurrent.ScheduledExecutorService", "com.hazelcast.config.ReplicatedMapConfig.getReplicatorExecutorService()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setReplicatorExecutorService(java.util.concurrent.ScheduledExecutorService)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setListenerConfigs(java.util.List<com.hazelcast.config.ListenerConfig>)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.addEntryListenerConfig(com.hazelcast.config.EntryListenerConfig)"], ["boolean", "com.hazelcast.config.ReplicatedMapConfig.isAsyncFillup()"], ["void", "com.hazelcast.config.ReplicatedMapConfig.setAsyncFillup(boolean)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.getAsReadOnly()"], ["boolean", "com.hazelcast.config.ReplicatedMapConfig.isStatisticsEnabled()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setStatisticsEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.ReplicatedMapConfig.getQuorumName()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.ReplicatedMapConfig.getMergePolicy()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setMergePolicy(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.ReplicatedMapConfig.getMergePolicyConfig()"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.Class", "com.hazelcast.config.ReplicatedMapConfig.getProvidedMergeTypes()"], ["java.lang.String", "com.hazelcast.config.ReplicatedMapConfig.toString()"], ["int", "com.hazelcast.config.ReplicatedMapConfig.getFactoryId()"], ["int", "com.hazelcast.config.ReplicatedMapConfig.getId()"], ["void", "com.hazelcast.config.ReplicatedMapConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.ReplicatedMapConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.ReplicatedMapConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.ReplicatedMapConfig.hashCode()"], ["com.hazelcast.config.DiscoveryStrategyConfig", "com.hazelcast.config.DiscoveryStrategyConfig(java.lang.String)"], ["com.hazelcast.config.DiscoveryStrategyConfig", "com.hazelcast.config.DiscoveryStrategyConfig(java.lang.String, java.util.Map<java.lang.String, java.lang.Comparable>)"], ["com.hazelcast.config.DiscoveryStrategyConfig", "com.hazelcast.config.DiscoveryStrategyConfig(com.hazelcast.spi.discovery.DiscoveryStrategyFactory)"], ["com.hazelcast.config.DiscoveryStrategyConfig", "com.hazelcast.config.DiscoveryStrategyConfig(com.hazelcast.spi.discovery.DiscoveryStrategyFactory, java.util.Map<java.lang.String, java.lang.Comparable>)"], ["java.lang.String", "com.hazelcast.config.DiscoveryStrategyConfig.getClassName()"], ["com.hazelcast.spi.discovery.DiscoveryStrategyFactory", "com.hazelcast.config.DiscoveryStrategyConfig.getDiscoveryStrategyFactory()"], ["void", "com.hazelcast.config.DiscoveryStrategyConfig.addProperty(java.lang.String, java.lang.Comparable)"], ["void", "com.hazelcast.config.DiscoveryStrategyConfig.removeProperty(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Comparable>", "com.hazelcast.config.DiscoveryStrategyConfig.getProperties()"], ["java.lang.String", "com.hazelcast.config.DiscoveryStrategyConfig.toString()"], ["com.hazelcast.config.ConfigXmlGenerator", "com.hazelcast.config.ConfigXmlGenerator()"], ["com.hazelcast.config.ConfigXmlGenerator", "com.hazelcast.config.ConfigXmlGenerator(boolean)"], ["com.hazelcast.config.ConfigXmlGenerator", "com.hazelcast.config.ConfigXmlGenerator(boolean, boolean)"], ["java.lang.String", "com.hazelcast.config.ConfigXmlGenerator.generate(com.hazelcast.config.Config)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$4.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$4.createNew(java.lang.Object)"], ["com.hazelcast.config.InMemoryFormat[]", "com.hazelcast.config.InMemoryFormat.values()"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.config.InMemoryFormat.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$24.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$24.createNew(java.lang.Object)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig$EventJournalConfigReadOnly.setCapacity(int)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig$EventJournalConfigReadOnly.setTimeToLiveSeconds(int)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig$EventJournalConfigReadOnly.setEnabled(boolean)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig$EventJournalConfigReadOnly.setMapName(java.lang.String)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig$EventJournalConfigReadOnly.setCacheName(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$3.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$3.createNew(java.lang.Object)"], ["com.hazelcast.config.matcher.WildcardConfigPatternMatcher", "com.hazelcast.config.matcher.WildcardConfigPatternMatcher()"], ["java.lang.String", "com.hazelcast.config.matcher.WildcardConfigPatternMatcher.matches(java.lang.Iterable<java.lang.String>, java.lang.String)"], ["boolean", "com.hazelcast.config.matcher.WildcardConfigPatternMatcher.matches(java.lang.String, java.lang.String)"], ["com.hazelcast.config.matcher.LegacyWildcardConfigPatternMatcher", "com.hazelcast.config.matcher.LegacyWildcardConfigPatternMatcher()"], ["java.lang.String", "com.hazelcast.config.matcher.LegacyWildcardConfigPatternMatcher.matches(java.lang.Iterable<java.lang.String>, java.lang.String)"], ["boolean", "com.hazelcast.config.matcher.LegacyWildcardConfigPatternMatcher.matches(java.lang.String, java.lang.String)"], ["com.hazelcast.config.matcher.LegacyMatchingPointConfigPatternMatcher", "com.hazelcast.config.matcher.LegacyMatchingPointConfigPatternMatcher()"], ["java.lang.String", "com.hazelcast.config.matcher.LegacyMatchingPointConfigPatternMatcher.matches(java.lang.Iterable<java.lang.String>, java.lang.String)"], ["com.hazelcast.config.matcher.RegexConfigPatternMatcher", "com.hazelcast.config.matcher.RegexConfigPatternMatcher()"], ["com.hazelcast.config.matcher.RegexConfigPatternMatcher", "com.hazelcast.config.matcher.RegexConfigPatternMatcher(int)"], ["java.lang.String", "com.hazelcast.config.matcher.RegexConfigPatternMatcher.matches(java.lang.Iterable<java.lang.String>, java.lang.String)"], ["com.hazelcast.config.matcher.MatchingPointConfigPatternMatcher", "com.hazelcast.config.matcher.MatchingPointConfigPatternMatcher()"], ["java.lang.String", "com.hazelcast.config.matcher.MatchingPointConfigPatternMatcher.matches(java.lang.Iterable<java.lang.String>, java.lang.String)"], ["com.hazelcast.config.TcpIpConfig", "com.hazelcast.config.TcpIpConfig()"], ["int", "com.hazelcast.config.TcpIpConfig.getConnectionTimeoutSeconds()"], ["com.hazelcast.config.TcpIpConfig", "com.hazelcast.config.TcpIpConfig.setConnectionTimeoutSeconds(int)"], ["boolean", "com.hazelcast.config.TcpIpConfig.isEnabled()"], ["com.hazelcast.config.TcpIpConfig", "com.hazelcast.config.TcpIpConfig.setEnabled(boolean)"], ["com.hazelcast.config.TcpIpConfig", "com.hazelcast.config.TcpIpConfig.setMembers(java.util.List<java.lang.String>)"], ["com.hazelcast.config.TcpIpConfig", "com.hazelcast.config.TcpIpConfig.addMember(java.lang.String)"], ["com.hazelcast.config.TcpIpConfig", "com.hazelcast.config.TcpIpConfig.clear()"], ["java.lang.String", "com.hazelcast.config.TcpIpConfig.getRequiredMember()"], ["com.hazelcast.config.TcpIpConfig", "com.hazelcast.config.TcpIpConfig.setRequiredMember(java.lang.String)"], ["boolean", "com.hazelcast.config.TcpIpConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.TcpIpConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.TcpIpConfig.toString()"], ["com.hazelcast.config.WanReplicationRefReadOnly", "com.hazelcast.config.WanReplicationRefReadOnly(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRefReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRefReadOnly.setMergePolicy(java.lang.String)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRefReadOnly.setFilters(java.util.List<java.lang.String>)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRefReadOnly.addFilter(java.lang.String)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRefReadOnly.setRepublishingEnabled(boolean)"], ["com.hazelcast.config.ExecutorConfigReadOnly", "com.hazelcast.config.ExecutorConfigReadOnly(com.hazelcast.config.ExecutorConfig)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfigReadOnly.setPoolSize(int)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfigReadOnly.setQueueCapacity(int)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.MapIndexConfig", "com.hazelcast.config.MapIndexConfig()"], ["com.hazelcast.config.MapIndexConfig", "com.hazelcast.config.MapIndexConfig(java.lang.String, boolean)"], ["com.hazelcast.config.MapIndexConfig", "com.hazelcast.config.MapIndexConfig(com.hazelcast.config.MapIndexConfig)"], ["com.hazelcast.config.MapIndexConfigReadOnly", "com.hazelcast.config.MapIndexConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.MapIndexConfig.getAttribute()"], ["com.hazelcast.config.MapIndexConfig", "com.hazelcast.config.MapIndexConfig.setAttribute(java.lang.String)"], ["boolean", "com.hazelcast.config.MapIndexConfig.isOrdered()"], ["com.hazelcast.config.MapIndexConfig", "com.hazelcast.config.MapIndexConfig.setOrdered(boolean)"], ["java.lang.String", "com.hazelcast.config.MapIndexConfig.toString()"], ["java.lang.String", "com.hazelcast.config.MapIndexConfig.validateIndexAttribute(java.lang.String)"], ["int", "com.hazelcast.config.MapIndexConfig.getFactoryId()"], ["int", "com.hazelcast.config.MapIndexConfig.getId()"], ["void", "com.hazelcast.config.MapIndexConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.MapIndexConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.MapIndexConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MapIndexConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.AbstractBasicConfig.getName()"], ["T", "com.hazelcast.config.AbstractBasicConfig.setName(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.AbstractBasicConfig.getMergePolicyConfig()"], ["T", "com.hazelcast.config.AbstractBasicConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.String", "com.hazelcast.config.AbstractBasicConfig.getQuorumName()"], ["T", "com.hazelcast.config.AbstractBasicConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AbstractBasicConfig.toString()"], ["int", "com.hazelcast.config.AbstractBasicConfig.getFactoryId()"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfig()"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfig(java.lang.String)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfig(com.hazelcast.config.ListConfig)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfig.getAsReadOnly()"], ["int", "com.hazelcast.config.ListConfig.getId()"], ["java.lang.String", "com.hazelcast.config.ListConfig.toString()"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfig.getAsReadOnly()"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.config.SymmetricEncryptionConfig()"], ["boolean", "com.hazelcast.config.SymmetricEncryptionConfig.isEnabled()"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.config.SymmetricEncryptionConfig.setEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.SymmetricEncryptionConfig.getAlgorithm()"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.config.SymmetricEncryptionConfig.setAlgorithm(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.SymmetricEncryptionConfig.getPassword()"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.config.SymmetricEncryptionConfig.setPassword(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.SymmetricEncryptionConfig.getSalt()"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.config.SymmetricEncryptionConfig.setSalt(java.lang.String)"], ["int", "com.hazelcast.config.SymmetricEncryptionConfig.getIterationCount()"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.config.SymmetricEncryptionConfig.setIterationCount(int)"], ["byte[]", "com.hazelcast.config.SymmetricEncryptionConfig.getKey()"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.config.SymmetricEncryptionConfig.setKey(byte[])"], ["java.lang.String", "com.hazelcast.config.SymmetricEncryptionConfig.toString()"], ["com.hazelcast.config.GlobalSerializerConfig", "com.hazelcast.config.GlobalSerializerConfig()"], ["java.lang.String", "com.hazelcast.config.GlobalSerializerConfig.getClassName()"], ["com.hazelcast.config.GlobalSerializerConfig", "com.hazelcast.config.GlobalSerializerConfig.setClassName(java.lang.String)"], ["com.hazelcast.nio.serialization.Serializer", "com.hazelcast.config.GlobalSerializerConfig.getImplementation()"], ["com.hazelcast.config.GlobalSerializerConfig", "com.hazelcast.config.GlobalSerializerConfig.setImplementation(com.hazelcast.nio.serialization.Serializer)"], ["boolean", "com.hazelcast.config.GlobalSerializerConfig.isOverrideJavaSerialization()"], ["com.hazelcast.config.GlobalSerializerConfig", "com.hazelcast.config.GlobalSerializerConfig.setOverrideJavaSerialization(boolean)"], ["boolean", "com.hazelcast.config.GlobalSerializerConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.GlobalSerializerConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.GlobalSerializerConfig.toString()"], ["java.lang.String", "com.hazelcast.config.AbstractConfigBuilder$1.getNamespaceURI(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AbstractConfigBuilder$1.getPrefix(java.lang.String)"], ["java.util.Iterator", "com.hazelcast.config.AbstractConfigBuilder$1.getPrefixes(java.lang.String)"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfig()"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfig(java.lang.String)"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfig(com.hazelcast.config.PredicateConfig)"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfig(com.hazelcast.query.Predicate)"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.PredicateConfig.getClassName()"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfig.setClassName(java.lang.String)"], ["com.hazelcast.query.Predicate", "com.hazelcast.config.PredicateConfig.getImplementation()"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfig.setImplementation(com.hazelcast.query.Predicate)"], ["java.lang.String", "com.hazelcast.config.PredicateConfig.getSql()"], ["void", "com.hazelcast.config.PredicateConfig.setSql(java.lang.String)"], ["boolean", "com.hazelcast.config.PredicateConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.PredicateConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.PredicateConfig.toString()"], ["int", "com.hazelcast.config.PredicateConfig.getFactoryId()"], ["int", "com.hazelcast.config.PredicateConfig.getId()"], ["void", "com.hazelcast.config.PredicateConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.PredicateConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig()"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig(com.hazelcast.config.NearCachePreloaderConfig)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig(java.lang.String)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig(boolean, java.lang.String)"], ["boolean", "com.hazelcast.config.NearCachePreloaderConfig.isEnabled()"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig.setEnabled(boolean)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig.setDirectory(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.NearCachePreloaderConfig.getDirectory()"], ["int", "com.hazelcast.config.NearCachePreloaderConfig.getStoreInitialDelaySeconds()"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig.setStoreInitialDelaySeconds(int)"], ["int", "com.hazelcast.config.NearCachePreloaderConfig.getStoreIntervalSeconds()"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig.setStoreIntervalSeconds(int)"], ["int", "com.hazelcast.config.NearCachePreloaderConfig.getFactoryId()"], ["int", "com.hazelcast.config.NearCachePreloaderConfig.getId()"], ["void", "com.hazelcast.config.NearCachePreloaderConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.NearCachePreloaderConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.config.NearCachePreloaderConfig.toString()"], ["boolean", "com.hazelcast.config.NearCachePreloaderConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.NearCachePreloaderConfig.hashCode()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfig(java.lang.String)"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfig(com.hazelcast.config.FlakeIdGeneratorConfig)"], ["com.hazelcast.config.FlakeIdGeneratorConfigReadOnly", "com.hazelcast.config.FlakeIdGeneratorConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.FlakeIdGeneratorConfig.getName()"], ["void", "com.hazelcast.config.FlakeIdGeneratorConfig.setName(java.lang.String)"], ["int", "com.hazelcast.config.FlakeIdGeneratorConfig.getPrefetchCount()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfig.setPrefetchCount(int)"], ["long", "com.hazelcast.config.FlakeIdGeneratorConfig.getPrefetchValidityMillis()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfig.setPrefetchValidityMillis(long)"], ["long", "com.hazelcast.config.FlakeIdGeneratorConfig.getIdOffset()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfig.setIdOffset(long)"], ["long", "com.hazelcast.config.FlakeIdGeneratorConfig.getNodeIdOffset()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfig.setNodeIdOffset(long)"], ["boolean", "com.hazelcast.config.FlakeIdGeneratorConfig.isStatisticsEnabled()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfig.setStatisticsEnabled(boolean)"], ["boolean", "com.hazelcast.config.FlakeIdGeneratorConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.FlakeIdGeneratorConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.FlakeIdGeneratorConfig.toString()"], ["int", "com.hazelcast.config.FlakeIdGeneratorConfig.getFactoryId()"], ["int", "com.hazelcast.config.FlakeIdGeneratorConfig.getId()"], ["void", "com.hazelcast.config.FlakeIdGeneratorConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.FlakeIdGeneratorConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfig()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfig(java.lang.String)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfig(com.hazelcast.config.ListenerConfig)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfig(java.util.EventListener)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.ListenerConfig.getClassName()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfig.setClassName(java.lang.String)"], ["java.util.EventListener", "com.hazelcast.config.ListenerConfig.getImplementation()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfig.setImplementation(java.util.EventListener)"], ["boolean", "com.hazelcast.config.ListenerConfig.isIncludeValue()"], ["boolean", "com.hazelcast.config.ListenerConfig.isLocal()"], ["java.lang.String", "com.hazelcast.config.ListenerConfig.toString()"], ["boolean", "com.hazelcast.config.ListenerConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.ListenerConfig.hashCode()"], ["int", "com.hazelcast.config.ListenerConfig.getFactoryId()"], ["int", "com.hazelcast.config.ListenerConfig.getId()"], ["void", "com.hazelcast.config.ListenerConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.ListenerConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$33.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$33.createNew(java.lang.Object)"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.config.UserCodeDeploymentConfig()"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.config.UserCodeDeploymentConfig.setEnabled(boolean)"], ["boolean", "com.hazelcast.config.UserCodeDeploymentConfig.isEnabled()"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.config.UserCodeDeploymentConfig.setProviderFilter(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.UserCodeDeploymentConfig.getProviderFilter()"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.config.UserCodeDeploymentConfig.setBlacklistedPrefixes(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.UserCodeDeploymentConfig.getBlacklistedPrefixes()"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.config.UserCodeDeploymentConfig.setWhitelistedPrefixes(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.UserCodeDeploymentConfig.getWhitelistedPrefixes()"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.config.UserCodeDeploymentConfig.setProviderMode(com.hazelcast.config.UserCodeDeploymentConfig$ProviderMode)"], ["com.hazelcast.config.UserCodeDeploymentConfig$ProviderMode", "com.hazelcast.config.UserCodeDeploymentConfig.getProviderMode()"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.config.UserCodeDeploymentConfig.setClassCacheMode(com.hazelcast.config.UserCodeDeploymentConfig$ClassCacheMode)"], ["com.hazelcast.config.UserCodeDeploymentConfig$ClassCacheMode", "com.hazelcast.config.UserCodeDeploymentConfig.getClassCacheMode()"], ["com.hazelcast.config.MapStoreConfigReadOnly", "com.hazelcast.config.MapStoreConfigReadOnly(com.hazelcast.config.MapStoreConfig)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setFactoryClassName(java.lang.String)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setWriteDelaySeconds(int)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setWriteBatchSize(int)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setEnabled(boolean)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setImplementation(java.lang.Object)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setInitialLoadMode(com.hazelcast.config.MapStoreConfig$InitialLoadMode)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setFactoryImplementation(java.lang.Object)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setProperty(java.lang.String, java.lang.String)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setProperties(java.util.Properties)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfigReadOnly.setWriteCoalescing(boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$34.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$34.createNew(java.lang.Object)"], ["com.hazelcast.config.ManagementCenterConfig", "com.hazelcast.config.ManagementCenterConfig()"], ["com.hazelcast.config.ManagementCenterConfig", "com.hazelcast.config.ManagementCenterConfig(java.lang.String, int)"], ["boolean", "com.hazelcast.config.ManagementCenterConfig.isEnabled()"], ["com.hazelcast.config.ManagementCenterConfig", "com.hazelcast.config.ManagementCenterConfig.setEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.ManagementCenterConfig.getUrl()"], ["com.hazelcast.config.ManagementCenterConfig", "com.hazelcast.config.ManagementCenterConfig.setUrl(java.lang.String)"], ["int", "com.hazelcast.config.ManagementCenterConfig.getUpdateInterval()"], ["com.hazelcast.config.ManagementCenterConfig", "com.hazelcast.config.ManagementCenterConfig.setUpdateInterval(int)"], ["com.hazelcast.config.ManagementCenterConfig", "com.hazelcast.config.ManagementCenterConfig.setMutualAuthConfig(com.hazelcast.config.MCMutualAuthConfig)"], ["com.hazelcast.config.MCMutualAuthConfig", "com.hazelcast.config.ManagementCenterConfig.getMutualAuthConfig()"], ["java.lang.String", "com.hazelcast.config.ManagementCenterConfig.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$29.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$29.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$43.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$43.createNew(java.lang.Object)"], ["com.hazelcast.config.DiscoveryConfig", "com.hazelcast.config.DiscoveryConfig()"], ["com.hazelcast.config.DiscoveryConfig", "com.hazelcast.config.DiscoveryConfig.getAsReadOnly()"], ["void", "com.hazelcast.config.DiscoveryConfig.setDiscoveryServiceProvider(com.hazelcast.spi.discovery.integration.DiscoveryServiceProvider)"], ["com.hazelcast.spi.discovery.integration.DiscoveryServiceProvider", "com.hazelcast.config.DiscoveryConfig.getDiscoveryServiceProvider()"], ["com.hazelcast.spi.discovery.NodeFilter", "com.hazelcast.config.DiscoveryConfig.getNodeFilter()"], ["void", "com.hazelcast.config.DiscoveryConfig.setNodeFilter(com.hazelcast.spi.discovery.NodeFilter)"], ["java.lang.String", "com.hazelcast.config.DiscoveryConfig.getNodeFilterClass()"], ["void", "com.hazelcast.config.DiscoveryConfig.setNodeFilterClass(java.lang.String)"], ["boolean", "com.hazelcast.config.DiscoveryConfig.isEnabled()"], ["void", "com.hazelcast.config.DiscoveryConfig.setDiscoveryStrategyConfigs(java.util.List<com.hazelcast.config.DiscoveryStrategyConfig>)"], ["void", "com.hazelcast.config.DiscoveryConfig.addDiscoveryStrategyConfig(com.hazelcast.config.DiscoveryStrategyConfig)"], ["java.lang.String", "com.hazelcast.config.DiscoveryConfig.toString()"], ["com.hazelcast.config.NearCacheConfigReadOnly", "com.hazelcast.config.NearCacheConfigReadOnly()"], ["com.hazelcast.config.NearCacheConfigReadOnly", "com.hazelcast.config.NearCacheConfigReadOnly(com.hazelcast.config.NearCacheConfig)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setTimeToLiveSeconds(int)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setMaxSize(int)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setEvictionPolicy(java.lang.String)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setMaxIdleSeconds(int)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setSerializeKeys(boolean)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setInvalidateOnChange(boolean)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setInMemoryFormat(java.lang.String)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setCacheLocalEntries(boolean)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setLocalUpdatePolicy(com.hazelcast.config.NearCacheConfig$LocalUpdatePolicy)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.NearCacheConfigReadOnly.getEvictionConfig()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfigReadOnly.setPreloaderConfig(com.hazelcast.config.NearCachePreloaderConfig)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCacheConfigReadOnly.getPreloaderConfig()"], ["int", "com.hazelcast.config.NearCacheConfigReadOnly.getId()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig(java.lang.String)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig(com.hazelcast.config.QueryCacheConfig)"], ["com.hazelcast.config.QueryCacheConfigReadOnly", "com.hazelcast.config.QueryCacheConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.QueryCacheConfig.getName()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setName(java.lang.String)"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.QueryCacheConfig.getPredicateConfig()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setPredicateConfig(com.hazelcast.config.PredicateConfig)"], ["int", "com.hazelcast.config.QueryCacheConfig.getBatchSize()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setBatchSize(int)"], ["int", "com.hazelcast.config.QueryCacheConfig.getBufferSize()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setBufferSize(int)"], ["int", "com.hazelcast.config.QueryCacheConfig.getDelaySeconds()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setDelaySeconds(int)"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.config.QueryCacheConfig.getInMemoryFormat()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["boolean", "com.hazelcast.config.QueryCacheConfig.isIncludeValue()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setIncludeValue(boolean)"], ["boolean", "com.hazelcast.config.QueryCacheConfig.isPopulate()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setPopulate(boolean)"], ["boolean", "com.hazelcast.config.QueryCacheConfig.isCoalesce()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setCoalesce(boolean)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.QueryCacheConfig.getEvictionConfig()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.addEntryListenerConfig(com.hazelcast.config.EntryListenerConfig)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setEntryListenerConfigs(java.util.List<com.hazelcast.config.EntryListenerConfig>)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.addIndexConfig(com.hazelcast.config.MapIndexConfig)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfig.setIndexConfigs(java.util.List<com.hazelcast.config.MapIndexConfig>)"], ["java.lang.String", "com.hazelcast.config.QueryCacheConfig.toString()"], ["int", "com.hazelcast.config.QueryCacheConfig.getFactoryId()"], ["int", "com.hazelcast.config.QueryCacheConfig.getId()"], ["void", "com.hazelcast.config.QueryCacheConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.QueryCacheConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.QueryCacheConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.QueryCacheConfig.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$27.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$27.createNew(java.lang.Object)"], ["com.hazelcast.config.XmlConfigLocator", "com.hazelcast.config.XmlConfigLocator()"], ["java.io.InputStream", "com.hazelcast.config.XmlConfigLocator.getIn()"], ["java.io.File", "com.hazelcast.config.XmlConfigLocator.getConfigurationFile()"], ["java.net.URL", "com.hazelcast.config.XmlConfigLocator.getConfigurationUrl()"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MergePolicyConfig()"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MergePolicyConfig(java.lang.String, int)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.String", "com.hazelcast.config.MergePolicyConfig.getPolicy()"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MergePolicyConfig.setPolicy(java.lang.String)"], ["int", "com.hazelcast.config.MergePolicyConfig.getBatchSize()"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MergePolicyConfig.setBatchSize(int)"], ["int", "com.hazelcast.config.MergePolicyConfig.getFactoryId()"], ["int", "com.hazelcast.config.MergePolicyConfig.getId()"], ["void", "com.hazelcast.config.MergePolicyConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.MergePolicyConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.MergePolicyConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MergePolicyConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.MergePolicyConfig.toString()"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MergePolicyConfig.getAsReadOnly()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$28.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$28.createNew(java.lang.Object)"], ["com.hazelcast.config.QueueStoreConfigReadOnly", "com.hazelcast.config.QueueStoreConfigReadOnly(com.hazelcast.config.QueueStoreConfig)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfigReadOnly.setStoreImplementation(com.hazelcast.core.QueueStore)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfigReadOnly.setEnabled(boolean)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfigReadOnly.setProperties(java.util.Properties)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfigReadOnly.setProperty(java.lang.String, java.lang.String)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfigReadOnly.setFactoryClassName(java.lang.String)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfigReadOnly.setFactoryImplementation(com.hazelcast.core.QueueStoreFactory)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$36.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$36.createNew(java.lang.Object)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig$LockConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig$LockConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig()"], ["int", "com.hazelcast.config.NetworkConfig.getPort()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setPort(int)"], ["int", "com.hazelcast.config.NetworkConfig.getPortCount()"], ["void", "com.hazelcast.config.NetworkConfig.setPortCount(int)"], ["boolean", "com.hazelcast.config.NetworkConfig.isPortAutoIncrement()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setPortAutoIncrement(boolean)"], ["boolean", "com.hazelcast.config.NetworkConfig.isReuseAddress()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setReuseAddress(boolean)"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setOutboundPortDefinitions(java.util.Collection<java.lang.String>)"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.addOutboundPortDefinition(java.lang.String)"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setOutboundPorts(java.util.Collection<java.lang.Integer>)"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.addOutboundPort(int)"], ["com.hazelcast.config.InterfacesConfig", "com.hazelcast.config.NetworkConfig.getInterfaces()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setInterfaces(com.hazelcast.config.InterfacesConfig)"], ["com.hazelcast.config.JoinConfig", "com.hazelcast.config.NetworkConfig.getJoin()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setJoin(com.hazelcast.config.JoinConfig)"], ["java.lang.String", "com.hazelcast.config.NetworkConfig.getPublicAddress()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setPublicAddress(java.lang.String)"], ["com.hazelcast.config.SocketInterceptorConfig", "com.hazelcast.config.NetworkConfig.getSocketInterceptorConfig()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setSocketInterceptorConfig(com.hazelcast.config.SocketInterceptorConfig)"], ["com.hazelcast.config.SymmetricEncryptionConfig", "com.hazelcast.config.NetworkConfig.getSymmetricEncryptionConfig()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setSymmetricEncryptionConfig(com.hazelcast.config.SymmetricEncryptionConfig)"], ["com.hazelcast.config.SSLConfig", "com.hazelcast.config.NetworkConfig.getSSLConfig()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setSSLConfig(com.hazelcast.config.SSLConfig)"], ["com.hazelcast.config.MemberAddressProviderConfig", "com.hazelcast.config.NetworkConfig.getMemberAddressProviderConfig()"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setMemberAddressProviderConfig(com.hazelcast.config.MemberAddressProviderConfig)"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.NetworkConfig.setIcmpFailureDetectorConfig(com.hazelcast.config.IcmpFailureDetectorConfig)"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.NetworkConfig.getIcmpFailureDetectorConfig()"], ["java.lang.String", "com.hazelcast.config.NetworkConfig.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$52.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$52.createNew(java.lang.Object)"], ["com.hazelcast.config.HotRestartClusterDataRecoveryPolicy[]", "com.hazelcast.config.HotRestartClusterDataRecoveryPolicy.values()"], ["com.hazelcast.config.HotRestartClusterDataRecoveryPolicy", "com.hazelcast.config.HotRestartClusterDataRecoveryPolicy.valueOf(java.lang.String)"], ["com.hazelcast.config.HotRestartConfig", "com.hazelcast.config.HotRestartConfig()"], ["com.hazelcast.config.HotRestartConfig", "com.hazelcast.config.HotRestartConfig(com.hazelcast.config.HotRestartConfig)"], ["boolean", "com.hazelcast.config.HotRestartConfig.isEnabled()"], ["com.hazelcast.config.HotRestartConfig", "com.hazelcast.config.HotRestartConfig.setEnabled(boolean)"], ["boolean", "com.hazelcast.config.HotRestartConfig.isFsync()"], ["com.hazelcast.config.HotRestartConfig", "com.hazelcast.config.HotRestartConfig.setFsync(boolean)"], ["java.lang.String", "com.hazelcast.config.HotRestartConfig.toString()"], ["int", "com.hazelcast.config.HotRestartConfig.getFactoryId()"], ["int", "com.hazelcast.config.HotRestartConfig.getId()"], ["void", "com.hazelcast.config.HotRestartConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.HotRestartConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.HotRestartConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.HotRestartConfig.hashCode()"], ["com.hazelcast.config.SocketInterceptorConfig", "com.hazelcast.config.SocketInterceptorConfig()"], ["java.lang.String", "com.hazelcast.config.SocketInterceptorConfig.getClassName()"], ["com.hazelcast.config.SocketInterceptorConfig", "com.hazelcast.config.SocketInterceptorConfig.setClassName(java.lang.String)"], ["com.hazelcast.config.SocketInterceptorConfig", "com.hazelcast.config.SocketInterceptorConfig.setImplementation(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.config.SocketInterceptorConfig.getImplementation()"], ["boolean", "com.hazelcast.config.SocketInterceptorConfig.isEnabled()"], ["com.hazelcast.config.SocketInterceptorConfig", "com.hazelcast.config.SocketInterceptorConfig.setEnabled(boolean)"], ["com.hazelcast.config.SocketInterceptorConfig", "com.hazelcast.config.SocketInterceptorConfig.setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.config.SocketInterceptorConfig.getProperty(java.lang.String)"], ["java.util.Properties", "com.hazelcast.config.SocketInterceptorConfig.getProperties()"], ["com.hazelcast.config.SocketInterceptorConfig", "com.hazelcast.config.SocketInterceptorConfig.setProperties(java.util.Properties)"], ["boolean", "com.hazelcast.config.SocketInterceptorConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.SocketInterceptorConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.SocketInterceptorConfig.toString()"], ["com.hazelcast.config.SetConfigReadOnly", "com.hazelcast.config.SetConfigReadOnly(com.hazelcast.config.SetConfig)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfigReadOnly.setItemListenerConfigs(java.util.List<com.hazelcast.config.ItemListenerConfig>)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfigReadOnly.setMaxSize(int)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["void", "com.hazelcast.config.SetConfigReadOnly.addItemListenerConfig(com.hazelcast.config.ItemListenerConfig)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfigReadOnly.setMaxSize(int)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfigReadOnly.setItemListenerConfigs(java.util.List)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.HotRestartPersistenceConfig()"], ["boolean", "com.hazelcast.config.HotRestartPersistenceConfig.isEnabled()"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.HotRestartPersistenceConfig.setEnabled(boolean)"], ["com.hazelcast.config.HotRestartClusterDataRecoveryPolicy", "com.hazelcast.config.HotRestartPersistenceConfig.getClusterDataRecoveryPolicy()"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.HotRestartPersistenceConfig.setClusterDataRecoveryPolicy(com.hazelcast.config.HotRestartClusterDataRecoveryPolicy)"], ["java.io.File", "com.hazelcast.config.HotRestartPersistenceConfig.getBaseDir()"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.HotRestartPersistenceConfig.setBaseDir(java.io.File)"], ["java.io.File", "com.hazelcast.config.HotRestartPersistenceConfig.getBackupDir()"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.HotRestartPersistenceConfig.setBackupDir(java.io.File)"], ["int", "com.hazelcast.config.HotRestartPersistenceConfig.getParallelism()"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.HotRestartPersistenceConfig.setParallelism(int)"], ["int", "com.hazelcast.config.HotRestartPersistenceConfig.getValidationTimeoutSeconds()"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.HotRestartPersistenceConfig.setValidationTimeoutSeconds(int)"], ["int", "com.hazelcast.config.HotRestartPersistenceConfig.getDataLoadTimeoutSeconds()"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.HotRestartPersistenceConfig.setDataLoadTimeoutSeconds(int)"], ["boolean", "com.hazelcast.config.HotRestartPersistenceConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.HotRestartPersistenceConfig.hashCode()"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.config.JobTrackerConfig()"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.config.JobTrackerConfig(com.hazelcast.config.JobTrackerConfig)"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.config.JobTrackerConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.JobTrackerConfig.getName()"], ["int", "com.hazelcast.config.JobTrackerConfig.getMaxThreadSize()"], ["void", "com.hazelcast.config.JobTrackerConfig.setMaxThreadSize(int)"], ["int", "com.hazelcast.config.JobTrackerConfig.getRetryCount()"], ["void", "com.hazelcast.config.JobTrackerConfig.setRetryCount(int)"], ["int", "com.hazelcast.config.JobTrackerConfig.getChunkSize()"], ["void", "com.hazelcast.config.JobTrackerConfig.setChunkSize(int)"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.config.JobTrackerConfig.getAsReadOnly()"], ["int", "com.hazelcast.config.JobTrackerConfig.getQueueSize()"], ["void", "com.hazelcast.config.JobTrackerConfig.setQueueSize(int)"], ["boolean", "com.hazelcast.config.JobTrackerConfig.isCommunicateStats()"], ["void", "com.hazelcast.config.JobTrackerConfig.setCommunicateStats(boolean)"], ["com.hazelcast.mapreduce.TopologyChangedStrategy", "com.hazelcast.config.JobTrackerConfig.getTopologyChangedStrategy()"], ["void", "com.hazelcast.config.JobTrackerConfig.setTopologyChangedStrategy(com.hazelcast.mapreduce.TopologyChangedStrategy)"], ["java.lang.String", "com.hazelcast.config.CollectionConfig.getName()"], ["T", "com.hazelcast.config.CollectionConfig.setName(java.lang.String)"], ["T", "com.hazelcast.config.CollectionConfig.setItemListenerConfigs(java.util.List<com.hazelcast.config.ItemListenerConfig>)"], ["int", "com.hazelcast.config.CollectionConfig.getTotalBackupCount()"], ["int", "com.hazelcast.config.CollectionConfig.getBackupCount()"], ["T", "com.hazelcast.config.CollectionConfig.setBackupCount(int)"], ["int", "com.hazelcast.config.CollectionConfig.getAsyncBackupCount()"], ["T", "com.hazelcast.config.CollectionConfig.setAsyncBackupCount(int)"], ["int", "com.hazelcast.config.CollectionConfig.getMaxSize()"], ["T", "com.hazelcast.config.CollectionConfig.setMaxSize(int)"], ["boolean", "com.hazelcast.config.CollectionConfig.isStatisticsEnabled()"], ["T", "com.hazelcast.config.CollectionConfig.setStatisticsEnabled(boolean)"], ["void", "com.hazelcast.config.CollectionConfig.addItemListenerConfig(com.hazelcast.config.ItemListenerConfig)"], ["java.lang.String", "com.hazelcast.config.CollectionConfig.getQuorumName()"], ["T", "com.hazelcast.config.CollectionConfig.setQuorumName(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.CollectionConfig.getMergePolicyConfig()"], ["T", "com.hazelcast.config.CollectionConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.Class", "com.hazelcast.config.CollectionConfig.getProvidedMergeTypes()"], ["int", "com.hazelcast.config.CollectionConfig.getFactoryId()"], ["void", "com.hazelcast.config.CollectionConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CollectionConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.CollectionConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CollectionConfig.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$11.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$11.createNew(java.lang.Object)"], ["com.hazelcast.config.QuorumListenerConfig", "com.hazelcast.config.QuorumListenerConfig()"], ["com.hazelcast.config.QuorumListenerConfig", "com.hazelcast.config.QuorumListenerConfig(java.lang.String)"], ["com.hazelcast.config.QuorumListenerConfig", "com.hazelcast.config.QuorumListenerConfig(com.hazelcast.quorum.QuorumListener)"], ["com.hazelcast.quorum.QuorumListener", "com.hazelcast.config.QuorumListenerConfig.getImplementation()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.QuorumListenerConfig.setImplementation(com.hazelcast.quorum.QuorumListener)"], ["boolean", "com.hazelcast.config.QuorumListenerConfig.isIncludeValue()"], ["boolean", "com.hazelcast.config.QuorumListenerConfig.isLocal()"], ["int", "com.hazelcast.config.QuorumListenerConfig.getId()"], ["java.util.EventListener", "com.hazelcast.config.QuorumListenerConfig.getImplementation()"], ["com.hazelcast.config.UserCodeDeploymentConfig$ProviderMode[]", "com.hazelcast.config.UserCodeDeploymentConfig$ProviderMode.values()"], ["com.hazelcast.config.UserCodeDeploymentConfig$ProviderMode", "com.hazelcast.config.UserCodeDeploymentConfig$ProviderMode.valueOf(java.lang.String)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig(java.lang.String)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig(com.hazelcast.config.RingbufferConfig)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig(java.lang.String, com.hazelcast.config.RingbufferConfig)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.RingbufferConfig.getName()"], ["int", "com.hazelcast.config.RingbufferConfig.getCapacity()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setCapacity(int)"], ["int", "com.hazelcast.config.RingbufferConfig.getBackupCount()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setBackupCount(int)"], ["int", "com.hazelcast.config.RingbufferConfig.getAsyncBackupCount()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setAsyncBackupCount(int)"], ["int", "com.hazelcast.config.RingbufferConfig.getTotalBackupCount()"], ["int", "com.hazelcast.config.RingbufferConfig.getTimeToLiveSeconds()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setTimeToLiveSeconds(int)"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.config.RingbufferConfig.getInMemoryFormat()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferConfig.getRingbufferStoreConfig()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setRingbufferStoreConfig(com.hazelcast.config.RingbufferStoreConfig)"], ["java.lang.String", "com.hazelcast.config.RingbufferConfig.getQuorumName()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setQuorumName(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.RingbufferConfig.getMergePolicyConfig()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.Class", "com.hazelcast.config.RingbufferConfig.getProvidedMergeTypes()"], ["java.lang.String", "com.hazelcast.config.RingbufferConfig.toString()"], ["int", "com.hazelcast.config.RingbufferConfig.getFactoryId()"], ["int", "com.hazelcast.config.RingbufferConfig.getId()"], ["void", "com.hazelcast.config.RingbufferConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.RingbufferConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.RingbufferConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.RingbufferConfig.hashCode()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig.getAsReadOnly()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$35.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$35.createNew(java.lang.Object)"], ["com.hazelcast.config.PredicateConfigReadOnly", "com.hazelcast.config.PredicateConfigReadOnly(com.hazelcast.config.PredicateConfig)"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.PredicateConfigReadOnly.setImplementation(com.hazelcast.query.Predicate)"], ["void", "com.hazelcast.config.PredicateConfigReadOnly.setSql(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.PredicateConfigReadOnly.toString()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig(int, com.hazelcast.config.EvictionConfig$MaxSizePolicy, com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig(int, com.hazelcast.config.EvictionConfig$MaxSizePolicy, java.lang.String)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig(int, com.hazelcast.config.EvictionConfig$MaxSizePolicy, com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig.getAsReadOnly()"], ["int", "com.hazelcast.config.EvictionConfig.getSize()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig.setSize(int)"], ["com.hazelcast.config.EvictionConfig$MaxSizePolicy", "com.hazelcast.config.EvictionConfig.getMaximumSizePolicy()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig.setMaximumSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.EvictionPolicy", "com.hazelcast.config.EvictionConfig.getEvictionPolicy()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.internal.eviction.EvictionStrategyType", "com.hazelcast.config.EvictionConfig.getEvictionStrategyType()"], ["com.hazelcast.internal.eviction.EvictionPolicyType", "com.hazelcast.config.EvictionConfig.getEvictionPolicyType()"], ["java.lang.String", "com.hazelcast.config.EvictionConfig.getComparatorClassName()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig.setComparatorClassName(java.lang.String)"], ["com.hazelcast.internal.eviction.EvictionPolicyComparator", "com.hazelcast.config.EvictionConfig.getComparator()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfig.setComparator(com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["void", "com.hazelcast.config.EvictionConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.EvictionConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.config.EvictionConfig.toString()"], ["boolean", "com.hazelcast.config.EvictionConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.EvictionConfig.hashCode()"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig()"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig(java.lang.String)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig(java.lang.String, int, int)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig(java.lang.String, int, int, com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig(java.lang.String, int, int, java.lang.String, com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)"], ["java.lang.String", "com.hazelcast.config.CardinalityEstimatorConfig.getName()"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig.setName(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.CardinalityEstimatorConfig.getMergePolicyConfig()"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["int", "com.hazelcast.config.CardinalityEstimatorConfig.getBackupCount()"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig.setBackupCount(int)"], ["int", "com.hazelcast.config.CardinalityEstimatorConfig.getAsyncBackupCount()"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig.setAsyncBackupCount(int)"], ["int", "com.hazelcast.config.CardinalityEstimatorConfig.getTotalBackupCount()"], ["java.lang.String", "com.hazelcast.config.CardinalityEstimatorConfig.getQuorumName()"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CardinalityEstimatorConfig.toString()"], ["int", "com.hazelcast.config.CardinalityEstimatorConfig.getFactoryId()"], ["int", "com.hazelcast.config.CardinalityEstimatorConfig.getId()"], ["void", "com.hazelcast.config.CardinalityEstimatorConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CardinalityEstimatorConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.CardinalityEstimatorConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CardinalityEstimatorConfig.hashCode()"], ["void", "com.hazelcast.config.CardinalityEstimatorConfig.validate()"], ["com.hazelcast.config.ItemListenerConfigReadOnly", "com.hazelcast.config.ItemListenerConfigReadOnly(com.hazelcast.config.ItemListenerConfig)"], ["com.hazelcast.config.ItemListenerConfig", "com.hazelcast.config.ItemListenerConfigReadOnly.setImplementation(com.hazelcast.core.ItemListener)"], ["com.hazelcast.config.ItemListenerConfig", "com.hazelcast.config.ItemListenerConfigReadOnly.setIncludeValue(boolean)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ItemListenerConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ItemListenerConfigReadOnly.setImplementation(java.util.EventListener)"], ["com.hazelcast.config.CacheSimpleEntryListenerConfig", "com.hazelcast.config.CacheSimpleEntryListenerConfig(com.hazelcast.config.CacheSimpleEntryListenerConfig)"], ["com.hazelcast.config.CacheSimpleEntryListenerConfig", "com.hazelcast.config.CacheSimpleEntryListenerConfig()"], ["com.hazelcast.config.CacheSimpleEntryListenerConfigReadOnly", "com.hazelcast.config.CacheSimpleEntryListenerConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.CacheSimpleEntryListenerConfig.getCacheEntryListenerFactory()"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfig.setCacheEntryListenerFactory(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleEntryListenerConfig.getCacheEntryEventFilterFactory()"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfig.setCacheEntryEventFilterFactory(java.lang.String)"], ["boolean", "com.hazelcast.config.CacheSimpleEntryListenerConfig.isOldValueRequired()"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfig.setOldValueRequired(boolean)"], ["boolean", "com.hazelcast.config.CacheSimpleEntryListenerConfig.isSynchronous()"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfig.setSynchronous(boolean)"], ["boolean", "com.hazelcast.config.CacheSimpleEntryListenerConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CacheSimpleEntryListenerConfig.hashCode()"], ["int", "com.hazelcast.config.CacheSimpleEntryListenerConfig.getFactoryId()"], ["int", "com.hazelcast.config.CacheSimpleEntryListenerConfig.getId()"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleEntryListenerConfig.toString()"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MapConfigReadOnly.getMaxSizeConfig()"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.MapConfigReadOnly.getWanReplicationRef()"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.MapConfigReadOnly.getPartitioningStrategyConfig()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapConfigReadOnly.getMapStoreConfig()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.MapConfigReadOnly.getNearCacheConfig()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setHotRestartConfig(com.hazelcast.config.HotRestartConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setEvictionPercentage(int)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMinEvictionCheckMillis(long)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setTimeToLiveSeconds(int)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMaxIdleSeconds(int)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMaxSizeConfig(com.hazelcast.config.MaxSizeConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMapEvictionPolicy(com.hazelcast.map.eviction.MapEvictionPolicy)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMapStoreConfig(com.hazelcast.config.MapStoreConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setNearCacheConfig(com.hazelcast.config.NearCacheConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMergePolicy(java.lang.String)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setReadBackupData(boolean)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setWanReplicationRef(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.addEntryListenerConfig(com.hazelcast.config.EntryListenerConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setEntryListenerConfigs(java.util.List<com.hazelcast.config.EntryListenerConfig>)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.addMapIndexConfig(com.hazelcast.config.MapIndexConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMapIndexConfigs(java.util.List<com.hazelcast.config.MapIndexConfig>)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setPartitioningStrategyConfig(com.hazelcast.config.PartitioningStrategyConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setOptimizeQueries(boolean)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setPartitionLostListenerConfigs(java.util.List<com.hazelcast.config.MapPartitionLostListenerConfig>)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setMapAttributeConfigs(java.util.List<com.hazelcast.config.MapAttributeConfig>)"], ["void", "com.hazelcast.config.MapConfigReadOnly.setQueryCacheConfigs(java.util.List<com.hazelcast.config.QueryCacheConfig>)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setCacheDeserializedValues(com.hazelcast.config.CacheDeserializedValues)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig$DurableExecutorConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig$DurableExecutorConfigReadOnly.setPoolSize(int)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig$DurableExecutorConfigReadOnly.setCapacity(int)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig$DurableExecutorConfigReadOnly.setDurability(int)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.DurableExecutorConfig$DurableExecutorConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.MapAttributeConfig", "com.hazelcast.config.MapAttributeConfig()"], ["com.hazelcast.config.MapAttributeConfig", "com.hazelcast.config.MapAttributeConfig(java.lang.String, java.lang.String)"], ["com.hazelcast.config.MapAttributeConfig", "com.hazelcast.config.MapAttributeConfig(com.hazelcast.config.MapAttributeConfig)"], ["com.hazelcast.config.MapAttributeConfigReadOnly", "com.hazelcast.config.MapAttributeConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.MapAttributeConfig.getName()"], ["com.hazelcast.config.MapAttributeConfig", "com.hazelcast.config.MapAttributeConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.MapAttributeConfig.getExtractor()"], ["com.hazelcast.config.MapAttributeConfig", "com.hazelcast.config.MapAttributeConfig.setExtractor(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.MapAttributeConfig.toString()"], ["int", "com.hazelcast.config.MapAttributeConfig.getFactoryId()"], ["int", "com.hazelcast.config.MapAttributeConfig.getId()"], ["void", "com.hazelcast.config.MapAttributeConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.MapAttributeConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.MapAttributeConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MapAttributeConfig.hashCode()"], ["com.hazelcast.config.LegacyCacheEvictionConfig", "com.hazelcast.config.LegacyCacheEvictionConfig()"], ["com.hazelcast.config.LegacyCacheEvictionConfig", "com.hazelcast.config.LegacyCacheEvictionConfig(com.hazelcast.config.CacheEvictionConfig)"], ["void", "com.hazelcast.config.LegacyCacheEvictionConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.LegacyCacheEvictionConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.Class", "com.hazelcast.config.LegacyCacheEvictionConfig.getClassType()"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.LegacyCacheEvictionConfig.getConfig()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$44.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$44.createNew(java.lang.Object)"], ["com.hazelcast.config.ItemListenerConfig", "com.hazelcast.config.ItemListenerConfig()"], ["com.hazelcast.config.ItemListenerConfig", "com.hazelcast.config.ItemListenerConfig(java.lang.String, boolean)"], ["com.hazelcast.config.ItemListenerConfig", "com.hazelcast.config.ItemListenerConfig(com.hazelcast.core.ItemListener, boolean)"], ["com.hazelcast.config.ItemListenerConfig", "com.hazelcast.config.ItemListenerConfig(com.hazelcast.config.ItemListenerConfig)"], ["com.hazelcast.config.ItemListenerConfigReadOnly", "com.hazelcast.config.ItemListenerConfig.getAsReadOnly()"], ["com.hazelcast.core.ItemListener", "com.hazelcast.config.ItemListenerConfig.getImplementation()"], ["com.hazelcast.config.ItemListenerConfig", "com.hazelcast.config.ItemListenerConfig.setImplementation(com.hazelcast.core.ItemListener)"], ["boolean", "com.hazelcast.config.ItemListenerConfig.isIncludeValue()"], ["com.hazelcast.config.ItemListenerConfig", "com.hazelcast.config.ItemListenerConfig.setIncludeValue(boolean)"], ["java.lang.String", "com.hazelcast.config.ItemListenerConfig.toString()"], ["boolean", "com.hazelcast.config.ItemListenerConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.ItemListenerConfig.hashCode()"], ["int", "com.hazelcast.config.ItemListenerConfig.getId()"], ["void", "com.hazelcast.config.ItemListenerConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.ItemListenerConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.util.EventListener", "com.hazelcast.config.ItemListenerConfig.getImplementation()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ItemListenerConfig.getAsReadOnly()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$42.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$42.createNew(java.lang.Object)"], ["com.hazelcast.config.MultiMapConfig$ValueCollectionType[]", "com.hazelcast.config.MultiMapConfig$ValueCollectionType.values()"], ["com.hazelcast.config.MultiMapConfig$ValueCollectionType", "com.hazelcast.config.MultiMapConfig$ValueCollectionType.valueOf(java.lang.String)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig()"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig(java.lang.String)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig(java.lang.String, int)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig(com.hazelcast.config.ExecutorConfig)"], ["com.hazelcast.config.ExecutorConfigReadOnly", "com.hazelcast.config.ExecutorConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.ExecutorConfig.getName()"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig.setName(java.lang.String)"], ["int", "com.hazelcast.config.ExecutorConfig.getPoolSize()"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig.setPoolSize(int)"], ["int", "com.hazelcast.config.ExecutorConfig.getQueueCapacity()"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig.setQueueCapacity(int)"], ["boolean", "com.hazelcast.config.ExecutorConfig.isStatisticsEnabled()"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig.setStatisticsEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.ExecutorConfig.getQuorumName()"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.ExecutorConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.ExecutorConfig.toString()"], ["int", "com.hazelcast.config.ExecutorConfig.getFactoryId()"], ["int", "com.hazelcast.config.ExecutorConfig.getId()"], ["void", "com.hazelcast.config.ExecutorConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.ExecutorConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.ExecutorConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.ExecutorConfig.hashCode()"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.config.CacheConfig()"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.config.CacheConfig(java.lang.String)"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.config.CacheConfig(javax.cache.configuration.CompleteConfiguration<K, V>)"], ["com.hazelcast.config.CacheConfig", "com.hazelcast.config.CacheConfig(com.hazelcast.config.CacheSimpleConfig)"], ["com.hazelcast.config.CacheConfigReadOnly<K, V>", "com.hazelcast.config.CacheConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.CacheConfig.getName()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheConfig.getManagerPrefix()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setManagerPrefix(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheConfig.getUriString()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setUriString(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheConfig.getNameWithPrefix()"], ["int", "com.hazelcast.config.CacheConfig.getBackupCount()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setBackupCount(int)"], ["int", "com.hazelcast.config.CacheConfig.getAsyncBackupCount()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setAsyncBackupCount(int)"], ["int", "com.hazelcast.config.CacheConfig.getTotalBackupCount()"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheConfig.getEvictionConfig()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.CacheConfig.getWanReplicationRef()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setWanReplicationRef(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setPartitionLostListenerConfigs(java.util.List<com.hazelcast.config.CachePartitionLostListenerConfig>)"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.config.CacheConfig.getInMemoryFormat()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["java.lang.String", "com.hazelcast.config.CacheConfig.getQuorumName()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheConfig.getMergePolicy()"], ["void", "com.hazelcast.config.CacheConfig.setMergePolicy(java.lang.String)"], ["java.lang.Class", "com.hazelcast.config.CacheConfig.getProvidedMergeTypes()"], ["boolean", "com.hazelcast.config.CacheConfig.isDisablePerEntryInvalidationEvents()"], ["void", "com.hazelcast.config.CacheConfig.setDisablePerEntryInvalidationEvents(boolean)"], ["void", "com.hazelcast.config.CacheConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CacheConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["int", "com.hazelcast.config.CacheConfig.hashCode()"], ["boolean", "com.hazelcast.config.CacheConfig.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.config.CacheConfig.toString()"], ["<T extends com.hazelcast.config.CacheConfig<K, V>> T", "com.hazelcast.config.CacheConfig.copy(T, boolean)"], ["com.hazelcast.config.MemberAttributeConfig", "com.hazelcast.config.MemberAttributeConfig()"], ["com.hazelcast.config.MemberAttributeConfig", "com.hazelcast.config.MemberAttributeConfig(com.hazelcast.config.MemberAttributeConfig)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.config.MemberAttributeConfig.getAttributes()"], ["void", "com.hazelcast.config.MemberAttributeConfig.setAttributes(java.util.Map<java.lang.String, java.lang.Object>)"], ["java.lang.String", "com.hazelcast.config.MemberAttributeConfig.getStringAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfig.setStringAttribute(java.lang.String, java.lang.String)"], ["java.lang.Boolean", "com.hazelcast.config.MemberAttributeConfig.getBooleanAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfig.setBooleanAttribute(java.lang.String, boolean)"], ["java.lang.Byte", "com.hazelcast.config.MemberAttributeConfig.getByteAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfig.setByteAttribute(java.lang.String, byte)"], ["java.lang.Short", "com.hazelcast.config.MemberAttributeConfig.getShortAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfig.setShortAttribute(java.lang.String, short)"], ["java.lang.Integer", "com.hazelcast.config.MemberAttributeConfig.getIntAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfig.setIntAttribute(java.lang.String, int)"], ["java.lang.Long", "com.hazelcast.config.MemberAttributeConfig.getLongAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfig.setLongAttribute(java.lang.String, long)"], ["java.lang.Float", "com.hazelcast.config.MemberAttributeConfig.getFloatAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfig.setFloatAttribute(java.lang.String, float)"], ["java.lang.Double", "com.hazelcast.config.MemberAttributeConfig.getDoubleAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfig.setDoubleAttribute(java.lang.String, double)"], ["void", "com.hazelcast.config.MemberAttributeConfig.removeAttribute(java.lang.String)"], ["com.hazelcast.config.MemberAttributeConfig", "com.hazelcast.config.MemberAttributeConfig.asReadOnly()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.getRingbufferStoreConfig()"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.setCapacity(int)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.setTimeToLiveSeconds(int)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.setRingbufferStoreConfig(com.hazelcast.config.RingbufferStoreConfig)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.RingbufferConfig$RingbufferConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig(java.lang.String)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig(int, int, boolean, com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig(int, int, boolean, com.hazelcast.config.InMemoryFormat, com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig(int, int, java.lang.String, int, boolean, com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig(int, int, java.lang.String, int, boolean, com.hazelcast.config.InMemoryFormat, com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig(com.hazelcast.config.NearCacheConfig)"], ["com.hazelcast.config.NearCacheConfigReadOnly", "com.hazelcast.config.NearCacheConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.NearCacheConfig.getName()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setName(java.lang.String)"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.config.NearCacheConfig.getInMemoryFormat()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setInMemoryFormat(java.lang.String)"], ["boolean", "com.hazelcast.config.NearCacheConfig.isSerializeKeys()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setSerializeKeys(boolean)"], ["boolean", "com.hazelcast.config.NearCacheConfig.isInvalidateOnChange()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setInvalidateOnChange(boolean)"], ["int", "com.hazelcast.config.NearCacheConfig.getTimeToLiveSeconds()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setTimeToLiveSeconds(int)"], ["int", "com.hazelcast.config.NearCacheConfig.getMaxIdleSeconds()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setMaxIdleSeconds(int)"], ["int", "com.hazelcast.config.NearCacheConfig.getMaxSize()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setMaxSize(int)"], ["java.lang.String", "com.hazelcast.config.NearCacheConfig.getEvictionPolicy()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setEvictionPolicy(java.lang.String)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.NearCacheConfig.getEvictionConfig()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["boolean", "com.hazelcast.config.NearCacheConfig.isCacheLocalEntries()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setCacheLocalEntries(boolean)"], ["com.hazelcast.config.NearCacheConfig$LocalUpdatePolicy", "com.hazelcast.config.NearCacheConfig.getLocalUpdatePolicy()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setLocalUpdatePolicy(com.hazelcast.config.NearCacheConfig$LocalUpdatePolicy)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCacheConfig.getPreloaderConfig()"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.NearCacheConfig.setPreloaderConfig(com.hazelcast.config.NearCachePreloaderConfig)"], ["int", "com.hazelcast.config.NearCacheConfig.getFactoryId()"], ["int", "com.hazelcast.config.NearCacheConfig.getId()"], ["void", "com.hazelcast.config.NearCacheConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.NearCacheConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.config.NearCacheConfig.toString()"], ["boolean", "com.hazelcast.config.NearCacheConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.NearCacheConfig.hashCode()"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig()"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig(int, com.hazelcast.config.EvictionConfig$MaxSizePolicy, com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig(int, com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy, com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig(int, com.hazelcast.config.EvictionConfig$MaxSizePolicy, java.lang.String)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig(int, com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy, java.lang.String)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig(int, com.hazelcast.config.EvictionConfig$MaxSizePolicy, com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig(int, com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy, com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig.getAsReadOnly()"], ["com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy", "com.hazelcast.config.CacheEvictionConfig.getMaxSizePolicy()"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setMaxSizePolicy(com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setMaximumSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setSize(int)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setComparatorClassName(java.lang.String)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setComparator(com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["java.lang.String", "com.hazelcast.config.CacheEvictionConfig.toString()"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setComparator(com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setComparatorClassName(java.lang.String)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setMaximumSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfig.setSize(int)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfig.getAsReadOnly()"], ["com.hazelcast.config.SemaphoreConfigReadOnly", "com.hazelcast.config.SemaphoreConfigReadOnly(com.hazelcast.config.SemaphoreConfig)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfigReadOnly.setInitialPermits(int)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.SemaphoreConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.UserCodeDeploymentConfig$ClassCacheMode[]", "com.hazelcast.config.UserCodeDeploymentConfig$ClassCacheMode.values()"], ["com.hazelcast.config.UserCodeDeploymentConfig$ClassCacheMode", "com.hazelcast.config.UserCodeDeploymentConfig$ClassCacheMode.valueOf(java.lang.String)"], ["com.hazelcast.config.PermissionPolicyConfig", "com.hazelcast.config.PermissionPolicyConfig()"], ["com.hazelcast.config.PermissionPolicyConfig", "com.hazelcast.config.PermissionPolicyConfig(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.PermissionPolicyConfig.getClassName()"], ["com.hazelcast.config.PermissionPolicyConfig", "com.hazelcast.config.PermissionPolicyConfig.setClassName(java.lang.String)"], ["com.hazelcast.security.IPermissionPolicy", "com.hazelcast.config.PermissionPolicyConfig.getImplementation()"], ["com.hazelcast.config.PermissionPolicyConfig", "com.hazelcast.config.PermissionPolicyConfig.setImplementation(com.hazelcast.security.IPermissionPolicy)"], ["java.util.Properties", "com.hazelcast.config.PermissionPolicyConfig.getProperties()"], ["com.hazelcast.config.PermissionPolicyConfig", "com.hazelcast.config.PermissionPolicyConfig.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.PermissionPolicyConfig.toString()"], ["boolean", "com.hazelcast.config.PermissionPolicyConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.PermissionPolicyConfig.hashCode()"], ["com.hazelcast.config.PermissionConfig$PermissionType[]", "com.hazelcast.config.PermissionConfig$PermissionType.values()"], ["com.hazelcast.config.PermissionConfig$PermissionType", "com.hazelcast.config.PermissionConfig$PermissionType.valueOf(java.lang.String)"], ["com.hazelcast.config.PermissionConfig$PermissionType", "com.hazelcast.config.PermissionConfig$PermissionType.getType(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.PermissionConfig$PermissionType.getNodeName()"], ["com.hazelcast.config.replacer.EncryptionReplacer", "com.hazelcast.config.replacer.EncryptionReplacer()"], ["void", "com.hazelcast.config.replacer.EncryptionReplacer.init(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.replacer.EncryptionReplacer.getPrefix()"], ["void", "com.hazelcast.config.replacer.EncryptionReplacer.main(java.lang.String...)"], ["java.lang.String", "com.hazelcast.config.replacer.EncryptionReplacer$HzNsContext.getNamespaceURI(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.replacer.EncryptionReplacer$HzNsContext.getPrefix(java.lang.String)"], ["java.util.Iterator", "com.hazelcast.config.replacer.EncryptionReplacer$HzNsContext.getPrefixes(java.lang.String)"], ["com.hazelcast.config.replacer.PropertyReplacer", "com.hazelcast.config.replacer.PropertyReplacer()"], ["void", "com.hazelcast.config.replacer.PropertyReplacer.init(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.replacer.PropertyReplacer.getPrefix()"], ["java.lang.String", "com.hazelcast.config.replacer.PropertyReplacer.getReplacement(java.lang.String)"], ["com.hazelcast.config.replacer.AbstractPbeReplacer", "com.hazelcast.config.replacer.AbstractPbeReplacer()"], ["void", "com.hazelcast.config.replacer.AbstractPbeReplacer.init(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.replacer.AbstractPbeReplacer.getReplacement(java.lang.String)"], ["com.hazelcast.config.PartitionGroupConfig", "com.hazelcast.config.PartitionGroupConfig()"], ["boolean", "com.hazelcast.config.PartitionGroupConfig.isEnabled()"], ["com.hazelcast.config.PartitionGroupConfig", "com.hazelcast.config.PartitionGroupConfig.setEnabled(boolean)"], ["com.hazelcast.config.PartitionGroupConfig$MemberGroupType", "com.hazelcast.config.PartitionGroupConfig.getGroupType()"], ["com.hazelcast.config.PartitionGroupConfig", "com.hazelcast.config.PartitionGroupConfig.setGroupType(com.hazelcast.config.PartitionGroupConfig$MemberGroupType)"], ["com.hazelcast.config.PartitionGroupConfig", "com.hazelcast.config.PartitionGroupConfig.addMemberGroupConfig(com.hazelcast.config.MemberGroupConfig)"], ["com.hazelcast.config.PartitionGroupConfig", "com.hazelcast.config.PartitionGroupConfig.clear()"], ["com.hazelcast.config.PartitionGroupConfig", "com.hazelcast.config.PartitionGroupConfig.setMemberGroupConfigs(java.util.Collection<com.hazelcast.config.MemberGroupConfig>)"], ["boolean", "com.hazelcast.config.PartitionGroupConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.PartitionGroupConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.PartitionGroupConfig.toString()"], ["com.hazelcast.config.EvictionConfig$MaxSizePolicy[]", "com.hazelcast.config.EvictionConfig$MaxSizePolicy.values()"], ["com.hazelcast.config.EvictionConfig$MaxSizePolicy", "com.hazelcast.config.EvictionConfig$MaxSizePolicy.valueOf(java.lang.String)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig(com.hazelcast.config.MapStoreConfig)"], ["com.hazelcast.config.MapStoreConfigReadOnly", "com.hazelcast.config.MapStoreConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.MapStoreConfig.getClassName()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setClassName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.MapStoreConfig.getFactoryClassName()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setFactoryClassName(java.lang.String)"], ["int", "com.hazelcast.config.MapStoreConfig.getWriteDelaySeconds()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setWriteDelaySeconds(int)"], ["int", "com.hazelcast.config.MapStoreConfig.getWriteBatchSize()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setWriteBatchSize(int)"], ["boolean", "com.hazelcast.config.MapStoreConfig.isEnabled()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setEnabled(boolean)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setImplementation(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.config.MapStoreConfig.getImplementation()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setFactoryImplementation(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.config.MapStoreConfig.getFactoryImplementation()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.config.MapStoreConfig.getProperty(java.lang.String)"], ["java.util.Properties", "com.hazelcast.config.MapStoreConfig.getProperties()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setProperties(java.util.Properties)"], ["com.hazelcast.config.MapStoreConfig$InitialLoadMode", "com.hazelcast.config.MapStoreConfig.getInitialLoadMode()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setInitialLoadMode(com.hazelcast.config.MapStoreConfig$InitialLoadMode)"], ["boolean", "com.hazelcast.config.MapStoreConfig.isWriteCoalescing()"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapStoreConfig.setWriteCoalescing(boolean)"], ["java.lang.String", "com.hazelcast.config.MapStoreConfig.toString()"], ["boolean", "com.hazelcast.config.MapStoreConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MapStoreConfig.hashCode()"], ["int", "com.hazelcast.config.MapStoreConfig.getFactoryId()"], ["int", "com.hazelcast.config.MapStoreConfig.getId()"], ["void", "com.hazelcast.config.MapStoreConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.MapStoreConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$2.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$2.createNew(java.lang.Object)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig(java.lang.String)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig(com.hazelcast.config.QueueConfig)"], ["com.hazelcast.config.QueueConfigReadOnly", "com.hazelcast.config.QueueConfig.getAsReadOnly()"], ["int", "com.hazelcast.config.QueueConfig.getEmptyQueueTtl()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setEmptyQueueTtl(int)"], ["int", "com.hazelcast.config.QueueConfig.getMaxSize()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setMaxSize(int)"], ["int", "com.hazelcast.config.QueueConfig.getTotalBackupCount()"], ["int", "com.hazelcast.config.QueueConfig.getBackupCount()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setBackupCount(int)"], ["int", "com.hazelcast.config.QueueConfig.getAsyncBackupCount()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setAsyncBackupCount(int)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueConfig.getQueueStoreConfig()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setQueueStoreConfig(com.hazelcast.config.QueueStoreConfig)"], ["boolean", "com.hazelcast.config.QueueConfig.isStatisticsEnabled()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setStatisticsEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.QueueConfig.getName()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setName(java.lang.String)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.addItemListenerConfig(com.hazelcast.config.ItemListenerConfig)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setItemListenerConfigs(java.util.List<com.hazelcast.config.ItemListenerConfig>)"], ["java.lang.String", "com.hazelcast.config.QueueConfig.getQuorumName()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setQuorumName(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.QueueConfig.getMergePolicyConfig()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.Class", "com.hazelcast.config.QueueConfig.getProvidedMergeTypes()"], ["java.lang.String", "com.hazelcast.config.QueueConfig.toString()"], ["int", "com.hazelcast.config.QueueConfig.getFactoryId()"], ["int", "com.hazelcast.config.QueueConfig.getId()"], ["void", "com.hazelcast.config.QueueConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.QueueConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.QueueConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.QueueConfig.hashCode()"], ["com.hazelcast.config.ListConfigReadOnly", "com.hazelcast.config.ListConfigReadOnly(com.hazelcast.config.ListConfig)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfigReadOnly.setItemListenerConfigs(java.util.List<com.hazelcast.config.ItemListenerConfig>)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfigReadOnly.setMaxSize(int)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["void", "com.hazelcast.config.ListConfigReadOnly.addItemListenerConfig(com.hazelcast.config.ItemListenerConfig)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.ListConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfigReadOnly.setMaxSize(int)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfigReadOnly.setItemListenerConfigs(java.util.List)"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.ListConfigReadOnly.setName(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setStringAttribute(java.lang.String, java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setBooleanAttribute(java.lang.String, boolean)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setByteAttribute(java.lang.String, byte)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setShortAttribute(java.lang.String, short)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setIntAttribute(java.lang.String, int)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setLongAttribute(java.lang.String, long)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setFloatAttribute(java.lang.String, float)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setDoubleAttribute(java.lang.String, double)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.removeAttribute(java.lang.String)"], ["void", "com.hazelcast.config.MemberAttributeConfigReadOnly.setAttributes(java.util.Map<java.lang.String, java.lang.Object>)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.hazelcast.config.MemberAttributeConfigReadOnly.getAttributes()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$8.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$8.createNew(java.lang.Object)"], ["com.hazelcast.config.ConfigurationException", "com.hazelcast.config.ConfigurationException(java.lang.String, java.lang.String, java.lang.String)"], ["com.hazelcast.config.ConfigurationException", "com.hazelcast.config.ConfigurationException(java.lang.String)"], ["com.hazelcast.config.ConfigurationException", "com.hazelcast.config.ConfigurationException(java.lang.String, java.lang.Throwable)"], ["com.hazelcast.config.MapPartitionLostListenerConfigReadOnly", "com.hazelcast.config.MapPartitionLostListenerConfigReadOnly(com.hazelcast.config.MapPartitionLostListenerConfig)"], ["com.hazelcast.map.listener.MapPartitionLostListener", "com.hazelcast.config.MapPartitionLostListenerConfigReadOnly.getImplementation()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfigReadOnly.setImplementation(java.util.EventListener)"], ["com.hazelcast.config.MapPartitionLostListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfigReadOnly.setImplementation(com.hazelcast.map.listener.MapPartitionLostListener)"], ["java.util.EventListener", "com.hazelcast.config.MapPartitionLostListenerConfigReadOnly.getImplementation()"], ["com.hazelcast.config.FileSystemXmlConfig", "com.hazelcast.config.FileSystemXmlConfig(java.lang.String)"], ["com.hazelcast.config.FileSystemXmlConfig", "com.hazelcast.config.FileSystemXmlConfig(java.lang.String, java.util.Properties)"], ["com.hazelcast.config.FileSystemXmlConfig", "com.hazelcast.config.FileSystemXmlConfig(java.io.File)"], ["com.hazelcast.config.FileSystemXmlConfig", "com.hazelcast.config.FileSystemXmlConfig(java.io.File, java.util.Properties)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$6.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$6.createNew(java.lang.Object)"], ["com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy[]", "com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy.values()"], ["com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy", "com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy.valueOf(java.lang.String)"], ["com.hazelcast.config.EvictionConfig$MaxSizePolicy", "com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy.toMaxSizePolicy()"], ["com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy", "com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy.fromMaxSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig()"], ["boolean", "com.hazelcast.config.ServiceConfig.isEnabled()"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig.setEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.ServiceConfig.getName()"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.ServiceConfig.getClassName()"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig.setClassName(java.lang.String)"], ["java.lang.Object", "com.hazelcast.config.ServiceConfig.getImplementation()"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig.setImplementation(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.config.ServiceConfig.getServiceImpl()"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig.setServiceImpl(java.lang.Object)"], ["java.util.Properties", "com.hazelcast.config.ServiceConfig.getProperties()"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig.setProperties(java.util.Properties)"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig.addProperty(java.lang.String, java.lang.String)"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServiceConfig.setConfigObject(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.config.ServiceConfig.getConfigObject()"], ["boolean", "com.hazelcast.config.ServiceConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.ServiceConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.ServiceConfig.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$23.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$23.createNew(java.lang.Object)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig()"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig(java.lang.String)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.ReliableTopicConfig.getName()"], ["com.hazelcast.topic.TopicOverloadPolicy", "com.hazelcast.config.ReliableTopicConfig.getTopicOverloadPolicy()"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig.setTopicOverloadPolicy(com.hazelcast.topic.TopicOverloadPolicy)"], ["java.util.concurrent.Executor", "com.hazelcast.config.ReliableTopicConfig.getExecutor()"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig.setExecutor(java.util.concurrent.Executor)"], ["int", "com.hazelcast.config.ReliableTopicConfig.getReadBatchSize()"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig.setReadBatchSize(int)"], ["boolean", "com.hazelcast.config.ReliableTopicConfig.isStatisticsEnabled()"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig.setMessageListenerConfigs(java.util.List<com.hazelcast.config.ListenerConfig>)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig.addMessageListenerConfig(com.hazelcast.config.ListenerConfig)"], ["java.lang.String", "com.hazelcast.config.ReliableTopicConfig.toString()"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig.getAsReadOnly()"], ["int", "com.hazelcast.config.ReliableTopicConfig.getFactoryId()"], ["int", "com.hazelcast.config.ReliableTopicConfig.getId()"], ["void", "com.hazelcast.config.ReliableTopicConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.ReliableTopicConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.ReliableTopicConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.ReliableTopicConfig.hashCode()"], ["com.hazelcast.config.SSLConfig", "com.hazelcast.config.SSLConfig()"], ["java.lang.String", "com.hazelcast.config.SSLConfig.getFactoryClassName()"], ["com.hazelcast.config.SSLConfig", "com.hazelcast.config.SSLConfig.setFactoryClassName(java.lang.String)"], ["boolean", "com.hazelcast.config.SSLConfig.isEnabled()"], ["com.hazelcast.config.SSLConfig", "com.hazelcast.config.SSLConfig.setEnabled(boolean)"], ["com.hazelcast.config.SSLConfig", "com.hazelcast.config.SSLConfig.setFactoryImplementation(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.config.SSLConfig.getFactoryImplementation()"], ["com.hazelcast.config.SSLConfig", "com.hazelcast.config.SSLConfig.setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.config.SSLConfig.getProperty(java.lang.String)"], ["java.util.Properties", "com.hazelcast.config.SSLConfig.getProperties()"], ["com.hazelcast.config.SSLConfig", "com.hazelcast.config.SSLConfig.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.SSLConfig.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$32.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$32.createNew(java.lang.Object)"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig()"], ["java.lang.String", "com.hazelcast.config.WanPublisherConfig.getGroupName()"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig.setGroupName(java.lang.String)"], ["int", "com.hazelcast.config.WanPublisherConfig.getQueueCapacity()"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig.setQueueCapacity(int)"], ["com.hazelcast.config.WANQueueFullBehavior", "com.hazelcast.config.WanPublisherConfig.getQueueFullBehavior()"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig.setQueueFullBehavior(com.hazelcast.config.WANQueueFullBehavior)"], ["java.util.Map<java.lang.String, java.lang.Comparable>", "com.hazelcast.config.WanPublisherConfig.getProperties()"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig.setProperties(java.util.Map<java.lang.String, java.lang.Comparable>)"], ["java.lang.String", "com.hazelcast.config.WanPublisherConfig.getClassName()"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig.setClassName(java.lang.String)"], ["java.lang.Object", "com.hazelcast.config.WanPublisherConfig.getImplementation()"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig.setImplementation(java.lang.Object)"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.WanPublisherConfig.getAwsConfig()"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig.setAwsConfig(com.hazelcast.config.AwsConfig)"], ["com.hazelcast.config.DiscoveryConfig", "com.hazelcast.config.WanPublisherConfig.getDiscoveryConfig()"], ["com.hazelcast.config.WanPublisherConfig", "com.hazelcast.config.WanPublisherConfig.setDiscoveryConfig(com.hazelcast.config.DiscoveryConfig)"], ["java.lang.String", "com.hazelcast.config.WanPublisherConfig.toString()"], ["int", "com.hazelcast.config.WanPublisherConfig.getFactoryId()"], ["int", "com.hazelcast.config.WanPublisherConfig.getId()"], ["void", "com.hazelcast.config.WanPublisherConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.WanPublisherConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.config.ConfigDataSerializerHook", "com.hazelcast.config.ConfigDataSerializerHook()"], ["int", "com.hazelcast.config.ConfigDataSerializerHook.getFactoryId()"], ["com.hazelcast.nio.serialization.DataSerializableFactory", "com.hazelcast.config.ConfigDataSerializerHook.createFactory()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$39.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$39.createNew(java.lang.Object)"], ["com.hazelcast.config.NearCachePreloaderConfig$NearCachePreloaderConfigReadOnly", "com.hazelcast.config.NearCachePreloaderConfig$NearCachePreloaderConfigReadOnly()"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig$NearCachePreloaderConfigReadOnly.setEnabled(boolean)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig$NearCachePreloaderConfigReadOnly.setDirectory(java.lang.String)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig$NearCachePreloaderConfigReadOnly.setStoreInitialDelaySeconds(int)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.config.NearCachePreloaderConfig$NearCachePreloaderConfigReadOnly.setStoreIntervalSeconds(int)"], ["int", "com.hazelcast.config.NearCachePreloaderConfig$NearCachePreloaderConfigReadOnly.getId()"], ["com.hazelcast.config.CacheDeserializedValues[]", "com.hazelcast.config.CacheDeserializedValues.values()"], ["com.hazelcast.config.CacheDeserializedValues", "com.hazelcast.config.CacheDeserializedValues.valueOf(java.lang.String)"], ["com.hazelcast.config.CacheDeserializedValues", "com.hazelcast.config.CacheDeserializedValues.parseString(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$1.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$1.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$45.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$45.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$18.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$18.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$41.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$41.createNew(java.lang.Object)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig$PNCounterConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig$PNCounterConfigReadOnly.setReplicaCount(int)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig$PNCounterConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.PNCounterConfig$PNCounterConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$40.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$40.createNew(java.lang.Object)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.RecentlyActiveQuorumConfigBuilder.build()"], ["com.hazelcast.config.WanReplicationConfig", "com.hazelcast.config.WanReplicationConfig()"], ["java.lang.String", "com.hazelcast.config.WanReplicationConfig.getName()"], ["com.hazelcast.config.WanReplicationConfig", "com.hazelcast.config.WanReplicationConfig.setName(java.lang.String)"], ["com.hazelcast.config.WanConsumerConfig", "com.hazelcast.config.WanReplicationConfig.getWanConsumerConfig()"], ["com.hazelcast.config.WanReplicationConfig", "com.hazelcast.config.WanReplicationConfig.setWanConsumerConfig(com.hazelcast.config.WanConsumerConfig)"], ["void", "com.hazelcast.config.WanReplicationConfig.setWanPublisherConfigs(java.util.List<com.hazelcast.config.WanPublisherConfig>)"], ["com.hazelcast.config.WanReplicationConfig", "com.hazelcast.config.WanReplicationConfig.addWanPublisherConfig(com.hazelcast.config.WanPublisherConfig)"], ["java.lang.String", "com.hazelcast.config.WanReplicationConfig.toString()"], ["int", "com.hazelcast.config.WanReplicationConfig.getFactoryId()"], ["int", "com.hazelcast.config.WanReplicationConfig.getId()"], ["void", "com.hazelcast.config.WanReplicationConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.WanReplicationConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.config.Config", "com.hazelcast.config.ConfigLoader.load(java.lang.String)"], ["java.net.URL", "com.hazelcast.config.ConfigLoader.locateConfig(java.lang.String)"], ["com.hazelcast.config.MaxSizeConfigReadOnly", "com.hazelcast.config.MaxSizeConfigReadOnly(com.hazelcast.config.MaxSizeConfig)"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MaxSizeConfigReadOnly.setSize(int)"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MaxSizeConfigReadOnly.setMaxSizePolicy(com.hazelcast.config.MaxSizeConfig$MaxSizePolicy)"], ["com.hazelcast.config.AbstractXmlConfigHelper", "com.hazelcast.config.AbstractXmlConfigHelper()"], ["java.lang.String", "com.hazelcast.config.AbstractXmlConfigHelper.getNamespaceType()"], ["java.lang.String", "com.hazelcast.config.AbstractXmlConfigHelper.cleanNodeName(org.w3c.dom.Node)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$49.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$49.createNew(java.lang.Object)"], ["com.hazelcast.config.JoinConfig", "com.hazelcast.config.JoinConfig()"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.JoinConfig.getMulticastConfig()"], ["com.hazelcast.config.JoinConfig", "com.hazelcast.config.JoinConfig.setMulticastConfig(com.hazelcast.config.MulticastConfig)"], ["com.hazelcast.config.TcpIpConfig", "com.hazelcast.config.JoinConfig.getTcpIpConfig()"], ["com.hazelcast.config.JoinConfig", "com.hazelcast.config.JoinConfig.setTcpIpConfig(com.hazelcast.config.TcpIpConfig)"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.JoinConfig.getAwsConfig()"], ["com.hazelcast.config.JoinConfig", "com.hazelcast.config.JoinConfig.setAwsConfig(com.hazelcast.config.AwsConfig)"], ["com.hazelcast.config.DiscoveryConfig", "com.hazelcast.config.JoinConfig.getDiscoveryConfig()"], ["com.hazelcast.config.JoinConfig", "com.hazelcast.config.JoinConfig.setDiscoveryConfig(com.hazelcast.config.DiscoveryConfig)"], ["void", "com.hazelcast.config.JoinConfig.verify()"], ["java.lang.String", "com.hazelcast.config.JoinConfig.toString()"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig$RingbufferStoreConfigReadOnly.setStoreImplementation(com.hazelcast.core.RingbufferStore)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig$RingbufferStoreConfigReadOnly.setEnabled(boolean)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig$RingbufferStoreConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig$RingbufferStoreConfigReadOnly.setProperties(java.util.Properties)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig$RingbufferStoreConfigReadOnly.setProperty(java.lang.String, java.lang.String)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig$RingbufferStoreConfigReadOnly.setFactoryClassName(java.lang.String)"], ["com.hazelcast.config.RingbufferStoreConfig", "com.hazelcast.config.RingbufferStoreConfig$RingbufferStoreConfigReadOnly.setFactoryImplementation(com.hazelcast.core.RingbufferStoreFactory)"], ["com.hazelcast.config.ListenerConfigReadOnly", "com.hazelcast.config.ListenerConfigReadOnly(com.hazelcast.config.ListenerConfig)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.ListenerConfigReadOnly.setImplementation(java.util.EventListener)"], ["void", "com.hazelcast.config.NearCacheConfigAccessor.initDefaultMaxSizeForOnHeapMaps(com.hazelcast.config.NearCacheConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig(java.lang.String)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig(com.hazelcast.config.MapConfig)"], ["com.hazelcast.config.MapConfigReadOnly", "com.hazelcast.config.MapConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.MapConfig.getName()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setName(java.lang.String)"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.config.MapConfig.getInMemoryFormat()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["int", "com.hazelcast.config.MapConfig.getBackupCount()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setBackupCount(int)"], ["int", "com.hazelcast.config.MapConfig.getAsyncBackupCount()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setAsyncBackupCount(int)"], ["int", "com.hazelcast.config.MapConfig.getTotalBackupCount()"], ["int", "com.hazelcast.config.MapConfig.getEvictionPercentage()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setEvictionPercentage(int)"], ["long", "com.hazelcast.config.MapConfig.getMinEvictionCheckMillis()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMinEvictionCheckMillis(long)"], ["int", "com.hazelcast.config.MapConfig.getTimeToLiveSeconds()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setTimeToLiveSeconds(int)"], ["int", "com.hazelcast.config.MapConfig.getMaxIdleSeconds()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMaxIdleSeconds(int)"], ["com.hazelcast.config.MaxSizeConfig", "com.hazelcast.config.MapConfig.getMaxSizeConfig()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMaxSizeConfig(com.hazelcast.config.MaxSizeConfig)"], ["com.hazelcast.config.EvictionPolicy", "com.hazelcast.config.MapConfig.getEvictionPolicy()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.map.eviction.MapEvictionPolicy", "com.hazelcast.config.MapConfig.getMapEvictionPolicy()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMapEvictionPolicy(com.hazelcast.map.eviction.MapEvictionPolicy)"], ["com.hazelcast.config.MapStoreConfig", "com.hazelcast.config.MapConfig.getMapStoreConfig()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMapStoreConfig(com.hazelcast.config.MapStoreConfig)"], ["com.hazelcast.config.NearCacheConfig", "com.hazelcast.config.MapConfig.getNearCacheConfig()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setNearCacheConfig(com.hazelcast.config.NearCacheConfig)"], ["java.lang.String", "com.hazelcast.config.MapConfig.getMergePolicy()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMergePolicy(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MapConfig.getMergePolicyConfig()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.Class", "com.hazelcast.config.MapConfig.getProvidedMergeTypes()"], ["boolean", "com.hazelcast.config.MapConfig.isStatisticsEnabled()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setStatisticsEnabled(boolean)"], ["boolean", "com.hazelcast.config.MapConfig.isReadBackupData()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setReadBackupData(boolean)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.MapConfig.getWanReplicationRef()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setWanReplicationRef(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.addEntryListenerConfig(com.hazelcast.config.EntryListenerConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setEntryListenerConfigs(java.util.List<com.hazelcast.config.EntryListenerConfig>)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.addMapPartitionLostListenerConfig(com.hazelcast.config.MapPartitionLostListenerConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setPartitionLostListenerConfigs(java.util.List<com.hazelcast.config.MapPartitionLostListenerConfig>)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.addMapIndexConfig(com.hazelcast.config.MapIndexConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMapIndexConfigs(java.util.List<com.hazelcast.config.MapIndexConfig>)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.addMapAttributeConfig(com.hazelcast.config.MapAttributeConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setMapAttributeConfigs(java.util.List<com.hazelcast.config.MapAttributeConfig>)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.addQueryCacheConfig(com.hazelcast.config.QueryCacheConfig)"], ["void", "com.hazelcast.config.MapConfig.setQueryCacheConfigs(java.util.List<com.hazelcast.config.QueryCacheConfig>)"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.MapConfig.getPartitioningStrategyConfig()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setPartitioningStrategyConfig(com.hazelcast.config.PartitioningStrategyConfig)"], ["boolean", "com.hazelcast.config.MapConfig.isNearCacheEnabled()"], ["boolean", "com.hazelcast.config.MapConfig.isOptimizeQueries()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setOptimizeQueries(boolean)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setCacheDeserializedValues(com.hazelcast.config.CacheDeserializedValues)"], ["com.hazelcast.config.HotRestartConfig", "com.hazelcast.config.MapConfig.getHotRestartConfig()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setHotRestartConfig(com.hazelcast.config.HotRestartConfig)"], ["com.hazelcast.config.CacheDeserializedValues", "com.hazelcast.config.MapConfig.getCacheDeserializedValues()"], ["java.lang.String", "com.hazelcast.config.MapConfig.getQuorumName()"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.MapConfig.setQuorumName(java.lang.String)"], ["boolean", "com.hazelcast.config.MapConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MapConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.MapConfig.toString()"], ["int", "com.hazelcast.config.MapConfig.getFactoryId()"], ["int", "com.hazelcast.config.MapConfig.getId()"], ["void", "com.hazelcast.config.MapConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.MapConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig(com.hazelcast.config.EventJournalConfig)"], ["int", "com.hazelcast.config.EventJournalConfig.getCapacity()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig.setCapacity(int)"], ["int", "com.hazelcast.config.EventJournalConfig.getTimeToLiveSeconds()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig.setTimeToLiveSeconds(int)"], ["java.lang.String", "com.hazelcast.config.EventJournalConfig.toString()"], ["java.lang.String", "com.hazelcast.config.EventJournalConfig.getMapName()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig.setMapName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.EventJournalConfig.getCacheName()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig.setCacheName(java.lang.String)"], ["boolean", "com.hazelcast.config.EventJournalConfig.isEnabled()"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.EventJournalConfig.setEnabled(boolean)"], ["int", "com.hazelcast.config.EventJournalConfig.getFactoryId()"], ["int", "com.hazelcast.config.EventJournalConfig.getId()"], ["void", "com.hazelcast.config.EventJournalConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.EventJournalConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.EventJournalConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.EventJournalConfig.hashCode()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig(java.lang.String)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig(com.hazelcast.config.MultiMapConfig)"], ["java.lang.String", "com.hazelcast.config.MultiMapConfig.getName()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setName(java.lang.String)"], ["com.hazelcast.config.MultiMapConfig$ValueCollectionType", "com.hazelcast.config.MultiMapConfig.getValueCollectionType()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setValueCollectionType(java.lang.String)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setValueCollectionType(com.hazelcast.config.MultiMapConfig$ValueCollectionType)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.addEntryListenerConfig(com.hazelcast.config.EntryListenerConfig)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setEntryListenerConfigs(java.util.List<com.hazelcast.config.EntryListenerConfig>)"], ["boolean", "com.hazelcast.config.MultiMapConfig.isBinary()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setBinary(boolean)"], ["int", "com.hazelcast.config.MultiMapConfig.getSyncBackupCount()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setSyncBackupCount(int)"], ["int", "com.hazelcast.config.MultiMapConfig.getBackupCount()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setBackupCount(int)"], ["int", "com.hazelcast.config.MultiMapConfig.getAsyncBackupCount()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setAsyncBackupCount(int)"], ["int", "com.hazelcast.config.MultiMapConfig.getTotalBackupCount()"], ["boolean", "com.hazelcast.config.MultiMapConfig.isStatisticsEnabled()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setStatisticsEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.MultiMapConfig.getQuorumName()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setQuorumName(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.MultiMapConfig.getMergePolicyConfig()"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.MultiMapConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.Class", "com.hazelcast.config.MultiMapConfig.getProvidedMergeTypes()"], ["java.lang.String", "com.hazelcast.config.MultiMapConfig.toString()"], ["int", "com.hazelcast.config.MultiMapConfig.getFactoryId()"], ["int", "com.hazelcast.config.MultiMapConfig.getId()"], ["void", "com.hazelcast.config.MultiMapConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.MultiMapConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.MultiMapConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MultiMapConfig.hashCode()"], ["com.hazelcast.config.MultiMapConfigReadOnly", "com.hazelcast.config.MultiMapConfig.getAsReadOnly()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$47.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$47.createNew(java.lang.Object)"], ["com.hazelcast.config.MCMutualAuthConfig", "com.hazelcast.config.MCMutualAuthConfig()"], ["java.lang.String", "com.hazelcast.config.MCMutualAuthConfig.getFactoryClassName()"], ["com.hazelcast.config.MCMutualAuthConfig", "com.hazelcast.config.MCMutualAuthConfig.setFactoryClassName(java.lang.String)"], ["boolean", "com.hazelcast.config.MCMutualAuthConfig.isEnabled()"], ["com.hazelcast.config.MCMutualAuthConfig", "com.hazelcast.config.MCMutualAuthConfig.setEnabled(boolean)"], ["com.hazelcast.config.MCMutualAuthConfig", "com.hazelcast.config.MCMutualAuthConfig.setFactoryImplementation(java.lang.Object)"], ["java.lang.Object", "com.hazelcast.config.MCMutualAuthConfig.getFactoryImplementation()"], ["com.hazelcast.config.MCMutualAuthConfig", "com.hazelcast.config.MCMutualAuthConfig.setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.config.MCMutualAuthConfig.getProperty(java.lang.String)"], ["java.util.Properties", "com.hazelcast.config.MCMutualAuthConfig.getProperties()"], ["com.hazelcast.config.MCMutualAuthConfig", "com.hazelcast.config.MCMutualAuthConfig.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.MCMutualAuthConfig.toString()"], ["com.hazelcast.config.SecurityInterceptorConfig", "com.hazelcast.config.SecurityInterceptorConfig()"], ["com.hazelcast.config.SecurityInterceptorConfig", "com.hazelcast.config.SecurityInterceptorConfig(java.lang.String)"], ["com.hazelcast.config.SecurityInterceptorConfig", "com.hazelcast.config.SecurityInterceptorConfig(com.hazelcast.security.SecurityInterceptor)"], ["java.lang.String", "com.hazelcast.config.SecurityInterceptorConfig.getClassName()"], ["void", "com.hazelcast.config.SecurityInterceptorConfig.setClassName(java.lang.String)"], ["com.hazelcast.security.SecurityInterceptor", "com.hazelcast.config.SecurityInterceptorConfig.getImplementation()"], ["void", "com.hazelcast.config.SecurityInterceptorConfig.setImplementation(com.hazelcast.security.SecurityInterceptor)"], ["com.hazelcast.config.QueryCacheConfigReadOnly", "com.hazelcast.config.QueryCacheConfigReadOnly(com.hazelcast.config.QueryCacheConfig)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.getEvictionConfig()"], ["com.hazelcast.config.PredicateConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.getPredicateConfig()"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setBatchSize(int)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setBufferSize(int)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setDelaySeconds(int)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setEntryListenerConfigs(java.util.List<com.hazelcast.config.EntryListenerConfig>)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setIncludeValue(boolean)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setIndexConfigs(java.util.List<com.hazelcast.config.MapIndexConfig>)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setPredicateConfig(com.hazelcast.config.PredicateConfig)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setPopulate(boolean)"], ["com.hazelcast.config.QueryCacheConfig", "com.hazelcast.config.QueryCacheConfigReadOnly.setCoalesce(boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$30.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$30.createNew(java.lang.Object)"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig()"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig(long, java.util.concurrent.TimeUnit)"], ["long", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.getDurationAmount()"], ["java.util.concurrent.TimeUnit", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.getTimeUnit()"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.getFactoryId()"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.getId()"], ["void", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig.toString()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.addSecurityInterceptorConfig(com.hazelcast.config.SecurityInterceptorConfig)"], ["void", "com.hazelcast.config.SecurityConfig.setSecurityInterceptorConfigs(java.util.List<com.hazelcast.config.SecurityInterceptorConfig>)"], ["boolean", "com.hazelcast.config.SecurityConfig.isEnabled()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.setEnabled(boolean)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.addMemberLoginModuleConfig(com.hazelcast.config.LoginModuleConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.addClientLoginModuleConfig(com.hazelcast.config.LoginModuleConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.addClientPermissionConfig(com.hazelcast.config.PermissionConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.setClientLoginModuleConfigs(java.util.List<com.hazelcast.config.LoginModuleConfig>)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.setMemberLoginModuleConfigs(java.util.List<com.hazelcast.config.LoginModuleConfig>)"], ["com.hazelcast.config.PermissionPolicyConfig", "com.hazelcast.config.SecurityConfig.getClientPolicyConfig()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.setClientPolicyConfig(com.hazelcast.config.PermissionPolicyConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.setClientPermissionConfigs(java.util.Set<com.hazelcast.config.PermissionConfig>)"], ["com.hazelcast.config.CredentialsFactoryConfig", "com.hazelcast.config.SecurityConfig.getMemberCredentialsConfig()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.setMemberCredentialsConfig(com.hazelcast.config.CredentialsFactoryConfig)"], ["boolean", "com.hazelcast.config.SecurityConfig.getClientBlockUnmappedActions()"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.SecurityConfig.setClientBlockUnmappedActions(boolean)"], ["java.lang.String", "com.hazelcast.config.SecurityConfig.toString()"], ["boolean", "com.hazelcast.config.SecurityConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.SecurityConfig.hashCode()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig(com.hazelcast.config.CacheSimpleConfig)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getName()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getKeyType()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setKeyType(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getValueType()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setValueType(java.lang.String)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig.isStatisticsEnabled()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setStatisticsEnabled(boolean)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig.isManagementEnabled()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setManagementEnabled(boolean)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig.isReadThrough()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setReadThrough(boolean)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig.isWriteThrough()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setWriteThrough(boolean)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getCacheLoaderFactory()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setCacheLoaderFactory(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getCacheLoader()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setCacheLoader(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getCacheWriterFactory()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setCacheWriterFactory(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getCacheWriter()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setCacheWriter(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig", "com.hazelcast.config.CacheSimpleConfig.getExpiryPolicyFactoryConfig()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setExpiryPolicyFactoryConfig(com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setExpiryPolicyFactory(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.addEntryListenerConfig(com.hazelcast.config.CacheSimpleEntryListenerConfig)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setCacheEntryListeners(java.util.List<com.hazelcast.config.CacheSimpleEntryListenerConfig>)"], ["int", "com.hazelcast.config.CacheSimpleConfig.getAsyncBackupCount()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setAsyncBackupCount(int)"], ["int", "com.hazelcast.config.CacheSimpleConfig.getBackupCount()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setBackupCount(int)"], ["com.hazelcast.config.InMemoryFormat", "com.hazelcast.config.CacheSimpleConfig.getInMemoryFormat()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheSimpleConfig.getEvictionConfig()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.CacheSimpleConfig.getWanReplicationRef()"], ["void", "com.hazelcast.config.CacheSimpleConfig.setWanReplicationRef(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setPartitionLostListenerConfigs(java.util.List<com.hazelcast.config.CachePartitionLostListenerConfig>)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.addCachePartitionLostListenerConfig(com.hazelcast.config.CachePartitionLostListenerConfig)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getQuorumName()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.getMergePolicy()"], ["void", "com.hazelcast.config.CacheSimpleConfig.setMergePolicy(java.lang.String)"], ["java.lang.Class", "com.hazelcast.config.CacheSimpleConfig.getProvidedMergeTypes()"], ["com.hazelcast.config.HotRestartConfig", "com.hazelcast.config.CacheSimpleConfig.getHotRestartConfig()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfig.setHotRestartConfig(com.hazelcast.config.HotRestartConfig)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig.isDisablePerEntryInvalidationEvents()"], ["void", "com.hazelcast.config.CacheSimpleConfig.setDisablePerEntryInvalidationEvents(boolean)"], ["int", "com.hazelcast.config.CacheSimpleConfig.getFactoryId()"], ["int", "com.hazelcast.config.CacheSimpleConfig.getId()"], ["void", "com.hazelcast.config.CacheSimpleConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CacheSimpleConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CacheSimpleConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig.toString()"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfig()"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfig(com.hazelcast.config.PartitioningStrategyConfig)"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfig(java.lang.String)"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfig(com.hazelcast.core.PartitioningStrategy)"], ["com.hazelcast.config.PartitioningStrategyConfigReadOnly", "com.hazelcast.config.PartitioningStrategyConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.PartitioningStrategyConfig.getPartitioningStrategyClass()"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfig.setPartitioningStrategyClass(java.lang.String)"], ["com.hazelcast.core.PartitioningStrategy", "com.hazelcast.config.PartitioningStrategyConfig.getPartitioningStrategy()"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfig.setPartitionStrategy(com.hazelcast.core.PartitioningStrategy)"], ["com.hazelcast.config.PartitioningStrategyConfig", "com.hazelcast.config.PartitioningStrategyConfig.setPartitioningStrategy(com.hazelcast.core.PartitioningStrategy)"], ["java.lang.String", "com.hazelcast.config.PartitioningStrategyConfig.toString()"], ["int", "com.hazelcast.config.PartitioningStrategyConfig.getFactoryId()"], ["int", "com.hazelcast.config.PartitioningStrategyConfig.getId()"], ["void", "com.hazelcast.config.PartitioningStrategyConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.PartitioningStrategyConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.PartitioningStrategyConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.PartitioningStrategyConfig.hashCode()"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.config.AtomicReferenceConfig$AtomicReferenceConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.config.AtomicReferenceConfig$AtomicReferenceConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.config.AtomicReferenceConfig$AtomicReferenceConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicReferenceConfig$AtomicReferenceConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicReferenceConfig$AtomicReferenceConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicReferenceConfig$AtomicReferenceConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicReferenceConfig$AtomicReferenceConfigReadOnly.getAsReadOnly()"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.CountDownLatchConfig()"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.CountDownLatchConfig(java.lang.String)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.CountDownLatchConfig(com.hazelcast.config.CountDownLatchConfig)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.CountDownLatchConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.CountDownLatchConfig.getName()"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.CountDownLatchConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CountDownLatchConfig.getQuorumName()"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.CountDownLatchConfig.setQuorumName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.CountDownLatchConfig.toString()"], ["int", "com.hazelcast.config.CountDownLatchConfig.getFactoryId()"], ["int", "com.hazelcast.config.CountDownLatchConfig.getId()"], ["void", "com.hazelcast.config.CountDownLatchConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CountDownLatchConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.CountDownLatchConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CountDownLatchConfig.hashCode()"], ["void", "com.hazelcast.config.DiscoveryConfigReadOnly.setDiscoveryServiceProvider(com.hazelcast.spi.discovery.integration.DiscoveryServiceProvider)"], ["void", "com.hazelcast.config.DiscoveryConfigReadOnly.setNodeFilter(com.hazelcast.spi.discovery.NodeFilter)"], ["void", "com.hazelcast.config.DiscoveryConfigReadOnly.setNodeFilterClass(java.lang.String)"], ["void", "com.hazelcast.config.DiscoveryConfigReadOnly.addDiscoveryStrategyConfig(com.hazelcast.config.DiscoveryStrategyConfig)"], ["void", "com.hazelcast.config.DiscoveryConfigReadOnly.setDiscoveryStrategyConfigs(java.util.List<com.hazelcast.config.DiscoveryStrategyConfig>)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$5.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$5.createNew(java.lang.Object)"], ["com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter()"], ["com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter(com.hazelcast.map.listener.MapListener)"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.entryAdded(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.entryEvicted(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.entryRemoved(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.entryUpdated(com.hazelcast.core.EntryEvent)"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.mapCleared(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.mapEvicted(com.hazelcast.core.MapEvent)"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["com.hazelcast.map.listener.MapListener", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.getMapListener()"], ["int", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.getFactoryId()"], ["int", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.getId()"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.equals(java.lang.Object)"], ["int", "com.hazelcast.config.EntryListenerConfig$MapListenerToEntryListenerAdapter.hashCode()"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRef()"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRef(java.lang.String, java.lang.String, java.util.List<java.lang.String>, boolean)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRef(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.config.WanReplicationRefReadOnly", "com.hazelcast.config.WanReplicationRef.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.WanReplicationRef.getName()"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRef.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.WanReplicationRef.getMergePolicy()"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRef.setMergePolicy(java.lang.String)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRef.addFilter(java.lang.String)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRef.setFilters(java.util.List<java.lang.String>)"], ["boolean", "com.hazelcast.config.WanReplicationRef.isRepublishingEnabled()"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.WanReplicationRef.setRepublishingEnabled(boolean)"], ["void", "com.hazelcast.config.WanReplicationRef.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.WanReplicationRef.readData(com.hazelcast.nio.ObjectDataInput)"], ["java.lang.String", "com.hazelcast.config.WanReplicationRef.toString()"], ["boolean", "com.hazelcast.config.WanReplicationRef.equals(java.lang.Object)"], ["int", "com.hazelcast.config.WanReplicationRef.hashCode()"], ["com.hazelcast.config.NearCacheConfig$LocalUpdatePolicy[]", "com.hazelcast.config.NearCacheConfig$LocalUpdatePolicy.values()"], ["com.hazelcast.config.NearCacheConfig$LocalUpdatePolicy", "com.hazelcast.config.NearCacheConfig$LocalUpdatePolicy.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$16.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$16.createNew(java.lang.Object)"], ["com.hazelcast.config.CacheSimpleConfigReadOnly", "com.hazelcast.config.CacheSimpleConfigReadOnly(com.hazelcast.config.CacheSimpleConfig)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.getEvictionConfig()"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setCacheEntryListeners(java.util.List<com.hazelcast.config.CacheSimpleEntryListenerConfig>)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setCacheLoaderFactory(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setCacheWriterFactory(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setExpiryPolicyFactoryConfig(com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setExpiryPolicyFactory(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setKeyType(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setManagementEnabled(boolean)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setReadThrough(boolean)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setValueType(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setWriteThrough(boolean)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.addEntryListenerConfig(com.hazelcast.config.CacheSimpleEntryListenerConfig)"], ["void", "com.hazelcast.config.CacheSimpleConfigReadOnly.setWanReplicationRef(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setQuorumName(java.lang.String)"], ["void", "com.hazelcast.config.CacheSimpleConfigReadOnly.setMergePolicy(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.addCachePartitionLostListenerConfig(com.hazelcast.config.CachePartitionLostListenerConfig)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setPartitionLostListenerConfigs(java.util.List<com.hazelcast.config.CachePartitionLostListenerConfig>)"], ["void", "com.hazelcast.config.CacheSimpleConfigReadOnly.setDisablePerEntryInvalidationEvents(boolean)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.CacheSimpleConfigReadOnly.setHotRestartConfig(com.hazelcast.config.HotRestartConfig)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig()"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig(java.lang.String)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig(java.lang.String, int, int, int)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig(java.lang.String, int, int, int, java.lang.String, com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)"], ["java.lang.String", "com.hazelcast.config.ScheduledExecutorConfig.getName()"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig.setName(java.lang.String)"], ["int", "com.hazelcast.config.ScheduledExecutorConfig.getPoolSize()"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig.setPoolSize(int)"], ["int", "com.hazelcast.config.ScheduledExecutorConfig.getDurability()"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig.setDurability(int)"], ["int", "com.hazelcast.config.ScheduledExecutorConfig.getCapacity()"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig.setCapacity(int)"], ["java.lang.String", "com.hazelcast.config.ScheduledExecutorConfig.getQuorumName()"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig.setQuorumName(java.lang.String)"], ["com.hazelcast.config.MergePolicyConfig", "com.hazelcast.config.ScheduledExecutorConfig.getMergePolicyConfig()"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["java.lang.Class", "com.hazelcast.config.ScheduledExecutorConfig.getProvidedMergeTypes()"], ["java.lang.String", "com.hazelcast.config.ScheduledExecutorConfig.toString()"], ["int", "com.hazelcast.config.ScheduledExecutorConfig.getFactoryId()"], ["int", "com.hazelcast.config.ScheduledExecutorConfig.getId()"], ["void", "com.hazelcast.config.ScheduledExecutorConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.ScheduledExecutorConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.ScheduledExecutorConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.ScheduledExecutorConfig.hashCode()"], ["com.hazelcast.config.WanConsumerConfig", "com.hazelcast.config.WanConsumerConfig()"], ["java.util.Map<java.lang.String, java.lang.Comparable>", "com.hazelcast.config.WanConsumerConfig.getProperties()"], ["com.hazelcast.config.WanConsumerConfig", "com.hazelcast.config.WanConsumerConfig.setProperties(java.util.Map<java.lang.String, java.lang.Comparable>)"], ["java.lang.String", "com.hazelcast.config.WanConsumerConfig.getClassName()"], ["com.hazelcast.config.WanConsumerConfig", "com.hazelcast.config.WanConsumerConfig.setClassName(java.lang.String)"], ["java.lang.Object", "com.hazelcast.config.WanConsumerConfig.getImplementation()"], ["com.hazelcast.config.WanConsumerConfig", "com.hazelcast.config.WanConsumerConfig.setImplementation(java.lang.Object)"], ["java.lang.String", "com.hazelcast.config.WanConsumerConfig.toString()"], ["int", "com.hazelcast.config.WanConsumerConfig.getFactoryId()"], ["int", "com.hazelcast.config.WanConsumerConfig.getId()"], ["void", "com.hazelcast.config.WanConsumerConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.WanConsumerConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$50.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$50.createNew(java.lang.Object)"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig()"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig(com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig)"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.getClassName()"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.getTimedExpiryPolicyFactoryConfig()"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.getFactoryId()"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.getId()"], ["void", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig.toString()"], ["com.hazelcast.config.EvictionConfigReadOnly", "com.hazelcast.config.EvictionConfigReadOnly(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.EvictionConfigReadOnly", "com.hazelcast.config.EvictionConfigReadOnly.setSize(int)"], ["com.hazelcast.config.EvictionConfigReadOnly", "com.hazelcast.config.EvictionConfigReadOnly.setMaximumSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.EvictionConfigReadOnly", "com.hazelcast.config.EvictionConfigReadOnly.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfigReadOnly.setComparatorClassName(java.lang.String)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfigReadOnly.setComparator(com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfigReadOnly.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfigReadOnly.setMaximumSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.EvictionConfigReadOnly.setSize(int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$9.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$9.createNew(java.lang.Object)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig$ReliableTopicConfigReadOnly.setExecutor(java.util.concurrent.Executor)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig$ReliableTopicConfigReadOnly.setReadBatchSize(int)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig$ReliableTopicConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig$ReliableTopicConfigReadOnly.addMessageListenerConfig(com.hazelcast.config.ListenerConfig)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.ReliableTopicConfig$ReliableTopicConfigReadOnly.setTopicOverloadPolicy(com.hazelcast.topic.TopicOverloadPolicy)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfig()"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfig(java.lang.String)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.SetConfig(com.hazelcast.config.SetConfig)"], ["com.hazelcast.config.SetConfigReadOnly", "com.hazelcast.config.SetConfig.getAsReadOnly()"], ["int", "com.hazelcast.config.SetConfig.getId()"], ["java.lang.String", "com.hazelcast.config.SetConfig.toString()"], ["com.hazelcast.config.CollectionConfig", "com.hazelcast.config.SetConfig.getAsReadOnly()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$48.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$48.createNew(java.lang.Object)"], ["com.hazelcast.config.JobTrackerConfigReadOnly", "com.hazelcast.config.JobTrackerConfigReadOnly.setName(java.lang.String)"], ["void", "com.hazelcast.config.JobTrackerConfigReadOnly.setMaxThreadSize(int)"], ["void", "com.hazelcast.config.JobTrackerConfigReadOnly.setRetryCount(int)"], ["void", "com.hazelcast.config.JobTrackerConfigReadOnly.setChunkSize(int)"], ["void", "com.hazelcast.config.JobTrackerConfigReadOnly.setQueueSize(int)"], ["void", "com.hazelcast.config.JobTrackerConfigReadOnly.setCommunicateStats(boolean)"], ["void", "com.hazelcast.config.JobTrackerConfigReadOnly.setTopologyChangedStrategy(com.hazelcast.mapreduce.TopologyChangedStrategy)"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.config.JobTrackerConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig$ScheduledExecutorConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig$ScheduledExecutorConfigReadOnly.setDurability(int)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig$ScheduledExecutorConfigReadOnly.setPoolSize(int)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig$ScheduledExecutorConfigReadOnly.setCapacity(int)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig$ScheduledExecutorConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.ScheduledExecutorConfig$ScheduledExecutorConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.NativeMemoryConfig$MemoryAllocatorType[]", "com.hazelcast.config.NativeMemoryConfig$MemoryAllocatorType.values()"], ["com.hazelcast.config.NativeMemoryConfig$MemoryAllocatorType", "com.hazelcast.config.NativeMemoryConfig$MemoryAllocatorType.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$12.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$12.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$7.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$7.createNew(java.lang.Object)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$31.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$31.createNew(java.lang.Object)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheConfigReadOnly.getEvictionConfig()"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.config.CacheConfigReadOnly.getWanReplicationRef()"], ["java.lang.String", "com.hazelcast.config.CacheConfigReadOnly.getQuorumName()"], ["java.lang.Iterable<javax.cache.configuration.CacheEntryListenerConfiguration<K, V>>", "com.hazelcast.config.CacheConfigReadOnly.getCacheEntryListenerConfigurations()"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.addCacheEntryListenerConfiguration(javax.cache.configuration.CacheEntryListenerConfiguration<K, V>)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.removeCacheEntryListenerConfiguration(javax.cache.configuration.CacheEntryListenerConfiguration<K, V>)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setManagerPrefix(java.lang.String)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setUriString(java.lang.String)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setEvictionConfig(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setManagementEnabled(boolean)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setTypes(java.lang.Class<K>, java.lang.Class<V>)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setStoreByValue(boolean)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setWanReplicationRef(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setHotRestartConfig(com.hazelcast.config.HotRestartConfig)"], ["com.hazelcast.config.CacheConfig<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setPartitionLostListenerConfigs(java.util.List<com.hazelcast.config.CachePartitionLostListenerConfig>)"], ["void", "com.hazelcast.config.CacheConfigReadOnly.setMergePolicy(java.lang.String)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setExpiryPolicyFactory(javax.cache.configuration.Factory<? extends javax.cache.expiry.ExpiryPolicy>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setCacheLoaderFactory(javax.cache.configuration.Factory<? extends javax.cache.integration.CacheLoader<K, V>>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setCacheWriterFactory(javax.cache.configuration.Factory<? extends javax.cache.integration.CacheWriter<? super K, ? super V>>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setWriteThrough(boolean)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.CacheConfigReadOnly.setReadThrough(boolean)"], ["void", "com.hazelcast.config.CacheConfigReadOnly.setDisablePerEntryInvalidationEvents(boolean)"], ["com.hazelcast.config.CacheConfiguration", "com.hazelcast.config.CacheConfigReadOnly.setStoreByValue(boolean)"], ["com.hazelcast.config.CacheConfiguration", "com.hazelcast.config.CacheConfigReadOnly.setTypes(java.lang.Class, java.lang.Class)"], ["com.hazelcast.config.CacheConfiguration", "com.hazelcast.config.CacheConfigReadOnly.setManagementEnabled(boolean)"], ["com.hazelcast.config.CacheConfiguration", "com.hazelcast.config.CacheConfigReadOnly.removeCacheEntryListenerConfiguration(javax.cache.configuration.CacheEntryListenerConfiguration)"], ["com.hazelcast.config.CacheConfiguration", "com.hazelcast.config.CacheConfigReadOnly.addCacheEntryListenerConfiguration(javax.cache.configuration.CacheEntryListenerConfiguration)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$46.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$46.createNew(java.lang.Object)"], ["com.hazelcast.config.TopicConfigReadOnly", "com.hazelcast.config.TopicConfigReadOnly(com.hazelcast.config.TopicConfig)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfigReadOnly.setGlobalOrderingEnabled(boolean)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfigReadOnly.setMultiThreadingEnabled(boolean)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfigReadOnly.addMessageListenerConfig(com.hazelcast.config.ListenerConfig)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfigReadOnly.setMessageListenerConfigs(java.util.List<com.hazelcast.config.ListenerConfig>)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.CacheEvictionConfigReadOnly", "com.hazelcast.config.CacheEvictionConfigReadOnly(com.hazelcast.config.EvictionConfig)"], ["com.hazelcast.config.CacheEvictionConfigReadOnly", "com.hazelcast.config.CacheEvictionConfigReadOnly.setSize(int)"], ["com.hazelcast.config.CacheEvictionConfigReadOnly", "com.hazelcast.config.CacheEvictionConfigReadOnly.setMaximumSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setMaxSizePolicy(com.hazelcast.config.CacheEvictionConfig$CacheMaxSizePolicy)"], ["com.hazelcast.config.CacheEvictionConfigReadOnly", "com.hazelcast.config.CacheEvictionConfigReadOnly.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setComparatorClassName(java.lang.String)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setComparator(com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setSize(int)"], ["com.hazelcast.config.CacheEvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setMaximumSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setComparator(com.hazelcast.internal.eviction.EvictionPolicyComparator)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setComparatorClassName(java.lang.String)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setEvictionPolicy(com.hazelcast.config.EvictionPolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setMaximumSizePolicy(com.hazelcast.config.EvictionConfig$MaxSizePolicy)"], ["com.hazelcast.config.EvictionConfig", "com.hazelcast.config.CacheEvictionConfigReadOnly.setSize(int)"], ["com.hazelcast.config.CRDTReplicationConfig", "com.hazelcast.config.CRDTReplicationConfig()"], ["int", "com.hazelcast.config.CRDTReplicationConfig.getReplicationPeriodMillis()"], ["com.hazelcast.config.CRDTReplicationConfig", "com.hazelcast.config.CRDTReplicationConfig.setReplicationPeriodMillis(int)"], ["int", "com.hazelcast.config.CRDTReplicationConfig.getMaxConcurrentReplicationTargets()"], ["com.hazelcast.config.CRDTReplicationConfig", "com.hazelcast.config.CRDTReplicationConfig.setMaxConcurrentReplicationTargets(int)"], ["com.hazelcast.config.XmlConfigBuilder", "com.hazelcast.config.XmlConfigBuilder(java.lang.String)"], ["com.hazelcast.config.XmlConfigBuilder", "com.hazelcast.config.XmlConfigBuilder(java.io.InputStream)"], ["com.hazelcast.config.XmlConfigBuilder", "com.hazelcast.config.XmlConfigBuilder(java.net.URL)"], ["com.hazelcast.config.XmlConfigBuilder", "com.hazelcast.config.XmlConfigBuilder()"], ["java.util.Properties", "com.hazelcast.config.XmlConfigBuilder.getProperties()"], ["com.hazelcast.config.XmlConfigBuilder", "com.hazelcast.config.XmlConfigBuilder.setProperties(java.util.Properties)"], ["com.hazelcast.config.Config", "com.hazelcast.config.XmlConfigBuilder.build()"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.config.NativeMemoryConfig()"], ["com.hazelcast.memory.MemorySize", "com.hazelcast.config.NativeMemoryConfig.getSize()"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.config.NativeMemoryConfig.setSize(com.hazelcast.memory.MemorySize)"], ["boolean", "com.hazelcast.config.NativeMemoryConfig.isEnabled()"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.config.NativeMemoryConfig.setEnabled(boolean)"], ["com.hazelcast.config.NativeMemoryConfig$MemoryAllocatorType", "com.hazelcast.config.NativeMemoryConfig.getAllocatorType()"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.config.NativeMemoryConfig.setAllocatorType(com.hazelcast.config.NativeMemoryConfig$MemoryAllocatorType)"], ["int", "com.hazelcast.config.NativeMemoryConfig.getMinBlockSize()"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.config.NativeMemoryConfig.setMinBlockSize(int)"], ["int", "com.hazelcast.config.NativeMemoryConfig.getPageSize()"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.config.NativeMemoryConfig.setPageSize(int)"], ["float", "com.hazelcast.config.NativeMemoryConfig.getMetadataSpacePercentage()"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.config.NativeMemoryConfig.setMetadataSpacePercentage(float)"], ["boolean", "com.hazelcast.config.NativeMemoryConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.NativeMemoryConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.NativeMemoryConfig.toString()"], ["com.hazelcast.config.EvictionPolicy[]", "com.hazelcast.config.EvictionPolicy.values()"], ["com.hazelcast.config.EvictionPolicy", "com.hazelcast.config.EvictionPolicy.valueOf(java.lang.String)"], ["com.hazelcast.config.CachePartitionLostListenerConfigReadOnly", "com.hazelcast.config.CachePartitionLostListenerConfigReadOnly(com.hazelcast.config.CachePartitionLostListenerConfig)"], ["com.hazelcast.cache.impl.event.CachePartitionLostListener", "com.hazelcast.config.CachePartitionLostListenerConfigReadOnly.getImplementation()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfigReadOnly.setClassName(java.lang.String)"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfigReadOnly.setImplementation(java.util.EventListener)"], ["com.hazelcast.config.CachePartitionLostListenerConfig", "com.hazelcast.config.CachePartitionLostListenerConfigReadOnly.setImplementation(com.hazelcast.cache.impl.event.CachePartitionLostListener)"], ["java.util.EventListener", "com.hazelcast.config.CachePartitionLostListenerConfigReadOnly.getImplementation()"], ["com.hazelcast.config.WANQueueFullBehavior[]", "com.hazelcast.config.WANQueueFullBehavior.values()"], ["com.hazelcast.config.WANQueueFullBehavior", "com.hazelcast.config.WANQueueFullBehavior.valueOf(java.lang.String)"], ["int", "com.hazelcast.config.WANQueueFullBehavior.getId()"], ["com.hazelcast.config.WANQueueFullBehavior", "com.hazelcast.config.WANQueueFullBehavior.getByType(int)"], ["com.hazelcast.config.CacheSimpleEntryListenerConfigReadOnly", "com.hazelcast.config.CacheSimpleEntryListenerConfigReadOnly(com.hazelcast.config.CacheSimpleEntryListenerConfig)"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfigReadOnly.setSynchronous(boolean)"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfigReadOnly.setOldValueRequired(boolean)"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfigReadOnly.setCacheEntryEventFilterFactory(java.lang.String)"], ["void", "com.hazelcast.config.CacheSimpleEntryListenerConfigReadOnly.setCacheEntryListenerFactory(java.lang.String)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig()"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig(com.hazelcast.config.PermissionConfig$PermissionType, java.lang.String, java.lang.String)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig(com.hazelcast.config.PermissionConfig)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig.addEndpoint(java.lang.String)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig.addAction(java.lang.String)"], ["com.hazelcast.config.PermissionConfig$PermissionType", "com.hazelcast.config.PermissionConfig.getType()"], ["java.lang.String", "com.hazelcast.config.PermissionConfig.getName()"], ["java.lang.String", "com.hazelcast.config.PermissionConfig.getPrincipal()"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig.setType(com.hazelcast.config.PermissionConfig$PermissionType)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig.setName(java.lang.String)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig.setPrincipal(java.lang.String)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig.setActions(java.util.Set<java.lang.String>)"], ["com.hazelcast.config.PermissionConfig", "com.hazelcast.config.PermissionConfig.setEndpoints(java.util.Set<java.lang.String>)"], ["boolean", "com.hazelcast.config.PermissionConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.PermissionConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.PermissionConfig.toString()"], ["com.hazelcast.config.SerializerConfig", "com.hazelcast.config.SerializerConfig()"], ["java.lang.String", "com.hazelcast.config.SerializerConfig.getClassName()"], ["com.hazelcast.config.SerializerConfig", "com.hazelcast.config.SerializerConfig.setClass(java.lang.Class<? extends com.hazelcast.nio.serialization.Serializer>)"], ["com.hazelcast.config.SerializerConfig", "com.hazelcast.config.SerializerConfig.setClassName(java.lang.String)"], ["com.hazelcast.nio.serialization.Serializer", "com.hazelcast.config.SerializerConfig.getImplementation()"], ["com.hazelcast.config.SerializerConfig", "com.hazelcast.config.SerializerConfig.setImplementation(com.hazelcast.nio.serialization.Serializer)"], ["java.lang.Class", "com.hazelcast.config.SerializerConfig.getTypeClass()"], ["com.hazelcast.config.SerializerConfig", "com.hazelcast.config.SerializerConfig.setTypeClass(java.lang.Class)"], ["java.lang.String", "com.hazelcast.config.SerializerConfig.getTypeClassName()"], ["com.hazelcast.config.SerializerConfig", "com.hazelcast.config.SerializerConfig.setTypeClassName(java.lang.String)"], ["boolean", "com.hazelcast.config.SerializerConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.SerializerConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.SerializerConfig.toString()"], ["com.hazelcast.config.UrlXmlConfig", "com.hazelcast.config.UrlXmlConfig(java.lang.String)"], ["com.hazelcast.config.UrlXmlConfig", "com.hazelcast.config.UrlXmlConfig(java.lang.String, java.util.Properties)"], ["com.hazelcast.config.UrlXmlConfig", "com.hazelcast.config.UrlXmlConfig(java.net.URL)"], ["com.hazelcast.config.UrlXmlConfig", "com.hazelcast.config.UrlXmlConfig(java.net.URL, java.util.Properties)"], ["com.hazelcast.config.AbstractCacheConfig", "com.hazelcast.config.AbstractCacheConfig()"], ["com.hazelcast.config.AbstractCacheConfig", "com.hazelcast.config.AbstractCacheConfig(javax.cache.configuration.CompleteConfiguration<K, V>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.addCacheEntryListenerConfiguration(javax.cache.configuration.CacheEntryListenerConfiguration<K, V>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.removeCacheEntryListenerConfiguration(javax.cache.configuration.CacheEntryListenerConfiguration<K, V>)"], ["java.lang.Iterable<javax.cache.configuration.CacheEntryListenerConfiguration<K, V>>", "com.hazelcast.config.AbstractCacheConfig.getCacheEntryListenerConfigurations()"], ["boolean", "com.hazelcast.config.AbstractCacheConfig.isReadThrough()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setReadThrough(boolean)"], ["boolean", "com.hazelcast.config.AbstractCacheConfig.isWriteThrough()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setWriteThrough(boolean)"], ["boolean", "com.hazelcast.config.AbstractCacheConfig.isStatisticsEnabled()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setStatisticsEnabled(boolean)"], ["boolean", "com.hazelcast.config.AbstractCacheConfig.isManagementEnabled()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setManagementEnabled(boolean)"], ["com.hazelcast.config.HotRestartConfig", "com.hazelcast.config.AbstractCacheConfig.getHotRestartConfig()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setHotRestartConfig(com.hazelcast.config.HotRestartConfig)"], ["javax.cache.configuration.Factory<javax.cache.integration.CacheLoader<K, V>>", "com.hazelcast.config.AbstractCacheConfig.getCacheLoaderFactory()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setCacheLoaderFactory(javax.cache.configuration.Factory<? extends javax.cache.integration.CacheLoader<K, V>>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setExpiryPolicyFactory(javax.cache.configuration.Factory<? extends javax.cache.expiry.ExpiryPolicy>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setCacheWriterFactory(javax.cache.configuration.Factory<? extends javax.cache.integration.CacheWriter<? super K, ? super V>>)"], ["javax.cache.configuration.Factory<javax.cache.integration.CacheWriter<? super K, ? super V>>", "com.hazelcast.config.AbstractCacheConfig.getCacheWriterFactory()"], ["java.lang.String", "com.hazelcast.config.AbstractCacheConfig.getKeyClassName()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setKeyClassName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AbstractCacheConfig.getValueClassName()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setValueClassName(java.lang.String)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setTypes(java.lang.Class<K>, java.lang.Class<V>)"], ["boolean", "com.hazelcast.config.AbstractCacheConfig.isStoreByValue()"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setStoreByValue(boolean)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setKeyType(java.lang.Class<K>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setValueType(java.lang.Class<V>)"], ["com.hazelcast.config.CacheConfiguration<K, V>", "com.hazelcast.config.AbstractCacheConfig.setListenerConfigurations()"], ["java.util.Set<javax.cache.configuration.CacheEntryListenerConfiguration<K, V>>", "com.hazelcast.config.AbstractCacheConfig.getListenerConfigurations()"], ["int", "com.hazelcast.config.AbstractCacheConfig.hashCode()"], ["boolean", "com.hazelcast.config.AbstractCacheConfig.equals(java.lang.Object)"], ["com.hazelcast.config.QuorumConfigBuilder", "com.hazelcast.config.QuorumConfigBuilder()"], ["com.hazelcast.config.QuorumConfigBuilder", "com.hazelcast.config.QuorumConfigBuilder.enabled(boolean)"], ["com.hazelcast.config.QuorumConfigBuilder", "com.hazelcast.config.QuorumConfigBuilder.withQuorumSize(int)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$20.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$20.createNew(java.lang.Object)"], ["com.hazelcast.config.XmlElements[]", "com.hazelcast.config.XmlElements.values()"], ["com.hazelcast.config.XmlElements", "com.hazelcast.config.XmlElements.valueOf(java.lang.String)"], ["boolean", "com.hazelcast.config.XmlElements.canOccurMultipleTimes(java.lang.String)"], ["boolean", "com.hazelcast.config.XmlElements.isEqual(java.lang.String)"], ["com.hazelcast.config.ServicesConfig", "com.hazelcast.config.ServicesConfig()"], ["boolean", "com.hazelcast.config.ServicesConfig.isEnableDefaults()"], ["com.hazelcast.config.ServicesConfig", "com.hazelcast.config.ServicesConfig.setEnableDefaults(boolean)"], ["com.hazelcast.config.ServicesConfig", "com.hazelcast.config.ServicesConfig.clear()"], ["com.hazelcast.config.ServicesConfig", "com.hazelcast.config.ServicesConfig.setServiceConfigs(java.util.Collection<com.hazelcast.config.ServiceConfig>)"], ["com.hazelcast.config.ServicesConfig", "com.hazelcast.config.ServicesConfig.addServiceConfig(com.hazelcast.config.ServiceConfig)"], ["com.hazelcast.config.ServiceConfig", "com.hazelcast.config.ServicesConfig.getServiceConfig(java.lang.String)"], ["boolean", "com.hazelcast.config.ServicesConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.ServicesConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.ServicesConfig.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$38.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$38.createNew(java.lang.Object)"], ["com.hazelcast.config.InterfacesConfig", "com.hazelcast.config.InterfacesConfig()"], ["boolean", "com.hazelcast.config.InterfacesConfig.isEnabled()"], ["com.hazelcast.config.InterfacesConfig", "com.hazelcast.config.InterfacesConfig.setEnabled(boolean)"], ["com.hazelcast.config.InterfacesConfig", "com.hazelcast.config.InterfacesConfig.addInterface(java.lang.String)"], ["com.hazelcast.config.InterfacesConfig", "com.hazelcast.config.InterfacesConfig.clear()"], ["com.hazelcast.config.InterfacesConfig", "com.hazelcast.config.InterfacesConfig.setInterfaces(java.util.Collection<java.lang.String>)"], ["boolean", "com.hazelcast.config.InterfacesConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.InterfacesConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.InterfacesConfig.toString()"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.config.AtomicLongConfig$AtomicLongConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.config.AtomicLongConfig$AtomicLongConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.config.AtomicLongConfig$AtomicLongConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicLongConfig$AtomicLongConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicLongConfig$AtomicLongConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicLongConfig$AtomicLongConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.AbstractBasicConfig", "com.hazelcast.config.AtomicLongConfig$AtomicLongConfigReadOnly.getAsReadOnly()"], ["com.hazelcast.config.MemberGroupConfig", "com.hazelcast.config.MemberGroupConfig()"], ["com.hazelcast.config.MemberGroupConfig", "com.hazelcast.config.MemberGroupConfig.addInterface(java.lang.String)"], ["com.hazelcast.config.MemberGroupConfig", "com.hazelcast.config.MemberGroupConfig.clear()"], ["com.hazelcast.config.MemberGroupConfig", "com.hazelcast.config.MemberGroupConfig.setInterfaces(java.util.Collection<java.lang.String>)"], ["boolean", "com.hazelcast.config.MemberGroupConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MemberGroupConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.MemberGroupConfig.toString()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueConfigReadOnly.getQueueStoreConfig()"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setEmptyQueueTtl(int)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setMaxSize(int)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setQueueStoreConfig(com.hazelcast.config.QueueStoreConfig)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.addItemListenerConfig(com.hazelcast.config.ItemListenerConfig)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setItemListenerConfigs(java.util.List<com.hazelcast.config.ItemListenerConfig>)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.QueueConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.MapIndexConfigReadOnly", "com.hazelcast.config.MapIndexConfigReadOnly(com.hazelcast.config.MapIndexConfig)"], ["com.hazelcast.config.MapIndexConfig", "com.hazelcast.config.MapIndexConfigReadOnly.setAttribute(java.lang.String)"], ["com.hazelcast.config.MapIndexConfig", "com.hazelcast.config.MapIndexConfigReadOnly.setOrdered(boolean)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$14.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$14.createNew(java.lang.Object)"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig()"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig(com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig$ExpiryPolicyType, com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig)"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig$ExpiryPolicyType", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.getExpiryPolicyType()"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$DurationConfig", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.getDurationConfig()"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.getFactoryId()"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.getId()"], ["void", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig.toString()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$10.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$10.createNew(java.lang.Object)"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig()"], ["boolean", "com.hazelcast.config.MulticastConfig.isEnabled()"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig.setEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.MulticastConfig.getMulticastGroup()"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig.setMulticastGroup(java.lang.String)"], ["int", "com.hazelcast.config.MulticastConfig.getMulticastPort()"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig.setMulticastPort(int)"], ["int", "com.hazelcast.config.MulticastConfig.getMulticastTimeoutSeconds()"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig.setMulticastTimeoutSeconds(int)"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig.setTrustedInterfaces(java.util.Set<java.lang.String>)"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig.addTrustedInterface(java.lang.String)"], ["int", "com.hazelcast.config.MulticastConfig.getMulticastTimeToLive()"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig.setMulticastTimeToLive(int)"], ["boolean", "com.hazelcast.config.MulticastConfig.isLoopbackModeEnabled()"], ["com.hazelcast.config.MulticastConfig", "com.hazelcast.config.MulticastConfig.setLoopbackModeEnabled(boolean)"], ["boolean", "com.hazelcast.config.MulticastConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MulticastConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.MulticastConfig.toString()"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.IcmpFailureDetectorConfig()"], ["int", "com.hazelcast.config.IcmpFailureDetectorConfig.getTimeoutMilliseconds()"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.IcmpFailureDetectorConfig.setTimeoutMilliseconds(int)"], ["int", "com.hazelcast.config.IcmpFailureDetectorConfig.getIntervalMilliseconds()"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.IcmpFailureDetectorConfig.setIntervalMilliseconds(int)"], ["boolean", "com.hazelcast.config.IcmpFailureDetectorConfig.isFailFastOnStartup()"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.IcmpFailureDetectorConfig.setFailFastOnStartup(boolean)"], ["int", "com.hazelcast.config.IcmpFailureDetectorConfig.getTtl()"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.IcmpFailureDetectorConfig.setTtl(int)"], ["int", "com.hazelcast.config.IcmpFailureDetectorConfig.getMaxAttempts()"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.IcmpFailureDetectorConfig.setMaxAttempts(int)"], ["boolean", "com.hazelcast.config.IcmpFailureDetectorConfig.isEnabled()"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.IcmpFailureDetectorConfig.setEnabled(boolean)"], ["boolean", "com.hazelcast.config.IcmpFailureDetectorConfig.isParallelMode()"], ["com.hazelcast.config.IcmpFailureDetectorConfig", "com.hazelcast.config.IcmpFailureDetectorConfig.setParallelMode(boolean)"], ["java.lang.String", "com.hazelcast.config.IcmpFailureDetectorConfig.toString()"], ["boolean", "com.hazelcast.config.IcmpFailureDetectorConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.IcmpFailureDetectorConfig.hashCode()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig()"], ["java.lang.String", "com.hazelcast.config.AwsConfig.getAccessKey()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setAccessKey(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AwsConfig.getSecretKey()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setSecretKey(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AwsConfig.getRegion()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setRegion(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AwsConfig.getHostHeader()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setHostHeader(java.lang.String)"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setEnabled(boolean)"], ["boolean", "com.hazelcast.config.AwsConfig.isEnabled()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setSecurityGroupName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AwsConfig.getSecurityGroupName()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setTagKey(java.lang.String)"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setTagValue(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AwsConfig.getTagKey()"], ["java.lang.String", "com.hazelcast.config.AwsConfig.getTagValue()"], ["int", "com.hazelcast.config.AwsConfig.getConnectionTimeoutSeconds()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setConnectionTimeoutSeconds(int)"], ["java.lang.String", "com.hazelcast.config.AwsConfig.getIamRole()"], ["com.hazelcast.config.AwsConfig", "com.hazelcast.config.AwsConfig.setIamRole(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.AwsConfig.toString()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig(com.hazelcast.config.QueueStoreConfig)"], ["com.hazelcast.core.QueueStore", "com.hazelcast.config.QueueStoreConfig.getStoreImplementation()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig.setStoreImplementation(com.hazelcast.core.QueueStore)"], ["com.hazelcast.config.QueueStoreConfigReadOnly", "com.hazelcast.config.QueueStoreConfig.getAsReadOnly()"], ["boolean", "com.hazelcast.config.QueueStoreConfig.isEnabled()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig.setEnabled(boolean)"], ["java.lang.String", "com.hazelcast.config.QueueStoreConfig.getClassName()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig.setClassName(java.lang.String)"], ["java.util.Properties", "com.hazelcast.config.QueueStoreConfig.getProperties()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.QueueStoreConfig.getProperty(java.lang.String)"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig.setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "com.hazelcast.config.QueueStoreConfig.getFactoryClassName()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig.setFactoryClassName(java.lang.String)"], ["com.hazelcast.core.QueueStoreFactory", "com.hazelcast.config.QueueStoreConfig.getFactoryImplementation()"], ["com.hazelcast.config.QueueStoreConfig", "com.hazelcast.config.QueueStoreConfig.setFactoryImplementation(com.hazelcast.core.QueueStoreFactory)"], ["java.lang.String", "com.hazelcast.config.QueueStoreConfig.toString()"], ["int", "com.hazelcast.config.QueueStoreConfig.getFactoryId()"], ["int", "com.hazelcast.config.QueueStoreConfig.getId()"], ["void", "com.hazelcast.config.QueueStoreConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.QueueStoreConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.QueueStoreConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.QueueStoreConfig.hashCode()"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$37.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$37.createNew(java.lang.Object)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig()"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig(java.lang.String)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig(com.hazelcast.config.LockConfig)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig(java.lang.String, com.hazelcast.config.LockConfig)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig.setName(java.lang.String)"], ["java.lang.String", "com.hazelcast.config.LockConfig.getName()"], ["java.lang.String", "com.hazelcast.config.LockConfig.getQuorumName()"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig.setQuorumName(java.lang.String)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.LockConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.LockConfig.toString()"], ["int", "com.hazelcast.config.LockConfig.getFactoryId()"], ["int", "com.hazelcast.config.LockConfig.getId()"], ["void", "com.hazelcast.config.LockConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.LockConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["boolean", "com.hazelcast.config.LockConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.LockConfig.hashCode()"], ["void", "com.hazelcast.config.FlakeIdGeneratorConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfigReadOnly.setPrefetchCount(int)"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfigReadOnly.setPrefetchValidityMillis(long)"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfigReadOnly.setIdOffset(long)"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfigReadOnly.setNodeIdOffset(long)"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.FlakeIdGeneratorConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.PartitionGroupConfig$MemberGroupType[]", "com.hazelcast.config.PartitionGroupConfig$MemberGroupType.values()"], ["com.hazelcast.config.PartitionGroupConfig$MemberGroupType", "com.hazelcast.config.PartitionGroupConfig$MemberGroupType.valueOf(java.lang.String)"], ["com.hazelcast.config.LoginModuleConfig", "com.hazelcast.config.LoginModuleConfig()"], ["com.hazelcast.config.LoginModuleConfig", "com.hazelcast.config.LoginModuleConfig(java.lang.String, com.hazelcast.config.LoginModuleConfig$LoginModuleUsage)"], ["java.lang.String", "com.hazelcast.config.LoginModuleConfig.getClassName()"], ["java.lang.Object", "com.hazelcast.config.LoginModuleConfig.getImplementation()"], ["java.util.Properties", "com.hazelcast.config.LoginModuleConfig.getProperties()"], ["com.hazelcast.config.LoginModuleConfig$LoginModuleUsage", "com.hazelcast.config.LoginModuleConfig.getUsage()"], ["com.hazelcast.config.LoginModuleConfig", "com.hazelcast.config.LoginModuleConfig.setClassName(java.lang.String)"], ["com.hazelcast.config.LoginModuleConfig", "com.hazelcast.config.LoginModuleConfig.setImplementation(java.lang.Object)"], ["com.hazelcast.config.LoginModuleConfig", "com.hazelcast.config.LoginModuleConfig.setUsage(com.hazelcast.config.LoginModuleConfig$LoginModuleUsage)"], ["com.hazelcast.config.LoginModuleConfig", "com.hazelcast.config.LoginModuleConfig.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.LoginModuleConfig.toString()"], ["boolean", "com.hazelcast.config.LoginModuleConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.LoginModuleConfig.hashCode()"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig()"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig(java.lang.String)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig(com.hazelcast.config.TopicConfig)"], ["com.hazelcast.config.TopicConfigReadOnly", "com.hazelcast.config.TopicConfig.getAsReadOnly()"], ["java.lang.String", "com.hazelcast.config.TopicConfig.getName()"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig.setName(java.lang.String)"], ["boolean", "com.hazelcast.config.TopicConfig.isGlobalOrderingEnabled()"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig.setGlobalOrderingEnabled(boolean)"], ["boolean", "com.hazelcast.config.TopicConfig.isMultiThreadingEnabled()"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig.setMultiThreadingEnabled(boolean)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig.addMessageListenerConfig(com.hazelcast.config.ListenerConfig)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig.setMessageListenerConfigs(java.util.List<com.hazelcast.config.ListenerConfig>)"], ["boolean", "com.hazelcast.config.TopicConfig.isStatisticsEnabled()"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.TopicConfig.setStatisticsEnabled(boolean)"], ["boolean", "com.hazelcast.config.TopicConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.TopicConfig.hashCode()"], ["java.lang.String", "com.hazelcast.config.TopicConfig.toString()"], ["int", "com.hazelcast.config.TopicConfig.getFactoryId()"], ["int", "com.hazelcast.config.TopicConfig.getId()"], ["void", "com.hazelcast.config.TopicConfig.writeData(com.hazelcast.nio.ObjectDataOutput)"], ["void", "com.hazelcast.config.TopicConfig.readData(com.hazelcast.nio.ObjectDataInput)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$15.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$15.createNew(java.lang.Object)"], ["com.hazelcast.config.AbstractConfigBuilder$ConfigType[]", "com.hazelcast.config.AbstractConfigBuilder$ConfigType.values()"], ["com.hazelcast.config.AbstractConfigBuilder$ConfigType", "com.hazelcast.config.AbstractConfigBuilder$ConfigType.valueOf(java.lang.String)"], ["com.hazelcast.nio.serialization.IdentifiedDataSerializable", "com.hazelcast.config.ConfigDataSerializerHook$17.createNew(java.lang.Integer)"], ["java.lang.Object", "com.hazelcast.config.ConfigDataSerializerHook$17.createNew(java.lang.Object)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig$CardinalityEstimatorConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig$CardinalityEstimatorConfigReadOnly.setBackupCount(int)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig$CardinalityEstimatorConfigReadOnly.setAsyncBackupCount(int)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig$CardinalityEstimatorConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.CardinalityEstimatorConfig$CardinalityEstimatorConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.ReplicatedMapConfigReadOnly", "com.hazelcast.config.ReplicatedMapConfigReadOnly(com.hazelcast.config.ReplicatedMapConfig)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setReplicatorExecutorService(java.util.concurrent.ScheduledExecutorService)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setName(java.lang.String)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setReplicationDelayMillis(long)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setConcurrencyLevel(int)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setInMemoryFormat(com.hazelcast.config.InMemoryFormat)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setListenerConfigs(java.util.List<com.hazelcast.config.ListenerConfig>)"], ["void", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setAsyncFillup(boolean)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setStatisticsEnabled(boolean)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setQuorumName(java.lang.String)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setMergePolicy(java.lang.String)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.ReplicatedMapConfigReadOnly.setMergePolicyConfig(com.hazelcast.config.MergePolicyConfig)"], ["com.hazelcast.config.MapPartitionLostListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfig()"], ["com.hazelcast.config.MapPartitionLostListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfig(java.lang.String)"], ["com.hazelcast.config.MapPartitionLostListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfig(com.hazelcast.map.listener.MapPartitionLostListener)"], ["com.hazelcast.config.MapPartitionLostListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfig(com.hazelcast.config.MapPartitionLostListenerConfig)"], ["com.hazelcast.config.MapPartitionLostListenerConfigReadOnly", "com.hazelcast.config.MapPartitionLostListenerConfig.getAsReadOnly()"], ["com.hazelcast.map.listener.MapPartitionLostListener", "com.hazelcast.config.MapPartitionLostListenerConfig.getImplementation()"], ["com.hazelcast.config.MapPartitionLostListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfig.setImplementation(com.hazelcast.map.listener.MapPartitionLostListener)"], ["boolean", "com.hazelcast.config.MapPartitionLostListenerConfig.equals(java.lang.Object)"], ["int", "com.hazelcast.config.MapPartitionLostListenerConfig.hashCode()"], ["int", "com.hazelcast.config.MapPartitionLostListenerConfig.getId()"], ["java.util.EventListener", "com.hazelcast.config.MapPartitionLostListenerConfig.getImplementation()"], ["com.hazelcast.config.ListenerConfig", "com.hazelcast.config.MapPartitionLostListenerConfig.getAsReadOnly()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config(java.lang.String)"], ["java.lang.ClassLoader", "com.hazelcast.config.Config.getClassLoader()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setClassLoader(java.lang.ClassLoader)"], ["com.hazelcast.config.ConfigPatternMatcher", "com.hazelcast.config.Config.getConfigPatternMatcher()"], ["void", "com.hazelcast.config.Config.setConfigPatternMatcher(com.hazelcast.config.ConfigPatternMatcher)"], ["java.lang.String", "com.hazelcast.config.Config.getProperty(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setProperty(java.lang.String, java.lang.String)"], ["com.hazelcast.config.MemberAttributeConfig", "com.hazelcast.config.Config.getMemberAttributeConfig()"], ["void", "com.hazelcast.config.Config.setMemberAttributeConfig(com.hazelcast.config.MemberAttributeConfig)"], ["java.util.Properties", "com.hazelcast.config.Config.getProperties()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setProperties(java.util.Properties)"], ["java.lang.String", "com.hazelcast.config.Config.getInstanceName()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setInstanceName(java.lang.String)"], ["com.hazelcast.config.GroupConfig", "com.hazelcast.config.Config.getGroupConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setGroupConfig(com.hazelcast.config.GroupConfig)"], ["com.hazelcast.config.NetworkConfig", "com.hazelcast.config.Config.getNetworkConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setNetworkConfig(com.hazelcast.config.NetworkConfig)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.Config.findMapConfig(java.lang.String)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.Config.getMapConfigOrNull(java.lang.String)"], ["com.hazelcast.config.MapConfig", "com.hazelcast.config.Config.getMapConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addMapConfig(com.hazelcast.config.MapConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.MapConfig>", "com.hazelcast.config.Config.getMapConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setMapConfigs(java.util.Map<java.lang.String, com.hazelcast.config.MapConfig>)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.Config.findCacheConfig(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.Config.findCacheConfigOrNull(java.lang.String)"], ["com.hazelcast.config.CacheSimpleConfig", "com.hazelcast.config.Config.getCacheConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addCacheConfig(com.hazelcast.config.CacheSimpleConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.CacheSimpleConfig>", "com.hazelcast.config.Config.getCacheConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setCacheConfigs(java.util.Map<java.lang.String, com.hazelcast.config.CacheSimpleConfig>)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.Config.findQueueConfig(java.lang.String)"], ["com.hazelcast.config.QueueConfig", "com.hazelcast.config.Config.getQueueConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addQueueConfig(com.hazelcast.config.QueueConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.QueueConfig>", "com.hazelcast.config.Config.getQueueConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setQueueConfigs(java.util.Map<java.lang.String, com.hazelcast.config.QueueConfig>)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.Config.findLockConfig(java.lang.String)"], ["com.hazelcast.config.LockConfig", "com.hazelcast.config.Config.getLockConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addLockConfig(com.hazelcast.config.LockConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.LockConfig>", "com.hazelcast.config.Config.getLockConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setLockConfigs(java.util.Map<java.lang.String, com.hazelcast.config.LockConfig>)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.Config.findListConfig(java.lang.String)"], ["com.hazelcast.config.ListConfig", "com.hazelcast.config.Config.getListConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addListConfig(com.hazelcast.config.ListConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ListConfig>", "com.hazelcast.config.Config.getListConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setListConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ListConfig>)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.Config.findSetConfig(java.lang.String)"], ["com.hazelcast.config.SetConfig", "com.hazelcast.config.Config.getSetConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addSetConfig(com.hazelcast.config.SetConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.SetConfig>", "com.hazelcast.config.Config.getSetConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setSetConfigs(java.util.Map<java.lang.String, com.hazelcast.config.SetConfig>)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.Config.findMultiMapConfig(java.lang.String)"], ["com.hazelcast.config.MultiMapConfig", "com.hazelcast.config.Config.getMultiMapConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addMultiMapConfig(com.hazelcast.config.MultiMapConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.MultiMapConfig>", "com.hazelcast.config.Config.getMultiMapConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setMultiMapConfigs(java.util.Map<java.lang.String, com.hazelcast.config.MultiMapConfig>)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.Config.findReplicatedMapConfig(java.lang.String)"], ["com.hazelcast.config.ReplicatedMapConfig", "com.hazelcast.config.Config.getReplicatedMapConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ReplicatedMapConfig>", "com.hazelcast.config.Config.getReplicatedMapConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setReplicatedMapConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ReplicatedMapConfig>)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.Config.findRingbufferConfig(java.lang.String)"], ["com.hazelcast.config.RingbufferConfig", "com.hazelcast.config.Config.getRingbufferConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addRingBufferConfig(com.hazelcast.config.RingbufferConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.RingbufferConfig>", "com.hazelcast.config.Config.getRingbufferConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setRingbufferConfigs(java.util.Map<java.lang.String, com.hazelcast.config.RingbufferConfig>)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.config.Config.findAtomicLongConfig(java.lang.String)"], ["com.hazelcast.config.AtomicLongConfig", "com.hazelcast.config.Config.getAtomicLongConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addAtomicLongConfig(com.hazelcast.config.AtomicLongConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.AtomicLongConfig>", "com.hazelcast.config.Config.getAtomicLongConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setAtomicLongConfigs(java.util.Map<java.lang.String, com.hazelcast.config.AtomicLongConfig>)"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.config.Config.findAtomicReferenceConfig(java.lang.String)"], ["com.hazelcast.config.AtomicReferenceConfig", "com.hazelcast.config.Config.getAtomicReferenceConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addAtomicReferenceConfig(com.hazelcast.config.AtomicReferenceConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.AtomicReferenceConfig>", "com.hazelcast.config.Config.getAtomicReferenceConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setAtomicReferenceConfigs(java.util.Map<java.lang.String, com.hazelcast.config.AtomicReferenceConfig>)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.Config.findCountDownLatchConfig(java.lang.String)"], ["com.hazelcast.config.CountDownLatchConfig", "com.hazelcast.config.Config.getCountDownLatchConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addCountDownLatchConfig(com.hazelcast.config.CountDownLatchConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.CountDownLatchConfig>", "com.hazelcast.config.Config.getCountDownLatchConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setCountDownLatchConfigs(java.util.Map<java.lang.String, com.hazelcast.config.CountDownLatchConfig>)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.Config.findTopicConfig(java.lang.String)"], ["com.hazelcast.config.TopicConfig", "com.hazelcast.config.Config.getTopicConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addTopicConfig(com.hazelcast.config.TopicConfig)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.Config.findReliableTopicConfig(java.lang.String)"], ["com.hazelcast.config.ReliableTopicConfig", "com.hazelcast.config.Config.getReliableTopicConfig(java.lang.String)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ReliableTopicConfig>", "com.hazelcast.config.Config.getReliableTopicConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addReliableTopicConfig(com.hazelcast.config.ReliableTopicConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setReliableTopicConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ReliableTopicConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.TopicConfig>", "com.hazelcast.config.Config.getTopicConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setTopicConfigs(java.util.Map<java.lang.String, com.hazelcast.config.TopicConfig>)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.Config.findExecutorConfig(java.lang.String)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.Config.findDurableExecutorConfig(java.lang.String)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.Config.findScheduledExecutorConfig(java.lang.String)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.Config.findCardinalityEstimatorConfig(java.lang.String)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.Config.findPNCounterConfig(java.lang.String)"], ["com.hazelcast.config.ExecutorConfig", "com.hazelcast.config.Config.getExecutorConfig(java.lang.String)"], ["com.hazelcast.config.DurableExecutorConfig", "com.hazelcast.config.Config.getDurableExecutorConfig(java.lang.String)"], ["com.hazelcast.config.ScheduledExecutorConfig", "com.hazelcast.config.Config.getScheduledExecutorConfig(java.lang.String)"], ["com.hazelcast.config.CardinalityEstimatorConfig", "com.hazelcast.config.Config.getCardinalityEstimatorConfig(java.lang.String)"], ["com.hazelcast.config.PNCounterConfig", "com.hazelcast.config.Config.getPNCounterConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addExecutorConfig(com.hazelcast.config.ExecutorConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addDurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addCardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addPNCounterConfig(com.hazelcast.config.PNCounterConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ExecutorConfig>", "com.hazelcast.config.Config.getExecutorConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setExecutorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ExecutorConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.DurableExecutorConfig>", "com.hazelcast.config.Config.getDurableExecutorConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setDurableExecutorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.DurableExecutorConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.ScheduledExecutorConfig>", "com.hazelcast.config.Config.getScheduledExecutorConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setScheduledExecutorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.ScheduledExecutorConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.CardinalityEstimatorConfig>", "com.hazelcast.config.Config.getCardinalityEstimatorConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setCardinalityEstimatorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.CardinalityEstimatorConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.PNCounterConfig>", "com.hazelcast.config.Config.getPNCounterConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setPNCounterConfigs(java.util.Map<java.lang.String, com.hazelcast.config.PNCounterConfig>)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.Config.findSemaphoreConfig(java.lang.String)"], ["com.hazelcast.config.SemaphoreConfig", "com.hazelcast.config.Config.getSemaphoreConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addSemaphoreConfig(com.hazelcast.config.SemaphoreConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.SemaphoreConfig>", "com.hazelcast.config.Config.getSemaphoreConfigsAsMap()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setSemaphoreConfigs(java.util.Map<java.lang.String, com.hazelcast.config.SemaphoreConfig>)"], ["com.hazelcast.config.WanReplicationConfig", "com.hazelcast.config.Config.getWanReplicationConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addWanReplicationConfig(com.hazelcast.config.WanReplicationConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.WanReplicationConfig>", "com.hazelcast.config.Config.getWanReplicationConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setWanReplicationConfigs(java.util.Map<java.lang.String, com.hazelcast.config.WanReplicationConfig>)"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.config.Config.findJobTrackerConfig(java.lang.String)"], ["com.hazelcast.config.JobTrackerConfig", "com.hazelcast.config.Config.getJobTrackerConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addJobTrackerConfig(com.hazelcast.config.JobTrackerConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.JobTrackerConfig>", "com.hazelcast.config.Config.getJobTrackerConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setJobTrackerConfigs(java.util.Map<java.lang.String, com.hazelcast.config.JobTrackerConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.QuorumConfig>", "com.hazelcast.config.Config.getQuorumConfigs()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.Config.getQuorumConfig(java.lang.String)"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.config.Config.findQuorumConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setQuorumConfigs(java.util.Map<java.lang.String, com.hazelcast.config.QuorumConfig>)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addQuorumConfig(com.hazelcast.config.QuorumConfig)"], ["com.hazelcast.config.ManagementCenterConfig", "com.hazelcast.config.Config.getManagementCenterConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setManagementCenterConfig(com.hazelcast.config.ManagementCenterConfig)"], ["com.hazelcast.config.ServicesConfig", "com.hazelcast.config.Config.getServicesConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setServicesConfig(com.hazelcast.config.ServicesConfig)"], ["com.hazelcast.config.SecurityConfig", "com.hazelcast.config.Config.getSecurityConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setSecurityConfig(com.hazelcast.config.SecurityConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addListenerConfig(com.hazelcast.config.ListenerConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setListenerConfigs(java.util.List<com.hazelcast.config.ListenerConfig>)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.Config.findMapEventJournalConfig(java.lang.String)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.Config.findCacheEventJournalConfig(java.lang.String)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.Config.getMapEventJournalConfig(java.lang.String)"], ["com.hazelcast.config.EventJournalConfig", "com.hazelcast.config.Config.getCacheEventJournalConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addEventJournalConfig(com.hazelcast.config.EventJournalConfig)"], ["java.util.Map<java.lang.String, com.hazelcast.config.FlakeIdGeneratorConfig>", "com.hazelcast.config.Config.getFlakeIdGeneratorConfigs()"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.Config.findFlakeIdGeneratorConfig(java.lang.String)"], ["com.hazelcast.config.FlakeIdGeneratorConfig", "com.hazelcast.config.Config.getFlakeIdGeneratorConfig(java.lang.String)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.addFlakeIdGeneratorConfig(com.hazelcast.config.FlakeIdGeneratorConfig)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setFlakeIdGeneratorConfigs(java.util.Map<java.lang.String, com.hazelcast.config.FlakeIdGeneratorConfig>)"], ["java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>", "com.hazelcast.config.Config.getMapEventJournalConfigs()"], ["java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>", "com.hazelcast.config.Config.getCacheEventJournalConfigs()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setMapEventJournalConfigs(java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>)"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setCacheEventJournalConfigs(java.util.Map<java.lang.String, com.hazelcast.config.EventJournalConfig>)"], ["com.hazelcast.config.SerializationConfig", "com.hazelcast.config.Config.getSerializationConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setSerializationConfig(com.hazelcast.config.SerializationConfig)"], ["com.hazelcast.config.PartitionGroupConfig", "com.hazelcast.config.Config.getPartitionGroupConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setPartitionGroupConfig(com.hazelcast.config.PartitionGroupConfig)"], ["com.hazelcast.config.HotRestartPersistenceConfig", "com.hazelcast.config.Config.getHotRestartPersistenceConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setHotRestartPersistenceConfig(com.hazelcast.config.HotRestartPersistenceConfig)"], ["com.hazelcast.config.CRDTReplicationConfig", "com.hazelcast.config.Config.getCRDTReplicationConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setCRDTReplicationConfig(com.hazelcast.config.CRDTReplicationConfig)"], ["com.hazelcast.core.ManagedContext", "com.hazelcast.config.Config.getManagedContext()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setManagedContext(com.hazelcast.core.ManagedContext)"], ["java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.Object>", "com.hazelcast.config.Config.getUserContext()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setUserContext(java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.Object>)"], ["com.hazelcast.config.NativeMemoryConfig", "com.hazelcast.config.Config.getNativeMemoryConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setNativeMemoryConfig(com.hazelcast.config.NativeMemoryConfig)"], ["java.net.URL", "com.hazelcast.config.Config.getConfigurationUrl()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setConfigurationUrl(java.net.URL)"], ["java.io.File", "com.hazelcast.config.Config.getConfigurationFile()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setConfigurationFile(java.io.File)"], ["java.lang.String", "com.hazelcast.config.Config.getLicenseKey()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setLicenseKey(java.lang.String)"], ["boolean", "com.hazelcast.config.Config.isLiteMember()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setLiteMember(boolean)"], ["com.hazelcast.config.UserCodeDeploymentConfig", "com.hazelcast.config.Config.getUserCodeDeploymentConfig()"], ["com.hazelcast.config.Config", "com.hazelcast.config.Config.setUserCodeDeploymentConfig(com.hazelcast.config.UserCodeDeploymentConfig)"], ["java.lang.String", "com.hazelcast.config.Config.toString()"], ["com.hazelcast.config.ClassFilter", "com.hazelcast.config.ClassFilter()"], ["com.hazelcast.config.ClassFilter", "com.hazelcast.config.ClassFilter.addClasses(java.lang.String...)"], ["com.hazelcast.config.ClassFilter", "com.hazelcast.config.ClassFilter.setClasses(java.util.Collection<java.lang.String>)"], ["com.hazelcast.config.ClassFilter", "com.hazelcast.config.ClassFilter.addPackages(java.lang.String...)"], ["com.hazelcast.config.ClassFilter", "com.hazelcast.config.ClassFilter.setPackages(java.util.Collection<java.lang.String>)"], ["boolean", "com.hazelcast.config.ClassFilter.isEmpty()"], ["boolean", "com.hazelcast.config.ClassFilter.isListed(java.lang.String)"], ["int", "com.hazelcast.config.ClassFilter.hashCode()"], ["boolean", "com.hazelcast.config.ClassFilter.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.config.ClassFilter.toString()"], ["com.hazelcast.quorum.impl.AbstractPingAwareQuorumFunction", "com.hazelcast.quorum.impl.AbstractPingAwareQuorumFunction()"], ["void", "com.hazelcast.quorum.impl.AbstractPingAwareQuorumFunction.setHazelcastInstance(com.hazelcast.core.HazelcastInstance)"], ["void", "com.hazelcast.quorum.impl.AbstractPingAwareQuorumFunction.onPingLost(com.hazelcast.core.Member)"], ["void", "com.hazelcast.quorum.impl.AbstractPingAwareQuorumFunction.onPingRestored(com.hazelcast.core.Member)"], ["void", "com.hazelcast.quorum.impl.AbstractPingAwareQuorumFunction.memberAdded(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.quorum.impl.AbstractPingAwareQuorumFunction.memberAttributeChanged(com.hazelcast.core.MemberAttributeEvent)"], ["void", "com.hazelcast.quorum.impl.AbstractPingAwareQuorumFunction.memberRemoved(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl$OnPing.run()"], ["com.hazelcast.quorum.impl.ProbabilisticQuorumFunction", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction(int, long, long, int, long, double)"], ["boolean", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.apply(java.util.Collection<com.hazelcast.core.Member>)"], ["void", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.memberRemoved(com.hazelcast.core.MembershipEvent)"], ["void", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.onHeartbeat(com.hazelcast.core.Member, long)"], ["double", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.getSuspicionThreshold()"], ["int", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.getMaxSampleSize()"], ["long", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.getMinStdDeviationMillis()"], ["long", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.getAcceptableHeartbeatPauseMillis()"], ["long", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.getHeartbeatIntervalMillis()"], ["boolean", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.equals(java.lang.Object)"], ["int", "com.hazelcast.quorum.impl.ProbabilisticQuorumFunction.hashCode()"], ["com.hazelcast.quorum.impl.QuorumServiceImpl", "com.hazelcast.quorum.impl.QuorumServiceImpl(com.hazelcast.spi.impl.NodeEngineImpl)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.start()"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.addQuorumListener(java.lang.String, com.hazelcast.quorum.QuorumListener)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.ensureQuorumPresent(com.hazelcast.spi.Operation)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.ensureQuorumPresent(java.lang.String, com.hazelcast.quorum.QuorumType)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.dispatchEvent(com.hazelcast.quorum.QuorumEvent, com.hazelcast.quorum.QuorumListener)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.memberAdded(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.memberRemoved(com.hazelcast.spi.MembershipServiceEvent)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.memberAttributeChanged(com.hazelcast.spi.MemberAttributeServiceEvent)"], ["com.hazelcast.quorum.Quorum", "com.hazelcast.quorum.impl.QuorumServiceImpl.getQuorum(java.lang.String)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.onHeartbeat(com.hazelcast.core.Member, long)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.onPingLost(com.hazelcast.core.Member)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.onPingRestored(com.hazelcast.core.Member)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl.dispatchEvent(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.hazelcast.quorum.impl.QuorumImpl.getName()"], ["int", "com.hazelcast.quorum.impl.QuorumImpl.getSize()"], ["com.hazelcast.config.QuorumConfig", "com.hazelcast.quorum.impl.QuorumImpl.getConfig()"], ["boolean", "com.hazelcast.quorum.impl.QuorumImpl.isPresent()"], ["java.lang.String", "com.hazelcast.quorum.impl.QuorumImpl.toString()"], ["com.hazelcast.quorum.impl.QuorumImpl$QuorumState[]", "com.hazelcast.quorum.impl.QuorumImpl$QuorumState.values()"], ["com.hazelcast.quorum.impl.QuorumImpl$QuorumState", "com.hazelcast.quorum.impl.QuorumImpl$QuorumState.valueOf(java.lang.String)"], ["com.hazelcast.quorum.impl.MemberCountQuorumFunction", "com.hazelcast.quorum.impl.MemberCountQuorumFunction(int)"], ["boolean", "com.hazelcast.quorum.impl.MemberCountQuorumFunction.apply(java.util.Collection<com.hazelcast.core.Member>)"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl$OnHeartbeat.run()"], ["com.hazelcast.quorum.impl.RecentlyActiveQuorumFunction", "com.hazelcast.quorum.impl.RecentlyActiveQuorumFunction(int, int)"], ["boolean", "com.hazelcast.quorum.impl.RecentlyActiveQuorumFunction.apply(java.util.Collection<com.hazelcast.core.Member>)"], ["void", "com.hazelcast.quorum.impl.RecentlyActiveQuorumFunction.onHeartbeat(com.hazelcast.core.Member, long)"], ["void", "com.hazelcast.quorum.impl.RecentlyActiveQuorumFunction.memberRemoved(com.hazelcast.core.MembershipEvent)"], ["int", "com.hazelcast.quorum.impl.RecentlyActiveQuorumFunction.getHeartbeatToleranceMillis()"], ["boolean", "com.hazelcast.quorum.impl.RecentlyActiveQuorumFunction.equals(java.lang.Object)"], ["int", "com.hazelcast.quorum.impl.RecentlyActiveQuorumFunction.hashCode()"], ["void", "com.hazelcast.quorum.impl.QuorumServiceImpl$UpdateQuorums.run()"], ["com.hazelcast.quorum.QuorumException", "com.hazelcast.quorum.QuorumException(java.lang.String)"], ["com.hazelcast.quorum.QuorumEvent", "com.hazelcast.quorum.QuorumEvent(java.lang.Object, int, java.util.Collection<com.hazelcast.core.Member>, boolean)"], ["int", "com.hazelcast.quorum.QuorumEvent.getThreshold()"], ["boolean", "com.hazelcast.quorum.QuorumEvent.isPresent()"], ["java.lang.String", "com.hazelcast.quorum.QuorumEvent.toString()"], ["com.hazelcast.quorum.QuorumType[]", "com.hazelcast.quorum.QuorumType.values()"], ["com.hazelcast.quorum.QuorumType", "com.hazelcast.quorum.QuorumType.valueOf(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.value(int)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.value(long)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.value(float)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.value(double)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.value(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.value(boolean)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.array()"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.Json.array(int...)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.Json.array(long...)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.Json.array(float...)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.Json.array(double...)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.Json.array(boolean...)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.Json.array(java.lang.String...)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.Json.object()"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.parse(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.Json.parse(java.io.Reader)"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonArray$1.hasNext()"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonArray$1.next()"], ["void", "com.hazelcast.com.eclipsesource.json.JsonArray$1.remove()"], ["java.lang.Object", "com.hazelcast.com.eclipsesource.json.JsonArray$1.next()"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray()"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray(com.hazelcast.com.eclipsesource.json.JsonArray)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.readFrom(java.io.Reader)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.readFrom(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.unmodifiableArray(com.hazelcast.com.eclipsesource.json.JsonArray)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.add(int)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.add(long)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.add(float)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.add(double)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.add(boolean)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.add(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.add(com.hazelcast.com.eclipsesource.json.JsonValue)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.set(int, int)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.set(int, long)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.set(int, float)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.set(int, double)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.set(int, boolean)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.set(int, java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.set(int, com.hazelcast.com.eclipsesource.json.JsonValue)"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.remove(int)"], ["int", "com.hazelcast.com.eclipsesource.json.JsonArray.size()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonArray.isEmpty()"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonArray.get(int)"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonArray.isArray()"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonArray.asArray()"], ["int", "com.hazelcast.com.eclipsesource.json.JsonArray.hashCode()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonArray.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.com.eclipsesource.json.JsonLiteral.toString()"], ["int", "com.hazelcast.com.eclipsesource.json.JsonLiteral.hashCode()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonLiteral.isNull()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonLiteral.isTrue()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonLiteral.isFalse()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonLiteral.isBoolean()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonLiteral.asBoolean()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonLiteral.equals(java.lang.Object)"], ["java.lang.String", "com.hazelcast.com.eclipsesource.json.JsonNumber.toString()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonNumber.isNumber()"], ["int", "com.hazelcast.com.eclipsesource.json.JsonNumber.asInt()"], ["long", "com.hazelcast.com.eclipsesource.json.JsonNumber.asLong()"], ["float", "com.hazelcast.com.eclipsesource.json.JsonNumber.asFloat()"], ["double", "com.hazelcast.com.eclipsesource.json.JsonNumber.asDouble()"], ["int", "com.hazelcast.com.eclipsesource.json.JsonNumber.hashCode()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonNumber.equals(java.lang.Object)"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonObject$1.hasNext()"], ["com.hazelcast.com.eclipsesource.json.JsonObject$Member", "com.hazelcast.com.eclipsesource.json.JsonObject$1.next()"], ["void", "com.hazelcast.com.eclipsesource.json.JsonObject$1.remove()"], ["java.lang.Object", "com.hazelcast.com.eclipsesource.json.JsonObject$1.next()"], ["com.hazelcast.com.eclipsesource.json.JsonObject$HashIndexTable", "com.hazelcast.com.eclipsesource.json.JsonObject$HashIndexTable()"], ["com.hazelcast.com.eclipsesource.json.JsonObject$HashIndexTable", "com.hazelcast.com.eclipsesource.json.JsonObject$HashIndexTable(com.hazelcast.com.eclipsesource.json.JsonObject$HashIndexTable)"], ["java.lang.String", "com.hazelcast.com.eclipsesource.json.JsonObject$Member.getName()"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonObject$Member.getValue()"], ["int", "com.hazelcast.com.eclipsesource.json.JsonObject$Member.hashCode()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonObject$Member.equals(java.lang.Object)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.readFrom(java.io.Reader)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.readFrom(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.unmodifiableObject(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.add(java.lang.String, int)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.add(java.lang.String, long)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.add(java.lang.String, float)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.add(java.lang.String, double)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.add(java.lang.String, boolean)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.add(java.lang.String, java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.add(java.lang.String, com.hazelcast.com.eclipsesource.json.JsonValue)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.set(java.lang.String, int)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.set(java.lang.String, long)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.set(java.lang.String, float)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.set(java.lang.String, double)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.set(java.lang.String, boolean)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.set(java.lang.String, java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.set(java.lang.String, com.hazelcast.com.eclipsesource.json.JsonValue)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.remove(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.merge(com.hazelcast.com.eclipsesource.json.JsonObject)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonObject.get(java.lang.String)"], ["int", "com.hazelcast.com.eclipsesource.json.JsonObject.getInt(java.lang.String, int)"], ["long", "com.hazelcast.com.eclipsesource.json.JsonObject.getLong(java.lang.String, long)"], ["float", "com.hazelcast.com.eclipsesource.json.JsonObject.getFloat(java.lang.String, float)"], ["double", "com.hazelcast.com.eclipsesource.json.JsonObject.getDouble(java.lang.String, double)"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonObject.getBoolean(java.lang.String, boolean)"], ["java.lang.String", "com.hazelcast.com.eclipsesource.json.JsonObject.getString(java.lang.String, java.lang.String)"], ["int", "com.hazelcast.com.eclipsesource.json.JsonObject.size()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonObject.isEmpty()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonObject.isObject()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonObject.asObject()"], ["int", "com.hazelcast.com.eclipsesource.json.JsonObject.hashCode()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonObject.equals(java.lang.Object)"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonString.isString()"], ["java.lang.String", "com.hazelcast.com.eclipsesource.json.JsonString.asString()"], ["int", "com.hazelcast.com.eclipsesource.json.JsonString.hashCode()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonString.equals(java.lang.Object)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonValue.readFrom(java.io.Reader)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonValue.readFrom(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonValue.valueOf(int)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonValue.valueOf(long)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonValue.valueOf(float)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonValue.valueOf(double)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonValue.valueOf(java.lang.String)"], ["com.hazelcast.com.eclipsesource.json.JsonValue", "com.hazelcast.com.eclipsesource.json.JsonValue.valueOf(boolean)"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.isObject()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.isArray()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.isNumber()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.isString()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.isBoolean()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.isTrue()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.isFalse()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.isNull()"], ["com.hazelcast.com.eclipsesource.json.JsonObject", "com.hazelcast.com.eclipsesource.json.JsonValue.asObject()"], ["com.hazelcast.com.eclipsesource.json.JsonArray", "com.hazelcast.com.eclipsesource.json.JsonValue.asArray()"], ["int", "com.hazelcast.com.eclipsesource.json.JsonValue.asInt()"], ["long", "com.hazelcast.com.eclipsesource.json.JsonValue.asLong()"], ["float", "com.hazelcast.com.eclipsesource.json.JsonValue.asFloat()"], ["double", "com.hazelcast.com.eclipsesource.json.JsonValue.asDouble()"], ["java.lang.String", "com.hazelcast.com.eclipsesource.json.JsonValue.asString()"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.asBoolean()"], ["void", "com.hazelcast.com.eclipsesource.json.JsonValue.writeTo(java.io.Writer)"], ["void", "com.hazelcast.com.eclipsesource.json.JsonValue.writeTo(java.io.Writer, com.hazelcast.com.eclipsesource.json.WriterConfig)"], ["java.lang.String", "com.hazelcast.com.eclipsesource.json.JsonValue.toString()"], ["java.lang.String", "com.hazelcast.com.eclipsesource.json.JsonValue.toString(com.hazelcast.com.eclipsesource.json.WriterConfig)"], ["boolean", "com.hazelcast.com.eclipsesource.json.JsonValue.equals(java.lang.Object)"], ["int", "com.hazelcast.com.eclipsesource.json.JsonValue.hashCode()"], ["int", "com.hazelcast.com.eclipsesource.json.ParseException.getOffset()"], ["int", "com.hazelcast.com.eclipsesource.json.ParseException.getLine()"], ["int", "com.hazelcast.com.eclipsesource.json.ParseException.getColumn()"], ["com.hazelcast.com.eclipsesource.json.PrettyPrint", "com.hazelcast.com.eclipsesource.json.PrettyPrint.singleLine()"], ["com.hazelcast.com.eclipsesource.json.PrettyPrint", "com.hazelcast.com.eclipsesource.json.PrettyPrint.indentWithSpaces(int)"], ["com.hazelcast.com.eclipsesource.json.PrettyPrint", "com.hazelcast.com.eclipsesource.json.PrettyPrint.indentWithTabs()"], ["com.hazelcast.com.eclipsesource.json.WriterConfig", "com.hazelcast.com.eclipsesource.json.WriterConfig()"], ["void", "com.hazelcast.com.eclipsesource.json.WritingBuffer.write(int)"], ["void", "com.hazelcast.com.eclipsesource.json.WritingBuffer.write(char[], int, int)"], ["void", "com.hazelcast.com.eclipsesource.json.WritingBuffer.write(java.lang.String, int, int)"], ["void", "com.hazelcast.com.eclipsesource.json.WritingBuffer.flush()"], ["void", "com.hazelcast.com.eclipsesource.json.WritingBuffer.close()"], ["com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig", "com.hazelcast.client.impl.protocol.codec.TimedExpiryPolicyFactoryConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.TimedExpiryPolicyFactoryConfigCodec.encode(com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.TimedExpiryPolicyFactoryConfigCodec.calculateDataSize(com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig)"], ["com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec.encodeRequest()"], ["com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.Address, java.util.List<java.lang.Integer>>>, int)"], ["com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsCodec", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapGetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.config.NearCachePreloaderConfig", "com.hazelcast.client.impl.protocol.codec.NearCachePreloaderConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.NearCachePreloaderConfigCodec.encode(com.hazelcast.config.NearCachePreloaderConfig, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.NearCachePreloaderConfigCodec.calculateDataSize(com.hazelcast.config.NearCachePreloaderConfig)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CachePutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CachePutCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CachePutCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, boolean, int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec.encodeRequest(java.lang.String, long, long, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec$RequestParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapTryLockCodec", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapTryLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapTryLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["javax.transaction.xa.Xid", "com.hazelcast.client.impl.protocol.codec.XIDCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.XIDCodec.encode(javax.transaction.xa.Xid, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.XIDCodec.calculateDataSize(javax.transaction.xa.Xid)"], ["com.hazelcast.map.impl.SimpleEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>", "com.hazelcast.client.impl.protocol.codec.EntryViewCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.EntryViewCodec.encode(com.hazelcast.map.impl.SimpleEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.EntryViewCodec.calculateDataSize(com.hazelcast.map.impl.SimpleEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec$RequestParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec$RequestParameters.calculateDataSize(javax.transaction.xa.Xid)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec$RequestParameters.calculateDataSize(java.lang.String, long, int, int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapUnlockCodec", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.config.WanReplicationRef", "com.hazelcast.client.impl.protocol.codec.WanReplicationRefCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.WanReplicationRefCodec.encode(com.hazelcast.config.WanReplicationRef, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.WanReplicationRefCodec.calculateDataSize(com.hazelcast.config.WanReplicationRef)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec$ResponseParameters.calculateDataSize(long, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapDeleteCodec", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapDeleteCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapDeleteCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.LockTryLockCodec", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec.encodeRequest(java.lang.String, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.LockTryLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.LockTryLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder", "com.hazelcast.client.impl.protocol.codec.RingbufferStoreConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.RingbufferStoreConfigCodec.encode(com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferStoreConfigCodec.calculateDataSize(com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetMessageType[]", "com.hazelcast.client.impl.protocol.codec.TransactionalSetMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetMessageType", "com.hazelcast.client.impl.protocol.codec.TransactionalSetMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalSetMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorMessageType[]", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorMessageType", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetAddAllCodec", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SetAddAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetAddAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.mapreduce.JobPartitionState", "com.hazelcast.client.impl.protocol.codec.JobPartitionStateCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.JobPartitionStateCodec.encode(com.hazelcast.mapreduce.JobPartitionState, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.JobPartitionStateCodec.calculateDataSize(com.hazelcast.mapreduce.JobPartitionState)"], ["com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec$ResponseParameters.calculateDataSize(long, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapPutCodec", "com.hazelcast.client.impl.protocol.codec.MapPutCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapPutCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapPutCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapPutCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapPutCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TopicPublishCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListSetCodec", "com.hazelcast.client.impl.protocol.codec.ListSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListSetCodec.encodeRequest(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListSetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceCodec", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, int, int, long, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapPutAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec.encodeRequest(java.lang.String, com.hazelcast.nio.Address, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec.encodeRequest(java.lang.String, long, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ListGetAllCodec", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListGetAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListGetAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorMessageType[]", "com.hazelcast.client.impl.protocol.codec.DurableExecutorMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorMessageType", "com.hazelcast.client.impl.protocol.codec.DurableExecutorMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec.encodeMapPartitionLostEvent(int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec.encodeRequest(java.lang.String, int, int, int)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec.encodeResponse(int, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec$ResponseParameters.calculateDataSize(long, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.SetAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetAddCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetAddCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.LockUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec$RequestParameters.calculateDataSize(java.lang.String, long, long)"], ["com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec$RequestParameters.calculateDataSize(java.lang.String, boolean, boolean, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveCodec", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec$RequestParameters.calculateDataSize(java.lang.String, long, int, int, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec.encodeRequest(java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec.encodeRequest(java.util.Collection<java.lang.String>, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<java.lang.String, java.util.List<java.util.Map$Entry<java.lang.Integer, java.lang.Long>>>>, java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapGetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ListAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec$RequestParameters.calculateDataSize(com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientPingCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec$RequestParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec.encodeRequest(java.lang.String, java.lang.String, long, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapLockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapLockCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.MapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder", "com.hazelcast.client.impl.protocol.codec.ListenerConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.ListenerConfigCodec.encode(com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.ListenerConfigCodec.calculateDataSize(com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder", "com.hazelcast.client.impl.protocol.codec.MapStoreConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.MapStoreConfigCodec.encode(com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.MapStoreConfigCodec.calculateDataSize(com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec.encodeResponse(long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.map.impl.querycache.event.QueryCacheEventData", "com.hazelcast.client.impl.protocol.codec.QueryCacheEventDataCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.QueryCacheEventDataCodec.encode(com.hazelcast.map.impl.querycache.event.QueryCacheEventData, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.QueryCacheEventDataCodec.calculateDataSize(com.hazelcast.map.impl.querycache.event.QueryCacheEventData)"], ["com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>)"], ["com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, int, int, long, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, int, int, long, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetMessageType[]", "com.hazelcast.client.impl.protocol.codec.SetMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.SetMessageType", "com.hazelcast.client.impl.protocol.codec.SetMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.SetMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListMessageType[]", "com.hazelcast.client.impl.protocol.codec.TransactionalListMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListMessageType", "com.hazelcast.client.impl.protocol.codec.TransactionalListMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalListMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec.encodeRequest(java.lang.String, boolean, boolean, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapDeleteCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionMessageType[]", "com.hazelcast.client.impl.protocol.codec.TransactionMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.TransactionMessageType", "com.hazelcast.client.impl.protocol.codec.TransactionMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec.encodeCachePartitionLostEvent(int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ErrorCodec", "com.hazelcast.client.impl.protocol.codec.ErrorCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ErrorCodec.encode(int, java.lang.String, java.lang.String, java.lang.StackTraceElement[], int, java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.ErrorCodec.calculateDataSize(int, java.lang.String, java.lang.String, java.lang.StackTraceElement[], int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, int, int, int, int, boolean, java.lang.String, com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec$ResponseParameters.calculateDataSize(int, java.util.Collection<com.hazelcast.nio.serialization.Data>, long[], long)"], ["com.hazelcast.client.impl.protocol.codec.MapTryPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec.encodeRequest(java.lang.String, int, int, boolean, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec.encodeRequest()"], ["com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>)"], ["com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, long)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueuePeekCodec", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueuePeekCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueuePeekCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int, int, java.lang.String, com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapGetAllCodec", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapGetAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapGetAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec.encodeRequest(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, boolean, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, java.lang.String, com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig, java.util.Collection<com.hazelcast.config.CacheSimpleEntryListenerConfig>, com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder, com.hazelcast.config.WanReplicationRef, com.hazelcast.config.HotRestartConfig)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorMessageType[]", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorMessageType", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec$ResponseParameters.calculateDataSize(long, long, int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.Address, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$RequestParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.ListIteratorCodec", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListIteratorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListIteratorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec.encodeQueryCacheSingleEvent(com.hazelcast.map.impl.querycache.event.QueryCacheEventData)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec.encodeQueryCacheBatchEvent(java.util.Collection<com.hazelcast.map.impl.querycache.event.QueryCacheEventData>, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec$RequestParameters.calculateDataSize(java.util.Collection<java.lang.String>, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, boolean, boolean, java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheMessageType[]", "com.hazelcast.client.impl.protocol.codec.CacheMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.CacheMessageType", "com.hazelcast.client.impl.protocol.codec.CacheMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ListIteratorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec$RequestParameters.calculateDataSize(com.hazelcast.nio.serialization.Data, java.lang.String, java.lang.String, boolean, java.lang.String, byte, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec.encodeRequest(java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.Address, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueSizeCodec", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.QueueSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec.encodeRequest(java.lang.String, int, int, int, int, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, boolean, java.lang.String, com.hazelcast.nio.serialization.Data, java.lang.String, int, com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder, com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder, com.hazelcast.config.WanReplicationRef, java.util.Collection<com.hazelcast.config.MapIndexConfig>, java.util.Collection<com.hazelcast.config.MapAttributeConfig>, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder>, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.config.HotRestartConfig, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec.encodeResponse(long, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveCodec", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec.encodeRequest(java.lang.String, java.lang.String, boolean, boolean, java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec$RequestParameters.calculateDataSize(java.lang.String, long, int, int, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec.encodeRequest(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec.encodeMemberEvent(com.hazelcast.core.Member, int)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec.encodeMemberListEvent(java.util.Collection<com.hazelcast.core.Member>)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec.encodeMemberAttributeChangeEvent(java.lang.String, java.lang.String, int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec.encodeRequest(java.lang.String, java.lang.String, boolean, int, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.LockLockCodec", "com.hazelcast.client.impl.protocol.codec.LockLockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockLockCodec.encodeRequest(java.lang.String, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.LockLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockLockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockLockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.LockLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockLockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapMessageType[]", "com.hazelcast.client.impl.protocol.codec.MapMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.MapMessageType", "com.hazelcast.client.impl.protocol.codec.MapMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.MapMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.SetAddAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueTakeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec.encodeRequest(java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.String>>)"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CachePutAllCodec", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec.encodeRequest(java.lang.String, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.CachePutAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CachePutAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueMessageType[]", "com.hazelcast.client.impl.protocol.codec.QueueMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.QueueMessageType", "com.hazelcast.client.impl.protocol.codec.QueueMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec$ResponseParameters.calculateDataSize(int, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec$RequestParameters.calculateDataSize(java.lang.String, long, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferMessageType[]", "com.hazelcast.client.impl.protocol.codec.RingbufferMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.RingbufferMessageType", "com.hazelcast.client.impl.protocol.codec.RingbufferMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapMessageType[]", "com.hazelcast.client.impl.protocol.codec.MultiMapMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapMessageType", "com.hazelcast.client.impl.protocol.codec.MultiMapMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetAddAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetAddAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec.encodeRequest(java.lang.String, long, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec.encodeRequest(java.lang.String, int, int, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesCodec", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec$RequestParameters.calculateDataSize(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, int, boolean, java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec.encodeRequest(java.lang.String, int, int, int)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec.encodeResponse(int, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, boolean, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec.encodeRequest(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec.encodeItemEvent(com.hazelcast.nio.serialization.Data, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, int, int, int, boolean, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec$RequestParameters.calculateDataSize(java.lang.String, long, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec.encodeRequest(java.lang.String, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec.encodeRequest(java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapMessageType[]", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapMessageType", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec$RequestParameters.calculateDataSize(java.lang.String, long, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec.encodeRequest(com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec.encodeCacheInvalidationEvent(java.lang.String, com.hazelcast.nio.serialization.Data, java.lang.String, java.util.UUID, long)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec.encodeCacheBatchInvalidationEvent(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.util.Collection<java.lang.String>, java.util.Collection<java.util.UUID>, java.util.Collection<java.lang.Long>)"], ["com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapPutCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapPutCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapClearCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapClearCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ListSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListSetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.Address, java.util.List<java.lang.Integer>>>, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec$RequestParameters.calculateDataSize(java.lang.String, boolean, boolean, boolean, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>)"], ["com.hazelcast.client.impl.protocol.codec.MapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapPutCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapPutCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapClearCodec", "com.hazelcast.client.impl.protocol.codec.MapClearCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapClearCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapClearCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapClearCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapClearCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec.encodeRequest()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec.encodeRequest(java.lang.String, long, int, int, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec.encodeResponse(int, java.util.Collection<com.hazelcast.nio.serialization.Data>, long[], long)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec.encodeRequest(java.lang.String, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.QueuePeekCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreMessageType[]", "com.hazelcast.client.impl.protocol.codec.SemaphoreMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreMessageType", "com.hazelcast.client.impl.protocol.codec.SemaphoreMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec.encodeRequest(java.lang.String, java.lang.String, long, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec.encodeRequest(long, int, int, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.LockLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockLockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockLockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec.encodeRequest(java.lang.String, java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetCodec", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapMessageType[]", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapMessageType", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapMessageType.id()"], ["com.hazelcast.config.MapIndexConfig", "com.hazelcast.client.impl.protocol.codec.MapIndexConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.MapIndexConfigCodec.encode(com.hazelcast.config.MapIndexConfig, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.MapIndexConfigCodec.calculateDataSize(com.hazelcast.config.MapIndexConfig)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec.encodeRequest(java.lang.String, byte, java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListGetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueuePeekCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueuePeekCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapSetCodec", "com.hazelcast.client.impl.protocol.codec.MapSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapSetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapSetCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorMessageType[]", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorMessageType", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.config.HotRestartConfig", "com.hazelcast.client.impl.protocol.codec.HotRestartConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.HotRestartConfigCodec.encode(com.hazelcast.config.HotRestartConfig, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.HotRestartConfigCodec.calculateDataSize(com.hazelcast.config.HotRestartConfig)"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, int, int, long, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TopicMessageType[]", "com.hazelcast.client.impl.protocol.codec.TopicMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.TopicMessageType", "com.hazelcast.client.impl.protocol.codec.TopicMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.TopicMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetClearCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetClearCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder", "com.hazelcast.client.impl.protocol.codec.EvictionConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.EvictionConfigCodec.encode(com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.EvictionConfigCodec.calculateDataSize(com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec$ResponseParameters.calculateDataSize(int, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec$ResponseParameters.calculateDataSize(byte, com.hazelcast.nio.Address, java.lang.String, java.lang.String, byte, java.lang.String, java.util.Collection<com.hazelcast.core.Member>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapPutAllCodec", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec.encodeRequest(java.lang.String, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapPutAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapPutAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec.encodeRequest(java.util.Collection<java.util.Map$Entry<java.lang.String, byte[]>>)"], ["com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["java.util.UUID", "com.hazelcast.client.impl.protocol.codec.UUIDCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.UUIDCodec.encode(java.util.UUID, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.UUIDCodec.calculateDataSize(java.util.UUID)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.config.CacheSimpleEntryListenerConfig", "com.hazelcast.client.impl.protocol.codec.CacheSimpleEntryListenerConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.CacheSimpleEntryListenerConfigCodec.encode(com.hazelcast.config.CacheSimpleEntryListenerConfig, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheSimpleEntryListenerConfigCodec.calculateDataSize(com.hazelcast.config.CacheSimpleEntryListenerConfig)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapGetAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ConditionMessageType[]", "com.hazelcast.client.impl.protocol.codec.ConditionMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.ConditionMessageType", "com.hazelcast.client.impl.protocol.codec.ConditionMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec.encodeRequest(java.lang.String, int, int, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec.encodeResponse(int, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.MapTryLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec.encodeRequest(java.lang.String, int, int, int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListSubCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListSubCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListSubCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListSubCodec", "com.hazelcast.client.impl.protocol.codec.ListSubCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListSubCodec.encodeRequest(java.lang.String, int, int)"], ["com.hazelcast.client.impl.protocol.codec.ListSubCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListSubCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListSubCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListSubCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListSubCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, boolean, int, int, boolean, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec$ResponseParameters.calculateDataSize(long, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>, int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec$ResponseParameters.calculateDataSize(int, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec.encodeRequest(java.lang.String, long, int, int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec.encodeResponse(int, java.util.Collection<com.hazelcast.nio.serialization.Data>, long[], long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.QueueClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec.encodeRequest(java.util.Collection<java.lang.String>, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<java.lang.String, java.util.List<java.util.Map$Entry<java.lang.Integer, java.lang.Long>>>>, java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>)"], ["com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, int, int, int, int, boolean, java.lang.String, com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ListSubCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListSubCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListSubCodec$RequestParameters.calculateDataSize(java.lang.String, int, int)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListClearCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListClearCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.QueueClearCodec", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.QueueClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueClearCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueTakeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.cache.impl.CacheEventData", "com.hazelcast.client.impl.protocol.codec.CacheEventDataCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.CacheEventDataCodec.encode(com.hazelcast.cache.impl.CacheEventData, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheEventDataCodec.calculateDataSize(com.hazelcast.cache.impl.CacheEventData)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CachePutAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceMessageType[]", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceMessageType", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec.encodeCacheInvalidationEvent(java.lang.String, com.hazelcast.nio.serialization.Data, java.lang.String, java.util.UUID, long)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec.encodeCacheBatchInvalidationEvent(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.util.Collection<java.lang.String>, java.util.Collection<java.util.UUID>, java.util.Collection<java.lang.Long>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec$ResponseParameters.calculateDataSize(int, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec$ResponseParameters.calculateDataSize(byte, com.hazelcast.nio.Address, java.lang.String, java.lang.String, byte, java.lang.String, java.util.Collection<com.hazelcast.core.Member>)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsCodec", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec.encodeRequest(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec.encodeItemEvent(com.hazelcast.nio.serialization.Data, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.QueueOfferCodec", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.QueueOfferCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueOfferCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TopicPublishCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec.encodeRequest(javax.transaction.xa.Xid)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ListAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.CacheSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, byte, java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec$ResponseParameters.calculateDataSize(long, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>, int)"], ["com.hazelcast.client.impl.protocol.codec.ListSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListSetCodec$RequestParameters.calculateDataSize(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapDeleteCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapDeleteCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec$RequestParameters.calculateDataSize(java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec$RequestParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.QueuePutCodec", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueuePutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.QueuePutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec.encodeRequest(java.lang.String, int, long, long, boolean, long)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec.encodeRequest(java.lang.String, int, long)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.LockLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockLockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockLockCodec$RequestParameters.calculateDataSize(java.lang.String, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceMessageType[]", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceMessageType", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec$RequestParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec.encodeRequest(java.lang.String, boolean, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.MapTryPutCodec", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapTryPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapTryPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec$RequestParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapMessageType[]", "com.hazelcast.client.impl.protocol.codec.TransactionalMapMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapMessageType", "com.hazelcast.client.impl.protocol.codec.TransactionalMapMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.CachePutAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CachePutAllCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int, int, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, boolean, java.lang.String, com.hazelcast.nio.serialization.Data, java.lang.String, int, com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder, com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder, com.hazelcast.config.WanReplicationRef, java.util.Collection<com.hazelcast.config.MapIndexConfig>, java.util.Collection<com.hazelcast.config.MapAttributeConfig>, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder>, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.config.HotRestartConfig, int)"], ["com.hazelcast.client.impl.protocol.codec.ListAddCodec", "com.hazelcast.client.impl.protocol.codec.ListAddCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder", "com.hazelcast.client.impl.protocol.codec.QueryCacheConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.QueryCacheConfigCodec.encode(com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.QueryCacheConfigCodec.calculateDataSize(com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder)"], ["com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.lang.String, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec$RequestParameters.calculateDataSize(javax.transaction.xa.Xid, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec$RequestParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec.encodeRequest(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec.encodeRequest(java.lang.String, long, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.LockMessageType[]", "com.hazelcast.client.impl.protocol.codec.LockMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.LockMessageType", "com.hazelcast.client.impl.protocol.codec.LockMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.LockMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListMessageType[]", "com.hazelcast.client.impl.protocol.codec.ListMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.ListMessageType", "com.hazelcast.client.impl.protocol.codec.ListMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.ListMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, boolean, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, int, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, java.lang.String, com.hazelcast.config.CacheSimpleConfig$ExpiryPolicyFactoryConfig$TimedExpiryPolicyFactoryConfig, java.util.Collection<com.hazelcast.config.CacheSimpleEntryListenerConfig>, com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder, com.hazelcast.config.WanReplicationRef, com.hazelcast.config.HotRestartConfig)"], ["com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec.encodeRequest()"], ["com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec.encodeResponse(java.util.Collection<com.hazelcast.client.impl.client.DistributedObjectInfo>)"], ["com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetGetAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CacheSizeCodec", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.CacheSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec.encodeRequest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, byte, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec.encodeResponse(byte, com.hazelcast.nio.Address, java.lang.String, java.lang.String, byte, java.lang.String, java.util.Collection<com.hazelcast.core.Member>)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicLongConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheClearCodec", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CacheClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec.encodeRequest(java.lang.String, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec.encodeIMapInvalidationEvent(com.hazelcast.nio.serialization.Data, java.lang.String, java.util.UUID, long)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec.encodeIMapBatchInvalidationEvent(java.util.Collection<com.hazelcast.nio.serialization.Data>, java.util.Collection<java.lang.String>, java.util.Collection<java.util.UUID>, java.util.Collection<java.lang.Long>)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec$RequestParameters.calculateDataSize(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$RequestParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec.encodeRequest(java.lang.String, long, boolean, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec.encodeResponse(long, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>, int)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongMessageType[]", "com.hazelcast.client.impl.protocol.codec.AtomicLongMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongMessageType", "com.hazelcast.client.impl.protocol.codec.AtomicLongMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec.encodeCacheEvent(int, java.util.Collection<com.hazelcast.cache.impl.CacheEventData>, int)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec.encodeRequest(javax.transaction.xa.Xid, boolean)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec.encodeRequest(java.lang.String, com.hazelcast.nio.Address, byte, java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, int, int, int, boolean, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, boolean, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SetClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetClearCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetClearCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientPingCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec.encodeRequest(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec.encodeItemEvent(com.hazelcast.nio.serialization.Data, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictCodec", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllCodec", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec.encodeRequest(java.lang.String, int, int, int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetCodec", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetGetAllCodec", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetGetAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SetGetAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceMessageType[]", "com.hazelcast.client.impl.protocol.codec.MapReduceMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.MapReduceMessageType", "com.hazelcast.client.impl.protocol.codec.MapReduceMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec.encodeRequest(java.lang.String, int, int, int, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientMessageType[]", "com.hazelcast.client.impl.protocol.codec.ClientMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.ClientMessageType", "com.hazelcast.client.impl.protocol.codec.ClientMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec.encodeRequest(java.lang.String, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapPutAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapPutAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetAddCodec", "com.hazelcast.client.impl.protocol.codec.SetAddCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetAddCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetAddCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetAddCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetAddCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec$RequestParameters.calculateDataSize(java.lang.String, int, long)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, byte, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.LockTryLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec.encodeRequest(java.lang.String, int, int, int, int, java.lang.String, com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ListSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec.encodeRequest(javax.transaction.xa.Xid, long)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.core.Member, java.util.List<com.hazelcast.scheduledexecutor.ScheduledTaskHandler>>>)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapTryLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapTryLockCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec.encodeRequest(java.lang.String, long, int, int, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec.encodeResponse(int, java.util.Collection<com.hazelcast.nio.serialization.Data>, long[], long)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapFlushCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapGetCodec", "com.hazelcast.client.impl.protocol.codec.MapGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapGetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapGetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueuePollCodec", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.QueuePollCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueuePollCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, boolean, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListGetAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder", "com.hazelcast.client.impl.protocol.codec.QueueStoreConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.QueueStoreConfigCodec.encode(com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueStoreConfigCodec.calculateDataSize(com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec.encodeRequest(java.lang.String, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec.encodeIMapInvalidationEvent(com.hazelcast.nio.serialization.Data, java.lang.String, java.util.UUID, long)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec.encodeIMapBatchInvalidationEvent(java.util.Collection<com.hazelcast.nio.serialization.Data>, java.util.Collection<java.lang.String>, java.util.Collection<java.util.UUID>, java.util.Collection<java.lang.Long>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapGetAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapGetAllCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec.encodeRequest(java.lang.String, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddAtomicReferenceConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.CachePutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CachePutCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CachePutCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec.encodeRequest(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveCodec", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.SetContainsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetContainsCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListContainsCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetGetAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetGetAllCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueTakeCodec", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueTakeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueTakeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueTakeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.QueuePollCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec.encodeRequest(java.lang.String, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec.encodeResponse(long, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>, int)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec$RequestParameters.calculateDataSize(java.lang.String, long, boolean, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueMessageType[]", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueMessageType", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.core.Member, java.util.List<com.hazelcast.scheduledexecutor.ScheduledTaskHandler>>>)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueuePutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapLockCodec", "com.hazelcast.client.impl.protocol.codec.MapLockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapLockCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapLockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapLockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapLockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.LockUnlockCodec", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec.encodeRequest(java.lang.String, long, long)"], ["com.hazelcast.client.impl.protocol.codec.LockUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.LockUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.MapLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapLockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapLockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec.encodeResponse(com.hazelcast.map.impl.SimpleEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionMessageType[]", "com.hazelcast.client.impl.protocol.codec.XATransactionMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.XATransactionMessageType", "com.hazelcast.client.impl.protocol.codec.XATransactionMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec.encodeRequest(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec.encodeDistributedObjectEvent(java.lang.String, java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueOfferCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.QueueOfferCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueOfferCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheClearCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec$ResponseParameters.calculateDataSize()"], ["java.lang.StackTraceElement", "com.hazelcast.client.impl.protocol.codec.StackTraceElementCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.StackTraceElementCodec.encode(java.lang.StackTraceElement, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.StackTraceElementCodec.calculateDataSize(java.lang.StackTraceElement)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListIteratorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListIteratorCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$RequestParameters.calculateDataSize(java.lang.String, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec$RequestParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.String>>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec.encodeResponse(long, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, int, int, int, boolean, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListClearCodec", "com.hazelcast.client.impl.protocol.codec.ListClearCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListClearCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListClearCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListClearCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ListClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListClearCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.SetClearCodec", "com.hazelcast.client.impl.protocol.codec.SetClearCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetClearCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetClearCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetClearCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.SetClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetClearCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterMessageType[]", "com.hazelcast.client.impl.protocol.codec.PNCounterMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.PNCounterMessageType", "com.hazelcast.client.impl.protocol.codec.PNCounterMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.PNCounterMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec.encodeRequest(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec.encodePartitionLostEvent(int, int, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec.encodeRequest(java.lang.String, java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, boolean, int, int, boolean, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.client.DistributedObjectInfo", "com.hazelcast.client.impl.protocol.codec.DistributedObjectInfoCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.DistributedObjectInfoCodec.encode(com.hazelcast.client.impl.client.DistributedObjectInfo, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.DistributedObjectInfoCodec.calculateDataSize(com.hazelcast.client.impl.client.DistributedObjectInfo)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TopicPublishCodec", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TopicPublishCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.TopicPublishCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TopicPublishCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec.encodeRequest(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReplaceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReplaceCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.client.impl.client.DistributedObjectInfo>)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.nio.Address", "com.hazelcast.client.impl.protocol.codec.AddressCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.AddressCodec.encode(com.hazelcast.nio.Address, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.AddressCodec.calculateDataSize(com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectCodec", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec$ResponseParameters.calculateDataSize(long, long)"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec.encodeRequest(java.lang.String, long, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, boolean, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<java.lang.String, java.util.List<java.util.Map$Entry<java.lang.Integer, java.lang.Long>>>>, java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, int, int, int, boolean, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec$RequestParameters.calculateDataSize(java.lang.String, long, long, java.lang.String, long)"], ["java.util.Properties", "com.hazelcast.client.impl.protocol.codec.PropertiesCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.PropertiesCodec.encode(java.util.Properties, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.PropertiesCodec.calculateDataSize(java.util.Properties)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapClearCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapClearCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec.encodeResponse(java.util.Collection<com.hazelcast.mapreduce.JobPartitionState>, int)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec.encodeRequest(java.lang.String, int, int, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec.encodeResponse(long, long)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec.encodeResponse(long, long, int)"], ["com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec$RequestParameters.calculateDataSize(java.util.Collection<java.lang.String>, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec.encodeRequest(java.lang.String, java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.SetSizeCodec", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SetSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.SetSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.LockUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockUnlockCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueuePutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueuePutCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec$RequestParameters.calculateDataSize(long, int, int, long)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapSizeCodec", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.MapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec$RequestParameters.calculateDataSize(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapProjectCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapProjectCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, boolean, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapFlushCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchMessageType[]", "com.hazelcast.client.impl.protocol.codec.CountDownLatchMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchMessageType", "com.hazelcast.client.impl.protocol.codec.CountDownLatchMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.MapTryPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapTryPutCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.scheduledexecutor.ScheduledTaskHandler", "com.hazelcast.client.impl.protocol.codec.ScheduledTaskHandlerCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.ScheduledTaskHandlerCodec.encode(com.hazelcast.scheduledexecutor.ScheduledTaskHandler, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledTaskHandlerCodec.calculateDataSize(com.hazelcast.scheduledexecutor.ScheduledTaskHandler)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryMessageType[]", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryMessageType", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.Address, byte, java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>, int, boolean, java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec.encodeRequest(com.hazelcast.nio.serialization.Data, java.lang.String, java.lang.String, boolean, java.lang.String, byte, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec.encodeResponse(byte, com.hazelcast.nio.Address, java.lang.String, java.lang.String, byte, java.lang.String, java.util.Collection<com.hazelcast.core.Member>)"], ["com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, java.lang.String, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, java.util.Collection<com.hazelcast.nio.serialization.Data>, int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec.encodeEntryEvent(com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec.encodeResponse(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec.encodeTopicEvent(com.hazelcast.nio.serialization.Data, long, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec$ResponseParameters.calculateDataSize(com.hazelcast.map.impl.SimpleEntryView<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.config.MapAttributeConfig", "com.hazelcast.client.impl.protocol.codec.MapAttributeConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.MapAttributeConfigCodec.encode(com.hazelcast.config.MapAttributeConfig, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAttributeConfigCodec.calculateDataSize(com.hazelcast.config.MapAttributeConfig)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec.encodeRequest(java.lang.String, int, boolean, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientPingCodec", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec.encodeRequest()"], ["com.hazelcast.client.impl.protocol.codec.ClientPingCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ClientPingCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientPingCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, boolean)"], ["com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.ListGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListGetCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.QueuePollCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueuePollCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListGetAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListGetAllCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.mapreduce.JobPartitionState>, int)"], ["com.hazelcast.client.impl.protocol.codec.CachePutCodec", "com.hazelcast.client.impl.protocol.codec.CachePutCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CachePutCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, boolean, int)"], ["com.hazelcast.client.impl.protocol.codec.CachePutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CachePutCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CachePutCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CachePutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CachePutCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetAddCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.SetAddCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetAddCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.ListClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListClearCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListClearCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec.encodeRequest(java.lang.String, boolean, boolean, boolean, java.util.Collection<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec.encodeRequest()"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec.encodePartitionsEvent(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.Address, java.util.List<java.lang.Integer>>>, int)"], ["com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec$RequestParameters.calculateDataSize(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec$ResponseParameters.calculateDataSize(int)"], ["com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, int, int, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec$ResponseParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<java.lang.String, java.util.List<java.util.Map$Entry<java.lang.Integer, java.lang.Long>>>>, java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec$RequestParameters.calculateDataSize(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$RequestParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder", "com.hazelcast.client.impl.protocol.codec.PredicateConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.PredicateConfigCodec.encode(com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.PredicateConfigCodec.calculateDataSize(com.hazelcast.client.impl.protocol.task.dynamicconfig.PredicateConfigHolder)"], ["com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec.encodeRequest(java.lang.String, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapSetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapSetCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListAddAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListAddAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder", "com.hazelcast.client.impl.protocol.codec.NearCacheConfigCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.NearCacheConfigCodec.encode(com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.NearCacheConfigCodec.calculateDataSize(com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateCodec", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec.encodeRequest(java.lang.String, int, int, int)"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec.encodeResponse(int, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CacheIterateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheIterateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, int, boolean)"], ["com.hazelcast.core.Member", "com.hazelcast.client.impl.protocol.codec.MemberCodec.decode(com.hazelcast.client.impl.protocol.ClientMessage)"], ["void", "com.hazelcast.client.impl.protocol.codec.MemberCodec.encode(com.hazelcast.core.Member, com.hazelcast.client.impl.protocol.ClientMessage)"], ["int", "com.hazelcast.client.impl.protocol.codec.MemberCodec.calculateDataSize(com.hazelcast.core.Member)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsCodec", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueContainsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueContainsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec.encodeRequest(java.lang.String, java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCountDownLatchConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec.encodeRequest(java.lang.String, long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec.encodeResponse(long)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec.encodeRequest(java.lang.String, int, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapSetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec$RequestParameters.calculateDataSize(java.lang.String, int, boolean)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, boolean, int, int)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateCodec", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapAggregateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapAggregateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int, java.util.Collection<com.hazelcast.nio.serialization.Data>, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec$RequestParameters.calculateDataSize(java.lang.String, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec$RequestParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<java.lang.String, byte[]>>)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec.encodeRequest(java.lang.String, java.lang.String, com.hazelcast.nio.Address)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec$RequestParameters.calculateDataSize(javax.transaction.xa.Xid, long)"], ["com.hazelcast.client.impl.protocol.codec.ListSizeCodec", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.ListSizeCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec.encodeResponse(int)"], ["com.hazelcast.client.impl.protocol.codec.ListSizeCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListSizeCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec$ResponseParameters.calculateDataSize(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapKeySetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapKeySetCodec$RequestParameters.calculateDataSize(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec$ResponseParameters.calculateDataSize()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec$RequestParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MapEvictCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapEvictCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.Address, boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, long)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigMessageType[]", "com.hazelcast.client.impl.protocol.codec.DynamicConfigMessageType.values()"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigMessageType", "com.hazelcast.client.impl.protocol.codec.DynamicConfigMessageType.valueOf(java.lang.String)"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigMessageType.id()"], ["com.hazelcast.client.impl.protocol.codec.ListGetCodec", "com.hazelcast.client.impl.protocol.codec.ListGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListGetCodec.encodeRequest(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.ListGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ListGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ListGetCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.ListGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ListGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec$ResponseParameters.calculateDataSize(int, java.util.Collection<com.hazelcast.nio.serialization.Data>, long[], long)"], ["com.hazelcast.client.impl.protocol.codec.MapUnlockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapUnlockCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec.encodeRequest(java.lang.String, java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec.encodeRequest(java.lang.String, java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec$RequestParameters.calculateDataSize(java.lang.String, int)"], ["com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec$ResponseParameters.calculateDataSize(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec.encodeRequest(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data>>)"], ["com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec.encodeResponse(com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec$RequestParameters.calculateDataSize(java.lang.String, boolean, boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec.encodeResponse(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$AbstractEventHandler", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$AbstractEventHandler()"], ["void", "com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec$AbstractEventHandler.handle(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.LockTryLockCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.LockTryLockCodec$RequestParameters.calculateDataSize(java.lang.String, long, long, long, long)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapValuesCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec$RequestParameters.calculateDataSize(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec$ResponseParameters.calculateDataSize(long)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsValueCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec.encodeRequest(java.lang.String, java.lang.String, long, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapFlushCodec", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.MapFlushCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.MapFlushCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapFlushCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data, com.hazelcast.nio.serialization.Data, int)"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec.encodeRequest()"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec.encodeResponse()"], ["com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec.encodeRequest()"], ["com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec.encodeResponse(java.util.Collection<java.util.Map$Entry<java.lang.Integer, java.util.UUID>>)"], ["com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec$ResponseParameters.calculateDataSize(java.util.Collection<com.hazelcast.nio.serialization.Data>)"], ["com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec$ResponseParameters.calculateDataSize(boolean)"], ["com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec$RequestParameters.calculateDataSize(java.lang.String, int, long, long, boolean, long)"], ["com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec$RequestParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec$RequestParameters.calculateDataSize(java.lang.String, com.hazelcast.nio.serialization.Data)"], ["com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec$ResponseParameters()"], ["int", "com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec$ResponseParameters.calculateDataSize(int, java.util.Collection<com.hazelcast.nio.serialization.Data>, long[], long)"], ["com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec()"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec.encodeRequest(java.lang.String)"], ["com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec$RequestParameters", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec.decodeRequest(com.hazelcast.client.impl.protocol.ClientMessage)"], ["com.hazelcast.client.impl.protocol.ClientMessage", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec.encodeResponse(boolean)"], ["com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec$ResponseParameters", "com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec.decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)"]]}