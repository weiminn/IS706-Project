{"spring-tx-5.3.18.jar": [["org.springframework.dao.InvalidDataAccessResourceUsageException", "org.springframework.dao.InvalidDataAccessResourceUsageException(java.lang.String)", "public org.springframework.dao.InvalidDataAccessResourceUsageException(java.lang.String)"], ["org.springframework.dao.InvalidDataAccessResourceUsageException", "org.springframework.dao.InvalidDataAccessResourceUsageException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.InvalidDataAccessResourceUsageException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.ConcurrencyFailureException", "org.springframework.dao.ConcurrencyFailureException(java.lang.String)", "public org.springframework.dao.ConcurrencyFailureException(java.lang.String)"], ["org.springframework.dao.ConcurrencyFailureException", "org.springframework.dao.ConcurrencyFailureException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.ConcurrencyFailureException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.IncorrectUpdateSemanticsDataAccessException", "org.springframework.dao.IncorrectUpdateSemanticsDataAccessException(java.lang.String)", "public org.springframework.dao.IncorrectUpdateSemanticsDataAccessException(java.lang.String)"], ["org.springframework.dao.IncorrectUpdateSemanticsDataAccessException", "org.springframework.dao.IncorrectUpdateSemanticsDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.IncorrectUpdateSemanticsDataAccessException(java.lang.String, java.lang.Throwable)"], ["boolean", "org.springframework.dao.IncorrectUpdateSemanticsDataAccessException.wasDataUpdated()", "public boolean wasDataUpdated()"], ["org.springframework.dao.CannotSerializeTransactionException", "org.springframework.dao.CannotSerializeTransactionException(java.lang.String)", "public org.springframework.dao.CannotSerializeTransactionException(java.lang.String)"], ["org.springframework.dao.CannotSerializeTransactionException", "org.springframework.dao.CannotSerializeTransactionException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.CannotSerializeTransactionException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.PermissionDeniedDataAccessException", "org.springframework.dao.PermissionDeniedDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.PermissionDeniedDataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.EmptyResultDataAccessException", "org.springframework.dao.EmptyResultDataAccessException(int)", "public org.springframework.dao.EmptyResultDataAccessException(int)"], ["org.springframework.dao.EmptyResultDataAccessException", "org.springframework.dao.EmptyResultDataAccessException(java.lang.String, int)", "public org.springframework.dao.EmptyResultDataAccessException(java.lang.String, int)"], ["org.springframework.dao.EmptyResultDataAccessException", "org.springframework.dao.EmptyResultDataAccessException(java.lang.String, int, java.lang.Throwable)", "public org.springframework.dao.EmptyResultDataAccessException(java.lang.String, int, java.lang.Throwable)"], ["org.springframework.dao.DataRetrievalFailureException", "org.springframework.dao.DataRetrievalFailureException(java.lang.String)", "public org.springframework.dao.DataRetrievalFailureException(java.lang.String)"], ["org.springframework.dao.DataRetrievalFailureException", "org.springframework.dao.DataRetrievalFailureException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.DataRetrievalFailureException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.support.DaoSupport", "org.springframework.dao.support.DaoSupport()", "public org.springframework.dao.support.DaoSupport()"], ["void", "org.springframework.dao.support.DaoSupport.afterPropertiesSet()", "public final void afterPropertiesSet() throws java.lang.IllegalArgumentException, org.springframework.beans.factory.BeanInitializationException"], ["org.springframework.dao.support.DataAccessUtils", "org.springframework.dao.support.DataAccessUtils()", "public org.springframework.dao.support.DataAccessUtils()"], ["<T> T", "org.springframework.dao.support.DataAccessUtils.singleResult(java.util.Collection<T>)", "public static <T> T singleResult(java.util.Collection<T>) throws org.springframework.dao.IncorrectResultSizeDataAccessException"], ["<T> T", "org.springframework.dao.support.DataAccessUtils.requiredSingleResult(java.util.Collection<T>)", "public static <T> T requiredSingleResult(java.util.Collection<T>) throws org.springframework.dao.IncorrectResultSizeDataAccessException"], ["<T> T", "org.springframework.dao.support.DataAccessUtils.nullableSingleResult(java.util.Collection<T>)", "public static <T> T nullableSingleResult(java.util.Collection<T>) throws org.springframework.dao.IncorrectResultSizeDataAccessException"], ["<T> T", "org.springframework.dao.support.DataAccessUtils.uniqueResult(java.util.Collection<T>)", "public static <T> T uniqueResult(java.util.Collection<T>) throws org.springframework.dao.IncorrectResultSizeDataAccessException"], ["<T> T", "org.springframework.dao.support.DataAccessUtils.requiredUniqueResult(java.util.Collection<T>)", "public static <T> T requiredUniqueResult(java.util.Collection<T>) throws org.springframework.dao.IncorrectResultSizeDataAccessException"], ["<T> T", "org.springframework.dao.support.DataAccessUtils.objectResult(java.util.Collection<?>, java.lang.Class<T>)", "public static <T> T objectResult(java.util.Collection<?>, java.lang.Class<T>) throws org.springframework.dao.IncorrectResultSizeDataAccessException, org.springframework.dao.TypeMismatchDataAccessException"], ["int", "org.springframework.dao.support.DataAccessUtils.intResult(java.util.Collection<?>)", "public static int intResult(java.util.Collection<?>) throws org.springframework.dao.IncorrectResultSizeDataAccessException, org.springframework.dao.TypeMismatchDataAccessException"], ["long", "org.springframework.dao.support.DataAccessUtils.longResult(java.util.Collection<?>)", "public static long longResult(java.util.Collection<?>) throws org.springframework.dao.IncorrectResultSizeDataAccessException, org.springframework.dao.TypeMismatchDataAccessException"], ["java.lang.RuntimeException", "org.springframework.dao.support.DataAccessUtils.translateIfNecessary(java.lang.RuntimeException, org.springframework.dao.support.PersistenceExceptionTranslator)", "public static java.lang.RuntimeException translateIfNecessary(java.lang.RuntimeException, org.springframework.dao.support.PersistenceExceptionTranslator)"], ["org.springframework.dao.support.PersistenceExceptionTranslationInterceptor", "org.springframework.dao.support.PersistenceExceptionTranslationInterceptor()", "public org.springframework.dao.support.PersistenceExceptionTranslationInterceptor()"], ["org.springframework.dao.support.PersistenceExceptionTranslationInterceptor", "org.springframework.dao.support.PersistenceExceptionTranslationInterceptor(org.springframework.dao.support.PersistenceExceptionTranslator)", "public org.springframework.dao.support.PersistenceExceptionTranslationInterceptor(org.springframework.dao.support.PersistenceExceptionTranslator)"], ["org.springframework.dao.support.PersistenceExceptionTranslationInterceptor", "org.springframework.dao.support.PersistenceExceptionTranslationInterceptor(org.springframework.beans.factory.ListableBeanFactory)", "public org.springframework.dao.support.PersistenceExceptionTranslationInterceptor(org.springframework.beans.factory.ListableBeanFactory)"], ["void", "org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.setPersistenceExceptionTranslator(org.springframework.dao.support.PersistenceExceptionTranslator)", "public void setPersistenceExceptionTranslator(org.springframework.dao.support.PersistenceExceptionTranslator)"], ["void", "org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.setAlwaysTranslate(boolean)", "public void setAlwaysTranslate(boolean)"], ["void", "org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"], ["void", "org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.afterPropertiesSet()", "public void afterPropertiesSet()"], ["java.lang.Object", "org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.dao.support.ChainedPersistenceExceptionTranslator", "org.springframework.dao.support.ChainedPersistenceExceptionTranslator()", "public org.springframework.dao.support.ChainedPersistenceExceptionTranslator()"], ["void", "org.springframework.dao.support.ChainedPersistenceExceptionTranslator.addDelegate(org.springframework.dao.support.PersistenceExceptionTranslator)", "public final void addDelegate(org.springframework.dao.support.PersistenceExceptionTranslator)"], ["org.springframework.dao.support.PersistenceExceptionTranslator[]", "org.springframework.dao.support.ChainedPersistenceExceptionTranslator.getDelegates()", "public final org.springframework.dao.support.PersistenceExceptionTranslator[] getDelegates()"], ["org.springframework.dao.DataAccessException", "org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(java.lang.RuntimeException)", "public org.springframework.dao.DataAccessException translateExceptionIfPossible(java.lang.RuntimeException)"], ["org.springframework.dao.NonTransientDataAccessResourceException", "org.springframework.dao.NonTransientDataAccessResourceException(java.lang.String)", "public org.springframework.dao.NonTransientDataAccessResourceException(java.lang.String)"], ["org.springframework.dao.NonTransientDataAccessResourceException", "org.springframework.dao.NonTransientDataAccessResourceException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.NonTransientDataAccessResourceException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.QueryTimeoutException", "org.springframework.dao.QueryTimeoutException(java.lang.String)", "public org.springframework.dao.QueryTimeoutException(java.lang.String)"], ["org.springframework.dao.QueryTimeoutException", "org.springframework.dao.QueryTimeoutException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.QueryTimeoutException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.RecoverableDataAccessException", "org.springframework.dao.RecoverableDataAccessException(java.lang.String)", "public org.springframework.dao.RecoverableDataAccessException(java.lang.String)"], ["org.springframework.dao.RecoverableDataAccessException", "org.springframework.dao.RecoverableDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.RecoverableDataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.DeadlockLoserDataAccessException", "org.springframework.dao.DeadlockLoserDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.DeadlockLoserDataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.UncategorizedDataAccessException", "org.springframework.dao.UncategorizedDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.UncategorizedDataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.DataAccessResourceFailureException", "org.springframework.dao.DataAccessResourceFailureException(java.lang.String)", "public org.springframework.dao.DataAccessResourceFailureException(java.lang.String)"], ["org.springframework.dao.DataAccessResourceFailureException", "org.springframework.dao.DataAccessResourceFailureException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.DataAccessResourceFailureException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor", "org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor(org.springframework.dao.support.PersistenceExceptionTranslator, java.lang.Class<? extends java.lang.annotation.Annotation>)", "public org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor(org.springframework.dao.support.PersistenceExceptionTranslator, java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["org.aopalliance.aop.Advice", "org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["org.springframework.aop.Pointcut", "org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor", "org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor()", "public org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor()"], ["void", "org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.setRepositoryAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public void setRepositoryAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["void", "org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["org.springframework.dao.TypeMismatchDataAccessException", "org.springframework.dao.TypeMismatchDataAccessException(java.lang.String)", "public org.springframework.dao.TypeMismatchDataAccessException(java.lang.String)"], ["org.springframework.dao.TypeMismatchDataAccessException", "org.springframework.dao.TypeMismatchDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.TypeMismatchDataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.NonTransientDataAccessException", "org.springframework.dao.NonTransientDataAccessException(java.lang.String)", "public org.springframework.dao.NonTransientDataAccessException(java.lang.String)"], ["org.springframework.dao.NonTransientDataAccessException", "org.springframework.dao.NonTransientDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.NonTransientDataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.DuplicateKeyException", "org.springframework.dao.DuplicateKeyException(java.lang.String)", "public org.springframework.dao.DuplicateKeyException(java.lang.String)"], ["org.springframework.dao.DuplicateKeyException", "org.springframework.dao.DuplicateKeyException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.DuplicateKeyException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.InvalidDataAccessApiUsageException", "org.springframework.dao.InvalidDataAccessApiUsageException(java.lang.String)", "public org.springframework.dao.InvalidDataAccessApiUsageException(java.lang.String)"], ["org.springframework.dao.InvalidDataAccessApiUsageException", "org.springframework.dao.InvalidDataAccessApiUsageException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.InvalidDataAccessApiUsageException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.DataAccessException", "org.springframework.dao.DataAccessException(java.lang.String)", "public org.springframework.dao.DataAccessException(java.lang.String)"], ["org.springframework.dao.DataAccessException", "org.springframework.dao.DataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.DataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.TransientDataAccessException", "org.springframework.dao.TransientDataAccessException(java.lang.String)", "public org.springframework.dao.TransientDataAccessException(java.lang.String)"], ["org.springframework.dao.TransientDataAccessException", "org.springframework.dao.TransientDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.TransientDataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.IncorrectResultSizeDataAccessException", "org.springframework.dao.IncorrectResultSizeDataAccessException(int)", "public org.springframework.dao.IncorrectResultSizeDataAccessException(int)"], ["org.springframework.dao.IncorrectResultSizeDataAccessException", "org.springframework.dao.IncorrectResultSizeDataAccessException(int, int)", "public org.springframework.dao.IncorrectResultSizeDataAccessException(int, int)"], ["org.springframework.dao.IncorrectResultSizeDataAccessException", "org.springframework.dao.IncorrectResultSizeDataAccessException(java.lang.String, int)", "public org.springframework.dao.IncorrectResultSizeDataAccessException(java.lang.String, int)"], ["org.springframework.dao.IncorrectResultSizeDataAccessException", "org.springframework.dao.IncorrectResultSizeDataAccessException(java.lang.String, int, java.lang.Throwable)", "public org.springframework.dao.IncorrectResultSizeDataAccessException(java.lang.String, int, java.lang.Throwable)"], ["org.springframework.dao.IncorrectResultSizeDataAccessException", "org.springframework.dao.IncorrectResultSizeDataAccessException(java.lang.String, int, int)", "public org.springframework.dao.IncorrectResultSizeDataAccessException(java.lang.String, int, int)"], ["org.springframework.dao.IncorrectResultSizeDataAccessException", "org.springframework.dao.IncorrectResultSizeDataAccessException(java.lang.String, int, int, java.lang.Throwable)", "public org.springframework.dao.IncorrectResultSizeDataAccessException(java.lang.String, int, int, java.lang.Throwable)"], ["int", "org.springframework.dao.IncorrectResultSizeDataAccessException.getExpectedSize()", "public int getExpectedSize()"], ["int", "org.springframework.dao.IncorrectResultSizeDataAccessException.getActualSize()", "public int getActualSize()"], ["org.springframework.dao.CannotAcquireLockException", "org.springframework.dao.CannotAcquireLockException(java.lang.String)", "public org.springframework.dao.CannotAcquireLockException(java.lang.String)"], ["org.springframework.dao.CannotAcquireLockException", "org.springframework.dao.CannotAcquireLockException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.CannotAcquireLockException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.DataIntegrityViolationException", "org.springframework.dao.DataIntegrityViolationException(java.lang.String)", "public org.springframework.dao.DataIntegrityViolationException(java.lang.String)"], ["org.springframework.dao.DataIntegrityViolationException", "org.springframework.dao.DataIntegrityViolationException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.DataIntegrityViolationException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.PessimisticLockingFailureException", "org.springframework.dao.PessimisticLockingFailureException(java.lang.String)", "public org.springframework.dao.PessimisticLockingFailureException(java.lang.String)"], ["org.springframework.dao.PessimisticLockingFailureException", "org.springframework.dao.PessimisticLockingFailureException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.PessimisticLockingFailureException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.OptimisticLockingFailureException", "org.springframework.dao.OptimisticLockingFailureException(java.lang.String)", "public org.springframework.dao.OptimisticLockingFailureException(java.lang.String)"], ["org.springframework.dao.OptimisticLockingFailureException", "org.springframework.dao.OptimisticLockingFailureException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.OptimisticLockingFailureException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.CleanupFailureDataAccessException", "org.springframework.dao.CleanupFailureDataAccessException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.CleanupFailureDataAccessException(java.lang.String, java.lang.Throwable)"], ["org.springframework.dao.TransientDataAccessResourceException", "org.springframework.dao.TransientDataAccessResourceException(java.lang.String)", "public org.springframework.dao.TransientDataAccessResourceException(java.lang.String)"], ["org.springframework.dao.TransientDataAccessResourceException", "org.springframework.dao.TransientDataAccessResourceException(java.lang.String, java.lang.Throwable)", "public org.springframework.dao.TransientDataAccessResourceException(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.springframework.transaction.HeuristicCompletionException.getStateString(int)", "public static java.lang.String getStateString(int)"], ["org.springframework.transaction.HeuristicCompletionException", "org.springframework.transaction.HeuristicCompletionException(int, java.lang.Throwable)", "public org.springframework.transaction.HeuristicCompletionException(int, java.lang.Throwable)"], ["int", "org.springframework.transaction.HeuristicCompletionException.getOutcomeState()", "public int getOutcomeState()"], ["org.springframework.transaction.jta.JtaTransactionManager", "org.springframework.transaction.jta.JtaTransactionManager()", "public org.springframework.transaction.jta.JtaTransactionManager()"], ["org.springframework.transaction.jta.JtaTransactionManager", "org.springframework.transaction.jta.JtaTransactionManager(javax.transaction.UserTransaction)", "public org.springframework.transaction.jta.JtaTransactionManager(javax.transaction.UserTransaction)"], ["org.springframework.transaction.jta.JtaTransactionManager", "org.springframework.transaction.jta.JtaTransactionManager(javax.transaction.UserTransaction, javax.transaction.TransactionManager)", "public org.springframework.transaction.jta.JtaTransactionManager(javax.transaction.UserTransaction, javax.transaction.TransactionManager)"], ["org.springframework.transaction.jta.JtaTransactionManager", "org.springframework.transaction.jta.JtaTransactionManager(javax.transaction.TransactionManager)", "public org.springframework.transaction.jta.JtaTransactionManager(javax.transaction.TransactionManager)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setJndiTemplate(org.springframework.jndi.JndiTemplate)", "public void setJndiTemplate(org.springframework.jndi.JndiTemplate)"], ["org.springframework.jndi.JndiTemplate", "org.springframework.transaction.jta.JtaTransactionManager.getJndiTemplate()", "public org.springframework.jndi.JndiTemplate getJndiTemplate()"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setJndiEnvironment(java.util.Properties)", "public void setJndiEnvironment(java.util.Properties)"], ["java.util.Properties", "org.springframework.transaction.jta.JtaTransactionManager.getJndiEnvironment()", "public java.util.Properties getJndiEnvironment()"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setUserTransaction(javax.transaction.UserTransaction)", "public void setUserTransaction(javax.transaction.UserTransaction)"], ["javax.transaction.UserTransaction", "org.springframework.transaction.jta.JtaTransactionManager.getUserTransaction()", "public javax.transaction.UserTransaction getUserTransaction()"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setUserTransactionName(java.lang.String)", "public void setUserTransactionName(java.lang.String)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setAutodetectUserTransaction(boolean)", "public void setAutodetectUserTransaction(boolean)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setCacheUserTransaction(boolean)", "public void setCacheUserTransaction(boolean)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setTransactionManager(javax.transaction.TransactionManager)", "public void setTransactionManager(javax.transaction.TransactionManager)"], ["javax.transaction.TransactionManager", "org.springframework.transaction.jta.JtaTransactionManager.getTransactionManager()", "public javax.transaction.TransactionManager getTransactionManager()"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setTransactionManagerName(java.lang.String)", "public void setTransactionManagerName(java.lang.String)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setAutodetectTransactionManager(boolean)", "public void setAutodetectTransactionManager(boolean)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setTransactionSynchronizationRegistry(javax.transaction.TransactionSynchronizationRegistry)", "public void setTransactionSynchronizationRegistry(javax.transaction.TransactionSynchronizationRegistry)"], ["javax.transaction.TransactionSynchronizationRegistry", "org.springframework.transaction.jta.JtaTransactionManager.getTransactionSynchronizationRegistry()", "public javax.transaction.TransactionSynchronizationRegistry getTransactionSynchronizationRegistry()"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setTransactionSynchronizationRegistryName(java.lang.String)", "public void setTransactionSynchronizationRegistryName(java.lang.String)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setAutodetectTransactionSynchronizationRegistry(boolean)", "public void setAutodetectTransactionSynchronizationRegistry(boolean)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.setAllowCustomIsolationLevels(boolean)", "public void setAllowCustomIsolationLevels(boolean)"], ["void", "org.springframework.transaction.jta.JtaTransactionManager.afterPropertiesSet()", "public void afterPropertiesSet() throws org.springframework.transaction.TransactionSystemException"], ["javax.transaction.Transaction", "org.springframework.transaction.jta.JtaTransactionManager.createTransaction(java.lang.String, int)", "public javax.transaction.Transaction createTransaction(java.lang.String, int) throws javax.transaction.NotSupportedException, javax.transaction.SystemException"], ["boolean", "org.springframework.transaction.jta.JtaTransactionManager.supportsResourceAdapterManagedTransactions()", "public boolean supportsResourceAdapterManagedTransactions()"], ["org.springframework.transaction.jta.UserTransactionAdapter", "org.springframework.transaction.jta.UserTransactionAdapter(javax.transaction.TransactionManager)", "public org.springframework.transaction.jta.UserTransactionAdapter(javax.transaction.TransactionManager)"], ["javax.transaction.TransactionManager", "org.springframework.transaction.jta.UserTransactionAdapter.getTransactionManager()", "public final javax.transaction.TransactionManager getTransactionManager()"], ["void", "org.springframework.transaction.jta.UserTransactionAdapter.setTransactionTimeout(int)", "public void setTransactionTimeout(int) throws javax.transaction.SystemException"], ["void", "org.springframework.transaction.jta.UserTransactionAdapter.begin()", "public void begin() throws javax.transaction.NotSupportedException, javax.transaction.SystemException"], ["void", "org.springframework.transaction.jta.UserTransactionAdapter.commit()", "public void commit() throws javax.transaction.RollbackException, javax.transaction.HeuristicMixedException, javax.transaction.HeuristicRollbackException, java.lang.SecurityException, javax.transaction.SystemException"], ["void", "org.springframework.transaction.jta.UserTransactionAdapter.rollback()", "public void rollback() throws java.lang.SecurityException, javax.transaction.SystemException"], ["void", "org.springframework.transaction.jta.UserTransactionAdapter.setRollbackOnly()", "public void setRollbackOnly() throws javax.transaction.SystemException"], ["int", "org.springframework.transaction.jta.UserTransactionAdapter.getStatus()", "public int getStatus() throws javax.transaction.SystemException"], ["org.springframework.transaction.jta.SimpleTransactionFactory", "org.springframework.transaction.jta.SimpleTransactionFactory(javax.transaction.TransactionManager)", "public org.springframework.transaction.jta.SimpleTransactionFactory(javax.transaction.TransactionManager)"], ["javax.transaction.Transaction", "org.springframework.transaction.jta.SimpleTransactionFactory.createTransaction(java.lang.String, int)", "public javax.transaction.Transaction createTransaction(java.lang.String, int) throws javax.transaction.NotSupportedException, javax.transaction.SystemException"], ["boolean", "org.springframework.transaction.jta.SimpleTransactionFactory.supportsResourceAdapterManagedTransactions()", "public boolean supportsResourceAdapterManagedTransactions()"], ["org.springframework.transaction.jta.JtaTransactionObject", "org.springframework.transaction.jta.JtaTransactionObject(javax.transaction.UserTransaction)", "public org.springframework.transaction.jta.JtaTransactionObject(javax.transaction.UserTransaction)"], ["javax.transaction.UserTransaction", "org.springframework.transaction.jta.JtaTransactionObject.getUserTransaction()", "public final javax.transaction.UserTransaction getUserTransaction()"], ["boolean", "org.springframework.transaction.jta.JtaTransactionObject.isRollbackOnly()", "public boolean isRollbackOnly()"], ["void", "org.springframework.transaction.jta.JtaTransactionObject.flush()", "public void flush()"], ["org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter", "org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter(org.springframework.transaction.TransactionDefinition, org.springframework.transaction.support.TransactionCallback<T>, boolean, boolean, boolean, boolean)", "public org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter(org.springframework.transaction.TransactionDefinition, org.springframework.transaction.support.TransactionCallback<T>, boolean, boolean, boolean, boolean)"], ["void", "org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.run()", "public void run()"], ["T", "org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.getResult()", "public T getResult()"], ["java.lang.Throwable", "org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.getException()", "public java.lang.Throwable getException()"], ["boolean", "org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.isRollbackOnly()", "public boolean isRollbackOnly()"], ["void", "org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.flush()", "public void flush()"], ["org.springframework.transaction.jta.WebSphereUowTransactionManager", "org.springframework.transaction.jta.WebSphereUowTransactionManager()", "public org.springframework.transaction.jta.WebSphereUowTransactionManager()"], ["org.springframework.transaction.jta.WebSphereUowTransactionManager", "org.springframework.transaction.jta.WebSphereUowTransactionManager(com.ibm.wsspi.uow.UOWManager)", "public org.springframework.transaction.jta.WebSphereUowTransactionManager(com.ibm.wsspi.uow.UOWManager)"], ["void", "org.springframework.transaction.jta.WebSphereUowTransactionManager.setUowManager(com.ibm.wsspi.uow.UOWManager)", "public void setUowManager(com.ibm.wsspi.uow.UOWManager)"], ["void", "org.springframework.transaction.jta.WebSphereUowTransactionManager.setUowManagerName(java.lang.String)", "public void setUowManagerName(java.lang.String)"], ["void", "org.springframework.transaction.jta.WebSphereUowTransactionManager.afterPropertiesSet()", "public void afterPropertiesSet() throws org.springframework.transaction.TransactionSystemException"], ["boolean", "org.springframework.transaction.jta.WebSphereUowTransactionManager.supportsResourceAdapterManagedTransactions()", "public boolean supportsResourceAdapterManagedTransactions()"], ["<T> T", "org.springframework.transaction.jta.WebSphereUowTransactionManager.execute(org.springframework.transaction.TransactionDefinition, org.springframework.transaction.support.TransactionCallback<T>)", "public <T> T execute(org.springframework.transaction.TransactionDefinition, org.springframework.transaction.support.TransactionCallback<T>) throws org.springframework.transaction.TransactionException"], ["org.springframework.transaction.jta.SpringJtaSynchronizationAdapter", "org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization)", "public org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization)"], ["org.springframework.transaction.jta.SpringJtaSynchronizationAdapter", "org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization, javax.transaction.UserTransaction)", "public org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization, javax.transaction.UserTransaction)"], ["org.springframework.transaction.jta.SpringJtaSynchronizationAdapter", "org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization, javax.transaction.TransactionManager)", "public org.springframework.transaction.jta.SpringJtaSynchronizationAdapter(org.springframework.transaction.support.TransactionSynchronization, javax.transaction.TransactionManager)"], ["void", "org.springframework.transaction.jta.SpringJtaSynchronizationAdapter.beforeCompletion()", "public void beforeCompletion()"], ["void", "org.springframework.transaction.jta.SpringJtaSynchronizationAdapter.afterCompletion(int)", "public void afterCompletion(int)"], ["org.springframework.transaction.jta.ManagedTransactionAdapter", "org.springframework.transaction.jta.ManagedTransactionAdapter(javax.transaction.TransactionManager)", "public org.springframework.transaction.jta.ManagedTransactionAdapter(javax.transaction.TransactionManager) throws javax.transaction.SystemException"], ["javax.transaction.TransactionManager", "org.springframework.transaction.jta.ManagedTransactionAdapter.getTransactionManager()", "public final javax.transaction.TransactionManager getTransactionManager()"], ["void", "org.springframework.transaction.jta.ManagedTransactionAdapter.commit()", "public void commit() throws javax.transaction.RollbackException, javax.transaction.HeuristicMixedException, javax.transaction.HeuristicRollbackException, java.lang.SecurityException, javax.transaction.SystemException"], ["void", "org.springframework.transaction.jta.ManagedTransactionAdapter.rollback()", "public void rollback() throws javax.transaction.SystemException"], ["void", "org.springframework.transaction.jta.ManagedTransactionAdapter.setRollbackOnly()", "public void setRollbackOnly() throws javax.transaction.SystemException"], ["int", "org.springframework.transaction.jta.ManagedTransactionAdapter.getStatus()", "public int getStatus() throws javax.transaction.SystemException"], ["boolean", "org.springframework.transaction.jta.ManagedTransactionAdapter.enlistResource(javax.transaction.xa.XAResource)", "public boolean enlistResource(javax.transaction.xa.XAResource) throws javax.transaction.RollbackException, javax.transaction.SystemException"], ["boolean", "org.springframework.transaction.jta.ManagedTransactionAdapter.delistResource(javax.transaction.xa.XAResource, int)", "public boolean delistResource(javax.transaction.xa.XAResource, int) throws javax.transaction.SystemException"], ["void", "org.springframework.transaction.jta.ManagedTransactionAdapter.registerSynchronization(javax.transaction.Synchronization)", "public void registerSynchronization(javax.transaction.Synchronization) throws javax.transaction.RollbackException, javax.transaction.SystemException"], ["org.springframework.transaction.jta.JtaAfterCompletionSynchronization", "org.springframework.transaction.jta.JtaAfterCompletionSynchronization(java.util.List<org.springframework.transaction.support.TransactionSynchronization>)", "public org.springframework.transaction.jta.JtaAfterCompletionSynchronization(java.util.List<org.springframework.transaction.support.TransactionSynchronization>)"], ["void", "org.springframework.transaction.jta.JtaAfterCompletionSynchronization.beforeCompletion()", "public void beforeCompletion()"], ["void", "org.springframework.transaction.jta.JtaAfterCompletionSynchronization.afterCompletion(int)", "public void afterCompletion(int)"], ["org.springframework.transaction.jta.WebLogicJtaTransactionManager", "org.springframework.transaction.jta.WebLogicJtaTransactionManager()", "public org.springframework.transaction.jta.WebLogicJtaTransactionManager()"], ["void", "org.springframework.transaction.jta.WebLogicJtaTransactionManager.afterPropertiesSet()", "public void afterPropertiesSet() throws org.springframework.transaction.TransactionSystemException"], ["javax.transaction.Transaction", "org.springframework.transaction.jta.WebLogicJtaTransactionManager.createTransaction(java.lang.String, int)", "public javax.transaction.Transaction createTransaction(java.lang.String, int) throws javax.transaction.NotSupportedException, javax.transaction.SystemException"], ["default", "org.springframework.transaction.TransactionDefinition.int getPropagationBehavior()", "public default int getPropagationBehavior()"], ["default", "org.springframework.transaction.TransactionDefinition.int getIsolationLevel()", "public default int getIsolationLevel()"], ["default", "org.springframework.transaction.TransactionDefinition.int getTimeout()", "public default int getTimeout()"], ["default", "org.springframework.transaction.TransactionDefinition.boolean isReadOnly()", "public default boolean isReadOnly()"], ["default", "org.springframework.transaction.TransactionDefinition.java.lang.String getName()", "public default java.lang.String getName()"], ["org.springframework.transaction.TransactionDefinition", "org.springframework.transaction.TransactionDefinition.withDefaults()", "public static org.springframework.transaction.TransactionDefinition withDefaults()"], ["org.springframework.transaction.NestedTransactionNotSupportedException", "org.springframework.transaction.NestedTransactionNotSupportedException(java.lang.String)", "public org.springframework.transaction.NestedTransactionNotSupportedException(java.lang.String)"], ["org.springframework.transaction.NestedTransactionNotSupportedException", "org.springframework.transaction.NestedTransactionNotSupportedException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.NestedTransactionNotSupportedException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.IllegalTransactionStateException", "org.springframework.transaction.IllegalTransactionStateException(java.lang.String)", "public org.springframework.transaction.IllegalTransactionStateException(java.lang.String)"], ["org.springframework.transaction.IllegalTransactionStateException", "org.springframework.transaction.IllegalTransactionStateException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.IllegalTransactionStateException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.TransactionSystemException", "org.springframework.transaction.TransactionSystemException(java.lang.String)", "public org.springframework.transaction.TransactionSystemException(java.lang.String)"], ["org.springframework.transaction.TransactionSystemException", "org.springframework.transaction.TransactionSystemException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.TransactionSystemException(java.lang.String, java.lang.Throwable)"], ["void", "org.springframework.transaction.TransactionSystemException.initApplicationException(java.lang.Throwable)", "public void initApplicationException(java.lang.Throwable)"], ["java.lang.Throwable", "org.springframework.transaction.TransactionSystemException.getApplicationException()", "public final java.lang.Throwable getApplicationException()"], ["java.lang.Throwable", "org.springframework.transaction.TransactionSystemException.getOriginalException()", "public java.lang.Throwable getOriginalException()"], ["boolean", "org.springframework.transaction.TransactionSystemException.contains(java.lang.Class<?>)", "public boolean contains(java.lang.Class<?>)"], ["void", "org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser$AopAutoProxyConfigurer.configureAutoProxyCreator(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)", "public static void configureAutoProxyCreator(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"], ["org.springframework.transaction.config.TxNamespaceHandler", "org.springframework.transaction.config.TxNamespaceHandler()", "public org.springframework.transaction.config.TxNamespaceHandler()"], ["void", "org.springframework.transaction.config.TxNamespaceHandler.init()", "public void init()"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)", "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"], ["org.springframework.transaction.config.JtaTransactionManagerFactoryBean", "org.springframework.transaction.config.JtaTransactionManagerFactoryBean()", "public org.springframework.transaction.config.JtaTransactionManagerFactoryBean()"], ["void", "org.springframework.transaction.config.JtaTransactionManagerFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws org.springframework.transaction.TransactionSystemException"], ["org.springframework.transaction.jta.JtaTransactionManager", "org.springframework.transaction.config.JtaTransactionManagerFactoryBean.getObject()", "public org.springframework.transaction.jta.JtaTransactionManager getObject()"], ["java.lang.Class<?>", "org.springframework.transaction.config.JtaTransactionManagerFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.transaction.config.JtaTransactionManagerFactoryBean.isSingleton()", "public boolean isSingleton()"], ["java.lang.Object", "org.springframework.transaction.config.JtaTransactionManagerFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.transaction.config.JtaTransactionManagerBeanDefinitionParser", "org.springframework.transaction.config.JtaTransactionManagerBeanDefinitionParser()", "public org.springframework.transaction.config.JtaTransactionManagerBeanDefinitionParser()"], ["org.springframework.transaction.config.TransactionManagementConfigUtils", "org.springframework.transaction.config.TransactionManagementConfigUtils()", "public org.springframework.transaction.config.TransactionManagementConfigUtils()"], ["org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor", "org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor()", "public org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor()"], ["org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor", "org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor(org.springframework.transaction.interceptor.TransactionInterceptor)", "public org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor(org.springframework.transaction.interceptor.TransactionInterceptor)"], ["void", "org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor.setTransactionInterceptor(org.springframework.transaction.interceptor.TransactionInterceptor)", "public void setTransactionInterceptor(org.springframework.transaction.interceptor.TransactionInterceptor)"], ["void", "org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor.setClassFilter(org.springframework.aop.ClassFilter)", "public void setClassFilter(org.springframework.aop.ClassFilter)"], ["org.aopalliance.aop.Advice", "org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["org.springframework.aop.Pointcut", "org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo", "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo(org.springframework.transaction.PlatformTransactionManager, org.springframework.transaction.interceptor.TransactionAttribute, java.lang.String)", "public org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo(org.springframework.transaction.PlatformTransactionManager, org.springframework.transaction.interceptor.TransactionAttribute, java.lang.String)"], ["org.springframework.transaction.PlatformTransactionManager", "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.getTransactionManager()", "public org.springframework.transaction.PlatformTransactionManager getTransactionManager()"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.getTransactionAttribute()", "public org.springframework.transaction.interceptor.TransactionAttribute getTransactionAttribute()"], ["java.lang.String", "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.getJoinpointIdentification()", "public java.lang.String getJoinpointIdentification()"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.newTransactionStatus(org.springframework.transaction.TransactionStatus)", "public void newTransactionStatus(org.springframework.transaction.TransactionStatus)"], ["org.springframework.transaction.TransactionStatus", "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.getTransactionStatus()", "public org.springframework.transaction.TransactionStatus getTransactionStatus()"], ["boolean", "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.hasTransaction()", "public boolean hasTransaction()"], ["java.lang.String", "org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.springframework.transaction.interceptor.TransactionAspectSupport$1.getName()", "public java.lang.String getName()"], ["org.springframework.transaction.interceptor.TransactionAttributeEditor", "org.springframework.transaction.interceptor.TransactionAttributeEditor()", "public org.springframework.transaction.interceptor.TransactionAttributeEditor()"], ["void", "org.springframework.transaction.interceptor.TransactionAttributeEditor.setAsText(java.lang.String)", "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"], ["org.springframework.transaction.interceptor.RollbackRuleAttribute", "org.springframework.transaction.interceptor.RollbackRuleAttribute(java.lang.Class<?>)", "public org.springframework.transaction.interceptor.RollbackRuleAttribute(java.lang.Class<?>)"], ["org.springframework.transaction.interceptor.RollbackRuleAttribute", "org.springframework.transaction.interceptor.RollbackRuleAttribute(java.lang.String)", "public org.springframework.transaction.interceptor.RollbackRuleAttribute(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.interceptor.RollbackRuleAttribute.getExceptionName()", "public java.lang.String getExceptionName()"], ["int", "org.springframework.transaction.interceptor.RollbackRuleAttribute.getDepth(java.lang.Throwable)", "public int getDepth(java.lang.Throwable)"], ["boolean", "org.springframework.transaction.interceptor.RollbackRuleAttribute.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.interceptor.RollbackRuleAttribute.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.transaction.interceptor.RollbackRuleAttribute.toString()", "public java.lang.String toString()"], ["org.springframework.transaction.interceptor.CompositeTransactionAttributeSource", "org.springframework.transaction.interceptor.CompositeTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource...)", "public org.springframework.transaction.interceptor.CompositeTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource...)"], ["org.springframework.transaction.interceptor.TransactionAttributeSource[]", "org.springframework.transaction.interceptor.CompositeTransactionAttributeSource.getTransactionAttributeSources()", "public final org.springframework.transaction.interceptor.TransactionAttributeSource[] getTransactionAttributeSources()"], ["boolean", "org.springframework.transaction.interceptor.CompositeTransactionAttributeSource.isCandidateClass(java.lang.Class<?>)", "public boolean isCandidateClass(java.lang.Class<?>)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.interceptor.CompositeTransactionAttributeSource.getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)", "public org.springframework.transaction.interceptor.TransactionAttribute getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)"], ["org.springframework.transaction.interceptor.DefaultTransactionAttribute", "org.springframework.transaction.interceptor.DefaultTransactionAttribute()", "public org.springframework.transaction.interceptor.DefaultTransactionAttribute()"], ["org.springframework.transaction.interceptor.DefaultTransactionAttribute", "org.springframework.transaction.interceptor.DefaultTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute)", "public org.springframework.transaction.interceptor.DefaultTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute)"], ["org.springframework.transaction.interceptor.DefaultTransactionAttribute", "org.springframework.transaction.interceptor.DefaultTransactionAttribute(int)", "public org.springframework.transaction.interceptor.DefaultTransactionAttribute(int)"], ["void", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.setDescriptor(java.lang.String)", "public void setDescriptor(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.getDescriptor()", "public java.lang.String getDescriptor()"], ["void", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.setTimeoutString(java.lang.String)", "public void setTimeoutString(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.getTimeoutString()", "public java.lang.String getTimeoutString()"], ["void", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.setQualifier(java.lang.String)", "public void setQualifier(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.getQualifier()", "public java.lang.String getQualifier()"], ["void", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.setLabels(java.util.Collection<java.lang.String>)", "public void setLabels(java.util.Collection<java.lang.String>)"], ["java.util.Collection<java.lang.String>", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.getLabels()", "public java.util.Collection<java.lang.String> getLabels()"], ["boolean", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.rollbackOn(java.lang.Throwable)", "public boolean rollbackOn(java.lang.Throwable)"], ["void", "org.springframework.transaction.interceptor.DefaultTransactionAttribute.resolveAttributeStrings(org.springframework.util.StringValueResolver)", "public void resolveAttributeStrings(org.springframework.util.StringValueResolver)"], ["org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource()", "public org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource()"], ["void", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.setMethodMap(java.util.Map<java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute>)", "public void setMethodMap(java.util.Map<java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute>)"], ["void", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)", "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"], ["void", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.setBeanClassLoader(java.lang.ClassLoader)", "public void setBeanClassLoader(java.lang.ClassLoader)"], ["void", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.afterPropertiesSet()", "public void afterPropertiesSet()"], ["void", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.addTransactionalMethod(java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute)", "public void addTransactionalMethod(java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute)"], ["void", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.addTransactionalMethod(java.lang.Class<?>, java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute)", "public void addTransactionalMethod(java.lang.Class<?>, java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute)"], ["void", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.addTransactionalMethod(java.lang.reflect.Method, org.springframework.transaction.interceptor.TransactionAttribute)", "public void addTransactionalMethod(java.lang.reflect.Method, org.springframework.transaction.interceptor.TransactionAttribute)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)", "public org.springframework.transaction.interceptor.TransactionAttribute getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.toString()", "public java.lang.String toString()"], ["org.springframework.transaction.interceptor.TransactionInterceptor", "org.springframework.transaction.interceptor.TransactionInterceptor()", "public org.springframework.transaction.interceptor.TransactionInterceptor()"], ["org.springframework.transaction.interceptor.TransactionInterceptor", "org.springframework.transaction.interceptor.TransactionInterceptor(org.springframework.transaction.TransactionManager, org.springframework.transaction.interceptor.TransactionAttributeSource)", "public org.springframework.transaction.interceptor.TransactionInterceptor(org.springframework.transaction.TransactionManager, org.springframework.transaction.interceptor.TransactionAttributeSource)"], ["org.springframework.transaction.interceptor.TransactionInterceptor", "org.springframework.transaction.interceptor.TransactionInterceptor(org.springframework.transaction.PlatformTransactionManager, org.springframework.transaction.interceptor.TransactionAttributeSource)", "public org.springframework.transaction.interceptor.TransactionInterceptor(org.springframework.transaction.PlatformTransactionManager, org.springframework.transaction.interceptor.TransactionAttributeSource)"], ["org.springframework.transaction.interceptor.TransactionInterceptor", "org.springframework.transaction.interceptor.TransactionInterceptor(org.springframework.transaction.PlatformTransactionManager, java.util.Properties)", "public org.springframework.transaction.interceptor.TransactionInterceptor(org.springframework.transaction.PlatformTransactionManager, java.util.Properties)"], ["java.lang.Object", "org.springframework.transaction.interceptor.TransactionInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["java.lang.String", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionSupport$1.getName()", "public java.lang.String getName()"], ["org.springframework.transaction.interceptor.TransactionProxyFactoryBean", "org.springframework.transaction.interceptor.TransactionProxyFactoryBean()", "public org.springframework.transaction.interceptor.TransactionProxyFactoryBean()"], ["void", "org.springframework.transaction.interceptor.TransactionProxyFactoryBean.setTransactionManager(org.springframework.transaction.PlatformTransactionManager)", "public void setTransactionManager(org.springframework.transaction.PlatformTransactionManager)"], ["void", "org.springframework.transaction.interceptor.TransactionProxyFactoryBean.setTransactionAttributes(java.util.Properties)", "public void setTransactionAttributes(java.util.Properties)"], ["void", "org.springframework.transaction.interceptor.TransactionProxyFactoryBean.setTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource)", "public void setTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource)"], ["void", "org.springframework.transaction.interceptor.TransactionProxyFactoryBean.setPointcut(org.springframework.aop.Pointcut)", "public void setPointcut(org.springframework.aop.Pointcut)"], ["void", "org.springframework.transaction.interceptor.TransactionProxyFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["default", "org.springframework.transaction.interceptor.TransactionAttributeSource.boolean isCandidateClass(java.lang.Class<?>)", "public default boolean isCandidateClass(java.lang.Class<?>)"], ["boolean", "org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut$TransactionAttributeSourceClassFilter.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["org.springframework.transaction.TransactionStatus", "org.springframework.transaction.interceptor.TransactionAspectSupport.currentTransactionStatus()", "public static org.springframework.transaction.TransactionStatus currentTransactionStatus() throws org.springframework.transaction.NoTransactionException"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport.setTransactionManagerBeanName(java.lang.String)", "public void setTransactionManagerBeanName(java.lang.String)"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport.setTransactionManager(org.springframework.transaction.TransactionManager)", "public void setTransactionManager(org.springframework.transaction.TransactionManager)"], ["org.springframework.transaction.TransactionManager", "org.springframework.transaction.interceptor.TransactionAspectSupport.getTransactionManager()", "public org.springframework.transaction.TransactionManager getTransactionManager()"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport.setTransactionAttributes(java.util.Properties)", "public void setTransactionAttributes(java.util.Properties)"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport.setTransactionAttributeSources(org.springframework.transaction.interceptor.TransactionAttributeSource...)", "public void setTransactionAttributeSources(org.springframework.transaction.interceptor.TransactionAttributeSource...)"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport.setTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource)", "public void setTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource)"], ["org.springframework.transaction.interceptor.TransactionAttributeSource", "org.springframework.transaction.interceptor.TransactionAspectSupport.getTransactionAttributeSource()", "public org.springframework.transaction.interceptor.TransactionAttributeSource getTransactionAttributeSource()"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource", "org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource()", "public org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource()"], ["void", "org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)", "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)", "public org.springframework.transaction.interceptor.TransactionAttribute getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)"], ["org.springframework.transaction.interceptor.TransactionAttributeSourceEditor", "org.springframework.transaction.interceptor.TransactionAttributeSourceEditor()", "public org.springframework.transaction.interceptor.TransactionAttributeSourceEditor()"], ["void", "org.springframework.transaction.interceptor.TransactionAttributeSourceEditor.setAsText(java.lang.String)", "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"], ["org.springframework.transaction.interceptor.NoRollbackRuleAttribute", "org.springframework.transaction.interceptor.NoRollbackRuleAttribute(java.lang.Class<?>)", "public org.springframework.transaction.interceptor.NoRollbackRuleAttribute(java.lang.Class<?>)"], ["org.springframework.transaction.interceptor.NoRollbackRuleAttribute", "org.springframework.transaction.interceptor.NoRollbackRuleAttribute(java.lang.String)", "public org.springframework.transaction.interceptor.NoRollbackRuleAttribute(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.interceptor.NoRollbackRuleAttribute.toString()", "public java.lang.String toString()"], ["org.springframework.transaction.interceptor.RuleBasedTransactionAttribute", "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute()", "public org.springframework.transaction.interceptor.RuleBasedTransactionAttribute()"], ["org.springframework.transaction.interceptor.RuleBasedTransactionAttribute", "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute(org.springframework.transaction.interceptor.RuleBasedTransactionAttribute)", "public org.springframework.transaction.interceptor.RuleBasedTransactionAttribute(org.springframework.transaction.interceptor.RuleBasedTransactionAttribute)"], ["org.springframework.transaction.interceptor.RuleBasedTransactionAttribute", "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute(int, java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute>)", "public org.springframework.transaction.interceptor.RuleBasedTransactionAttribute(int, java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute>)"], ["void", "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute.setRollbackRules(java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute>)", "public void setRollbackRules(java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute>)"], ["java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute>", "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute.getRollbackRules()", "public java.util.List<org.springframework.transaction.interceptor.RollbackRuleAttribute> getRollbackRules()"], ["boolean", "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute.rollbackOn(java.lang.Throwable)", "public boolean rollbackOn(java.lang.Throwable)"], ["java.lang.String", "org.springframework.transaction.interceptor.RuleBasedTransactionAttribute.toString()", "public java.lang.String toString()"], ["org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource", "org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource()", "public org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource()"], ["void", "org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource.setTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute)", "public void setTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource.getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)", "public org.springframework.transaction.interceptor.TransactionAttribute getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource.toString()", "public java.lang.String toString()"], ["org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo(org.springframework.transaction.ReactiveTransactionManager, org.springframework.transaction.interceptor.TransactionAttribute, java.lang.String)", "public org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo(org.springframework.transaction.ReactiveTransactionManager, org.springframework.transaction.interceptor.TransactionAttribute, java.lang.String)"], ["org.springframework.transaction.ReactiveTransactionManager", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo.getTransactionManager()", "public org.springframework.transaction.ReactiveTransactionManager getTransactionManager()"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo.getTransactionAttribute()", "public org.springframework.transaction.interceptor.TransactionAttribute getTransactionAttribute()"], ["java.lang.String", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo.getJoinpointIdentification()", "public java.lang.String getJoinpointIdentification()"], ["void", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo.newReactiveTransaction(org.springframework.transaction.ReactiveTransaction)", "public void newReactiveTransaction(org.springframework.transaction.ReactiveTransaction)"], ["org.springframework.transaction.ReactiveTransaction", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo.getReactiveTransaction()", "public org.springframework.transaction.ReactiveTransaction getReactiveTransaction()"], ["java.lang.String", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionInfo.toString()", "public java.lang.String toString()"], ["boolean", "org.springframework.transaction.interceptor.TransactionAspectSupport$VavrDelegate.isVavrTry(java.lang.Object)", "public static boolean isVavrTry(java.lang.Object)"], ["java.lang.Object", "org.springframework.transaction.interceptor.TransactionAspectSupport$VavrDelegate.evaluateTryFailure(java.lang.Object, org.springframework.transaction.interceptor.TransactionAttribute, org.springframework.transaction.TransactionStatus)", "public static java.lang.Object evaluateTryFailure(java.lang.Object, org.springframework.transaction.interceptor.TransactionAttribute, org.springframework.transaction.TransactionStatus)"], ["org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor", "org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor()", "public org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor()"], ["void", "org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor.setTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource)", "public void setTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource)"], ["void", "org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor.setClassFilter(org.springframework.aop.ClassFilter)", "public void setClassFilter(org.springframework.aop.ClassFilter)"], ["org.springframework.aop.Pointcut", "org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource()", "public org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource()"], ["void", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.setNameMap(java.util.Map<java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute>)", "public void setNameMap(java.util.Map<java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute>)"], ["void", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.setProperties(java.util.Properties)", "public void setProperties(java.util.Properties)"], ["void", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.addTransactionalMethod(java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute)", "public void addTransactionalMethod(java.lang.String, org.springframework.transaction.interceptor.TransactionAttribute)"], ["void", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)", "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"], ["void", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)", "public org.springframework.transaction.interceptor.TransactionAttribute getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource.toString()", "public java.lang.String toString()"], ["default", "org.springframework.transaction.interceptor.TransactionAspectSupport$CoroutinesInvocationCallback.java.lang.Object getContinuation()", "public default java.lang.Object getContinuation()"], ["org.springframework.transaction.interceptor.TransactionAspectSupport$ThrowableHolderException", "org.springframework.transaction.interceptor.TransactionAspectSupport$ThrowableHolderException(java.lang.Throwable)", "public org.springframework.transaction.interceptor.TransactionAspectSupport$ThrowableHolderException(java.lang.Throwable)"], ["java.lang.String", "org.springframework.transaction.interceptor.TransactionAspectSupport$ThrowableHolderException.toString()", "public java.lang.String toString()"], ["org.springframework.transaction.interceptor.DelegatingTransactionAttribute", "org.springframework.transaction.interceptor.DelegatingTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute)", "public org.springframework.transaction.interceptor.DelegatingTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute)"], ["java.lang.String", "org.springframework.transaction.interceptor.DelegatingTransactionAttribute.getQualifier()", "public java.lang.String getQualifier()"], ["java.util.Collection<java.lang.String>", "org.springframework.transaction.interceptor.DelegatingTransactionAttribute.getLabels()", "public java.util.Collection<java.lang.String> getLabels()"], ["boolean", "org.springframework.transaction.interceptor.DelegatingTransactionAttribute.rollbackOn(java.lang.Throwable)", "public boolean rollbackOn(java.lang.Throwable)"], ["org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionSupport", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionSupport(org.springframework.transaction.interceptor.TransactionAspectSupport, org.springframework.core.ReactiveAdapter)", "public org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionSupport(org.springframework.transaction.interceptor.TransactionAspectSupport, org.springframework.core.ReactiveAdapter)"], ["java.lang.Object", "org.springframework.transaction.interceptor.TransactionAspectSupport$ReactiveTransactionSupport.invokeWithinTransaction(java.lang.reflect.Method, java.lang.Class<?>, org.springframework.transaction.interceptor.TransactionAspectSupport$InvocationCallback, org.springframework.transaction.interceptor.TransactionAttribute, org.springframework.transaction.ReactiveTransactionManager)", "public java.lang.Object invokeWithinTransaction(java.lang.reflect.Method, java.lang.Class<?>, org.springframework.transaction.interceptor.TransactionAspectSupport$InvocationCallback, org.springframework.transaction.interceptor.TransactionAttribute, org.springframework.transaction.ReactiveTransactionManager)"], ["boolean", "org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation()", "public java.lang.Object proceedWithInvocation() throws java.lang.Throwable"], ["java.lang.Object", "org.springframework.transaction.interceptor.TransactionInterceptor$1.getTarget()", "public java.lang.Object getTarget()"], ["java.lang.Object[]", "org.springframework.transaction.interceptor.TransactionInterceptor$1.getArguments()", "public java.lang.Object[] getArguments()"], ["java.lang.String", "org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource$1.toString()", "public java.lang.String toString()"], ["org.springframework.transaction.support.TransactionSynchronizationManager", "org.springframework.transaction.support.TransactionSynchronizationManager()", "public org.springframework.transaction.support.TransactionSynchronizationManager()"], ["java.util.Map<java.lang.Object, java.lang.Object>", "org.springframework.transaction.support.TransactionSynchronizationManager.getResourceMap()", "public static java.util.Map<java.lang.Object, java.lang.Object> getResourceMap()"], ["boolean", "org.springframework.transaction.support.TransactionSynchronizationManager.hasResource(java.lang.Object)", "public static boolean hasResource(java.lang.Object)"], ["java.lang.Object", "org.springframework.transaction.support.TransactionSynchronizationManager.getResource(java.lang.Object)", "public static java.lang.Object getResource(java.lang.Object)"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(java.lang.Object, java.lang.Object)", "public static void bindResource(java.lang.Object, java.lang.Object) throws java.lang.IllegalStateException"], ["java.lang.Object", "org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(java.lang.Object)", "public static java.lang.Object unbindResource(java.lang.Object) throws java.lang.IllegalStateException"], ["java.lang.Object", "org.springframework.transaction.support.TransactionSynchronizationManager.unbindResourceIfPossible(java.lang.Object)", "public static java.lang.Object unbindResourceIfPossible(java.lang.Object)"], ["boolean", "org.springframework.transaction.support.TransactionSynchronizationManager.isSynchronizationActive()", "public static boolean isSynchronizationActive()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.initSynchronization()", "public static void initSynchronization() throws java.lang.IllegalStateException"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.registerSynchronization(org.springframework.transaction.support.TransactionSynchronization)", "public static void registerSynchronization(org.springframework.transaction.support.TransactionSynchronization) throws java.lang.IllegalStateException"], ["java.util.List<org.springframework.transaction.support.TransactionSynchronization>", "org.springframework.transaction.support.TransactionSynchronizationManager.getSynchronizations()", "public static java.util.List<org.springframework.transaction.support.TransactionSynchronization> getSynchronizations() throws java.lang.IllegalStateException"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.clearSynchronization()", "public static void clearSynchronization() throws java.lang.IllegalStateException"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.setCurrentTransactionName(java.lang.String)", "public static void setCurrentTransactionName(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.support.TransactionSynchronizationManager.getCurrentTransactionName()", "public static java.lang.String getCurrentTransactionName()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.setCurrentTransactionReadOnly(boolean)", "public static void setCurrentTransactionReadOnly(boolean)"], ["boolean", "org.springframework.transaction.support.TransactionSynchronizationManager.isCurrentTransactionReadOnly()", "public static boolean isCurrentTransactionReadOnly()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(java.lang.Integer)", "public static void setCurrentTransactionIsolationLevel(java.lang.Integer)"], ["java.lang.Integer", "org.springframework.transaction.support.TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()", "public static java.lang.Integer getCurrentTransactionIsolationLevel()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.setActualTransactionActive(boolean)", "public static void setActualTransactionActive(boolean)"], ["boolean", "org.springframework.transaction.support.TransactionSynchronizationManager.isActualTransactionActive()", "public static boolean isActualTransactionActive()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationManager.clear()", "public static void clear()"], ["org.springframework.transaction.support.AbstractPlatformTransactionManager", "org.springframework.transaction.support.AbstractPlatformTransactionManager()", "public org.springframework.transaction.support.AbstractPlatformTransactionManager()"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.setTransactionSynchronizationName(java.lang.String)", "public final void setTransactionSynchronizationName(java.lang.String)"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.setTransactionSynchronization(int)", "public final void setTransactionSynchronization(int)"], ["int", "org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransactionSynchronization()", "public final int getTransactionSynchronization()"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.setDefaultTimeout(int)", "public final void setDefaultTimeout(int)"], ["int", "org.springframework.transaction.support.AbstractPlatformTransactionManager.getDefaultTimeout()", "public final int getDefaultTimeout()"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.setNestedTransactionAllowed(boolean)", "public final void setNestedTransactionAllowed(boolean)"], ["boolean", "org.springframework.transaction.support.AbstractPlatformTransactionManager.isNestedTransactionAllowed()", "public final boolean isNestedTransactionAllowed()"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.setValidateExistingTransaction(boolean)", "public final void setValidateExistingTransaction(boolean)"], ["boolean", "org.springframework.transaction.support.AbstractPlatformTransactionManager.isValidateExistingTransaction()", "public final boolean isValidateExistingTransaction()"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.setGlobalRollbackOnParticipationFailure(boolean)", "public final void setGlobalRollbackOnParticipationFailure(boolean)"], ["boolean", "org.springframework.transaction.support.AbstractPlatformTransactionManager.isGlobalRollbackOnParticipationFailure()", "public final boolean isGlobalRollbackOnParticipationFailure()"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.setFailEarlyOnGlobalRollbackOnly(boolean)", "public final void setFailEarlyOnGlobalRollbackOnly(boolean)"], ["boolean", "org.springframework.transaction.support.AbstractPlatformTransactionManager.isFailEarlyOnGlobalRollbackOnly()", "public final boolean isFailEarlyOnGlobalRollbackOnly()"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.setRollbackOnCommitFailure(boolean)", "public final void setRollbackOnCommitFailure(boolean)"], ["boolean", "org.springframework.transaction.support.AbstractPlatformTransactionManager.isRollbackOnCommitFailure()", "public final boolean isRollbackOnCommitFailure()"], ["org.springframework.transaction.TransactionStatus", "org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(org.springframework.transaction.TransactionDefinition)", "public final org.springframework.transaction.TransactionStatus getTransaction(org.springframework.transaction.TransactionDefinition) throws org.springframework.transaction.TransactionException"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(org.springframework.transaction.TransactionStatus)", "public final void commit(org.springframework.transaction.TransactionStatus) throws org.springframework.transaction.TransactionException"], ["void", "org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(org.springframework.transaction.TransactionStatus)", "public final void rollback(org.springframework.transaction.TransactionStatus) throws org.springframework.transaction.TransactionException"], ["<T> T", "org.springframework.transaction.support.WithoutTransactionOperations.execute(org.springframework.transaction.support.TransactionCallback<T>)", "public <T> T execute(org.springframework.transaction.support.TransactionCallback<T>) throws org.springframework.transaction.TransactionException"], ["void", "org.springframework.transaction.support.WithoutTransactionOperations.executeWithoutResult(java.util.function.Consumer<org.springframework.transaction.TransactionStatus>)", "public void executeWithoutResult(java.util.function.Consumer<org.springframework.transaction.TransactionStatus>) throws org.springframework.transaction.TransactionException"], ["default", "org.springframework.transaction.support.TransactionSynchronization.int getOrder()", "public default int getOrder()"], ["default", "org.springframework.transaction.support.TransactionSynchronization.void suspend()", "public default void suspend()"], ["default", "org.springframework.transaction.support.TransactionSynchronization.void resume()", "public default void resume()"], ["default", "org.springframework.transaction.support.TransactionSynchronization.void flush()", "public default void flush()"], ["default", "org.springframework.transaction.support.TransactionSynchronization.void beforeCommit(boolean)", "public default void beforeCommit(boolean)"], ["default", "org.springframework.transaction.support.TransactionSynchronization.void beforeCompletion()", "public default void beforeCompletion()"], ["default", "org.springframework.transaction.support.TransactionSynchronization.void afterCommit()", "public default void afterCommit()"], ["default", "org.springframework.transaction.support.TransactionSynchronization.void afterCompletion(int)", "public default void afterCompletion(int)"], ["org.springframework.transaction.support.DefaultTransactionDefinition", "org.springframework.transaction.support.DefaultTransactionDefinition()", "public org.springframework.transaction.support.DefaultTransactionDefinition()"], ["org.springframework.transaction.support.DefaultTransactionDefinition", "org.springframework.transaction.support.DefaultTransactionDefinition(org.springframework.transaction.TransactionDefinition)", "public org.springframework.transaction.support.DefaultTransactionDefinition(org.springframework.transaction.TransactionDefinition)"], ["org.springframework.transaction.support.DefaultTransactionDefinition", "org.springframework.transaction.support.DefaultTransactionDefinition(int)", "public org.springframework.transaction.support.DefaultTransactionDefinition(int)"], ["void", "org.springframework.transaction.support.DefaultTransactionDefinition.setPropagationBehaviorName(java.lang.String)", "public final void setPropagationBehaviorName(java.lang.String) throws java.lang.IllegalArgumentException"], ["void", "org.springframework.transaction.support.DefaultTransactionDefinition.setPropagationBehavior(int)", "public final void setPropagationBehavior(int)"], ["int", "org.springframework.transaction.support.DefaultTransactionDefinition.getPropagationBehavior()", "public final int getPropagationBehavior()"], ["void", "org.springframework.transaction.support.DefaultTransactionDefinition.setIsolationLevelName(java.lang.String)", "public final void setIsolationLevelName(java.lang.String) throws java.lang.IllegalArgumentException"], ["void", "org.springframework.transaction.support.DefaultTransactionDefinition.setIsolationLevel(int)", "public final void setIsolationLevel(int)"], ["int", "org.springframework.transaction.support.DefaultTransactionDefinition.getIsolationLevel()", "public final int getIsolationLevel()"], ["void", "org.springframework.transaction.support.DefaultTransactionDefinition.setTimeout(int)", "public final void setTimeout(int)"], ["int", "org.springframework.transaction.support.DefaultTransactionDefinition.getTimeout()", "public final int getTimeout()"], ["void", "org.springframework.transaction.support.DefaultTransactionDefinition.setReadOnly(boolean)", "public final void setReadOnly(boolean)"], ["boolean", "org.springframework.transaction.support.DefaultTransactionDefinition.isReadOnly()", "public final boolean isReadOnly()"], ["void", "org.springframework.transaction.support.DefaultTransactionDefinition.setName(java.lang.String)", "public final void setName(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.support.DefaultTransactionDefinition.getName()", "public final java.lang.String getName()"], ["boolean", "org.springframework.transaction.support.DefaultTransactionDefinition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.support.DefaultTransactionDefinition.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.transaction.support.DefaultTransactionDefinition.toString()", "public java.lang.String toString()"], ["default", "org.springframework.transaction.support.TransactionOperations.void executeWithoutResult(java.util.function.Consumer<org.springframework.transaction.TransactionStatus>)", "public default void executeWithoutResult(java.util.function.Consumer<org.springframework.transaction.TransactionStatus>) throws org.springframework.transaction.TransactionException"], ["org.springframework.transaction.support.TransactionOperations", "org.springframework.transaction.support.TransactionOperations.withoutTransaction()", "public static org.springframework.transaction.support.TransactionOperations withoutTransaction()"], ["org.springframework.transaction.support.TransactionCallbackWithoutResult", "org.springframework.transaction.support.TransactionCallbackWithoutResult()", "public org.springframework.transaction.support.TransactionCallbackWithoutResult()"], ["java.lang.Object", "org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(org.springframework.transaction.TransactionStatus)", "public final java.lang.Object doInTransaction(org.springframework.transaction.TransactionStatus)"], ["org.springframework.transaction.support.TransactionSynchronizationUtils", "org.springframework.transaction.support.TransactionSynchronizationUtils()", "public org.springframework.transaction.support.TransactionSynchronizationUtils()"], ["boolean", "org.springframework.transaction.support.TransactionSynchronizationUtils.sameResourceFactory(org.springframework.transaction.support.ResourceTransactionManager, java.lang.Object)", "public static boolean sameResourceFactory(org.springframework.transaction.support.ResourceTransactionManager, java.lang.Object)"], ["java.lang.Object", "org.springframework.transaction.support.TransactionSynchronizationUtils.unwrapResourceIfNecessary(java.lang.Object)", "public static java.lang.Object unwrapResourceIfNecessary(java.lang.Object)"], ["void", "org.springframework.transaction.support.TransactionSynchronizationUtils.triggerFlush()", "public static void triggerFlush()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationUtils.triggerBeforeCommit(boolean)", "public static void triggerBeforeCommit(boolean)"], ["void", "org.springframework.transaction.support.TransactionSynchronizationUtils.triggerBeforeCompletion()", "public static void triggerBeforeCompletion()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationUtils.triggerAfterCommit()", "public static void triggerAfterCommit()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCommit(java.util.List<org.springframework.transaction.support.TransactionSynchronization>)", "public static void invokeAfterCommit(java.util.List<org.springframework.transaction.support.TransactionSynchronization>)"], ["void", "org.springframework.transaction.support.TransactionSynchronizationUtils.triggerAfterCompletion(int)", "public static void triggerAfterCompletion(int)"], ["void", "org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCompletion(java.util.List<org.springframework.transaction.support.TransactionSynchronization>, int)", "public static void invokeAfterCompletion(java.util.List<org.springframework.transaction.support.TransactionSynchronization>, int)"], ["org.springframework.transaction.support.SimpleTransactionScope", "org.springframework.transaction.support.SimpleTransactionScope()", "public org.springframework.transaction.support.SimpleTransactionScope()"], ["java.lang.Object", "org.springframework.transaction.support.SimpleTransactionScope.get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)", "public java.lang.Object get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)"], ["java.lang.Object", "org.springframework.transaction.support.SimpleTransactionScope.remove(java.lang.String)", "public java.lang.Object remove(java.lang.String)"], ["void", "org.springframework.transaction.support.SimpleTransactionScope.registerDestructionCallback(java.lang.String, java.lang.Runnable)", "public void registerDestructionCallback(java.lang.String, java.lang.Runnable)"], ["java.lang.Object", "org.springframework.transaction.support.SimpleTransactionScope.resolveContextualObject(java.lang.String)", "public java.lang.Object resolveContextualObject(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.support.SimpleTransactionScope.getConversationId()", "public java.lang.String getConversationId()"], ["org.springframework.transaction.support.TransactionSynchronizationAdapter", "org.springframework.transaction.support.TransactionSynchronizationAdapter()", "public org.springframework.transaction.support.TransactionSynchronizationAdapter()"], ["int", "org.springframework.transaction.support.TransactionSynchronizationAdapter.getOrder()", "public int getOrder()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationAdapter.suspend()", "public void suspend()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationAdapter.resume()", "public void resume()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationAdapter.flush()", "public void flush()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationAdapter.beforeCommit(boolean)", "public void beforeCommit(boolean)"], ["void", "org.springframework.transaction.support.TransactionSynchronizationAdapter.beforeCompletion()", "public void beforeCompletion()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationAdapter.afterCommit()", "public void afterCommit()"], ["void", "org.springframework.transaction.support.TransactionSynchronizationAdapter.afterCompletion(int)", "public void afterCompletion(int)"], ["java.lang.Object", "org.springframework.transaction.support.TransactionSynchronizationUtils$ScopedProxyUnwrapper.unwrapIfNecessary(java.lang.Object)", "public static java.lang.Object unwrapIfNecessary(java.lang.Object)"], ["org.springframework.transaction.support.SimpleTransactionStatus", "org.springframework.transaction.support.SimpleTransactionStatus()", "public org.springframework.transaction.support.SimpleTransactionStatus()"], ["org.springframework.transaction.support.SimpleTransactionStatus", "org.springframework.transaction.support.SimpleTransactionStatus(boolean)", "public org.springframework.transaction.support.SimpleTransactionStatus(boolean)"], ["boolean", "org.springframework.transaction.support.SimpleTransactionStatus.isNewTransaction()", "public boolean isNewTransaction()"], ["org.springframework.transaction.support.DefaultTransactionStatus", "org.springframework.transaction.support.DefaultTransactionStatus(java.lang.Object, boolean, boolean, boolean, boolean, java.lang.Object)", "public org.springframework.transaction.support.DefaultTransactionStatus(java.lang.Object, boolean, boolean, boolean, boolean, java.lang.Object)"], ["java.lang.Object", "org.springframework.transaction.support.DefaultTransactionStatus.getTransaction()", "public java.lang.Object getTransaction()"], ["boolean", "org.springframework.transaction.support.DefaultTransactionStatus.hasTransaction()", "public boolean hasTransaction()"], ["boolean", "org.springframework.transaction.support.DefaultTransactionStatus.isNewTransaction()", "public boolean isNewTransaction()"], ["boolean", "org.springframework.transaction.support.DefaultTransactionStatus.isNewSynchronization()", "public boolean isNewSynchronization()"], ["boolean", "org.springframework.transaction.support.DefaultTransactionStatus.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.springframework.transaction.support.DefaultTransactionStatus.isDebug()", "public boolean isDebug()"], ["java.lang.Object", "org.springframework.transaction.support.DefaultTransactionStatus.getSuspendedResources()", "public java.lang.Object getSuspendedResources()"], ["boolean", "org.springframework.transaction.support.DefaultTransactionStatus.isGlobalRollbackOnly()", "public boolean isGlobalRollbackOnly()"], ["boolean", "org.springframework.transaction.support.DefaultTransactionStatus.isTransactionSavepointManager()", "public boolean isTransactionSavepointManager()"], ["void", "org.springframework.transaction.support.DefaultTransactionStatus.flush()", "public void flush()"], ["org.springframework.transaction.support.ResourceHolderSynchronization", "org.springframework.transaction.support.ResourceHolderSynchronization(H, K)", "public org.springframework.transaction.support.ResourceHolderSynchronization(H, K)"], ["void", "org.springframework.transaction.support.ResourceHolderSynchronization.suspend()", "public void suspend()"], ["void", "org.springframework.transaction.support.ResourceHolderSynchronization.resume()", "public void resume()"], ["void", "org.springframework.transaction.support.ResourceHolderSynchronization.flush()", "public void flush()"], ["void", "org.springframework.transaction.support.ResourceHolderSynchronization.beforeCommit(boolean)", "public void beforeCommit(boolean)"], ["void", "org.springframework.transaction.support.ResourceHolderSynchronization.beforeCompletion()", "public void beforeCompletion()"], ["void", "org.springframework.transaction.support.ResourceHolderSynchronization.afterCommit()", "public void afterCommit()"], ["void", "org.springframework.transaction.support.ResourceHolderSynchronization.afterCompletion(int)", "public void afterCompletion(int)"], ["org.springframework.transaction.support.DelegatingTransactionDefinition", "org.springframework.transaction.support.DelegatingTransactionDefinition(org.springframework.transaction.TransactionDefinition)", "public org.springframework.transaction.support.DelegatingTransactionDefinition(org.springframework.transaction.TransactionDefinition)"], ["int", "org.springframework.transaction.support.DelegatingTransactionDefinition.getPropagationBehavior()", "public int getPropagationBehavior()"], ["int", "org.springframework.transaction.support.DelegatingTransactionDefinition.getIsolationLevel()", "public int getIsolationLevel()"], ["int", "org.springframework.transaction.support.DelegatingTransactionDefinition.getTimeout()", "public int getTimeout()"], ["boolean", "org.springframework.transaction.support.DelegatingTransactionDefinition.isReadOnly()", "public boolean isReadOnly()"], ["java.lang.String", "org.springframework.transaction.support.DelegatingTransactionDefinition.getName()", "public java.lang.String getName()"], ["boolean", "org.springframework.transaction.support.DelegatingTransactionDefinition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.support.DelegatingTransactionDefinition.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.transaction.support.DelegatingTransactionDefinition.toString()", "public java.lang.String toString()"], ["org.springframework.transaction.support.ResourceHolderSupport", "org.springframework.transaction.support.ResourceHolderSupport()", "public org.springframework.transaction.support.ResourceHolderSupport()"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.setSynchronizedWithTransaction(boolean)", "public void setSynchronizedWithTransaction(boolean)"], ["boolean", "org.springframework.transaction.support.ResourceHolderSupport.isSynchronizedWithTransaction()", "public boolean isSynchronizedWithTransaction()"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.setRollbackOnly()", "public void setRollbackOnly()"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.resetRollbackOnly()", "public void resetRollbackOnly()"], ["boolean", "org.springframework.transaction.support.ResourceHolderSupport.isRollbackOnly()", "public boolean isRollbackOnly()"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.setTimeoutInSeconds(int)", "public void setTimeoutInSeconds(int)"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.setTimeoutInMillis(long)", "public void setTimeoutInMillis(long)"], ["boolean", "org.springframework.transaction.support.ResourceHolderSupport.hasTimeout()", "public boolean hasTimeout()"], ["java.util.Date", "org.springframework.transaction.support.ResourceHolderSupport.getDeadline()", "public java.util.Date getDeadline()"], ["int", "org.springframework.transaction.support.ResourceHolderSupport.getTimeToLiveInSeconds()", "public int getTimeToLiveInSeconds()"], ["long", "org.springframework.transaction.support.ResourceHolderSupport.getTimeToLiveInMillis()", "public long getTimeToLiveInMillis() throws org.springframework.transaction.TransactionTimedOutException"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.requested()", "public void requested()"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.released()", "public void released()"], ["boolean", "org.springframework.transaction.support.ResourceHolderSupport.isOpen()", "public boolean isOpen()"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.clear()", "public void clear()"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.reset()", "public void reset()"], ["void", "org.springframework.transaction.support.ResourceHolderSupport.unbound()", "public void unbound()"], ["boolean", "org.springframework.transaction.support.ResourceHolderSupport.isVoid()", "public boolean isVoid()"], ["org.springframework.transaction.support.TransactionTemplate", "org.springframework.transaction.support.TransactionTemplate()", "public org.springframework.transaction.support.TransactionTemplate()"], ["org.springframework.transaction.support.TransactionTemplate", "org.springframework.transaction.support.TransactionTemplate(org.springframework.transaction.PlatformTransactionManager)", "public org.springframework.transaction.support.TransactionTemplate(org.springframework.transaction.PlatformTransactionManager)"], ["org.springframework.transaction.support.TransactionTemplate", "org.springframework.transaction.support.TransactionTemplate(org.springframework.transaction.PlatformTransactionManager, org.springframework.transaction.TransactionDefinition)", "public org.springframework.transaction.support.TransactionTemplate(org.springframework.transaction.PlatformTransactionManager, org.springframework.transaction.TransactionDefinition)"], ["void", "org.springframework.transaction.support.TransactionTemplate.setTransactionManager(org.springframework.transaction.PlatformTransactionManager)", "public void setTransactionManager(org.springframework.transaction.PlatformTransactionManager)"], ["org.springframework.transaction.PlatformTransactionManager", "org.springframework.transaction.support.TransactionTemplate.getTransactionManager()", "public org.springframework.transaction.PlatformTransactionManager getTransactionManager()"], ["void", "org.springframework.transaction.support.TransactionTemplate.afterPropertiesSet()", "public void afterPropertiesSet()"], ["<T> T", "org.springframework.transaction.support.TransactionTemplate.execute(org.springframework.transaction.support.TransactionCallback<T>)", "public <T> T execute(org.springframework.transaction.support.TransactionCallback<T>) throws org.springframework.transaction.TransactionException"], ["boolean", "org.springframework.transaction.support.TransactionTemplate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.springframework.transaction.support.AbstractTransactionStatus", "org.springframework.transaction.support.AbstractTransactionStatus()", "public org.springframework.transaction.support.AbstractTransactionStatus()"], ["void", "org.springframework.transaction.support.AbstractTransactionStatus.setRollbackOnly()", "public void setRollbackOnly()"], ["boolean", "org.springframework.transaction.support.AbstractTransactionStatus.isRollbackOnly()", "public boolean isRollbackOnly()"], ["boolean", "org.springframework.transaction.support.AbstractTransactionStatus.isLocalRollbackOnly()", "public boolean isLocalRollbackOnly()"], ["boolean", "org.springframework.transaction.support.AbstractTransactionStatus.isGlobalRollbackOnly()", "public boolean isGlobalRollbackOnly()"], ["void", "org.springframework.transaction.support.AbstractTransactionStatus.setCompleted()", "public void setCompleted()"], ["boolean", "org.springframework.transaction.support.AbstractTransactionStatus.isCompleted()", "public boolean isCompleted()"], ["boolean", "org.springframework.transaction.support.AbstractTransactionStatus.hasSavepoint()", "public boolean hasSavepoint()"], ["void", "org.springframework.transaction.support.AbstractTransactionStatus.createAndHoldSavepoint()", "public void createAndHoldSavepoint() throws org.springframework.transaction.TransactionException"], ["void", "org.springframework.transaction.support.AbstractTransactionStatus.rollbackToHeldSavepoint()", "public void rollbackToHeldSavepoint() throws org.springframework.transaction.TransactionException"], ["void", "org.springframework.transaction.support.AbstractTransactionStatus.releaseHeldSavepoint()", "public void releaseHeldSavepoint() throws org.springframework.transaction.TransactionException"], ["java.lang.Object", "org.springframework.transaction.support.AbstractTransactionStatus.createSavepoint()", "public java.lang.Object createSavepoint() throws org.springframework.transaction.TransactionException"], ["void", "org.springframework.transaction.support.AbstractTransactionStatus.rollbackToSavepoint(java.lang.Object)", "public void rollbackToSavepoint(java.lang.Object) throws org.springframework.transaction.TransactionException"], ["void", "org.springframework.transaction.support.AbstractTransactionStatus.releaseSavepoint(java.lang.Object)", "public void releaseSavepoint(java.lang.Object) throws org.springframework.transaction.TransactionException"], ["void", "org.springframework.transaction.support.AbstractTransactionStatus.flush()", "public void flush()"], ["org.springframework.transaction.support.SimpleTransactionScope$CleanupSynchronization", "org.springframework.transaction.support.SimpleTransactionScope$CleanupSynchronization(org.springframework.transaction.support.SimpleTransactionScope, org.springframework.transaction.support.SimpleTransactionScope$ScopedObjectsHolder)", "public org.springframework.transaction.support.SimpleTransactionScope$CleanupSynchronization(org.springframework.transaction.support.SimpleTransactionScope, org.springframework.transaction.support.SimpleTransactionScope$ScopedObjectsHolder)"], ["void", "org.springframework.transaction.support.SimpleTransactionScope$CleanupSynchronization.suspend()", "public void suspend()"], ["void", "org.springframework.transaction.support.SimpleTransactionScope$CleanupSynchronization.resume()", "public void resume()"], ["void", "org.springframework.transaction.support.SimpleTransactionScope$CleanupSynchronization.afterCompletion(int)", "public void afterCompletion(int)"], ["org.springframework.transaction.TransactionTimedOutException", "org.springframework.transaction.TransactionTimedOutException(java.lang.String)", "public org.springframework.transaction.TransactionTimedOutException(java.lang.String)"], ["org.springframework.transaction.TransactionTimedOutException", "org.springframework.transaction.TransactionTimedOutException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.TransactionTimedOutException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.CannotCreateTransactionException", "org.springframework.transaction.CannotCreateTransactionException(java.lang.String)", "public org.springframework.transaction.CannotCreateTransactionException(java.lang.String)"], ["org.springframework.transaction.CannotCreateTransactionException", "org.springframework.transaction.CannotCreateTransactionException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.CannotCreateTransactionException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration", "org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration()", "public org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration()"], ["org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor", "org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration.transactionAdvisor(org.springframework.transaction.interceptor.TransactionAttributeSource, org.springframework.transaction.interceptor.TransactionInterceptor)", "public org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor(org.springframework.transaction.interceptor.TransactionAttributeSource, org.springframework.transaction.interceptor.TransactionInterceptor)"], ["org.springframework.transaction.interceptor.TransactionAttributeSource", "org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration.transactionAttributeSource()", "public org.springframework.transaction.interceptor.TransactionAttributeSource transactionAttributeSource()"], ["org.springframework.transaction.interceptor.TransactionInterceptor", "org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration.transactionInterceptor(org.springframework.transaction.interceptor.TransactionAttributeSource)", "public org.springframework.transaction.interceptor.TransactionInterceptor transactionInterceptor(org.springframework.transaction.interceptor.TransactionAttributeSource)"], ["default", "org.springframework.transaction.annotation.TransactionAnnotationParser.boolean isCandidateClass(java.lang.Class<?>)", "public default boolean isCandidateClass(java.lang.Class<?>)"], ["org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration", "org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration()", "public org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration()"], ["void", "org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration.setImportMetadata(org.springframework.core.type.AnnotationMetadata)", "public void setImportMetadata(org.springframework.core.type.AnnotationMetadata)"], ["org.springframework.transaction.event.TransactionalEventListenerFactory", "org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration.transactionalEventListenerFactory()", "public static org.springframework.transaction.event.TransactionalEventListenerFactory transactionalEventListenerFactory()"], ["org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser", "org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser()", "public org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser()"], ["boolean", "org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser.isCandidateClass(java.lang.Class<?>)", "public boolean isCandidateClass(java.lang.Class<?>)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser.parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)", "public org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser.parseTransactionAnnotation(javax.ejb.TransactionAttribute)", "public org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(javax.ejb.TransactionAttribute)"], ["boolean", "org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser.hashCode()", "public int hashCode()"], ["org.springframework.transaction.annotation.Propagation[]", "org.springframework.transaction.annotation.Propagation.values()", "public static org.springframework.transaction.annotation.Propagation[] values()"], ["org.springframework.transaction.annotation.Propagation", "org.springframework.transaction.annotation.Propagation.valueOf(java.lang.String)", "public static org.springframework.transaction.annotation.Propagation valueOf(java.lang.String)"], ["int", "org.springframework.transaction.annotation.Propagation.value()", "public int value()"], ["org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser$Ejb3TransactionAttribute", "org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser$Ejb3TransactionAttribute(javax.ejb.TransactionAttributeType)", "public org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser$Ejb3TransactionAttribute(javax.ejb.TransactionAttributeType)"], ["boolean", "org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser$Ejb3TransactionAttribute.rollbackOn(java.lang.Throwable)", "public boolean rollbackOn(java.lang.Throwable)"], ["org.springframework.transaction.annotation.SpringTransactionAnnotationParser", "org.springframework.transaction.annotation.SpringTransactionAnnotationParser()", "public org.springframework.transaction.annotation.SpringTransactionAnnotationParser()"], ["boolean", "org.springframework.transaction.annotation.SpringTransactionAnnotationParser.isCandidateClass(java.lang.Class<?>)", "public boolean isCandidateClass(java.lang.Class<?>)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.annotation.SpringTransactionAnnotationParser.parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)", "public org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.annotation.SpringTransactionAnnotationParser.parseTransactionAnnotation(org.springframework.transaction.annotation.Transactional)", "public org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(org.springframework.transaction.annotation.Transactional)"], ["boolean", "org.springframework.transaction.annotation.SpringTransactionAnnotationParser.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.annotation.SpringTransactionAnnotationParser.hashCode()", "public int hashCode()"], ["org.springframework.transaction.annotation.AnnotationTransactionAttributeSource", "org.springframework.transaction.annotation.AnnotationTransactionAttributeSource()", "public org.springframework.transaction.annotation.AnnotationTransactionAttributeSource()"], ["org.springframework.transaction.annotation.AnnotationTransactionAttributeSource", "org.springframework.transaction.annotation.AnnotationTransactionAttributeSource(boolean)", "public org.springframework.transaction.annotation.AnnotationTransactionAttributeSource(boolean)"], ["org.springframework.transaction.annotation.AnnotationTransactionAttributeSource", "org.springframework.transaction.annotation.AnnotationTransactionAttributeSource(org.springframework.transaction.annotation.TransactionAnnotationParser)", "public org.springframework.transaction.annotation.AnnotationTransactionAttributeSource(org.springframework.transaction.annotation.TransactionAnnotationParser)"], ["org.springframework.transaction.annotation.AnnotationTransactionAttributeSource", "org.springframework.transaction.annotation.AnnotationTransactionAttributeSource(org.springframework.transaction.annotation.TransactionAnnotationParser...)", "public org.springframework.transaction.annotation.AnnotationTransactionAttributeSource(org.springframework.transaction.annotation.TransactionAnnotationParser...)"], ["org.springframework.transaction.annotation.AnnotationTransactionAttributeSource", "org.springframework.transaction.annotation.AnnotationTransactionAttributeSource(java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser>)", "public org.springframework.transaction.annotation.AnnotationTransactionAttributeSource(java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser>)"], ["boolean", "org.springframework.transaction.annotation.AnnotationTransactionAttributeSource.isCandidateClass(java.lang.Class<?>)", "public boolean isCandidateClass(java.lang.Class<?>)"], ["boolean", "org.springframework.transaction.annotation.AnnotationTransactionAttributeSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.annotation.AnnotationTransactionAttributeSource.hashCode()", "public int hashCode()"], ["org.springframework.transaction.annotation.TransactionManagementConfigurationSelector", "org.springframework.transaction.annotation.TransactionManagementConfigurationSelector()", "public org.springframework.transaction.annotation.TransactionManagementConfigurationSelector()"], ["org.springframework.transaction.annotation.Isolation[]", "org.springframework.transaction.annotation.Isolation.values()", "public static org.springframework.transaction.annotation.Isolation[] values()"], ["org.springframework.transaction.annotation.Isolation", "org.springframework.transaction.annotation.Isolation.valueOf(java.lang.String)", "public static org.springframework.transaction.annotation.Isolation valueOf(java.lang.String)"], ["int", "org.springframework.transaction.annotation.Isolation.value()", "public int value()"], ["org.springframework.transaction.annotation.JtaTransactionAnnotationParser", "org.springframework.transaction.annotation.JtaTransactionAnnotationParser()", "public org.springframework.transaction.annotation.JtaTransactionAnnotationParser()"], ["boolean", "org.springframework.transaction.annotation.JtaTransactionAnnotationParser.isCandidateClass(java.lang.Class<?>)", "public boolean isCandidateClass(java.lang.Class<?>)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.annotation.JtaTransactionAnnotationParser.parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)", "public org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)"], ["org.springframework.transaction.interceptor.TransactionAttribute", "org.springframework.transaction.annotation.JtaTransactionAnnotationParser.parseTransactionAnnotation(javax.transaction.Transactional)", "public org.springframework.transaction.interceptor.TransactionAttribute parseTransactionAnnotation(javax.transaction.Transactional)"], ["boolean", "org.springframework.transaction.annotation.JtaTransactionAnnotationParser.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.annotation.JtaTransactionAnnotationParser.hashCode()", "public int hashCode()"], ["org.springframework.transaction.UnexpectedRollbackException", "org.springframework.transaction.UnexpectedRollbackException(java.lang.String)", "public org.springframework.transaction.UnexpectedRollbackException(java.lang.String)"], ["org.springframework.transaction.UnexpectedRollbackException", "org.springframework.transaction.UnexpectedRollbackException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.UnexpectedRollbackException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.TransactionException", "org.springframework.transaction.TransactionException(java.lang.String)", "public org.springframework.transaction.TransactionException(java.lang.String)"], ["org.springframework.transaction.TransactionException", "org.springframework.transaction.TransactionException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.TransactionException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.NoTransactionException", "org.springframework.transaction.NoTransactionException(java.lang.String)", "public org.springframework.transaction.NoTransactionException(java.lang.String)"], ["org.springframework.transaction.NoTransactionException", "org.springframework.transaction.NoTransactionException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.NoTransactionException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.TransactionSuspensionNotSupportedException", "org.springframework.transaction.TransactionSuspensionNotSupportedException(java.lang.String)", "public org.springframework.transaction.TransactionSuspensionNotSupportedException(java.lang.String)"], ["org.springframework.transaction.TransactionSuspensionNotSupportedException", "org.springframework.transaction.TransactionSuspensionNotSupportedException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.TransactionSuspensionNotSupportedException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.InvalidTimeoutException", "org.springframework.transaction.InvalidTimeoutException(java.lang.String, int)", "public org.springframework.transaction.InvalidTimeoutException(java.lang.String, int)"], ["int", "org.springframework.transaction.InvalidTimeoutException.getTimeout()", "public int getTimeout()"], ["org.springframework.transaction.event.TransactionalApplicationListenerSynchronization", "org.springframework.transaction.event.TransactionalApplicationListenerSynchronization(E, org.springframework.transaction.event.TransactionalApplicationListener<E>, java.util.List<org.springframework.transaction.event.TransactionalApplicationListener$SynchronizationCallback>)", "public org.springframework.transaction.event.TransactionalApplicationListenerSynchronization(E, org.springframework.transaction.event.TransactionalApplicationListener<E>, java.util.List<org.springframework.transaction.event.TransactionalApplicationListener$SynchronizationCallback>)"], ["int", "org.springframework.transaction.event.TransactionalApplicationListenerSynchronization.getOrder()", "public int getOrder()"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerSynchronization.beforeCommit(boolean)", "public void beforeCommit(boolean)"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerSynchronization.afterCompletion(int)", "public void afterCompletion(int)"], ["default", "org.springframework.transaction.event.TransactionalApplicationListener$SynchronizationCallback.void preProcessEvent(org.springframework.context.ApplicationEvent)", "public default void preProcessEvent(org.springframework.context.ApplicationEvent)"], ["default", "org.springframework.transaction.event.TransactionalApplicationListener$SynchronizationCallback.void postProcessEvent(org.springframework.context.ApplicationEvent, java.lang.Throwable)", "public default void postProcessEvent(org.springframework.context.ApplicationEvent, java.lang.Throwable)"], ["org.springframework.transaction.event.TransactionalEventListenerFactory", "org.springframework.transaction.event.TransactionalEventListenerFactory()", "public org.springframework.transaction.event.TransactionalEventListenerFactory()"], ["void", "org.springframework.transaction.event.TransactionalEventListenerFactory.setOrder(int)", "public void setOrder(int)"], ["int", "org.springframework.transaction.event.TransactionalEventListenerFactory.getOrder()", "public int getOrder()"], ["boolean", "org.springframework.transaction.event.TransactionalEventListenerFactory.supportsMethod(java.lang.reflect.Method)", "public boolean supportsMethod(java.lang.reflect.Method)"], ["org.springframework.context.ApplicationListener<?>", "org.springframework.transaction.event.TransactionalEventListenerFactory.createApplicationListener(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method)", "public org.springframework.context.ApplicationListener<?> createApplicationListener(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method)"], ["org.springframework.transaction.event.TransactionalApplicationListenerAdapter", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter(org.springframework.context.ApplicationListener<E>)", "public org.springframework.transaction.event.TransactionalApplicationListenerAdapter(org.springframework.context.ApplicationListener<E>)"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.setOrder(int)", "public void setOrder(int)"], ["int", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.getOrder()", "public int getOrder()"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.setTransactionPhase(org.springframework.transaction.event.TransactionPhase)", "public void setTransactionPhase(org.springframework.transaction.event.TransactionPhase)"], ["org.springframework.transaction.event.TransactionPhase", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.getTransactionPhase()", "public org.springframework.transaction.event.TransactionPhase getTransactionPhase()"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.setListenerId(java.lang.String)", "public void setListenerId(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.getListenerId()", "public java.lang.String getListenerId()"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.addCallback(org.springframework.transaction.event.TransactionalApplicationListener$SynchronizationCallback)", "public void addCallback(org.springframework.transaction.event.TransactionalApplicationListener$SynchronizationCallback)"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.processEvent(E)", "public void processEvent(E)"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerAdapter.onApplicationEvent(E)", "public void onApplicationEvent(E)"], ["org.springframework.transaction.event.TransactionPhase[]", "org.springframework.transaction.event.TransactionPhase.values()", "public static org.springframework.transaction.event.TransactionPhase[] values()"], ["org.springframework.transaction.event.TransactionPhase", "org.springframework.transaction.event.TransactionPhase.valueOf(java.lang.String)", "public static org.springframework.transaction.event.TransactionPhase valueOf(java.lang.String)"], ["default", "org.springframework.transaction.event.TransactionalApplicationListener.int getOrder()", "public default int getOrder()"], ["default", "org.springframework.transaction.event.TransactionalApplicationListener.java.lang.String getListenerId()", "public default java.lang.String getListenerId()"], ["default", "org.springframework.transaction.event.TransactionalApplicationListener.org.springframework.transaction.event.TransactionPhase getTransactionPhase()", "public default org.springframework.transaction.event.TransactionPhase getTransactionPhase()"], ["<T> org.springframework.transaction.event.TransactionalApplicationListener<org.springframework.context.PayloadApplicationEvent<T>>", "org.springframework.transaction.event.TransactionalApplicationListener.forPayload(java.util.function.Consumer<T>)", "public static <T> org.springframework.transaction.event.TransactionalApplicationListener<org.springframework.context.PayloadApplicationEvent<T>> forPayload(java.util.function.Consumer<T>)"], ["<T> org.springframework.transaction.event.TransactionalApplicationListener<org.springframework.context.PayloadApplicationEvent<T>>", "org.springframework.transaction.event.TransactionalApplicationListener.forPayload(org.springframework.transaction.event.TransactionPhase, java.util.function.Consumer<T>)", "public static <T> org.springframework.transaction.event.TransactionalApplicationListener<org.springframework.context.PayloadApplicationEvent<T>> forPayload(org.springframework.transaction.event.TransactionPhase, java.util.function.Consumer<T>)"], ["org.springframework.transaction.event.TransactionalApplicationListenerMethodAdapter", "org.springframework.transaction.event.TransactionalApplicationListenerMethodAdapter(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method)", "public org.springframework.transaction.event.TransactionalApplicationListenerMethodAdapter(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method)"], ["org.springframework.transaction.event.TransactionPhase", "org.springframework.transaction.event.TransactionalApplicationListenerMethodAdapter.getTransactionPhase()", "public org.springframework.transaction.event.TransactionPhase getTransactionPhase()"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerMethodAdapter.addCallback(org.springframework.transaction.event.TransactionalApplicationListener$SynchronizationCallback)", "public void addCallback(org.springframework.transaction.event.TransactionalApplicationListener$SynchronizationCallback)"], ["void", "org.springframework.transaction.event.TransactionalApplicationListenerMethodAdapter.onApplicationEvent(org.springframework.context.ApplicationEvent)", "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"], ["org.springframework.transaction.InvalidIsolationLevelException", "org.springframework.transaction.InvalidIsolationLevelException(java.lang.String)", "public org.springframework.transaction.InvalidIsolationLevelException(java.lang.String)"], ["org.springframework.transaction.TransactionUsageException", "org.springframework.transaction.TransactionUsageException(java.lang.String)", "public org.springframework.transaction.TransactionUsageException(java.lang.String)"], ["org.springframework.transaction.TransactionUsageException", "org.springframework.transaction.TransactionUsageException(java.lang.String, java.lang.Throwable)", "public org.springframework.transaction.TransactionUsageException(java.lang.String, java.lang.Throwable)"], ["org.springframework.transaction.reactive.AbstractReactiveTransactionManager", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager()", "public org.springframework.transaction.reactive.AbstractReactiveTransactionManager()"], ["reactor.core.publisher.Mono<org.springframework.transaction.ReactiveTransaction>", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager.getReactiveTransaction(org.springframework.transaction.TransactionDefinition)", "public final reactor.core.publisher.Mono<org.springframework.transaction.ReactiveTransaction> getReactiveTransaction(org.springframework.transaction.TransactionDefinition) throws org.springframework.transaction.TransactionException"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager.commit(org.springframework.transaction.ReactiveTransaction)", "public final reactor.core.publisher.Mono<java.lang.Void> commit(org.springframework.transaction.ReactiveTransaction) throws org.springframework.transaction.TransactionException"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager.rollback(org.springframework.transaction.ReactiveTransaction)", "public final reactor.core.publisher.Mono<java.lang.Void> rollback(org.springframework.transaction.ReactiveTransaction) throws org.springframework.transaction.TransactionException"], ["org.springframework.transaction.reactive.TransactionSynchronizationManager", "org.springframework.transaction.reactive.TransactionSynchronizationManager(org.springframework.transaction.reactive.TransactionContext)", "public org.springframework.transaction.reactive.TransactionSynchronizationManager(org.springframework.transaction.reactive.TransactionContext)"], ["reactor.core.publisher.Mono<org.springframework.transaction.reactive.TransactionSynchronizationManager>", "org.springframework.transaction.reactive.TransactionSynchronizationManager.forCurrentTransaction()", "public static reactor.core.publisher.Mono<org.springframework.transaction.reactive.TransactionSynchronizationManager> forCurrentTransaction()"], ["boolean", "org.springframework.transaction.reactive.TransactionSynchronizationManager.hasResource(java.lang.Object)", "public boolean hasResource(java.lang.Object)"], ["java.lang.Object", "org.springframework.transaction.reactive.TransactionSynchronizationManager.getResource(java.lang.Object)", "public java.lang.Object getResource(java.lang.Object)"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.bindResource(java.lang.Object, java.lang.Object)", "public void bindResource(java.lang.Object, java.lang.Object) throws java.lang.IllegalStateException"], ["java.lang.Object", "org.springframework.transaction.reactive.TransactionSynchronizationManager.unbindResource(java.lang.Object)", "public java.lang.Object unbindResource(java.lang.Object) throws java.lang.IllegalStateException"], ["java.lang.Object", "org.springframework.transaction.reactive.TransactionSynchronizationManager.unbindResourceIfPossible(java.lang.Object)", "public java.lang.Object unbindResourceIfPossible(java.lang.Object)"], ["boolean", "org.springframework.transaction.reactive.TransactionSynchronizationManager.isSynchronizationActive()", "public boolean isSynchronizationActive()"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.initSynchronization()", "public void initSynchronization() throws java.lang.IllegalStateException"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.registerSynchronization(org.springframework.transaction.reactive.TransactionSynchronization)", "public void registerSynchronization(org.springframework.transaction.reactive.TransactionSynchronization) throws java.lang.IllegalStateException"], ["java.util.List<org.springframework.transaction.reactive.TransactionSynchronization>", "org.springframework.transaction.reactive.TransactionSynchronizationManager.getSynchronizations()", "public java.util.List<org.springframework.transaction.reactive.TransactionSynchronization> getSynchronizations() throws java.lang.IllegalStateException"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.clearSynchronization()", "public void clearSynchronization() throws java.lang.IllegalStateException"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.setCurrentTransactionName(java.lang.String)", "public void setCurrentTransactionName(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.reactive.TransactionSynchronizationManager.getCurrentTransactionName()", "public java.lang.String getCurrentTransactionName()"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.setCurrentTransactionReadOnly(boolean)", "public void setCurrentTransactionReadOnly(boolean)"], ["boolean", "org.springframework.transaction.reactive.TransactionSynchronizationManager.isCurrentTransactionReadOnly()", "public boolean isCurrentTransactionReadOnly()"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(java.lang.Integer)", "public void setCurrentTransactionIsolationLevel(java.lang.Integer)"], ["java.lang.Integer", "org.springframework.transaction.reactive.TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()", "public java.lang.Integer getCurrentTransactionIsolationLevel()"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.setActualTransactionActive(boolean)", "public void setActualTransactionActive(boolean)"], ["boolean", "org.springframework.transaction.reactive.TransactionSynchronizationManager.isActualTransactionActive()", "public boolean isActualTransactionActive()"], ["void", "org.springframework.transaction.reactive.TransactionSynchronizationManager.clear()", "public void clear()"], ["org.springframework.transaction.reactive.TransactionContextManager$NoTransactionInContextException", "org.springframework.transaction.reactive.TransactionContextManager$NoTransactionInContextException()", "public org.springframework.transaction.reactive.TransactionContextManager$NoTransactionInContextException()"], ["synchronized", "org.springframework.transaction.reactive.TransactionContextManager$NoTransactionInContextException.java.lang.Throwable fillInStackTrace()", "public synchronized java.lang.Throwable fillInStackTrace()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronization.suspend()", "public default reactor.core.publisher.Mono<java.lang.Void> suspend()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronization.resume()", "public default reactor.core.publisher.Mono<java.lang.Void> resume()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronization.beforeCommit(boolean)", "public default reactor.core.publisher.Mono<java.lang.Void> beforeCommit(boolean)"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronization.beforeCompletion()", "public default reactor.core.publisher.Mono<java.lang.Void> beforeCompletion()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronization.afterCommit()", "public default reactor.core.publisher.Mono<java.lang.Void> afterCommit()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronization.afterCompletion(int)", "public default reactor.core.publisher.Mono<java.lang.Void> afterCompletion(int)"], ["reactor.core.publisher.Mono<org.springframework.transaction.reactive.TransactionContext>", "org.springframework.transaction.reactive.TransactionContextManager.currentContext()", "public static reactor.core.publisher.Mono<org.springframework.transaction.reactive.TransactionContext> currentContext() throws org.springframework.transaction.NoTransactionException"], ["java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context>", "org.springframework.transaction.reactive.TransactionContextManager.createTransactionContext()", "public static java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context> createTransactionContext()"], ["java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context>", "org.springframework.transaction.reactive.TransactionContextManager.getOrCreateContext()", "public static java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context> getOrCreateContext()"], ["java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context>", "org.springframework.transaction.reactive.TransactionContextManager.getOrCreateContextHolder()", "public static java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context> getOrCreateContextHolder()"], ["org.springframework.transaction.reactive.ReactiveResourceSynchronization", "org.springframework.transaction.reactive.ReactiveResourceSynchronization(O, K, org.springframework.transaction.reactive.TransactionSynchronizationManager)", "public org.springframework.transaction.reactive.ReactiveResourceSynchronization(O, K, org.springframework.transaction.reactive.TransactionSynchronizationManager)"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.ReactiveResourceSynchronization.suspend()", "public reactor.core.publisher.Mono<java.lang.Void> suspend()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.ReactiveResourceSynchronization.resume()", "public reactor.core.publisher.Mono<java.lang.Void> resume()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.ReactiveResourceSynchronization.beforeCommit(boolean)", "public reactor.core.publisher.Mono<java.lang.Void> beforeCommit(boolean)"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.ReactiveResourceSynchronization.beforeCompletion()", "public reactor.core.publisher.Mono<java.lang.Void> beforeCompletion()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.ReactiveResourceSynchronization.afterCommit()", "public reactor.core.publisher.Mono<java.lang.Void> afterCommit()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.ReactiveResourceSynchronization.afterCompletion(int)", "public reactor.core.publisher.Mono<java.lang.Void> afterCompletion(int)"], ["org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates[]", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates.values()", "public static org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates[] values()"], ["org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates.valueOf(java.lang.String)", "public static org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates valueOf(java.lang.String)"], ["boolean", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates.test(java.lang.Object)", "public boolean test(java.lang.Object)"], ["boolean", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates$1.test(java.lang.Throwable)", "public boolean test(java.lang.Throwable)"], ["boolean", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates$1.test(java.lang.Object)", "public boolean test(java.lang.Object)"], ["boolean", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates$2.test(java.lang.Throwable)", "public boolean test(java.lang.Throwable)"], ["boolean", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates$2.test(java.lang.Object)", "public boolean test(java.lang.Object)"], ["org.springframework.transaction.reactive.TransactionContext", "org.springframework.transaction.reactive.TransactionContext.getParent()", "public org.springframework.transaction.reactive.TransactionContext getParent()"], ["java.lang.String", "org.springframework.transaction.reactive.TransactionContext.getName()", "public java.lang.String getName()"], ["java.util.UUID", "org.springframework.transaction.reactive.TransactionContext.getContextId()", "public java.util.UUID getContextId()"], ["java.util.Map<java.lang.Object, java.lang.Object>", "org.springframework.transaction.reactive.TransactionContext.getResources()", "public java.util.Map<java.lang.Object, java.lang.Object> getResources()"], ["void", "org.springframework.transaction.reactive.TransactionContext.setSynchronizations(java.util.Set<org.springframework.transaction.reactive.TransactionSynchronization>)", "public void setSynchronizations(java.util.Set<org.springframework.transaction.reactive.TransactionSynchronization>)"], ["java.util.Set<org.springframework.transaction.reactive.TransactionSynchronization>", "org.springframework.transaction.reactive.TransactionContext.getSynchronizations()", "public java.util.Set<org.springframework.transaction.reactive.TransactionSynchronization> getSynchronizations()"], ["void", "org.springframework.transaction.reactive.TransactionContext.setCurrentTransactionName(java.lang.String)", "public void setCurrentTransactionName(java.lang.String)"], ["java.lang.String", "org.springframework.transaction.reactive.TransactionContext.getCurrentTransactionName()", "public java.lang.String getCurrentTransactionName()"], ["void", "org.springframework.transaction.reactive.TransactionContext.setCurrentTransactionReadOnly(boolean)", "public void setCurrentTransactionReadOnly(boolean)"], ["boolean", "org.springframework.transaction.reactive.TransactionContext.isCurrentTransactionReadOnly()", "public boolean isCurrentTransactionReadOnly()"], ["void", "org.springframework.transaction.reactive.TransactionContext.setCurrentTransactionIsolationLevel(java.lang.Integer)", "public void setCurrentTransactionIsolationLevel(java.lang.Integer)"], ["java.lang.Integer", "org.springframework.transaction.reactive.TransactionContext.getCurrentTransactionIsolationLevel()", "public java.lang.Integer getCurrentTransactionIsolationLevel()"], ["void", "org.springframework.transaction.reactive.TransactionContext.setActualTransactionActive(boolean)", "public void setActualTransactionActive(boolean)"], ["boolean", "org.springframework.transaction.reactive.TransactionContext.isActualTransactionActive()", "public boolean isActualTransactionActive()"], ["void", "org.springframework.transaction.reactive.TransactionContext.clear()", "public void clear()"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronizationUtils.triggerBeforeCommit(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>, boolean)", "public static reactor.core.publisher.Mono<java.lang.Void> triggerBeforeCommit(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>, boolean)"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronizationUtils.triggerBeforeCompletion(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>)", "public static reactor.core.publisher.Mono<java.lang.Void> triggerBeforeCompletion(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>)"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronizationUtils.invokeAfterCommit(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>)", "public static reactor.core.publisher.Mono<java.lang.Void> invokeAfterCommit(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>)"], ["reactor.core.publisher.Mono<java.lang.Void>", "org.springframework.transaction.reactive.TransactionSynchronizationUtils.invokeAfterCompletion(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>, int)", "public static reactor.core.publisher.Mono<java.lang.Void> invokeAfterCompletion(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>, int)"], ["org.springframework.transaction.reactive.GenericReactiveTransaction", "org.springframework.transaction.reactive.GenericReactiveTransaction(java.lang.Object, boolean, boolean, boolean, boolean, java.lang.Object)", "public org.springframework.transaction.reactive.GenericReactiveTransaction(java.lang.Object, boolean, boolean, boolean, boolean, java.lang.Object)"], ["java.lang.Object", "org.springframework.transaction.reactive.GenericReactiveTransaction.getTransaction()", "public java.lang.Object getTransaction()"], ["boolean", "org.springframework.transaction.reactive.GenericReactiveTransaction.hasTransaction()", "public boolean hasTransaction()"], ["boolean", "org.springframework.transaction.reactive.GenericReactiveTransaction.isNewTransaction()", "public boolean isNewTransaction()"], ["boolean", "org.springframework.transaction.reactive.GenericReactiveTransaction.isNewSynchronization()", "public boolean isNewSynchronization()"], ["boolean", "org.springframework.transaction.reactive.GenericReactiveTransaction.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.springframework.transaction.reactive.GenericReactiveTransaction.isDebug()", "public boolean isDebug()"], ["java.lang.Object", "org.springframework.transaction.reactive.GenericReactiveTransaction.getSuspendedResources()", "public java.lang.Object getSuspendedResources()"], ["void", "org.springframework.transaction.reactive.GenericReactiveTransaction.setRollbackOnly()", "public void setRollbackOnly()"], ["boolean", "org.springframework.transaction.reactive.GenericReactiveTransaction.isRollbackOnly()", "public boolean isRollbackOnly()"], ["void", "org.springframework.transaction.reactive.GenericReactiveTransaction.setCompleted()", "public void setCompleted()"], ["boolean", "org.springframework.transaction.reactive.GenericReactiveTransaction.isCompleted()", "public boolean isCompleted()"], ["java.lang.Object", "org.springframework.transaction.reactive.TransactionSynchronizationUtils$ScopedProxyUnwrapper.unwrapIfNecessary(java.lang.Object)", "public static java.lang.Object unwrapIfNecessary(java.lang.Object)"], ["boolean", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates$3.test(java.lang.Throwable)", "public boolean test(java.lang.Throwable)"], ["boolean", "org.springframework.transaction.reactive.AbstractReactiveTransactionManager$ErrorPredicates$3.test(java.lang.Object)", "public boolean test(java.lang.Object)"], ["org.springframework.transaction.ReactiveTransactionManager", "org.springframework.transaction.reactive.TransactionalOperatorImpl.getTransactionManager()", "public org.springframework.transaction.ReactiveTransactionManager getTransactionManager()"], ["<T> reactor.core.publisher.Mono<T>", "org.springframework.transaction.reactive.TransactionalOperatorImpl.transactional(reactor.core.publisher.Mono<T>)", "public <T> reactor.core.publisher.Mono<T> transactional(reactor.core.publisher.Mono<T>)"], ["<T> reactor.core.publisher.Flux<T>", "org.springframework.transaction.reactive.TransactionalOperatorImpl.execute(org.springframework.transaction.reactive.TransactionCallback<T>)", "public <T> reactor.core.publisher.Flux<T> execute(org.springframework.transaction.reactive.TransactionCallback<T>) throws org.springframework.transaction.TransactionException"], ["boolean", "org.springframework.transaction.reactive.TransactionalOperatorImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.transaction.reactive.TransactionalOperatorImpl.hashCode()", "public int hashCode()"], ["<T> reactor.core.publisher.Flux<T>", "org.springframework.transaction.reactive.TransactionalOperator.transactional(reactor.core.publisher.Flux<T>)", "public default <T> reactor.core.publisher.Flux<T> transactional(reactor.core.publisher.Flux<T>)"], ["org.springframework.transaction.reactive.TransactionalOperator", "org.springframework.transaction.reactive.TransactionalOperator.create(org.springframework.transaction.ReactiveTransactionManager)", "public static org.springframework.transaction.reactive.TransactionalOperator create(org.springframework.transaction.ReactiveTransactionManager)"], ["org.springframework.transaction.reactive.TransactionalOperator", "org.springframework.transaction.reactive.TransactionalOperator.create(org.springframework.transaction.ReactiveTransactionManager, org.springframework.transaction.TransactionDefinition)", "public static org.springframework.transaction.reactive.TransactionalOperator create(org.springframework.transaction.ReactiveTransactionManager, org.springframework.transaction.TransactionDefinition)"], ["org.springframework.jca.cci.core.CciTemplate", "org.springframework.jca.cci.core.CciTemplate()", "public org.springframework.jca.cci.core.CciTemplate()"], ["org.springframework.jca.cci.core.CciTemplate", "org.springframework.jca.cci.core.CciTemplate(javax.resource.cci.ConnectionFactory)", "public org.springframework.jca.cci.core.CciTemplate(javax.resource.cci.ConnectionFactory)"], ["org.springframework.jca.cci.core.CciTemplate", "org.springframework.jca.cci.core.CciTemplate(javax.resource.cci.ConnectionFactory, javax.resource.cci.ConnectionSpec)", "public org.springframework.jca.cci.core.CciTemplate(javax.resource.cci.ConnectionFactory, javax.resource.cci.ConnectionSpec)"], ["void", "org.springframework.jca.cci.core.CciTemplate.setConnectionFactory(javax.resource.cci.ConnectionFactory)", "public void setConnectionFactory(javax.resource.cci.ConnectionFactory)"], ["javax.resource.cci.ConnectionFactory", "org.springframework.jca.cci.core.CciTemplate.getConnectionFactory()", "public javax.resource.cci.ConnectionFactory getConnectionFactory()"], ["void", "org.springframework.jca.cci.core.CciTemplate.setConnectionSpec(javax.resource.cci.ConnectionSpec)", "public void setConnectionSpec(javax.resource.cci.ConnectionSpec)"], ["javax.resource.cci.ConnectionSpec", "org.springframework.jca.cci.core.CciTemplate.getConnectionSpec()", "public javax.resource.cci.ConnectionSpec getConnectionSpec()"], ["void", "org.springframework.jca.cci.core.CciTemplate.setOutputRecordCreator(org.springframework.jca.cci.core.RecordCreator)", "public void setOutputRecordCreator(org.springframework.jca.cci.core.RecordCreator)"], ["org.springframework.jca.cci.core.RecordCreator", "org.springframework.jca.cci.core.CciTemplate.getOutputRecordCreator()", "public org.springframework.jca.cci.core.RecordCreator getOutputRecordCreator()"], ["void", "org.springframework.jca.cci.core.CciTemplate.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.springframework.jca.cci.core.CciTemplate", "org.springframework.jca.cci.core.CciTemplate.getDerivedTemplate(javax.resource.cci.ConnectionSpec)", "public org.springframework.jca.cci.core.CciTemplate getDerivedTemplate(javax.resource.cci.ConnectionSpec)"], ["<T> T", "org.springframework.jca.cci.core.CciTemplate.execute(org.springframework.jca.cci.core.ConnectionCallback<T>)", "public <T> T execute(org.springframework.jca.cci.core.ConnectionCallback<T>) throws org.springframework.dao.DataAccessException"], ["<T> T", "org.springframework.jca.cci.core.CciTemplate.execute(org.springframework.jca.cci.core.InteractionCallback<T>)", "public <T> T execute(org.springframework.jca.cci.core.InteractionCallback<T>) throws org.springframework.dao.DataAccessException"], ["javax.resource.cci.Record", "org.springframework.jca.cci.core.CciTemplate.execute(javax.resource.cci.InteractionSpec, javax.resource.cci.Record)", "public javax.resource.cci.Record execute(javax.resource.cci.InteractionSpec, javax.resource.cci.Record) throws org.springframework.dao.DataAccessException"], ["void", "org.springframework.jca.cci.core.CciTemplate.execute(javax.resource.cci.InteractionSpec, javax.resource.cci.Record, javax.resource.cci.Record)", "public void execute(javax.resource.cci.InteractionSpec, javax.resource.cci.Record, javax.resource.cci.Record) throws org.springframework.dao.DataAccessException"], ["javax.resource.cci.Record", "org.springframework.jca.cci.core.CciTemplate.execute(javax.resource.cci.InteractionSpec, org.springframework.jca.cci.core.RecordCreator)", "public javax.resource.cci.Record execute(javax.resource.cci.InteractionSpec, org.springframework.jca.cci.core.RecordCreator) throws org.springframework.dao.DataAccessException"], ["<T> T", "org.springframework.jca.cci.core.CciTemplate.execute(javax.resource.cci.InteractionSpec, javax.resource.cci.Record, org.springframework.jca.cci.core.RecordExtractor<T>)", "public <T> T execute(javax.resource.cci.InteractionSpec, javax.resource.cci.Record, org.springframework.jca.cci.core.RecordExtractor<T>) throws org.springframework.dao.DataAccessException"], ["<T> T", "org.springframework.jca.cci.core.CciTemplate.execute(javax.resource.cci.InteractionSpec, org.springframework.jca.cci.core.RecordCreator, org.springframework.jca.cci.core.RecordExtractor<T>)", "public <T> T execute(javax.resource.cci.InteractionSpec, org.springframework.jca.cci.core.RecordCreator, org.springframework.jca.cci.core.RecordExtractor<T>) throws org.springframework.dao.DataAccessException"], ["javax.resource.cci.IndexedRecord", "org.springframework.jca.cci.core.CciTemplate.createIndexedRecord(java.lang.String)", "public javax.resource.cci.IndexedRecord createIndexedRecord(java.lang.String) throws org.springframework.dao.DataAccessException"], ["javax.resource.cci.MappedRecord", "org.springframework.jca.cci.core.CciTemplate.createMappedRecord(java.lang.String)", "public javax.resource.cci.MappedRecord createMappedRecord(java.lang.String) throws org.springframework.dao.DataAccessException"], ["org.springframework.jca.cci.core.support.CommAreaRecord", "org.springframework.jca.cci.core.support.CommAreaRecord()", "public org.springframework.jca.cci.core.support.CommAreaRecord()"], ["org.springframework.jca.cci.core.support.CommAreaRecord", "org.springframework.jca.cci.core.support.CommAreaRecord(byte[])", "public org.springframework.jca.cci.core.support.CommAreaRecord(byte[])"], ["void", "org.springframework.jca.cci.core.support.CommAreaRecord.setRecordName(java.lang.String)", "public void setRecordName(java.lang.String)"], ["java.lang.String", "org.springframework.jca.cci.core.support.CommAreaRecord.getRecordName()", "public java.lang.String getRecordName()"], ["void", "org.springframework.jca.cci.core.support.CommAreaRecord.setRecordShortDescription(java.lang.String)", "public void setRecordShortDescription(java.lang.String)"], ["java.lang.String", "org.springframework.jca.cci.core.support.CommAreaRecord.getRecordShortDescription()", "public java.lang.String getRecordShortDescription()"], ["void", "org.springframework.jca.cci.core.support.CommAreaRecord.read(java.io.InputStream)", "public void read(java.io.InputStream) throws java.io.IOException"], ["void", "org.springframework.jca.cci.core.support.CommAreaRecord.write(java.io.OutputStream)", "public void write(java.io.OutputStream) throws java.io.IOException"], ["byte[]", "org.springframework.jca.cci.core.support.CommAreaRecord.toByteArray()", "public byte[] toByteArray()"], ["java.lang.Object", "org.springframework.jca.cci.core.support.CommAreaRecord.clone()", "public java.lang.Object clone()"], ["org.springframework.jca.cci.core.support.CciDaoSupport", "org.springframework.jca.cci.core.support.CciDaoSupport()", "public org.springframework.jca.cci.core.support.CciDaoSupport()"], ["void", "org.springframework.jca.cci.core.support.CciDaoSupport.setConnectionFactory(javax.resource.cci.ConnectionFactory)", "public final void setConnectionFactory(javax.resource.cci.ConnectionFactory)"], ["javax.resource.cci.ConnectionFactory", "org.springframework.jca.cci.core.support.CciDaoSupport.getConnectionFactory()", "public final javax.resource.cci.ConnectionFactory getConnectionFactory()"], ["void", "org.springframework.jca.cci.core.support.CciDaoSupport.setCciTemplate(org.springframework.jca.cci.core.CciTemplate)", "public final void setCciTemplate(org.springframework.jca.cci.core.CciTemplate)"], ["org.springframework.jca.cci.core.CciTemplate", "org.springframework.jca.cci.core.support.CciDaoSupport.getCciTemplate()", "public final org.springframework.jca.cci.core.CciTemplate getCciTemplate()"], ["javax.resource.cci.Record", "org.springframework.jca.cci.core.CciTemplate$SimpleRecordExtractor.extractData(javax.resource.cci.Record)", "public javax.resource.cci.Record extractData(javax.resource.cci.Record)"], ["java.lang.Object", "org.springframework.jca.cci.core.CciTemplate$SimpleRecordExtractor.extractData(javax.resource.cci.Record)", "public java.lang.Object extractData(javax.resource.cci.Record) throws javax.resource.ResourceException, java.sql.SQLException, org.springframework.dao.DataAccessException"], ["org.springframework.jca.cci.object.MappingCommAreaOperation", "org.springframework.jca.cci.object.MappingCommAreaOperation()", "public org.springframework.jca.cci.object.MappingCommAreaOperation()"], ["org.springframework.jca.cci.object.MappingCommAreaOperation", "org.springframework.jca.cci.object.MappingCommAreaOperation(javax.resource.cci.ConnectionFactory, javax.resource.cci.InteractionSpec)", "public org.springframework.jca.cci.object.MappingCommAreaOperation(javax.resource.cci.ConnectionFactory, javax.resource.cci.InteractionSpec)"], ["org.springframework.jca.cci.object.SimpleRecordOperation", "org.springframework.jca.cci.object.SimpleRecordOperation()", "public org.springframework.jca.cci.object.SimpleRecordOperation()"], ["org.springframework.jca.cci.object.SimpleRecordOperation", "org.springframework.jca.cci.object.SimpleRecordOperation(javax.resource.cci.ConnectionFactory, javax.resource.cci.InteractionSpec)", "public org.springframework.jca.cci.object.SimpleRecordOperation(javax.resource.cci.ConnectionFactory, javax.resource.cci.InteractionSpec)"], ["javax.resource.cci.Record", "org.springframework.jca.cci.object.SimpleRecordOperation.execute(javax.resource.cci.Record)", "public javax.resource.cci.Record execute(javax.resource.cci.Record) throws org.springframework.dao.DataAccessException"], ["void", "org.springframework.jca.cci.object.SimpleRecordOperation.execute(javax.resource.cci.Record, javax.resource.cci.Record)", "public void execute(javax.resource.cci.Record, javax.resource.cci.Record) throws org.springframework.dao.DataAccessException"], ["org.springframework.jca.cci.object.MappingRecordOperation", "org.springframework.jca.cci.object.MappingRecordOperation()", "public org.springframework.jca.cci.object.MappingRecordOperation()"], ["org.springframework.jca.cci.object.MappingRecordOperation", "org.springframework.jca.cci.object.MappingRecordOperation(javax.resource.cci.ConnectionFactory, javax.resource.cci.InteractionSpec)", "public org.springframework.jca.cci.object.MappingRecordOperation(javax.resource.cci.ConnectionFactory, javax.resource.cci.InteractionSpec)"], ["void", "org.springframework.jca.cci.object.MappingRecordOperation.setOutputRecordCreator(org.springframework.jca.cci.core.RecordCreator)", "public void setOutputRecordCreator(org.springframework.jca.cci.core.RecordCreator)"], ["java.lang.Object", "org.springframework.jca.cci.object.MappingRecordOperation.execute(java.lang.Object)", "public java.lang.Object execute(java.lang.Object) throws org.springframework.dao.DataAccessException"], ["org.springframework.jca.cci.object.MappingRecordOperation$RecordCreatorImpl", "org.springframework.jca.cci.object.MappingRecordOperation$RecordCreatorImpl(org.springframework.jca.cci.object.MappingRecordOperation, java.lang.Object)", "public org.springframework.jca.cci.object.MappingRecordOperation$RecordCreatorImpl(org.springframework.jca.cci.object.MappingRecordOperation, java.lang.Object)"], ["javax.resource.cci.Record", "org.springframework.jca.cci.object.MappingRecordOperation$RecordCreatorImpl.createRecord(javax.resource.cci.RecordFactory)", "public javax.resource.cci.Record createRecord(javax.resource.cci.RecordFactory) throws javax.resource.ResourceException, org.springframework.dao.DataAccessException"], ["java.lang.Object", "org.springframework.jca.cci.object.MappingRecordOperation$RecordExtractorImpl.extractData(javax.resource.cci.Record)", "public java.lang.Object extractData(javax.resource.cci.Record) throws javax.resource.ResourceException, java.sql.SQLException, org.springframework.dao.DataAccessException"], ["org.springframework.jca.cci.object.EisOperation", "org.springframework.jca.cci.object.EisOperation()", "public org.springframework.jca.cci.object.EisOperation()"], ["void", "org.springframework.jca.cci.object.EisOperation.setCciTemplate(org.springframework.jca.cci.core.CciTemplate)", "public void setCciTemplate(org.springframework.jca.cci.core.CciTemplate)"], ["org.springframework.jca.cci.core.CciTemplate", "org.springframework.jca.cci.object.EisOperation.getCciTemplate()", "public org.springframework.jca.cci.core.CciTemplate getCciTemplate()"], ["void", "org.springframework.jca.cci.object.EisOperation.setConnectionFactory(javax.resource.cci.ConnectionFactory)", "public void setConnectionFactory(javax.resource.cci.ConnectionFactory)"], ["void", "org.springframework.jca.cci.object.EisOperation.setInteractionSpec(javax.resource.cci.InteractionSpec)", "public void setInteractionSpec(javax.resource.cci.InteractionSpec)"], ["javax.resource.cci.InteractionSpec", "org.springframework.jca.cci.object.EisOperation.getInteractionSpec()", "public javax.resource.cci.InteractionSpec getInteractionSpec()"], ["void", "org.springframework.jca.cci.object.EisOperation.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.springframework.jca.cci.CciOperationNotSupportedException", "org.springframework.jca.cci.CciOperationNotSupportedException(java.lang.String, javax.resource.ResourceException)", "public org.springframework.jca.cci.CciOperationNotSupportedException(java.lang.String, javax.resource.ResourceException)"], ["org.springframework.jca.cci.InvalidResultSetAccessException", "org.springframework.jca.cci.InvalidResultSetAccessException(java.lang.String, java.sql.SQLException)", "public org.springframework.jca.cci.InvalidResultSetAccessException(java.lang.String, java.sql.SQLException)"], ["void", "org.springframework.jca.cci.connection.CciLocalTransactionManager$CciLocalTransactionObject.setConnectionHolder(org.springframework.jca.cci.connection.ConnectionHolder)", "public void setConnectionHolder(org.springframework.jca.cci.connection.ConnectionHolder)"], ["org.springframework.jca.cci.connection.ConnectionHolder", "org.springframework.jca.cci.connection.CciLocalTransactionManager$CciLocalTransactionObject.getConnectionHolder()", "public org.springframework.jca.cci.connection.ConnectionHolder getConnectionHolder()"], ["boolean", "org.springframework.jca.cci.connection.CciLocalTransactionManager$CciLocalTransactionObject.hasConnectionHolder()", "public boolean hasConnectionHolder()"], ["org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy$TransactionAwareInvocationHandler", "org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy$TransactionAwareInvocationHandler(javax.resource.cci.Connection, javax.resource.cci.ConnectionFactory)", "public org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy$TransactionAwareInvocationHandler(javax.resource.cci.Connection, javax.resource.cci.ConnectionFactory)"], ["java.lang.Object", "org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy$TransactionAwareInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["org.springframework.jca.cci.connection.ConnectionHolder", "org.springframework.jca.cci.connection.ConnectionHolder(javax.resource.cci.Connection)", "public org.springframework.jca.cci.connection.ConnectionHolder(javax.resource.cci.Connection)"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.ConnectionHolder.getConnection()", "public javax.resource.cci.Connection getConnection()"], ["org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy", "org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy()", "public org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy()"], ["org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy", "org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy(javax.resource.cci.ConnectionFactory)", "public org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy(javax.resource.cci.ConnectionFactory)"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy.getConnection()", "public javax.resource.cci.Connection getConnection() throws javax.resource.ResourceException"], ["java.lang.Object", "org.springframework.jca.cci.connection.SingleConnectionFactory$CloseSuppressingInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["org.springframework.jca.cci.connection.DelegatingConnectionFactory", "org.springframework.jca.cci.connection.DelegatingConnectionFactory()", "public org.springframework.jca.cci.connection.DelegatingConnectionFactory()"], ["void", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.setTargetConnectionFactory(javax.resource.cci.ConnectionFactory)", "public void setTargetConnectionFactory(javax.resource.cci.ConnectionFactory)"], ["javax.resource.cci.ConnectionFactory", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.getTargetConnectionFactory()", "public javax.resource.cci.ConnectionFactory getTargetConnectionFactory()"], ["void", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.afterPropertiesSet()", "public void afterPropertiesSet()"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.getConnection()", "public javax.resource.cci.Connection getConnection() throws javax.resource.ResourceException"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.getConnection(javax.resource.cci.ConnectionSpec)", "public javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionSpec) throws javax.resource.ResourceException"], ["javax.resource.cci.RecordFactory", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.getRecordFactory()", "public javax.resource.cci.RecordFactory getRecordFactory() throws javax.resource.ResourceException"], ["javax.resource.cci.ResourceAdapterMetaData", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.getMetaData()", "public javax.resource.cci.ResourceAdapterMetaData getMetaData() throws javax.resource.ResourceException"], ["javax.naming.Reference", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.getReference()", "public javax.naming.Reference getReference() throws javax.naming.NamingException"], ["void", "org.springframework.jca.cci.connection.DelegatingConnectionFactory.setReference(javax.naming.Reference)", "public void setReference(javax.naming.Reference)"], ["org.springframework.jca.cci.connection.SingleConnectionFactory", "org.springframework.jca.cci.connection.SingleConnectionFactory()", "public org.springframework.jca.cci.connection.SingleConnectionFactory()"], ["org.springframework.jca.cci.connection.SingleConnectionFactory", "org.springframework.jca.cci.connection.SingleConnectionFactory(javax.resource.cci.Connection)", "public org.springframework.jca.cci.connection.SingleConnectionFactory(javax.resource.cci.Connection)"], ["org.springframework.jca.cci.connection.SingleConnectionFactory", "org.springframework.jca.cci.connection.SingleConnectionFactory(javax.resource.cci.ConnectionFactory)", "public org.springframework.jca.cci.connection.SingleConnectionFactory(javax.resource.cci.ConnectionFactory)"], ["void", "org.springframework.jca.cci.connection.SingleConnectionFactory.afterPropertiesSet()", "public void afterPropertiesSet()"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.SingleConnectionFactory.getConnection()", "public javax.resource.cci.Connection getConnection() throws javax.resource.ResourceException"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.SingleConnectionFactory.getConnection(javax.resource.cci.ConnectionSpec)", "public javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionSpec) throws javax.resource.ResourceException"], ["void", "org.springframework.jca.cci.connection.SingleConnectionFactory.destroy()", "public void destroy()"], ["void", "org.springframework.jca.cci.connection.SingleConnectionFactory.initConnection()", "public void initConnection() throws javax.resource.ResourceException"], ["void", "org.springframework.jca.cci.connection.SingleConnectionFactory.resetConnection()", "public void resetConnection()"], ["org.springframework.jca.cci.connection.CciLocalTransactionManager", "org.springframework.jca.cci.connection.CciLocalTransactionManager()", "public org.springframework.jca.cci.connection.CciLocalTransactionManager()"], ["org.springframework.jca.cci.connection.CciLocalTransactionManager", "org.springframework.jca.cci.connection.CciLocalTransactionManager(javax.resource.cci.ConnectionFactory)", "public org.springframework.jca.cci.connection.CciLocalTransactionManager(javax.resource.cci.ConnectionFactory)"], ["void", "org.springframework.jca.cci.connection.CciLocalTransactionManager.setConnectionFactory(javax.resource.cci.ConnectionFactory)", "public void setConnectionFactory(javax.resource.cci.ConnectionFactory)"], ["javax.resource.cci.ConnectionFactory", "org.springframework.jca.cci.connection.CciLocalTransactionManager.getConnectionFactory()", "public javax.resource.cci.ConnectionFactory getConnectionFactory()"], ["void", "org.springframework.jca.cci.connection.CciLocalTransactionManager.afterPropertiesSet()", "public void afterPropertiesSet()"], ["java.lang.Object", "org.springframework.jca.cci.connection.CciLocalTransactionManager.getResourceFactory()", "public java.lang.Object getResourceFactory()"], ["org.springframework.jca.cci.connection.NotSupportedRecordFactory", "org.springframework.jca.cci.connection.NotSupportedRecordFactory()", "public org.springframework.jca.cci.connection.NotSupportedRecordFactory()"], ["javax.resource.cci.MappedRecord", "org.springframework.jca.cci.connection.NotSupportedRecordFactory.createMappedRecord(java.lang.String)", "public javax.resource.cci.MappedRecord createMappedRecord(java.lang.String) throws javax.resource.ResourceException"], ["javax.resource.cci.IndexedRecord", "org.springframework.jca.cci.connection.NotSupportedRecordFactory.createIndexedRecord(java.lang.String)", "public javax.resource.cci.IndexedRecord createIndexedRecord(java.lang.String) throws javax.resource.ResourceException"], ["org.springframework.jca.cci.connection.ConnectionFactoryUtils$ConnectionSynchronization", "org.springframework.jca.cci.connection.ConnectionFactoryUtils$ConnectionSynchronization(org.springframework.jca.cci.connection.ConnectionHolder, javax.resource.cci.ConnectionFactory)", "public org.springframework.jca.cci.connection.ConnectionFactoryUtils$ConnectionSynchronization(org.springframework.jca.cci.connection.ConnectionHolder, javax.resource.cci.ConnectionFactory)"], ["org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter", "org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter()", "public org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter()"], ["void", "org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter.setConnectionSpec(javax.resource.cci.ConnectionSpec)", "public void setConnectionSpec(javax.resource.cci.ConnectionSpec)"], ["void", "org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter.setConnectionSpecForCurrentThread(javax.resource.cci.ConnectionSpec)", "public void setConnectionSpecForCurrentThread(javax.resource.cci.ConnectionSpec)"], ["void", "org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter.removeConnectionSpecFromCurrentThread()", "public void removeConnectionSpecFromCurrentThread()"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter.getConnection()", "public final javax.resource.cci.Connection getConnection() throws javax.resource.ResourceException"], ["org.springframework.jca.cci.connection.ConnectionFactoryUtils", "org.springframework.jca.cci.connection.ConnectionFactoryUtils()", "public org.springframework.jca.cci.connection.ConnectionFactoryUtils()"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.ConnectionFactoryUtils.getConnection(javax.resource.cci.ConnectionFactory)", "public static javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory) throws org.springframework.jca.cci.CannotGetCciConnectionException"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.ConnectionFactoryUtils.getConnection(javax.resource.cci.ConnectionFactory, javax.resource.cci.ConnectionSpec)", "public static javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory, javax.resource.cci.ConnectionSpec) throws org.springframework.jca.cci.CannotGetCciConnectionException"], ["javax.resource.cci.Connection", "org.springframework.jca.cci.connection.ConnectionFactoryUtils.doGetConnection(javax.resource.cci.ConnectionFactory)", "public static javax.resource.cci.Connection doGetConnection(javax.resource.cci.ConnectionFactory) throws javax.resource.ResourceException"], ["boolean", "org.springframework.jca.cci.connection.ConnectionFactoryUtils.isConnectionTransactional(javax.resource.cci.Connection, javax.resource.cci.ConnectionFactory)", "public static boolean isConnectionTransactional(javax.resource.cci.Connection, javax.resource.cci.ConnectionFactory)"], ["void", "org.springframework.jca.cci.connection.ConnectionFactoryUtils.releaseConnection(javax.resource.cci.Connection, javax.resource.cci.ConnectionFactory)", "public static void releaseConnection(javax.resource.cci.Connection, javax.resource.cci.ConnectionFactory)"], ["void", "org.springframework.jca.cci.connection.ConnectionFactoryUtils.doReleaseConnection(javax.resource.cci.Connection, javax.resource.cci.ConnectionFactory)", "public static void doReleaseConnection(javax.resource.cci.Connection, javax.resource.cci.ConnectionFactory) throws javax.resource.ResourceException"], ["org.springframework.jca.cci.CannotGetCciConnectionException", "org.springframework.jca.cci.CannotGetCciConnectionException(java.lang.String, javax.resource.ResourceException)", "public org.springframework.jca.cci.CannotGetCciConnectionException(java.lang.String, javax.resource.ResourceException)"], ["org.springframework.jca.cci.CannotCreateRecordException", "org.springframework.jca.cci.CannotCreateRecordException(java.lang.String, javax.resource.ResourceException)", "public org.springframework.jca.cci.CannotCreateRecordException(java.lang.String, javax.resource.ResourceException)"], ["org.springframework.jca.cci.RecordTypeNotSupportedException", "org.springframework.jca.cci.RecordTypeNotSupportedException(java.lang.String, javax.resource.ResourceException)", "public org.springframework.jca.cci.RecordTypeNotSupportedException(java.lang.String, javax.resource.ResourceException)"], ["org.springframework.jca.endpoint.GenericMessageEndpointFactory", "org.springframework.jca.endpoint.GenericMessageEndpointFactory()", "public org.springframework.jca.endpoint.GenericMessageEndpointFactory()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointFactory.setMessageListener(java.lang.Object)", "public void setMessageListener(java.lang.Object)"], ["javax.resource.spi.endpoint.MessageEndpoint", "org.springframework.jca.endpoint.GenericMessageEndpointFactory.createEndpoint(javax.transaction.xa.XAResource)", "public javax.resource.spi.endpoint.MessageEndpoint createEndpoint(javax.transaction.xa.XAResource) throws javax.resource.spi.UnavailableException"], ["org.springframework.jca.endpoint.GenericMessageEndpointFactory$InternalResourceException", "org.springframework.jca.endpoint.GenericMessageEndpointFactory$InternalResourceException(javax.resource.ResourceException)", "public org.springframework.jca.endpoint.GenericMessageEndpointFactory$InternalResourceException(javax.resource.ResourceException)"], ["java.lang.Object", "org.springframework.jca.endpoint.GenericMessageEndpointFactory$GenericMessageEndpoint.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory$AbstractMessageEndpoint.beforeDelivery(java.lang.reflect.Method)", "public void beforeDelivery(java.lang.reflect.Method) throws javax.resource.ResourceException"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory$AbstractMessageEndpoint.afterDelivery()", "public void afterDelivery() throws javax.resource.ResourceException"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory$AbstractMessageEndpoint.release()", "public void release()"], ["org.springframework.jca.endpoint.AbstractMessageEndpointFactory", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory()", "public org.springframework.jca.endpoint.AbstractMessageEndpointFactory()"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.setTransactionManager(java.lang.Object)", "public void setTransactionManager(java.lang.Object)"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.setTransactionFactory(org.springframework.transaction.jta.TransactionFactory)", "public void setTransactionFactory(org.springframework.transaction.jta.TransactionFactory)"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.setTransactionName(java.lang.String)", "public void setTransactionName(java.lang.String)"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.setTransactionTimeout(int)", "public void setTransactionTimeout(int)"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.setBeanName(java.lang.String)", "public void setBeanName(java.lang.String)"], ["java.lang.String", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.getActivationName()", "public java.lang.String getActivationName()"], ["java.lang.Class<?>", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.getEndpointClass()", "public java.lang.Class<?> getEndpointClass()"], ["boolean", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.isDeliveryTransacted(java.lang.reflect.Method)", "public boolean isDeliveryTransacted(java.lang.reflect.Method) throws java.lang.NoSuchMethodException"], ["javax.resource.spi.endpoint.MessageEndpoint", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.createEndpoint(javax.transaction.xa.XAResource)", "public javax.resource.spi.endpoint.MessageEndpoint createEndpoint(javax.transaction.xa.XAResource) throws javax.resource.spi.UnavailableException"], ["javax.resource.spi.endpoint.MessageEndpoint", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory.createEndpoint(javax.transaction.xa.XAResource, long)", "public javax.resource.spi.endpoint.MessageEndpoint createEndpoint(javax.transaction.xa.XAResource, long) throws javax.resource.spi.UnavailableException"], ["org.springframework.jca.endpoint.GenericMessageEndpointManager", "org.springframework.jca.endpoint.GenericMessageEndpointManager()", "public org.springframework.jca.endpoint.GenericMessageEndpointManager()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.setResourceAdapter(javax.resource.spi.ResourceAdapter)", "public void setResourceAdapter(javax.resource.spi.ResourceAdapter)"], ["javax.resource.spi.ResourceAdapter", "org.springframework.jca.endpoint.GenericMessageEndpointManager.getResourceAdapter()", "public javax.resource.spi.ResourceAdapter getResourceAdapter()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.setMessageEndpointFactory(javax.resource.spi.endpoint.MessageEndpointFactory)", "public void setMessageEndpointFactory(javax.resource.spi.endpoint.MessageEndpointFactory)"], ["javax.resource.spi.endpoint.MessageEndpointFactory", "org.springframework.jca.endpoint.GenericMessageEndpointManager.getMessageEndpointFactory()", "public javax.resource.spi.endpoint.MessageEndpointFactory getMessageEndpointFactory()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.setActivationSpec(javax.resource.spi.ActivationSpec)", "public void setActivationSpec(javax.resource.spi.ActivationSpec)"], ["javax.resource.spi.ActivationSpec", "org.springframework.jca.endpoint.GenericMessageEndpointManager.getActivationSpec()", "public javax.resource.spi.ActivationSpec getActivationSpec()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.setAutoStartup(boolean)", "public void setAutoStartup(boolean)"], ["boolean", "org.springframework.jca.endpoint.GenericMessageEndpointManager.isAutoStartup()", "public boolean isAutoStartup()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.setPhase(int)", "public void setPhase(int)"], ["int", "org.springframework.jca.endpoint.GenericMessageEndpointManager.getPhase()", "public int getPhase()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.afterPropertiesSet()", "public void afterPropertiesSet() throws javax.resource.ResourceException"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.start()", "public void start()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.stop()", "public void stop()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.stop(java.lang.Runnable)", "public void stop(java.lang.Runnable)"], ["boolean", "org.springframework.jca.endpoint.GenericMessageEndpointManager.isRunning()", "public boolean isRunning()"], ["void", "org.springframework.jca.endpoint.GenericMessageEndpointManager.destroy()", "public void destroy()"], ["org.springframework.jca.endpoint.AbstractMessageEndpointFactory$TransactionDelegate", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory$TransactionDelegate(org.springframework.jca.endpoint.AbstractMessageEndpointFactory, javax.transaction.xa.XAResource)", "public org.springframework.jca.endpoint.AbstractMessageEndpointFactory$TransactionDelegate(org.springframework.jca.endpoint.AbstractMessageEndpointFactory, javax.transaction.xa.XAResource)"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory$TransactionDelegate.beginTransaction()", "public void beginTransaction() throws java.lang.Exception"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory$TransactionDelegate.setRollbackOnly()", "public void setRollbackOnly()"], ["void", "org.springframework.jca.endpoint.AbstractMessageEndpointFactory$TransactionDelegate.endTransaction()", "public void endTransaction() throws java.lang.Exception"], ["org.springframework.jca.context.ResourceAdapterApplicationContext", "org.springframework.jca.context.ResourceAdapterApplicationContext(javax.resource.spi.BootstrapContext)", "public org.springframework.jca.context.ResourceAdapterApplicationContext(javax.resource.spi.BootstrapContext)"], ["org.springframework.jca.context.BootstrapContextAwareProcessor", "org.springframework.jca.context.BootstrapContextAwareProcessor(javax.resource.spi.BootstrapContext)", "public org.springframework.jca.context.BootstrapContextAwareProcessor(javax.resource.spi.BootstrapContext)"], ["java.lang.Object", "org.springframework.jca.context.BootstrapContextAwareProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)", "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"], ["java.lang.Object", "org.springframework.jca.context.BootstrapContextAwareProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)", "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"], ["org.springframework.jca.context.SpringContextResourceAdapter", "org.springframework.jca.context.SpringContextResourceAdapter()", "public org.springframework.jca.context.SpringContextResourceAdapter()"], ["void", "org.springframework.jca.context.SpringContextResourceAdapter.setContextConfigLocation(java.lang.String)", "public void setContextConfigLocation(java.lang.String)"], ["void", "org.springframework.jca.context.SpringContextResourceAdapter.start(javax.resource.spi.BootstrapContext)", "public void start(javax.resource.spi.BootstrapContext) throws javax.resource.spi.ResourceAdapterInternalException"], ["void", "org.springframework.jca.context.SpringContextResourceAdapter.stop()", "public void stop()"], ["void", "org.springframework.jca.context.SpringContextResourceAdapter.endpointActivation(javax.resource.spi.endpoint.MessageEndpointFactory, javax.resource.spi.ActivationSpec)", "public void endpointActivation(javax.resource.spi.endpoint.MessageEndpointFactory, javax.resource.spi.ActivationSpec) throws javax.resource.ResourceException"], ["void", "org.springframework.jca.context.SpringContextResourceAdapter.endpointDeactivation(javax.resource.spi.endpoint.MessageEndpointFactory, javax.resource.spi.ActivationSpec)", "public void endpointDeactivation(javax.resource.spi.endpoint.MessageEndpointFactory, javax.resource.spi.ActivationSpec)"], ["javax.transaction.xa.XAResource[]", "org.springframework.jca.context.SpringContextResourceAdapter.getXAResources(javax.resource.spi.ActivationSpec[])", "public javax.transaction.xa.XAResource[] getXAResources(javax.resource.spi.ActivationSpec[]) throws javax.resource.ResourceException"], ["boolean", "org.springframework.jca.context.SpringContextResourceAdapter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.jca.context.SpringContextResourceAdapter.hashCode()", "public int hashCode()"], ["org.springframework.jca.support.SimpleBootstrapContext", "org.springframework.jca.support.SimpleBootstrapContext(javax.resource.spi.work.WorkManager)", "public org.springframework.jca.support.SimpleBootstrapContext(javax.resource.spi.work.WorkManager)"], ["org.springframework.jca.support.SimpleBootstrapContext", "org.springframework.jca.support.SimpleBootstrapContext(javax.resource.spi.work.WorkManager, javax.resource.spi.XATerminator)", "public org.springframework.jca.support.SimpleBootstrapContext(javax.resource.spi.work.WorkManager, javax.resource.spi.XATerminator)"], ["org.springframework.jca.support.SimpleBootstrapContext", "org.springframework.jca.support.SimpleBootstrapContext(javax.resource.spi.work.WorkManager, javax.resource.spi.XATerminator, javax.transaction.TransactionSynchronizationRegistry)", "public org.springframework.jca.support.SimpleBootstrapContext(javax.resource.spi.work.WorkManager, javax.resource.spi.XATerminator, javax.transaction.TransactionSynchronizationRegistry)"], ["javax.resource.spi.work.WorkManager", "org.springframework.jca.support.SimpleBootstrapContext.getWorkManager()", "public javax.resource.spi.work.WorkManager getWorkManager()"], ["javax.resource.spi.XATerminator", "org.springframework.jca.support.SimpleBootstrapContext.getXATerminator()", "public javax.resource.spi.XATerminator getXATerminator()"], ["java.util.Timer", "org.springframework.jca.support.SimpleBootstrapContext.createTimer()", "public java.util.Timer createTimer() throws javax.resource.spi.UnavailableException"], ["boolean", "org.springframework.jca.support.SimpleBootstrapContext.isContextSupported(java.lang.Class<? extends javax.resource.spi.work.WorkContext>)", "public boolean isContextSupported(java.lang.Class<? extends javax.resource.spi.work.WorkContext>)"], ["javax.transaction.TransactionSynchronizationRegistry", "org.springframework.jca.support.SimpleBootstrapContext.getTransactionSynchronizationRegistry()", "public javax.transaction.TransactionSynchronizationRegistry getTransactionSynchronizationRegistry()"], ["org.springframework.jca.support.LocalConnectionFactoryBean", "org.springframework.jca.support.LocalConnectionFactoryBean()", "public org.springframework.jca.support.LocalConnectionFactoryBean()"], ["void", "org.springframework.jca.support.LocalConnectionFactoryBean.setManagedConnectionFactory(javax.resource.spi.ManagedConnectionFactory)", "public void setManagedConnectionFactory(javax.resource.spi.ManagedConnectionFactory)"], ["void", "org.springframework.jca.support.LocalConnectionFactoryBean.setConnectionManager(javax.resource.spi.ConnectionManager)", "public void setConnectionManager(javax.resource.spi.ConnectionManager)"], ["void", "org.springframework.jca.support.LocalConnectionFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws javax.resource.ResourceException"], ["java.lang.Object", "org.springframework.jca.support.LocalConnectionFactoryBean.getObject()", "public java.lang.Object getObject()"], ["java.lang.Class<?>", "org.springframework.jca.support.LocalConnectionFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.jca.support.LocalConnectionFactoryBean.isSingleton()", "public boolean isSingleton()"], ["org.springframework.jca.support.ResourceAdapterFactoryBean", "org.springframework.jca.support.ResourceAdapterFactoryBean()", "public org.springframework.jca.support.ResourceAdapterFactoryBean()"], ["void", "org.springframework.jca.support.ResourceAdapterFactoryBean.setResourceAdapterClass(java.lang.Class<? extends javax.resource.spi.ResourceAdapter>)", "public void setResourceAdapterClass(java.lang.Class<? extends javax.resource.spi.ResourceAdapter>)"], ["void", "org.springframework.jca.support.ResourceAdapterFactoryBean.setResourceAdapter(javax.resource.spi.ResourceAdapter)", "public void setResourceAdapter(javax.resource.spi.ResourceAdapter)"], ["void", "org.springframework.jca.support.ResourceAdapterFactoryBean.setBootstrapContext(javax.resource.spi.BootstrapContext)", "public void setBootstrapContext(javax.resource.spi.BootstrapContext)"], ["void", "org.springframework.jca.support.ResourceAdapterFactoryBean.setWorkManager(javax.resource.spi.work.WorkManager)", "public void setWorkManager(javax.resource.spi.work.WorkManager)"], ["void", "org.springframework.jca.support.ResourceAdapterFactoryBean.setXaTerminator(javax.resource.spi.XATerminator)", "public void setXaTerminator(javax.resource.spi.XATerminator)"], ["void", "org.springframework.jca.support.ResourceAdapterFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws javax.resource.ResourceException"], ["javax.resource.spi.ResourceAdapter", "org.springframework.jca.support.ResourceAdapterFactoryBean.getObject()", "public javax.resource.spi.ResourceAdapter getObject()"], ["java.lang.Class<? extends javax.resource.spi.ResourceAdapter>", "org.springframework.jca.support.ResourceAdapterFactoryBean.getObjectType()", "public java.lang.Class<? extends javax.resource.spi.ResourceAdapter> getObjectType()"], ["boolean", "org.springframework.jca.support.ResourceAdapterFactoryBean.isSingleton()", "public boolean isSingleton()"], ["void", "org.springframework.jca.support.ResourceAdapterFactoryBean.destroy()", "public void destroy()"], ["java.lang.Object", "org.springframework.jca.support.ResourceAdapterFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.jca.work.DelegatingWork", "org.springframework.jca.work.DelegatingWork(java.lang.Runnable)", "public org.springframework.jca.work.DelegatingWork(java.lang.Runnable)"], ["java.lang.Runnable", "org.springframework.jca.work.DelegatingWork.getDelegate()", "public final java.lang.Runnable getDelegate()"], ["void", "org.springframework.jca.work.DelegatingWork.run()", "public void run()"], ["void", "org.springframework.jca.work.DelegatingWork.release()", "public void release()"], ["org.springframework.jca.work.WorkManagerTaskExecutor", "org.springframework.jca.work.WorkManagerTaskExecutor()", "public org.springframework.jca.work.WorkManagerTaskExecutor()"], ["org.springframework.jca.work.WorkManagerTaskExecutor", "org.springframework.jca.work.WorkManagerTaskExecutor(javax.resource.spi.work.WorkManager)", "public org.springframework.jca.work.WorkManagerTaskExecutor(javax.resource.spi.work.WorkManager)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.setWorkManager(javax.resource.spi.work.WorkManager)", "public void setWorkManager(javax.resource.spi.work.WorkManager)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.setWorkManagerName(java.lang.String)", "public void setWorkManagerName(java.lang.String)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.setBootstrapContext(javax.resource.spi.BootstrapContext)", "public void setBootstrapContext(javax.resource.spi.BootstrapContext)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.setBlockUntilStarted(boolean)", "public void setBlockUntilStarted(boolean)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.setBlockUntilCompleted(boolean)", "public void setBlockUntilCompleted(boolean)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.setWorkListener(javax.resource.spi.work.WorkListener)", "public void setWorkListener(javax.resource.spi.work.WorkListener)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.setTaskDecorator(org.springframework.core.task.TaskDecorator)", "public void setTaskDecorator(org.springframework.core.task.TaskDecorator)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.afterPropertiesSet()", "public void afterPropertiesSet() throws javax.naming.NamingException"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.execute(java.lang.Runnable, long)", "public void execute(java.lang.Runnable, long)"], ["java.util.concurrent.Future<?>", "org.springframework.jca.work.WorkManagerTaskExecutor.submit(java.lang.Runnable)", "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.springframework.jca.work.WorkManagerTaskExecutor.submit(java.util.concurrent.Callable<T>)", "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"], ["org.springframework.util.concurrent.ListenableFuture<?>", "org.springframework.jca.work.WorkManagerTaskExecutor.submitListenable(java.lang.Runnable)", "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"], ["<T> org.springframework.util.concurrent.ListenableFuture<T>", "org.springframework.jca.work.WorkManagerTaskExecutor.submitListenable(java.util.concurrent.Callable<T>)", "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.doWork(javax.resource.spi.work.Work)", "public void doWork(javax.resource.spi.work.Work) throws javax.resource.spi.work.WorkException"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.doWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener)", "public void doWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener) throws javax.resource.spi.work.WorkException"], ["long", "org.springframework.jca.work.WorkManagerTaskExecutor.startWork(javax.resource.spi.work.Work)", "public long startWork(javax.resource.spi.work.Work) throws javax.resource.spi.work.WorkException"], ["long", "org.springframework.jca.work.WorkManagerTaskExecutor.startWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener)", "public long startWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener) throws javax.resource.spi.work.WorkException"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.scheduleWork(javax.resource.spi.work.Work)", "public void scheduleWork(javax.resource.spi.work.Work) throws javax.resource.spi.work.WorkException"], ["void", "org.springframework.jca.work.WorkManagerTaskExecutor.scheduleWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener)", "public void scheduleWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener) throws javax.resource.spi.work.WorkException"], ["org.springframework.jca.work.SimpleTaskWorkManager$DelegatingWorkAdapter", "org.springframework.jca.work.SimpleTaskWorkManager$DelegatingWorkAdapter(javax.resource.spi.work.Work, javax.resource.spi.work.WorkListener, boolean)", "public org.springframework.jca.work.SimpleTaskWorkManager$DelegatingWorkAdapter(javax.resource.spi.work.Work, javax.resource.spi.work.WorkListener, boolean)"], ["void", "org.springframework.jca.work.SimpleTaskWorkManager$DelegatingWorkAdapter.run()", "public void run()"], ["void", "org.springframework.jca.work.SimpleTaskWorkManager$DelegatingWorkAdapter.release()", "public void release()"], ["org.springframework.jca.work.SimpleTaskWorkManager", "org.springframework.jca.work.SimpleTaskWorkManager()", "public org.springframework.jca.work.SimpleTaskWorkManager()"], ["void", "org.springframework.jca.work.SimpleTaskWorkManager.setSyncTaskExecutor(org.springframework.core.task.TaskExecutor)", "public void setSyncTaskExecutor(org.springframework.core.task.TaskExecutor)"], ["void", "org.springframework.jca.work.SimpleTaskWorkManager.setAsyncTaskExecutor(org.springframework.core.task.AsyncTaskExecutor)", "public void setAsyncTaskExecutor(org.springframework.core.task.AsyncTaskExecutor)"], ["void", "org.springframework.jca.work.SimpleTaskWorkManager.doWork(javax.resource.spi.work.Work)", "public void doWork(javax.resource.spi.work.Work) throws javax.resource.spi.work.WorkException"], ["void", "org.springframework.jca.work.SimpleTaskWorkManager.doWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener)", "public void doWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener) throws javax.resource.spi.work.WorkException"], ["long", "org.springframework.jca.work.SimpleTaskWorkManager.startWork(javax.resource.spi.work.Work)", "public long startWork(javax.resource.spi.work.Work) throws javax.resource.spi.work.WorkException"], ["long", "org.springframework.jca.work.SimpleTaskWorkManager.startWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener)", "public long startWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener) throws javax.resource.spi.work.WorkException"], ["void", "org.springframework.jca.work.SimpleTaskWorkManager.scheduleWork(javax.resource.spi.work.Work)", "public void scheduleWork(javax.resource.spi.work.Work) throws javax.resource.spi.work.WorkException"], ["void", "org.springframework.jca.work.SimpleTaskWorkManager.scheduleWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener)", "public void scheduleWork(javax.resource.spi.work.Work, long, javax.resource.spi.work.ExecutionContext, javax.resource.spi.work.WorkListener) throws javax.resource.spi.work.WorkException"], ["java.lang.Object", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt$executeAndAwait$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Optional<T>", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt$executeAndAwait$3.apply(T)", "public final java.util.Optional<T> apply(T)"], ["java.lang.Object", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt$executeAndAwait$2$1.invokeSuspend(java.lang.Object)", "public final java.lang.Object invokeSuspend(java.lang.Object)"], ["kotlin.coroutines.Continuation<kotlin.Unit>", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt$executeAndAwait$2$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)", "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"], ["java.lang.Object", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt$executeAndAwait$2$1.invoke(java.lang.Object, java.lang.Object)", "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"], ["<T> kotlinx.coroutines.flow.Flow<T>", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt.transactional(kotlinx.coroutines.flow.Flow<? extends T>, org.springframework.transaction.reactive.TransactionalOperator)", "public static final <T> kotlinx.coroutines.flow.Flow<T> transactional(kotlinx.coroutines.flow.Flow<? extends T>, org.springframework.transaction.reactive.TransactionalOperator)"], ["<T> java.lang.Object", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt.executeAndAwait(org.springframework.transaction.reactive.TransactionalOperator, kotlin.jvm.functions.Function2<? super org.springframework.transaction.ReactiveTransaction, ? super kotlin.coroutines.Continuation<? super T>, ? extends java.lang.Object>, kotlin.coroutines.Continuation<? super T>)", "public static final <T> java.lang.Object executeAndAwait(org.springframework.transaction.reactive.TransactionalOperator, kotlin.jvm.functions.Function2<? super org.springframework.transaction.ReactiveTransaction, ? super kotlin.coroutines.Continuation<? super T>, ? extends java.lang.Object>, kotlin.coroutines.Continuation<? super T>)"], ["org.reactivestreams.Publisher", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt$executeAndAwait$2.doInTransaction(org.springframework.transaction.ReactiveTransaction)", "public org.reactivestreams.Publisher doInTransaction(org.springframework.transaction.ReactiveTransaction)"], ["reactor.core.publisher.Mono<T>", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt$executeAndAwait$2.doInTransaction(org.springframework.transaction.ReactiveTransaction)", "public final reactor.core.publisher.Mono<T> doInTransaction(org.springframework.transaction.ReactiveTransaction)"], ["java.lang.Object", "org.springframework.transaction.reactive.TransactionalOperatorExtensionsKt$executeAndAwait$1.invokeSuspend(java.lang.Object)", "public final java.lang.Object invokeSuspend(java.lang.Object)"]]}