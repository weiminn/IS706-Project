{
    "spring-jdbc-5.3.18.jar": [
        [
            "org.springframework.jdbc.core.SqlReturnUpdateCount",
            "org.springframework.jdbc.core.SqlReturnUpdateCount(java.lang.String)",
            "public org.springframework.jdbc.core.SqlReturnUpdateCount(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.SqlReturnUpdateCount.isInputValueProvided()",
            "public boolean isInputValueProvided()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.SqlReturnUpdateCount.isResultsParameter()",
            "public boolean isResultsParameter()"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.JdbcTemplate$1BatchUpdateStatementCallback.doInStatement(java.sql.Statement)",
            "public int[] doInStatement(java.sql.Statement) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.JdbcTemplate$1BatchUpdateStatementCallback.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.JdbcTemplate$1BatchUpdateStatementCallback.doInStatement(java.sql.Statement)",
            "public java.lang.Object doInStatement(java.sql.Statement) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.core.ArgumentTypePreparedStatementSetter",
            "org.springframework.jdbc.core.ArgumentTypePreparedStatementSetter(java.lang.Object[], int[])",
            "public org.springframework.jdbc.core.ArgumentTypePreparedStatementSetter(java.lang.Object[], int[])"
        ],
        [
            "void",
            "org.springframework.jdbc.core.ArgumentTypePreparedStatementSetter.setValues(java.sql.PreparedStatement)",
            "public void setValues(java.sql.PreparedStatement) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.ArgumentTypePreparedStatementSetter.cleanupParameters()",
            "public void cleanupParameters()"
        ],
        [
            "org.springframework.jdbc.core.SqlRowSetResultSetExtractor",
            "org.springframework.jdbc.core.SqlRowSetResultSetExtractor()",
            "public org.springframework.jdbc.core.SqlRowSetResultSetExtractor()"
        ],
        [
            "org.springframework.jdbc.support.rowset.SqlRowSet",
            "org.springframework.jdbc.core.SqlRowSetResultSetExtractor.extractData(java.sql.ResultSet)",
            "public org.springframework.jdbc.support.rowset.SqlRowSet extractData(java.sql.ResultSet) throws java.sql.SQLException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.SqlRowSetResultSetExtractor.extractData(java.sql.ResultSet)",
            "public java.lang.Object extractData(java.sql.ResultSet) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl(java.util.List<?>)",
            "public org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl(java.util.List<?>)"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl(java.lang.String, java.util.List<?>)",
            "public org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl(java.lang.String, java.util.List<?>)"
        ],
        [
            "java.sql.PreparedStatement",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(java.sql.Connection)",
            "public java.sql.PreparedStatement createPreparedStatement(java.sql.Connection) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(java.sql.PreparedStatement)",
            "public void setValues(java.sql.PreparedStatement) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.cleanupParameters()",
            "public void cleanupParameters()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jdbc.core.StatementCreatorUtils",
            "org.springframework.jdbc.core.StatementCreatorUtils()",
            "public org.springframework.jdbc.core.StatementCreatorUtils()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.StatementCreatorUtils.javaTypeToSqlParameterType(java.lang.Class<?>)",
            "public static int javaTypeToSqlParameterType(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(java.sql.PreparedStatement, int, org.springframework.jdbc.core.SqlParameter, java.lang.Object)",
            "public static void setParameterValue(java.sql.PreparedStatement, int, org.springframework.jdbc.core.SqlParameter, java.lang.Object) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(java.sql.PreparedStatement, int, int, java.lang.Object)",
            "public static void setParameterValue(java.sql.PreparedStatement, int, int, java.lang.Object) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(java.sql.PreparedStatement, int, int, java.lang.String, java.lang.Object)",
            "public static void setParameterValue(java.sql.PreparedStatement, int, int, java.lang.String, java.lang.Object) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.StatementCreatorUtils.cleanupParameters(java.lang.Object...)",
            "public static void cleanupParameters(java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.StatementCreatorUtils.cleanupParameters(java.util.Collection<?>)",
            "public static void cleanupParameters(java.util.Collection<?>)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.BatchUpdateUtils$1.setValues(java.sql.PreparedStatement, int)",
            "public void setValues(java.sql.PreparedStatement, int) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.BatchUpdateUtils$1.getBatchSize()",
            "public int getBatchSize()"
        ],
        [
            "org.springframework.jdbc.core.DataClassRowMapper",
            "org.springframework.jdbc.core.DataClassRowMapper()",
            "public org.springframework.jdbc.core.DataClassRowMapper()"
        ],
        [
            "org.springframework.jdbc.core.DataClassRowMapper",
            "org.springframework.jdbc.core.DataClassRowMapper(java.lang.Class<T>)",
            "public org.springframework.jdbc.core.DataClassRowMapper(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.jdbc.core.DataClassRowMapper<T>",
            "org.springframework.jdbc.core.DataClassRowMapper.newInstance(java.lang.Class<T>)",
            "public static <T> org.springframework.jdbc.core.DataClassRowMapper<T> newInstance(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.jdbc.core.DataClassRowMapper<T>",
            "org.springframework.jdbc.core.DataClassRowMapper.newInstance(java.lang.Class<T>, org.springframework.core.convert.ConversionService)",
            "public static <T> org.springframework.jdbc.core.DataClassRowMapper<T> newInstance(java.lang.Class<T>, org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator",
            "org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator(java.lang.String)",
            "public org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator(java.lang.String)"
        ],
        [
            "java.sql.PreparedStatement",
            "org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator.createPreparedStatement(java.sql.Connection)",
            "public java.sql.PreparedStatement createPreparedStatement(java.sql.Connection) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "org.springframework.jdbc.core.RowCountCallbackHandler",
            "org.springframework.jdbc.core.RowCountCallbackHandler()",
            "public org.springframework.jdbc.core.RowCountCallbackHandler()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.RowCountCallbackHandler.processRow(java.sql.ResultSet)",
            "public final void processRow(java.sql.ResultSet) throws java.sql.SQLException"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.RowCountCallbackHandler.getColumnTypes()",
            "public final int[] getColumnTypes()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.core.RowCountCallbackHandler.getColumnNames()",
            "public final java.lang.String[] getColumnNames()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.RowCountCallbackHandler.getRowCount()",
            "public final int getRowCount()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.RowCountCallbackHandler.getColumnCount()",
            "public final int getColumnCount()"
        ],
        [
            "org.springframework.jdbc.core.SingleColumnRowMapper",
            "org.springframework.jdbc.core.SingleColumnRowMapper()",
            "public org.springframework.jdbc.core.SingleColumnRowMapper()"
        ],
        [
            "org.springframework.jdbc.core.SingleColumnRowMapper",
            "org.springframework.jdbc.core.SingleColumnRowMapper(java.lang.Class<T>)",
            "public org.springframework.jdbc.core.SingleColumnRowMapper(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.SingleColumnRowMapper.setRequiredType(java.lang.Class<T>)",
            "public void setRequiredType(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.SingleColumnRowMapper.setConversionService(org.springframework.core.convert.ConversionService)",
            "public void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "T",
            "org.springframework.jdbc.core.SingleColumnRowMapper.mapRow(java.sql.ResultSet, int)",
            "public T mapRow(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "<T> org.springframework.jdbc.core.SingleColumnRowMapper<T>",
            "org.springframework.jdbc.core.SingleColumnRowMapper.newInstance(java.lang.Class<T>)",
            "public static <T> org.springframework.jdbc.core.SingleColumnRowMapper<T> newInstance(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.jdbc.core.SingleColumnRowMapper<T>",
            "org.springframework.jdbc.core.SingleColumnRowMapper.newInstance(java.lang.Class<T>, org.springframework.core.convert.ConversionService)",
            "public static <T> org.springframework.jdbc.core.SingleColumnRowMapper<T> newInstance(java.lang.Class<T>, org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.JdbcTemplate$1StreamStatementCallback.doInStatement(java.sql.Statement)",
            "public java.util.stream.Stream<T> doInStatement(java.sql.Statement) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.JdbcTemplate$1StreamStatementCallback.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.JdbcTemplate$1StreamStatementCallback.doInStatement(java.sql.Statement)",
            "public java.lang.Object doInStatement(java.sql.Statement) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate$SimpleCallableStatementCreator",
            "org.springframework.jdbc.core.JdbcTemplate$SimpleCallableStatementCreator(java.lang.String)",
            "public org.springframework.jdbc.core.JdbcTemplate$SimpleCallableStatementCreator(java.lang.String)"
        ],
        [
            "java.sql.CallableStatement",
            "org.springframework.jdbc.core.JdbcTemplate$SimpleCallableStatementCreator.createCallableStatement(java.sql.Connection)",
            "public java.sql.CallableStatement createCallableStatement(java.sql.Connection) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.JdbcTemplate$SimpleCallableStatementCreator.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate",
            "org.springframework.jdbc.core.JdbcTemplate()",
            "public org.springframework.jdbc.core.JdbcTemplate()"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate",
            "org.springframework.jdbc.core.JdbcTemplate(javax.sql.DataSource)",
            "public org.springframework.jdbc.core.JdbcTemplate(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate",
            "org.springframework.jdbc.core.JdbcTemplate(javax.sql.DataSource, boolean)",
            "public org.springframework.jdbc.core.JdbcTemplate(javax.sql.DataSource, boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.setIgnoreWarnings(boolean)",
            "public void setIgnoreWarnings(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.JdbcTemplate.isIgnoreWarnings()",
            "public boolean isIgnoreWarnings()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.setFetchSize(int)",
            "public void setFetchSize(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.getFetchSize()",
            "public int getFetchSize()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.setMaxRows(int)",
            "public void setMaxRows(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.getMaxRows()",
            "public int getMaxRows()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.setQueryTimeout(int)",
            "public void setQueryTimeout(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.getQueryTimeout()",
            "public int getQueryTimeout()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.setSkipResultsProcessing(boolean)",
            "public void setSkipResultsProcessing(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.JdbcTemplate.isSkipResultsProcessing()",
            "public boolean isSkipResultsProcessing()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.setSkipUndeclaredResults(boolean)",
            "public void setSkipUndeclaredResults(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.JdbcTemplate.isSkipUndeclaredResults()",
            "public boolean isSkipUndeclaredResults()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.setResultsMapCaseInsensitive(boolean)",
            "public void setResultsMapCaseInsensitive(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.JdbcTemplate.isResultsMapCaseInsensitive()",
            "public boolean isResultsMapCaseInsensitive()"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.execute(org.springframework.jdbc.core.ConnectionCallback<T>)",
            "public <T> T execute(org.springframework.jdbc.core.ConnectionCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.execute(org.springframework.jdbc.core.StatementCallback<T>)",
            "public <T> T execute(org.springframework.jdbc.core.StatementCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.execute(java.lang.String)",
            "public void execute(java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler)",
            "public void query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.List<T> query(java.lang.String, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForStream(java.lang.String, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.stream.Stream<T> queryForStream(java.lang.String, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForMap(java.lang.String)",
            "public java.util.Map<java.lang.String, java.lang.Object> queryForMap(java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> T queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, java.lang.Class<T>)",
            "public <T> T queryForObject(java.lang.String, java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForList(java.lang.String, java.lang.Class<T>)",
            "public <T> java.util.List<T> queryForList(java.lang.String, java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForList(java.lang.String)",
            "public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> queryForList(java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.support.rowset.SqlRowSet",
            "org.springframework.jdbc.core.JdbcTemplate.queryForRowSet(java.lang.String)",
            "public org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.update(java.lang.String)",
            "public int update(java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.JdbcTemplate.batchUpdate(java.lang.String...)",
            "public int[] batchUpdate(java.lang.String...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.execute(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementCallback<T>)",
            "public <T> T execute(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.execute(java.lang.String, org.springframework.jdbc.core.PreparedStatementCallback<T>)",
            "public <T> T execute(java.lang.String, org.springframework.jdbc.core.PreparedStatementCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor<T>, java.lang.Object...)",
            "public <T> T query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor<T>, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowCallbackHandler)",
            "public void query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowCallbackHandler) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowCallbackHandler)",
            "public void query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowCallbackHandler) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowCallbackHandler)",
            "public void query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowCallbackHandler) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowCallbackHandler)",
            "public void query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowCallbackHandler) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler, java.lang.Object...)",
            "public void query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.List<T> query(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.List<T> query(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.List<T> query(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.List<T> query(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.RowMapper<T>, java.lang.Object...)",
            "public <T> java.util.List<T> query(java.lang.String, org.springframework.jdbc.core.RowMapper<T>, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForStream(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.stream.Stream<T> queryForStream(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForStream(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.stream.Stream<T> queryForStream(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForStream(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.stream.Stream<T> queryForStream(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForStream(java.lang.String, org.springframework.jdbc.core.RowMapper<T>, java.lang.Object...)",
            "public <T> java.util.stream.Stream<T> queryForStream(java.lang.String, org.springframework.jdbc.core.RowMapper<T>, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> T queryForObject(java.lang.String, java.lang.Object[], int[], org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> T queryForObject(java.lang.String, java.lang.Object[], org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper<T>, java.lang.Object...)",
            "public <T> T queryForObject(java.lang.String, org.springframework.jdbc.core.RowMapper<T>, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, java.lang.Object[], int[], java.lang.Class<T>)",
            "public <T> T queryForObject(java.lang.String, java.lang.Object[], int[], java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, java.lang.Object[], java.lang.Class<T>)",
            "public <T> T queryForObject(java.lang.String, java.lang.Object[], java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, java.lang.Class<T>, java.lang.Object...)",
            "public <T> T queryForObject(java.lang.String, java.lang.Class<T>, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForMap(java.lang.String, java.lang.Object[], int[])",
            "public java.util.Map<java.lang.String, java.lang.Object> queryForMap(java.lang.String, java.lang.Object[], int[]) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForMap(java.lang.String, java.lang.Object...)",
            "public java.util.Map<java.lang.String, java.lang.Object> queryForMap(java.lang.String, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForList(java.lang.String, java.lang.Object[], int[], java.lang.Class<T>)",
            "public <T> java.util.List<T> queryForList(java.lang.String, java.lang.Object[], int[], java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForList(java.lang.String, java.lang.Object[], java.lang.Class<T>)",
            "public <T> java.util.List<T> queryForList(java.lang.String, java.lang.Object[], java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForList(java.lang.String, java.lang.Class<T>, java.lang.Object...)",
            "public <T> java.util.List<T> queryForList(java.lang.String, java.lang.Class<T>, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForList(java.lang.String, java.lang.Object[], int[])",
            "public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> queryForList(java.lang.String, java.lang.Object[], int[]) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.jdbc.core.JdbcTemplate.queryForList(java.lang.String, java.lang.Object...)",
            "public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> queryForList(java.lang.String, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.support.rowset.SqlRowSet",
            "org.springframework.jdbc.core.JdbcTemplate.queryForRowSet(java.lang.String, java.lang.Object[], int[])",
            "public org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String, java.lang.Object[], int[]) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.support.rowset.SqlRowSet",
            "org.springframework.jdbc.core.JdbcTemplate.queryForRowSet(java.lang.String, java.lang.Object...)",
            "public org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.update(org.springframework.jdbc.core.PreparedStatementCreator)",
            "public int update(org.springframework.jdbc.core.PreparedStatementCreator) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.update(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.support.KeyHolder)",
            "public int update(org.springframework.jdbc.core.PreparedStatementCreator, org.springframework.jdbc.support.KeyHolder) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.update(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter)",
            "public int update(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.update(java.lang.String, java.lang.Object[], int[])",
            "public int update(java.lang.String, java.lang.Object[], int[]) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate.update(java.lang.String, java.lang.Object...)",
            "public int update(java.lang.String, java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.JdbcTemplate.batchUpdate(java.lang.String, org.springframework.jdbc.core.BatchPreparedStatementSetter)",
            "public int[] batchUpdate(java.lang.String, org.springframework.jdbc.core.BatchPreparedStatementSetter) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.JdbcTemplate.batchUpdate(java.lang.String, java.util.List<java.lang.Object[]>)",
            "public int[] batchUpdate(java.lang.String, java.util.List<java.lang.Object[]>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.JdbcTemplate.batchUpdate(java.lang.String, java.util.List<java.lang.Object[]>, int[])",
            "public int[] batchUpdate(java.lang.String, java.util.List<java.lang.Object[]>, int[]) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> int[][]",
            "org.springframework.jdbc.core.JdbcTemplate.batchUpdate(java.lang.String, java.util.Collection<T>, int, org.springframework.jdbc.core.ParameterizedPreparedStatementSetter<T>)",
            "public <T> int[][] batchUpdate(java.lang.String, java.util.Collection<T>, int, org.springframework.jdbc.core.ParameterizedPreparedStatementSetter<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.execute(org.springframework.jdbc.core.CallableStatementCreator, org.springframework.jdbc.core.CallableStatementCallback<T>)",
            "public <T> T execute(org.springframework.jdbc.core.CallableStatementCreator, org.springframework.jdbc.core.CallableStatementCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcTemplate.execute(java.lang.String, org.springframework.jdbc.core.CallableStatementCallback<T>)",
            "public <T> T execute(java.lang.String, org.springframework.jdbc.core.CallableStatementCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.JdbcTemplate.call(org.springframework.jdbc.core.CallableStatementCreator, java.util.List<org.springframework.jdbc.core.SqlParameter>)",
            "public java.util.Map<java.lang.String, java.lang.Object> call(org.springframework.jdbc.core.CallableStatementCreator, java.util.List<org.springframework.jdbc.core.SqlParameter>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.core.SqlReturnResultSet",
            "org.springframework.jdbc.core.SqlReturnResultSet(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor<?>)",
            "public org.springframework.jdbc.core.SqlReturnResultSet(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor<?>)"
        ],
        [
            "org.springframework.jdbc.core.SqlReturnResultSet",
            "org.springframework.jdbc.core.SqlReturnResultSet(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler)",
            "public org.springframework.jdbc.core.SqlReturnResultSet(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler)"
        ],
        [
            "org.springframework.jdbc.core.SqlReturnResultSet",
            "org.springframework.jdbc.core.SqlReturnResultSet(java.lang.String, org.springframework.jdbc.core.RowMapper<?>)",
            "public org.springframework.jdbc.core.SqlReturnResultSet(java.lang.String, org.springframework.jdbc.core.RowMapper<?>)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.SqlReturnResultSet.isResultsParameter()",
            "public boolean isResultsParameter()"
        ],
        [
            "org.springframework.jdbc.core.SqlParameterValue",
            "org.springframework.jdbc.core.SqlParameterValue(int, java.lang.Object)",
            "public org.springframework.jdbc.core.SqlParameterValue(int, java.lang.Object)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameterValue",
            "org.springframework.jdbc.core.SqlParameterValue(int, java.lang.String, java.lang.Object)",
            "public org.springframework.jdbc.core.SqlParameterValue(int, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameterValue",
            "org.springframework.jdbc.core.SqlParameterValue(int, int, java.lang.Object)",
            "public org.springframework.jdbc.core.SqlParameterValue(int, int, java.lang.Object)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameterValue",
            "org.springframework.jdbc.core.SqlParameterValue(org.springframework.jdbc.core.SqlParameter, java.lang.Object)",
            "public org.springframework.jdbc.core.SqlParameterValue(org.springframework.jdbc.core.SqlParameter, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.SqlParameterValue.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback",
            "org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback(org.springframework.jdbc.support.lob.LobHandler)",
            "public org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback(org.springframework.jdbc.support.lob.LobHandler)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(java.sql.PreparedStatement)",
            "public final java.lang.Integer doInPreparedStatement(java.sql.PreparedStatement) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(java.sql.PreparedStatement)",
            "public java.lang.Object doInPreparedStatement(java.sql.PreparedStatement) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.core.support.JdbcDaoSupport",
            "org.springframework.jdbc.core.support.JdbcDaoSupport()",
            "public org.springframework.jdbc.core.support.JdbcDaoSupport()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.JdbcDaoSupport.setDataSource(javax.sql.DataSource)",
            "public final void setDataSource(javax.sql.DataSource)"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.core.support.JdbcDaoSupport.getDataSource()",
            "public final javax.sql.DataSource getDataSource()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.JdbcDaoSupport.setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)",
            "public final void setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate",
            "org.springframework.jdbc.core.support.JdbcDaoSupport.getJdbcTemplate()",
            "public final org.springframework.jdbc.core.JdbcTemplate getJdbcTemplate()"
        ],
        [
            "org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter",
            "org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter()",
            "public org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter.setValues(java.sql.PreparedStatement, int)",
            "public final void setValues(java.sql.PreparedStatement, int) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter.isBatchExhausted(int)",
            "public final boolean isBatchExhausted(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter.getBatchSize()",
            "public int getBatchSize()"
        ],
        [
            "org.springframework.jdbc.core.support.JdbcBeanDefinitionReader",
            "org.springframework.jdbc.core.support.JdbcBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public org.springframework.jdbc.core.support.JdbcBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "org.springframework.jdbc.core.support.JdbcBeanDefinitionReader",
            "org.springframework.jdbc.core.support.JdbcBeanDefinitionReader(org.springframework.beans.factory.support.PropertiesBeanDefinitionReader)",
            "public org.springframework.jdbc.core.support.JdbcBeanDefinitionReader(org.springframework.beans.factory.support.PropertiesBeanDefinitionReader)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.JdbcBeanDefinitionReader.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.JdbcBeanDefinitionReader.setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)",
            "public void setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.JdbcBeanDefinitionReader.loadBeanDefinitions(java.lang.String)",
            "public void loadBeanDefinitions(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.support.AbstractSqlTypeValue",
            "org.springframework.jdbc.core.support.AbstractSqlTypeValue()",
            "public org.springframework.jdbc.core.support.AbstractSqlTypeValue()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.AbstractSqlTypeValue.setTypeValue(java.sql.PreparedStatement, int, int, java.lang.String)",
            "public final void setTypeValue(java.sql.PreparedStatement, int, int, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor",
            "org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor()",
            "public org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor()"
        ],
        [
            "T",
            "org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor.extractData(java.sql.ResultSet)",
            "public final T extractData(java.sql.ResultSet) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.core.support.SqlLobValue",
            "org.springframework.jdbc.core.support.SqlLobValue(byte[])",
            "public org.springframework.jdbc.core.support.SqlLobValue(byte[])"
        ],
        [
            "org.springframework.jdbc.core.support.SqlLobValue",
            "org.springframework.jdbc.core.support.SqlLobValue(byte[], org.springframework.jdbc.support.lob.LobHandler)",
            "public org.springframework.jdbc.core.support.SqlLobValue(byte[], org.springframework.jdbc.support.lob.LobHandler)"
        ],
        [
            "org.springframework.jdbc.core.support.SqlLobValue",
            "org.springframework.jdbc.core.support.SqlLobValue(java.lang.String)",
            "public org.springframework.jdbc.core.support.SqlLobValue(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.support.SqlLobValue",
            "org.springframework.jdbc.core.support.SqlLobValue(java.lang.String, org.springframework.jdbc.support.lob.LobHandler)",
            "public org.springframework.jdbc.core.support.SqlLobValue(java.lang.String, org.springframework.jdbc.support.lob.LobHandler)"
        ],
        [
            "org.springframework.jdbc.core.support.SqlLobValue",
            "org.springframework.jdbc.core.support.SqlLobValue(java.io.InputStream, int)",
            "public org.springframework.jdbc.core.support.SqlLobValue(java.io.InputStream, int)"
        ],
        [
            "org.springframework.jdbc.core.support.SqlLobValue",
            "org.springframework.jdbc.core.support.SqlLobValue(java.io.InputStream, int, org.springframework.jdbc.support.lob.LobHandler)",
            "public org.springframework.jdbc.core.support.SqlLobValue(java.io.InputStream, int, org.springframework.jdbc.support.lob.LobHandler)"
        ],
        [
            "org.springframework.jdbc.core.support.SqlLobValue",
            "org.springframework.jdbc.core.support.SqlLobValue(java.io.Reader, int)",
            "public org.springframework.jdbc.core.support.SqlLobValue(java.io.Reader, int)"
        ],
        [
            "org.springframework.jdbc.core.support.SqlLobValue",
            "org.springframework.jdbc.core.support.SqlLobValue(java.io.Reader, int, org.springframework.jdbc.support.lob.LobHandler)",
            "public org.springframework.jdbc.core.support.SqlLobValue(java.io.Reader, int, org.springframework.jdbc.support.lob.LobHandler)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.SqlLobValue.setTypeValue(java.sql.PreparedStatement, int, int, java.lang.String)",
            "public void setTypeValue(java.sql.PreparedStatement, int, int, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.support.SqlLobValue.cleanup()",
            "public void cleanup()"
        ],
        [
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int)",
            "public org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int)"
        ],
        [
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, int)",
            "public org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, int)"
        ],
        [
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, java.lang.String)",
            "public org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, org.springframework.jdbc.core.ResultSetExtractor<?>)",
            "public org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, org.springframework.jdbc.core.ResultSetExtractor<?>)"
        ],
        [
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, org.springframework.jdbc.core.RowCallbackHandler)",
            "public org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, org.springframework.jdbc.core.RowCallbackHandler)"
        ],
        [
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, org.springframework.jdbc.core.RowMapper<?>)",
            "public org.springframework.jdbc.core.ResultSetSupportingSqlParameter(java.lang.String, int, org.springframework.jdbc.core.RowMapper<?>)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter.isResultSetSupported()",
            "public boolean isResultSetSupported()"
        ],
        [
            "org.springframework.jdbc.core.ResultSetExtractor<?>",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter.getResultSetExtractor()",
            "public org.springframework.jdbc.core.ResultSetExtractor<?> getResultSetExtractor()"
        ],
        [
            "org.springframework.jdbc.core.RowCallbackHandler",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter.getRowCallbackHandler()",
            "public org.springframework.jdbc.core.RowCallbackHandler getRowCallbackHandler()"
        ],
        [
            "org.springframework.jdbc.core.RowMapper<?>",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter.getRowMapper()",
            "public org.springframework.jdbc.core.RowMapper<?> getRowMapper()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.ResultSetSupportingSqlParameter.isInputValueProvided()",
            "public boolean isInputValueProvided()"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory(java.lang.String)",
            "public org.springframework.jdbc.core.PreparedStatementCreatorFactory(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory(java.lang.String, int...)",
            "public org.springframework.jdbc.core.PreparedStatementCreatorFactory(java.lang.String, int...)"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory(java.lang.String, java.util.List<org.springframework.jdbc.core.SqlParameter>)",
            "public org.springframework.jdbc.core.PreparedStatementCreatorFactory(java.lang.String, java.util.List<org.springframework.jdbc.core.SqlParameter>)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.getSql()",
            "public final java.lang.String getSql()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.addParameter(org.springframework.jdbc.core.SqlParameter)",
            "public void addParameter(org.springframework.jdbc.core.SqlParameter)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.setResultSetType(int)",
            "public void setResultSetType(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.setUpdatableResults(boolean)",
            "public void setUpdatableResults(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.setReturnGeneratedKeys(boolean)",
            "public void setReturnGeneratedKeys(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.setGeneratedKeysColumnNames(java.lang.String...)",
            "public void setGeneratedKeysColumnNames(java.lang.String...)"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementSetter",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementSetter(java.util.List<?>)",
            "public org.springframework.jdbc.core.PreparedStatementSetter newPreparedStatementSetter(java.util.List<?>)"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementSetter",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementSetter(java.lang.Object[])",
            "public org.springframework.jdbc.core.PreparedStatementSetter newPreparedStatementSetter(java.lang.Object[])"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementCreator",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator(java.util.List<?>)",
            "public org.springframework.jdbc.core.PreparedStatementCreator newPreparedStatementCreator(java.util.List<?>)"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementCreator",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator(java.lang.Object[])",
            "public org.springframework.jdbc.core.PreparedStatementCreator newPreparedStatementCreator(java.lang.Object[])"
        ],
        [
            "org.springframework.jdbc.core.PreparedStatementCreator",
            "org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator(java.lang.String, java.lang.Object[])",
            "public org.springframework.jdbc.core.PreparedStatementCreator newPreparedStatementCreator(java.lang.String, java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcTemplate$2.setValues(java.sql.PreparedStatement, int)",
            "public void setValues(java.sql.PreparedStatement, int) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate$2.getBatchSize()",
            "public int getBatchSize()"
        ],
        [
            "org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl(org.springframework.jdbc.core.CallableStatementCreatorFactory, org.springframework.jdbc.core.ParameterMapper)",
            "public org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl(org.springframework.jdbc.core.CallableStatementCreatorFactory, org.springframework.jdbc.core.ParameterMapper)"
        ],
        [
            "org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.sql.CallableStatement",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl.createCallableStatement(java.sql.Connection)",
            "public java.sql.CallableStatement createCallableStatement(java.sql.Connection) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl.cleanupParameters()",
            "public void cleanupParameters()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jdbc.core.ColumnMapRowMapper",
            "org.springframework.jdbc.core.ColumnMapRowMapper()",
            "public org.springframework.jdbc.core.ColumnMapRowMapper()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.ColumnMapRowMapper.mapRow(java.sql.ResultSet, int)",
            "public java.util.Map<java.lang.String, java.lang.Object> mapRow(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.ColumnMapRowMapper.mapRow(java.sql.ResultSet, int)",
            "public java.lang.Object mapRow(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(java.sql.Statement)",
            "public java.lang.Object doInStatement(java.sql.Statement) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate$CloseSuppressingInvocationHandler",
            "org.springframework.jdbc.core.JdbcTemplate$CloseSuppressingInvocationHandler(org.springframework.jdbc.core.JdbcTemplate, java.sql.Connection)",
            "public org.springframework.jdbc.core.JdbcTemplate$CloseSuppressingInvocationHandler(org.springframework.jdbc.core.JdbcTemplate, java.sql.Connection)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.JdbcTemplate$CloseSuppressingInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jdbc.core.RowMapperResultSetExtractor",
            "org.springframework.jdbc.core.RowMapperResultSetExtractor(org.springframework.jdbc.core.RowMapper<T>)",
            "public org.springframework.jdbc.core.RowMapperResultSetExtractor(org.springframework.jdbc.core.RowMapper<T>)"
        ],
        [
            "org.springframework.jdbc.core.RowMapperResultSetExtractor",
            "org.springframework.jdbc.core.RowMapperResultSetExtractor(org.springframework.jdbc.core.RowMapper<T>, int)",
            "public org.springframework.jdbc.core.RowMapperResultSetExtractor(org.springframework.jdbc.core.RowMapper<T>, int)"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(java.sql.ResultSet)",
            "public java.util.List<T> extractData(java.sql.ResultSet) throws java.sql.SQLException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(java.sql.ResultSet)",
            "public java.lang.Object extractData(java.sql.ResultSet) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.namedparam.ParsedSql.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils()",
            "public org.springframework.jdbc.core.namedparam.NamedParameterUtils()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.ParsedSql",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils.parseSqlStatement(java.lang.String)",
            "public static org.springframework.jdbc.core.namedparam.ParsedSql parseSqlStatement(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils.substituteNamedParameters(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public static java.lang.String substituteNamedParameters(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils.buildValueArray(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource, java.util.List<org.springframework.jdbc.core.SqlParameter>)",
            "public static java.lang.Object[] buildValueArray(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource, java.util.List<org.springframework.jdbc.core.SqlParameter>)"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils.buildSqlTypeArray(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public static int[] buildSqlTypeArray(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "java.util.List<org.springframework.jdbc.core.SqlParameter>",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils.buildSqlParameterList(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public static java.util.List<org.springframework.jdbc.core.SqlParameter> buildSqlParameterList(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils.parseSqlStatementIntoString(java.lang.String)",
            "public static java.lang.String parseSqlStatementIntoString(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils.substituteNamedParameters(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public static java.lang.String substituteNamedParameters(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils.buildValueArray(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public static java.lang.Object[] buildValueArray(java.lang.String, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource",
            "org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource()",
            "public org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource.registerSqlType(java.lang.String, int)",
            "public void registerSqlType(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource.registerTypeName(java.lang.String, java.lang.String)",
            "public void registerTypeName(java.lang.String, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource.getSqlType(java.lang.String)",
            "public int getSqlType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource.getTypeName(java.lang.String)",
            "public java.lang.String getTypeName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource",
            "org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource(java.lang.Object)",
            "public org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource.hasValue(java.lang.String)",
            "public boolean hasValue(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource.getValue(java.lang.String)",
            "public java.lang.Object getValue(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource.getSqlType(java.lang.String)",
            "public int getSqlType(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource.getParameterNames()",
            "public java.lang.String[] getParameterNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource.getReadablePropertyNames()",
            "public java.lang.String[] getReadablePropertyNames()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport()",
            "public org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport.getNamedParameterJdbcTemplate()",
            "public org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate getNamedParameterJdbcTemplate()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate(javax.sql.DataSource)",
            "public org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate(org.springframework.jdbc.core.JdbcOperations)",
            "public org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate(org.springframework.jdbc.core.JdbcOperations)"
        ],
        [
            "org.springframework.jdbc.core.JdbcOperations",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.getJdbcOperations()",
            "public org.springframework.jdbc.core.JdbcOperations getJdbcOperations()"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.getJdbcTemplate()",
            "public org.springframework.jdbc.core.JdbcTemplate getJdbcTemplate()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.setCacheLimit(int)",
            "public void setCacheLimit(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.getCacheLimit()",
            "public int getCacheLimit()"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.execute(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.PreparedStatementCallback<T>)",
            "public <T> T execute(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.PreparedStatementCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.execute(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.PreparedStatementCallback<T>)",
            "public <T> T execute(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.PreparedStatementCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.execute(java.lang.String, org.springframework.jdbc.core.PreparedStatementCallback<T>)",
            "public <T> T execute(java.lang.String, org.springframework.jdbc.core.PreparedStatementCallback<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor<T>)",
            "public <T> T query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.RowCallbackHandler)",
            "public void query(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.RowCallbackHandler) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.RowCallbackHandler)",
            "public void query(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.RowCallbackHandler) throws org.springframework.dao.DataAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler)",
            "public void query(java.lang.String, org.springframework.jdbc.core.RowCallbackHandler) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.List<T> query(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.List<T> query(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.List<T> query(java.lang.String, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForStream(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.stream.Stream<T> queryForStream(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForStream(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> java.util.stream.Stream<T> queryForStream(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForObject(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> T queryForObject(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForObject(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.RowMapper<T>)",
            "public <T> T queryForObject(java.lang.String, java.util.Map<java.lang.String, ?>, org.springframework.jdbc.core.RowMapper<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForObject(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, java.lang.Class<T>)",
            "public <T> T queryForObject(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForObject(java.lang.String, java.util.Map<java.lang.String, ?>, java.lang.Class<T>)",
            "public <T> T queryForObject(java.lang.String, java.util.Map<java.lang.String, ?>, java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForMap(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public java.util.Map<java.lang.String, java.lang.Object> queryForMap(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForMap(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public java.util.Map<java.lang.String, java.lang.Object> queryForMap(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForList(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, java.lang.Class<T>)",
            "public <T> java.util.List<T> queryForList(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForList(java.lang.String, java.util.Map<java.lang.String, ?>, java.lang.Class<T>)",
            "public <T> java.util.List<T> queryForList(java.lang.String, java.util.Map<java.lang.String, ?>, java.lang.Class<T>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForList(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> queryForList(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForList(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> queryForList(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.support.rowset.SqlRowSet",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForRowSet(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.support.rowset.SqlRowSet",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForRowSet(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public int update(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public int update(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.support.KeyHolder)",
            "public int update(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.support.KeyHolder) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.support.KeyHolder, java.lang.String[])",
            "public int update(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource, org.springframework.jdbc.support.KeyHolder, java.lang.String[]) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(java.lang.String, java.util.Map<java.lang.String, ?>[])",
            "public int[] batchUpdate(java.lang.String, java.util.Map<java.lang.String, ?>[])"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource[])",
            "public int[] batchUpdate(java.lang.String, org.springframework.jdbc.core.namedparam.SqlParameterSource[])"
        ],
        [
            "default",
            "org.springframework.jdbc.core.namedparam.SqlParameterSource.int getSqlType(java.lang.String)",
            "public default int getSqlType(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.jdbc.core.namedparam.SqlParameterSource.java.lang.String getTypeName(java.lang.String)",
            "public default java.lang.String getTypeName(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.jdbc.core.namedparam.SqlParameterSource.java.lang.String[] getParameterNames()",
            "public default java.lang.String[] getParameterNames()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.EmptySqlParameterSource",
            "org.springframework.jdbc.core.namedparam.EmptySqlParameterSource()",
            "public org.springframework.jdbc.core.namedparam.EmptySqlParameterSource()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.namedparam.EmptySqlParameterSource.hasValue(java.lang.String)",
            "public boolean hasValue(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.namedparam.EmptySqlParameterSource.getValue(java.lang.String)",
            "public java.lang.Object getValue(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.EmptySqlParameterSource.getSqlType(java.lang.String)",
            "public int getSqlType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.namedparam.EmptySqlParameterSource.getTypeName(java.lang.String)",
            "public java.lang.String getTypeName(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.core.namedparam.EmptySqlParameterSource.getParameterNames()",
            "public java.lang.String[] getParameterNames()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils$ParameterHolder",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils$ParameterHolder(java.lang.String, int, int)",
            "public org.springframework.jdbc.core.namedparam.NamedParameterUtils$ParameterHolder(java.lang.String, int, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils$ParameterHolder.getParameterName()",
            "public java.lang.String getParameterName()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils$ParameterHolder.getStartIndex()",
            "public int getStartIndex()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterUtils$ParameterHolder.getEndIndex()",
            "public int getEndIndex()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.NamedParameterBatchUpdateUtils",
            "org.springframework.jdbc.core.namedparam.NamedParameterBatchUpdateUtils()",
            "public org.springframework.jdbc.core.namedparam.NamedParameterBatchUpdateUtils()"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.namedparam.NamedParameterBatchUpdateUtils.executeBatchUpdateWithNamedParameters(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource[], org.springframework.jdbc.core.JdbcOperations)",
            "public static int[] executeBatchUpdateWithNamedParameters(org.springframework.jdbc.core.namedparam.ParsedSql, org.springframework.jdbc.core.namedparam.SqlParameterSource[], org.springframework.jdbc.core.JdbcOperations)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.NamedParameterBatchUpdateUtils$1.setValues(java.sql.PreparedStatement, int)",
            "public void setValues(java.sql.PreparedStatement, int) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterBatchUpdateUtils$1.getBatchSize()",
            "public int getBatchSize()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(java.sql.PreparedStatement, int)",
            "public void setValues(java.sql.PreparedStatement, int) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.getBatchSize()",
            "public int getBatchSize()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource()",
            "public org.springframework.jdbc.core.namedparam.MapSqlParameterSource()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource(java.lang.String, java.lang.Object)",
            "public org.springframework.jdbc.core.namedparam.MapSqlParameterSource(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.jdbc.core.namedparam.MapSqlParameterSource(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource.addValue(java.lang.String, java.lang.Object)",
            "public org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValue(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource.addValue(java.lang.String, java.lang.Object, int)",
            "public org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValue(java.lang.String, java.lang.Object, int)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource.addValue(java.lang.String, java.lang.Object, int, java.lang.String)",
            "public org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValue(java.lang.String, java.lang.Object, int, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource.addValues(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValues(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource.getValues()",
            "public java.util.Map<java.lang.String, java.lang.Object> getValues()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource.hasValue(java.lang.String)",
            "public boolean hasValue(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource.getValue(java.lang.String)",
            "public java.lang.Object getValue(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSource.getParameterNames()",
            "public java.lang.String[] getParameterNames()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils",
            "org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils()",
            "public org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils()"
        ],
        [
            "org.springframework.jdbc.core.namedparam.SqlParameterSource[]",
            "org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils.createBatch(java.lang.Object...)",
            "public static org.springframework.jdbc.core.namedparam.SqlParameterSource[] createBatch(java.lang.Object...)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.SqlParameterSource[]",
            "org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils.createBatch(java.util.Collection<?>)",
            "public static org.springframework.jdbc.core.namedparam.SqlParameterSource[] createBatch(java.util.Collection<?>)"
        ],
        [
            "org.springframework.jdbc.core.namedparam.SqlParameterSource[]",
            "org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils.createBatch(java.util.Map<java.lang.String, ?>[])",
            "public static org.springframework.jdbc.core.namedparam.SqlParameterSource[] createBatch(java.util.Map<java.lang.String, ?>[])"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils.getTypedValue(org.springframework.jdbc.core.namedparam.SqlParameterSource, java.lang.String)",
            "public static java.lang.Object getTypedValue(org.springframework.jdbc.core.namedparam.SqlParameterSource, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public static java.util.Map<java.lang.String, java.lang.String> extractCaseInsensitiveParameterNames(org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.SqlParameter(int)",
            "public org.springframework.jdbc.core.SqlParameter(int)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.SqlParameter(int, java.lang.String)",
            "public org.springframework.jdbc.core.SqlParameter(int, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.SqlParameter(int, int)",
            "public org.springframework.jdbc.core.SqlParameter(int, int)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.SqlParameter(java.lang.String, int)",
            "public org.springframework.jdbc.core.SqlParameter(java.lang.String, int)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.SqlParameter(java.lang.String, int, java.lang.String)",
            "public org.springframework.jdbc.core.SqlParameter(java.lang.String, int, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.SqlParameter(java.lang.String, int, int)",
            "public org.springframework.jdbc.core.SqlParameter(java.lang.String, int, int)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.SqlParameter(org.springframework.jdbc.core.SqlParameter)",
            "public org.springframework.jdbc.core.SqlParameter(org.springframework.jdbc.core.SqlParameter)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.SqlParameter.getName()",
            "public java.lang.String getName()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.SqlParameter.getSqlType()",
            "public int getSqlType()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.SqlParameter.getTypeName()",
            "public java.lang.String getTypeName()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.jdbc.core.SqlParameter.getScale()",
            "public java.lang.Integer getScale()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.SqlParameter.isInputValueProvided()",
            "public boolean isInputValueProvided()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.SqlParameter.isResultsParameter()",
            "public boolean isResultsParameter()"
        ],
        [
            "java.util.List<org.springframework.jdbc.core.SqlParameter>",
            "org.springframework.jdbc.core.SqlParameter.sqlTypesToAnonymousParameterList(int...)",
            "public static java.util.List<org.springframework.jdbc.core.SqlParameter> sqlTypesToAnonymousParameterList(int...)"
        ],
        [
            "org.springframework.jdbc.core.SqlOutParameter",
            "org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int)",
            "public org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int)"
        ],
        [
            "org.springframework.jdbc.core.SqlOutParameter",
            "org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, int)",
            "public org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, int)"
        ],
        [
            "org.springframework.jdbc.core.SqlOutParameter",
            "org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, java.lang.String)",
            "public org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.SqlOutParameter",
            "org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, java.lang.String, org.springframework.jdbc.core.SqlReturnType)",
            "public org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, java.lang.String, org.springframework.jdbc.core.SqlReturnType)"
        ],
        [
            "org.springframework.jdbc.core.SqlOutParameter",
            "org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, org.springframework.jdbc.core.ResultSetExtractor<?>)",
            "public org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, org.springframework.jdbc.core.ResultSetExtractor<?>)"
        ],
        [
            "org.springframework.jdbc.core.SqlOutParameter",
            "org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, org.springframework.jdbc.core.RowCallbackHandler)",
            "public org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, org.springframework.jdbc.core.RowCallbackHandler)"
        ],
        [
            "org.springframework.jdbc.core.SqlOutParameter",
            "org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, org.springframework.jdbc.core.RowMapper<?>)",
            "public org.springframework.jdbc.core.SqlOutParameter(java.lang.String, int, org.springframework.jdbc.core.RowMapper<?>)"
        ],
        [
            "org.springframework.jdbc.core.SqlReturnType",
            "org.springframework.jdbc.core.SqlOutParameter.getSqlReturnType()",
            "public org.springframework.jdbc.core.SqlReturnType getSqlReturnType()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.SqlOutParameter.isReturnTypeSupported()",
            "public boolean isReturnTypeSupported()"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert(javax.sql.DataSource)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsert(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert(org.springframework.jdbc.core.JdbcTemplate)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsert(org.springframework.jdbc.core.JdbcTemplate)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.withTableName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsert withTableName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.withSchemaName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsert withSchemaName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.withCatalogName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsert withCatalogName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.usingColumns(java.lang.String...)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsert usingColumns(java.lang.String...)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.usingGeneratedKeyColumns(java.lang.String...)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsert usingGeneratedKeyColumns(java.lang.String...)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.withoutTableColumnMetaDataAccess()",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations withoutTableColumnMetaDataAccess()"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.includeSynonymsForTableColumnMetaData()",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations includeSynonymsForTableColumnMetaData()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.execute(java.util.Map<java.lang.String, ?>)",
            "public int execute(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "int",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.execute(org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public int execute(org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "java.lang.Number",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKey(java.util.Map<java.lang.String, ?>)",
            "public java.lang.Number executeAndReturnKey(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.lang.Number",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKey(org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public java.lang.Number executeAndReturnKey(org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "org.springframework.jdbc.support.KeyHolder",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKeyHolder(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.jdbc.support.KeyHolder executeAndReturnKeyHolder(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.jdbc.support.KeyHolder",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKeyHolder(org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public org.springframework.jdbc.support.KeyHolder executeAndReturnKeyHolder(org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeBatch(java.util.Map<java.lang.String, ?>...)",
            "public int[] executeBatch(java.util.Map<java.lang.String, ?>...)"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeBatch(org.springframework.jdbc.core.namedparam.SqlParameterSource...)",
            "public int[] executeBatch(org.springframework.jdbc.core.namedparam.SqlParameterSource...)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.usingGeneratedKeyColumns(java.lang.String[])",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations usingGeneratedKeyColumns(java.lang.String[])"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.usingColumns(java.lang.String[])",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations usingColumns(java.lang.String[])"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.withCatalogName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations withCatalogName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.withSchemaName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations withSchemaName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcInsert.withTableName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations withTableName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.getJdbcTemplate()",
            "public org.springframework.jdbc.core.JdbcTemplate getJdbcTemplate()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.setTableName(java.lang.String)",
            "public void setTableName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.getTableName()",
            "public java.lang.String getTableName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.setSchemaName(java.lang.String)",
            "public void setSchemaName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.getSchemaName()",
            "public java.lang.String getSchemaName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.setCatalogName(java.lang.String)",
            "public void setCatalogName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.getCatalogName()",
            "public java.lang.String getCatalogName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.setColumnNames(java.util.List<java.lang.String>)",
            "public void setColumnNames(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.getColumnNames()",
            "public java.util.List<java.lang.String> getColumnNames()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.setGeneratedKeyName(java.lang.String)",
            "public void setGeneratedKeyName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.setGeneratedKeyNames(java.lang.String...)",
            "public void setGeneratedKeyNames(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.getGeneratedKeyNames()",
            "public java.lang.String[] getGeneratedKeyNames()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.setAccessTableColumnMetaData(boolean)",
            "public void setAccessTableColumnMetaData(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.setOverrideIncludeSynonymsDefault(boolean)",
            "public void setOverrideIncludeSynonymsDefault(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.getInsertString()",
            "public java.lang.String getInsertString()"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.getInsertTypes()",
            "public int[] getInsertTypes()"
        ],
        [
            "synchronized",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.void compile()",
            "public final synchronized void compile() throws org.springframework.dao.InvalidDataAccessApiUsageException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert.isCompiled()",
            "public boolean isCompiled()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert$1.setValues(java.sql.PreparedStatement, int)",
            "public void setValues(java.sql.PreparedStatement, int) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.core.simple.AbstractJdbcInsert$1.getBatchSize()",
            "public int getBatchSize()"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.getJdbcTemplate()",
            "public org.springframework.jdbc.core.JdbcTemplate getJdbcTemplate()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.setProcedureName(java.lang.String)",
            "public void setProcedureName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.getProcedureName()",
            "public java.lang.String getProcedureName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.setInParameterNames(java.util.Set<java.lang.String>)",
            "public void setInParameterNames(java.util.Set<java.lang.String>)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.getInParameterNames()",
            "public java.util.Set<java.lang.String> getInParameterNames()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.setCatalogName(java.lang.String)",
            "public void setCatalogName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.getCatalogName()",
            "public java.lang.String getCatalogName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.setSchemaName(java.lang.String)",
            "public void setSchemaName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.getSchemaName()",
            "public java.lang.String getSchemaName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.setFunction(boolean)",
            "public void setFunction(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.isFunction()",
            "public boolean isFunction()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.setReturnValueRequired(boolean)",
            "public void setReturnValueRequired(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.isReturnValueRequired()",
            "public boolean isReturnValueRequired()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.setNamedBinding(boolean)",
            "public void setNamedBinding(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.isNamedBinding()",
            "public boolean isNamedBinding()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.setAccessCallParameterMetaData(boolean)",
            "public void setAccessCallParameterMetaData(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.getCallString()",
            "public java.lang.String getCallString()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.addDeclaredParameter(org.springframework.jdbc.core.SqlParameter)",
            "public void addDeclaredParameter(org.springframework.jdbc.core.SqlParameter)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.addDeclaredRowMapper(java.lang.String, org.springframework.jdbc.core.RowMapper<?>)",
            "public void addDeclaredRowMapper(java.lang.String, org.springframework.jdbc.core.RowMapper<?>)"
        ],
        [
            "synchronized",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.void compile()",
            "public final synchronized void compile() throws org.springframework.dao.InvalidDataAccessApiUsageException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.simple.AbstractJdbcCall.isCompiled()",
            "public boolean isCompiled()"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall(javax.sql.DataSource)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall(org.springframework.jdbc.core.JdbcTemplate)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall(org.springframework.jdbc.core.JdbcTemplate)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withProcedureName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall withProcedureName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withFunctionName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall withFunctionName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withSchemaName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall withSchemaName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withCatalogName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall withCatalogName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withReturnValue()",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall withReturnValue()"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.declareParameters(org.springframework.jdbc.core.SqlParameter...)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall declareParameters(org.springframework.jdbc.core.SqlParameter...)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.useInParameterNames(java.lang.String...)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall useInParameterNames(java.lang.String...)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.returningResultSet(java.lang.String, org.springframework.jdbc.core.RowMapper<?>)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall returningResultSet(java.lang.String, org.springframework.jdbc.core.RowMapper<?>)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withoutProcedureColumnMetaDataAccess()",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall withoutProcedureColumnMetaDataAccess()"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCall",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withNamedBinding()",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCall withNamedBinding()"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.executeFunction(java.lang.Class<T>, java.lang.Object...)",
            "public <T> T executeFunction(java.lang.Class<T>, java.lang.Object...)"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.executeFunction(java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> T executeFunction(java.lang.Class<T>, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.executeFunction(java.lang.Class<T>, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public <T> T executeFunction(java.lang.Class<T>, org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.executeObject(java.lang.Class<T>, java.lang.Object...)",
            "public <T> T executeObject(java.lang.Class<T>, java.lang.Object...)"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.executeObject(java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> T executeObject(java.lang.Class<T>, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.executeObject(java.lang.Class<T>, org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public <T> T executeObject(java.lang.Class<T>, org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(java.lang.Object...)",
            "public java.util.Map<java.lang.String, java.lang.Object> execute(java.lang.Object...)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(java.util.Map<java.lang.String, ?>)",
            "public java.util.Map<java.lang.String, java.lang.Object> execute(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public java.util.Map<java.lang.String, java.lang.Object> execute(org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withNamedBinding()",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations withNamedBinding()"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withoutProcedureColumnMetaDataAccess()",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations withoutProcedureColumnMetaDataAccess()"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.returningResultSet(java.lang.String, org.springframework.jdbc.core.RowMapper)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations returningResultSet(java.lang.String, org.springframework.jdbc.core.RowMapper)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.useInParameterNames(java.lang.String[])",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations useInParameterNames(java.lang.String[])"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.declareParameters(org.springframework.jdbc.core.SqlParameter[])",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations declareParameters(org.springframework.jdbc.core.SqlParameter[])"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withReturnValue()",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations withReturnValue()"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withCatalogName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations withCatalogName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withSchemaName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations withSchemaName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withFunctionName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations withFunctionName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.simple.SimpleJdbcCallOperations",
            "org.springframework.jdbc.core.simple.SimpleJdbcCall.withProcedureName(java.lang.String)",
            "public org.springframework.jdbc.core.simple.SimpleJdbcCallOperations withProcedureName(java.lang.String)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.jdbc.core.JdbcTemplate$1UpdateStatementCallback.doInStatement(java.sql.Statement)",
            "public java.lang.Integer doInStatement(java.sql.Statement) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.JdbcTemplate$1UpdateStatementCallback.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.JdbcTemplate$1UpdateStatementCallback.doInStatement(java.sql.Statement)",
            "public java.lang.Object doInStatement(java.sql.Statement) throws java.sql.SQLException, org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.core.SqlInOutParameter",
            "org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int)",
            "public org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int)"
        ],
        [
            "org.springframework.jdbc.core.SqlInOutParameter",
            "org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, int)",
            "public org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, int)"
        ],
        [
            "org.springframework.jdbc.core.SqlInOutParameter",
            "org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, java.lang.String)",
            "public org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.SqlInOutParameter",
            "org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, java.lang.String, org.springframework.jdbc.core.SqlReturnType)",
            "public org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, java.lang.String, org.springframework.jdbc.core.SqlReturnType)"
        ],
        [
            "org.springframework.jdbc.core.SqlInOutParameter",
            "org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, org.springframework.jdbc.core.ResultSetExtractor<?>)",
            "public org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, org.springframework.jdbc.core.ResultSetExtractor<?>)"
        ],
        [
            "org.springframework.jdbc.core.SqlInOutParameter",
            "org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, org.springframework.jdbc.core.RowCallbackHandler)",
            "public org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, org.springframework.jdbc.core.RowCallbackHandler)"
        ],
        [
            "org.springframework.jdbc.core.SqlInOutParameter",
            "org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, org.springframework.jdbc.core.RowMapper<?>)",
            "public org.springframework.jdbc.core.SqlInOutParameter(java.lang.String, int, org.springframework.jdbc.core.RowMapper<?>)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.SqlInOutParameter.isInputValueProvided()",
            "public boolean isInputValueProvided()"
        ],
        [
            "T",
            "org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(java.sql.PreparedStatement)",
            "public T doInPreparedStatement(java.sql.PreparedStatement) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate$RowCallbackHandlerResultSetExtractor",
            "org.springframework.jdbc.core.JdbcTemplate$RowCallbackHandlerResultSetExtractor(org.springframework.jdbc.core.RowCallbackHandler)",
            "public org.springframework.jdbc.core.JdbcTemplate$RowCallbackHandlerResultSetExtractor(org.springframework.jdbc.core.RowCallbackHandler)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.core.JdbcTemplate$RowCallbackHandlerResultSetExtractor.extractData(java.sql.ResultSet)",
            "public java.lang.Object extractData(java.sql.ResultSet) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.core.BeanPropertyRowMapper",
            "org.springframework.jdbc.core.BeanPropertyRowMapper()",
            "public org.springframework.jdbc.core.BeanPropertyRowMapper()"
        ],
        [
            "org.springframework.jdbc.core.BeanPropertyRowMapper",
            "org.springframework.jdbc.core.BeanPropertyRowMapper(java.lang.Class<T>)",
            "public org.springframework.jdbc.core.BeanPropertyRowMapper(java.lang.Class<T>)"
        ],
        [
            "org.springframework.jdbc.core.BeanPropertyRowMapper",
            "org.springframework.jdbc.core.BeanPropertyRowMapper(java.lang.Class<T>, boolean)",
            "public org.springframework.jdbc.core.BeanPropertyRowMapper(java.lang.Class<T>, boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.setMappedClass(java.lang.Class<T>)",
            "public void setMappedClass(java.lang.Class<T>)"
        ],
        [
            "java.lang.Class<T>",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.getMappedClass()",
            "public final java.lang.Class<T> getMappedClass()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.setCheckFullyPopulated(boolean)",
            "public void setCheckFullyPopulated(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.isCheckFullyPopulated()",
            "public boolean isCheckFullyPopulated()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.setPrimitivesDefaultedForNullValue(boolean)",
            "public void setPrimitivesDefaultedForNullValue(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.isPrimitivesDefaultedForNullValue()",
            "public boolean isPrimitivesDefaultedForNullValue()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.setConversionService(org.springframework.core.convert.ConversionService)",
            "public void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.getConversionService()",
            "public org.springframework.core.convert.ConversionService getConversionService()"
        ],
        [
            "T",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.mapRow(java.sql.ResultSet, int)",
            "public T mapRow(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "<T> org.springframework.jdbc.core.BeanPropertyRowMapper<T>",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.newInstance(java.lang.Class<T>)",
            "public static <T> org.springframework.jdbc.core.BeanPropertyRowMapper<T> newInstance(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.jdbc.core.BeanPropertyRowMapper<T>",
            "org.springframework.jdbc.core.BeanPropertyRowMapper.newInstance(java.lang.Class<T>, org.springframework.core.convert.ConversionService)",
            "public static <T> org.springframework.jdbc.core.BeanPropertyRowMapper<T> newInstance(java.lang.Class<T>, org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.jdbc.core.BatchUpdateUtils",
            "org.springframework.jdbc.core.BatchUpdateUtils()",
            "public org.springframework.jdbc.core.BatchUpdateUtils()"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.BatchUpdateUtils.executeBatchUpdate(java.lang.String, java.util.List<java.lang.Object[]>, int[], org.springframework.jdbc.core.JdbcOperations)",
            "public static int[] executeBatchUpdate(java.lang.String, java.util.List<java.lang.Object[]>, int[], org.springframework.jdbc.core.JdbcOperations)"
        ],
        [
            "T",
            "org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(java.sql.Statement)",
            "public T doInStatement(java.sql.Statement) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "org.springframework.jdbc.core.ArgumentPreparedStatementSetter",
            "org.springframework.jdbc.core.ArgumentPreparedStatementSetter(java.lang.Object[])",
            "public org.springframework.jdbc.core.ArgumentPreparedStatementSetter(java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.jdbc.core.ArgumentPreparedStatementSetter.setValues(java.sql.PreparedStatement)",
            "public void setValues(java.sql.PreparedStatement) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.ArgumentPreparedStatementSetter.cleanupParameters()",
            "public void cleanupParameters()"
        ],
        [
            "org.springframework.jdbc.core.metadata.CallMetaDataProvider",
            "org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory.createMetaDataProvider(javax.sql.DataSource, org.springframework.jdbc.core.metadata.CallMetaDataContext)",
            "public static org.springframework.jdbc.core.metadata.CallMetaDataProvider createMetaDataProvider(javax.sql.DataSource, org.springframework.jdbc.core.metadata.CallMetaDataContext)"
        ],
        [
            "org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider",
            "org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider.isReturnResultSetSupported()",
            "public boolean isReturnResultSetSupported()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider.isRefCursorSupported()",
            "public boolean isRefCursorSupported()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider.getRefCursorSqlType()",
            "public int getRefCursorSqlType()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider.metaDataSchemaNameToUse(java.lang.String)",
            "public java.lang.String metaDataSchemaNameToUse(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider.createDefaultOutParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)",
            "public org.springframework.jdbc.core.SqlParameter createDefaultOutParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.PostgresCallMetaDataProvider.byPassReturnParameter(java.lang.String)",
            "public boolean byPassReturnParameter(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.metadata.TableMetaDataProvider",
            "org.springframework.jdbc.core.metadata.TableMetaDataProviderFactory.createMetaDataProvider(javax.sql.DataSource, org.springframework.jdbc.core.metadata.TableMetaDataContext)",
            "public static org.springframework.jdbc.core.metadata.TableMetaDataProvider createMetaDataProvider(javax.sql.DataSource, org.springframework.jdbc.core.metadata.TableMetaDataContext)"
        ],
        [
            "org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider",
            "org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider.isReturnResultSetSupported()",
            "public boolean isReturnResultSetSupported()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider.isRefCursorSupported()",
            "public boolean isRefCursorSupported()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider.getRefCursorSqlType()",
            "public int getRefCursorSqlType()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider.metaDataCatalogNameToUse(java.lang.String)",
            "public java.lang.String metaDataCatalogNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider.metaDataSchemaNameToUse(java.lang.String)",
            "public java.lang.String metaDataSchemaNameToUse(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.metadata.OracleCallMetaDataProvider.createDefaultOutParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)",
            "public org.springframework.jdbc.core.SqlParameter createDefaultOutParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)"
        ],
        [
            "org.springframework.jdbc.core.metadata.DerbyTableMetaDataProvider",
            "org.springframework.jdbc.core.metadata.DerbyTableMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.DerbyTableMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.DerbyTableMetaDataProvider.initializeWithMetaData(java.sql.DatabaseMetaData)",
            "public void initializeWithMetaData(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.DerbyTableMetaDataProvider.isGetGeneratedKeysSupported()",
            "public boolean isGetGeneratedKeysSupported()"
        ],
        [
            "org.springframework.jdbc.core.metadata.TableParameterMetaData",
            "org.springframework.jdbc.core.metadata.TableParameterMetaData(java.lang.String, int, boolean)",
            "public org.springframework.jdbc.core.metadata.TableParameterMetaData(java.lang.String, int, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.TableParameterMetaData.getParameterName()",
            "public java.lang.String getParameterName()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.metadata.TableParameterMetaData.getSqlType()",
            "public int getSqlType()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.TableParameterMetaData.isNullable()",
            "public boolean isNullable()"
        ],
        [
            "org.springframework.jdbc.core.metadata.CallParameterMetaData",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData(java.lang.String, int, int, java.lang.String, boolean)",
            "public org.springframework.jdbc.core.metadata.CallParameterMetaData(java.lang.String, int, int, java.lang.String, boolean)"
        ],
        [
            "org.springframework.jdbc.core.metadata.CallParameterMetaData",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData(boolean, java.lang.String, int, int, java.lang.String, boolean)",
            "public org.springframework.jdbc.core.metadata.CallParameterMetaData(boolean, java.lang.String, int, int, java.lang.String, boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData.isFunction()",
            "public boolean isFunction()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData.getParameterName()",
            "public java.lang.String getParameterName()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData.getParameterType()",
            "public int getParameterType()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData.isReturnParameter()",
            "public boolean isReturnParameter()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData.getSqlType()",
            "public int getSqlType()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData.getTypeName()",
            "public java.lang.String getTypeName()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.CallParameterMetaData.isNullable()",
            "public boolean isNullable()"
        ],
        [
            "org.springframework.jdbc.core.metadata.PostgresTableMetaDataProvider",
            "org.springframework.jdbc.core.metadata.PostgresTableMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.PostgresTableMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.PostgresTableMetaDataProvider.isGetGeneratedKeysSimulated()",
            "public boolean isGetGeneratedKeysSimulated()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.PostgresTableMetaDataProvider.getSimpleQueryForGetGeneratedKey(java.lang.String, java.lang.String)",
            "public java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider$TableMetaData.setCatalogName(java.lang.String)",
            "public void setCatalogName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider$TableMetaData.getCatalogName()",
            "public java.lang.String getCatalogName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider$TableMetaData.setSchemaName(java.lang.String)",
            "public void setSchemaName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider$TableMetaData.getSchemaName()",
            "public java.lang.String getSchemaName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider$TableMetaData.setTableName(java.lang.String)",
            "public void setTableName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider$TableMetaData.getTableName()",
            "public java.lang.String getTableName()"
        ],
        [
            "org.springframework.jdbc.core.metadata.Db2CallMetaDataProvider",
            "org.springframework.jdbc.core.metadata.Db2CallMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.Db2CallMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.Db2CallMetaDataProvider.initializeWithMetaData(java.sql.DatabaseMetaData)",
            "public void initializeWithMetaData(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.Db2CallMetaDataProvider.metaDataSchemaNameToUse(java.lang.String)",
            "public java.lang.String metaDataSchemaNameToUse(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.metadata.SybaseCallMetaDataProvider",
            "org.springframework.jdbc.core.metadata.SybaseCallMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.SybaseCallMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.SybaseCallMetaDataProvider.parameterNameToUse(java.lang.String)",
            "public java.lang.String parameterNameToUse(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.SybaseCallMetaDataProvider.byPassReturnParameter(java.lang.String)",
            "public boolean byPassReturnParameter(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.metadata.TableMetaDataContext",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext()",
            "public org.springframework.jdbc.core.metadata.TableMetaDataContext()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.setTableName(java.lang.String)",
            "public void setTableName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.getTableName()",
            "public java.lang.String getTableName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.setCatalogName(java.lang.String)",
            "public void setCatalogName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.getCatalogName()",
            "public java.lang.String getCatalogName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.setSchemaName(java.lang.String)",
            "public void setSchemaName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.getSchemaName()",
            "public java.lang.String getSchemaName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.setAccessTableColumnMetaData(boolean)",
            "public void setAccessTableColumnMetaData(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.isAccessTableColumnMetaData()",
            "public boolean isAccessTableColumnMetaData()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.setOverrideIncludeSynonymsDefault(boolean)",
            "public void setOverrideIncludeSynonymsDefault(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.isOverrideIncludeSynonymsDefault()",
            "public boolean isOverrideIncludeSynonymsDefault()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.getTableColumns()",
            "public java.util.List<java.lang.String> getTableColumns()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.processMetaData(javax.sql.DataSource, java.util.List<java.lang.String>, java.lang.String[])",
            "public void processMetaData(javax.sql.DataSource, java.util.List<java.lang.String>, java.lang.String[])"
        ],
        [
            "java.util.List<java.lang.Object>",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.matchInParameterValuesWithInsertColumns(org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public java.util.List<java.lang.Object> matchInParameterValuesWithInsertColumns(org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "java.util.List<java.lang.Object>",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.matchInParameterValuesWithInsertColumns(java.util.Map<java.lang.String, ?>)",
            "public java.util.List<java.lang.Object> matchInParameterValuesWithInsertColumns(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.createInsertString(java.lang.String...)",
            "public java.lang.String createInsertString(java.lang.String...)"
        ],
        [
            "int[]",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.createInsertTypes()",
            "public int[] createInsertTypes()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.isGetGeneratedKeysSupported()",
            "public boolean isGetGeneratedKeysSupported()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.isGetGeneratedKeysSimulated()",
            "public boolean isGetGeneratedKeysSimulated()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.getSimulationQueryForGetGeneratedKey(java.lang.String, java.lang.String)",
            "public java.lang.String getSimulationQueryForGetGeneratedKey(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.getSimpleQueryForGetGeneratedKey(java.lang.String, java.lang.String)",
            "public java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.TableMetaDataContext.isGeneratedKeysColumnNameArraySupported()",
            "public boolean isGeneratedKeysColumnNameArraySupported()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.initializeWithMetaData(java.sql.DatabaseMetaData)",
            "public void initializeWithMetaData(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.initializeWithProcedureColumnMetaData(java.sql.DatabaseMetaData, java.lang.String, java.lang.String, java.lang.String)",
            "public void initializeWithProcedureColumnMetaData(java.sql.DatabaseMetaData, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.util.List<org.springframework.jdbc.core.metadata.CallParameterMetaData>",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.getCallParameterMetaData()",
            "public java.util.List<org.springframework.jdbc.core.metadata.CallParameterMetaData> getCallParameterMetaData()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.procedureNameToUse(java.lang.String)",
            "public java.lang.String procedureNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.catalogNameToUse(java.lang.String)",
            "public java.lang.String catalogNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.schemaNameToUse(java.lang.String)",
            "public java.lang.String schemaNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.metaDataCatalogNameToUse(java.lang.String)",
            "public java.lang.String metaDataCatalogNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.metaDataSchemaNameToUse(java.lang.String)",
            "public java.lang.String metaDataSchemaNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.parameterNameToUse(java.lang.String)",
            "public java.lang.String parameterNameToUse(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.byPassReturnParameter(java.lang.String)",
            "public boolean byPassReturnParameter(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.createDefaultOutParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)",
            "public org.springframework.jdbc.core.SqlParameter createDefaultOutParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.createDefaultInOutParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)",
            "public org.springframework.jdbc.core.SqlParameter createDefaultInOutParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.createDefaultInParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)",
            "public org.springframework.jdbc.core.SqlParameter createDefaultInParameter(java.lang.String, org.springframework.jdbc.core.metadata.CallParameterMetaData)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.getUserName()",
            "public java.lang.String getUserName()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.isReturnResultSetSupported()",
            "public boolean isReturnResultSetSupported()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.isRefCursorSupported()",
            "public boolean isRefCursorSupported()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.getRefCursorSqlType()",
            "public int getRefCursorSqlType()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.isProcedureColumnMetaDataUsed()",
            "public boolean isProcedureColumnMetaDataUsed()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.isSupportsCatalogsInProcedureCalls()",
            "public boolean isSupportsCatalogsInProcedureCalls()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.isSupportsSchemasInProcedureCalls()",
            "public boolean isSupportsSchemasInProcedureCalls()"
        ],
        [
            "org.springframework.jdbc.core.metadata.SqlServerCallMetaDataProvider",
            "org.springframework.jdbc.core.metadata.SqlServerCallMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.SqlServerCallMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.SqlServerCallMetaDataProvider.parameterNameToUse(java.lang.String)",
            "public java.lang.String parameterNameToUse(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.SqlServerCallMetaDataProvider.byPassReturnParameter(java.lang.String)",
            "public boolean byPassReturnParameter(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.metadata.DerbyCallMetaDataProvider",
            "org.springframework.jdbc.core.metadata.DerbyCallMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.DerbyCallMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.DerbyCallMetaDataProvider.metaDataSchemaNameToUse(java.lang.String)",
            "public java.lang.String metaDataSchemaNameToUse(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.metadata.HsqlTableMetaDataProvider",
            "org.springframework.jdbc.core.metadata.HsqlTableMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.HsqlTableMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.HsqlTableMetaDataProvider.isGetGeneratedKeysSimulated()",
            "public boolean isGetGeneratedKeysSimulated()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.HsqlTableMetaDataProvider.getSimpleQueryForGetGeneratedKey(java.lang.String, java.lang.String)",
            "public java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.metadata.CallMetaDataContext",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext()",
            "public org.springframework.jdbc.core.metadata.CallMetaDataContext()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setFunctionReturnName(java.lang.String)",
            "public void setFunctionReturnName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.getFunctionReturnName()",
            "public java.lang.String getFunctionReturnName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setLimitedInParameterNames(java.util.Set<java.lang.String>)",
            "public void setLimitedInParameterNames(java.util.Set<java.lang.String>)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.getLimitedInParameterNames()",
            "public java.util.Set<java.lang.String> getLimitedInParameterNames()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setOutParameterNames(java.util.List<java.lang.String>)",
            "public void setOutParameterNames(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.getOutParameterNames()",
            "public java.util.List<java.lang.String> getOutParameterNames()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setProcedureName(java.lang.String)",
            "public void setProcedureName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.getProcedureName()",
            "public java.lang.String getProcedureName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setCatalogName(java.lang.String)",
            "public void setCatalogName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.getCatalogName()",
            "public java.lang.String getCatalogName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setSchemaName(java.lang.String)",
            "public void setSchemaName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.getSchemaName()",
            "public java.lang.String getSchemaName()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setFunction(boolean)",
            "public void setFunction(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.isFunction()",
            "public boolean isFunction()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setReturnValueRequired(boolean)",
            "public void setReturnValueRequired(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.isReturnValueRequired()",
            "public boolean isReturnValueRequired()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setAccessCallParameterMetaData(boolean)",
            "public void setAccessCallParameterMetaData(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.isAccessCallParameterMetaData()",
            "public boolean isAccessCallParameterMetaData()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.setNamedBinding(boolean)",
            "public void setNamedBinding(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.isNamedBinding()",
            "public boolean isNamedBinding()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.initializeMetaData(javax.sql.DataSource)",
            "public void initializeMetaData(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.core.SqlParameter",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.createReturnResultSetParameter(java.lang.String, org.springframework.jdbc.core.RowMapper<?>)",
            "public org.springframework.jdbc.core.SqlParameter createReturnResultSetParameter(java.lang.String, org.springframework.jdbc.core.RowMapper<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.getScalarOutParameterName()",
            "public java.lang.String getScalarOutParameterName()"
        ],
        [
            "java.util.List<org.springframework.jdbc.core.SqlParameter>",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.getCallParameters()",
            "public java.util.List<org.springframework.jdbc.core.SqlParameter> getCallParameters()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.processParameters(java.util.List<org.springframework.jdbc.core.SqlParameter>)",
            "public void processParameters(java.util.List<org.springframework.jdbc.core.SqlParameter>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.matchInParameterValuesWithCallParameters(org.springframework.jdbc.core.namedparam.SqlParameterSource)",
            "public java.util.Map<java.lang.String, java.lang.Object> matchInParameterValuesWithCallParameters(org.springframework.jdbc.core.namedparam.SqlParameterSource)"
        ],
        [
            "java.util.Map<java.lang.String, ?>",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.matchInParameterValuesWithCallParameters(java.util.Map<java.lang.String, ?>)",
            "public java.util.Map<java.lang.String, ?> matchInParameterValuesWithCallParameters(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, ?>",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.matchInParameterValuesWithCallParameters(java.lang.Object[])",
            "public java.util.Map<java.lang.String, ?> matchInParameterValuesWithCallParameters(java.lang.Object[])"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.CallMetaDataContext.createCallString()",
            "public java.lang.String createCallString()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.setStoresUpperCaseIdentifiers(boolean)",
            "public void setStoresUpperCaseIdentifiers(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.isStoresUpperCaseIdentifiers()",
            "public boolean isStoresUpperCaseIdentifiers()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.setStoresLowerCaseIdentifiers(boolean)",
            "public void setStoresLowerCaseIdentifiers(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.isStoresLowerCaseIdentifiers()",
            "public boolean isStoresLowerCaseIdentifiers()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.isTableColumnMetaDataUsed()",
            "public boolean isTableColumnMetaDataUsed()"
        ],
        [
            "java.util.List<org.springframework.jdbc.core.metadata.TableParameterMetaData>",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.getTableParameterMetaData()",
            "public java.util.List<org.springframework.jdbc.core.metadata.TableParameterMetaData> getTableParameterMetaData()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.isGetGeneratedKeysSupported()",
            "public boolean isGetGeneratedKeysSupported()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.isGetGeneratedKeysSimulated()",
            "public boolean isGetGeneratedKeysSimulated()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.getSimpleQueryForGetGeneratedKey(java.lang.String, java.lang.String)",
            "public java.lang.String getSimpleQueryForGetGeneratedKey(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.setGetGeneratedKeysSupported(boolean)",
            "public void setGetGeneratedKeysSupported(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.setGeneratedKeysColumnNameArraySupported(boolean)",
            "public void setGeneratedKeysColumnNameArraySupported(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.isGeneratedKeysColumnNameArraySupported()",
            "public boolean isGeneratedKeysColumnNameArraySupported()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.initializeWithMetaData(java.sql.DatabaseMetaData)",
            "public void initializeWithMetaData(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.initializeWithTableColumnMetaData(java.sql.DatabaseMetaData, java.lang.String, java.lang.String, java.lang.String)",
            "public void initializeWithTableColumnMetaData(java.sql.DatabaseMetaData, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.tableNameToUse(java.lang.String)",
            "public java.lang.String tableNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.catalogNameToUse(java.lang.String)",
            "public java.lang.String catalogNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.schemaNameToUse(java.lang.String)",
            "public java.lang.String schemaNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.metaDataCatalogNameToUse(java.lang.String)",
            "public java.lang.String metaDataCatalogNameToUse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.metaDataSchemaNameToUse(java.lang.String)",
            "public java.lang.String metaDataSchemaNameToUse(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.metadata.HanaCallMetaDataProvider",
            "org.springframework.jdbc.core.metadata.HanaCallMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.HanaCallMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.HanaCallMetaDataProvider.initializeWithMetaData(java.sql.DatabaseMetaData)",
            "public void initializeWithMetaData(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider",
            "org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider(java.sql.DatabaseMetaData)",
            "public org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider(java.sql.DatabaseMetaData) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider",
            "org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider(java.sql.DatabaseMetaData, boolean)",
            "public org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider(java.sql.DatabaseMetaData, boolean) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider.initializeWithTableColumnMetaData(java.sql.DatabaseMetaData, java.lang.String, java.lang.String, java.lang.String)",
            "public void initializeWithTableColumnMetaData(java.sql.DatabaseMetaData, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.core.CallableStatementCreatorFactory",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory(java.lang.String)",
            "public org.springframework.jdbc.core.CallableStatementCreatorFactory(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.core.CallableStatementCreatorFactory",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory(java.lang.String, java.util.List<org.springframework.jdbc.core.SqlParameter>)",
            "public org.springframework.jdbc.core.CallableStatementCreatorFactory(java.lang.String, java.util.List<org.springframework.jdbc.core.SqlParameter>)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory.getCallString()",
            "public final java.lang.String getCallString()"
        ],
        [
            "void",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory.addParameter(org.springframework.jdbc.core.SqlParameter)",
            "public void addParameter(org.springframework.jdbc.core.SqlParameter)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory.setResultSetType(int)",
            "public void setResultSetType(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory.setUpdatableResults(boolean)",
            "public void setUpdatableResults(boolean)"
        ],
        [
            "org.springframework.jdbc.core.CallableStatementCreator",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory.newCallableStatementCreator(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.jdbc.core.CallableStatementCreator newCallableStatementCreator(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.jdbc.core.CallableStatementCreator",
            "org.springframework.jdbc.core.CallableStatementCreatorFactory.newCallableStatementCreator(org.springframework.jdbc.core.ParameterMapper)",
            "public org.springframework.jdbc.core.CallableStatementCreator newCallableStatementCreator(org.springframework.jdbc.core.ParameterMapper)"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate$ResultSetSpliterator",
            "org.springframework.jdbc.core.JdbcTemplate$ResultSetSpliterator(java.sql.ResultSet, org.springframework.jdbc.core.RowMapper<T>)",
            "public org.springframework.jdbc.core.JdbcTemplate$ResultSetSpliterator(java.sql.ResultSet, org.springframework.jdbc.core.RowMapper<T>)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.core.JdbcTemplate$ResultSetSpliterator.tryAdvance(java.util.function.Consumer<? super T>)",
            "public boolean tryAdvance(java.util.function.Consumer<? super T>)"
        ],
        [
            "java.util.Spliterator<T>",
            "org.springframework.jdbc.core.JdbcTemplate$ResultSetSpliterator.trySplit()",
            "public java.util.Spliterator<T> trySplit()"
        ],
        [
            "long",
            "org.springframework.jdbc.core.JdbcTemplate$ResultSetSpliterator.estimateSize()",
            "public long estimateSize()"
        ],
        [
            "int",
            "org.springframework.jdbc.core.JdbcTemplate$ResultSetSpliterator.characteristics()",
            "public int characteristics()"
        ],
        [
            "java.util.stream.Stream<T>",
            "org.springframework.jdbc.core.JdbcTemplate$ResultSetSpliterator.stream()",
            "public java.util.stream.Stream<T> stream()"
        ],
        [
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy()",
            "public org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy()"
        ],
        [
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy(javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.setDefaultAutoCommit(boolean)",
            "public void setDefaultAutoCommit(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.setDefaultTransactionIsolation(int)",
            "public void setDefaultTransactionIsolation(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.setDefaultTransactionIsolationName(java.lang.String)",
            "public void setDefaultTransactionIsolationName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.getConnection()",
            "public java.sql.Connection getConnection() throws java.sql.SQLException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.getConnection(java.lang.String, java.lang.String)",
            "public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.datasource.DelegatingDataSource",
            "org.springframework.jdbc.datasource.DelegatingDataSource()",
            "public org.springframework.jdbc.datasource.DelegatingDataSource()"
        ],
        [
            "org.springframework.jdbc.datasource.DelegatingDataSource",
            "org.springframework.jdbc.datasource.DelegatingDataSource(javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.DelegatingDataSource(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DelegatingDataSource.setTargetDataSource(javax.sql.DataSource)",
            "public void setTargetDataSource(javax.sql.DataSource)"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.DelegatingDataSource.getTargetDataSource()",
            "public javax.sql.DataSource getTargetDataSource()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DelegatingDataSource.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.DelegatingDataSource.getConnection()",
            "public java.sql.Connection getConnection() throws java.sql.SQLException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.DelegatingDataSource.getConnection(java.lang.String, java.lang.String)",
            "public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.io.PrintWriter",
            "org.springframework.jdbc.datasource.DelegatingDataSource.getLogWriter()",
            "public java.io.PrintWriter getLogWriter() throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DelegatingDataSource.setLogWriter(java.io.PrintWriter)",
            "public void setLogWriter(java.io.PrintWriter) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.datasource.DelegatingDataSource.getLoginTimeout()",
            "public int getLoginTimeout() throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DelegatingDataSource.setLoginTimeout(int)",
            "public void setLoginTimeout(int) throws java.sql.SQLException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.datasource.DelegatingDataSource.unwrap(java.lang.Class<T>)",
            "public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.DelegatingDataSource.isWrapperFor(java.lang.Class<?>)",
            "public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException"
        ],
        [
            "java.util.logging.Logger",
            "org.springframework.jdbc.datasource.DelegatingDataSource.getParentLogger()",
            "public java.util.logging.Logger getParentLogger()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager$DataSourceTransactionObject.setConnectionHolder(org.springframework.jdbc.datasource.ConnectionHolder, boolean)",
            "public void setConnectionHolder(org.springframework.jdbc.datasource.ConnectionHolder, boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager$DataSourceTransactionObject.isNewConnectionHolder()",
            "public boolean isNewConnectionHolder()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager$DataSourceTransactionObject.setMustRestoreAutoCommit(boolean)",
            "public void setMustRestoreAutoCommit(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager$DataSourceTransactionObject.isMustRestoreAutoCommit()",
            "public boolean isMustRestoreAutoCommit()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager$DataSourceTransactionObject.setRollbackOnly()",
            "public void setRollbackOnly()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager$DataSourceTransactionObject.isRollbackOnly()",
            "public boolean isRollbackOnly()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager$DataSourceTransactionObject.flush()",
            "public void flush()"
        ],
        [
            "org.springframework.jdbc.datasource.SingleConnectionDataSource",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource()",
            "public org.springframework.jdbc.datasource.SingleConnectionDataSource()"
        ],
        [
            "org.springframework.jdbc.datasource.SingleConnectionDataSource",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource(java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public org.springframework.jdbc.datasource.SingleConnectionDataSource(java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "org.springframework.jdbc.datasource.SingleConnectionDataSource",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource(java.lang.String, boolean)",
            "public org.springframework.jdbc.datasource.SingleConnectionDataSource(java.lang.String, boolean)"
        ],
        [
            "org.springframework.jdbc.datasource.SingleConnectionDataSource",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource(java.sql.Connection, boolean)",
            "public org.springframework.jdbc.datasource.SingleConnectionDataSource(java.sql.Connection, boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource.setSuppressClose(boolean)",
            "public void setSuppressClose(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource.setAutoCommit(boolean)",
            "public void setAutoCommit(boolean)"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource.getConnection()",
            "public java.sql.Connection getConnection() throws java.sql.SQLException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource.getConnection(java.lang.String, java.lang.String)",
            "public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource.shouldClose(java.sql.Connection)",
            "public boolean shouldClose(java.sql.Connection)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource.initConnection()",
            "public void initConnection() throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource.resetConnection()",
            "public void resetConnection()"
        ],
        [
            "org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization",
            "org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization(org.springframework.jdbc.datasource.ConnectionHolder, javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization(org.springframework.jdbc.datasource.ConnectionHolder, javax.sql.DataSource)"
        ],
        [
            "int",
            "org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization.suspend()",
            "public void suspend()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization.resume()",
            "public void resume()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization.beforeCompletion()",
            "public void beforeCompletion()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization.afterCompletion(int)",
            "public void afterCompletion(int)"
        ],
        [
            "default",
            "org.springframework.jdbc.datasource.ConnectionHandle.void releaseConnection(java.sql.Connection)",
            "public default void releaseConnection(java.sql.Connection)"
        ],
        [
            "org.springframework.jdbc.datasource.SimpleConnectionHandle",
            "org.springframework.jdbc.datasource.SimpleConnectionHandle(java.sql.Connection)",
            "public org.springframework.jdbc.datasource.SimpleConnectionHandle(java.sql.Connection)"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.SimpleConnectionHandle.getConnection()",
            "public java.sql.Connection getConnection()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.SimpleConnectionHandle.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jdbc.datasource.ConnectionHolder",
            "org.springframework.jdbc.datasource.ConnectionHolder(org.springframework.jdbc.datasource.ConnectionHandle)",
            "public org.springframework.jdbc.datasource.ConnectionHolder(org.springframework.jdbc.datasource.ConnectionHandle)"
        ],
        [
            "org.springframework.jdbc.datasource.ConnectionHolder",
            "org.springframework.jdbc.datasource.ConnectionHolder(java.sql.Connection)",
            "public org.springframework.jdbc.datasource.ConnectionHolder(java.sql.Connection)"
        ],
        [
            "org.springframework.jdbc.datasource.ConnectionHolder",
            "org.springframework.jdbc.datasource.ConnectionHolder(java.sql.Connection, boolean)",
            "public org.springframework.jdbc.datasource.ConnectionHolder(java.sql.Connection, boolean)"
        ],
        [
            "org.springframework.jdbc.datasource.ConnectionHandle",
            "org.springframework.jdbc.datasource.ConnectionHolder.getConnectionHandle()",
            "public org.springframework.jdbc.datasource.ConnectionHandle getConnectionHandle()"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.ConnectionHolder.getConnection()",
            "public java.sql.Connection getConnection()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.ConnectionHolder.supportsSavepoints()",
            "public boolean supportsSavepoints() throws java.sql.SQLException"
        ],
        [
            "java.sql.Savepoint",
            "org.springframework.jdbc.datasource.ConnectionHolder.createSavepoint()",
            "public java.sql.Savepoint createSavepoint() throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.ConnectionHolder.released()",
            "public void released()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.ConnectionHolder.clear()",
            "public void clear()"
        ],
        [
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter()",
            "public org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter.setUsername(java.lang.String)",
            "public void setUsername(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter.setPassword(java.lang.String)",
            "public void setPassword(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter.setCatalog(java.lang.String)",
            "public void setCatalog(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter.setSchema(java.lang.String)",
            "public void setSchema(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter.setCredentialsForCurrentThread(java.lang.String, java.lang.String)",
            "public void setCredentialsForCurrentThread(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter.removeCredentialsFromCurrentThread()",
            "public void removeCredentialsFromCurrentThread()"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter.getConnection()",
            "public java.sql.Connection getConnection() throws java.sql.SQLException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter.getConnection(java.lang.String, java.lang.String)",
            "public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler",
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler(org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy, javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler(org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy, javax.sql.DataSource)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter",
            "org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter()",
            "public org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter.setIsolationLevelName(java.lang.String)",
            "public final void setIsolationLevelName(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter.setIsolationLevel(int)",
            "public void setIsolationLevel(int)"
        ],
        [
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter$JdbcUserCredentials",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter$JdbcUserCredentials(java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter$JdbcUserCredentials(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter$JdbcUserCredentials.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport()",
            "public org.springframework.jdbc.datasource.JdbcTransactionObjectSupport()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.setConnectionHolder(org.springframework.jdbc.datasource.ConnectionHolder)",
            "public void setConnectionHolder(org.springframework.jdbc.datasource.ConnectionHolder)"
        ],
        [
            "org.springframework.jdbc.datasource.ConnectionHolder",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.getConnectionHolder()",
            "public org.springframework.jdbc.datasource.ConnectionHolder getConnectionHolder()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.hasConnectionHolder()",
            "public boolean hasConnectionHolder()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.setPreviousIsolationLevel(java.lang.Integer)",
            "public void setPreviousIsolationLevel(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.getPreviousIsolationLevel()",
            "public java.lang.Integer getPreviousIsolationLevel()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.setReadOnly(boolean)",
            "public void setReadOnly(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.isReadOnly()",
            "public boolean isReadOnly()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.setSavepointAllowed(boolean)",
            "public void setSavepointAllowed(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.isSavepointAllowed()",
            "public boolean isSavepointAllowed()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.flush()",
            "public void flush()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.createSavepoint()",
            "public java.lang.Object createSavepoint() throws org.springframework.transaction.TransactionException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.rollbackToSavepoint(java.lang.Object)",
            "public void rollbackToSavepoint(java.lang.Object) throws org.springframework.transaction.TransactionException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.releaseSavepoint(java.lang.Object)",
            "public void releaseSavepoint(java.lang.Object) throws org.springframework.transaction.TransactionException"
        ],
        [
            "org.springframework.jdbc.datasource.SimpleDriverDataSource",
            "org.springframework.jdbc.datasource.SimpleDriverDataSource()",
            "public org.springframework.jdbc.datasource.SimpleDriverDataSource()"
        ],
        [
            "org.springframework.jdbc.datasource.SimpleDriverDataSource",
            "org.springframework.jdbc.datasource.SimpleDriverDataSource(java.sql.Driver, java.lang.String)",
            "public org.springframework.jdbc.datasource.SimpleDriverDataSource(java.sql.Driver, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.SimpleDriverDataSource",
            "org.springframework.jdbc.datasource.SimpleDriverDataSource(java.sql.Driver, java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.datasource.SimpleDriverDataSource(java.sql.Driver, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.SimpleDriverDataSource",
            "org.springframework.jdbc.datasource.SimpleDriverDataSource(java.sql.Driver, java.lang.String, java.util.Properties)",
            "public org.springframework.jdbc.datasource.SimpleDriverDataSource(java.sql.Driver, java.lang.String, java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.SimpleDriverDataSource.setDriverClass(java.lang.Class<? extends java.sql.Driver>)",
            "public void setDriverClass(java.lang.Class<? extends java.sql.Driver>)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.SimpleDriverDataSource.setDriver(java.sql.Driver)",
            "public void setDriver(java.sql.Driver)"
        ],
        [
            "java.sql.Driver",
            "org.springframework.jdbc.datasource.SimpleDriverDataSource.getDriver()",
            "public java.sql.Driver getDriver()"
        ],
        [
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource()",
            "public org.springframework.jdbc.datasource.AbstractDriverBasedDataSource()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.setUrl(java.lang.String)",
            "public void setUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getUrl()",
            "public java.lang.String getUrl()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.setUsername(java.lang.String)",
            "public void setUsername(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getUsername()",
            "public java.lang.String getUsername()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.setPassword(java.lang.String)",
            "public void setPassword(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getPassword()",
            "public java.lang.String getPassword()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.setCatalog(java.lang.String)",
            "public void setCatalog(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getCatalog()",
            "public java.lang.String getCatalog()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.setSchema(java.lang.String)",
            "public void setSchema(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getSchema()",
            "public java.lang.String getSchema()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.setConnectionProperties(java.util.Properties)",
            "public void setConnectionProperties(java.util.Properties)"
        ],
        [
            "java.util.Properties",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnectionProperties()",
            "public java.util.Properties getConnectionProperties()"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnection()",
            "public java.sql.Connection getConnection() throws java.sql.SQLException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnection(java.lang.String, java.lang.String)",
            "public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurerFactory.getConfigurer(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType)",
            "public static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer getConfigurer(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType) throws java.lang.IllegalStateException"
        ],
        [
            "synchronized",
            "org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer.org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer getInstance()",
            "public static synchronized org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer getInstance() throws java.lang.ClassNotFoundException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer.configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties, java.lang.String)",
            "public void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.AbstractEmbeddedDatabaseConfigurer.shutdown(javax.sql.DataSource, java.lang.String)",
            "public void shutdown(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.OutputStreamFactory$1.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "synchronized",
            "org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer.org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer getInstance()",
            "public static synchronized org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer getInstance()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer.configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties, java.lang.String)",
            "public void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer.shutdown(javax.sql.DataSource, java.lang.String)",
            "public void shutdown(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory()",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.setGenerateUniqueDatabaseName(boolean)",
            "public void setGenerateUniqueDatabaseName(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.setDatabaseName(java.lang.String)",
            "public void setDatabaseName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.setDataSourceFactory(org.springframework.jdbc.datasource.embedded.DataSourceFactory)",
            "public void setDataSourceFactory(org.springframework.jdbc.datasource.embedded.DataSourceFactory)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.setDatabaseType(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType)",
            "public void setDatabaseType(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.setDatabaseConfigurer(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer)",
            "public void setDatabaseConfigurer(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.setDatabasePopulator(org.springframework.jdbc.datasource.init.DatabasePopulator)",
            "public void setDatabasePopulator(org.springframework.jdbc.datasource.init.DatabasePopulator)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabase",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.getDatabase()",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabase getDatabase()"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType[]",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.values()",
            "public static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType[] values()"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.valueOf(java.lang.String)",
            "public static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType valueOf(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder()",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder()"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.generateUniqueName(boolean)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder generateUniqueName(boolean)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setName(java.lang.String)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setType(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setType(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setDataSourceFactory(org.springframework.jdbc.datasource.embedded.DataSourceFactory)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setDataSourceFactory(org.springframework.jdbc.datasource.embedded.DataSourceFactory)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.addDefaultScripts()",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder addDefaultScripts()"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.addScript(java.lang.String)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder addScript(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.addScripts(java.lang.String...)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder addScripts(java.lang.String...)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setScriptEncoding(java.lang.String)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setScriptEncoding(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setSeparator(java.lang.String)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setSeparator(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setCommentPrefix(java.lang.String)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setCommentPrefix(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setCommentPrefixes(java.lang.String...)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setCommentPrefixes(java.lang.String...)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setBlockCommentStartDelimiter(java.lang.String)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setBlockCommentStartDelimiter(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.setBlockCommentEndDelimiter(java.lang.String)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder setBlockCommentEndDelimiter(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.continueOnError(boolean)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder continueOnError(boolean)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.ignoreFailedDrops(boolean)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder ignoreFailedDrops(boolean)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabase",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.build()",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabase build()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.jdbc.datasource.embedded.OutputStreamFactory.getNoopOutputStream()",
            "public static java.io.OutputStream getNoopOutputStream()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory$1.setDriverClass(java.lang.Class<? extends java.sql.Driver>)",
            "public void setDriverClass(java.lang.Class<? extends java.sql.Driver>)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory$1.setUrl(java.lang.String)",
            "public void setUrl(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory$1.setUsername(java.lang.String)",
            "public void setUsername(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory$1.setPassword(java.lang.String)",
            "public void setPassword(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory, javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory, javax.sql.DataSource)"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.getConnection()",
            "public java.sql.Connection getConnection() throws java.sql.SQLException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.getConnection(java.lang.String, java.lang.String)",
            "public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.io.PrintWriter",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.getLogWriter()",
            "public java.io.PrintWriter getLogWriter() throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.setLogWriter(java.io.PrintWriter)",
            "public void setLogWriter(java.io.PrintWriter) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.getLoginTimeout()",
            "public int getLoginTimeout() throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.setLoginTimeout(int)",
            "public void setLoginTimeout(int) throws java.sql.SQLException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.unwrap(java.lang.Class<T>)",
            "public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.isWrapperFor(java.lang.Class<?>)",
            "public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException"
        ],
        [
            "java.util.logging.Logger",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.getParentLogger()",
            "public java.util.logging.Logger getParentLogger()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.shutdown()",
            "public void shutdown()"
        ],
        [
            "synchronized",
            "org.springframework.jdbc.datasource.embedded.HsqlEmbeddedDatabaseConfigurer.org.springframework.jdbc.datasource.embedded.HsqlEmbeddedDatabaseConfigurer getInstance()",
            "public static synchronized org.springframework.jdbc.datasource.embedded.HsqlEmbeddedDatabaseConfigurer getInstance() throws java.lang.ClassNotFoundException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.HsqlEmbeddedDatabaseConfigurer.configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties, java.lang.String)",
            "public void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.ConnectionProperties",
            "org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory.getConnectionProperties()",
            "public org.springframework.jdbc.datasource.embedded.ConnectionProperties getConnectionProperties()"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory.getDataSource()",
            "public javax.sql.DataSource getDataSource()"
        ],
        [
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean()",
            "public org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.setDatabaseCleaner(org.springframework.jdbc.datasource.init.DatabasePopulator)",
            "public void setDatabaseCleaner(org.springframework.jdbc.datasource.init.DatabasePopulator)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.getObject()",
            "public javax.sql.DataSource getObject()"
        ],
        [
            "java.lang.Class<? extends javax.sql.DataSource>",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.getObjectType()",
            "public java.lang.Class<? extends javax.sql.DataSource> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.destroy()",
            "public void destroy()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.jdbc.datasource.SingleConnectionDataSource$CloseSuppressingInvocationHandler",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource$CloseSuppressingInvocationHandler(java.sql.Connection)",
            "public org.springframework.jdbc.datasource.SingleConnectionDataSource$CloseSuppressingInvocationHandler(java.sql.Connection)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.datasource.SingleConnectionDataSource$CloseSuppressingInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jdbc.datasource.WebSphereDataSourceAdapter",
            "org.springframework.jdbc.datasource.WebSphereDataSourceAdapter()",
            "public org.springframework.jdbc.datasource.WebSphereDataSourceAdapter()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.WebSphereDataSourceAdapter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy",
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy()",
            "public org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy()"
        ],
        [
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy",
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy(javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy.setReobtainTransactionalConnections(boolean)",
            "public void setReobtainTransactionalConnections(boolean)"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy.getConnection()",
            "public java.sql.Connection getConnection() throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.datasource.AbstractDataSource",
            "org.springframework.jdbc.datasource.AbstractDataSource()",
            "public org.springframework.jdbc.datasource.AbstractDataSource()"
        ],
        [
            "int",
            "org.springframework.jdbc.datasource.AbstractDataSource.getLoginTimeout()",
            "public int getLoginTimeout() throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.AbstractDataSource.setLoginTimeout(int)",
            "public void setLoginTimeout(int) throws java.sql.SQLException"
        ],
        [
            "java.io.PrintWriter",
            "org.springframework.jdbc.datasource.AbstractDataSource.getLogWriter()",
            "public java.io.PrintWriter getLogWriter()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.AbstractDataSource.setLogWriter(java.io.PrintWriter)",
            "public void setLogWriter(java.io.PrintWriter) throws java.sql.SQLException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.datasource.AbstractDataSource.unwrap(java.lang.Class<T>)",
            "public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.AbstractDataSource.isWrapperFor(java.lang.Class<?>)",
            "public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException"
        ],
        [
            "java.util.logging.Logger",
            "org.springframework.jdbc.datasource.AbstractDataSource.getParentLogger()",
            "public java.util.logging.Logger getParentLogger()"
        ],
        [
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler(org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy)",
            "public org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler(org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy)"
        ],
        [
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler(org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler(org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy, java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jdbc.datasource.DataSourceUtils",
            "org.springframework.jdbc.datasource.DataSourceUtils()",
            "public org.springframework.jdbc.datasource.DataSourceUtils()"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.DataSourceUtils.getConnection(javax.sql.DataSource)",
            "public static java.sql.Connection getConnection(javax.sql.DataSource) throws org.springframework.jdbc.CannotGetJdbcConnectionException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(javax.sql.DataSource)",
            "public static java.sql.Connection doGetConnection(javax.sql.DataSource) throws java.sql.SQLException"
        ],
        [
            "java.lang.Integer",
            "org.springframework.jdbc.datasource.DataSourceUtils.prepareConnectionForTransaction(java.sql.Connection, org.springframework.transaction.TransactionDefinition)",
            "public static java.lang.Integer prepareConnectionForTransaction(java.sql.Connection, org.springframework.transaction.TransactionDefinition) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils.resetConnectionAfterTransaction(java.sql.Connection, java.lang.Integer, boolean)",
            "public static void resetConnectionAfterTransaction(java.sql.Connection, java.lang.Integer, boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils.resetConnectionAfterTransaction(java.sql.Connection, java.lang.Integer)",
            "public static void resetConnectionAfterTransaction(java.sql.Connection, java.lang.Integer)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.DataSourceUtils.isConnectionTransactional(java.sql.Connection, javax.sql.DataSource)",
            "public static boolean isConnectionTransactional(java.sql.Connection, javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils.applyTransactionTimeout(java.sql.Statement, javax.sql.DataSource)",
            "public static void applyTransactionTimeout(java.sql.Statement, javax.sql.DataSource) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils.applyTimeout(java.sql.Statement, javax.sql.DataSource, int)",
            "public static void applyTimeout(java.sql.Statement, javax.sql.DataSource, int) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils.releaseConnection(java.sql.Connection, javax.sql.DataSource)",
            "public static void releaseConnection(java.sql.Connection, javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils.doReleaseConnection(java.sql.Connection, javax.sql.DataSource)",
            "public static void doReleaseConnection(java.sql.Connection, javax.sql.DataSource) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceUtils.doCloseConnection(java.sql.Connection, javax.sql.DataSource)",
            "public static void doCloseConnection(java.sql.Connection, javax.sql.DataSource) throws java.sql.SQLException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.DataSourceUtils.getTargetConnection(java.sql.Connection)",
            "public static java.sql.Connection getTargetConnection(java.sql.Connection)"
        ],
        [
            "org.springframework.jdbc.datasource.DataSourceTransactionManager",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager()",
            "public org.springframework.jdbc.datasource.DataSourceTransactionManager()"
        ],
        [
            "org.springframework.jdbc.datasource.DataSourceTransactionManager",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager(javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.DataSourceTransactionManager(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager.getDataSource()",
            "public javax.sql.DataSource getDataSource()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager.setEnforceReadOnly(boolean)",
            "public void setEnforceReadOnly(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager.isEnforceReadOnly()",
            "public boolean isEnforceReadOnly()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.datasource.DataSourceTransactionManager.getResourceFactory()",
            "public java.lang.Object getResourceFactory()"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.SingleDataSourceLookup",
            "org.springframework.jdbc.datasource.lookup.SingleDataSourceLookup(javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.lookup.SingleDataSourceLookup(javax.sql.DataSource)"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.lookup.SingleDataSourceLookup.getDataSource(java.lang.String)",
            "public javax.sql.DataSource getDataSource(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter",
            "org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter()",
            "public org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter()"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup",
            "org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup()",
            "public org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup()"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup",
            "org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup.getDataSource(java.lang.String)",
            "public javax.sql.DataSource getDataSource(java.lang.String) throws org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource()",
            "public org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.setTargetDataSources(java.util.Map<java.lang.Object, java.lang.Object>)",
            "public void setTargetDataSources(java.util.Map<java.lang.Object, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.setDefaultTargetDataSource(java.lang.Object)",
            "public void setDefaultTargetDataSource(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.setLenientFallback(boolean)",
            "public void setLenientFallback(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.setDataSourceLookup(org.springframework.jdbc.datasource.lookup.DataSourceLookup)",
            "public void setDataSourceLookup(org.springframework.jdbc.datasource.lookup.DataSourceLookup)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.util.Map<java.lang.Object, javax.sql.DataSource>",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getResolvedDataSources()",
            "public java.util.Map<java.lang.Object, javax.sql.DataSource> getResolvedDataSources()"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getResolvedDefaultDataSource()",
            "public javax.sql.DataSource getResolvedDefaultDataSource()"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection()",
            "public java.sql.Connection getConnection() throws java.sql.SQLException"
        ],
        [
            "java.sql.Connection",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(java.lang.String, java.lang.String)",
            "public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.unwrap(java.lang.Class<T>)",
            "public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.isWrapperFor(java.lang.Class<?>)",
            "public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException",
            "org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException(java.lang.String)",
            "public org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException",
            "org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup",
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup()",
            "public org.springframework.jdbc.datasource.lookup.MapDataSourceLookup()"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup",
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup(java.util.Map<java.lang.String, javax.sql.DataSource>)",
            "public org.springframework.jdbc.datasource.lookup.MapDataSourceLookup(java.util.Map<java.lang.String, javax.sql.DataSource>)"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup",
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup(java.lang.String, javax.sql.DataSource)",
            "public org.springframework.jdbc.datasource.lookup.MapDataSourceLookup(java.lang.String, javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup.setDataSources(java.util.Map<java.lang.String, javax.sql.DataSource>)",
            "public void setDataSources(java.util.Map<java.lang.String, javax.sql.DataSource>)"
        ],
        [
            "java.util.Map<java.lang.String, javax.sql.DataSource>",
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup.getDataSources()",
            "public java.util.Map<java.lang.String, javax.sql.DataSource> getDataSources()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup.addDataSource(java.lang.String, javax.sql.DataSource)",
            "public void addDataSource(java.lang.String, javax.sql.DataSource)"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.lookup.MapDataSourceLookup.getDataSource(java.lang.String)",
            "public javax.sql.DataSource getDataSource(java.lang.String) throws org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException"
        ],
        [
            "org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup",
            "org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup()",
            "public org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup()"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup.getDataSource(java.lang.String)",
            "public javax.sql.DataSource getDataSource(java.lang.String) throws org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException"
        ],
        [
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator",
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator()",
            "public org.springframework.jdbc.datasource.init.CompositeDatabasePopulator()"
        ],
        [
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator",
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator(java.util.Collection<org.springframework.jdbc.datasource.init.DatabasePopulator>)",
            "public org.springframework.jdbc.datasource.init.CompositeDatabasePopulator(java.util.Collection<org.springframework.jdbc.datasource.init.DatabasePopulator>)"
        ],
        [
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator",
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator(org.springframework.jdbc.datasource.init.DatabasePopulator...)",
            "public org.springframework.jdbc.datasource.init.CompositeDatabasePopulator(org.springframework.jdbc.datasource.init.DatabasePopulator...)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator.setPopulators(org.springframework.jdbc.datasource.init.DatabasePopulator...)",
            "public void setPopulators(org.springframework.jdbc.datasource.init.DatabasePopulator...)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator.addPopulators(org.springframework.jdbc.datasource.init.DatabasePopulator...)",
            "public void addPopulators(org.springframework.jdbc.datasource.init.DatabasePopulator...)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.CompositeDatabasePopulator.populate(java.sql.Connection)",
            "public void populate(java.sql.Connection) throws java.sql.SQLException, org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "org.springframework.jdbc.datasource.init.ScriptParseException",
            "org.springframework.jdbc.datasource.init.ScriptParseException(java.lang.String, org.springframework.core.io.support.EncodedResource)",
            "public org.springframework.jdbc.datasource.init.ScriptParseException(java.lang.String, org.springframework.core.io.support.EncodedResource)"
        ],
        [
            "org.springframework.jdbc.datasource.init.ScriptParseException",
            "org.springframework.jdbc.datasource.init.ScriptParseException(java.lang.String, org.springframework.core.io.support.EncodedResource, java.lang.Throwable)",
            "public org.springframework.jdbc.datasource.init.ScriptParseException(java.lang.String, org.springframework.core.io.support.EncodedResource, java.lang.Throwable)"
        ],
        [
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator()",
            "public org.springframework.jdbc.datasource.init.ResourceDatabasePopulator()"
        ],
        [
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator(org.springframework.core.io.Resource...)",
            "public org.springframework.jdbc.datasource.init.ResourceDatabasePopulator(org.springframework.core.io.Resource...)"
        ],
        [
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator(boolean, boolean, java.lang.String, org.springframework.core.io.Resource...)",
            "public org.springframework.jdbc.datasource.init.ResourceDatabasePopulator(boolean, boolean, java.lang.String, org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.addScript(org.springframework.core.io.Resource)",
            "public void addScript(org.springframework.core.io.Resource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.addScripts(org.springframework.core.io.Resource...)",
            "public void addScripts(org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setScripts(org.springframework.core.io.Resource...)",
            "public void setScripts(org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setSqlScriptEncoding(java.lang.String)",
            "public void setSqlScriptEncoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setSeparator(java.lang.String)",
            "public void setSeparator(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setCommentPrefix(java.lang.String)",
            "public void setCommentPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setCommentPrefixes(java.lang.String...)",
            "public void setCommentPrefixes(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setBlockCommentStartDelimiter(java.lang.String)",
            "public void setBlockCommentStartDelimiter(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setBlockCommentEndDelimiter(java.lang.String)",
            "public void setBlockCommentEndDelimiter(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setContinueOnError(boolean)",
            "public void setContinueOnError(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.setIgnoreFailedDrops(boolean)",
            "public void setIgnoreFailedDrops(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(java.sql.Connection)",
            "public void populate(java.sql.Connection) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.execute(javax.sql.DataSource)",
            "public void execute(javax.sql.DataSource) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "org.springframework.jdbc.datasource.init.DataSourceInitializer",
            "org.springframework.jdbc.datasource.init.DataSourceInitializer()",
            "public org.springframework.jdbc.datasource.init.DataSourceInitializer()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.DataSourceInitializer.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.DataSourceInitializer.setDatabasePopulator(org.springframework.jdbc.datasource.init.DatabasePopulator)",
            "public void setDatabasePopulator(org.springframework.jdbc.datasource.init.DatabasePopulator)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.DataSourceInitializer.setDatabaseCleaner(org.springframework.jdbc.datasource.init.DatabasePopulator)",
            "public void setDatabaseCleaner(org.springframework.jdbc.datasource.init.DatabasePopulator)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.DataSourceInitializer.setEnabled(boolean)",
            "public void setEnabled(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.DataSourceInitializer.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.DataSourceInitializer.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.jdbc.datasource.init.ScriptException",
            "org.springframework.jdbc.datasource.init.ScriptException(java.lang.String)",
            "public org.springframework.jdbc.datasource.init.ScriptException(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.init.ScriptException",
            "org.springframework.jdbc.datasource.init.ScriptException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jdbc.datasource.init.ScriptException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jdbc.datasource.init.DatabasePopulatorUtils",
            "org.springframework.jdbc.datasource.init.DatabasePopulatorUtils()",
            "public org.springframework.jdbc.datasource.init.DatabasePopulatorUtils()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(org.springframework.jdbc.datasource.init.DatabasePopulator, javax.sql.DataSource)",
            "public static void execute(org.springframework.jdbc.datasource.init.DatabasePopulator, javax.sql.DataSource) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.datasource.init.UncategorizedScriptException",
            "org.springframework.jdbc.datasource.init.UncategorizedScriptException(java.lang.String)",
            "public org.springframework.jdbc.datasource.init.UncategorizedScriptException(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.init.UncategorizedScriptException",
            "org.springframework.jdbc.datasource.init.UncategorizedScriptException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jdbc.datasource.init.UncategorizedScriptException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jdbc.datasource.init.CannotReadScriptException",
            "org.springframework.jdbc.datasource.init.CannotReadScriptException(org.springframework.core.io.support.EncodedResource, java.lang.Throwable)",
            "public org.springframework.jdbc.datasource.init.CannotReadScriptException(org.springframework.core.io.support.EncodedResource, java.lang.Throwable)"
        ],
        [
            "org.springframework.jdbc.datasource.init.ScriptUtils",
            "org.springframework.jdbc.datasource.init.ScriptUtils()",
            "public org.springframework.jdbc.datasource.init.ScriptUtils()"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(java.sql.Connection, org.springframework.core.io.Resource)",
            "public static void executeSqlScript(java.sql.Connection, org.springframework.core.io.Resource) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(java.sql.Connection, org.springframework.core.io.support.EncodedResource)",
            "public static void executeSqlScript(java.sql.Connection, org.springframework.core.io.support.EncodedResource) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(java.sql.Connection, org.springframework.core.io.support.EncodedResource, boolean, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
            "public static void executeSqlScript(java.sql.Connection, org.springframework.core.io.support.EncodedResource, boolean, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(java.sql.Connection, org.springframework.core.io.support.EncodedResource, boolean, boolean, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)",
            "public static void executeSqlScript(java.sql.Connection, org.springframework.core.io.support.EncodedResource, boolean, boolean, java.lang.String[], java.lang.String, java.lang.String, java.lang.String) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.init.ScriptUtils.readScript(java.io.LineNumberReader, java.lang.String, java.lang.String, java.lang.String)",
            "public static java.lang.String readScript(java.io.LineNumberReader, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.init.ScriptUtils.readScript(java.io.LineNumberReader, java.lang.String[], java.lang.String, java.lang.String)",
            "public static java.lang.String readScript(java.io.LineNumberReader, java.lang.String[], java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.datasource.init.ScriptUtils.containsSqlScriptDelimiters(java.lang.String, java.lang.String)",
            "public static boolean containsSqlScriptDelimiters(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ScriptUtils.splitSqlScript(java.lang.String, char, java.util.List<java.lang.String>)",
            "public static void splitSqlScript(java.lang.String, char, java.util.List<java.lang.String>) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ScriptUtils.splitSqlScript(java.lang.String, java.lang.String, java.util.List<java.lang.String>)",
            "public static void splitSqlScript(java.lang.String, java.lang.String, java.util.List<java.lang.String>) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ScriptUtils.splitSqlScript(org.springframework.core.io.support.EncodedResource, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List<java.lang.String>)",
            "public static void splitSqlScript(org.springframework.core.io.support.EncodedResource, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List<java.lang.String>) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.init.ScriptUtils.splitSqlScript(org.springframework.core.io.support.EncodedResource, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.util.List<java.lang.String>)",
            "public static void splitSqlScript(org.springframework.core.io.support.EncodedResource, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.util.List<java.lang.String>) throws org.springframework.jdbc.datasource.init.ScriptException"
        ],
        [
            "org.springframework.jdbc.datasource.init.ScriptStatementFailedException",
            "org.springframework.jdbc.datasource.init.ScriptStatementFailedException(java.lang.String, int, org.springframework.core.io.support.EncodedResource, java.lang.Throwable)",
            "public org.springframework.jdbc.datasource.init.ScriptStatementFailedException(java.lang.String, int, org.springframework.core.io.support.EncodedResource, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.datasource.init.ScriptStatementFailedException.buildErrorMessage(java.lang.String, int, org.springframework.core.io.support.EncodedResource)",
            "public static java.lang.String buildErrorMessage(java.lang.String, int, org.springframework.core.io.support.EncodedResource)"
        ],
        [
            "org.springframework.jdbc.datasource.DriverManagerDataSource",
            "org.springframework.jdbc.datasource.DriverManagerDataSource()",
            "public org.springframework.jdbc.datasource.DriverManagerDataSource()"
        ],
        [
            "org.springframework.jdbc.datasource.DriverManagerDataSource",
            "org.springframework.jdbc.datasource.DriverManagerDataSource(java.lang.String)",
            "public org.springframework.jdbc.datasource.DriverManagerDataSource(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.DriverManagerDataSource",
            "org.springframework.jdbc.datasource.DriverManagerDataSource(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.datasource.DriverManagerDataSource(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.datasource.DriverManagerDataSource",
            "org.springframework.jdbc.datasource.DriverManagerDataSource(java.lang.String, java.util.Properties)",
            "public org.springframework.jdbc.datasource.DriverManagerDataSource(java.lang.String, java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.jdbc.datasource.DriverManagerDataSource.setDriverClassName(java.lang.String)",
            "public void setDriverClassName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.config.JdbcNamespaceHandler",
            "org.springframework.jdbc.config.JdbcNamespaceHandler()",
            "public org.springframework.jdbc.config.JdbcNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.jdbc.config.JdbcNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.jdbc.config.SortedResourcesFactoryBean",
            "org.springframework.jdbc.config.SortedResourcesFactoryBean(java.util.List<java.lang.String>)",
            "public org.springframework.jdbc.config.SortedResourcesFactoryBean(java.util.List<java.lang.String>)"
        ],
        [
            "org.springframework.jdbc.config.SortedResourcesFactoryBean",
            "org.springframework.jdbc.config.SortedResourcesFactoryBean(org.springframework.core.io.ResourceLoader, java.util.List<java.lang.String>)",
            "public org.springframework.jdbc.config.SortedResourcesFactoryBean(org.springframework.core.io.ResourceLoader, java.util.List<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.jdbc.config.SortedResourcesFactoryBean.setResourceLoader(org.springframework.core.io.ResourceLoader)",
            "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "java.lang.Class<? extends org.springframework.core.io.Resource[]>",
            "org.springframework.jdbc.config.SortedResourcesFactoryBean.getObjectType()",
            "public java.lang.Class<? extends org.springframework.core.io.Resource[]> getObjectType()"
        ],
        [
            "void",
            "org.springframework.jdbc.config.DatabasePopulatorConfigUtils.setDatabasePopulator(org.w3c.dom.Element, org.springframework.beans.factory.support.BeanDefinitionBuilder)",
            "public static void setDatabasePopulator(org.w3c.dom.Element, org.springframework.beans.factory.support.BeanDefinitionBuilder)"
        ],
        [
            "org.springframework.jdbc.support.lob.TemporaryLobCreator",
            "org.springframework.jdbc.support.lob.TemporaryLobCreator()",
            "public org.springframework.jdbc.support.lob.TemporaryLobCreator()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.TemporaryLobCreator.setBlobAsBytes(java.sql.PreparedStatement, int, byte[])",
            "public void setBlobAsBytes(java.sql.PreparedStatement, int, byte[]) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.TemporaryLobCreator.setBlobAsBinaryStream(java.sql.PreparedStatement, int, java.io.InputStream, int)",
            "public void setBlobAsBinaryStream(java.sql.PreparedStatement, int, java.io.InputStream, int) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.TemporaryLobCreator.setClobAsString(java.sql.PreparedStatement, int, java.lang.String)",
            "public void setClobAsString(java.sql.PreparedStatement, int, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.TemporaryLobCreator.setClobAsAsciiStream(java.sql.PreparedStatement, int, java.io.InputStream, int)",
            "public void setClobAsAsciiStream(java.sql.PreparedStatement, int, java.io.InputStream, int) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.TemporaryLobCreator.setClobAsCharacterStream(java.sql.PreparedStatement, int, java.io.Reader, int)",
            "public void setClobAsCharacterStream(java.sql.PreparedStatement, int, java.io.Reader, int) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.TemporaryLobCreator.close()",
            "public void close()"
        ],
        [
            "org.springframework.jdbc.support.lob.AbstractLobHandler",
            "org.springframework.jdbc.support.lob.AbstractLobHandler()",
            "public org.springframework.jdbc.support.lob.AbstractLobHandler()"
        ],
        [
            "byte[]",
            "org.springframework.jdbc.support.lob.AbstractLobHandler.getBlobAsBytes(java.sql.ResultSet, java.lang.String)",
            "public byte[] getBlobAsBytes(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.lob.AbstractLobHandler.getBlobAsBinaryStream(java.sql.ResultSet, java.lang.String)",
            "public java.io.InputStream getBlobAsBinaryStream(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.lob.AbstractLobHandler.getClobAsString(java.sql.ResultSet, java.lang.String)",
            "public java.lang.String getClobAsString(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.lob.AbstractLobHandler.getClobAsAsciiStream(java.sql.ResultSet, java.lang.String)",
            "public java.io.InputStream getClobAsAsciiStream(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.io.Reader",
            "org.springframework.jdbc.support.lob.AbstractLobHandler.getClobAsCharacterStream(java.sql.ResultSet, java.lang.String)",
            "public java.io.Reader getClobAsCharacterStream(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.support.lob.PassThroughBlob",
            "org.springframework.jdbc.support.lob.PassThroughBlob(byte[])",
            "public org.springframework.jdbc.support.lob.PassThroughBlob(byte[])"
        ],
        [
            "org.springframework.jdbc.support.lob.PassThroughBlob",
            "org.springframework.jdbc.support.lob.PassThroughBlob(java.io.InputStream, long)",
            "public org.springframework.jdbc.support.lob.PassThroughBlob(java.io.InputStream, long)"
        ],
        [
            "long",
            "org.springframework.jdbc.support.lob.PassThroughBlob.length()",
            "public long length() throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.lob.PassThroughBlob.getBinaryStream()",
            "public java.io.InputStream getBinaryStream() throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.lob.PassThroughBlob.getBinaryStream(long, long)",
            "public java.io.InputStream getBinaryStream(long, long) throws java.sql.SQLException"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.jdbc.support.lob.PassThroughBlob.setBinaryStream(long)",
            "public java.io.OutputStream setBinaryStream(long) throws java.sql.SQLException"
        ],
        [
            "byte[]",
            "org.springframework.jdbc.support.lob.PassThroughBlob.getBytes(long, int)",
            "public byte[] getBytes(long, int) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.lob.PassThroughBlob.setBytes(long, byte[])",
            "public int setBytes(long, byte[]) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.lob.PassThroughBlob.setBytes(long, byte[], int, int)",
            "public int setBytes(long, byte[], int, int) throws java.sql.SQLException"
        ],
        [
            "long",
            "org.springframework.jdbc.support.lob.PassThroughBlob.position(byte[], long)",
            "public long position(byte[], long) throws java.sql.SQLException"
        ],
        [
            "long",
            "org.springframework.jdbc.support.lob.PassThroughBlob.position(java.sql.Blob, long)",
            "public long position(java.sql.Blob, long) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.PassThroughBlob.truncate(long)",
            "public void truncate(long) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.PassThroughBlob.free()",
            "public void free() throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator.setBlobAsBytes(java.sql.PreparedStatement, int, byte[])",
            "public void setBlobAsBytes(java.sql.PreparedStatement, int, byte[]) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator.setBlobAsBinaryStream(java.sql.PreparedStatement, int, java.io.InputStream, int)",
            "public void setBlobAsBinaryStream(java.sql.PreparedStatement, int, java.io.InputStream, int) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator.setClobAsString(java.sql.PreparedStatement, int, java.lang.String)",
            "public void setClobAsString(java.sql.PreparedStatement, int, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator.setClobAsAsciiStream(java.sql.PreparedStatement, int, java.io.InputStream, int)",
            "public void setClobAsAsciiStream(java.sql.PreparedStatement, int, java.io.InputStream, int) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator.setClobAsCharacterStream(java.sql.PreparedStatement, int, java.io.Reader, int)",
            "public void setClobAsCharacterStream(java.sql.PreparedStatement, int, java.io.Reader, int) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator.close()",
            "public void close()"
        ],
        [
            "org.springframework.jdbc.support.lob.DefaultLobHandler",
            "org.springframework.jdbc.support.lob.DefaultLobHandler()",
            "public org.springframework.jdbc.support.lob.DefaultLobHandler()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.setWrapAsLob(boolean)",
            "public void setWrapAsLob(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.setStreamAsLob(boolean)",
            "public void setStreamAsLob(boolean)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.setCreateTemporaryLob(boolean)",
            "public void setCreateTemporaryLob(boolean)"
        ],
        [
            "byte[]",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.getBlobAsBytes(java.sql.ResultSet, int)",
            "public byte[] getBlobAsBytes(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.getBlobAsBinaryStream(java.sql.ResultSet, int)",
            "public java.io.InputStream getBlobAsBinaryStream(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.getClobAsString(java.sql.ResultSet, int)",
            "public java.lang.String getClobAsString(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.getClobAsAsciiStream(java.sql.ResultSet, int)",
            "public java.io.InputStream getClobAsAsciiStream(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "java.io.Reader",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.getClobAsCharacterStream(java.sql.ResultSet, int)",
            "public java.io.Reader getClobAsCharacterStream(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.support.lob.LobCreator",
            "org.springframework.jdbc.support.lob.DefaultLobHandler.getLobCreator()",
            "public org.springframework.jdbc.support.lob.LobCreator getLobCreator()"
        ],
        [
            "org.springframework.jdbc.support.lob.PassThroughClob",
            "org.springframework.jdbc.support.lob.PassThroughClob(java.lang.String)",
            "public org.springframework.jdbc.support.lob.PassThroughClob(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.lob.PassThroughClob",
            "org.springframework.jdbc.support.lob.PassThroughClob(java.io.Reader, long)",
            "public org.springframework.jdbc.support.lob.PassThroughClob(java.io.Reader, long)"
        ],
        [
            "org.springframework.jdbc.support.lob.PassThroughClob",
            "org.springframework.jdbc.support.lob.PassThroughClob(java.io.InputStream, long)",
            "public org.springframework.jdbc.support.lob.PassThroughClob(java.io.InputStream, long)"
        ],
        [
            "long",
            "org.springframework.jdbc.support.lob.PassThroughClob.length()",
            "public long length() throws java.sql.SQLException"
        ],
        [
            "java.io.Reader",
            "org.springframework.jdbc.support.lob.PassThroughClob.getCharacterStream()",
            "public java.io.Reader getCharacterStream() throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.lob.PassThroughClob.getAsciiStream()",
            "public java.io.InputStream getAsciiStream() throws java.sql.SQLException"
        ],
        [
            "java.io.Reader",
            "org.springframework.jdbc.support.lob.PassThroughClob.getCharacterStream(long, long)",
            "public java.io.Reader getCharacterStream(long, long) throws java.sql.SQLException"
        ],
        [
            "java.io.Writer",
            "org.springframework.jdbc.support.lob.PassThroughClob.setCharacterStream(long)",
            "public java.io.Writer setCharacterStream(long) throws java.sql.SQLException"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.jdbc.support.lob.PassThroughClob.setAsciiStream(long)",
            "public java.io.OutputStream setAsciiStream(long) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.lob.PassThroughClob.getSubString(long, int)",
            "public java.lang.String getSubString(long, int) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.lob.PassThroughClob.setString(long, java.lang.String)",
            "public int setString(long, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.lob.PassThroughClob.setString(long, java.lang.String, int, int)",
            "public int setString(long, java.lang.String, int, int) throws java.sql.SQLException"
        ],
        [
            "long",
            "org.springframework.jdbc.support.lob.PassThroughClob.position(java.lang.String, long)",
            "public long position(java.lang.String, long) throws java.sql.SQLException"
        ],
        [
            "long",
            "org.springframework.jdbc.support.lob.PassThroughClob.position(java.sql.Clob, long)",
            "public long position(java.sql.Clob, long) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.PassThroughClob.truncate(long)",
            "public void truncate(long) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.lob.PassThroughClob.free()",
            "public void free() throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.support.xml.SqlXmlFeatureNotImplementedException",
            "org.springframework.jdbc.support.xml.SqlXmlFeatureNotImplementedException(java.lang.String)",
            "public org.springframework.jdbc.support.xml.SqlXmlFeatureNotImplementedException(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.xml.SqlXmlFeatureNotImplementedException",
            "org.springframework.jdbc.support.xml.SqlXmlFeatureNotImplementedException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jdbc.support.xml.SqlXmlFeatureNotImplementedException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler$AbstractJdbc4SqlXmlValue.setValue(java.sql.PreparedStatement, int)",
            "public void setValue(java.sql.PreparedStatement, int) throws java.sql.SQLException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler$AbstractJdbc4SqlXmlValue.cleanup()",
            "public void cleanup()"
        ],
        [
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler()",
            "public org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.getXmlAsString(java.sql.ResultSet, java.lang.String)",
            "public java.lang.String getXmlAsString(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.getXmlAsString(java.sql.ResultSet, int)",
            "public java.lang.String getXmlAsString(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.getXmlAsBinaryStream(java.sql.ResultSet, java.lang.String)",
            "public java.io.InputStream getXmlAsBinaryStream(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.getXmlAsBinaryStream(java.sql.ResultSet, int)",
            "public java.io.InputStream getXmlAsBinaryStream(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "java.io.Reader",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.getXmlAsCharacterStream(java.sql.ResultSet, java.lang.String)",
            "public java.io.Reader getXmlAsCharacterStream(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"
        ],
        [
            "java.io.Reader",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.getXmlAsCharacterStream(java.sql.ResultSet, int)",
            "public java.io.Reader getXmlAsCharacterStream(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "javax.xml.transform.Source",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.getXmlAsSource(java.sql.ResultSet, java.lang.String, java.lang.Class<? extends javax.xml.transform.Source>)",
            "public javax.xml.transform.Source getXmlAsSource(java.sql.ResultSet, java.lang.String, java.lang.Class<? extends javax.xml.transform.Source>) throws java.sql.SQLException"
        ],
        [
            "javax.xml.transform.Source",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.getXmlAsSource(java.sql.ResultSet, int, java.lang.Class<? extends javax.xml.transform.Source>)",
            "public javax.xml.transform.Source getXmlAsSource(java.sql.ResultSet, int, java.lang.Class<? extends javax.xml.transform.Source>) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.support.xml.SqlXmlValue",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.newSqlXmlValue(java.lang.String)",
            "public org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.xml.SqlXmlValue",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.newSqlXmlValue(org.springframework.jdbc.support.xml.XmlBinaryStreamProvider)",
            "public org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(org.springframework.jdbc.support.xml.XmlBinaryStreamProvider)"
        ],
        [
            "org.springframework.jdbc.support.xml.SqlXmlValue",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.newSqlXmlValue(org.springframework.jdbc.support.xml.XmlCharacterStreamProvider)",
            "public org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(org.springframework.jdbc.support.xml.XmlCharacterStreamProvider)"
        ],
        [
            "org.springframework.jdbc.support.xml.SqlXmlValue",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.newSqlXmlValue(java.lang.Class<? extends javax.xml.transform.Result>, org.springframework.jdbc.support.xml.XmlResultProvider)",
            "public org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(java.lang.Class<? extends javax.xml.transform.Result>, org.springframework.jdbc.support.xml.XmlResultProvider)"
        ],
        [
            "org.springframework.jdbc.support.xml.SqlXmlValue",
            "org.springframework.jdbc.support.xml.Jdbc4SqlXmlHandler.newSqlXmlValue(org.w3c.dom.Document)",
            "public org.springframework.jdbc.support.xml.SqlXmlValue newSqlXmlValue(org.w3c.dom.Document)"
        ],
        [
            "org.springframework.jdbc.support.MetaDataAccessException",
            "org.springframework.jdbc.support.MetaDataAccessException(java.lang.String)",
            "public org.springframework.jdbc.support.MetaDataAccessException(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.MetaDataAccessException",
            "org.springframework.jdbc.support.MetaDataAccessException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jdbc.support.MetaDataAccessException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodes",
            "org.springframework.jdbc.support.SQLErrorCodes()",
            "public org.springframework.jdbc.support.SQLErrorCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setDatabaseProductName(java.lang.String)",
            "public void setDatabaseProductName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.SQLErrorCodes.getDatabaseProductName()",
            "public java.lang.String getDatabaseProductName()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setDatabaseProductNames(java.lang.String...)",
            "public void setDatabaseProductNames(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getDatabaseProductNames()",
            "public java.lang.String[] getDatabaseProductNames()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setUseSqlStateForTranslation(boolean)",
            "public void setUseSqlStateForTranslation(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.SQLErrorCodes.isUseSqlStateForTranslation()",
            "public boolean isUseSqlStateForTranslation()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setBadSqlGrammarCodes(java.lang.String...)",
            "public void setBadSqlGrammarCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getBadSqlGrammarCodes()",
            "public java.lang.String[] getBadSqlGrammarCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setInvalidResultSetAccessCodes(java.lang.String...)",
            "public void setInvalidResultSetAccessCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getInvalidResultSetAccessCodes()",
            "public java.lang.String[] getInvalidResultSetAccessCodes()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getDuplicateKeyCodes()",
            "public java.lang.String[] getDuplicateKeyCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setDuplicateKeyCodes(java.lang.String...)",
            "public void setDuplicateKeyCodes(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setDataIntegrityViolationCodes(java.lang.String...)",
            "public void setDataIntegrityViolationCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getDataIntegrityViolationCodes()",
            "public java.lang.String[] getDataIntegrityViolationCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setPermissionDeniedCodes(java.lang.String...)",
            "public void setPermissionDeniedCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getPermissionDeniedCodes()",
            "public java.lang.String[] getPermissionDeniedCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setDataAccessResourceFailureCodes(java.lang.String...)",
            "public void setDataAccessResourceFailureCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getDataAccessResourceFailureCodes()",
            "public java.lang.String[] getDataAccessResourceFailureCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setTransientDataAccessResourceCodes(java.lang.String...)",
            "public void setTransientDataAccessResourceCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getTransientDataAccessResourceCodes()",
            "public java.lang.String[] getTransientDataAccessResourceCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setCannotAcquireLockCodes(java.lang.String...)",
            "public void setCannotAcquireLockCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getCannotAcquireLockCodes()",
            "public java.lang.String[] getCannotAcquireLockCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setDeadlockLoserCodes(java.lang.String...)",
            "public void setDeadlockLoserCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getDeadlockLoserCodes()",
            "public java.lang.String[] getDeadlockLoserCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setCannotSerializeTransactionCodes(java.lang.String...)",
            "public void setCannotSerializeTransactionCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getCannotSerializeTransactionCodes()",
            "public java.lang.String[] getCannotSerializeTransactionCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setCustomTranslations(org.springframework.jdbc.support.CustomSQLErrorCodesTranslation...)",
            "public void setCustomTranslations(org.springframework.jdbc.support.CustomSQLErrorCodesTranslation...)"
        ],
        [
            "org.springframework.jdbc.support.CustomSQLErrorCodesTranslation[]",
            "org.springframework.jdbc.support.SQLErrorCodes.getCustomTranslations()",
            "public org.springframework.jdbc.support.CustomSQLErrorCodesTranslation[] getCustomTranslations()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setCustomSqlExceptionTranslatorClass(java.lang.Class<? extends org.springframework.jdbc.support.SQLExceptionTranslator>)",
            "public void setCustomSqlExceptionTranslatorClass(java.lang.Class<? extends org.springframework.jdbc.support.SQLExceptionTranslator>)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodes.setCustomSqlExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)",
            "public void setCustomSqlExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)"
        ],
        [
            "org.springframework.jdbc.support.SQLExceptionTranslator",
            "org.springframework.jdbc.support.SQLErrorCodes.getCustomSqlExceptionTranslator()",
            "public org.springframework.jdbc.support.SQLExceptionTranslator getCustomSqlExceptionTranslator()"
        ],
        [
            "org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator",
            "org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator()",
            "public org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.setFallbackTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)",
            "public void setFallbackTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)"
        ],
        [
            "org.springframework.jdbc.support.SQLExceptionTranslator",
            "org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.getFallbackTranslator()",
            "public org.springframework.jdbc.support.SQLExceptionTranslator getFallbackTranslator()"
        ],
        [
            "org.springframework.dao.DataAccessException",
            "org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(java.lang.String, java.lang.String, java.sql.SQLException)",
            "public org.springframework.dao.DataAccessException translate(java.lang.String, java.lang.String, java.sql.SQLException)"
        ],
        [
            "org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistrar",
            "org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistrar()",
            "public org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistrar()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistrar.setTranslators(java.util.Map<java.lang.String, org.springframework.jdbc.support.SQLExceptionTranslator>)",
            "public void setTranslators(java.util.Map<java.lang.String, org.springframework.jdbc.support.SQLExceptionTranslator>)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistrar.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jdbc.support.CustomSQLErrorCodesTranslation",
            "org.springframework.jdbc.support.CustomSQLErrorCodesTranslation()",
            "public org.springframework.jdbc.support.CustomSQLErrorCodesTranslation()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.CustomSQLErrorCodesTranslation.setErrorCodes(java.lang.String...)",
            "public void setErrorCodes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.CustomSQLErrorCodesTranslation.getErrorCodes()",
            "public java.lang.String[] getErrorCodes()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.CustomSQLErrorCodesTranslation.setExceptionClass(java.lang.Class<?>)",
            "public void setExceptionClass(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jdbc.support.CustomSQLErrorCodesTranslation.getExceptionClass()",
            "public java.lang.Class<?> getExceptionClass()"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodesFactory",
            "org.springframework.jdbc.support.SQLErrorCodesFactory.getInstance()",
            "public static org.springframework.jdbc.support.SQLErrorCodesFactory getInstance()"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodes",
            "org.springframework.jdbc.support.SQLErrorCodesFactory.getErrorCodes(java.lang.String)",
            "public org.springframework.jdbc.support.SQLErrorCodes getErrorCodes(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodes",
            "org.springframework.jdbc.support.SQLErrorCodesFactory.getErrorCodes(javax.sql.DataSource)",
            "public org.springframework.jdbc.support.SQLErrorCodes getErrorCodes(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodes",
            "org.springframework.jdbc.support.SQLErrorCodesFactory.resolveErrorCodes(javax.sql.DataSource)",
            "public org.springframework.jdbc.support.SQLErrorCodes resolveErrorCodes(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodes",
            "org.springframework.jdbc.support.SQLErrorCodesFactory.registerDatabase(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.SQLErrorCodes registerDatabase(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodes",
            "org.springframework.jdbc.support.SQLErrorCodesFactory.unregisterDatabase(javax.sql.DataSource)",
            "public org.springframework.jdbc.support.SQLErrorCodes unregisterDatabase(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.support.DatabaseStartupValidator",
            "org.springframework.jdbc.support.DatabaseStartupValidator()",
            "public org.springframework.jdbc.support.DatabaseStartupValidator()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.DatabaseStartupValidator.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.DatabaseStartupValidator.setValidationQuery(java.lang.String)",
            "public void setValidationQuery(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.DatabaseStartupValidator.setInterval(int)",
            "public void setInterval(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.DatabaseStartupValidator.setTimeout(int)",
            "public void setTimeout(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.DatabaseStartupValidator.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistry",
            "org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistry.getInstance()",
            "public static org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistry getInstance()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistry.registerTranslator(java.lang.String, org.springframework.jdbc.support.SQLExceptionTranslator)",
            "public void registerTranslator(java.lang.String, org.springframework.jdbc.support.SQLExceptionTranslator)"
        ],
        [
            "org.springframework.jdbc.support.SQLExceptionTranslator",
            "org.springframework.jdbc.support.CustomSQLExceptionTranslatorRegistry.findTranslatorForDatabase(java.lang.String)",
            "public org.springframework.jdbc.support.SQLExceptionTranslator findTranslatorForDatabase(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.SqlServerMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.SqlServerMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.SqlServerMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.SqlServerMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.SqlServerMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.SqlServerMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.DB2SequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.DB2SequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.DB2SequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.DB2SequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.DB2SequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.DB2SequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.H2SequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.H2SequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.H2SequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.H2SequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.H2SequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.H2SequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.HsqlSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.HsqlSequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.HsqlSequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.HsqlSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.HsqlSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.HsqlSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer.setColumnName(java.lang.String)",
            "public void setColumnName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer.getColumnName()",
            "public java.lang.String getColumnName()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer.setCacheSize(int)",
            "public void setCacheSize(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer.getCacheSize()",
            "public int getCacheSize()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.AbstractColumnMaxValueIncrementer.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.SybaseAnywhereMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.SybaseAnywhereMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.SybaseAnywhereMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.SybaseAnywhereMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.SybaseAnywhereMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.SybaseAnywhereMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.HanaSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.HanaSequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.HanaSequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.HanaSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.HanaSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.HanaSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.Db2LuwMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.Db2LuwMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.Db2LuwMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.Db2LuwMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.Db2LuwMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.Db2LuwMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.Db2MainframeMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.Db2MainframeMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.Db2MainframeMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.Db2MainframeMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.Db2MainframeMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.Db2MainframeMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer.setUseNewConnection(boolean)",
            "public void setUseNewConnection(boolean)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer.setDummyName(java.lang.String)",
            "public void setDummyName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.incrementer.DerbyMaxValueIncrementer.getDummyName()",
            "public java.lang.String getDummyName()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.PostgreSQLSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.PostgreSQLSequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.PostgreSQLSequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.PostgreSQLSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.PostgreSQLSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.PostgreSQLSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.getDataSource()",
            "public javax.sql.DataSource getDataSource()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.setIncrementerName(java.lang.String)",
            "public void setIncrementerName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.getIncrementerName()",
            "public java.lang.String getIncrementerName()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.setPaddingLength(int)",
            "public void setPaddingLength(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.getPaddingLength()",
            "public int getPaddingLength()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "int",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.nextIntValue()",
            "public int nextIntValue() throws org.springframework.dao.DataAccessException"
        ],
        [
            "long",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.nextLongValue()",
            "public long nextLongValue() throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer.nextStringValue()",
            "public java.lang.String nextStringValue() throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.support.incrementer.PostgresSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.PostgresSequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.PostgresSequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.PostgresSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.PostgresSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.PostgresSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer.setDeleteSpecificValues(boolean)",
            "public void setDeleteSpecificValues(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.incrementer.AbstractIdentityColumnMaxValueIncrementer.isDeleteSpecificValues()",
            "public boolean isDeleteSpecificValues()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.DB2MainframeSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.DB2MainframeSequenceMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.DB2MainframeSequenceMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.DB2MainframeSequenceMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.DB2MainframeSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.DB2MainframeSequenceMaxValueIncrementer(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.incrementer.SybaseMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.SybaseMaxValueIncrementer()",
            "public org.springframework.jdbc.support.incrementer.SybaseMaxValueIncrementer()"
        ],
        [
            "org.springframework.jdbc.support.incrementer.SybaseMaxValueIncrementer",
            "org.springframework.jdbc.support.incrementer.SybaseMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)",
            "public org.springframework.jdbc.support.incrementer.SybaseMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.JdbcUtils",
            "org.springframework.jdbc.support.JdbcUtils()",
            "public org.springframework.jdbc.support.JdbcUtils()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcUtils.closeConnection(java.sql.Connection)",
            "public static void closeConnection(java.sql.Connection)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcUtils.closeStatement(java.sql.Statement)",
            "public static void closeStatement(java.sql.Statement)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcUtils.closeResultSet(java.sql.ResultSet)",
            "public static void closeResultSet(java.sql.ResultSet)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.support.JdbcUtils.getResultSetValue(java.sql.ResultSet, int, java.lang.Class<?>)",
            "public static java.lang.Object getResultSetValue(java.sql.ResultSet, int, java.lang.Class<?>) throws java.sql.SQLException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.support.JdbcUtils.getResultSetValue(java.sql.ResultSet, int)",
            "public static java.lang.Object getResultSetValue(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(javax.sql.DataSource, org.springframework.jdbc.support.DatabaseMetaDataCallback<T>)",
            "public static <T> T extractDatabaseMetaData(javax.sql.DataSource, org.springframework.jdbc.support.DatabaseMetaDataCallback<T>) throws org.springframework.jdbc.support.MetaDataAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(javax.sql.DataSource, java.lang.String)",
            "public static <T> T extractDatabaseMetaData(javax.sql.DataSource, java.lang.String) throws org.springframework.jdbc.support.MetaDataAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.JdbcUtils.supportsBatchUpdates(java.sql.Connection)",
            "public static boolean supportsBatchUpdates(java.sql.Connection)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.JdbcUtils.commonDatabaseName(java.lang.String)",
            "public static java.lang.String commonDatabaseName(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.JdbcUtils.isNumeric(int)",
            "public static boolean isNumeric(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.JdbcUtils.resolveTypeName(int)",
            "public static java.lang.String resolveTypeName(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.JdbcUtils.lookupColumnName(java.sql.ResultSetMetaData, int)",
            "public static java.lang.String lookupColumnName(java.sql.ResultSetMetaData, int) throws java.sql.SQLException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.JdbcUtils.convertUnderscoreNameToPropertyName(java.lang.String)",
            "public static java.lang.String convertUnderscoreNameToPropertyName(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.JdbcAccessor",
            "org.springframework.jdbc.support.JdbcAccessor()",
            "public org.springframework.jdbc.support.JdbcAccessor()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcAccessor.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.jdbc.support.JdbcAccessor.getDataSource()",
            "public javax.sql.DataSource getDataSource()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcAccessor.setDatabaseProductName(java.lang.String)",
            "public void setDatabaseProductName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcAccessor.setExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)",
            "public void setExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)"
        ],
        [
            "org.springframework.jdbc.support.SQLExceptionTranslator",
            "org.springframework.jdbc.support.JdbcAccessor.getExceptionTranslator()",
            "public org.springframework.jdbc.support.SQLExceptionTranslator getExceptionTranslator()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcAccessor.setLazyInit(boolean)",
            "public void setLazyInit(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.JdbcAccessor.isLazyInit()",
            "public boolean isLazyInit()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcAccessor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet(java.sql.ResultSet)",
            "public org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet(java.sql.ResultSet) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.ResultSet",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getResultSet()",
            "public final java.sql.ResultSet getResultSet()"
        ],
        [
            "org.springframework.jdbc.support.rowset.SqlRowSetMetaData",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getMetaData()",
            "public final org.springframework.jdbc.support.rowset.SqlRowSetMetaData getMetaData()"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.findColumn(java.lang.String)",
            "public int findColumn(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.math.BigDecimal",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getBigDecimal(int)",
            "public java.math.BigDecimal getBigDecimal(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.math.BigDecimal",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getBigDecimal(java.lang.String)",
            "public java.math.BigDecimal getBigDecimal(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getBoolean(int)",
            "public boolean getBoolean(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getBoolean(java.lang.String)",
            "public boolean getBoolean(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "byte",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getByte(int)",
            "public byte getByte(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "byte",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getByte(java.lang.String)",
            "public byte getByte(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Date",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getDate(int)",
            "public java.sql.Date getDate(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Date",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getDate(java.lang.String)",
            "public java.sql.Date getDate(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Date",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getDate(int, java.util.Calendar)",
            "public java.sql.Date getDate(int, java.util.Calendar) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Date",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getDate(java.lang.String, java.util.Calendar)",
            "public java.sql.Date getDate(java.lang.String, java.util.Calendar) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "double",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getDouble(int)",
            "public double getDouble(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "double",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getDouble(java.lang.String)",
            "public double getDouble(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "float",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getFloat(int)",
            "public float getFloat(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "float",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getFloat(java.lang.String)",
            "public float getFloat(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getInt(int)",
            "public int getInt(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getInt(java.lang.String)",
            "public int getInt(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "long",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getLong(int)",
            "public long getLong(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "long",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getLong(java.lang.String)",
            "public long getLong(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getNString(int)",
            "public java.lang.String getNString(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getNString(java.lang.String)",
            "public java.lang.String getNString(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getObject(int)",
            "public java.lang.Object getObject(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getObject(java.lang.String)",
            "public java.lang.Object getObject(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getObject(int, java.util.Map<java.lang.String, java.lang.Class<?>>)",
            "public java.lang.Object getObject(int, java.util.Map<java.lang.String, java.lang.Class<?>>) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getObject(java.lang.String, java.util.Map<java.lang.String, java.lang.Class<?>>)",
            "public java.lang.Object getObject(java.lang.String, java.util.Map<java.lang.String, java.lang.Class<?>>) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getObject(int, java.lang.Class<T>)",
            "public <T> T getObject(int, java.lang.Class<T>) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getObject(java.lang.String, java.lang.Class<T>)",
            "public <T> T getObject(java.lang.String, java.lang.Class<T>) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "short",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getShort(int)",
            "public short getShort(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "short",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getShort(java.lang.String)",
            "public short getShort(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getString(int)",
            "public java.lang.String getString(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getString(java.lang.String)",
            "public java.lang.String getString(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Time",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getTime(int)",
            "public java.sql.Time getTime(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Time",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getTime(java.lang.String)",
            "public java.sql.Time getTime(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Time",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getTime(int, java.util.Calendar)",
            "public java.sql.Time getTime(int, java.util.Calendar) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Time",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getTime(java.lang.String, java.util.Calendar)",
            "public java.sql.Time getTime(java.lang.String, java.util.Calendar) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Timestamp",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getTimestamp(int)",
            "public java.sql.Timestamp getTimestamp(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Timestamp",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getTimestamp(java.lang.String)",
            "public java.sql.Timestamp getTimestamp(java.lang.String) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Timestamp",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getTimestamp(int, java.util.Calendar)",
            "public java.sql.Timestamp getTimestamp(int, java.util.Calendar) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.sql.Timestamp",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getTimestamp(java.lang.String, java.util.Calendar)",
            "public java.sql.Timestamp getTimestamp(java.lang.String, java.util.Calendar) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.absolute(int)",
            "public boolean absolute(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.afterLast()",
            "public void afterLast() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "void",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.beforeFirst()",
            "public void beforeFirst() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.first()",
            "public boolean first() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.getRow()",
            "public int getRow() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.isAfterLast()",
            "public boolean isAfterLast() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.isBeforeFirst()",
            "public boolean isBeforeFirst() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.isFirst()",
            "public boolean isFirst() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.isLast()",
            "public boolean isLast() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.last()",
            "public boolean last() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.next()",
            "public boolean next() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.previous()",
            "public boolean previous() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.relative(int)",
            "public boolean relative(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet.wasNull()",
            "public boolean wasNull() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData(java.sql.ResultSetMetaData)",
            "public org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData(java.sql.ResultSetMetaData)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getCatalogName(int)",
            "public java.lang.String getCatalogName(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getColumnClassName(int)",
            "public java.lang.String getColumnClassName(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getColumnCount()",
            "public int getColumnCount() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getColumnNames()",
            "public java.lang.String[] getColumnNames() throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getColumnDisplaySize(int)",
            "public int getColumnDisplaySize(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getColumnLabel(int)",
            "public java.lang.String getColumnLabel(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getColumnName(int)",
            "public java.lang.String getColumnName(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getColumnType(int)",
            "public int getColumnType(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getColumnTypeName(int)",
            "public java.lang.String getColumnTypeName(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getPrecision(int)",
            "public int getPrecision(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getScale(int)",
            "public int getScale(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getSchemaName(int)",
            "public java.lang.String getSchemaName(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.getTableName(int)",
            "public java.lang.String getTableName(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.isCaseSensitive(int)",
            "public boolean isCaseSensitive(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.isCurrency(int)",
            "public boolean isCurrency(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData.isSigned(int)",
            "public boolean isSigned(int) throws org.springframework.jdbc.InvalidResultSetAccessException"
        ],
        [
            "org.springframework.jdbc.support.JdbcTransactionManager",
            "org.springframework.jdbc.support.JdbcTransactionManager()",
            "public org.springframework.jdbc.support.JdbcTransactionManager()"
        ],
        [
            "org.springframework.jdbc.support.JdbcTransactionManager",
            "org.springframework.jdbc.support.JdbcTransactionManager(javax.sql.DataSource)",
            "public org.springframework.jdbc.support.JdbcTransactionManager(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcTransactionManager.setDatabaseProductName(java.lang.String)",
            "public void setDatabaseProductName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcTransactionManager.setExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)",
            "public void setExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator)"
        ],
        [
            "org.springframework.jdbc.support.SQLExceptionTranslator",
            "org.springframework.jdbc.support.JdbcTransactionManager.getExceptionTranslator()",
            "public org.springframework.jdbc.support.SQLExceptionTranslator getExceptionTranslator()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcTransactionManager.setLazyInit(boolean)",
            "public void setLazyInit(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.support.JdbcTransactionManager.isLazyInit()",
            "public boolean isLazyInit()"
        ],
        [
            "void",
            "org.springframework.jdbc.support.JdbcTransactionManager.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jdbc.support.GeneratedKeyHolder",
            "org.springframework.jdbc.support.GeneratedKeyHolder()",
            "public org.springframework.jdbc.support.GeneratedKeyHolder()"
        ],
        [
            "org.springframework.jdbc.support.GeneratedKeyHolder",
            "org.springframework.jdbc.support.GeneratedKeyHolder(java.util.List<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.jdbc.support.GeneratedKeyHolder(java.util.List<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "java.lang.Number",
            "org.springframework.jdbc.support.GeneratedKeyHolder.getKey()",
            "public java.lang.Number getKey() throws org.springframework.dao.InvalidDataAccessApiUsageException, org.springframework.dao.DataRetrievalFailureException"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.support.GeneratedKeyHolder.getKeyAs(java.lang.Class<T>)",
            "public <T> T getKeyAs(java.lang.Class<T>) throws org.springframework.dao.InvalidDataAccessApiUsageException, org.springframework.dao.DataRetrievalFailureException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.support.GeneratedKeyHolder.getKeys()",
            "public java.util.Map<java.lang.String, java.lang.Object> getKeys() throws org.springframework.dao.InvalidDataAccessApiUsageException"
        ],
        [
            "java.util.List<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.jdbc.support.GeneratedKeyHolder.getKeyList()",
            "public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getKeyList()"
        ],
        [
            "org.springframework.jdbc.support.SQLExceptionSubclassTranslator",
            "org.springframework.jdbc.support.SQLExceptionSubclassTranslator()",
            "public org.springframework.jdbc.support.SQLExceptionSubclassTranslator()"
        ],
        [
            "org.springframework.jdbc.support.SQLStateSQLExceptionTranslator",
            "org.springframework.jdbc.support.SQLStateSQLExceptionTranslator()",
            "public org.springframework.jdbc.support.SQLStateSQLExceptionTranslator()"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator",
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator()",
            "public org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator()"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator",
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator(javax.sql.DataSource)",
            "public org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator(javax.sql.DataSource)"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator",
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator(java.lang.String)",
            "public org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator",
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator(org.springframework.jdbc.support.SQLErrorCodes)",
            "public org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator(org.springframework.jdbc.support.SQLErrorCodes)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.setDatabaseProductName(java.lang.String)",
            "public void setDatabaseProductName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.setSqlErrorCodes(org.springframework.jdbc.support.SQLErrorCodes)",
            "public void setSqlErrorCodes(org.springframework.jdbc.support.SQLErrorCodes)"
        ],
        [
            "org.springframework.jdbc.support.SQLErrorCodes",
            "org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.getSqlErrorCodes()",
            "public org.springframework.jdbc.support.SQLErrorCodes getSqlErrorCodes()"
        ],
        [
            "org.springframework.jdbc.UncategorizedSQLException",
            "org.springframework.jdbc.UncategorizedSQLException(java.lang.String, java.lang.String, java.sql.SQLException)",
            "public org.springframework.jdbc.UncategorizedSQLException(java.lang.String, java.lang.String, java.sql.SQLException)"
        ],
        [
            "java.sql.SQLException",
            "org.springframework.jdbc.UncategorizedSQLException.getSQLException()",
            "public java.sql.SQLException getSQLException()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.UncategorizedSQLException.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException",
            "org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException(java.lang.String, int, int)",
            "public org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException(java.lang.String, int, int)"
        ],
        [
            "int",
            "org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException.getExpectedRowsAffected()",
            "public int getExpectedRowsAffected()"
        ],
        [
            "int",
            "org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException.getActualRowsAffected()",
            "public int getActualRowsAffected()"
        ],
        [
            "boolean",
            "org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException.wasDataUpdated()",
            "public boolean wasDataUpdated()"
        ],
        [
            "org.springframework.jdbc.BadSqlGrammarException",
            "org.springframework.jdbc.BadSqlGrammarException(java.lang.String, java.lang.String, java.sql.SQLException)",
            "public org.springframework.jdbc.BadSqlGrammarException(java.lang.String, java.lang.String, java.sql.SQLException)"
        ],
        [
            "java.sql.SQLException",
            "org.springframework.jdbc.BadSqlGrammarException.getSQLException()",
            "public java.sql.SQLException getSQLException()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.BadSqlGrammarException.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "org.springframework.jdbc.object.GenericStoredProcedure",
            "org.springframework.jdbc.object.GenericStoredProcedure()",
            "public org.springframework.jdbc.object.GenericStoredProcedure()"
        ],
        [
            "org.springframework.jdbc.object.SqlOperation",
            "org.springframework.jdbc.object.SqlOperation()",
            "public org.springframework.jdbc.object.SqlOperation()"
        ],
        [
            "org.springframework.jdbc.object.MappingSqlQueryWithParameters$RowMapperImpl",
            "org.springframework.jdbc.object.MappingSqlQueryWithParameters$RowMapperImpl(java.lang.Object[], java.util.Map<?, ?>)",
            "public org.springframework.jdbc.object.MappingSqlQueryWithParameters$RowMapperImpl(java.lang.Object[], java.util.Map<?, ?>)"
        ],
        [
            "T",
            "org.springframework.jdbc.object.MappingSqlQueryWithParameters$RowMapperImpl.mapRow(java.sql.ResultSet, int)",
            "public T mapRow(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.object.SqlFunction",
            "org.springframework.jdbc.object.SqlFunction()",
            "public org.springframework.jdbc.object.SqlFunction()"
        ],
        [
            "org.springframework.jdbc.object.SqlFunction",
            "org.springframework.jdbc.object.SqlFunction(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.object.SqlFunction(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.object.SqlFunction",
            "org.springframework.jdbc.object.SqlFunction(javax.sql.DataSource, java.lang.String, int[])",
            "public org.springframework.jdbc.object.SqlFunction(javax.sql.DataSource, java.lang.String, int[])"
        ],
        [
            "org.springframework.jdbc.object.SqlFunction",
            "org.springframework.jdbc.object.SqlFunction(javax.sql.DataSource, java.lang.String, int[], java.lang.Class<T>)",
            "public org.springframework.jdbc.object.SqlFunction(javax.sql.DataSource, java.lang.String, int[], java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.SqlFunction.setResultType(java.lang.Class<T>)",
            "public void setResultType(java.lang.Class<T>)"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlFunction.run()",
            "public int run()"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlFunction.run(int)",
            "public int run(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlFunction.run(java.lang.Object...)",
            "public int run(java.lang.Object...)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.object.SqlFunction.runGeneric()",
            "public java.lang.Object runGeneric()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.object.SqlFunction.runGeneric(int)",
            "public java.lang.Object runGeneric(int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jdbc.object.SqlFunction.runGeneric(java.lang.Object[])",
            "public java.lang.Object runGeneric(java.lang.Object[])"
        ],
        [
            "org.springframework.jdbc.object.GenericSqlQuery",
            "org.springframework.jdbc.object.GenericSqlQuery()",
            "public org.springframework.jdbc.object.GenericSqlQuery()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.GenericSqlQuery.setRowMapper(org.springframework.jdbc.core.RowMapper<T>)",
            "public void setRowMapper(org.springframework.jdbc.core.RowMapper<T>)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.GenericSqlQuery.setRowMapperClass(java.lang.Class<? extends org.springframework.jdbc.core.RowMapper>)",
            "public void setRowMapperClass(java.lang.Class<? extends org.springframework.jdbc.core.RowMapper>)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.GenericSqlQuery.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jdbc.object.MappingSqlQueryWithParameters",
            "org.springframework.jdbc.object.MappingSqlQueryWithParameters()",
            "public org.springframework.jdbc.object.MappingSqlQueryWithParameters()"
        ],
        [
            "org.springframework.jdbc.object.MappingSqlQueryWithParameters",
            "org.springframework.jdbc.object.MappingSqlQueryWithParameters(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.object.MappingSqlQueryWithParameters(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.object.SqlQuery",
            "org.springframework.jdbc.object.SqlQuery()",
            "public org.springframework.jdbc.object.SqlQuery()"
        ],
        [
            "org.springframework.jdbc.object.SqlQuery",
            "org.springframework.jdbc.object.SqlQuery(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.object.SqlQuery(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.SqlQuery.setRowsExpected(int)",
            "public void setRowsExpected(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlQuery.getRowsExpected()",
            "public int getRowsExpected()"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(java.lang.Object[], java.util.Map<?, ?>)",
            "public java.util.List<T> execute(java.lang.Object[], java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(java.lang.Object...)",
            "public java.util.List<T> execute(java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(java.util.Map<?, ?>)",
            "public java.util.List<T> execute(java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute()",
            "public java.util.List<T> execute() throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(int, java.util.Map<?, ?>)",
            "public java.util.List<T> execute(int, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(int)",
            "public java.util.List<T> execute(int) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(int, int, java.util.Map<?, ?>)",
            "public java.util.List<T> execute(int, int, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(int, int)",
            "public java.util.List<T> execute(int, int) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(long, java.util.Map<?, ?>)",
            "public java.util.List<T> execute(long, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(long)",
            "public java.util.List<T> execute(long) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(java.lang.String, java.util.Map<?, ?>)",
            "public java.util.List<T> execute(java.lang.String, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.execute(java.lang.String)",
            "public java.util.List<T> execute(java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.executeByNamedParam(java.util.Map<java.lang.String, ?>, java.util.Map<?, ?>)",
            "public java.util.List<T> executeByNamedParam(java.util.Map<java.lang.String, ?>, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.List<T>",
            "org.springframework.jdbc.object.SqlQuery.executeByNamedParam(java.util.Map<java.lang.String, ?>)",
            "public java.util.List<T> executeByNamedParam(java.util.Map<java.lang.String, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(java.lang.Object[], java.util.Map<?, ?>)",
            "public T findObject(java.lang.Object[], java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(java.lang.Object...)",
            "public T findObject(java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(int, java.util.Map<?, ?>)",
            "public T findObject(int, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(int)",
            "public T findObject(int) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(int, int, java.util.Map<?, ?>)",
            "public T findObject(int, int, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(int, int)",
            "public T findObject(int, int) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(long, java.util.Map<?, ?>)",
            "public T findObject(long, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(long)",
            "public T findObject(long) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(java.lang.String, java.util.Map<?, ?>)",
            "public T findObject(java.lang.String, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObject(java.lang.String)",
            "public T findObject(java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObjectByNamedParam(java.util.Map<java.lang.String, ?>, java.util.Map<?, ?>)",
            "public T findObjectByNamedParam(java.util.Map<java.lang.String, ?>, java.util.Map<?, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "T",
            "org.springframework.jdbc.object.SqlQuery.findObjectByNamedParam(java.util.Map<java.lang.String, ?>)",
            "public T findObjectByNamedParam(java.util.Map<java.lang.String, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.object.MappingSqlQuery",
            "org.springframework.jdbc.object.MappingSqlQuery()",
            "public org.springframework.jdbc.object.MappingSqlQuery()"
        ],
        [
            "org.springframework.jdbc.object.MappingSqlQuery",
            "org.springframework.jdbc.object.MappingSqlQuery(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.object.MappingSqlQuery(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.object.BatchSqlUpdate",
            "org.springframework.jdbc.object.BatchSqlUpdate()",
            "public org.springframework.jdbc.object.BatchSqlUpdate()"
        ],
        [
            "org.springframework.jdbc.object.BatchSqlUpdate",
            "org.springframework.jdbc.object.BatchSqlUpdate(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.object.BatchSqlUpdate(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.object.BatchSqlUpdate",
            "org.springframework.jdbc.object.BatchSqlUpdate(javax.sql.DataSource, java.lang.String, int[])",
            "public org.springframework.jdbc.object.BatchSqlUpdate(javax.sql.DataSource, java.lang.String, int[])"
        ],
        [
            "org.springframework.jdbc.object.BatchSqlUpdate",
            "org.springframework.jdbc.object.BatchSqlUpdate(javax.sql.DataSource, java.lang.String, int[], int)",
            "public org.springframework.jdbc.object.BatchSqlUpdate(javax.sql.DataSource, java.lang.String, int[], int)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.BatchSqlUpdate.setBatchSize(int)",
            "public void setBatchSize(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.BatchSqlUpdate.setTrackRowsAffected(boolean)",
            "public void setTrackRowsAffected(boolean)"
        ],
        [
            "int",
            "org.springframework.jdbc.object.BatchSqlUpdate.update(java.lang.Object...)",
            "public int update(java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int[]",
            "org.springframework.jdbc.object.BatchSqlUpdate.flush()",
            "public int[] flush()"
        ],
        [
            "int",
            "org.springframework.jdbc.object.BatchSqlUpdate.getQueueCount()",
            "public int getQueueCount()"
        ],
        [
            "int",
            "org.springframework.jdbc.object.BatchSqlUpdate.getExecutionCount()",
            "public int getExecutionCount()"
        ],
        [
            "int[]",
            "org.springframework.jdbc.object.BatchSqlUpdate.getRowsAffected()",
            "public int[] getRowsAffected()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.BatchSqlUpdate.reset()",
            "public void reset()"
        ],
        [
            "org.springframework.jdbc.object.UpdatableSqlQuery$RowMapperImpl",
            "org.springframework.jdbc.object.UpdatableSqlQuery$RowMapperImpl(java.util.Map<?, ?>)",
            "public org.springframework.jdbc.object.UpdatableSqlQuery$RowMapperImpl(java.util.Map<?, ?>)"
        ],
        [
            "T",
            "org.springframework.jdbc.object.UpdatableSqlQuery$RowMapperImpl.mapRow(java.sql.ResultSet, int)",
            "public T mapRow(java.sql.ResultSet, int) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.object.UpdatableSqlQuery",
            "org.springframework.jdbc.object.UpdatableSqlQuery()",
            "public org.springframework.jdbc.object.UpdatableSqlQuery()"
        ],
        [
            "org.springframework.jdbc.object.UpdatableSqlQuery",
            "org.springframework.jdbc.object.UpdatableSqlQuery(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.object.UpdatableSqlQuery(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.StoredProcedure.declareParameter(org.springframework.jdbc.core.SqlParameter)",
            "public void declareParameter(org.springframework.jdbc.core.SqlParameter) throws org.springframework.dao.InvalidDataAccessApiUsageException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.object.StoredProcedure.execute(java.lang.Object...)",
            "public java.util.Map<java.lang.String, java.lang.Object> execute(java.lang.Object...)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.object.StoredProcedure.execute(java.util.Map<java.lang.String, ?>)",
            "public java.util.Map<java.lang.String, java.lang.Object> execute(java.util.Map<java.lang.String, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.jdbc.object.StoredProcedure.execute(org.springframework.jdbc.core.ParameterMapper)",
            "public java.util.Map<java.lang.String, java.lang.Object> execute(org.springframework.jdbc.core.ParameterMapper) throws org.springframework.dao.DataAccessException"
        ],
        [
            "org.springframework.jdbc.object.SqlCall",
            "org.springframework.jdbc.object.SqlCall()",
            "public org.springframework.jdbc.object.SqlCall()"
        ],
        [
            "org.springframework.jdbc.object.SqlCall",
            "org.springframework.jdbc.object.SqlCall(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.object.SqlCall(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.SqlCall.setFunction(boolean)",
            "public void setFunction(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.object.SqlCall.isFunction()",
            "public boolean isFunction()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.SqlCall.setSqlReadyForUse(boolean)",
            "public void setSqlReadyForUse(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.object.SqlCall.isSqlReadyForUse()",
            "public boolean isSqlReadyForUse()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.object.SqlCall.getCallString()",
            "public java.lang.String getCallString()"
        ],
        [
            "org.springframework.jdbc.object.RdbmsOperation",
            "org.springframework.jdbc.object.RdbmsOperation()",
            "public org.springframework.jdbc.object.RdbmsOperation()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)",
            "public void setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)"
        ],
        [
            "org.springframework.jdbc.core.JdbcTemplate",
            "org.springframework.jdbc.object.RdbmsOperation.getJdbcTemplate()",
            "public org.springframework.jdbc.core.JdbcTemplate getJdbcTemplate()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setFetchSize(int)",
            "public void setFetchSize(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setMaxRows(int)",
            "public void setMaxRows(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setQueryTimeout(int)",
            "public void setQueryTimeout(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setResultSetType(int)",
            "public void setResultSetType(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.object.RdbmsOperation.getResultSetType()",
            "public int getResultSetType()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setUpdatableResults(boolean)",
            "public void setUpdatableResults(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.object.RdbmsOperation.isUpdatableResults()",
            "public boolean isUpdatableResults()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setReturnGeneratedKeys(boolean)",
            "public void setReturnGeneratedKeys(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jdbc.object.RdbmsOperation.isReturnGeneratedKeys()",
            "public boolean isReturnGeneratedKeys()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setGeneratedKeysColumnNames(java.lang.String...)",
            "public void setGeneratedKeysColumnNames(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jdbc.object.RdbmsOperation.getGeneratedKeysColumnNames()",
            "public java.lang.String[] getGeneratedKeysColumnNames()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setSql(java.lang.String)",
            "public void setSql(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.object.RdbmsOperation.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setTypes(int[])",
            "public void setTypes(int[]) throws org.springframework.dao.InvalidDataAccessApiUsageException"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.declareParameter(org.springframework.jdbc.core.SqlParameter)",
            "public void declareParameter(org.springframework.jdbc.core.SqlParameter) throws org.springframework.dao.InvalidDataAccessApiUsageException"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.setParameters(org.springframework.jdbc.core.SqlParameter...)",
            "public void setParameters(org.springframework.jdbc.core.SqlParameter...)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.RdbmsOperation.compile()",
            "public final void compile() throws org.springframework.dao.InvalidDataAccessApiUsageException"
        ],
        [
            "boolean",
            "org.springframework.jdbc.object.RdbmsOperation.isCompiled()",
            "public boolean isCompiled()"
        ],
        [
            "org.springframework.jdbc.object.SqlUpdate",
            "org.springframework.jdbc.object.SqlUpdate()",
            "public org.springframework.jdbc.object.SqlUpdate()"
        ],
        [
            "org.springframework.jdbc.object.SqlUpdate",
            "org.springframework.jdbc.object.SqlUpdate(javax.sql.DataSource, java.lang.String)",
            "public org.springframework.jdbc.object.SqlUpdate(javax.sql.DataSource, java.lang.String)"
        ],
        [
            "org.springframework.jdbc.object.SqlUpdate",
            "org.springframework.jdbc.object.SqlUpdate(javax.sql.DataSource, java.lang.String, int[])",
            "public org.springframework.jdbc.object.SqlUpdate(javax.sql.DataSource, java.lang.String, int[])"
        ],
        [
            "org.springframework.jdbc.object.SqlUpdate",
            "org.springframework.jdbc.object.SqlUpdate(javax.sql.DataSource, java.lang.String, int[], int)",
            "public org.springframework.jdbc.object.SqlUpdate(javax.sql.DataSource, java.lang.String, int[], int)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.SqlUpdate.setMaxRowsAffected(int)",
            "public void setMaxRowsAffected(int)"
        ],
        [
            "void",
            "org.springframework.jdbc.object.SqlUpdate.setRequiredRowsAffected(int)",
            "public void setRequiredRowsAffected(int)"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update(java.lang.Object...)",
            "public int update(java.lang.Object...) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update(java.lang.Object[], org.springframework.jdbc.support.KeyHolder)",
            "public int update(java.lang.Object[], org.springframework.jdbc.support.KeyHolder) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update()",
            "public int update() throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update(int)",
            "public int update(int) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update(int, int)",
            "public int update(int, int) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update(long)",
            "public int update(long) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update(long, long)",
            "public int update(long, long) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update(java.lang.String)",
            "public int update(java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.update(java.lang.String, java.lang.String)",
            "public int update(java.lang.String, java.lang.String) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.updateByNamedParam(java.util.Map<java.lang.String, ?>)",
            "public int updateByNamedParam(java.util.Map<java.lang.String, ?>) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.SqlUpdate.updateByNamedParam(java.util.Map<java.lang.String, ?>, org.springframework.jdbc.support.KeyHolder)",
            "public int updateByNamedParam(java.util.Map<java.lang.String, ?>, org.springframework.jdbc.support.KeyHolder) throws org.springframework.dao.DataAccessException"
        ],
        [
            "int",
            "org.springframework.jdbc.object.BatchSqlUpdate$1.getBatchSize()",
            "public int getBatchSize()"
        ],
        [
            "void",
            "org.springframework.jdbc.object.BatchSqlUpdate$1.setValues(java.sql.PreparedStatement, int)",
            "public void setValues(java.sql.PreparedStatement, int) throws java.sql.SQLException"
        ],
        [
            "org.springframework.jdbc.SQLWarningException",
            "org.springframework.jdbc.SQLWarningException(java.lang.String, java.sql.SQLWarning)",
            "public org.springframework.jdbc.SQLWarningException(java.lang.String, java.sql.SQLWarning)"
        ],
        [
            "java.sql.SQLWarning",
            "org.springframework.jdbc.SQLWarningException.SQLWarning()",
            "public java.sql.SQLWarning SQLWarning()"
        ],
        [
            "org.springframework.jdbc.LobRetrievalFailureException",
            "org.springframework.jdbc.LobRetrievalFailureException(java.lang.String)",
            "public org.springframework.jdbc.LobRetrievalFailureException(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.LobRetrievalFailureException",
            "org.springframework.jdbc.LobRetrievalFailureException(java.lang.String, java.io.IOException)",
            "public org.springframework.jdbc.LobRetrievalFailureException(java.lang.String, java.io.IOException)"
        ],
        [
            "org.springframework.jdbc.InvalidResultSetAccessException",
            "org.springframework.jdbc.InvalidResultSetAccessException(java.lang.String, java.lang.String, java.sql.SQLException)",
            "public org.springframework.jdbc.InvalidResultSetAccessException(java.lang.String, java.lang.String, java.sql.SQLException)"
        ],
        [
            "org.springframework.jdbc.InvalidResultSetAccessException",
            "org.springframework.jdbc.InvalidResultSetAccessException(java.sql.SQLException)",
            "public org.springframework.jdbc.InvalidResultSetAccessException(java.sql.SQLException)"
        ],
        [
            "java.sql.SQLException",
            "org.springframework.jdbc.InvalidResultSetAccessException.getSQLException()",
            "public java.sql.SQLException getSQLException()"
        ],
        [
            "java.lang.String",
            "org.springframework.jdbc.InvalidResultSetAccessException.getSql()",
            "public java.lang.String getSql()"
        ],
        [
            "org.springframework.jdbc.IncorrectResultSetColumnCountException",
            "org.springframework.jdbc.IncorrectResultSetColumnCountException(int, int)",
            "public org.springframework.jdbc.IncorrectResultSetColumnCountException(int, int)"
        ],
        [
            "org.springframework.jdbc.IncorrectResultSetColumnCountException",
            "org.springframework.jdbc.IncorrectResultSetColumnCountException(java.lang.String, int, int)",
            "public org.springframework.jdbc.IncorrectResultSetColumnCountException(java.lang.String, int, int)"
        ],
        [
            "int",
            "org.springframework.jdbc.IncorrectResultSetColumnCountException.getExpectedCount()",
            "public int getExpectedCount()"
        ],
        [
            "int",
            "org.springframework.jdbc.IncorrectResultSetColumnCountException.getActualCount()",
            "public int getActualCount()"
        ],
        [
            "org.springframework.jdbc.CannotGetJdbcConnectionException",
            "org.springframework.jdbc.CannotGetJdbcConnectionException(java.lang.String)",
            "public org.springframework.jdbc.CannotGetJdbcConnectionException(java.lang.String)"
        ],
        [
            "org.springframework.jdbc.CannotGetJdbcConnectionException",
            "org.springframework.jdbc.CannotGetJdbcConnectionException(java.lang.String, java.sql.SQLException)",
            "public org.springframework.jdbc.CannotGetJdbcConnectionException(java.lang.String, java.sql.SQLException)"
        ],
        [
            "T",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt$queryForObject$1.mapRow(java.sql.ResultSet, int)",
            "public final T mapRow(java.sql.ResultSet, int)"
        ],
        [
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt$queryForObject$1",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt$queryForObject$1(kotlin.jvm.functions.Function2)",
            "public org.springframework.jdbc.core.JdbcOperationsExtensionsKt$queryForObject$1(kotlin.jvm.functions.Function2)"
        ],
        [
            "T",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt$query$3.mapRow(java.sql.ResultSet, int)",
            "public final T mapRow(java.sql.ResultSet, int)"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.queryForObject(org.springframework.jdbc.core.JdbcOperations, java.lang.String)",
            "public static final <T> T queryForObject(org.springframework.jdbc.core.JdbcOperations, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.queryForObject(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function2<? super java.sql.ResultSet, ? super java.lang.Integer, ? extends T>)",
            "public static final <T> T queryForObject(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function2<? super java.sql.ResultSet, ? super java.lang.Integer, ? extends T>)"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.queryForObject(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], int[])",
            "public static final <T> T queryForObject(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], int[])"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.queryForObject(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[])",
            "public static final <T> T queryForObject(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[])"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.queryForList(org.springframework.jdbc.core.JdbcOperations, java.lang.String)",
            "public static final <T> java.util.List<T> queryForList(org.springframework.jdbc.core.JdbcOperations, java.lang.String)"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.queryForList(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], int[])",
            "public static final <T> java.util.List<T> queryForList(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], int[])"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.queryForList(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[])",
            "public static final <T> java.util.List<T> queryForList(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[])"
        ],
        [
            "<T> T",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.query(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super java.sql.ResultSet, ? extends T>)",
            "public static final <T> T query(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super java.sql.ResultSet, ? extends T>)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.query(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super java.sql.ResultSet, kotlin.Unit>)",
            "public static final void query(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super java.sql.ResultSet, kotlin.Unit>)"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt.query(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function2<? super java.sql.ResultSet, ? super java.lang.Integer, ? extends T>)",
            "public static final <T> java.util.List<T> query(org.springframework.jdbc.core.JdbcOperations, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function2<? super java.sql.ResultSet, ? super java.lang.Integer, ? extends T>)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSourceExtensionsKt.set(org.springframework.jdbc.core.namedparam.MapSqlParameterSource, java.lang.String, java.lang.Object)",
            "public static final void set(org.springframework.jdbc.core.namedparam.MapSqlParameterSource, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSourceExtensionsKt.set(org.springframework.jdbc.core.namedparam.MapSqlParameterSource, java.lang.String, int, java.lang.Object)",
            "public static final void set(org.springframework.jdbc.core.namedparam.MapSqlParameterSource, java.lang.String, int, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.namedparam.MapSqlParameterSourceExtensionsKt.set(org.springframework.jdbc.core.namedparam.MapSqlParameterSource, java.lang.String, int, java.lang.String, java.lang.Object)",
            "public static final void set(org.springframework.jdbc.core.namedparam.MapSqlParameterSource, java.lang.String, int, java.lang.String, java.lang.Object)"
        ],
        [
            "T",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt$query$1.extractData(java.sql.ResultSet)",
            "public final T extractData(java.sql.ResultSet)"
        ],
        [
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt$query$1",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt$query$1(kotlin.jvm.functions.Function1)",
            "public org.springframework.jdbc.core.JdbcOperationsExtensionsKt$query$1(kotlin.jvm.functions.Function1)"
        ],
        [
            "void",
            "org.springframework.jdbc.core.JdbcOperationsExtensionsKt$query$2.processRow(java.sql.ResultSet)",
            "public final void processRow(java.sql.ResultSet)"
        ]
    ]
}