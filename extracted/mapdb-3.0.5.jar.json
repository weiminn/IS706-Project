{"mapdb-3.0.5.jar": [["void", "org.mapdb.AbstractMutableLongCollection$collect$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$hashCode$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$reject$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$select$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$sum$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$toArray$1.value(long)", "public final void value(long)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.allSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public boolean allSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["void", "org.mapdb.AbstractMutableLongCollection.appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)", "public void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)"], ["long[]", "org.mapdb.AbstractMutableLongCollection.toArray()", "public long[] toArray()"], ["long", "org.mapdb.AbstractMutableLongCollection.sum()", "public long sum()"], ["boolean", "org.mapdb.AbstractMutableLongCollection.noneSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public boolean noneSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["<T> T", "org.mapdb.AbstractMutableLongCollection.injectInto(T, org.eclipse.collections.api.block.function.primitive.ObjectLongToObjectFunction<? super T, ? extends T>)", "public <T> T injectInto(T, org.eclipse.collections.api.block.function.primitive.ObjectLongToObjectFunction<? super T, ? extends T>)"], ["void", "org.mapdb.AbstractMutableLongCollection.each(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)", "public void each(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["long", "org.mapdb.AbstractMutableLongCollection.detectIfNone(org.eclipse.collections.api.block.predicate.primitive.LongPredicate, long)", "public long detectIfNone(org.eclipse.collections.api.block.predicate.primitive.LongPredicate, long)"], ["int", "org.mapdb.AbstractMutableLongCollection.count(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public int count(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.anySatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public boolean anySatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["<V> org.eclipse.collections.api.set.MutableSet<V>", "org.mapdb.AbstractMutableLongCollection.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction<? extends V>)", "public <V> org.eclipse.collections.api.set.MutableSet<V> collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction<? extends V>)"], ["org.eclipse.collections.api.RichIterable", "org.mapdb.AbstractMutableLongCollection.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)", "public org.eclipse.collections.api.RichIterable collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)"], ["org.eclipse.collections.api.collection.MutableCollection", "org.mapdb.AbstractMutableLongCollection.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)", "public org.eclipse.collections.api.collection.MutableCollection collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.set.primitive.MutableLongSet reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.LongIterable", "org.mapdb.AbstractMutableLongCollection.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.LongIterable reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.set.primitive.MutableLongSet select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.LongIterable", "org.mapdb.AbstractMutableLongCollection.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.LongIterable select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.add(long)", "public boolean add(long)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.addAll(long...)", "public boolean addAll(long...)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.addAll(org.eclipse.collections.api.LongIterable)", "public boolean addAll(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.with(long)", "public org.eclipse.collections.api.set.primitive.MutableLongSet with(long)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.with(long)", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection with(long)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.without(long)", "public org.eclipse.collections.api.set.primitive.MutableLongSet without(long)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.without(long)", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection without(long)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.withAll(org.eclipse.collections.api.LongIterable)", "public org.eclipse.collections.api.set.primitive.MutableLongSet withAll(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.withAll(org.eclipse.collections.api.LongIterable)", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection withAll(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.withoutAll(org.eclipse.collections.api.LongIterable)", "public org.eclipse.collections.api.set.primitive.MutableLongSet withoutAll(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.withoutAll(org.eclipse.collections.api.LongIterable)", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection withoutAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.AbstractMutableLongCollection.hashCode()", "public int hashCode()"], ["org.mapdb.AbstractMutableLongCollection", "org.mapdb.AbstractMutableLongCollection()", "public org.mapdb.AbstractMutableLongCollection()"], ["org.mapdb.Atomic$Boolean", "org.mapdb.Atomic$Boolean(org.mapdb.Store, long)", "public org.mapdb.Atomic$Boolean(org.mapdb.Store, long)"], ["long", "org.mapdb.Atomic$Boolean.getRecid()", "public long getRecid()"], ["boolean", "org.mapdb.Atomic$Boolean.get()", "public final boolean get()"], ["boolean", "org.mapdb.Atomic$Boolean.compareAndSet(boolean, boolean)", "public final boolean compareAndSet(boolean, boolean)"], ["void", "org.mapdb.Atomic$Boolean.set(boolean)", "public final void set(boolean)"], ["boolean", "org.mapdb.Atomic$Boolean.getAndSet(boolean)", "public final boolean getAndSet(boolean)"], ["java.lang.String", "org.mapdb.Atomic$Boolean.toString()", "public java.lang.String toString()"], ["org.mapdb.Atomic$Integer", "org.mapdb.Atomic$Integer(org.mapdb.Store, long)", "public org.mapdb.Atomic$Integer(org.mapdb.Store, long)"], ["long", "org.mapdb.Atomic$Integer.getRecid()", "public long getRecid()"], ["int", "org.mapdb.Atomic$Integer.get()", "public final int get()"], ["void", "org.mapdb.Atomic$Integer.set(int)", "public final void set(int)"], ["int", "org.mapdb.Atomic$Integer.getAndSet(int)", "public final int getAndSet(int)"], ["boolean", "org.mapdb.Atomic$Integer.compareAndSet(int, int)", "public final boolean compareAndSet(int, int)"], ["int", "org.mapdb.Atomic$Integer.getAndIncrement()", "public final int getAndIncrement()"], ["int", "org.mapdb.Atomic$Integer.getAndDecrement()", "public final int getAndDecrement()"], ["int", "org.mapdb.Atomic$Integer.getAndAdd(int)", "public final int getAndAdd(int)"], ["int", "org.mapdb.Atomic$Integer.incrementAndGet()", "public final int incrementAndGet()"], ["int", "org.mapdb.Atomic$Integer.decrementAndGet()", "public final int decrementAndGet()"], ["int", "org.mapdb.Atomic$Integer.addAndGet(int)", "public final int addAndGet(int)"], ["java.lang.String", "org.mapdb.Atomic$Integer.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.Atomic$Integer.intValue()", "public int intValue()"], ["long", "org.mapdb.Atomic$Integer.longValue()", "public long longValue()"], ["float", "org.mapdb.Atomic$Integer.floatValue()", "public float floatValue()"], ["double", "org.mapdb.Atomic$Integer.doubleValue()", "public double doubleValue()"], ["org.mapdb.Atomic$Long", "org.mapdb.Atomic$Long(org.mapdb.Store, long)", "public org.mapdb.Atomic$Long(org.mapdb.Store, long)"], ["long", "org.mapdb.Atomic$Long.getRecid()", "public long getRecid()"], ["long", "org.mapdb.Atomic$Long.get()", "public final long get()"], ["void", "org.mapdb.Atomic$Long.set(long)", "public final void set(long)"], ["long", "org.mapdb.Atomic$Long.getAndSet(long)", "public final long getAndSet(long)"], ["boolean", "org.mapdb.Atomic$Long.compareAndSet(long, long)", "public final boolean compareAndSet(long, long)"], ["long", "org.mapdb.Atomic$Long.getAndIncrement()", "public final long getAndIncrement()"], ["long", "org.mapdb.Atomic$Long.getAndDecrement()", "public final long getAndDecrement()"], ["long", "org.mapdb.Atomic$Long.getAndAdd(long)", "public final long getAndAdd(long)"], ["long", "org.mapdb.Atomic$Long.incrementAndGet()", "public final long incrementAndGet()"], ["long", "org.mapdb.Atomic$Long.decrementAndGet()", "public final long decrementAndGet()"], ["long", "org.mapdb.Atomic$Long.addAndGet(long)", "public final long addAndGet(long)"], ["java.lang.String", "org.mapdb.Atomic$Long.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.Atomic$Long.intValue()", "public int intValue()"], ["long", "org.mapdb.Atomic$Long.longValue()", "public long longValue()"], ["float", "org.mapdb.Atomic$Long.floatValue()", "public float floatValue()"], ["double", "org.mapdb.Atomic$Long.doubleValue()", "public double doubleValue()"], ["org.mapdb.Atomic$String", "org.mapdb.Atomic$String(org.mapdb.Store, long)", "public org.mapdb.Atomic$String(org.mapdb.Store, long)"], ["long", "org.mapdb.Atomic$String.getRecid()", "public long getRecid()"], ["java.lang.String", "org.mapdb.Atomic$String.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.mapdb.Atomic$String.get()", "public final java.lang.String get()"], ["boolean", "org.mapdb.Atomic$String.compareAndSet(java.lang.String, java.lang.String)", "public final boolean compareAndSet(java.lang.String, java.lang.String)"], ["void", "org.mapdb.Atomic$String.set(java.lang.String)", "public final void set(java.lang.String)"], ["java.lang.String", "org.mapdb.Atomic$String.getAndSet(java.lang.String)", "public final java.lang.String getAndSet(java.lang.String)"], ["org.mapdb.Atomic$Var", "org.mapdb.Atomic$Var(org.mapdb.Store, long, org.mapdb.Serializer<E>)", "public org.mapdb.Atomic$Var(org.mapdb.Store, long, org.mapdb.Serializer<E>)"], ["long", "org.mapdb.Atomic$Var.getRecid()", "public long getRecid()"], ["java.lang.String", "org.mapdb.Atomic$Var.toString()", "public java.lang.String toString()"], ["E", "org.mapdb.Atomic$Var.get()", "public final E get()"], ["boolean", "org.mapdb.Atomic$Var.compareAndSet(E, E)", "public final boolean compareAndSet(E, E)"], ["void", "org.mapdb.Atomic$Var.set(E)", "public final void set(E)"], ["E", "org.mapdb.Atomic$Var.getAndSet(E)", "public final E getAndSet(E)"], ["boolean", "org.mapdb.BTreeMap$BTreeBoundIterator.hasNext()", "public final boolean hasNext()"], ["void", "org.mapdb.BTreeMap$BTreeBoundIterator.remove()", "public final void remove()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$BTreeBoundIterator.getM()", "public final org.mapdb.BTreeMap<K, V> getM()"], ["K", "org.mapdb.BTreeMap$BTreeBoundIterator.getLo()", "public final K getLo()"], ["boolean", "org.mapdb.BTreeMap$BTreeBoundIterator.getLoInclusive()", "public final boolean getLoInclusive()"], ["K", "org.mapdb.BTreeMap$BTreeBoundIterator.getHi()", "public final K getHi()"], ["boolean", "org.mapdb.BTreeMap$BTreeBoundIterator.getHiInclusive()", "public final boolean getHiInclusive()"], ["org.mapdb.BTreeMap$BTreeBoundIterator", "org.mapdb.BTreeMap$BTreeBoundIterator(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)", "public org.mapdb.BTreeMap$BTreeBoundIterator(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMap$BTreeIterator.hasNext()", "public final boolean hasNext()"], ["void", "org.mapdb.BTreeMap$BTreeIterator.remove()", "public final void remove()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$BTreeIterator.getM()", "public final org.mapdb.BTreeMap<K, V> getM()"], ["org.mapdb.BTreeMap$BTreeIterator", "org.mapdb.BTreeMap$BTreeIterator(org.mapdb.BTreeMap<K, V>)", "public org.mapdb.BTreeMap$BTreeIterator(org.mapdb.BTreeMap<K, V>)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Integer valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Integer valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Integer valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayEmpty()", "public java.lang.Integer valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayFromArray(java.lang.Object[])", "public java.lang.Integer valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Boolean", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayGet(java.lang.Object, int)", "public java.lang.Boolean valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayGet(java.lang.Object, int)", "public java.lang.Object valueArrayGet(java.lang.Object, int)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayPut(java.lang.Object, int, java.lang.Boolean)", "public java.lang.Integer valueArrayPut(java.lang.Object, int, java.lang.Boolean)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySearch(java.lang.Object, java.lang.Boolean)", "public int valueArraySearch(java.lang.Object, java.lang.Boolean)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySearch(java.lang.Object, java.lang.Boolean, java.util.Comparator<?>)", "public int valueArraySearch(java.lang.Object, java.lang.Boolean, java.util.Comparator<?>)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["void", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayUpdateVal(java.lang.Object, int, java.lang.Boolean)", "public java.lang.Integer valueArrayUpdateVal(java.lang.Object, int, java.lang.Boolean)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Boolean", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Boolean deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.serialize(org.mapdb.DataOutput2, boolean)", "public void serialize(org.mapdb.DataOutput2, boolean)"], ["void", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.isTrusted()", "public boolean isTrusted()"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$Companion.make(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, org.mapdb.Store, boolean, long, int, java.util.Comparator<K>, boolean, long, boolean, org.mapdb.MapModificationListener<K, V>[])", "public final <K, V> org.mapdb.BTreeMap<K, V> make(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, org.mapdb.Store, boolean, long, int, java.util.Comparator<K>, boolean, long, boolean, org.mapdb.MapModificationListener<K, V>[])"], ["org.mapdb.BTreeMap", "org.mapdb.BTreeMap$Companion.make$default(org.mapdb.BTreeMap$Companion, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, org.mapdb.Store, boolean, long, int, java.util.Comparator, boolean, long, boolean, org.mapdb.MapModificationListener[], int, java.lang.Object)", "public static org.mapdb.BTreeMap make$default(org.mapdb.BTreeMap$Companion, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, org.mapdb.Store, boolean, long, int, java.util.Comparator, boolean, long, boolean, org.mapdb.MapModificationListener[], int, java.lang.Object)"], ["<K, V> long", "org.mapdb.BTreeMap$Companion.putEmptyRoot$mapdb(org.mapdb.Store, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)", "public final <K, V> long putEmptyRoot$mapdb(org.mapdb.Store, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["org.mapdb.serializer.GroupSerializer<java.lang.Boolean>", "org.mapdb.BTreeMap$Companion.getNO_VAL_SERIALIZER$mapdb()", "public final org.mapdb.serializer.GroupSerializer<java.lang.Boolean> getNO_VAL_SERIALIZER$mapdb()"], ["org.mapdb.BTreeMap$Companion", "org.mapdb.BTreeMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.BTreeMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["boolean", "org.mapdb.BTreeMap$DescendingBoundIterator.hasNext()", "public final boolean hasNext()"], ["void", "org.mapdb.BTreeMap$DescendingBoundIterator.remove()", "public final void remove()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$DescendingBoundIterator.getM()", "public final org.mapdb.BTreeMap<K, V> getM()"], ["K", "org.mapdb.BTreeMap$DescendingBoundIterator.getLo()", "public final K getLo()"], ["boolean", "org.mapdb.BTreeMap$DescendingBoundIterator.getLoInclusive()", "public final boolean getLoInclusive()"], ["K", "org.mapdb.BTreeMap$DescendingBoundIterator.getHi()", "public final K getHi()"], ["boolean", "org.mapdb.BTreeMap$DescendingBoundIterator.getHiInclusive()", "public final boolean getHiInclusive()"], ["org.mapdb.BTreeMap$DescendingBoundIterator", "org.mapdb.BTreeMap$DescendingBoundIterator(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)", "public org.mapdb.BTreeMap$DescendingBoundIterator(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMap$DescendingIterator.hasNext()", "public final boolean hasNext()"], ["void", "org.mapdb.BTreeMap$DescendingIterator.remove()", "public final void remove()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$DescendingIterator.getM()", "public final org.mapdb.BTreeMap<K, V> getM()"], ["org.mapdb.BTreeMap$DescendingIterator", "org.mapdb.BTreeMap$DescendingIterator(org.mapdb.BTreeMap<K, V>)", "public org.mapdb.BTreeMap$DescendingIterator(org.mapdb.BTreeMap<K, V>)"], ["K", "org.mapdb.BTreeMap$btreeEntry$1.getKey()", "public K getKey()"], ["V", "org.mapdb.BTreeMap$btreeEntry$1.getValue()", "public V getValue()"], ["int", "org.mapdb.BTreeMap$btreeEntry$1.hashCode()", "public int hashCode()"], ["V", "org.mapdb.BTreeMap$btreeEntry$1.setValue(V)", "public V setValue(V)"], ["boolean", "org.mapdb.BTreeMap$btreeEntry$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.mapdb.BTreeMap$btreeEntry$1.toString()", "public java.lang.String toString()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$descendingEntryIterator$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.BTreeMap$descendingEntryIterator$1.next()", "public java.lang.Object next()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$descendingEntryIterator$2.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.BTreeMap$descendingEntryIterator$2.next()", "public java.lang.Object next()"], ["K", "org.mapdb.BTreeMap$descendingKeyIterator$1.next()", "public K next()"], ["K", "org.mapdb.BTreeMap$descendingKeyIterator$2.next()", "public K next()"], ["java.lang.Object", "org.mapdb.BTreeMap$descendingLeafIterator$1$advance$1.invoke()", "public java.lang.Object invoke()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1$advance$1.invoke()", "public final void invoke()"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMap$descendingLeafIterator$1.getNextNode()", "public final org.mapdb.BTreeMapJava$Node getNextNode()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.setNextNode(org.mapdb.BTreeMapJava$Node)", "public final void setNextNode(org.mapdb.BTreeMapJava$Node)"], ["java.util.Deque<org.mapdb.BTreeMap$descendingLeafIterator$INode>", "org.mapdb.BTreeMap$descendingLeafIterator$1.getStack()", "public final java.util.Deque<org.mapdb.BTreeMap$descendingLeafIterator$INode> getStack()"], ["java.util.Deque<org.mapdb.BTreeMapJava$Node>", "org.mapdb.BTreeMap$descendingLeafIterator$1.getLeafLinkedStack()", "public final java.util.Deque<org.mapdb.BTreeMapJava$Node> getLeafLinkedStack()"], ["long", "org.mapdb.BTreeMap$descendingLeafIterator$1.getLinkRecidLimit()", "public final long getLinkRecidLimit()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.setLinkRecidLimit(long)", "public final void setLinkRecidLimit(long)"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.init()", "public final void init()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.init(K)", "public final void init(K)"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.advance()", "public final void advance()"], ["boolean", "org.mapdb.BTreeMap$descendingLeafIterator$1.hasNext()", "public boolean hasNext()"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMap$descendingLeafIterator$1.next()", "public org.mapdb.BTreeMapJava$Node next()"], ["java.lang.Object", "org.mapdb.BTreeMap$descendingLeafIterator$1.next()", "public java.lang.Object next()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.remove()", "public void remove()"], ["java.util.Deque<org.mapdb.BTreeMapJava$Node>", "org.mapdb.BTreeMap$descendingLeafIterator$INode.getLinked()", "public final java.util.Deque<org.mapdb.BTreeMapJava$Node> getLinked()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$INode.setLinked(java.util.Deque<org.mapdb.BTreeMapJava$Node>)", "public final void setLinked(java.util.Deque<org.mapdb.BTreeMapJava$Node>)"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMap$descendingLeafIterator$INode.getNode()", "public final org.mapdb.BTreeMapJava$Node getNode()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$INode.setNode(org.mapdb.BTreeMapJava$Node)", "public final void setNode(org.mapdb.BTreeMapJava$Node)"], ["int", "org.mapdb.BTreeMap$descendingLeafIterator$INode.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$INode.setNodePos(int)", "public final void setNodePos(int)"], ["long", "org.mapdb.BTreeMap$descendingLeafIterator$INode.getLinkLimit()", "public final long getLinkLimit()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$INode.setLinkLimit(long)", "public final void setLinkLimit(long)"], ["org.mapdb.BTreeMap$descendingLeafIterator$INode", "org.mapdb.BTreeMap$descendingLeafIterator$INode(java.util.Deque<org.mapdb.BTreeMapJava$Node>, org.mapdb.BTreeMapJava$Node, int, long)", "public org.mapdb.BTreeMap$descendingLeafIterator$INode(java.util.Deque<org.mapdb.BTreeMapJava$Node>, org.mapdb.BTreeMapJava$Node, int, long)"], ["org.mapdb.BTreeMap$descendingLeafIterator$INode", "org.mapdb.BTreeMap$descendingLeafIterator$INode(java.util.Deque, org.mapdb.BTreeMapJava$Node, int, long, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.BTreeMap$descendingLeafIterator$INode(java.util.Deque, org.mapdb.BTreeMapJava$Node, int, long, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["V", "org.mapdb.BTreeMap$descendingValueIterator$1.next()", "public V next()"], ["V", "org.mapdb.BTreeMap$descendingValueIterator$2.next()", "public V next()"], ["boolean", "org.mapdb.BTreeMap$entries$1.add(java.util.Map$Entry<K, V>)", "public boolean add(java.util.Map$Entry<K, V>)"], ["boolean", "org.mapdb.BTreeMap$entries$1.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$entries$1.clear()", "public void clear()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap$entries$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.mapdb.BTreeMap$entries$1.remove(java.util.Map$Entry)", "public boolean remove(java.util.Map$Entry)"], ["boolean", "org.mapdb.BTreeMap$entries$1.remove(java.lang.Object)", "public final boolean remove(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$entries$1.contains(java.util.Map$Entry)", "public boolean contains(java.util.Map$Entry)"], ["boolean", "org.mapdb.BTreeMap$entries$1.contains(java.lang.Object)", "public final boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$entries$1.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.BTreeMap$entries$1.getSize()", "public int getSize()"], ["int", "org.mapdb.BTreeMap$entries$1.size()", "public final int size()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$entryIterator$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.BTreeMap$entryIterator$1.next()", "public java.lang.Object next()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$entryIterator$2.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.BTreeMap$entryIterator$2.next()", "public java.lang.Object next()"], ["K", "org.mapdb.BTreeMap$keyIterator$1.next()", "public K next()"], ["K", "org.mapdb.BTreeMap$keyIterator$2.next()", "public K next()"], ["java.lang.Object", "org.mapdb.BTreeMap$printStructure$1.invoke(java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.BTreeMap$printStructure$1.invoke(long, java.lang.String)", "public final void invoke(long, java.lang.String)"], ["V", "org.mapdb.BTreeMap$valueIterator$1.next()", "public V next()"], ["V", "org.mapdb.BTreeMap$valueIterator$2.next()", "public V next()"], ["void", "org.mapdb.BTreeMap$values$1.clear()", "public void clear()"], ["boolean", "org.mapdb.BTreeMap$values$1.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.BTreeMap$values$1.getSize()", "public int getSize()"], ["int", "org.mapdb.BTreeMap$values$1.size()", "public final int size()"], ["java.util.Iterator<V>", "org.mapdb.BTreeMap$values$1.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "org.mapdb.BTreeMap$values$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.Object", "org.mapdb.BTreeMap$verify$1.invoke(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.BTreeMap$verify$1.invoke(org.mapdb.BTreeMapJava$Node, boolean, boolean, org.eclipse.collections.impl.set.mutable.primitive.LongHashSet, long)", "public final void invoke(org.mapdb.BTreeMapJava$Node, boolean, boolean, org.eclipse.collections.impl.set.mutable.primitive.LongHashSet, long)"], ["void", "org.mapdb.BTreeMap$writeReplace$1.accept(K, V)", "public final void accept(K, V)"], ["V", "org.mapdb.BTreeMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.mapdb.BTreeMap.put(K, V)", "public V put(K, V)"], ["V", "org.mapdb.BTreeMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.mapdb.BTreeMap.lock(long)", "public final void lock(long)"], ["void", "org.mapdb.BTreeMap.unlock(long)", "public final void unlock(long)"], ["void", "org.mapdb.BTreeMap.unlockAllCurrentThread()", "public final void unlockAllCurrentThread()"], ["void", "org.mapdb.BTreeMap.assertCurrentThreadUnlocked()", "public final void assertCurrentThreadUnlocked()"], ["void", "org.mapdb.BTreeMap.close()", "public void close()"], ["void", "org.mapdb.BTreeMap.verify()", "public void verify()"], ["void", "org.mapdb.BTreeMap.printStructure(java.io.PrintStream)", "public final void printStructure(java.io.PrintStream)"], ["void", "org.mapdb.BTreeMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["boolean", "org.mapdb.BTreeMap.putIfAbsentBoolean(K, V)", "public boolean putIfAbsentBoolean(K, V)"], ["V", "org.mapdb.BTreeMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.BTreeMap.replace(K, V)", "public V replace(K, V)"], ["boolean", "org.mapdb.BTreeMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.BTreeMap.getSize()", "public int getSize()"], ["int", "org.mapdb.BTreeMap.size()", "public final int size()"], ["long", "org.mapdb.BTreeMap.sizeLong()", "public long sizeLong()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.descendingMap()", "public java.util.concurrent.ConcurrentNavigableMap<K, V> descendingMap()"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.getEntries()", "public java.util.Set<java.util.Map$Entry<K, V>> getEntries()"], ["java.util.Set", "org.mapdb.BTreeMap.entrySet()", "public final java.util.Set entrySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap.getKeys()", "public java.util.NavigableSet<K> getKeys()"], ["java.util.NavigableSet", "org.mapdb.BTreeMap.keySet()", "public java.util.NavigableSet keySet()"], ["java.util.Set", "org.mapdb.BTreeMap.keySet()", "public final java.util.Set keySet()"], ["java.util.Collection<V>", "org.mapdb.BTreeMap.getValues()", "public java.util.Collection<V> getValues()"], ["java.util.Collection", "org.mapdb.BTreeMap.values()", "public final java.util.Collection values()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.entryIterator()", "public final java.util.Iterator<java.util.Map$Entry<K, V>> entryIterator()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.entryIterator(K, boolean, K, boolean)", "public java.util.Iterator<java.util.Map$Entry<K, V>> entryIterator(K, boolean, K, boolean)"], ["java.util.Iterator<K>", "org.mapdb.BTreeMap.keyIterator()", "public java.util.Iterator<K> keyIterator()"], ["java.util.Iterator<K>", "org.mapdb.BTreeMap.keyIterator(K, boolean, K, boolean)", "public java.util.Iterator<K> keyIterator(K, boolean, K, boolean)"], ["java.util.Iterator<V>", "org.mapdb.BTreeMap.valueIterator()", "public final java.util.Iterator<V> valueIterator()"], ["java.util.Iterator<V>", "org.mapdb.BTreeMap.valueIterator(K, boolean, K, boolean)", "public java.util.Iterator<V> valueIterator(K, boolean, K, boolean)"], ["java.util.Iterator<org.mapdb.BTreeMapJava$Node>", "org.mapdb.BTreeMap.descendingLeafIterator(K)", "public final java.util.Iterator<org.mapdb.BTreeMapJava$Node> descendingLeafIterator(K)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.descendingEntryIterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> descendingEntryIterator()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.descendingEntryIterator(K, boolean, K, boolean)", "public java.util.Iterator<java.util.Map$Entry<K, V>> descendingEntryIterator(K, boolean, K, boolean)"], ["java.util.Iterator<K>", "org.mapdb.BTreeMap.descendingKeyIterator()", "public java.util.Iterator<K> descendingKeyIterator()"], ["java.util.Iterator<K>", "org.mapdb.BTreeMap.descendingKeyIterator(K, boolean, K, boolean)", "public java.util.Iterator<K> descendingKeyIterator(K, boolean, K, boolean)"], ["java.util.Iterator<V>", "org.mapdb.BTreeMap.descendingValueIterator()", "public java.util.Iterator<V> descendingValueIterator()"], ["java.util.Iterator<V>", "org.mapdb.BTreeMap.descendingValueIterator(K, boolean, K, boolean)", "public java.util.Iterator<V> descendingValueIterator(K, boolean, K, boolean)"], ["int", "org.mapdb.BTreeMap.hashCode()", "public int hashCode()"], ["boolean", "org.mapdb.BTreeMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.BTreeMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)", "public void forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["void", "org.mapdb.BTreeMap.forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)", "public void forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)"], ["void", "org.mapdb.BTreeMap.forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)", "public void forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.prefixSubMap(K)", "public final java.util.concurrent.ConcurrentNavigableMap<K, V> prefixSubMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.prefixSubMap(K, boolean)", "public final java.util.concurrent.ConcurrentNavigableMap<K, V> prefixSubMap(K, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.subMap(K, boolean, K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.headMap(K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.tailMap(K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> tailMap(K, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.subMap(K, K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> subMap(K, K)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.headMap(K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> headMap(K)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.tailMap(K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> tailMap(K)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["K", "org.mapdb.BTreeMap.firstKey2()", "public K firstKey2()"], ["K", "org.mapdb.BTreeMap.lastKey2()", "public K lastKey2()"], ["K", "org.mapdb.BTreeMap.firstKey()", "public K firstKey()"], ["K", "org.mapdb.BTreeMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.findHigher(K, boolean)", "public java.util.Map$Entry<K, V> findHigher(K, boolean)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.findLower(K, boolean)", "public java.util.Map$Entry<K, V> findLower(K, boolean)"], ["K", "org.mapdb.BTreeMap.findHigherKey(K, boolean)", "public K findHigherKey(K, boolean)"], ["K", "org.mapdb.BTreeMap.findLowerKey(K, boolean)", "public K findLowerKey(K, boolean)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.mapdb.BTreeMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.mapdb.BTreeMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.mapdb.BTreeMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.mapdb.BTreeMap.higherKey(K)", "public K higherKey(K)"], ["void", "org.mapdb.BTreeMap.clear()", "public void clear()"], ["void", "org.mapdb.BTreeMap.checkThreadSafe()", "public void checkThreadSafe()"], ["org.mapdb.serializer.GroupSerializer<K>", "org.mapdb.BTreeMap.getKeySerializer()", "public org.mapdb.serializer.GroupSerializer<K> getKeySerializer()"], ["org.mapdb.Serializer", "org.mapdb.BTreeMap.getKeySerializer()", "public org.mapdb.Serializer getKeySerializer()"], ["org.mapdb.serializer.GroupSerializer<V>", "org.mapdb.BTreeMap.getValueSerializer()", "public org.mapdb.serializer.GroupSerializer<V> getValueSerializer()"], ["org.mapdb.Serializer", "org.mapdb.BTreeMap.getValueSerializer()", "public org.mapdb.Serializer getValueSerializer()"], ["long", "org.mapdb.BTreeMap.getRootRecidRecid()", "public final long getRootRecidRecid()"], ["org.mapdb.Store", "org.mapdb.BTreeMap.getStore()", "public final org.mapdb.Store getStore()"], ["boolean", "org.mapdb.BTreeMap.getValueInline()", "public final boolean getValueInline()"], ["int", "org.mapdb.BTreeMap.getMaxNodeSize()", "public final int getMaxNodeSize()"], ["java.util.Comparator<K>", "org.mapdb.BTreeMap.getComparator()", "public final java.util.Comparator<K> getComparator()"], ["boolean", "org.mapdb.BTreeMap.isThreadSafe()", "public boolean isThreadSafe()"], ["long", "org.mapdb.BTreeMap.getCounterRecid()", "public final long getCounterRecid()"], ["boolean", "org.mapdb.BTreeMap.getHasValues()", "public boolean getHasValues()"], ["org.mapdb.BTreeMap", "org.mapdb.BTreeMap(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, long, org.mapdb.Store, boolean, int, java.util.Comparator<K>, boolean, long, boolean, org.mapdb.MapModificationListener<K, V>[])", "public org.mapdb.BTreeMap(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, long, org.mapdb.Store, boolean, int, java.util.Comparator<K>, boolean, long, boolean, org.mapdb.MapModificationListener<K, V>[])"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMap.access$getNode(org.mapdb.BTreeMap, long)", "public static final org.mapdb.BTreeMapJava$Node access$getNode(org.mapdb.BTreeMap, long)"], ["java.lang.String", "org.mapdb.BTreeMap.access$nodeToString(org.mapdb.BTreeMap, java.lang.Long, org.mapdb.BTreeMapJava$Node)", "public static final java.lang.String access$nodeToString(org.mapdb.BTreeMap, java.lang.Long, org.mapdb.BTreeMapJava$Node)"], ["org.mapdb.serializer.GroupSerializer", "org.mapdb.BTreeMap.access$getNO_VAL_SERIALIZER$cp()", "public static final org.mapdb.serializer.GroupSerializer access$getNO_VAL_SERIALIZER$cp()"], ["int", "org.mapdb.BTreeMapJava$1.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.mapdb.BTreeMapJava$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.mapdb.BTreeMapJava$2.toString()", "public java.lang.String toString()"], ["org.mapdb.BTreeMapJava$BinaryGet", "org.mapdb.BTreeMapJava$BinaryGet(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, java.util.Comparator<K>, K)", "public org.mapdb.BTreeMapJava$BinaryGet(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, java.util.Comparator<K>, K)"], ["long", "org.mapdb.BTreeMapJava$BinaryGet.get(org.mapdb.DataInput2, int)", "public long get(org.mapdb.DataInput2, int) throws java.io.IOException"], ["org.mapdb.BTreeMapJava$DescendingMap", "org.mapdb.BTreeMapJava$DescendingMap(org.mapdb.ConcurrentNavigableMapExtra<K, V>, K, boolean, K, boolean)", "public org.mapdb.BTreeMapJava$DescendingMap(org.mapdb.ConcurrentNavigableMapExtra<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.put(K, V)", "public V put(K, V)"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "org.mapdb.BTreeMapJava$DescendingMap.size()", "public int size()"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["void", "org.mapdb.BTreeMapJava$DescendingMap.clear()", "public void clear()"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.replace(K, V)", "public V replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMapJava$DescendingMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.higherKey(K)", "public K higherKey(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.firstKey2()", "public K firstKey2()"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.lastKey2()", "public K lastKey2()"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.firstKey()", "public K firstKey()"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.subMap(K, boolean, K, boolean)", "public org.mapdb.BTreeMapJava$DescendingMap<K, V> subMap(K, boolean, K, boolean)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.headMap(K, boolean)", "public org.mapdb.BTreeMapJava$DescendingMap<K, V> headMap(K, boolean)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(K, boolean)", "public org.mapdb.BTreeMapJava$DescendingMap<K, V> tailMap(K, boolean)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.subMap(K, K)", "public org.mapdb.BTreeMapJava$DescendingMap<K, V> subMap(K, K)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.headMap(K)", "public org.mapdb.BTreeMapJava$DescendingMap<K, V> headMap(K)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(K)", "public org.mapdb.BTreeMapJava$DescendingMap<K, V> tailMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.descendingMap()", "public java.util.concurrent.ConcurrentNavigableMap<K, V> descendingMap()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMapJava$DescendingMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMapJava$DescendingMap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMapJava$DescendingMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMapJava$DescendingMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set", "org.mapdb.BTreeMapJava$DescendingMap.keySet()", "public java.util.Set keySet()"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.headMap(java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.headMap(java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$DescendingMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$DescendingMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["java.util.Iterator<java.util.Map$Entry<K1, V1>>", "org.mapdb.BTreeMapJava$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K1, V1>> iterator()"], ["boolean", "org.mapdb.BTreeMapJava$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$EntrySet.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.BTreeMapJava$EntrySet.size()", "public int size()"], ["void", "org.mapdb.BTreeMapJava$EntrySet.clear()", "public void clear()"], ["boolean", "org.mapdb.BTreeMapJava$EntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.BTreeMapJava$EntrySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.mapdb.BTreeMapJava$EntrySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["int", "org.mapdb.BTreeMapJava$KeySet.size()", "public int size()"], ["long", "org.mapdb.BTreeMapJava$KeySet.sizeLong()", "public long sizeLong()"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.mapdb.BTreeMapJava$KeySet.clear()", "public void clear()"], ["E", "org.mapdb.BTreeMapJava$KeySet.lower(E)", "public E lower(E)"], ["E", "org.mapdb.BTreeMapJava$KeySet.floor(E)", "public E floor(E)"], ["E", "org.mapdb.BTreeMapJava$KeySet.ceiling(E)", "public E ceiling(E)"], ["E", "org.mapdb.BTreeMapJava$KeySet.higher(E)", "public E higher(E)"], ["java.util.Comparator<? super E>", "org.mapdb.BTreeMapJava$KeySet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["E", "org.mapdb.BTreeMapJava$KeySet.first()", "public E first()"], ["E", "org.mapdb.BTreeMapJava$KeySet.last()", "public E last()"], ["E", "org.mapdb.BTreeMapJava$KeySet.pollFirst()", "public E pollFirst()"], ["E", "org.mapdb.BTreeMapJava$KeySet.pollLast()", "public E pollLast()"], ["java.util.Iterator<E>", "org.mapdb.BTreeMapJava$KeySet.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.BTreeMapJava$KeySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.mapdb.BTreeMapJava$KeySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.util.Iterator<E>", "org.mapdb.BTreeMapJava$KeySet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMapJava$KeySet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMapJava$KeySet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMapJava$KeySet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMapJava$KeySet.subSet(E, E)", "public java.util.NavigableSet<E> subSet(E, E)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMapJava$KeySet.headSet(E)", "public java.util.NavigableSet<E> headSet(E)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMapJava$KeySet.tailSet(E)", "public java.util.NavigableSet<E> tailSet(E)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMapJava$KeySet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.add(E)", "public boolean add(E)"], ["void", "org.mapdb.BTreeMapJava$KeySet.close()", "public void close()"], ["java.util.SortedSet", "org.mapdb.BTreeMapJava$KeySet.tailSet(java.lang.Object)", "public java.util.SortedSet tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.mapdb.BTreeMapJava$KeySet.headSet(java.lang.Object)", "public java.util.SortedSet headSet(java.lang.Object)"], ["java.util.SortedSet", "org.mapdb.BTreeMapJava$KeySet.subSet(java.lang.Object, java.lang.Object)", "public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)"], ["<K> K", "org.mapdb.BTreeMapJava$Node.highKey(org.mapdb.serializer.GroupSerializer<K>)", "public <K> K highKey(org.mapdb.serializer.GroupSerializer<K>)"], ["long[]", "org.mapdb.BTreeMapJava$Node.getChildren()", "public long[] getChildren()"], ["void", "org.mapdb.BTreeMapJava$Node.verifyNode(org.mapdb.serializer.GroupSerializer, java.util.Comparator, org.mapdb.serializer.GroupSerializer)", "public void verifyNode(org.mapdb.serializer.GroupSerializer, java.util.Comparator, org.mapdb.serializer.GroupSerializer)"], ["void", "org.mapdb.BTreeMapJava$NodeSerializer.serialize(org.mapdb.DataOutput2, org.mapdb.BTreeMapJava$Node)", "public void serialize(org.mapdb.DataOutput2, org.mapdb.BTreeMapJava$Node) throws java.io.IOException"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMapJava$NodeSerializer.deserialize(org.mapdb.DataInput2, int)", "public org.mapdb.BTreeMapJava$Node deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.BTreeMapJava$NodeSerializer.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.BTreeMapJava$NodeSerializer.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.BTreeMapJava$NodeSerializer.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.BTreeMapJava$SubMap", "org.mapdb.BTreeMapJava$SubMap(org.mapdb.ConcurrentNavigableMapExtra<K, V>, K, boolean, K, boolean)", "public org.mapdb.BTreeMapJava$SubMap(org.mapdb.ConcurrentNavigableMapExtra<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.mapdb.BTreeMapJava$SubMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.mapdb.BTreeMapJava$SubMap.put(K, V)", "public V put(K, V)"], ["V", "org.mapdb.BTreeMapJava$SubMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "org.mapdb.BTreeMapJava$SubMap.size()", "public int size()"], ["long", "org.mapdb.BTreeMapJava$SubMap.sizeLong()", "public long sizeLong()"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["void", "org.mapdb.BTreeMapJava$SubMap.clear()", "public void clear()"], ["V", "org.mapdb.BTreeMapJava$SubMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.BTreeMapJava$SubMap.replace(K, V)", "public V replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMapJava$SubMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.higherKey(K)", "public K higherKey(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.firstKey2()", "public K firstKey2()"], ["K", "org.mapdb.BTreeMapJava$SubMap.lastKey2()", "public K lastKey2()"], ["K", "org.mapdb.BTreeMapJava$SubMap.firstKey()", "public K firstKey()"], ["K", "org.mapdb.BTreeMapJava$SubMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.subMap(K, boolean, K, boolean)", "public org.mapdb.BTreeMapJava$SubMap<K, V> subMap(K, boolean, K, boolean)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.headMap(K, boolean)", "public org.mapdb.BTreeMapJava$SubMap<K, V> headMap(K, boolean)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.tailMap(K, boolean)", "public org.mapdb.BTreeMapJava$SubMap<K, V> tailMap(K, boolean)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.subMap(K, K)", "public org.mapdb.BTreeMapJava$SubMap<K, V> subMap(K, K)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.headMap(K)", "public org.mapdb.BTreeMapJava$SubMap<K, V> headMap(K)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.tailMap(K)", "public org.mapdb.BTreeMapJava$SubMap<K, V> tailMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.descendingMap()", "public java.util.concurrent.ConcurrentNavigableMap<K, V> descendingMap()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMapJava$SubMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMapJava$SubMap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMapJava$SubMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMapJava$SubMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set", "org.mapdb.BTreeMapJava$SubMap.keySet()", "public java.util.Set keySet()"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.tailMap(java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.headMap(java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.tailMap(java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.headMap(java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$SubMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$SubMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$SubMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$SubMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$SubMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$SubMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$SubMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["org.mapdb.BTreeMapJava", "org.mapdb.BTreeMapJava()", "public org.mapdb.BTreeMapJava()"], ["void", "org.mapdb.ConcurrencyAware$DefaultImpls.checkThreadSafe(org.mapdb.ConcurrencyAware)", "public static void checkThreadSafe(org.mapdb.ConcurrencyAware)"], ["java.lang.Object", "org.mapdb.DB$AtomicBooleanMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicBooleanMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicBooleanMaker", "org.mapdb.DB$AtomicBooleanMaker(org.mapdb.DB, java.lang.String, boolean)", "public org.mapdb.DB$AtomicBooleanMaker(org.mapdb.DB, java.lang.String, boolean)"], ["org.mapdb.DB$AtomicBooleanMaker", "org.mapdb.DB$AtomicBooleanMaker(org.mapdb.DB, java.lang.String, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$AtomicBooleanMaker(org.mapdb.DB, java.lang.String, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$AtomicIntegerMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicIntegerMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicIntegerMaker", "org.mapdb.DB$AtomicIntegerMaker(org.mapdb.DB, java.lang.String, int)", "public org.mapdb.DB$AtomicIntegerMaker(org.mapdb.DB, java.lang.String, int)"], ["org.mapdb.DB$AtomicIntegerMaker", "org.mapdb.DB$AtomicIntegerMaker(org.mapdb.DB, java.lang.String, int, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$AtomicIntegerMaker(org.mapdb.DB, java.lang.String, int, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$AtomicLongMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicLongMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicLongMaker", "org.mapdb.DB$AtomicLongMaker(org.mapdb.DB, java.lang.String, long)", "public org.mapdb.DB$AtomicLongMaker(org.mapdb.DB, java.lang.String, long)"], ["org.mapdb.DB$AtomicLongMaker", "org.mapdb.DB$AtomicLongMaker(org.mapdb.DB, java.lang.String, long, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$AtomicLongMaker(org.mapdb.DB, java.lang.String, long, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$AtomicStringMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicStringMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicStringMaker", "org.mapdb.DB$AtomicStringMaker(org.mapdb.DB, java.lang.String, java.lang.String)", "public org.mapdb.DB$AtomicStringMaker(org.mapdb.DB, java.lang.String, java.lang.String)"], ["org.mapdb.DB$AtomicStringMaker", "org.mapdb.DB$AtomicStringMaker(org.mapdb.DB, java.lang.String, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$AtomicStringMaker(org.mapdb.DB, java.lang.String, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$AtomicVarMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicVarMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicVarMaker", "org.mapdb.DB$AtomicVarMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer<E>, E)", "public org.mapdb.DB$AtomicVarMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer<E>, E)"], ["org.mapdb.DB$AtomicVarMaker", "org.mapdb.DB$AtomicVarMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer, java.lang.Object, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$AtomicVarMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer, java.lang.Object, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["kotlin.jvm.functions.Function1<java.lang.String, java.lang.String>", "org.mapdb.DB$CatVal.getMsg()", "public final kotlin.jvm.functions.Function1<java.lang.String, java.lang.String> getMsg()"], ["boolean", "org.mapdb.DB$CatVal.getRequired()", "public final boolean getRequired()"], ["org.mapdb.DB$CatVal", "org.mapdb.DB$CatVal(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.String>, boolean)", "public org.mapdb.DB$CatVal(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.String>, boolean)"], ["org.mapdb.DB$CatVal", "org.mapdb.DB$CatVal(kotlin.jvm.functions.Function1, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$CatVal(kotlin.jvm.functions.Function1, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["kotlin.jvm.functions.Function1<java.lang.String, java.lang.String>", "org.mapdb.DB$CatVal.component1()", "public final kotlin.jvm.functions.Function1<java.lang.String, java.lang.String> component1()"], ["boolean", "org.mapdb.DB$CatVal.component2()", "public final boolean component2()"], ["org.mapdb.DB$CatVal", "org.mapdb.DB$CatVal.copy(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.String>, boolean)", "public final org.mapdb.DB$CatVal copy(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.String>, boolean)"], ["org.mapdb.DB$CatVal", "org.mapdb.DB$CatVal.copy$default(org.mapdb.DB$CatVal, kotlin.jvm.functions.Function1, boolean, int, java.lang.Object)", "public static org.mapdb.DB$CatVal copy$default(org.mapdb.DB$CatVal, kotlin.jvm.functions.Function1, boolean, int, java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$CatVal.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.DB$CatVal.hashCode()", "public int hashCode()"], ["boolean", "org.mapdb.DB$CatVal.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.SortedMap<java.lang.String, java.lang.String>", "org.mapdb.DB$Companion$NAME_CATALOG_SERIALIZER$1.deserialize(org.mapdb.DataInput2, int)", "public java.util.SortedMap<java.lang.String, java.lang.String> deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.DB$Companion$NAME_CATALOG_SERIALIZER$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.DB$Companion$NAME_CATALOG_SERIALIZER$1.serialize(org.mapdb.DataOutput2, java.util.SortedMap<java.lang.String, java.lang.String>)", "public void serialize(org.mapdb.DataOutput2, java.util.SortedMap<java.lang.String, java.lang.String>)"], ["void", "org.mapdb.DB$Companion$NAME_CATALOG_SERIALIZER$1.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["void", "org.mapdb.DB$Companion$addShutdownHook$1.run()", "public void run()"], ["java.util.Map", "org.mapdb.DB$Companion.access$getShutdownHooks$p(org.mapdb.DB$Companion)", "public static final java.util.Map access$getShutdownHooks$p(org.mapdb.DB$Companion)"], ["org.mapdb.DB$Companion", "org.mapdb.DB$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["org.mapdb.Store", "org.mapdb.DB$HashMapMaker$1.invoke(int)", "public final org.mapdb.Store invoke(int)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$create2$1.invoke(java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object)"], ["org.mapdb.QueueLong", "org.mapdb.DB$HashMapMaker$create2$1.invoke(int, org.eclipse.collections.impl.list.mutable.primitive.LongArrayList)", "public final org.mapdb.QueueLong invoke(int, org.eclipse.collections.impl.list.mutable.primitive.LongArrayList)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$layout$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["int", "org.mapdb.DB$HashMapMaker$layout$1.invoke(int)", "public final int invoke(int)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$open2$1.invoke(java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object)"], ["org.mapdb.QueueLong[]", "org.mapdb.DB$HashMapMaker$open2$1.invoke(long, java.lang.String)", "public final org.mapdb.QueueLong[] invoke(long, java.lang.String)"], ["V", "org.mapdb.DB$HashMapMaker$verify$1.invoke(K)", "public final V invoke(K)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$verify$listener$1$1.get()", "public java.lang.Object get()"], ["java.lang.String", "org.mapdb.DB$HashMapMaker$verify$listener$1$1.get()", "public final java.lang.String get()"], ["void", "org.mapdb.DB$HashMapMaker$verify$listener$1.modify(K, V, V, boolean)", "public final void modify(K, V, V, boolean)"], ["<A> org.mapdb.DB$HashMapMaker<A, V>", "org.mapdb.DB$HashMapMaker.keySerializer(org.mapdb.Serializer<A>)", "public final <A> org.mapdb.DB$HashMapMaker<A, V> keySerializer(org.mapdb.Serializer<A>)"], ["<A> org.mapdb.DB$HashMapMaker<K, A>", "org.mapdb.DB$HashMapMaker.valueSerializer(org.mapdb.Serializer<A>)", "public final <A> org.mapdb.DB$HashMapMaker<K, A> valueSerializer(org.mapdb.Serializer<A>)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.valueInline()", "public final org.mapdb.DB$HashMapMaker<K, V> valueInline()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.removeCollapsesIndexTreeDisable()", "public final org.mapdb.DB$HashMapMaker<K, V> removeCollapsesIndexTreeDisable()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.hashSeed(int)", "public final org.mapdb.DB$HashMapMaker<K, V> hashSeed(int)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.layout(int, int, int)", "public final org.mapdb.DB$HashMapMaker<K, V> layout(int, int, int)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterCreate()", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterCreate()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterCreate(long)", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterCreate(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterCreate(long, java.util.concurrent.TimeUnit)", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterCreate(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterUpdate()", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterUpdate()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterUpdate(long)", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterUpdate(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterUpdate(long, java.util.concurrent.TimeUnit)", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterUpdate(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterGet()", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterGet()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterGet(long)", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterGet(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterGet(long, java.util.concurrent.TimeUnit)", "public final org.mapdb.DB$HashMapMaker<K, V> expireAfterGet(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireExecutor(java.util.concurrent.ScheduledExecutorService)", "public final org.mapdb.DB$HashMapMaker<K, V> expireExecutor(java.util.concurrent.ScheduledExecutorService)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireExecutorPeriod(long)", "public final org.mapdb.DB$HashMapMaker<K, V> expireExecutorPeriod(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireCompactThreshold(double)", "public final org.mapdb.DB$HashMapMaker<K, V> expireCompactThreshold(double)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireMaxSize(long)", "public final org.mapdb.DB$HashMapMaker<K, V> expireMaxSize(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireStoreSize(long)", "public final org.mapdb.DB$HashMapMaker<K, V> expireStoreSize(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireOverflow(java.util.Map<K, V>)", "public final org.mapdb.DB$HashMapMaker<K, V> expireOverflow(java.util.Map<K, V>)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.valueLoader(kotlin.jvm.functions.Function1<? super K, ? extends V>)", "public final org.mapdb.DB$HashMapMaker<K, V> valueLoader(kotlin.jvm.functions.Function1<? super K, ? extends V>)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.counterEnable()", "public final org.mapdb.DB$HashMapMaker<K, V> counterEnable()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.modificationListener(org.mapdb.MapModificationListener<K, V>)", "public final org.mapdb.DB$HashMapMaker<K, V> modificationListener(org.mapdb.MapModificationListener<K, V>)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HashMapMaker.create()", "public org.mapdb.HTreeMap<K, V> create()"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.create()", "public java.lang.Object create()"], ["org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HashMapMaker.createOrOpen()", "public org.mapdb.HTreeMap<K, V> createOrOpen()"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.createOrOpen()", "public java.lang.Object createOrOpen()"], ["org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HashMapMaker.open()", "public org.mapdb.HTreeMap<K, V> open()"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.open()", "public java.lang.Object open()"], ["org.mapdb.DB$HashMapMaker", "org.mapdb.DB$HashMapMaker(org.mapdb.DB, java.lang.String, boolean, kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends org.mapdb.Store>)", "public org.mapdb.DB$HashMapMaker(org.mapdb.DB, java.lang.String, boolean, kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends org.mapdb.Store>)"], ["org.mapdb.DB$HashMapMaker", "org.mapdb.DB$HashMapMaker(org.mapdb.DB, java.lang.String, boolean, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$HashMapMaker(org.mapdb.DB, java.lang.String, boolean, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.Serializer", "org.mapdb.DB$HashMapMaker.access$get_valueSerializer$p(org.mapdb.DB$HashMapMaker)", "public static final org.mapdb.Serializer access$get_valueSerializer$p(org.mapdb.DB$HashMapMaker)"], ["void", "org.mapdb.DB$HashMapMaker.access$set_valueSerializer$p(org.mapdb.DB$HashMapMaker, org.mapdb.Serializer)", "public static final void access$set_valueSerializer$p(org.mapdb.DB$HashMapMaker, org.mapdb.Serializer)"], ["java.lang.Object", "org.mapdb.DB$HashSetMaker$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["org.mapdb.Store", "org.mapdb.DB$HashSetMaker$1.invoke(int)", "public final org.mapdb.Store invoke(int)"], ["<A> org.mapdb.DB$HashSetMaker<A>", "org.mapdb.DB$HashSetMaker.serializer(org.mapdb.Serializer<A>)", "public final <A> org.mapdb.DB$HashSetMaker<A> serializer(org.mapdb.Serializer<A>)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.counterEnable()", "public final org.mapdb.DB$HashSetMaker<E> counterEnable()"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.removeCollapsesIndexTreeDisable()", "public final org.mapdb.DB$HashSetMaker<E> removeCollapsesIndexTreeDisable()"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.hashSeed(int)", "public final org.mapdb.DB$HashSetMaker<E> hashSeed(int)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.layout(int, int, int)", "public final org.mapdb.DB$HashSetMaker<E> layout(int, int, int)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireAfterCreate()", "public final org.mapdb.DB$HashSetMaker<E> expireAfterCreate()"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireAfterCreate(long)", "public final org.mapdb.DB$HashSetMaker<E> expireAfterCreate(long)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireAfterCreate(long, java.util.concurrent.TimeUnit)", "public final org.mapdb.DB$HashSetMaker<E> expireAfterCreate(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireAfterGet()", "public final org.mapdb.DB$HashSetMaker<E> expireAfterGet()"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireAfterGet(long)", "public final org.mapdb.DB$HashSetMaker<E> expireAfterGet(long)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireAfterGet(long, java.util.concurrent.TimeUnit)", "public final org.mapdb.DB$HashSetMaker<E> expireAfterGet(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireExecutor(java.util.concurrent.ScheduledExecutorService)", "public final org.mapdb.DB$HashSetMaker<E> expireExecutor(java.util.concurrent.ScheduledExecutorService)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireExecutorPeriod(long)", "public final org.mapdb.DB$HashSetMaker<E> expireExecutorPeriod(long)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireCompactThreshold(double)", "public final org.mapdb.DB$HashSetMaker<E> expireCompactThreshold(double)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireMaxSize(long)", "public final org.mapdb.DB$HashSetMaker<E> expireMaxSize(long)"], ["org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB$HashSetMaker.expireStoreSize(long)", "public final org.mapdb.DB$HashSetMaker<E> expireStoreSize(long)"], ["java.lang.Object", "org.mapdb.DB$HashSetMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$HashSetMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["org.mapdb.DB$HashSetMaker", "org.mapdb.DB$HashSetMaker(org.mapdb.DB, java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends org.mapdb.Store>)", "public org.mapdb.DB$HashSetMaker(org.mapdb.DB, java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends org.mapdb.Store>)"], ["org.mapdb.DB$HashSetMaker", "org.mapdb.DB$HashSetMaker(org.mapdb.DB, java.lang.String, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$HashSetMaker(org.mapdb.DB, java.lang.String, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeListMaker$layout$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["int", "org.mapdb.DB$IndexTreeListMaker$layout$1.invoke(int)", "public final int invoke(int)"], ["org.mapdb.DB$IndexTreeListMaker<E>", "org.mapdb.DB$IndexTreeListMaker.layout(int, int)", "public final org.mapdb.DB$IndexTreeListMaker<E> layout(int, int)"], ["org.mapdb.DB$IndexTreeListMaker<E>", "org.mapdb.DB$IndexTreeListMaker.removeCollapsesIndexTreeDisable()", "public final org.mapdb.DB$IndexTreeListMaker<E> removeCollapsesIndexTreeDisable()"], ["java.lang.Object", "org.mapdb.DB$IndexTreeListMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeListMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.DB$IndexTreeListMaker", "org.mapdb.DB$IndexTreeListMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer<E>)", "public org.mapdb.DB$IndexTreeListMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer<E>)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeLongLongMapMaker$layout$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["int", "org.mapdb.DB$IndexTreeLongLongMapMaker$layout$1.invoke(int)", "public final int invoke(int)"], ["org.mapdb.DB$IndexTreeLongLongMapMaker", "org.mapdb.DB$IndexTreeLongLongMapMaker.layout(int, int)", "public final org.mapdb.DB$IndexTreeLongLongMapMaker layout(int, int)"], ["org.mapdb.DB$IndexTreeLongLongMapMaker", "org.mapdb.DB$IndexTreeLongLongMapMaker.removeCollapsesIndexTreeDisable()", "public final org.mapdb.DB$IndexTreeLongLongMapMaker removeCollapsesIndexTreeDisable()"], ["java.lang.Object", "org.mapdb.DB$IndexTreeLongLongMapMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeLongLongMapMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.DB$IndexTreeLongLongMapMaker", "org.mapdb.DB$IndexTreeLongLongMapMaker(org.mapdb.DB, java.lang.String)", "public org.mapdb.DB$IndexTreeLongLongMapMaker(org.mapdb.DB, java.lang.String)"], ["java.lang.String", "org.mapdb.DB$Keys.getType()", "public final java.lang.String getType()"], ["java.lang.String", "org.mapdb.DB$Keys.getKeySerializer()", "public final java.lang.String getKeySerializer()"], ["java.lang.String", "org.mapdb.DB$Keys.getValueSerializer()", "public final java.lang.String getValueSerializer()"], ["java.lang.String", "org.mapdb.DB$Keys.getSerializer()", "public final java.lang.String getSerializer()"], ["java.lang.String", "org.mapdb.DB$Keys.getValueInline()", "public final java.lang.String getValueInline()"], ["java.lang.String", "org.mapdb.DB$Keys.getCounterRecids()", "public final java.lang.String getCounterRecids()"], ["java.lang.String", "org.mapdb.DB$Keys.getHashSeed()", "public final java.lang.String getHashSeed()"], ["java.lang.String", "org.mapdb.DB$Keys.getSegmentRecids()", "public final java.lang.String getSegmentRecids()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireCreateTTL()", "public final java.lang.String getExpireCreateTTL()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireUpdateTTL()", "public final java.lang.String getExpireUpdateTTL()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireGetTTL()", "public final java.lang.String getExpireGetTTL()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireCreateQueue()", "public final java.lang.String getExpireCreateQueue()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireUpdateQueue()", "public final java.lang.String getExpireUpdateQueue()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireGetQueue()", "public final java.lang.String getExpireGetQueue()"], ["java.lang.String", "org.mapdb.DB$Keys.getRootRecids()", "public final java.lang.String getRootRecids()"], ["java.lang.String", "org.mapdb.DB$Keys.getRootRecid()", "public final java.lang.String getRootRecid()"], ["java.lang.String", "org.mapdb.DB$Keys.getConcShift()", "public final java.lang.String getConcShift()"], ["java.lang.String", "org.mapdb.DB$Keys.getDirShift()", "public final java.lang.String getDirShift()"], ["java.lang.String", "org.mapdb.DB$Keys.getLevels()", "public final java.lang.String getLevels()"], ["java.lang.String", "org.mapdb.DB$Keys.getRemoveCollapsesIndexTree()", "public final java.lang.String getRemoveCollapsesIndexTree()"], ["java.lang.String", "org.mapdb.DB$Keys.getRootRecidRecid()", "public final java.lang.String getRootRecidRecid()"], ["java.lang.String", "org.mapdb.DB$Keys.getCounterRecid()", "public final java.lang.String getCounterRecid()"], ["java.lang.String", "org.mapdb.DB$Keys.getMaxNodeSize()", "public final java.lang.String getMaxNodeSize()"], ["java.lang.String", "org.mapdb.DB$Keys.getSize()", "public final java.lang.String getSize()"], ["java.lang.String", "org.mapdb.DB$Keys.getRecid()", "public final java.lang.String getRecid()"], ["E", "org.mapdb.DB$Maker.create()", "public E create()"], ["E", "org.mapdb.DB$Maker.make()", "public E make()"], ["E", "org.mapdb.DB$Maker.makeOrGet()", "public E makeOrGet()"], ["E", "org.mapdb.DB$Maker.createOrOpen()", "public E createOrOpen()"], ["E", "org.mapdb.DB$Maker.open()", "public E open()"], ["void", "org.mapdb.DB$Maker.%%%verify$mapdb()", "public final void %%%verify$mapdb()"], ["E", "org.mapdb.DB$Maker.%%%create2$mapdb(java.util.SortedMap<java.lang.String, java.lang.String>)", "public final E %%%create2$mapdb(java.util.SortedMap<java.lang.String, java.lang.String>)"], ["E", "org.mapdb.DB$Maker.%%%open2$mapdb(java.util.SortedMap<java.lang.String, java.lang.String>)", "public final E %%%open2$mapdb(java.util.SortedMap<java.lang.String, java.lang.String>)"], ["org.mapdb.DB$Maker", "org.mapdb.DB$Maker()", "public org.mapdb.DB$Maker()"], ["void", "org.mapdb.DB$TreeMapMaker$createFromSink$1.put(kotlin.Pair<? extends K, ? extends V>)", "public void put(kotlin.Pair<? extends K, ? extends V>)"], ["void", "org.mapdb.DB$TreeMapMaker$createFromSink$1.put(java.lang.Object)", "public void put(java.lang.Object)"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker$createFromSink$1.create()", "public org.mapdb.BTreeMap<K, V> create()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker$createFromSink$1.create()", "public java.lang.Object create()"], ["<A> org.mapdb.DB$TreeMapMaker<A, V>", "org.mapdb.DB$TreeMapMaker.keySerializer(org.mapdb.serializer.GroupSerializer<A>)", "public final <A> org.mapdb.DB$TreeMapMaker<A, V> keySerializer(org.mapdb.serializer.GroupSerializer<A>)"], ["<A> org.mapdb.DB$TreeMapMaker<K, A>", "org.mapdb.DB$TreeMapMaker.valueSerializer(org.mapdb.serializer.GroupSerializer<A>)", "public final <A> org.mapdb.DB$TreeMapMaker<K, A> valueSerializer(org.mapdb.serializer.GroupSerializer<A>)"], ["org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB$TreeMapMaker.maxNodeSize(int)", "public final org.mapdb.DB$TreeMapMaker<K, V> maxNodeSize(int)"], ["org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB$TreeMapMaker.counterEnable()", "public final org.mapdb.DB$TreeMapMaker<K, V> counterEnable()"], ["org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB$TreeMapMaker.valuesOutsideNodesEnable()", "public final org.mapdb.DB$TreeMapMaker<K, V> valuesOutsideNodesEnable()"], ["org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB$TreeMapMaker.modificationListener(org.mapdb.MapModificationListener<K, V>)", "public final org.mapdb.DB$TreeMapMaker<K, V> modificationListener(org.mapdb.MapModificationListener<K, V>)"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker.createFrom(java.util.Iterator<? extends kotlin.Pair<? extends K, ? extends V>>)", "public final org.mapdb.BTreeMap<K, V> createFrom(java.util.Iterator<? extends kotlin.Pair<? extends K, ? extends V>>)"], ["org.mapdb.DB$TreeMapSink<K, V>", "org.mapdb.DB$TreeMapMaker.createFromSink()", "public final org.mapdb.DB$TreeMapSink<K, V> createFromSink()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker.create()", "public org.mapdb.BTreeMap<K, V> create()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.create()", "public java.lang.Object create()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker.createOrOpen()", "public org.mapdb.BTreeMap<K, V> createOrOpen()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.createOrOpen()", "public java.lang.Object createOrOpen()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker.open()", "public org.mapdb.BTreeMap<K, V> open()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.open()", "public java.lang.Object open()"], ["org.mapdb.DB$TreeMapMaker", "org.mapdb.DB$TreeMapMaker(org.mapdb.DB, java.lang.String, boolean)", "public org.mapdb.DB$TreeMapMaker(org.mapdb.DB, java.lang.String, boolean)"], ["org.mapdb.DB$TreeMapMaker", "org.mapdb.DB$TreeMapMaker(org.mapdb.DB, java.lang.String, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB$TreeMapMaker(org.mapdb.DB, java.lang.String, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Long", "org.mapdb.DB$TreeMapMaker.access$get_rootRecidRecid$p(org.mapdb.DB$TreeMapMaker)", "public static final java.lang.Long access$get_rootRecidRecid$p(org.mapdb.DB$TreeMapMaker)"], ["void", "org.mapdb.DB$TreeMapMaker.access$set_rootRecidRecid$p(org.mapdb.DB$TreeMapMaker, java.lang.Long)", "public static final void access$set_rootRecidRecid$p(org.mapdb.DB$TreeMapMaker, java.lang.Long)"], ["java.lang.Long", "org.mapdb.DB$TreeMapMaker.access$get_counterRecid$p(org.mapdb.DB$TreeMapMaker)", "public static final java.lang.Long access$get_counterRecid$p(org.mapdb.DB$TreeMapMaker)"], ["void", "org.mapdb.DB$TreeMapMaker.access$set_counterRecid$p(org.mapdb.DB$TreeMapMaker, java.lang.Long)", "public static final void access$set_counterRecid$p(org.mapdb.DB$TreeMapMaker, java.lang.Long)"], ["boolean", "org.mapdb.DB$TreeMapMaker.access$get_counterEnable$p(org.mapdb.DB$TreeMapMaker)", "public static final boolean access$get_counterEnable$p(org.mapdb.DB$TreeMapMaker)"], ["void", "org.mapdb.DB$TreeMapMaker.access$set_counterEnable$p(org.mapdb.DB$TreeMapMaker, boolean)", "public static final void access$set_counterEnable$p(org.mapdb.DB$TreeMapMaker, boolean)"], ["void", "org.mapdb.DB$TreeMapSink.put(K, V)", "public final void put(K, V)"], ["void", "org.mapdb.DB$TreeMapSink.putAll(java.util.SortedMap<K, V>)", "public final void putAll(java.util.SortedMap<K, V>)"], ["org.mapdb.DB$TreeMapSink", "org.mapdb.DB$TreeMapSink()", "public org.mapdb.DB$TreeMapSink()"], ["<A> org.mapdb.DB$TreeSetMaker<A>", "org.mapdb.DB$TreeSetMaker.serializer(org.mapdb.serializer.GroupSerializer<A>)", "public final <A> org.mapdb.DB$TreeSetMaker<A> serializer(org.mapdb.serializer.GroupSerializer<A>)"], ["org.mapdb.DB$TreeSetMaker<E>", "org.mapdb.DB$TreeSetMaker.maxNodeSize(int)", "public final org.mapdb.DB$TreeSetMaker<E> maxNodeSize(int)"], ["org.mapdb.DB$TreeSetMaker<E>", "org.mapdb.DB$TreeSetMaker.counterEnable()", "public final org.mapdb.DB$TreeSetMaker<E> counterEnable()"], ["java.lang.Object", "org.mapdb.DB$TreeSetMaker.open2(java.util.SortedMap)", "public java.lang.Object open2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$TreeSetMaker.create2(java.util.SortedMap)", "public java.lang.Object create2(java.util.SortedMap)"], ["org.mapdb.DB$TreeSetMaker", "org.mapdb.DB$TreeSetMaker(org.mapdb.DB, java.lang.String)", "public org.mapdb.DB$TreeSetMaker(org.mapdb.DB, java.lang.String)"], ["void", "org.mapdb.DB$classInfoSerializer$1.serialize(org.mapdb.DataOutput2, org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[])", "public void serialize(org.mapdb.DataOutput2, org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[])"], ["void", "org.mapdb.DB$classInfoSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[]", "org.mapdb.DB$classInfoSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[] deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.DB$classInfoSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.DB$defaultSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.DB$defaultSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["void", "org.mapdb.DB$elsaSerializer$3.classMissing(java.lang.Class<java.lang.Object>)", "public final void classMissing(java.lang.Class<java.lang.Object>)"], ["int", "org.mapdb.DB$elsaSerializer$4.classToId(java.lang.String)", "public int classToId(java.lang.String)"], ["org.mapdb.elsa.ElsaSerializerPojo$ClassInfo", "org.mapdb.DB$elsaSerializer$4.getClassInfo(int)", "public org.mapdb.elsa.ElsaSerializerPojo$ClassInfo getClassInfo(int)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$all$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["java.lang.Void", "org.mapdb.DB$nameCatalogVerifyTree$all$1.invoke(java.lang.String)", "public final java.lang.Void invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$boolean$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$boolean$1.invoke(java.lang.String)", "public final java.lang.String invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$int$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$int$1.invoke(java.lang.String)", "public final java.lang.String invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$long$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$long$1.invoke(java.lang.String)", "public final java.lang.String invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$recid$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$recid$1.invoke(java.lang.String)", "public final java.lang.String invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$recidOptional$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$recidOptional$1.invoke(java.lang.String)", "public final java.lang.String invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameDeser$1.deserialize(java.io.DataInput, org.mapdb.elsa.ElsaStack)", "public java.lang.Object deserialize(java.io.DataInput, org.mapdb.elsa.ElsaStack)"], ["void", "org.mapdb.DB$nameSer$1.serialize(java.io.DataOutput, java.lang.Object, org.mapdb.elsa.ElsaStack)", "public void serialize(java.io.DataOutput, java.lang.Object, org.mapdb.elsa.ElsaStack)"], ["org.mapdb.Store", "org.mapdb.DB.getStore()", "public final org.mapdb.Store getStore()"], ["org.mapdb.serializer.GroupSerializerObjectArray<java.lang.Object>", "org.mapdb.DB.getDefaultSerializer()", "public final org.mapdb.serializer.GroupSerializerObjectArray<java.lang.Object> getDefaultSerializer()"], ["java.util.SortedMap<java.lang.String, java.lang.String>", "org.mapdb.DB.nameCatalogLoad()", "public final java.util.SortedMap<java.lang.String, java.lang.String> nameCatalogLoad()"], ["void", "org.mapdb.DB.nameCatalogSave(java.util.SortedMap<java.lang.String, java.lang.String>)", "public final void nameCatalogSave(java.util.SortedMap<java.lang.String, java.lang.String>)"], ["void", "org.mapdb.DB.nameCatalogPutClass(java.util.SortedMap<java.lang.String, java.lang.String>, java.lang.String, java.lang.Object)", "public final void nameCatalogPutClass(java.util.SortedMap<java.lang.String, java.lang.String>, java.lang.String, java.lang.Object)"], ["<E> E", "org.mapdb.DB.nameCatalogGetClass(java.util.SortedMap<java.lang.String, java.lang.String>, java.lang.String)", "public final <E> E nameCatalogGetClass(java.util.SortedMap<java.lang.String, java.lang.String>, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.mapdb.DB.nameCatalogParamsFor(java.lang.String)", "public final java.util.Map<java.lang.String, java.lang.String> nameCatalogParamsFor(java.lang.String)"], ["void", "org.mapdb.DB.commit()", "public final void commit()"], ["void", "org.mapdb.DB.rollback()", "public final void rollback()"], ["boolean", "org.mapdb.DB.isClosed()", "public final boolean isClosed()"], ["void", "org.mapdb.DB.close()", "public void close()"], ["<E> E", "org.mapdb.DB.get(java.lang.String)", "public final <E> E get(java.lang.String)"], ["java.lang.String", "org.mapdb.DB.getNameForObject(java.lang.Object)", "public final java.lang.String getNameForObject(java.lang.Object)"], ["boolean", "org.mapdb.DB.exists(java.lang.String)", "public final boolean exists(java.lang.String)"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.DB.getAllNames()", "public final java.lang.Iterable<java.lang.String> getAllNames()"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.mapdb.DB.getAll()", "public final java.util.Map<java.lang.String, java.lang.Object> getAll()"], ["org.mapdb.DB$HashMapMaker<?, ?>", "org.mapdb.DB.hashMap(java.lang.String)", "public final org.mapdb.DB$HashMapMaker<?, ?> hashMap(java.lang.String)"], ["<K, V> org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB.hashMap(java.lang.String, org.mapdb.Serializer<K>, org.mapdb.Serializer<V>)", "public final <K, V> org.mapdb.DB$HashMapMaker<K, V> hashMap(java.lang.String, org.mapdb.Serializer<K>, org.mapdb.Serializer<V>)"], ["org.mapdb.DB$TreeMapMaker<?, ?>", "org.mapdb.DB.treeMap(java.lang.String)", "public final org.mapdb.DB$TreeMapMaker<?, ?> treeMap(java.lang.String)"], ["<K, V> org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB.treeMap(java.lang.String, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)", "public final <K, V> org.mapdb.DB$TreeMapMaker<K, V> treeMap(java.lang.String, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["org.mapdb.DB$TreeSetMaker<?>", "org.mapdb.DB.treeSet(java.lang.String)", "public final org.mapdb.DB$TreeSetMaker<?> treeSet(java.lang.String)"], ["<E> org.mapdb.DB$TreeSetMaker<E>", "org.mapdb.DB.treeSet(java.lang.String, org.mapdb.serializer.GroupSerializer<E>)", "public final <E> org.mapdb.DB$TreeSetMaker<E> treeSet(java.lang.String, org.mapdb.serializer.GroupSerializer<E>)"], ["org.mapdb.DB$HashSetMaker<?>", "org.mapdb.DB.hashSet(java.lang.String)", "public final org.mapdb.DB$HashSetMaker<?> hashSet(java.lang.String)"], ["<E> org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB.hashSet(java.lang.String, org.mapdb.Serializer<E>)", "public final <E> org.mapdb.DB$HashSetMaker<E> hashSet(java.lang.String, org.mapdb.Serializer<E>)"], ["org.mapdb.DB$AtomicIntegerMaker", "org.mapdb.DB.atomicInteger(java.lang.String)", "public final org.mapdb.DB$AtomicIntegerMaker atomicInteger(java.lang.String)"], ["org.mapdb.DB$AtomicIntegerMaker", "org.mapdb.DB.atomicInteger(java.lang.String, int)", "public final org.mapdb.DB$AtomicIntegerMaker atomicInteger(java.lang.String, int)"], ["org.mapdb.DB$AtomicLongMaker", "org.mapdb.DB.atomicLong(java.lang.String)", "public final org.mapdb.DB$AtomicLongMaker atomicLong(java.lang.String)"], ["org.mapdb.DB$AtomicLongMaker", "org.mapdb.DB.atomicLong(java.lang.String, long)", "public final org.mapdb.DB$AtomicLongMaker atomicLong(java.lang.String, long)"], ["org.mapdb.DB$AtomicBooleanMaker", "org.mapdb.DB.atomicBoolean(java.lang.String)", "public final org.mapdb.DB$AtomicBooleanMaker atomicBoolean(java.lang.String)"], ["org.mapdb.DB$AtomicBooleanMaker", "org.mapdb.DB.atomicBoolean(java.lang.String, boolean)", "public final org.mapdb.DB$AtomicBooleanMaker atomicBoolean(java.lang.String, boolean)"], ["org.mapdb.DB$AtomicStringMaker", "org.mapdb.DB.atomicString(java.lang.String)", "public final org.mapdb.DB$AtomicStringMaker atomicString(java.lang.String)"], ["org.mapdb.DB$AtomicStringMaker", "org.mapdb.DB.atomicString(java.lang.String, java.lang.String)", "public final org.mapdb.DB$AtomicStringMaker atomicString(java.lang.String, java.lang.String)"], ["org.mapdb.DB$AtomicVarMaker<java.lang.Object>", "org.mapdb.DB.atomicVar(java.lang.String)", "public final org.mapdb.DB$AtomicVarMaker<java.lang.Object> atomicVar(java.lang.String)"], ["<E> org.mapdb.DB$AtomicVarMaker<E>", "org.mapdb.DB.atomicVar(java.lang.String, org.mapdb.Serializer<E>)", "public final <E> org.mapdb.DB$AtomicVarMaker<E> atomicVar(java.lang.String, org.mapdb.Serializer<E>)"], ["<E> org.mapdb.DB$AtomicVarMaker<E>", "org.mapdb.DB.atomicVar(java.lang.String, org.mapdb.Serializer<E>, E)", "public final <E> org.mapdb.DB$AtomicVarMaker<E> atomicVar(java.lang.String, org.mapdb.Serializer<E>, E)"], ["<E> org.mapdb.DB$IndexTreeListMaker<E>", "org.mapdb.DB.indexTreeList(java.lang.String, org.mapdb.Serializer<E>)", "public final <E> org.mapdb.DB$IndexTreeListMaker<E> indexTreeList(java.lang.String, org.mapdb.Serializer<E>)"], ["org.mapdb.DB$IndexTreeListMaker<java.lang.Object>", "org.mapdb.DB.indexTreeList(java.lang.String)", "public final org.mapdb.DB$IndexTreeListMaker<java.lang.Object> indexTreeList(java.lang.String)"], ["void", "org.mapdb.DB.checkThreadSafe()", "public void checkThreadSafe()"], ["void", "org.mapdb.DB.defaultSerializerRegisterClass(java.lang.Class<?>)", "public final void defaultSerializerRegisterClass(java.lang.Class<?>)"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.DB.nameCatalogVerifyGetMessages()", "public final java.lang.Iterable<java.lang.String> nameCatalogVerifyGetMessages()"], ["boolean", "org.mapdb.DB.isThreadSafe()", "public boolean isThreadSafe()"], ["java.lang.ClassLoader", "org.mapdb.DB.getClassLoader()", "public final java.lang.ClassLoader getClassLoader()"], ["int", "org.mapdb.DB.getShutdownHook()", "public final int getShutdownHook()"], ["org.mapdb.DB", "org.mapdb.DB(org.mapdb.Store, boolean, boolean, java.lang.ClassLoader, int)", "public org.mapdb.DB(org.mapdb.Store, boolean, boolean, java.lang.ClassLoader, int)"], ["org.mapdb.DB", "org.mapdb.DB(org.mapdb.Store, boolean, boolean, java.lang.ClassLoader, int, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DB(org.mapdb.Store, boolean, boolean, java.lang.ClassLoader, int, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.Store", "org.mapdb.DB.access$getStore$p(org.mapdb.DB)", "public static final org.mapdb.Store access$getStore$p(org.mapdb.DB)"], ["java.util.Set", "org.mapdb.DB.access$getUnknownClasses$p(org.mapdb.DB)", "public static final java.util.Set access$getUnknownClasses$p(org.mapdb.DB)"], ["org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[]", "org.mapdb.DB.access$loadClassInfos(org.mapdb.DB)", "public static final org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[] access$loadClassInfos(org.mapdb.DB)"], ["org.mapdb.elsa.ElsaSerializerPojo", "org.mapdb.DB.access$getElsaSerializer$p(org.mapdb.DB)", "public static final org.mapdb.elsa.ElsaSerializerPojo access$getElsaSerializer$p(org.mapdb.DB)"], ["org.mapdb.Serializer", "org.mapdb.DB.access$getNAME_CATALOG_SERIALIZER$cp()", "public static final org.mapdb.Serializer access$getNAME_CATALOG_SERIALIZER$cp()"], ["int", "org.mapdb.DB.access$getNAMED_SERIALIZATION_HEADER$cp()", "public static final int access$getNAMED_SERIALIZATION_HEADER$cp()"], ["java.util.Map", "org.mapdb.DB.access$getShutdownHooks$cp()", "public static final java.util.Map access$getShutdownHooks$cp()"], ["java.util.concurrent.atomic.AtomicBoolean", "org.mapdb.DB.access$getShutdownHookInstalled$cp()", "public static final java.util.concurrent.atomic.AtomicBoolean access$getShutdownHookInstalled$cp()"], ["void", "org.mapdb.DB.access$setShutdownHookInstalled$cp(java.util.concurrent.atomic.AtomicBoolean)", "public static final void access$setShutdownHookInstalled$cp(java.util.concurrent.atomic.AtomicBoolean)"], ["org.mapdb.DBException$DataCorruption", "org.mapdb.DBException$DataCorruption(java.lang.String)", "public org.mapdb.DBException$DataCorruption(java.lang.String)"], ["org.mapdb.DBException$FileLocked", "org.mapdb.DBException$FileLocked(java.nio.file.Path, java.lang.Exception)", "public org.mapdb.DBException$FileLocked(java.nio.file.Path, java.lang.Exception)"], ["org.mapdb.DBException$GetVoid", "org.mapdb.DBException$GetVoid(long)", "public org.mapdb.DBException$GetVoid(long)"], ["org.mapdb.DBException$Interrupted", "org.mapdb.DBException$Interrupted(java.lang.InterruptedException)", "public org.mapdb.DBException$Interrupted(java.lang.InterruptedException)"], ["org.mapdb.DBException$NewMapDBFormat", "org.mapdb.DBException$NewMapDBFormat(java.lang.String)", "public org.mapdb.DBException$NewMapDBFormat(java.lang.String)"], ["org.mapdb.DBException$NewMapDBFormat", "org.mapdb.DBException$NewMapDBFormat(java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DBException$NewMapDBFormat(java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.DBException$NewMapDBFormat", "org.mapdb.DBException$NewMapDBFormat()", "public org.mapdb.DBException$NewMapDBFormat()"], ["org.mapdb.DBException$NotSorted", "org.mapdb.DBException$NotSorted()", "public org.mapdb.DBException$NotSorted()"], ["org.mapdb.DBException$OutOfMemory", "org.mapdb.DBException$OutOfMemory(java.lang.Throwable)", "public org.mapdb.DBException$OutOfMemory(java.lang.Throwable)"], ["org.mapdb.DBException$PointerChecksumBroken", "org.mapdb.DBException$PointerChecksumBroken()", "public org.mapdb.DBException$PointerChecksumBroken()"], ["org.mapdb.DBException$SerializationError", "org.mapdb.DBException$SerializationError(java.lang.String, java.lang.Throwable)", "public org.mapdb.DBException$SerializationError(java.lang.String, java.lang.Throwable)"], ["org.mapdb.DBException$SerializationError", "org.mapdb.DBException$SerializationError(java.lang.Throwable)", "public org.mapdb.DBException$SerializationError(java.lang.Throwable)"], ["org.mapdb.DBException$SerializationError", "org.mapdb.DBException$SerializationError(java.lang.String)", "public org.mapdb.DBException$SerializationError(java.lang.String)"], ["org.mapdb.DBException$VolumeClosed", "org.mapdb.DBException$VolumeClosed(java.lang.String, java.lang.Throwable)", "public org.mapdb.DBException$VolumeClosed(java.lang.String, java.lang.Throwable)"], ["org.mapdb.DBException$VolumeClosed", "org.mapdb.DBException$VolumeClosed(java.lang.Throwable)", "public org.mapdb.DBException$VolumeClosed(java.lang.Throwable)"], ["org.mapdb.DBException$VolumeClosed", "org.mapdb.DBException$VolumeClosed(java.lang.String)", "public org.mapdb.DBException$VolumeClosed(java.lang.String)"], ["org.mapdb.DBException$VolumeClosedByInterrupt", "org.mapdb.DBException$VolumeClosedByInterrupt(java.lang.Throwable)", "public org.mapdb.DBException$VolumeClosedByInterrupt(java.lang.Throwable)"], ["org.mapdb.DBException$VolumeEOF", "org.mapdb.DBException$VolumeEOF(java.lang.String, java.io.IOException)", "public org.mapdb.DBException$VolumeEOF(java.lang.String, java.io.IOException)"], ["org.mapdb.DBException$VolumeEOF", "org.mapdb.DBException$VolumeEOF(java.io.IOException)", "public org.mapdb.DBException$VolumeEOF(java.io.IOException)"], ["org.mapdb.DBException$VolumeEOF", "org.mapdb.DBException$VolumeEOF(java.lang.String)", "public org.mapdb.DBException$VolumeEOF(java.lang.String)"], ["org.mapdb.DBException$VolumeIOError", "org.mapdb.DBException$VolumeIOError(java.lang.String, java.lang.Throwable)", "public org.mapdb.DBException$VolumeIOError(java.lang.String, java.lang.Throwable)"], ["org.mapdb.DBException$VolumeIOError", "org.mapdb.DBException$VolumeIOError(java.io.IOException)", "public org.mapdb.DBException$VolumeIOError(java.io.IOException)"], ["org.mapdb.DBException$VolumeIOError", "org.mapdb.DBException$VolumeIOError(java.lang.String)", "public org.mapdb.DBException$VolumeIOError(java.lang.String)"], ["org.mapdb.DBException$VolumeMaxSizeExceeded", "org.mapdb.DBException$VolumeMaxSizeExceeded(long, long)", "public org.mapdb.DBException$VolumeMaxSizeExceeded(long, long)"], ["org.mapdb.DBException$WrongConfiguration", "org.mapdb.DBException$WrongConfiguration(java.lang.String)", "public org.mapdb.DBException$WrongConfiguration(java.lang.String)"], ["org.mapdb.DBException$WrongFormat", "org.mapdb.DBException$WrongFormat(java.lang.String)", "public org.mapdb.DBException$WrongFormat(java.lang.String)"], ["org.mapdb.DBException", "org.mapdb.DBException(java.lang.String, java.lang.Throwable)", "public org.mapdb.DBException(java.lang.String, java.lang.Throwable)"], ["org.mapdb.DBException", "org.mapdb.DBException(java.lang.String)", "public org.mapdb.DBException(java.lang.String)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.transactionEnable()", "public final org.mapdb.DBMaker$Maker transactionEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.allocateStartSize(long)", "public final org.mapdb.DBMaker$Maker allocateStartSize(long)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.allocateIncrement(long)", "public final org.mapdb.DBMaker$Maker allocateIncrement(long)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.deleteFilesAfterClose()", "public final org.mapdb.DBMaker$Maker deleteFilesAfterClose()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileDeleteAfterClose()", "public final org.mapdb.DBMaker$Maker fileDeleteAfterClose()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileDeleteAfterOpen()", "public final org.mapdb.DBMaker$Maker fileDeleteAfterOpen()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.executorEnable()", "public final org.mapdb.DBMaker$Maker executorEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.concurrencyDisable()", "public final org.mapdb.DBMaker$Maker concurrencyDisable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.concurrencyScale(int)", "public final org.mapdb.DBMaker$Maker concurrencyScale(int)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileMmapEnable()", "public final org.mapdb.DBMaker$Maker fileMmapEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.cleanerHackEnable()", "public final org.mapdb.DBMaker$Maker cleanerHackEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileMmapPreclearDisable()", "public final org.mapdb.DBMaker$Maker fileMmapPreclearDisable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileLockDisable()", "public final org.mapdb.DBMaker$Maker fileLockDisable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileLockWait(long)", "public final org.mapdb.DBMaker$Maker fileLockWait(long)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileLockWait()", "public final org.mapdb.DBMaker$Maker fileLockWait()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.checksumStoreEnable()", "public final org.mapdb.DBMaker$Maker checksumStoreEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.checksumHeaderBypass()", "public final org.mapdb.DBMaker$Maker checksumHeaderBypass()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileMmapEnableIfSupported()", "public final org.mapdb.DBMaker$Maker fileMmapEnableIfSupported()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileChannelEnable()", "public final org.mapdb.DBMaker$Maker fileChannelEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.closeOnJvmShutdown()", "public final org.mapdb.DBMaker$Maker closeOnJvmShutdown()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.closeOnJvmShutdownWeakReference()", "public final org.mapdb.DBMaker$Maker closeOnJvmShutdownWeakReference()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.readOnly()", "public final org.mapdb.DBMaker$Maker readOnly()"], ["org.mapdb.DB", "org.mapdb.DBMaker$Maker.make()", "public final org.mapdb.DB make()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker(org.mapdb.DBMaker$StoreType, org.mapdb.volume.Volume, java.lang.Boolean, java.lang.String)", "public org.mapdb.DBMaker$Maker(org.mapdb.DBMaker$StoreType, org.mapdb.volume.Volume, java.lang.Boolean, java.lang.String)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker(org.mapdb.DBMaker$StoreType, org.mapdb.volume.Volume, java.lang.Boolean, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.DBMaker$Maker(org.mapdb.DBMaker$StoreType, org.mapdb.volume.Volume, java.lang.Boolean, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.DBMaker$StoreType[]", "org.mapdb.DBMaker$StoreType.values()", "public static org.mapdb.DBMaker$StoreType[] values()"], ["org.mapdb.DBMaker$StoreType", "org.mapdb.DBMaker$StoreType.valueOf(java.lang.String)", "public static org.mapdb.DBMaker$StoreType valueOf(java.lang.String)"], ["java.lang.Object", "org.mapdb.DBMaker$heapShardedHashMap$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["org.mapdb.StoreOnHeap", "org.mapdb.DBMaker$heapShardedHashMap$1.invoke(int)", "public final org.mapdb.StoreOnHeap invoke(int)"], ["java.lang.Object", "org.mapdb.DBMaker$heapShardedHashSet$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["org.mapdb.StoreOnHeap", "org.mapdb.DBMaker$heapShardedHashSet$1.invoke(int)", "public final org.mapdb.StoreOnHeap invoke(int)"], ["java.lang.Object", "org.mapdb.DBMaker$memoryShardedHashMap$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["org.mapdb.StoreDirect", "org.mapdb.DBMaker$memoryShardedHashMap$1.invoke(int)", "public final org.mapdb.StoreDirect invoke(int)"], ["java.lang.Object", "org.mapdb.DBMaker$memoryShardedHashSet$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["org.mapdb.StoreDirect", "org.mapdb.DBMaker$memoryShardedHashSet$1.invoke(int)", "public final org.mapdb.StoreDirect invoke(int)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.tempFileDB()", "public static final org.mapdb.DBMaker$Maker tempFileDB()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.fileDB(java.lang.String)", "public static final org.mapdb.DBMaker$Maker fileDB(java.lang.String)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.fileDB(java.io.File)", "public static final org.mapdb.DBMaker$Maker fileDB(java.io.File)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.heapDB()", "public static final org.mapdb.DBMaker$Maker heapDB()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.memoryDB()", "public static final org.mapdb.DBMaker$Maker memoryDB()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.memoryDirectDB()", "public static final org.mapdb.DBMaker$Maker memoryDirectDB()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.volumeDB(org.mapdb.volume.Volume, boolean)", "public static final org.mapdb.DBMaker$Maker volumeDB(org.mapdb.volume.Volume, boolean)"], ["org.mapdb.DB$HashSetMaker<?>", "org.mapdb.DBMaker.memoryShardedHashSet(int)", "public static final org.mapdb.DB$HashSetMaker<?> memoryShardedHashSet(int)"], ["org.mapdb.DB$HashSetMaker<?>", "org.mapdb.DBMaker.heapShardedHashSet(int)", "public static final org.mapdb.DB$HashSetMaker<?> heapShardedHashSet(int)"], ["org.mapdb.DB$HashMapMaker<?, ?>", "org.mapdb.DBMaker.memoryShardedHashMap(int)", "public static final org.mapdb.DB$HashMapMaker<?, ?> memoryShardedHashMap(int)"], ["org.mapdb.DB$HashMapMaker<?, ?>", "org.mapdb.DBMaker.heapShardedHashMap(int)", "public static final org.mapdb.DB$HashMapMaker<?, ?> heapShardedHashMap(int)"], ["int", "org.mapdb.DataIO.unpackInt(java.io.DataInput)", "public static int unpackInt(java.io.DataInput) throws java.io.IOException"], ["long", "org.mapdb.DataIO.unpackLong(java.io.DataInput)", "public static long unpackLong(java.io.DataInput) throws java.io.IOException"], ["int", "org.mapdb.DataIO.unpackInt(java.io.InputStream)", "public static int unpackInt(java.io.InputStream) throws java.io.IOException"], ["long", "org.mapdb.DataIO.unpackLong(java.io.InputStream)", "public static long unpackLong(java.io.InputStream) throws java.io.IOException"], ["void", "org.mapdb.DataIO.packLong(java.io.DataOutput, long)", "public static void packLong(java.io.DataOutput, long) throws java.io.IOException"], ["void", "org.mapdb.DataIO.packLong(java.io.OutputStream, long)", "public static void packLong(java.io.OutputStream, long) throws java.io.IOException"], ["int", "org.mapdb.DataIO.packLongSize(long)", "public static int packLongSize(long)"], ["long", "org.mapdb.DataIO.unpackRecid(org.mapdb.DataInput2)", "public static long unpackRecid(org.mapdb.DataInput2) throws java.io.IOException"], ["void", "org.mapdb.DataIO.packRecid(org.mapdb.DataOutput2, long)", "public static void packRecid(org.mapdb.DataOutput2, long) throws java.io.IOException"], ["void", "org.mapdb.DataIO.packInt(java.io.DataOutput, int)", "public static void packInt(java.io.DataOutput, int) throws java.io.IOException"], ["void", "org.mapdb.DataIO.packIntBigger(java.io.DataOutput, int)", "public static void packIntBigger(java.io.DataOutput, int) throws java.io.IOException"], ["int", "org.mapdb.DataIO.longHash(long)", "public static int longHash(long)"], ["int", "org.mapdb.DataIO.intHash(int)", "public static int intHash(int)"], ["int", "org.mapdb.DataIO.getInt(byte[], int)", "public static int getInt(byte[], int)"], ["void", "org.mapdb.DataIO.putInt(byte[], int, int)", "public static void putInt(byte[], int, int)"], ["long", "org.mapdb.DataIO.getLong(byte[], int)", "public static long getLong(byte[], int)"], ["void", "org.mapdb.DataIO.putLong(byte[], int, long)", "public static void putLong(byte[], int, long)"], ["void", "org.mapdb.DataIO.putLong(byte[], int, long, int)", "public static void putLong(byte[], int, long, int)"], ["int", "org.mapdb.DataIO.packInt(byte[], int, int)", "public static int packInt(byte[], int, int)"], ["int", "org.mapdb.DataIO.packLong(byte[], int, long)", "public static int packLong(byte[], int, long)"], ["int", "org.mapdb.DataIO.unpackInt(byte[], int)", "public static int unpackInt(byte[], int)"], ["long", "org.mapdb.DataIO.unpackLong(byte[], int)", "public static long unpackLong(byte[], int)"], ["long", "org.mapdb.DataIO.getSixLong(byte[], int)", "public static long getSixLong(byte[], int)"], ["void", "org.mapdb.DataIO.putSixLong(byte[], int, long)", "public static void putSixLong(byte[], int, long)"], ["long", "org.mapdb.DataIO.nextPowTwo(long)", "public static long nextPowTwo(long)"], ["int", "org.mapdb.DataIO.nextPowTwo(int)", "public static int nextPowTwo(int)"], ["void", "org.mapdb.DataIO.readFully(java.io.InputStream, byte[], int, int)", "public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["void", "org.mapdb.DataIO.readFully(java.io.InputStream, byte[])", "public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException"], ["void", "org.mapdb.DataIO.writeFully(java.nio.channels.FileChannel, java.nio.ByteBuffer)", "public static void writeFully(java.nio.channels.FileChannel, java.nio.ByteBuffer) throws java.io.IOException"], ["void", "org.mapdb.DataIO.skipFully(java.io.InputStream, long)", "public static void skipFully(java.io.InputStream, long) throws java.io.IOException"], ["long", "org.mapdb.DataIO.fillLowBits(int)", "public static long fillLowBits(int)"], ["long", "org.mapdb.DataIO.parity1Set(long)", "public static long parity1Set(long)"], ["int", "org.mapdb.DataIO.parity1Set(int)", "public static int parity1Set(int)"], ["long", "org.mapdb.DataIO.parity1Get(long)", "public static long parity1Get(long)"], ["int", "org.mapdb.DataIO.parity1Get(int)", "public static int parity1Get(int)"], ["long", "org.mapdb.DataIO.parity3Set(long)", "public static long parity3Set(long)"], ["long", "org.mapdb.DataIO.parity3Get(long)", "public static long parity3Get(long)"], ["long", "org.mapdb.DataIO.parity4Set(long)", "public static long parity4Set(long)"], ["long", "org.mapdb.DataIO.parity4Get(long)", "public static long parity4Get(long)"], ["long", "org.mapdb.DataIO.parity16Set(long)", "public static long parity16Set(long)"], ["long", "org.mapdb.DataIO.parity16Get(long)", "public static long parity16Get(long)"], ["java.lang.String", "org.mapdb.DataIO.toHexa(byte[])", "public static java.lang.String toHexa(byte[])"], ["byte[]", "org.mapdb.DataIO.fromHexa(java.lang.String)", "public static byte[] fromHexa(java.lang.String)"], ["java.lang.Object[]", "org.mapdb.DataIO.arrayPut(java.lang.Object[], int, java.lang.Object)", "public static java.lang.Object[] arrayPut(java.lang.Object[], int, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.DataIO.arrayDelete(java.lang.Object[], int, int)", "public static java.lang.Object[] arrayDelete(java.lang.Object[], int, int)"], ["long[]", "org.mapdb.DataIO.arrayDelete(long[], int, int)", "public static long[] arrayDelete(long[], int, int)"], ["long", "org.mapdb.DataIO.intToLong(int)", "public static long intToLong(int)"], ["long", "org.mapdb.DataIO.roundUp(long, long)", "public static long roundUp(long, long)"], ["long", "org.mapdb.DataIO.roundDown(long, long)", "public static long roundDown(long, long)"], ["int", "org.mapdb.DataIO.roundUp(int, int)", "public static int roundUp(int, int)"], ["int", "org.mapdb.DataIO.roundDown(int, int)", "public static int roundDown(int, int)"], ["int", "org.mapdb.DataIO.shift(int)", "public static int shift(int)"], ["org.mapdb.DataInput2$ByteArray", "org.mapdb.DataInput2$ByteArray(byte[])", "public org.mapdb.DataInput2$ByteArray(byte[])"], ["org.mapdb.DataInput2$ByteArray", "org.mapdb.DataInput2$ByteArray(byte[], int)", "public org.mapdb.DataInput2$ByteArray(byte[], int)"], ["void", "org.mapdb.DataInput2$ByteArray.readFully(byte[], int, int)", "public void readFully(byte[], int, int) throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteArray.skipBytes(int)", "public int skipBytes(int) throws java.io.IOException"], ["boolean", "org.mapdb.DataInput2$ByteArray.readBoolean()", "public boolean readBoolean() throws java.io.IOException"], ["byte", "org.mapdb.DataInput2$ByteArray.readByte()", "public byte readByte() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteArray.readUnsignedByte()", "public int readUnsignedByte() throws java.io.IOException"], ["short", "org.mapdb.DataInput2$ByteArray.readShort()", "public short readShort() throws java.io.IOException"], ["char", "org.mapdb.DataInput2$ByteArray.readChar()", "public char readChar() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteArray.readInt()", "public int readInt() throws java.io.IOException"], ["long", "org.mapdb.DataInput2$ByteArray.readLong()", "public long readLong() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteArray.getPos()", "public int getPos()"], ["void", "org.mapdb.DataInput2$ByteArray.setPos(int)", "public void setPos(int)"], ["byte[]", "org.mapdb.DataInput2$ByteArray.internalByteArray()", "public byte[] internalByteArray()"], ["java.nio.ByteBuffer", "org.mapdb.DataInput2$ByteArray.internalByteBuffer()", "public java.nio.ByteBuffer internalByteBuffer()"], ["void", "org.mapdb.DataInput2$ByteArray.close()", "public void close()"], ["long", "org.mapdb.DataInput2$ByteArray.unpackLong()", "public long unpackLong() throws java.io.IOException"], ["void", "org.mapdb.DataInput2$ByteArray.unpackLongSkip(int)", "public void unpackLongSkip(int)"], ["int", "org.mapdb.DataInput2$ByteArray.unpackInt()", "public int unpackInt() throws java.io.IOException"], ["long[]", "org.mapdb.DataInput2$ByteArray.unpackLongArrayDeltaCompression(int)", "public long[] unpackLongArrayDeltaCompression(int) throws java.io.IOException"], ["void", "org.mapdb.DataInput2$ByteArray.unpackLongArray(long[], int, int)", "public void unpackLongArray(long[], int, int)"], ["void", "org.mapdb.DataInput2$ByteArray.unpackIntArray(int[], int, int)", "public void unpackIntArray(int[], int, int)"], ["org.mapdb.DataInput2$ByteBuffer", "org.mapdb.DataInput2$ByteBuffer(java.nio.ByteBuffer, int)", "public org.mapdb.DataInput2$ByteBuffer(java.nio.ByteBuffer, int)"], ["void", "org.mapdb.DataInput2$ByteBuffer.readFully(byte[], int, int)", "public void readFully(byte[], int, int) throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteBuffer.skipBytes(int)", "public int skipBytes(int) throws java.io.IOException"], ["boolean", "org.mapdb.DataInput2$ByteBuffer.readBoolean()", "public boolean readBoolean() throws java.io.IOException"], ["byte", "org.mapdb.DataInput2$ByteBuffer.readByte()", "public byte readByte() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteBuffer.readUnsignedByte()", "public int readUnsignedByte() throws java.io.IOException"], ["short", "org.mapdb.DataInput2$ByteBuffer.readShort()", "public short readShort() throws java.io.IOException"], ["char", "org.mapdb.DataInput2$ByteBuffer.readChar()", "public char readChar() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteBuffer.readInt()", "public int readInt() throws java.io.IOException"], ["long", "org.mapdb.DataInput2$ByteBuffer.readLong()", "public long readLong() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteBuffer.getPos()", "public int getPos()"], ["void", "org.mapdb.DataInput2$ByteBuffer.setPos(int)", "public void setPos(int)"], ["byte[]", "org.mapdb.DataInput2$ByteBuffer.internalByteArray()", "public byte[] internalByteArray()"], ["java.nio.ByteBuffer", "org.mapdb.DataInput2$ByteBuffer.internalByteBuffer()", "public java.nio.ByteBuffer internalByteBuffer()"], ["void", "org.mapdb.DataInput2$ByteBuffer.close()", "public void close()"], ["long", "org.mapdb.DataInput2$ByteBuffer.unpackLong()", "public long unpackLong() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$ByteBuffer.unpackInt()", "public int unpackInt() throws java.io.IOException"], ["long[]", "org.mapdb.DataInput2$ByteBuffer.unpackLongArrayDeltaCompression(int)", "public long[] unpackLongArrayDeltaCompression(int) throws java.io.IOException"], ["void", "org.mapdb.DataInput2$ByteBuffer.unpackLongArray(long[], int, int)", "public void unpackLongArray(long[], int, int)"], ["void", "org.mapdb.DataInput2$ByteBuffer.unpackLongSkip(int)", "public void unpackLongSkip(int)"], ["void", "org.mapdb.DataInput2$ByteBuffer.unpackIntArray(int[], int, int)", "public void unpackIntArray(int[], int, int)"], ["org.mapdb.DataInput2$DataInputToStream", "org.mapdb.DataInput2$DataInputToStream(java.io.DataInput)", "public org.mapdb.DataInput2$DataInputToStream(java.io.DataInput)"], ["int", "org.mapdb.DataInput2$DataInputToStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.mapdb.DataInput2$DataInputToStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["void", "org.mapdb.DataInput2$DataInputToStream.close()", "public void close() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$DataInputToStream.read()", "public int read() throws java.io.IOException"], ["org.mapdb.DataInput2$Stream", "org.mapdb.DataInput2$Stream(java.io.InputStream)", "public org.mapdb.DataInput2$Stream(java.io.InputStream)"], ["void", "org.mapdb.DataInput2$Stream.readFully(byte[], int, int)", "public void readFully(byte[], int, int) throws java.io.IOException"], ["int", "org.mapdb.DataInput2$Stream.skipBytes(int)", "public int skipBytes(int) throws java.io.IOException"], ["boolean", "org.mapdb.DataInput2$Stream.readBoolean()", "public boolean readBoolean() throws java.io.IOException"], ["byte", "org.mapdb.DataInput2$Stream.readByte()", "public byte readByte() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$Stream.readUnsignedByte()", "public int readUnsignedByte() throws java.io.IOException"], ["short", "org.mapdb.DataInput2$Stream.readShort()", "public short readShort() throws java.io.IOException"], ["char", "org.mapdb.DataInput2$Stream.readChar()", "public char readChar() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$Stream.readInt()", "public int readInt() throws java.io.IOException"], ["long", "org.mapdb.DataInput2$Stream.readLong()", "public long readLong() throws java.io.IOException"], ["long[]", "org.mapdb.DataInput2$Stream.unpackLongArrayDeltaCompression(int)", "public long[] unpackLongArrayDeltaCompression(int) throws java.io.IOException"], ["void", "org.mapdb.DataInput2$Stream.unpackLongArray(long[], int, int)", "public void unpackLongArray(long[], int, int) throws java.io.IOException"], ["void", "org.mapdb.DataInput2$Stream.unpackIntArray(int[], int, int)", "public void unpackIntArray(int[], int, int) throws java.io.IOException"], ["void", "org.mapdb.DataInput2$Stream.unpackLongSkip(int)", "public void unpackLongSkip(int) throws java.io.IOException"], ["int", "org.mapdb.DataInput2$Stream.getPos()", "public int getPos()"], ["void", "org.mapdb.DataInput2$Stream.setPos(int)", "public void setPos(int)"], ["byte[]", "org.mapdb.DataInput2$Stream.internalByteArray()", "public byte[] internalByteArray()"], ["java.nio.ByteBuffer", "org.mapdb.DataInput2$Stream.internalByteBuffer()", "public java.nio.ByteBuffer internalByteBuffer()"], ["void", "org.mapdb.DataInput2$Stream.close()", "public void close()"], ["long", "org.mapdb.DataInput2$Stream.unpackLong()", "public long unpackLong() throws java.io.IOException"], ["int", "org.mapdb.DataInput2$Stream.unpackInt()", "public int unpackInt() throws java.io.IOException"], ["org.mapdb.DataInput2", "org.mapdb.DataInput2()", "public org.mapdb.DataInput2()"], ["float", "org.mapdb.DataInput2.readFloat()", "public float readFloat() throws java.io.IOException"], ["double", "org.mapdb.DataInput2.readDouble()", "public double readDouble() throws java.io.IOException"], ["java.lang.String", "org.mapdb.DataInput2.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["java.lang.String", "org.mapdb.DataInput2.readUTF()", "public java.lang.String readUTF() throws java.io.IOException"], ["int", "org.mapdb.DataInput2.readUnsignedShort()", "public int readUnsignedShort() throws java.io.IOException"], ["void", "org.mapdb.DataInput2.readFully(byte[])", "public void readFully(byte[]) throws java.io.IOException"], ["org.mapdb.DataOutput2", "org.mapdb.DataOutput2()", "public org.mapdb.DataOutput2()"], ["byte[]", "org.mapdb.DataOutput2.copyBytes()", "public byte[] copyBytes()"], ["void", "org.mapdb.DataOutput2.ensureAvail(int)", "public void ensureAvail(int)"], ["void", "org.mapdb.DataOutput2.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeBoolean(boolean)", "public void writeBoolean(boolean) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeByte(int)", "public void writeByte(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeShort(int)", "public void writeShort(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeChar(int)", "public void writeChar(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeInt(int)", "public void writeInt(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeLong(long)", "public void writeLong(long) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeFloat(float)", "public void writeFloat(float) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeDouble(double)", "public void writeDouble(double) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeBytes(java.lang.String)", "public void writeBytes(java.lang.String) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeChars(java.lang.String)", "public void writeChars(java.lang.String) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeUTF(java.lang.String)", "public void writeUTF(java.lang.String) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.packInt(int)", "public void packInt(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.packIntBigger(int)", "public void packIntBigger(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.packLong(long)", "public void packLong(long)"], ["void", "org.mapdb.DataOutput2.packLongArray(long[], int, int)", "public void packLongArray(long[], int, int)"], ["void", "org.mapdb.HTreeMap$1.run()", "public final void run()"], ["java.lang.Object", "org.mapdb.HTreeMap$2.get()", "public java.lang.Object get()"], ["java.lang.String", "org.mapdb.HTreeMap$2.get()", "public final java.lang.String get()"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.HTreeMap$Companion.make(org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1<? super K, ? extends V>, org.mapdb.MapModificationListener<K, V>[], java.io.Closeable)", "public final <K, V> org.mapdb.HTreeMap<K, V> make(org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1<? super K, ? extends V>, org.mapdb.MapModificationListener<K, V>[], java.io.Closeable)"], ["org.mapdb.HTreeMap", "org.mapdb.HTreeMap$Companion.make$default(org.mapdb.HTreeMap$Companion, org.mapdb.Serializer, org.mapdb.Serializer, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1, org.mapdb.MapModificationListener[], java.io.Closeable, int, java.lang.Object)", "public static org.mapdb.HTreeMap make$default(org.mapdb.HTreeMap$Companion, org.mapdb.Serializer, org.mapdb.Serializer, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1, org.mapdb.MapModificationListener[], java.io.Closeable, int, java.lang.Object)"], ["org.mapdb.HTreeMap$Companion", "org.mapdb.HTreeMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.HTreeMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["K", "org.mapdb.HTreeMap$KeySet$iterator$iters$1$1.invoke(java.lang.Object, java.lang.Object)", "public final K invoke(java.lang.Object, java.lang.Object)"], ["java.util.Iterator<K>", "org.mapdb.HTreeMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["int", "org.mapdb.HTreeMap$KeySet.getSize()", "public int getSize()"], ["int", "org.mapdb.HTreeMap$KeySet.size()", "public final int size()"], ["boolean", "org.mapdb.HTreeMap$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$KeySet.add(K)", "public boolean add(K)"], ["void", "org.mapdb.HTreeMap$KeySet.clear()", "public void clear()"], ["boolean", "org.mapdb.HTreeMap$KeySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.HTreeMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["org.mapdb.HTreeMap<K, java.lang.Object>", "org.mapdb.HTreeMap$KeySet.getMap()", "public final org.mapdb.HTreeMap<K, java.lang.Object> getMap()"], ["org.mapdb.HTreeMap$KeySet", "org.mapdb.HTreeMap$KeySet(org.mapdb.HTreeMap<K, java.lang.Object>)", "public org.mapdb.HTreeMap$KeySet(org.mapdb.HTreeMap<K, java.lang.Object>)"], ["void", "org.mapdb.HTreeMap$calculateCollisionSize$$inlined$lockRead$lambda$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.HTreeMap$clear$$inlined$lockWrite$lambda$1.value(long, long)", "public final void value(long, long)"], ["java.lang.Object", "org.mapdb.HTreeMap$entries$1$iterator$$inlined$map$lambda$1.invoke(java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object)"], ["java.util.Map$Entry<K, V>", "org.mapdb.HTreeMap$entries$1$iterator$$inlined$map$lambda$1.invoke(java.lang.Object, java.lang.Object)", "public final java.util.Map$Entry<K, V> invoke(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$entries$1.add(java.util.Map$Entry<K, V>)", "public boolean add(java.util.Map$Entry<K, V>)"], ["boolean", "org.mapdb.HTreeMap$entries$1.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["void", "org.mapdb.HTreeMap$entries$1.clear()", "public void clear()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.HTreeMap$entries$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.mapdb.HTreeMap$entries$1.remove(java.util.Map$Entry)", "public boolean remove(java.util.Map$Entry)"], ["boolean", "org.mapdb.HTreeMap$entries$1.remove(java.lang.Object)", "public final boolean remove(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$entries$1.contains(java.util.Map$Entry)", "public boolean contains(java.util.Map$Entry)"], ["boolean", "org.mapdb.HTreeMap$entries$1.contains(java.lang.Object)", "public final boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$entries$1.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.HTreeMap$entries$1.getSize()", "public int getSize()"], ["int", "org.mapdb.HTreeMap$entries$1.size()", "public final int size()"], ["boolean", "org.mapdb.HTreeMap$expireEvictSegment$1.take(long, org.mapdb.QueueLong$Node)", "public final boolean take(long, org.mapdb.QueueLong$Node)"], ["void", "org.mapdb.HTreeMap$forEach$$inlined$segmentRead$lambda$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.HTreeMap$forEachKey$$inlined$segmentRead$lambda$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.HTreeMap$forEachValue$$inlined$segmentRead$lambda$1.value(long)", "public final void value(long)"], ["K", "org.mapdb.HTreeMap$htreeEntry$1.getKey()", "public K getKey()"], ["V", "org.mapdb.HTreeMap$htreeEntry$1.getValue()", "public V getValue()"], ["int", "org.mapdb.HTreeMap$htreeEntry$1.hashCode()", "public int hashCode()"], ["V", "org.mapdb.HTreeMap$htreeEntry$1.setValue(V)", "public V setValue(V)"], ["boolean", "org.mapdb.HTreeMap$htreeEntry$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.mapdb.HTreeMap$htreeEntry$1.toString()", "public java.lang.String toString()"], ["org.mapdb.Store", "org.mapdb.HTreeMap$htreeIterator$1.getStore()", "public final org.mapdb.Store getStore()"], ["org.eclipse.collections.api.iterator.MutableLongIterator", "org.mapdb.HTreeMap$htreeIterator$1.getLeafRecidIter()", "public final org.eclipse.collections.api.iterator.MutableLongIterator getLeafRecidIter()"], ["int", "org.mapdb.HTreeMap$htreeIterator$1.getLeafPos()", "public final int getLeafPos()"], ["void", "org.mapdb.HTreeMap$htreeIterator$1.setLeafPos(int)", "public final void setLeafPos(int)"], ["java.lang.Object[]", "org.mapdb.HTreeMap$htreeIterator$1.getLeafArray()", "public final java.lang.Object[] getLeafArray()"], ["void", "org.mapdb.HTreeMap$htreeIterator$1.setLeafArray(java.lang.Object[])", "public final void setLeafArray(java.lang.Object[])"], ["K", "org.mapdb.HTreeMap$htreeIterator$1.getLastKey()", "public final K getLastKey()"], ["void", "org.mapdb.HTreeMap$htreeIterator$1.setLastKey(K)", "public final void setLastKey(K)"], ["boolean", "org.mapdb.HTreeMap$htreeIterator$1.hasNext()", "public boolean hasNext()"], ["E", "org.mapdb.HTreeMap$htreeIterator$1.next()", "public E next()"], ["void", "org.mapdb.HTreeMap$htreeIterator$1.remove()", "public void remove()"], ["void", "org.mapdb.HTreeMap$leafKeySetSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object[])", "public void serialize(org.mapdb.DataOutput2, java.lang.Object[])"], ["void", "org.mapdb.HTreeMap$leafKeySetSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.HTreeMap$leafKeySetSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object[] deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.HTreeMap$leafKeySetSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.HTreeMap$leafKeySetSerializer$1.isTrusted()", "public boolean isTrusted()"], ["void", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object[])", "public void serialize(org.mapdb.DataOutput2, java.lang.Object[])"], ["void", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object[] deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.isTrusted()", "public boolean isTrusted()"], ["void", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object[])", "public void serialize(org.mapdb.DataOutput2, java.lang.Object[])"], ["void", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object[] deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.isTrusted()", "public boolean isTrusted()"], ["void", "org.mapdb.HTreeMap$sizeLong$$inlined$lockRead$lambda$1.value(long, long)", "public final void value(long, long)"], ["V", "org.mapdb.HTreeMap$values$1$iterator$$inlined$map$lambda$1.invoke(java.lang.Object, java.lang.Object)", "public final V invoke(java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.HTreeMap$values$1.clear()", "public void clear()"], ["boolean", "org.mapdb.HTreeMap$values$1.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.HTreeMap$values$1.getSize()", "public int getSize()"], ["int", "org.mapdb.HTreeMap$values$1.size()", "public final int size()"], ["java.util.Iterator<V>", "org.mapdb.HTreeMap$values$1.iterator()", "public java.util.Iterator<V> iterator()"], ["void", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$1.value(long, long)", "public final void value(long, long)"], ["java.lang.Object", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$2$1.invoke(java.lang.Object, java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$2$1.invoke(long, long, long)", "public final void invoke(long, long, long)"], ["java.lang.Object", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$2.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["void", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$2.invoke(org.mapdb.QueueLong[])", "public final void invoke(org.mapdb.QueueLong[])"], ["boolean", "org.mapdb.HTreeMap.isForegroundEviction()", "public final boolean isForegroundEviction()"], ["V", "org.mapdb.HTreeMap.put(K, V)", "public V put(K, V)"], ["void", "org.mapdb.HTreeMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.mapdb.HTreeMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.mapdb.HTreeMap.clear()", "public void clear()"], ["void", "org.mapdb.HTreeMap.clear2(boolean)", "public final void clear2(boolean)"], ["void", "org.mapdb.HTreeMap.clear2$default(org.mapdb.HTreeMap, boolean, int, java.lang.Object)", "public static void clear2$default(org.mapdb.HTreeMap, boolean, int, java.lang.Object)"], ["void", "org.mapdb.HTreeMap.clearWithoutNotification()", "public final void clearWithoutNotification()"], ["void", "org.mapdb.HTreeMap.clearWithExpire()", "public final void clearWithExpire()"], ["void", "org.mapdb.HTreeMap.clear$default(org.mapdb.HTreeMap, int, int, java.lang.Object)", "public static void clear$default(org.mapdb.HTreeMap, int, int, java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.mapdb.HTreeMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.HTreeMap.getSize()", "public int getSize()"], ["int", "org.mapdb.HTreeMap.size()", "public final int size()"], ["long", "org.mapdb.HTreeMap.sizeLong()", "public long sizeLong()"], ["V", "org.mapdb.HTreeMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.HTreeMap.putIfAbsentBoolean(K, V)", "public boolean putIfAbsentBoolean(K, V)"], ["boolean", "org.mapdb.HTreeMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.HTreeMap.replace(K, V)", "public V replace(K, V)"], ["void", "org.mapdb.HTreeMap.expireEvict()", "public final void expireEvict()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.HTreeMap.getEntries()", "public java.util.Set<java.util.Map$Entry<K, V>> getEntries()"], ["java.util.Set", "org.mapdb.HTreeMap.entrySet()", "public final java.util.Set entrySet()"], ["org.mapdb.HTreeMap$KeySet<K>", "org.mapdb.HTreeMap.getKeys()", "public org.mapdb.HTreeMap$KeySet<K> getKeys()"], ["java.util.Set", "org.mapdb.HTreeMap.keySet()", "public final java.util.Set keySet()"], ["java.util.Collection<V>", "org.mapdb.HTreeMap.getValues()", "public java.util.Collection<V> getValues()"], ["java.util.Collection", "org.mapdb.HTreeMap.values()", "public final java.util.Collection values()"], ["int", "org.mapdb.HTreeMap.hashCode()", "public int hashCode()"], ["boolean", "org.mapdb.HTreeMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.HTreeMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)", "public void forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["void", "org.mapdb.HTreeMap.forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)", "public void forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)"], ["void", "org.mapdb.HTreeMap.forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)", "public void forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)"], ["void", "org.mapdb.HTreeMap.verify()", "public void verify()"], ["void", "org.mapdb.HTreeMap.close()", "public void close()"], ["void", "org.mapdb.HTreeMap.checkThreadSafe()", "public void checkThreadSafe()"], ["kotlin.Pair<java.lang.Long, java.lang.Long>", "org.mapdb.HTreeMap.calculateCollisionSize()", "public final kotlin.Pair<java.lang.Long, java.lang.Long> calculateCollisionSize()"], ["org.mapdb.Serializer<K>", "org.mapdb.HTreeMap.getKeySerializer()", "public org.mapdb.Serializer<K> getKeySerializer()"], ["org.mapdb.Serializer<V>", "org.mapdb.HTreeMap.getValueSerializer()", "public org.mapdb.Serializer<V> getValueSerializer()"], ["boolean", "org.mapdb.HTreeMap.getValueInline()", "public final boolean getValueInline()"], ["int", "org.mapdb.HTreeMap.getConcShift()", "public final int getConcShift()"], ["int", "org.mapdb.HTreeMap.getDirShift()", "public final int getDirShift()"], ["int", "org.mapdb.HTreeMap.getLevels()", "public final int getLevels()"], ["org.mapdb.Store[]", "org.mapdb.HTreeMap.getStores()", "public final org.mapdb.Store[] getStores()"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap[]", "org.mapdb.HTreeMap.getIndexTrees()", "public final org.eclipse.collections.api.map.primitive.MutableLongLongMap[] getIndexTrees()"], ["long[]", "org.mapdb.HTreeMap.getCounterRecids()", "public final long[] getCounterRecids()"], ["long", "org.mapdb.HTreeMap.getExpireCreateTTL()", "public final long getExpireCreateTTL()"], ["long", "org.mapdb.HTreeMap.getExpireUpdateTTL()", "public final long getExpireUpdateTTL()"], ["long", "org.mapdb.HTreeMap.getExpireGetTTL()", "public final long getExpireGetTTL()"], ["long", "org.mapdb.HTreeMap.getExpireMaxSize()", "public final long getExpireMaxSize()"], ["long", "org.mapdb.HTreeMap.getExpireStoreSize()", "public final long getExpireStoreSize()"], ["org.mapdb.QueueLong[]", "org.mapdb.HTreeMap.getExpireCreateQueues()", "public final org.mapdb.QueueLong[] getExpireCreateQueues()"], ["org.mapdb.QueueLong[]", "org.mapdb.HTreeMap.getExpireUpdateQueues()", "public final org.mapdb.QueueLong[] getExpireUpdateQueues()"], ["org.mapdb.QueueLong[]", "org.mapdb.HTreeMap.getExpireGetQueues()", "public final org.mapdb.QueueLong[] getExpireGetQueues()"], ["java.util.concurrent.ScheduledExecutorService", "org.mapdb.HTreeMap.getExpireExecutor()", "public final java.util.concurrent.ScheduledExecutorService getExpireExecutor()"], ["long", "org.mapdb.HTreeMap.getExpireExecutorPeriod()", "public final long getExpireExecutorPeriod()"], ["java.lang.Double", "org.mapdb.HTreeMap.getExpireCompactThreshold()", "public final java.lang.Double getExpireCompactThreshold()"], ["boolean", "org.mapdb.HTreeMap.isThreadSafe()", "public boolean isThreadSafe()"], ["kotlin.jvm.functions.Function1<K, V>", "org.mapdb.HTreeMap.getValueLoader()", "public final kotlin.jvm.functions.Function1<K, V> getValueLoader()"], ["boolean", "org.mapdb.HTreeMap.getHasValues()", "public final boolean getHasValues()"], ["org.mapdb.HTreeMap", "org.mapdb.HTreeMap(org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1<? super K, ? extends V>, org.mapdb.MapModificationListener<K, V>[], java.io.Closeable, boolean)", "public org.mapdb.HTreeMap(org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1<? super K, ? extends V>, org.mapdb.MapModificationListener<K, V>[], java.io.Closeable, boolean)"], ["org.mapdb.HTreeMap", "org.mapdb.HTreeMap(org.mapdb.Serializer, org.mapdb.Serializer, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1, org.mapdb.MapModificationListener[], java.io.Closeable, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.HTreeMap(org.mapdb.Serializer, org.mapdb.Serializer, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1, org.mapdb.MapModificationListener[], java.io.Closeable, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["int", "org.mapdb.HTreeMap.access$getSegmentCount$p(org.mapdb.HTreeMap)", "public static final int access$getSegmentCount$p(org.mapdb.HTreeMap)"], ["java.util.concurrent.locks.ReadWriteLock[]", "org.mapdb.HTreeMap.access$getLocks$p(org.mapdb.HTreeMap)", "public static final java.util.concurrent.locks.ReadWriteLock[] access$getLocks$p(org.mapdb.HTreeMap)"], ["int", "org.mapdb.HTreeMap.access$getHashSeed$p(org.mapdb.HTreeMap)", "public static final int access$getHashSeed$p(org.mapdb.HTreeMap)"], ["java.lang.Object", "org.mapdb.HTreeMap.access$segmentWrite(org.mapdb.HTreeMap, int, kotlin.jvm.functions.Function0)", "public static final java.lang.Object access$segmentWrite(org.mapdb.HTreeMap, int, kotlin.jvm.functions.Function0)"], ["void", "org.mapdb.IndexTreeList$clear$$inlined$lockWrite$lambda$1.value(long)", "public final void value(long)"], ["int", "org.mapdb.IndexTreeList$iterator$1.getIndex()", "public final int getIndex()"], ["void", "org.mapdb.IndexTreeList$iterator$1.setIndex(int)", "public final void setIndex(int)"], ["java.lang.Integer", "org.mapdb.IndexTreeList$iterator$1.getIndexToRemove()", "public final java.lang.Integer getIndexToRemove()"], ["void", "org.mapdb.IndexTreeList$iterator$1.setIndexToRemove(java.lang.Integer)", "public final void setIndexToRemove(java.lang.Integer)"], ["boolean", "org.mapdb.IndexTreeList$iterator$1.hasNext()", "public boolean hasNext()"], ["E", "org.mapdb.IndexTreeList$iterator$1.next()", "public E next()"], ["void", "org.mapdb.IndexTreeList$iterator$1.remove()", "public void remove()"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.mapdb.IndexTreeList.getLock()", "public final java.util.concurrent.locks.ReentrantReadWriteLock getLock()"], ["boolean", "org.mapdb.IndexTreeList.add(E)", "public boolean add(E)"], ["void", "org.mapdb.IndexTreeList.add(int, E)", "public void add(int, E)"], ["void", "org.mapdb.IndexTreeList.clear()", "public void clear()"], ["E", "org.mapdb.IndexTreeList.removeAt(int)", "public E removeAt(int)"], ["java.lang.Object", "org.mapdb.IndexTreeList.remove(int)", "public final java.lang.Object remove(int)"], ["E", "org.mapdb.IndexTreeList.set(int, E)", "public E set(int, E)"], ["void", "org.mapdb.IndexTreeList.checkIndex(int)", "public final void checkIndex(int)"], ["E", "org.mapdb.IndexTreeList.get(int)", "public E get(int)"], ["boolean", "org.mapdb.IndexTreeList.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "org.mapdb.IndexTreeList.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "org.mapdb.IndexTreeList.getSize()", "public int getSize()"], ["int", "org.mapdb.IndexTreeList.size()", "public final int size()"], ["org.mapdb.Store", "org.mapdb.IndexTreeList.getStore()", "public final org.mapdb.Store getStore()"], ["org.mapdb.Serializer<E>", "org.mapdb.IndexTreeList.getSerializer()", "public final org.mapdb.Serializer<E> getSerializer()"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeList.getMap()", "public final org.eclipse.collections.api.map.primitive.MutableLongLongMap getMap()"], ["long", "org.mapdb.IndexTreeList.getCounterRecid()", "public final long getCounterRecid()"], ["boolean", "org.mapdb.IndexTreeList.isThreadSafe()", "public final boolean isThreadSafe()"], ["org.mapdb.IndexTreeList", "org.mapdb.IndexTreeList(org.mapdb.Store, org.mapdb.Serializer<E>, org.eclipse.collections.api.map.primitive.MutableLongLongMap, long, boolean)", "public org.mapdb.IndexTreeList(org.mapdb.Store, org.mapdb.Serializer<E>, org.eclipse.collections.api.map.primitive.MutableLongLongMap, long, boolean)"], ["void", "org.mapdb.IndexTreeListJava$1.serialize(org.mapdb.DataOutput2, long[])", "public void serialize(org.mapdb.DataOutput2, long[]) throws java.io.IOException"], ["long[]", "org.mapdb.IndexTreeListJava$1.deserialize(org.mapdb.DataInput2, int)", "public long[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.IndexTreeListJava$1.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.IndexTreeListJava$1.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.IndexTreeListJava$1.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["long[]", "org.mapdb.IndexTreeListJava.treeIter(int, long, org.mapdb.Store, int, long)", "public static long[] treeIter(int, long, org.mapdb.Store, int, long)"], ["<V> V", "org.mapdb.IndexTreeListJava.treeFold(long, org.mapdb.Store, int, V, org.mapdb.IndexTreeListJava$TreeTraverseCallback<V>)", "public static <V> V treeFold(long, org.mapdb.Store, int, V, org.mapdb.IndexTreeListJava$TreeTraverseCallback<V>)"], ["void", "org.mapdb.IndexTreeListJava.treeClear(long, org.mapdb.Store, int)", "public static void treeClear(long, org.mapdb.Store, int)"], ["long[]", "org.mapdb.IndexTreeListJava.treeLast(long, org.mapdb.Store, int)", "public static long[] treeLast(long, org.mapdb.Store, int)"], ["org.mapdb.IndexTreeLongLongMap", "org.mapdb.IndexTreeLongLongMap$Companion.make(org.mapdb.Store, long, int, int, boolean)", "public final org.mapdb.IndexTreeLongLongMap make(org.mapdb.Store, long, int, int, boolean)"], ["org.mapdb.IndexTreeLongLongMap", "org.mapdb.IndexTreeLongLongMap$Companion.make$default(org.mapdb.IndexTreeLongLongMap$Companion, org.mapdb.Store, long, int, int, boolean, int, java.lang.Object)", "public static org.mapdb.IndexTreeLongLongMap make$default(org.mapdb.IndexTreeLongLongMap$Companion, org.mapdb.Store, long, int, int, boolean, int, java.lang.Object)"], ["org.mapdb.IndexTreeLongLongMap$Companion", "org.mapdb.IndexTreeLongLongMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.IndexTreeLongLongMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$Iterator.getNextKey()", "public final java.lang.Long getNextKey()"], ["void", "org.mapdb.IndexTreeLongLongMap$Iterator.setNextKey(java.lang.Long)", "public final void setNextKey(java.lang.Long)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$Iterator.getNextRet()", "public final java.lang.Long getNextRet()"], ["void", "org.mapdb.IndexTreeLongLongMap$Iterator.setNextRet(java.lang.Long)", "public final void setNextRet(java.lang.Long)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$Iterator.getLastKey()", "public final java.lang.Long getLastKey()"], ["void", "org.mapdb.IndexTreeLongLongMap$Iterator.setLastKey(java.lang.Long)", "public final void setLastKey(java.lang.Long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$Iterator.hasNext()", "public boolean hasNext()"], ["long", "org.mapdb.IndexTreeLongLongMap$Iterator.next()", "public long next()"], ["void", "org.mapdb.IndexTreeLongLongMap$Iterator.remove()", "public void remove()"], ["org.mapdb.IndexTreeLongLongMap", "org.mapdb.IndexTreeLongLongMap$Iterator.getM()", "public final org.mapdb.IndexTreeLongLongMap getM()"], ["int", "org.mapdb.IndexTreeLongLongMap$Iterator.getIndex()", "public final int getIndex()"], ["org.mapdb.IndexTreeLongLongMap$Iterator", "org.mapdb.IndexTreeLongLongMap$Iterator(org.mapdb.IndexTreeLongLongMap, int)", "public org.mapdb.IndexTreeLongLongMap$Iterator(org.mapdb.IndexTreeLongLongMap, int)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$allSatisfy$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$allSatisfy$1.visit(long, long, boolean)", "public final boolean visit(long, long, boolean)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$anySatisfy$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$anySatisfy$1.visit(long, long, boolean)", "public final boolean visit(long, long, boolean)"], ["void", "org.mapdb.IndexTreeLongLongMap$appendString$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$collect$1.value(long, long)", "public final void value(long, long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$containsValue$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$containsValue$1.visit(long, long, boolean)", "public final boolean visit(long, long, boolean)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$count$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$count$1.visit(long, long, long)", "public final java.lang.Long visit(long, long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$detectIfNone$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.IndexTreeLongLongMap$equals$1.value(long, long)", "public final void value(long, long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$forEachKey$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["void", "org.mapdb.IndexTreeLongLongMap$forEachKey$1.visit(long, long, kotlin.Unit)", "public final void visit(long, long, kotlin.Unit)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$forEachKeyValue$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["void", "org.mapdb.IndexTreeLongLongMap$forEachKeyValue$1.visit(long, long, kotlin.Unit)", "public final void visit(long, long, kotlin.Unit)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$forEachValue$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["void", "org.mapdb.IndexTreeLongLongMap$forEachValue$1.visit(long, long, kotlin.Unit)", "public final void visit(long, long, kotlin.Unit)"], ["void", "org.mapdb.IndexTreeLongLongMap$hashCode$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$keySet$1$removeAll$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.IndexTreeLongLongMap$keySet$1$retainAll$1.value(long)", "public final void value(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.contains(long)", "public boolean contains(long)"], ["long", "org.mapdb.IndexTreeLongLongMap$keySet$1.max()", "public long max()"], ["long", "org.mapdb.IndexTreeLongLongMap$keySet$1.min()", "public long min()"], ["void", "org.mapdb.IndexTreeLongLongMap$keySet$1.clear()", "public void clear()"], ["org.eclipse.collections.api.set.primitive.LongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.freeze()", "public org.eclipse.collections.api.set.primitive.LongSet freeze()"], ["void", "org.mapdb.IndexTreeLongLongMap$keySet$1.forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)", "public void forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["org.eclipse.collections.api.iterator.MutableLongIterator", "org.mapdb.IndexTreeLongLongMap$keySet$1.longIterator()", "public org.eclipse.collections.api.iterator.MutableLongIterator longIterator()"], ["org.eclipse.collections.api.iterator.LongIterator", "org.mapdb.IndexTreeLongLongMap$keySet$1.longIterator()", "public org.eclipse.collections.api.iterator.LongIterator longIterator()"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.remove(long)", "public boolean remove(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.removeAll(org.eclipse.collections.api.LongIterable)", "public boolean removeAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.removeAll(long...)", "public boolean removeAll(long...)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.retainAll(org.eclipse.collections.api.LongIterable)", "public boolean retainAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.retainAll(long...)", "public boolean retainAll(long...)"], ["org.eclipse.collections.api.set.primitive.ImmutableLongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.toImmutable()", "public org.eclipse.collections.api.set.primitive.ImmutableLongSet toImmutable()"], ["org.eclipse.collections.api.collection.primitive.ImmutableLongCollection", "org.mapdb.IndexTreeLongLongMap$keySet$1.toImmutable()", "public org.eclipse.collections.api.collection.primitive.ImmutableLongCollection toImmutable()"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.asUnmodifiable()", "public org.eclipse.collections.api.set.primitive.MutableLongSet asUnmodifiable()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap$keySet$1.asUnmodifiable()", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection asUnmodifiable()"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.asSynchronized()", "public org.eclipse.collections.api.set.primitive.MutableLongSet asSynchronized()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap$keySet$1.asSynchronized()", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection asSynchronized()"], ["int", "org.mapdb.IndexTreeLongLongMap$keySet$1.size()", "public int size()"], ["org.eclipse.collections.api.set.SetIterable", "org.mapdb.IndexTreeLongLongMap$keySet$1.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)", "public org.eclipse.collections.api.set.SetIterable collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)"], ["org.eclipse.collections.api.set.primitive.LongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.set.primitive.LongSet reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.set.primitive.LongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.set.primitive.LongSet select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$each$1.value(long, long)", "public final void value(long, long)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.getNextKey()", "public final java.lang.Long getNextKey()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.setNextKey(java.lang.Long)", "public final void setNextKey(java.lang.Long)"], ["org.eclipse.collections.api.tuple.primitive.LongLongPair", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.getNextRet()", "public final org.eclipse.collections.api.tuple.primitive.LongLongPair getNextRet()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.setNextRet(org.eclipse.collections.api.tuple.primitive.LongLongPair)", "public final void setNextRet(org.eclipse.collections.api.tuple.primitive.LongLongPair)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.getLastKey()", "public final java.lang.Long getLastKey()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.setLastKey(java.lang.Long)", "public final void setLastKey(java.lang.Long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.hasNext()", "public boolean hasNext()"], ["org.eclipse.collections.api.tuple.primitive.LongLongPair", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.next()", "public org.eclipse.collections.api.tuple.primitive.LongLongPair next()"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.next()", "public java.lang.Object next()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.remove()", "public void remove()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1.each(org.eclipse.collections.api.block.procedure.Procedure<? super org.eclipse.collections.api.tuple.primitive.LongLongPair>)", "public void each(org.eclipse.collections.api.block.procedure.Procedure<? super org.eclipse.collections.api.tuple.primitive.LongLongPair>)"], ["java.util.Iterator<org.eclipse.collections.api.tuple.primitive.LongLongPair>", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1.iterator()", "public java.util.Iterator<org.eclipse.collections.api.tuple.primitive.LongLongPair> iterator()"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$max$ret$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$max$ret$1.visit(long, long, java.lang.Long)", "public final java.lang.Long visit(long, long, java.lang.Long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$min$ret$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$min$ret$1.visit(long, long, java.lang.Long)", "public final java.lang.Long visit(long, long, java.lang.Long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$noneSatisfy$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["java.lang.Boolean", "org.mapdb.IndexTreeLongLongMap$noneSatisfy$1.visit(long, long, boolean)", "public final java.lang.Boolean visit(long, long, boolean)"], ["void", "org.mapdb.IndexTreeLongLongMap$putAll$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$reject$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$reject$2.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$select$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$select$2.value(long, long)", "public final void value(long, long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$size$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["long", "org.mapdb.IndexTreeLongLongMap$size$1.visit(long, long, long)", "public final long visit(long, long, long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$sum$1.visit(long, long, java.lang.Object)", "public java.lang.Object visit(long, long, java.lang.Object)"], ["long", "org.mapdb.IndexTreeLongLongMap$sum$1.visit(long, long, long)", "public final long visit(long, long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$toString$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1$remove$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1$removeAll$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1$retainAll$1.value(long, long)", "public final void value(long, long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.contains(long)", "public boolean contains(long)"], ["int", "org.mapdb.IndexTreeLongLongMap$values$1.size()", "public int size()"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1.forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)", "public void forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["long", "org.mapdb.IndexTreeLongLongMap$values$1.max()", "public long max()"], ["long", "org.mapdb.IndexTreeLongLongMap$values$1.min()", "public long min()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap$values$1.asSynchronized()", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection asSynchronized()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap$values$1.asUnmodifiable()", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection asUnmodifiable()"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1.clear()", "public void clear()"], ["org.eclipse.collections.api.iterator.MutableLongIterator", "org.mapdb.IndexTreeLongLongMap$values$1.longIterator()", "public org.eclipse.collections.api.iterator.MutableLongIterator longIterator()"], ["org.eclipse.collections.api.iterator.LongIterator", "org.mapdb.IndexTreeLongLongMap$values$1.longIterator()", "public org.eclipse.collections.api.iterator.LongIterator longIterator()"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.remove(long)", "public boolean remove(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.removeAll(org.eclipse.collections.api.LongIterable)", "public boolean removeAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.removeAll(long...)", "public boolean removeAll(long...)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.retainAll(org.eclipse.collections.api.LongIterable)", "public boolean retainAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.retainAll(long...)", "public boolean retainAll(long...)"], ["org.eclipse.collections.api.collection.primitive.ImmutableLongCollection", "org.mapdb.IndexTreeLongLongMap$values$1.toImmutable()", "public org.eclipse.collections.api.collection.primitive.ImmutableLongCollection toImmutable()"], ["void", "org.mapdb.IndexTreeLongLongMap$withoutAllKeys$1.value(long)", "public final void value(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.put(long, long)", "public void put(long, long)"], ["long", "org.mapdb.IndexTreeLongLongMap.get(long)", "public long get(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.remove(long)", "public void remove(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.contains(long)", "public boolean contains(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.containsKey(long)", "public boolean containsKey(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.containsValue(long)", "public boolean containsValue(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.clear()", "public void clear()"], ["<V> org.eclipse.collections.api.collection.MutableCollection<V>", "org.mapdb.IndexTreeLongLongMap.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction<? extends V>)", "public <V> org.eclipse.collections.api.collection.MutableCollection<V> collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction<? extends V>)"], ["org.eclipse.collections.api.RichIterable", "org.mapdb.IndexTreeLongLongMap.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)", "public org.eclipse.collections.api.RichIterable collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)"], ["org.eclipse.collections.api.iterator.MutableLongIterator", "org.mapdb.IndexTreeLongLongMap.longIterator()", "public org.eclipse.collections.api.iterator.MutableLongIterator longIterator()"], ["org.eclipse.collections.api.iterator.LongIterator", "org.mapdb.IndexTreeLongLongMap.longIterator()", "public org.eclipse.collections.api.iterator.LongIterator longIterator()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.LongIterable", "org.mapdb.IndexTreeLongLongMap.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.LongIterable reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.LongIterable", "org.mapdb.IndexTreeLongLongMap.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public org.eclipse.collections.api.LongIterable select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["void", "org.mapdb.IndexTreeLongLongMap.appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)", "public void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)"], ["int", "org.mapdb.IndexTreeLongLongMap.size()", "public int size()"], ["boolean", "org.mapdb.IndexTreeLongLongMap.allSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public boolean allSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.anySatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public boolean anySatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["int", "org.mapdb.IndexTreeLongLongMap.count(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public int count(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["long", "org.mapdb.IndexTreeLongLongMap.detectIfNone(org.eclipse.collections.api.block.predicate.primitive.LongPredicate, long)", "public long detectIfNone(org.eclipse.collections.api.block.predicate.primitive.LongPredicate, long)"], ["void", "org.mapdb.IndexTreeLongLongMap.each(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)", "public void each(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["void", "org.mapdb.IndexTreeLongLongMap.forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)", "public void forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["<T> T", "org.mapdb.IndexTreeLongLongMap.injectInto(T, org.eclipse.collections.api.block.function.primitive.ObjectLongToObjectFunction<? super T, ? extends T>)", "public <T> T injectInto(T, org.eclipse.collections.api.block.function.primitive.ObjectLongToObjectFunction<? super T, ? extends T>)"], ["long", "org.mapdb.IndexTreeLongLongMap.max()", "public long max()"], ["long", "org.mapdb.IndexTreeLongLongMap.min()", "public long min()"], ["boolean", "org.mapdb.IndexTreeLongLongMap.noneSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)", "public boolean noneSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["long", "org.mapdb.IndexTreeLongLongMap.sum()", "public long sum()"], ["long[]", "org.mapdb.IndexTreeLongLongMap.toArray()", "public long[] toArray()"], ["long", "org.mapdb.IndexTreeLongLongMap.addToValue(long, long)", "public long addToValue(long, long)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.asSynchronized()", "public org.eclipse.collections.api.map.primitive.MutableLongLongMap asSynchronized()"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.asUnmodifiable()", "public org.eclipse.collections.api.map.primitive.MutableLongLongMap asUnmodifiable()"], ["long", "org.mapdb.IndexTreeLongLongMap.getIfAbsentPut(long, org.eclipse.collections.api.block.function.primitive.LongFunction0)", "public long getIfAbsentPut(long, org.eclipse.collections.api.block.function.primitive.LongFunction0)"], ["long", "org.mapdb.IndexTreeLongLongMap.getIfAbsentPut(long, long)", "public long getIfAbsentPut(long, long)"], ["<P> long", "org.mapdb.IndexTreeLongLongMap.getIfAbsentPutWith(long, org.eclipse.collections.api.block.function.primitive.LongFunction<? super P>, P)", "public <P> long getIfAbsentPutWith(long, org.eclipse.collections.api.block.function.primitive.LongFunction<? super P>, P)"], ["long", "org.mapdb.IndexTreeLongLongMap.getIfAbsentPutWithKey(long, org.eclipse.collections.api.block.function.primitive.LongToLongFunction)", "public long getIfAbsentPutWithKey(long, org.eclipse.collections.api.block.function.primitive.LongToLongFunction)"], ["void", "org.mapdb.IndexTreeLongLongMap.putAll(org.eclipse.collections.api.map.primitive.LongLongMap)", "public void putAll(org.eclipse.collections.api.map.primitive.LongLongMap)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.reject(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)", "public org.eclipse.collections.api.map.primitive.MutableLongLongMap reject(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)"], ["org.eclipse.collections.api.map.primitive.LongLongMap", "org.mapdb.IndexTreeLongLongMap.reject(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)", "public org.eclipse.collections.api.map.primitive.LongLongMap reject(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)"], ["void", "org.mapdb.IndexTreeLongLongMap.removeKey(long)", "public void removeKey(long)"], ["long", "org.mapdb.IndexTreeLongLongMap.removeKeyIfAbsent(long, long)", "public long removeKeyIfAbsent(long, long)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.select(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)", "public org.eclipse.collections.api.map.primitive.MutableLongLongMap select(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)"], ["org.eclipse.collections.api.map.primitive.LongLongMap", "org.mapdb.IndexTreeLongLongMap.select(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)", "public org.eclipse.collections.api.map.primitive.LongLongMap select(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)"], ["long", "org.mapdb.IndexTreeLongLongMap.updateValue(long, long, org.eclipse.collections.api.block.function.primitive.LongToLongFunction)", "public long updateValue(long, long, org.eclipse.collections.api.block.function.primitive.LongToLongFunction)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.withKeyValue(long, long)", "public org.eclipse.collections.api.map.primitive.MutableLongLongMap withKeyValue(long, long)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.withoutAllKeys(org.eclipse.collections.api.LongIterable)", "public org.eclipse.collections.api.map.primitive.MutableLongLongMap withoutAllKeys(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.withoutKey(long)", "public org.eclipse.collections.api.map.primitive.MutableLongLongMap withoutKey(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.forEachKey(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)", "public void forEachKey(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["void", "org.mapdb.IndexTreeLongLongMap.forEachKeyValue(org.eclipse.collections.api.block.procedure.primitive.LongLongProcedure)", "public void forEachKeyValue(org.eclipse.collections.api.block.procedure.primitive.LongLongProcedure)"], ["long", "org.mapdb.IndexTreeLongLongMap.getIfAbsent(long, long)", "public long getIfAbsent(long, long)"], ["long", "org.mapdb.IndexTreeLongLongMap.getOrThrow(long)", "public long getOrThrow(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.forEachValue(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)", "public void forEachValue(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.IndexTreeLongLongMap.hashCode()", "public int hashCode()"], ["java.lang.String", "org.mapdb.IndexTreeLongLongMap.toString()", "public java.lang.String toString()"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.IndexTreeLongLongMap.keySet()", "public org.eclipse.collections.api.set.primitive.MutableLongSet keySet()"], ["org.eclipse.collections.api.LazyLongIterable", "org.mapdb.IndexTreeLongLongMap.keysView()", "public org.eclipse.collections.api.LazyLongIterable keysView()"], ["org.eclipse.collections.api.RichIterable<org.eclipse.collections.api.tuple.primitive.LongLongPair>", "org.mapdb.IndexTreeLongLongMap.keyValuesView()", "public org.eclipse.collections.api.RichIterable<org.eclipse.collections.api.tuple.primitive.LongLongPair> keyValuesView()"], ["org.eclipse.collections.api.map.primitive.ImmutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.toImmutable()", "public org.eclipse.collections.api.map.primitive.ImmutableLongLongMap toImmutable()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap.values()", "public org.eclipse.collections.api.collection.primitive.MutableLongCollection values()"], ["org.mapdb.Store", "org.mapdb.IndexTreeLongLongMap.getStore()", "public final org.mapdb.Store getStore()"], ["long", "org.mapdb.IndexTreeLongLongMap.getRootRecid()", "public final long getRootRecid()"], ["int", "org.mapdb.IndexTreeLongLongMap.getDirShift()", "public final int getDirShift()"], ["int", "org.mapdb.IndexTreeLongLongMap.getLevels()", "public final int getLevels()"], ["boolean", "org.mapdb.IndexTreeLongLongMap.getCollapseOnRemove()", "public final boolean getCollapseOnRemove()"], ["org.mapdb.IndexTreeLongLongMap", "org.mapdb.IndexTreeLongLongMap(org.mapdb.Store, long, int, int, boolean)", "public org.mapdb.IndexTreeLongLongMap(org.mapdb.Store, long, int, int, boolean)"], ["java.lang.Long", "org.mapdb.Pump$Sink.getRootRecidRecid$mapdb()", "public final java.lang.Long getRootRecidRecid$mapdb()"], ["void", "org.mapdb.Pump$Sink.setRootRecidRecid$mapdb(java.lang.Long)", "public final void setRootRecidRecid$mapdb(java.lang.Long)"], ["long", "org.mapdb.Pump$Sink.getCounter$mapdb()", "public final long getCounter$mapdb()"], ["void", "org.mapdb.Pump$Sink.setCounter$mapdb(long)", "public final void setCounter$mapdb(long)"], ["void", "org.mapdb.Pump$Sink.putAll(java.lang.Iterable<? extends E>)", "public final void putAll(java.lang.Iterable<? extends E>)"], ["void", "org.mapdb.Pump$Sink.putAll(java.util.Iterator<? extends E>)", "public final void putAll(java.util.Iterator<? extends E>)"], ["org.mapdb.Pump$Sink", "org.mapdb.Pump$Sink()", "public org.mapdb.Pump$Sink()"], ["java.util.LinkedList<org.mapdb.Pump$treeMap$DirData>", "org.mapdb.Pump$treeMap$1.getDirStack()", "public final java.util.LinkedList<org.mapdb.Pump$treeMap$DirData> getDirStack()"], ["java.util.ArrayList<K>", "org.mapdb.Pump$treeMap$1.getKeys()", "public final java.util.ArrayList<K> getKeys()"], ["java.util.ArrayList<V>", "org.mapdb.Pump$treeMap$1.getValues()", "public final java.util.ArrayList<V> getValues()"], ["int", "org.mapdb.Pump$treeMap$1.getLeftEdgeLeaf()", "public final int getLeftEdgeLeaf()"], ["void", "org.mapdb.Pump$treeMap$1.setLeftEdgeLeaf(int)", "public final void setLeftEdgeLeaf(int)"], ["long", "org.mapdb.Pump$treeMap$1.getNextLeafLink()", "public final long getNextLeafLink()"], ["void", "org.mapdb.Pump$treeMap$1.setNextLeafLink(long)", "public final void setNextLeafLink(long)"], ["org.mapdb.BTreeMapJava$NodeSerializer", "org.mapdb.Pump$treeMap$1.getNodeSer()", "public final org.mapdb.BTreeMapJava$NodeSerializer getNodeSer()"], ["java.lang.Object", "org.mapdb.Pump$treeMap$1.nodeValues()", "public final java.lang.Object nodeValues()"], ["void", "org.mapdb.Pump$treeMap$1.put(kotlin.Pair<? extends K, ? extends V>)", "public void put(kotlin.Pair<? extends K, ? extends V>)"], ["void", "org.mapdb.Pump$treeMap$1.put(java.lang.Object)", "public void put(java.lang.Object)"], ["void", "org.mapdb.Pump$treeMap$1.create()", "public void create()"], ["java.lang.Object", "org.mapdb.Pump$treeMap$1.create()", "public java.lang.Object create()"], ["int", "org.mapdb.Pump$treeMap$DirData.getLeftEdge()", "public final int getLeftEdge()"], ["void", "org.mapdb.Pump$treeMap$DirData.setLeftEdge(int)", "public final void setLeftEdge(int)"], ["java.util.ArrayList<K>", "org.mapdb.Pump$treeMap$DirData.getKeys()", "public final java.util.ArrayList<K> getKeys()"], ["void", "org.mapdb.Pump$treeMap$DirData.setKeys(java.util.ArrayList<K>)", "public final void setKeys(java.util.ArrayList<K>)"], ["org.eclipse.collections.impl.list.mutable.primitive.LongArrayList", "org.mapdb.Pump$treeMap$DirData.getChild()", "public final org.eclipse.collections.impl.list.mutable.primitive.LongArrayList getChild()"], ["void", "org.mapdb.Pump$treeMap$DirData.setChild(org.eclipse.collections.impl.list.mutable.primitive.LongArrayList)", "public final void setChild(org.eclipse.collections.impl.list.mutable.primitive.LongArrayList)"], ["long", "org.mapdb.Pump$treeMap$DirData.getNextDirLink()", "public final long getNextDirLink()"], ["void", "org.mapdb.Pump$treeMap$DirData.setNextDirLink(long)", "public final void setNextDirLink(long)"], ["org.mapdb.Pump$treeMap$DirData", "org.mapdb.Pump$treeMap$DirData()", "public org.mapdb.Pump$treeMap$DirData()"], ["<K, V> org.mapdb.Pump$Sink<kotlin.Pair<K, V>, kotlin.Unit>", "org.mapdb.Pump.treeMap(org.mapdb.Store, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, java.util.Comparator<K>, int, int, boolean, boolean)", "public final <K, V> org.mapdb.Pump$Sink<kotlin.Pair<K, V>, kotlin.Unit> treeMap(org.mapdb.Store, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, java.util.Comparator<K>, int, int, boolean, boolean)"], ["org.mapdb.Pump$Sink", "org.mapdb.Pump.treeMap$default(org.mapdb.Pump, org.mapdb.Store, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, java.util.Comparator, int, int, boolean, boolean, int, java.lang.Object)", "public static org.mapdb.Pump$Sink treeMap$default(org.mapdb.Pump, org.mapdb.Store, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, java.util.Comparator, int, int, boolean, boolean, int, java.lang.Object)"], ["org.mapdb.QueueLong", "org.mapdb.QueueLong$Companion.make(org.mapdb.Store, long, long, long)", "public final org.mapdb.QueueLong make(org.mapdb.Store, long, long, long)"], ["org.mapdb.QueueLong", "org.mapdb.QueueLong$Companion.make$default(org.mapdb.QueueLong$Companion, org.mapdb.Store, long, long, long, int, java.lang.Object)", "public static org.mapdb.QueueLong make$default(org.mapdb.QueueLong$Companion, org.mapdb.Store, long, long, long, int, java.lang.Object)"], ["org.mapdb.QueueLong$Companion", "org.mapdb.QueueLong$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.QueueLong$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["void", "org.mapdb.QueueLong$Node$SERIALIZER.serialize(org.mapdb.DataOutput2, org.mapdb.QueueLong$Node)", "public void serialize(org.mapdb.DataOutput2, org.mapdb.QueueLong$Node)"], ["void", "org.mapdb.QueueLong$Node$SERIALIZER.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong$Node$SERIALIZER.deserialize(org.mapdb.DataInput2, int)", "public org.mapdb.QueueLong$Node deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.QueueLong$Node$SERIALIZER.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["long", "org.mapdb.QueueLong$Node.getPrevRecid()", "public final long getPrevRecid()"], ["long", "org.mapdb.QueueLong$Node.getNextRecid()", "public final long getNextRecid()"], ["long", "org.mapdb.QueueLong$Node.getTimestamp()", "public final long getTimestamp()"], ["long", "org.mapdb.QueueLong$Node.getValue()", "public final long getValue()"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong$Node(long, long, long, long)", "public org.mapdb.QueueLong$Node(long, long, long, long)"], ["long", "org.mapdb.QueueLong$Node.component1()", "public final long component1()"], ["long", "org.mapdb.QueueLong$Node.component2()", "public final long component2()"], ["long", "org.mapdb.QueueLong$Node.component3()", "public final long component3()"], ["long", "org.mapdb.QueueLong$Node.component4()", "public final long component4()"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong$Node.copy(long, long, long, long)", "public final org.mapdb.QueueLong$Node copy(long, long, long, long)"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong$Node.copy$default(org.mapdb.QueueLong$Node, long, long, long, long, int, java.lang.Object)", "public static org.mapdb.QueueLong$Node copy$default(org.mapdb.QueueLong$Node, long, long, long, long, int, java.lang.Object)"], ["java.lang.String", "org.mapdb.QueueLong$Node.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.QueueLong$Node.hashCode()", "public int hashCode()"], ["boolean", "org.mapdb.QueueLong$Node.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.mapdb.QueueLong$clear$1.take(long, org.mapdb.QueueLong$Node)", "public final boolean take(long, org.mapdb.QueueLong$Node)"], ["long", "org.mapdb.QueueLong.getTail()", "public final long getTail()"], ["void", "org.mapdb.QueueLong.setTail(long)", "public final void setTail(long)"], ["long", "org.mapdb.QueueLong.getHead()", "public final long getHead()"], ["void", "org.mapdb.QueueLong.setHead(long)", "public final void setHead(long)"], ["long", "org.mapdb.QueueLong.getHeadPrev()", "public final long getHeadPrev()"], ["void", "org.mapdb.QueueLong.setHeadPrev(long)", "public final void setHeadPrev(long)"], ["long", "org.mapdb.QueueLong.put(long, long)", "public final long put(long, long)"], ["void", "org.mapdb.QueueLong.put(long, long, long)", "public final void put(long, long, long)"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong.take()", "public final org.mapdb.QueueLong$Node take()"], ["void", "org.mapdb.QueueLong.takeUntil(org.mapdb.QueueLongTakeUntil)", "public final void takeUntil(org.mapdb.QueueLongTakeUntil)"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong.remove(long, boolean)", "public final org.mapdb.QueueLong$Node remove(long, boolean)"], ["void", "org.mapdb.QueueLong.bump(long, long)", "public final void bump(long, long)"], ["void", "org.mapdb.QueueLong.clear()", "public final void clear()"], ["long", "org.mapdb.QueueLong.size()", "public final long size()"], ["void", "org.mapdb.QueueLong.verify()", "public void verify()"], ["long[]", "org.mapdb.QueueLong.valuesArray()", "public final long[] valuesArray()"], ["void", "org.mapdb.QueueLong.forEach(kotlin.jvm.functions.Function3<? super java.lang.Long, ? super java.lang.Long, ? super java.lang.Long, kotlin.Unit>)", "public final void forEach(kotlin.jvm.functions.Function3<? super java.lang.Long, ? super java.lang.Long, ? super java.lang.Long, kotlin.Unit>)"], ["void", "org.mapdb.QueueLong.printContent(java.io.PrintStream)", "public final void printContent(java.io.PrintStream)"], ["org.mapdb.Store", "org.mapdb.QueueLong.getStore()", "public final org.mapdb.Store getStore()"], ["long", "org.mapdb.QueueLong.getTailRecid()", "public final long getTailRecid()"], ["long", "org.mapdb.QueueLong.getHeadRecid()", "public final long getHeadRecid()"], ["long", "org.mapdb.QueueLong.getHeadPrevRecid()", "public final long getHeadPrevRecid()"], ["org.mapdb.QueueLong", "org.mapdb.QueueLong(org.mapdb.Store, long, long, long)", "public org.mapdb.QueueLong(org.mapdb.Store, long, long, long)"], ["default", "org.mapdb.Serializer.int fixedSize()", "public default int fixedSize()"], ["default", "org.mapdb.Serializer.boolean isTrusted()", "public default boolean isTrusted()"], ["default", "org.mapdb.Serializer.int compare(A, A)", "public default int compare(A, A)"], ["default", "org.mapdb.Serializer.boolean equals(A, A)", "public default boolean equals(A, A)"], ["default", "org.mapdb.Serializer.int hashCode(A, int)", "public default int hashCode(A, int)"], ["default", "org.mapdb.Serializer.boolean needsAvailableSizeHint()", "public default boolean needsAvailableSizeHint()"], ["default", "org.mapdb.Serializer.A deserializeFromLong(long, int)", "public default A deserializeFromLong(long, int) throws java.io.IOException"], ["default", "org.mapdb.Serializer.A clone(A)", "public default A clone(A) throws java.io.IOException"], ["org.mapdb.SortedTableMap$Companion$Maker<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.pageSize(long)", "public final org.mapdb.SortedTableMap$Companion$Maker<K, V> pageSize(long)"], ["org.mapdb.SortedTableMap$Companion$Maker<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.nodeSize(int)", "public final org.mapdb.SortedTableMap$Companion$Maker<K, V> nodeSize(int)"], ["org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.createFrom(java.lang.Iterable<? extends kotlin.Pair<? extends K, ? extends V>>)", "public final org.mapdb.SortedTableMap<K, V> createFrom(java.lang.Iterable<? extends kotlin.Pair<? extends K, ? extends V>>)"], ["org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.createFrom(java.util.Map<K, ? extends V>)", "public final org.mapdb.SortedTableMap<K, V> createFrom(java.util.Map<K, ? extends V>)"], ["org.mapdb.SortedTableMap$Sink<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.createFromSink()", "public final org.mapdb.SortedTableMap$Sink<K, V> createFromSink()"], ["org.mapdb.SortedTableMap$Companion$Maker", "org.mapdb.SortedTableMap$Companion$Maker(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)", "public org.mapdb.SortedTableMap$Companion$Maker(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["org.mapdb.SortedTableMap$Companion$Maker", "org.mapdb.SortedTableMap$Companion$Maker(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.SortedTableMap$Companion$Maker(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.SortedTableMap$Companion$Maker", "org.mapdb.SortedTableMap$Companion$Maker()", "public org.mapdb.SortedTableMap$Companion$Maker()"], ["byte[]", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getBytes()", "public final byte[] getBytes()"], ["java.util.ArrayList<byte[]>", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getNodeKeys()", "public final java.util.ArrayList<byte[]> getNodeKeys()"], ["java.util.ArrayList<byte[]>", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getNodeVals()", "public final java.util.ArrayList<byte[]> getNodeVals()"], ["java.util.ArrayList<kotlin.Pair<K, V>>", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getPairs()", "public final java.util.ArrayList<kotlin.Pair<K, V>> getPairs()"], ["int", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getNodesSize()", "public final int getNodesSize()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.setNodesSize(int)", "public final void setNodesSize(int)"], ["long", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getFileTail()", "public final long getFileTail()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.setFileTail(long)", "public final void setFileTail(long)"], ["K", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getOldKey()", "public final K getOldKey()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.setOldKey(K)", "public final void setOldKey(K)"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.put(kotlin.Pair<? extends K, ? extends V>)", "public void put(kotlin.Pair<? extends K, ? extends V>)"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.put(java.lang.Object)", "public void put(java.lang.Object)"], ["org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap$Companion$createFromSink$1.create()", "public org.mapdb.SortedTableMap<K, V> create()"], ["java.lang.Object", "org.mapdb.SortedTableMap$Companion$createFromSink$1.create()", "public java.lang.Object create()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.pairsToNodes()", "public final void pairsToNodes()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.flushPage()", "public final void flushPage()"], ["<K, V> org.mapdb.SortedTableMap$Companion$Maker<K, V>", "org.mapdb.SortedTableMap$Companion.create(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)", "public final <K, V> org.mapdb.SortedTableMap$Companion$Maker<K, V> create(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["<K, V> org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap$Companion.open(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)", "public final <K, V> org.mapdb.SortedTableMap<K, V> open(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["<K, V> org.mapdb.SortedTableMap$Sink<K, V>", "org.mapdb.SortedTableMap$Companion.createFromSink(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, org.mapdb.volume.Volume, long, int)", "public final <K, V> org.mapdb.SortedTableMap$Sink<K, V> createFromSink(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, org.mapdb.volume.Volume, long, int)"], ["org.mapdb.SortedTableMap$Sink", "org.mapdb.SortedTableMap$Companion.createFromSink$default(org.mapdb.SortedTableMap$Companion, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, org.mapdb.volume.Volume, long, int, int, java.lang.Object)", "public static org.mapdb.SortedTableMap$Sink createFromSink$default(org.mapdb.SortedTableMap$Companion, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, org.mapdb.volume.Volume, long, int, int, java.lang.Object)"], ["int", "org.mapdb.SortedTableMap$Companion.access$getStart$p(org.mapdb.SortedTableMap$Companion)", "public static final int access$getStart$p(org.mapdb.SortedTableMap$Companion)"], ["long", "org.mapdb.SortedTableMap$Companion.access$getSIZE_OFFSET$p(org.mapdb.SortedTableMap$Companion)", "public static final long access$getSIZE_OFFSET$p(org.mapdb.SortedTableMap$Companion)"], ["long", "org.mapdb.SortedTableMap$Companion.access$getPAGE_COUNT_OFFSET$p(org.mapdb.SortedTableMap$Companion)", "public static final long access$getPAGE_COUNT_OFFSET$p(org.mapdb.SortedTableMap$Companion)"], ["long", "org.mapdb.SortedTableMap$Companion.access$getPAGE_SIZE_OFFSET$p(org.mapdb.SortedTableMap$Companion)", "public static final long access$getPAGE_SIZE_OFFSET$p(org.mapdb.SortedTableMap$Companion)"], ["org.mapdb.SortedTableMap$Companion", "org.mapdb.SortedTableMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.SortedTableMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["boolean", "org.mapdb.SortedTableMap$NodeIterator.moveToNext()", "public final boolean moveToNext()"], ["boolean", "org.mapdb.SortedTableMap$NodeIterator.moveToPrev()", "public final boolean moveToPrev()"], ["long", "org.mapdb.SortedTableMap$NodeIterator.keysOffset()", "public final long keysOffset()"], ["long", "org.mapdb.SortedTableMap$NodeIterator.keysOffsetEnd()", "public final long keysOffsetEnd()"], ["long", "org.mapdb.SortedTableMap$NodeIterator.valsOffset()", "public final long valsOffset()"], ["long", "org.mapdb.SortedTableMap$NodeIterator.valsOffsetEnd()", "public final long valsOffsetEnd()"], ["int", "org.mapdb.SortedTableMap$NodeIterator.keysSize()", "public final int keysSize()"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$NodeIterator.loadKeys()", "public final java.lang.Object[] loadKeys()"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$NodeIterator.loadVals(int)", "public final java.lang.Object[] loadVals(int)"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$NodeIterator(org.mapdb.SortedTableMap<?, ?>, long, long, long, long)", "public org.mapdb.SortedTableMap$NodeIterator(org.mapdb.SortedTableMap<?, ?>, long, long, long, long)"], ["void", "org.mapdb.SortedTableMap$Sink.put(K, V)", "public final void put(K, V)"], ["org.mapdb.SortedTableMap$Sink", "org.mapdb.SortedTableMap$Sink()", "public org.mapdb.SortedTableMap$Sink()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$descendingEntryIterator$1.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$1.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingEntryIterator$1.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingEntryIterator$1.getNodeVals()", "public final java.lang.Object[] getNodeVals()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.setNodeVals(java.lang.Object[])", "public final void setNodeVals(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingEntryIterator$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap$descendingEntryIterator$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.SortedTableMap$descendingEntryIterator$1.next()", "public java.lang.Object next()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.remove()", "public void remove()"], ["long", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getPage()", "public final long getPage()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setPage(long)", "public final void setPage(long)"], ["long", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getPageWithHead()", "public final long getPageWithHead()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setPageWithHead(long)", "public final void setPageWithHead(long)"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getPageNodeCount()", "public final int getPageNodeCount()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setPageNodeCount(int)", "public final void setPageNodeCount(int)"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getNode()", "public final int getNode()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setNode(int)", "public final void setNode(int)"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getNodeVals()", "public final java.lang.Object[] getNodeVals()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setNodeVals(java.lang.Object[])", "public final void setNodeVals(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getLoComp()", "public final int getLoComp()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.loadFirstEntry()", "public final void loadFirstEntry()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.findHi()", "public final void findHi()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingEntryIterator$2.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap$descendingEntryIterator$2.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.SortedTableMap$descendingEntryIterator$2.next()", "public java.lang.Object next()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.checkLoBound()", "public final void checkLoBound()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.remove()", "public void remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$descendingKeyIterator$1.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$1.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$1.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingKeyIterator$1.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$1.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$1.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingKeyIterator$1.hasNext()", "public boolean hasNext()"], ["K", "org.mapdb.SortedTableMap$descendingKeyIterator$1.next()", "public K next()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$1.remove()", "public void remove()"], ["long", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getPage()", "public final long getPage()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setPage(long)", "public final void setPage(long)"], ["long", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getPageWithHead()", "public final long getPageWithHead()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setPageWithHead(long)", "public final void setPageWithHead(long)"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getPageNodeCount()", "public final int getPageNodeCount()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setPageNodeCount(int)", "public final void setPageNodeCount(int)"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getNode()", "public final int getNode()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setNode(int)", "public final void setNode(int)"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getLoComp()", "public final int getLoComp()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.loadFirstEntry()", "public final void loadFirstEntry()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.findHi()", "public final void findHi()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingKeyIterator$2.hasNext()", "public boolean hasNext()"], ["K", "org.mapdb.SortedTableMap$descendingKeyIterator$2.next()", "public K next()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.checkLoBound()", "public final void checkLoBound()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.remove()", "public void remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$descendingValueIterator$1.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$1.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$1.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingValueIterator$1.getNodeVals()", "public final java.lang.Object[] getNodeVals()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$1.setNodeVals(java.lang.Object[])", "public final void setNodeVals(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$1.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingValueIterator$1.hasNext()", "public boolean hasNext()"], ["V", "org.mapdb.SortedTableMap$descendingValueIterator$1.next()", "public V next()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$1.remove()", "public void remove()"], ["long", "org.mapdb.SortedTableMap$descendingValueIterator$2.getPage()", "public final long getPage()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setPage(long)", "public final void setPage(long)"], ["long", "org.mapdb.SortedTableMap$descendingValueIterator$2.getPageWithHead()", "public final long getPageWithHead()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setPageWithHead(long)", "public final void setPageWithHead(long)"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$2.getPageNodeCount()", "public final int getPageNodeCount()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setPageNodeCount(int)", "public final void setPageNodeCount(int)"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$2.getNode()", "public final int getNode()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setNode(int)", "public final void setNode(int)"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$2.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingValueIterator$2.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingValueIterator$2.getNodeVals()", "public final java.lang.Object[] getNodeVals()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setNodeVals(java.lang.Object[])", "public final void setNodeVals(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$2.getLoComp()", "public final int getLoComp()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.loadFirstEntry()", "public final void loadFirstEntry()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.findHi()", "public final void findHi()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingValueIterator$2.hasNext()", "public boolean hasNext()"], ["V", "org.mapdb.SortedTableMap$descendingValueIterator$2.next()", "public V next()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.checkLoBound()", "public final void checkLoBound()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.remove()", "public void remove()"], ["boolean", "org.mapdb.SortedTableMap$entries$1.contains(java.util.Map$Entry)", "public boolean contains(java.util.Map$Entry)"], ["boolean", "org.mapdb.SortedTableMap$entries$1.contains(java.lang.Object)", "public final boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap$entries$1.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.SortedTableMap$entries$1.getSize()", "public int getSize()"], ["int", "org.mapdb.SortedTableMap$entries$1.size()", "public final int size()"], ["boolean", "org.mapdb.SortedTableMap$entries$1.add(java.util.Map$Entry<K, V>)", "public boolean add(java.util.Map$Entry<K, V>)"], ["boolean", "org.mapdb.SortedTableMap$entries$1.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["void", "org.mapdb.SortedTableMap$entries$1.clear()", "public void clear()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap$entries$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.mapdb.SortedTableMap$entries$1.remove(java.util.Map$Entry)", "public boolean remove(java.util.Map$Entry)"], ["boolean", "org.mapdb.SortedTableMap$entries$1.remove(java.lang.Object)", "public final boolean remove(java.lang.Object)"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$entryIterator$1.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$entryIterator$1.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$entryIterator$1.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$entryIterator$1.getNodeVals()", "public final java.lang.Object[] getNodeVals()"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.setNodeVals(java.lang.Object[])", "public final void setNodeVals(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$entryIterator$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap$entryIterator$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.SortedTableMap$entryIterator$1.next()", "public java.lang.Object next()"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.remove()", "public void remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$entryIterator$2.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$entryIterator$2.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$entryIterator$2.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$entryIterator$2.getNodeVals()", "public final java.lang.Object[] getNodeVals()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.setNodeVals(java.lang.Object[])", "public final void setNodeVals(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$entryIterator$2.getHiComp()", "public final int getHiComp()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.loadNextNode()", "public final void loadNextNode()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.findStart()", "public final void findStart()"], ["boolean", "org.mapdb.SortedTableMap$entryIterator$2.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap$entryIterator$2.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.SortedTableMap$entryIterator$2.next()", "public java.lang.Object next()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.checkHiBound()", "public final void checkHiBound()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.remove()", "public void remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$keyIterator$1.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$keyIterator$1.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$keyIterator$1.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$keyIterator$1.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$keyIterator$1.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$keyIterator$1.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$keyIterator$1.hasNext()", "public boolean hasNext()"], ["K", "org.mapdb.SortedTableMap$keyIterator$1.next()", "public K next()"], ["void", "org.mapdb.SortedTableMap$keyIterator$1.remove()", "public void remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$keyIterator$2.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$keyIterator$2.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$keyIterator$2.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$keyIterator$2.getHiComp()", "public final int getHiComp()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.loadNextNode()", "public final void loadNextNode()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.findStart()", "public final void findStart()"], ["boolean", "org.mapdb.SortedTableMap$keyIterator$2.hasNext()", "public boolean hasNext()"], ["K", "org.mapdb.SortedTableMap$keyIterator$2.next()", "public K next()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.checkHiBound()", "public final void checkHiBound()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.remove()", "public void remove()"], ["java.lang.Object", "org.mapdb.SortedTableMap$pageKeys$1.invoke()", "public final java.lang.Object invoke()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$valueIterator$1.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$valueIterator$1.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$valueIterator$1.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$valueIterator$1.getNodeVals()", "public final java.lang.Object[] getNodeVals()"], ["void", "org.mapdb.SortedTableMap$valueIterator$1.setNodeVals(java.lang.Object[])", "public final void setNodeVals(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$valueIterator$1.loadNextNode()", "public final void loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$valueIterator$1.hasNext()", "public boolean hasNext()"], ["V", "org.mapdb.SortedTableMap$valueIterator$1.next()", "public V next()"], ["void", "org.mapdb.SortedTableMap$valueIterator$1.remove()", "public void remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$valueIterator$2.getNodeIter()", "public final org.mapdb.SortedTableMap$NodeIterator getNodeIter()"], ["int", "org.mapdb.SortedTableMap$valueIterator$2.getNodePos()", "public final int getNodePos()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.setNodePos(int)", "public final void setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$valueIterator$2.getNodeKeys()", "public final java.lang.Object[] getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.setNodeKeys(java.lang.Object[])", "public final void setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$valueIterator$2.getNodeVals()", "public final java.lang.Object[] getNodeVals()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.setNodeVals(java.lang.Object[])", "public final void setNodeVals(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$valueIterator$2.getHiComp()", "public final int getHiComp()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.loadNextNode()", "public final void loadNextNode()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.findStart()", "public final void findStart()"], ["boolean", "org.mapdb.SortedTableMap$valueIterator$2.hasNext()", "public boolean hasNext()"], ["V", "org.mapdb.SortedTableMap$valueIterator$2.next()", "public V next()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.checkHiBound()", "public final void checkHiBound()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.remove()", "public void remove()"], ["boolean", "org.mapdb.SortedTableMap$values$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap$values$1.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.SortedTableMap$values$1.getSize()", "public int getSize()"], ["int", "org.mapdb.SortedTableMap$values$1.size()", "public final int size()"], ["boolean", "org.mapdb.SortedTableMap$values$1.add(V)", "public boolean add(V)"], ["void", "org.mapdb.SortedTableMap$values$1.clear()", "public void clear()"], ["java.util.Iterator<V>", "org.mapdb.SortedTableMap$values$1.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "org.mapdb.SortedTableMap$values$1.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["org.mapdb.serializer.GroupSerializer<K>", "org.mapdb.SortedTableMap.getComparator()", "public final org.mapdb.serializer.GroupSerializer<K> getComparator()"], ["long", "org.mapdb.SortedTableMap.getSizeLong()", "public final long getSizeLong()"], ["long", "org.mapdb.SortedTableMap.getPageCount()", "public final long getPageCount()"], ["boolean", "org.mapdb.SortedTableMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.mapdb.SortedTableMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.SortedTableMap.getSize()", "public int getSize()"], ["int", "org.mapdb.SortedTableMap.size()", "public final int size()"], ["long", "org.mapdb.SortedTableMap.sizeLong()", "public long sizeLong()"], ["java.util.Iterator<K>", "org.mapdb.SortedTableMap.keyIterator()", "public java.util.Iterator<K> keyIterator()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.entryIterator()", "public final java.util.Iterator<java.util.Map$Entry<K, V>> entryIterator()"], ["java.util.Iterator<V>", "org.mapdb.SortedTableMap.valueIterator()", "public final java.util.Iterator<V> valueIterator()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.getEntries()", "public java.util.Set<java.util.Map$Entry<K, V>> getEntries()"], ["java.util.Set", "org.mapdb.SortedTableMap.entrySet()", "public final java.util.Set entrySet()"], ["java.util.NavigableSet<K>", "org.mapdb.SortedTableMap.getKeys()", "public java.util.NavigableSet<K> getKeys()"], ["java.util.NavigableSet", "org.mapdb.SortedTableMap.keySet()", "public java.util.NavigableSet keySet()"], ["java.util.Set", "org.mapdb.SortedTableMap.keySet()", "public final java.util.Set keySet()"], ["java.util.NavigableSet<K>", "org.mapdb.SortedTableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Collection<V>", "org.mapdb.SortedTableMap.getValues()", "public java.util.Collection<V> getValues()"], ["java.util.Collection", "org.mapdb.SortedTableMap.values()", "public final java.util.Collection values()"], ["void", "org.mapdb.SortedTableMap.clear()", "public void clear()"], ["V", "org.mapdb.SortedTableMap.put(K, V)", "public V put(K, V)"], ["void", "org.mapdb.SortedTableMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.mapdb.SortedTableMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["V", "org.mapdb.SortedTableMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.SortedTableMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.SortedTableMap.replace(K, V)", "public V replace(K, V)"], ["boolean", "org.mapdb.SortedTableMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.mapdb.SortedTableMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.mapdb.SortedTableMap.firstKey2()", "public K firstKey2()"], ["K", "org.mapdb.SortedTableMap.lastKey2()", "public K lastKey2()"], ["K", "org.mapdb.SortedTableMap.firstKey()", "public K firstKey()"], ["K", "org.mapdb.SortedTableMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.mapdb.SortedTableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.mapdb.SortedTableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.mapdb.SortedTableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.mapdb.SortedTableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.subMap(K, boolean, K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap", "org.mapdb.SortedTableMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.headMap(K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap", "org.mapdb.SortedTableMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.tailMap(K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> tailMap(K, boolean)"], ["java.util.NavigableMap", "org.mapdb.SortedTableMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.subMap(K, K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> subMap(K, K)"], ["java.util.SortedMap", "org.mapdb.SortedTableMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.headMap(K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> headMap(K)"], ["java.util.SortedMap", "org.mapdb.SortedTableMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.tailMap(K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> tailMap(K)"], ["java.util.SortedMap", "org.mapdb.SortedTableMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.NavigableSet<K>", "org.mapdb.SortedTableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.descendingMap()", "public java.util.concurrent.ConcurrentNavigableMap<K, V> descendingMap()"], ["java.util.NavigableMap", "org.mapdb.SortedTableMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.descendingEntryIterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> descendingEntryIterator()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.descendingEntryIterator(K, boolean, K, boolean)", "public java.util.Iterator<java.util.Map$Entry<K, V>> descendingEntryIterator(K, boolean, K, boolean)"], ["java.util.Iterator<K>", "org.mapdb.SortedTableMap.descendingKeyIterator()", "public java.util.Iterator<K> descendingKeyIterator()"], ["java.util.Iterator<K>", "org.mapdb.SortedTableMap.descendingKeyIterator(K, boolean, K, boolean)", "public java.util.Iterator<K> descendingKeyIterator(K, boolean, K, boolean)"], ["java.util.Iterator<V>", "org.mapdb.SortedTableMap.descendingValueIterator()", "public java.util.Iterator<V> descendingValueIterator()"], ["java.util.Iterator<V>", "org.mapdb.SortedTableMap.descendingValueIterator(K, boolean, K, boolean)", "public java.util.Iterator<V> descendingValueIterator(K, boolean, K, boolean)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.entryIterator(K, boolean, K, boolean)", "public java.util.Iterator<java.util.Map$Entry<K, V>> entryIterator(K, boolean, K, boolean)"], ["java.util.Iterator<K>", "org.mapdb.SortedTableMap.keyIterator(K, boolean, K, boolean)", "public java.util.Iterator<K> keyIterator(K, boolean, K, boolean)"], ["java.util.Iterator<V>", "org.mapdb.SortedTableMap.valueIterator(K, boolean, K, boolean)", "public java.util.Iterator<V> valueIterator(K, boolean, K, boolean)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.findHigher(K, boolean)", "public java.util.Map$Entry<K, V> findHigher(K, boolean)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.findLower(K, boolean)", "public java.util.Map$Entry<K, V> findLower(K, boolean)"], ["K", "org.mapdb.SortedTableMap.findHigherKey(K, boolean)", "public K findHigherKey(K, boolean)"], ["K", "org.mapdb.SortedTableMap.findLowerKey(K, boolean)", "public K findLowerKey(K, boolean)"], ["void", "org.mapdb.SortedTableMap.forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)", "public void forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)"], ["void", "org.mapdb.SortedTableMap.forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)", "public void forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)"], ["void", "org.mapdb.SortedTableMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)", "public void forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["boolean", "org.mapdb.SortedTableMap.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.SortedTableMap.close()", "public final void close()"], ["boolean", "org.mapdb.SortedTableMap.putIfAbsentBoolean(K, V)", "public boolean putIfAbsentBoolean(K, V)"], ["org.mapdb.serializer.GroupSerializer<K>", "org.mapdb.SortedTableMap.getKeySerializer()", "public org.mapdb.serializer.GroupSerializer<K> getKeySerializer()"], ["org.mapdb.Serializer", "org.mapdb.SortedTableMap.getKeySerializer()", "public org.mapdb.Serializer getKeySerializer()"], ["org.mapdb.serializer.GroupSerializer<V>", "org.mapdb.SortedTableMap.getValueSerializer()", "public org.mapdb.serializer.GroupSerializer<V> getValueSerializer()"], ["org.mapdb.Serializer", "org.mapdb.SortedTableMap.getValueSerializer()", "public org.mapdb.Serializer getValueSerializer()"], ["long", "org.mapdb.SortedTableMap.getPageSize()", "public final long getPageSize()"], ["boolean", "org.mapdb.SortedTableMap.getHasValues()", "public boolean getHasValues()"], ["org.mapdb.SortedTableMap", "org.mapdb.SortedTableMap(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, long, org.mapdb.volume.Volume, boolean)", "public org.mapdb.SortedTableMap(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, long, org.mapdb.volume.Volume, boolean)"], ["org.mapdb.SortedTableMap", "org.mapdb.SortedTableMap(org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, long, org.mapdb.volume.Volume, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.SortedTableMap(org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, long, org.mapdb.volume.Volume, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["long", "org.mapdb.SortedTableMap.access$getSIZE_OFFSET$cp()", "public static final long access$getSIZE_OFFSET$cp()"], ["long", "org.mapdb.SortedTableMap.access$getPAGE_COUNT_OFFSET$cp()", "public static final long access$getPAGE_COUNT_OFFSET$cp()"], ["long", "org.mapdb.SortedTableMap.access$getPAGE_SIZE_OFFSET$cp()", "public static final long access$getPAGE_SIZE_OFFSET$cp()"], ["int", "org.mapdb.SortedTableMap.access$getStart$cp()", "public static final int access$getStart$cp()"], ["<K, V> org.mapdb.SortedTableMap$Companion$Maker<K, V>", "org.mapdb.SortedTableMap.create(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)", "public static final <K, V> org.mapdb.SortedTableMap$Companion$Maker<K, V> create(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["<K, V> org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap.open(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)", "public static final <K, V> org.mapdb.SortedTableMap<K, V> open(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["void", "org.mapdb.Store$DefaultImpls.checkThreadSafe(org.mapdb.Store)", "public static void checkThreadSafe(org.mapdb.Store)"], ["void", "org.mapdb.StoreBinary$DefaultImpls.checkThreadSafe(org.mapdb.StoreBinary)", "public static void checkThreadSafe(org.mapdb.StoreBinary)"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect$Companion.make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)", "public final org.mapdb.StoreDirect make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect$Companion.make$default(org.mapdb.StoreDirect$Companion, java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean, int, java.lang.Object)", "public static org.mapdb.StoreDirect make$default(org.mapdb.StoreDirect$Companion, java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean, int, java.lang.Object)"], ["org.mapdb.StoreDirect$Companion", "org.mapdb.StoreDirect$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.StoreDirect$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.StoreDirect$calculateFreeSize$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["void", "org.mapdb.StoreDirect$calculateFreeSize$1.invoke(long)", "public final void invoke(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$updateProtected$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["long", "org.mapdb.StoreDirect$updateProtected$1.invoke(long)", "public final long invoke(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$2.invoke(java.lang.Object, java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$2.invoke(long, long, boolean)", "public final void invoke(long, long, boolean)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$3.invoke(java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$3.invoke(long, long)", "public final void invoke(long, long)"], ["void", "org.mapdb.StoreDirect$verify$4.value(long)", "public final void value(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$5.invoke(java.lang.Object, java.lang.Object)", "public java.lang.Object invoke(java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$5.invoke(long, kotlin.jvm.functions.Function1<? super java.lang.Long, kotlin.Unit>)", "public final void invoke(long, kotlin.jvm.functions.Function1<? super java.lang.Long, kotlin.Unit>)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$6.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$6.invoke(long)", "public final void invoke(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$7.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$7.invoke(long)", "public final void invoke(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$volume$1.invoke()", "public java.lang.Object invoke()"], ["org.mapdb.volume.Volume", "org.mapdb.StoreDirect$volume$1.invoke()", "public final org.mapdb.volume.Volume invoke()"], ["long", "org.mapdb.StoreDirect.preallocate()", "public long preallocate()"], ["<R> R", "org.mapdb.StoreDirect.get(long, org.mapdb.Serializer<R>)", "public <R> R get(long, org.mapdb.Serializer<R>)"], ["long", "org.mapdb.StoreDirect.getBinaryLong(long, org.mapdb.StoreBinaryGetLong)", "public long getBinaryLong(long, org.mapdb.StoreBinaryGetLong)"], ["<R> long", "org.mapdb.StoreDirect.put(R, org.mapdb.Serializer<R>)", "public <R> long put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreDirect.update(long, R, org.mapdb.Serializer<R>)", "public <R> void update(long, R, org.mapdb.Serializer<R>)"], ["<R> boolean", "org.mapdb.StoreDirect.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)", "public <R> boolean compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreDirect.delete(long, org.mapdb.Serializer<R>)", "public <R> void delete(long, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreDirect.compact()", "public void compact()"], ["void", "org.mapdb.StoreDirect.commit()", "public void commit()"], ["void", "org.mapdb.StoreDirect.close()", "public void close()"], ["kotlin.collections.LongIterator", "org.mapdb.StoreDirect.getAllRecids()", "public kotlin.collections.LongIterator getAllRecids()"], ["void", "org.mapdb.StoreDirect.verify()", "public void verify()"], ["long", "org.mapdb.StoreDirect.getFreeSize()", "public final long getFreeSize()"], ["long", "org.mapdb.StoreDirect.getTotalSize()", "public final long getTotalSize()"], ["boolean", "org.mapdb.StoreDirect.fileLoad()", "public boolean fileLoad()"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.StoreDirect.getAllFiles()", "public java.lang.Iterable<java.lang.String> getAllFiles()"], ["boolean", "org.mapdb.StoreDirect.isReadOnly()", "public boolean isReadOnly()"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect(java.lang.String, org.mapdb.volume.VolumeFactory, boolean, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)", "public org.mapdb.StoreDirect(java.lang.String, org.mapdb.volume.VolumeFactory, boolean, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["java.lang.Object", "org.mapdb.StoreDirectAbstract$fileHeaderCheck$1.get()", "public java.lang.Object get()"], ["java.lang.String", "org.mapdb.StoreDirectAbstract$fileHeaderCheck$1.get()", "public final java.lang.String get()"], ["boolean", "org.mapdb.StoreDirectAbstract.isClosed()", "public boolean isClosed()"], ["long", "org.mapdb.StoreDirectAbstract.getFileTail$mapdb()", "public final long getFileTail$mapdb()"], ["void", "org.mapdb.StoreDirectAbstract.setFileTail$mapdb(long)", "public final void setFileTail$mapdb(long)"], ["int", "org.mapdb.StoreDirectAbstract.storeHeaderCompose()", "public final int storeHeaderCompose()"], ["long", "org.mapdb.StoreDirectAbstract.calculateChecksum()", "public final long calculateChecksum()"], ["int", "org.mapdb.StoreDirectAbstract.calculateHeaderChecksum()", "public final int calculateHeaderChecksum()"], ["java.lang.String", "org.mapdb.StoreDirectAbstract.getFile()", "public final java.lang.String getFile()"], ["org.mapdb.volume.VolumeFactory", "org.mapdb.StoreDirectAbstract.getVolumeFactory()", "public final org.mapdb.volume.VolumeFactory getVolumeFactory()"], ["boolean", "org.mapdb.StoreDirectAbstract.isThreadSafe()", "public boolean isThreadSafe()"], ["int", "org.mapdb.StoreDirectAbstract.getConcShift()", "public final int getConcShift()"], ["boolean", "org.mapdb.StoreDirectAbstract.getFileDeleteAfterClose()", "public final boolean getFileDeleteAfterClose()"], ["boolean", "org.mapdb.StoreDirectAbstract.getChecksum()", "public final boolean getChecksum()"], ["boolean", "org.mapdb.StoreDirectAbstract.getChecksumHeader()", "public final boolean getChecksumHeader()"], ["boolean", "org.mapdb.StoreDirectAbstract.getChecksumHeaderBypass()", "public final boolean getChecksumHeaderBypass()"], ["org.mapdb.StoreDirectAbstract", "org.mapdb.StoreDirectAbstract(java.lang.String, org.mapdb.volume.VolumeFactory, boolean, int, boolean, boolean, boolean, boolean)", "public org.mapdb.StoreDirectAbstract(java.lang.String, org.mapdb.volume.VolumeFactory, boolean, int, boolean, boolean, boolean, boolean)"], ["void", "org.mapdb.StoreDirectAbstract.checkThreadSafe()", "public void checkThreadSafe()"], ["java.lang.Object", "org.mapdb.StoreOnHeap$Companion.access$getNULL_RECORD$p(org.mapdb.StoreOnHeap$Companion)", "public static final java.lang.Object access$getNULL_RECORD$p(org.mapdb.StoreOnHeap$Companion)"], ["org.mapdb.StoreOnHeap$Companion", "org.mapdb.StoreOnHeap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.StoreOnHeap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["long", "org.mapdb.StoreOnHeap.preallocate()", "public long preallocate()"], ["<R> long", "org.mapdb.StoreOnHeap.put(R, org.mapdb.Serializer<R>)", "public <R> long put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreOnHeap.update(long, R, org.mapdb.Serializer<R>)", "public <R> void update(long, R, org.mapdb.Serializer<R>)"], ["<R> boolean", "org.mapdb.StoreOnHeap.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)", "public <R> boolean compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreOnHeap.delete(long, org.mapdb.Serializer<R>)", "public <R> void delete(long, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreOnHeap.commit()", "public void commit()"], ["void", "org.mapdb.StoreOnHeap.compact()", "public void compact()"], ["void", "org.mapdb.StoreOnHeap.close()", "public void close()"], ["boolean", "org.mapdb.StoreOnHeap.isClosed()", "public boolean isClosed()"], ["<R> R", "org.mapdb.StoreOnHeap.get(long, org.mapdb.Serializer<R>)", "public <R> R get(long, org.mapdb.Serializer<R>)"], ["kotlin.collections.LongIterator", "org.mapdb.StoreOnHeap.getAllRecids()", "public kotlin.collections.LongIterator getAllRecids()"], ["void", "org.mapdb.StoreOnHeap.verify()", "public void verify()"], ["boolean", "org.mapdb.StoreOnHeap.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.mapdb.StoreOnHeap.fileLoad()", "public boolean fileLoad()"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.StoreOnHeap.getAllFiles()", "public java.lang.Iterable<java.lang.String> getAllFiles()"], ["boolean", "org.mapdb.StoreOnHeap.isThreadSafe()", "public boolean isThreadSafe()"], ["org.mapdb.StoreOnHeap", "org.mapdb.StoreOnHeap(boolean)", "public org.mapdb.StoreOnHeap(boolean)"], ["org.mapdb.StoreOnHeap", "org.mapdb.StoreOnHeap(boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.StoreOnHeap(boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.StoreOnHeap", "org.mapdb.StoreOnHeap()", "public org.mapdb.StoreOnHeap()"], ["void", "org.mapdb.StoreOnHeap.checkThreadSafe()", "public void checkThreadSafe()"], ["java.lang.Object", "org.mapdb.StoreOnHeap.access$getNULL_RECORD$cp()", "public static final java.lang.Object access$getNULL_RECORD$cp()"], ["void", "org.mapdb.StoreReadOnlyWrapper.close()", "public void close()"], ["void", "org.mapdb.StoreReadOnlyWrapper.commit()", "public void commit()"], ["void", "org.mapdb.StoreReadOnlyWrapper.compact()", "public void compact()"], ["<R> boolean", "org.mapdb.StoreReadOnlyWrapper.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)", "public <R> boolean compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreReadOnlyWrapper.delete(long, org.mapdb.Serializer<R>)", "public <R> void delete(long, org.mapdb.Serializer<R>)"], ["boolean", "org.mapdb.StoreReadOnlyWrapper.isClosed()", "public boolean isClosed()"], ["boolean", "org.mapdb.StoreReadOnlyWrapper.isThreadSafe()", "public boolean isThreadSafe()"], ["boolean", "org.mapdb.StoreReadOnlyWrapper.isReadOnly()", "public boolean isReadOnly()"], ["long", "org.mapdb.StoreReadOnlyWrapper.preallocate()", "public long preallocate()"], ["<R> long", "org.mapdb.StoreReadOnlyWrapper.put(R, org.mapdb.Serializer<R>)", "public <R> long put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreReadOnlyWrapper.update(long, R, org.mapdb.Serializer<R>)", "public <R> void update(long, R, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreReadOnlyWrapper.verify()", "public void verify()"], ["<R> R", "org.mapdb.StoreReadOnlyWrapper.get(long, org.mapdb.Serializer<R>)", "public <R> R get(long, org.mapdb.Serializer<R>)"], ["kotlin.collections.LongIterator", "org.mapdb.StoreReadOnlyWrapper.getAllRecids()", "public kotlin.collections.LongIterator getAllRecids()"], ["boolean", "org.mapdb.StoreReadOnlyWrapper.fileLoad()", "public boolean fileLoad()"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.StoreReadOnlyWrapper.getAllFiles()", "public java.lang.Iterable<java.lang.String> getAllFiles()"], ["org.mapdb.StoreReadOnlyWrapper", "org.mapdb.StoreReadOnlyWrapper(org.mapdb.Store)", "public org.mapdb.StoreReadOnlyWrapper(org.mapdb.Store)"], ["void", "org.mapdb.StoreReadOnlyWrapper.checkThreadSafe()", "public void checkThreadSafe()"], ["byte[]", "org.mapdb.StoreTrivial$Companion.access$getNULL_RECORD$p(org.mapdb.StoreTrivial$Companion)", "public static final byte[] access$getNULL_RECORD$p(org.mapdb.StoreTrivial$Companion)"], ["org.mapdb.StoreTrivial$Companion", "org.mapdb.StoreTrivial$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.StoreTrivial$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["void", "org.mapdb.StoreTrivial.loadFrom(java.io.InputStream)", "public final void loadFrom(java.io.InputStream)"], ["void", "org.mapdb.StoreTrivial.saveTo(java.io.OutputStream)", "public final void saveTo(java.io.OutputStream)"], ["long", "org.mapdb.StoreTrivial.preallocate()", "public long preallocate()"], ["<R> long", "org.mapdb.StoreTrivial.put(R, org.mapdb.Serializer<R>)", "public <R> long put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreTrivial.update(long, R, org.mapdb.Serializer<R>)", "public <R> void update(long, R, org.mapdb.Serializer<R>)"], ["<R> boolean", "org.mapdb.StoreTrivial.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)", "public <R> boolean compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreTrivial.delete(long, org.mapdb.Serializer<R>)", "public <R> void delete(long, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreTrivial.commit()", "public void commit()"], ["void", "org.mapdb.StoreTrivial.compact()", "public void compact()"], ["void", "org.mapdb.StoreTrivial.close()", "public void close()"], ["boolean", "org.mapdb.StoreTrivial.isClosed()", "public boolean isClosed()"], ["<R> R", "org.mapdb.StoreTrivial.get(long, org.mapdb.Serializer<R>)", "public <R> R get(long, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreTrivial.clear()", "public final void clear()"], ["void", "org.mapdb.StoreTrivial.clearInternal$mapdb()", "public final void clearInternal$mapdb()"], ["boolean", "org.mapdb.StoreTrivial.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["kotlin.collections.LongIterator", "org.mapdb.StoreTrivial.getAllRecids()", "public kotlin.collections.LongIterator getAllRecids()"], ["void", "org.mapdb.StoreTrivial.verify()", "public void verify()"], ["boolean", "org.mapdb.StoreTrivial.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.mapdb.StoreTrivial.fileLoad()", "public boolean fileLoad()"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.StoreTrivial.getAllFiles()", "public java.lang.Iterable<java.lang.String> getAllFiles()"], ["boolean", "org.mapdb.StoreTrivial.isThreadSafe()", "public boolean isThreadSafe()"], ["org.mapdb.StoreTrivial", "org.mapdb.StoreTrivial(boolean)", "public org.mapdb.StoreTrivial(boolean)"], ["org.mapdb.StoreTrivial", "org.mapdb.StoreTrivial(boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.StoreTrivial(boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.StoreTrivial", "org.mapdb.StoreTrivial()", "public org.mapdb.StoreTrivial()"], ["void", "org.mapdb.StoreTrivial.checkThreadSafe()", "public void checkThreadSafe()"], ["byte[]", "org.mapdb.StoreTrivial.access$getNULL_RECORD$cp()", "public static final byte[] access$getNULL_RECORD$cp()"], ["java.lang.String", "org.mapdb.StoreTrivialTx$Companion.getCOMMIT_MARKER_SUFFIX$mapdb()", "public final java.lang.String getCOMMIT_MARKER_SUFFIX$mapdb()"], ["java.lang.String", "org.mapdb.StoreTrivialTx$Companion.getDATA_SUFFIX$mapdb()", "public final java.lang.String getDATA_SUFFIX$mapdb()"], ["org.mapdb.StoreTrivialTx$Companion", "org.mapdb.StoreTrivialTx$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.StoreTrivialTx$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.nio.file.Path", "org.mapdb.StoreTrivialTx.getPath()", "public final java.nio.file.Path getPath()"], ["java.lang.Long", "org.mapdb.StoreTrivialTx.findLattestCommitMarker$mapdb()", "public final java.lang.Long findLattestCommitMarker$mapdb()"], ["void", "org.mapdb.StoreTrivialTx.commit()", "public void commit()"], ["void", "org.mapdb.StoreTrivialTx.rollback()", "public void rollback()"], ["void", "org.mapdb.StoreTrivialTx.close()", "public void close()"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.StoreTrivialTx.getAllFiles()", "public java.lang.Iterable<java.lang.String> getAllFiles()"], ["java.io.File", "org.mapdb.StoreTrivialTx.getFile()", "public final java.io.File getFile()"], ["boolean", "org.mapdb.StoreTrivialTx.getDeleteFilesAfterClose()", "public final boolean getDeleteFilesAfterClose()"], ["org.mapdb.StoreTrivialTx", "org.mapdb.StoreTrivialTx(java.io.File, boolean, boolean)", "public org.mapdb.StoreTrivialTx(java.io.File, boolean, boolean)"], ["org.mapdb.StoreTrivialTx", "org.mapdb.StoreTrivialTx(java.io.File, boolean, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.StoreTrivialTx(java.io.File, boolean, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.String", "org.mapdb.StoreTrivialTx.access$getCOMMIT_MARKER_SUFFIX$cp()", "public static final java.lang.String access$getCOMMIT_MARKER_SUFFIX$cp()"], ["java.lang.String", "org.mapdb.StoreTrivialTx.access$getDATA_SUFFIX$cp()", "public static final java.lang.String access$getDATA_SUFFIX$cp()"], ["void", "org.mapdb.StoreTx$DefaultImpls.checkThreadSafe(org.mapdb.StoreTx)", "public static void checkThreadSafe(org.mapdb.StoreTx)"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL$Companion.make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)", "public final org.mapdb.StoreWAL make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL$Companion.make$default(org.mapdb.StoreWAL$Companion, java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean, int, java.lang.Object)", "public static org.mapdb.StoreWAL make$default(org.mapdb.StoreWAL$Companion, java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean, int, java.lang.Object)"], ["org.mapdb.StoreWAL$Companion", "org.mapdb.StoreWAL$Companion(kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.StoreWAL$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["void", "org.mapdb.StoreWAL$commit$1.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.StoreWAL$commit$2.value(long, long)", "public final void value(long, long)"], ["void", "org.mapdb.StoreWAL$commit$3.value(long, java.lang.Object)", "public void value(long, java.lang.Object)"], ["void", "org.mapdb.StoreWAL$commit$3.value(long, byte[])", "public final void value(long, byte[])"], ["void", "org.mapdb.StoreWAL$commit$4.value(long, long)", "public final void value(long, long)"], ["java.lang.Object", "org.mapdb.StoreWAL$realVolume$1.invoke()", "public java.lang.Object invoke()"], ["org.mapdb.volume.Volume", "org.mapdb.StoreWAL$realVolume$1.invoke()", "public final org.mapdb.volume.Volume invoke()"], ["java.lang.Object", "org.mapdb.StoreWAL$updateProtected$1.invoke(java.lang.Object)", "public java.lang.Object invoke(java.lang.Object)"], ["long", "org.mapdb.StoreWAL$updateProtected$1.invoke(long)", "public final long invoke(long)"], ["org.mapdb.volume.Volume", "org.mapdb.StoreWAL.getHeadVol()", "public org.mapdb.volume.Volume getHeadVol()"], ["boolean", "org.mapdb.StoreWAL.isReadOnly()", "public boolean isReadOnly()"], ["<R> boolean", "org.mapdb.StoreWAL.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)", "public <R> boolean compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreWAL.delete(long, org.mapdb.Serializer<R>)", "public <R> void delete(long, org.mapdb.Serializer<R>)"], ["long", "org.mapdb.StoreWAL.preallocate()", "public long preallocate()"], ["<R> long", "org.mapdb.StoreWAL.put(R, org.mapdb.Serializer<R>)", "public <R> long put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreWAL.update(long, R, org.mapdb.Serializer<R>)", "public <R> void update(long, R, org.mapdb.Serializer<R>)"], ["<R> R", "org.mapdb.StoreWAL.get(long, org.mapdb.Serializer<R>)", "public <R> R get(long, org.mapdb.Serializer<R>)"], ["kotlin.collections.LongIterator", "org.mapdb.StoreWAL.getAllRecids()", "public kotlin.collections.LongIterator getAllRecids()"], ["void", "org.mapdb.StoreWAL.verify()", "public void verify()"], ["void", "org.mapdb.StoreWAL.close()", "public void close()"], ["void", "org.mapdb.StoreWAL.rollback()", "public void rollback()"], ["void", "org.mapdb.StoreWAL.commit()", "public void commit()"], ["void", "org.mapdb.StoreWAL.compact()", "public void compact()"], ["boolean", "org.mapdb.StoreWAL.fileLoad()", "public boolean fileLoad()"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.StoreWAL.getAllFiles()", "public java.lang.Iterable<java.lang.String> getAllFiles()"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)", "public org.mapdb.StoreWAL(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["long", "org.mapdb.StoreWAL.access$getTOMB1$cp()", "public static final long access$getTOMB1$cp()"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL.make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)", "public static final org.mapdb.StoreWAL make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["void", "org.mapdb.Utils$FAKE_LOCK$1.unlock()", "public void unlock()"], ["void", "org.mapdb.Utils$FAKE_LOCK$1.lockInterruptibly()", "public void lockInterruptibly()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$FAKE_LOCK$1.newCondition()", "public java.util.concurrent.locks.Condition newCondition()"], ["void", "org.mapdb.Utils$FAKE_LOCK$1.lock()", "public void lock()"], ["boolean", "org.mapdb.Utils$FAKE_LOCK$1.tryLock()", "public boolean tryLock()"], ["boolean", "org.mapdb.Utils$FAKE_LOCK$1.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$SingleEntryLock.lock()", "public void lock()"], ["void", "org.mapdb.Utils$SingleEntryLock.lockInterruptibly()", "public void lockInterruptibly()"], ["java.util.concurrent.locks.ReentrantLock", "org.mapdb.Utils$SingleEntryLock.getLock()", "public final java.util.concurrent.locks.ReentrantLock getLock()"], ["org.mapdb.Utils$SingleEntryLock", "org.mapdb.Utils$SingleEntryLock(java.util.concurrent.locks.ReentrantLock)", "public org.mapdb.Utils$SingleEntryLock(java.util.concurrent.locks.ReentrantLock)"], ["org.mapdb.Utils$SingleEntryLock", "org.mapdb.Utils$SingleEntryLock(java.util.concurrent.locks.ReentrantLock, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.Utils$SingleEntryLock(java.util.concurrent.locks.ReentrantLock, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.Utils$SingleEntryLock", "org.mapdb.Utils$SingleEntryLock()", "public org.mapdb.Utils$SingleEntryLock()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$SingleEntryLock.newCondition()", "public java.util.concurrent.locks.Condition newCondition()"], ["boolean", "org.mapdb.Utils$SingleEntryLock.tryLock()", "public boolean tryLock()"], ["boolean", "org.mapdb.Utils$SingleEntryLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$SingleEntryLock.unlock()", "public void unlock()"], ["void", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.lock()", "public void lock()"], ["void", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.lockInterruptibly()", "public void lockInterruptibly()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.newCondition()", "public java.util.concurrent.locks.Condition newCondition()"], ["boolean", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.tryLock()", "public boolean tryLock()"], ["boolean", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.unlock()", "public void unlock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock.getOrigWriteLock()", "public final java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock getOrigWriteLock()"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils$SingleEntryReadWriteLock.getNewWriteLock()", "public final java.util.concurrent.locks.Lock getNewWriteLock()"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils$SingleEntryReadWriteLock.writeLock()", "public java.util.concurrent.locks.Lock writeLock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock.getLock()", "public final java.util.concurrent.locks.ReentrantReadWriteLock getLock()"], ["org.mapdb.Utils$SingleEntryReadWriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock(java.util.concurrent.locks.ReentrantReadWriteLock)", "public org.mapdb.Utils$SingleEntryReadWriteLock(java.util.concurrent.locks.ReentrantReadWriteLock)"], ["org.mapdb.Utils$SingleEntryReadWriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock(java.util.concurrent.locks.ReentrantReadWriteLock, int, kotlin.jvm.internal.DefaultConstructorMarker)", "public org.mapdb.Utils$SingleEntryReadWriteLock(java.util.concurrent.locks.ReentrantReadWriteLock, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.Utils$SingleEntryReadWriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock()", "public org.mapdb.Utils$SingleEntryReadWriteLock()"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils$SingleEntryReadWriteLock.readLock()", "public java.util.concurrent.locks.Lock readLock()"], ["boolean", "org.mapdb.Utils$SingleProtectionLock.getLocked()", "public final boolean getLocked()"], ["void", "org.mapdb.Utils$SingleProtectionLock.setLocked(boolean)", "public final void setLocked(boolean)"], ["void", "org.mapdb.Utils$SingleProtectionLock.lockInterruptibly()", "public void lockInterruptibly()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$SingleProtectionLock.newCondition()", "public java.util.concurrent.locks.Condition newCondition()"], ["boolean", "org.mapdb.Utils$SingleProtectionLock.tryLock()", "public boolean tryLock()"], ["boolean", "org.mapdb.Utils$SingleProtectionLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$SingleProtectionLock.unlock()", "public void unlock()"], ["void", "org.mapdb.Utils$SingleProtectionLock.lock()", "public void lock()"], ["java.lang.String", "org.mapdb.Utils$SingleProtectionLock.getName()", "public final java.lang.String getName()"], ["org.mapdb.Utils$SingleProtectionLock", "org.mapdb.Utils$SingleProtectionLock(java.lang.String)", "public org.mapdb.Utils$SingleProtectionLock(java.lang.String)"], ["void", "org.mapdb.Utils$singleEntryLock$1.lock()", "public void lock()"], ["void", "org.mapdb.Utils$singleEntryLock$1.lockInterruptibly()", "public void lockInterruptibly()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$singleEntryLock$1.newCondition()", "public java.util.concurrent.locks.Condition newCondition()"], ["boolean", "org.mapdb.Utils$singleEntryLock$1.tryLock()", "public boolean tryLock()"], ["boolean", "org.mapdb.Utils$singleEntryLock$1.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$singleEntryLock$1.unlock()", "public void unlock()"], ["java.util.logging.Logger", "org.mapdb.Utils.getLOG()", "public final java.util.logging.Logger getLOG()"], ["java.nio.file.Path", "org.mapdb.Utils.pathChangeSuffix(java.nio.file.Path, java.lang.String)", "public final java.nio.file.Path pathChangeSuffix(java.nio.file.Path, java.lang.String)"], ["void", "org.mapdb.Utils.logDebug(kotlin.jvm.functions.Function0<java.lang.String>)", "public final void logDebug(kotlin.jvm.functions.Function0<java.lang.String>)"], ["void", "org.mapdb.Utils.logInfo(kotlin.jvm.functions.Function0<java.lang.String>)", "public final void logInfo(kotlin.jvm.functions.Function0<java.lang.String>)"], ["<E> E", "org.mapdb.Utils.lockWrite(java.util.concurrent.locks.ReadWriteLock, kotlin.jvm.functions.Function0<? extends E>)", "public final <E> E lockWrite(java.util.concurrent.locks.ReadWriteLock, kotlin.jvm.functions.Function0<? extends E>)"], ["<E> E", "org.mapdb.Utils.lockRead(java.util.concurrent.locks.ReadWriteLock, kotlin.jvm.functions.Function0<? extends E>)", "public final <E> E lockRead(java.util.concurrent.locks.ReadWriteLock, kotlin.jvm.functions.Function0<? extends E>)"], ["void", "org.mapdb.Utils.assertReadLock(java.util.concurrent.locks.ReadWriteLock)", "public final void assertReadLock(java.util.concurrent.locks.ReadWriteLock)"], ["void", "org.mapdb.Utils.assertWriteLock(java.util.concurrent.locks.ReadWriteLock)", "public final void assertWriteLock(java.util.concurrent.locks.ReadWriteLock)"], ["<E> E", "org.mapdb.Utils.lock(java.util.concurrent.locks.Lock, kotlin.jvm.functions.Function0<? extends E>)", "public final <E> E lock(java.util.concurrent.locks.Lock, kotlin.jvm.functions.Function0<? extends E>)"], ["int", "org.mapdb.Utils.roundDownToIntMAXVAL(java.lang.Long)", "public final int roundDownToIntMAXVAL(java.lang.Long)"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils.singleEntryLock()", "public final java.util.concurrent.locks.Lock singleEntryLock()"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils.newLock(boolean)", "public final java.util.concurrent.locks.Lock newLock(boolean)"], ["java.util.concurrent.locks.ReadWriteLock", "org.mapdb.Utils.newReadWriteLock(boolean)", "public final java.util.concurrent.locks.ReadWriteLock newReadWriteLock(boolean)"], ["void", "org.mapdb.Utils.assertLocked(java.util.concurrent.locks.Lock)", "public final void assertLocked(java.util.concurrent.locks.Lock)"], ["<E> E", "org.mapdb.Utils.clone(E, org.mapdb.Serializer<E>, org.mapdb.DataOutput2)", "public static final <E> E clone(E, org.mapdb.Serializer<E>, org.mapdb.DataOutput2)"], ["java.lang.Object", "org.mapdb.Utils.clone$default(java.lang.Object, org.mapdb.Serializer, org.mapdb.DataOutput2, int, java.lang.Object)", "public static java.lang.Object clone$default(java.lang.Object, org.mapdb.Serializer, org.mapdb.DataOutput2, int, java.lang.Object)"], ["void", "org.mapdb.Utils.lockReadAll(java.util.concurrent.locks.ReadWriteLock[])", "public final void lockReadAll(java.util.concurrent.locks.ReadWriteLock[])"], ["void", "org.mapdb.Utils.unlockReadAll(java.util.concurrent.locks.ReadWriteLock[])", "public final void unlockReadAll(java.util.concurrent.locks.ReadWriteLock[])"], ["void", "org.mapdb.Utils.lockWriteAll(java.util.concurrent.locks.ReadWriteLock[])", "public final void lockWriteAll(java.util.concurrent.locks.ReadWriteLock[])"], ["void", "org.mapdb.Utils.unlockWriteAll(java.util.concurrent.locks.ReadWriteLock[])", "public final void unlockWriteAll(java.util.concurrent.locks.ReadWriteLock[])"], ["int", "org.mapdb.Utils.identityCount(java.lang.Object[])", "public final int identityCount(java.lang.Object[])"], ["void", "org.mapdb.WriteAheadLog$1.beforeReplayStart()", "public void beforeReplayStart()"], ["void", "org.mapdb.WriteAheadLog$1.afterReplayFinished()", "public void afterReplayFinished()"], ["void", "org.mapdb.WriteAheadLog$1.writeLong(long, long)", "public void writeLong(long, long)"], ["void", "org.mapdb.WriteAheadLog$1.writeRecord(long, long, org.mapdb.volume.Volume, long, int)", "public void writeRecord(long, long, org.mapdb.volume.Volume, long, int)"], ["void", "org.mapdb.WriteAheadLog$1.writeByteArray(long, long, org.mapdb.volume.Volume, long, int)", "public void writeByteArray(long, long, org.mapdb.volume.Volume, long, int)"], ["void", "org.mapdb.WriteAheadLog$1.commit()", "public void commit()"], ["void", "org.mapdb.WriteAheadLog$1.rollback()", "public void rollback()"], ["void", "org.mapdb.WriteAheadLog$1.writeTombstone(long)", "public void writeTombstone(long)"], ["void", "org.mapdb.WriteAheadLog$1.writePreallocate(long)", "public void writePreallocate(long)"], ["org.mapdb.WriteAheadLog", "org.mapdb.WriteAheadLog(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean)", "public org.mapdb.WriteAheadLog(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean)"], ["org.mapdb.WriteAheadLog", "org.mapdb.WriteAheadLog(java.lang.String)", "public org.mapdb.WriteAheadLog(java.lang.String)"], ["void", "org.mapdb.WriteAheadLog.initFailedCloseFiles()", "public void initFailedCloseFiles()"], ["void", "org.mapdb.WriteAheadLog.close()", "public void close()"], ["void", "org.mapdb.WriteAheadLog.seal()", "public void seal()"], ["void", "org.mapdb.WriteAheadLog.startNextFile()", "public void startNextFile()"], ["void", "org.mapdb.WriteAheadLog.rollback()", "public void rollback()"], ["void", "org.mapdb.WriteAheadLog.commit()", "public void commit()"], ["boolean", "org.mapdb.WriteAheadLog.fileLoad()", "public boolean fileLoad()"], ["void", "org.mapdb.WriteAheadLog.sync()", "public void sync()"], ["java.lang.Iterable<java.lang.String>", "org.mapdb.WriteAheadLog.getAllFiles()", "public java.lang.Iterable<java.lang.String> getAllFiles()"], ["void", "org.mapdb.WriteAheadLog.replayWAL(org.mapdb.WriteAheadLog$WALReplay)", "public void replayWAL(org.mapdb.WriteAheadLog$WALReplay)"], ["void", "org.mapdb.WriteAheadLog.destroyWalFiles()", "public void destroyWalFiles()"], ["long", "org.mapdb.WriteAheadLog.getNumberOfFiles()", "public long getNumberOfFiles()"], ["org.mapdb.DataInput2", "org.mapdb.WriteAheadLog.walGetByteArray(long)", "public org.mapdb.DataInput2 walGetByteArray(long)"], ["byte[]", "org.mapdb.WriteAheadLog.walGetByteArray2(long)", "public byte[] walGetByteArray2(long)"], ["synchronized", "org.mapdb.WriteAheadLog.byte[] walGetRecord(long, long)", "public synchronized byte[] walGetRecord(long, long)"], ["long", "org.mapdb.WriteAheadLog.walPutByteArray(long, byte[], int, int)", "public long walPutByteArray(long, byte[], int, int)"], ["synchronized", "org.mapdb.WriteAheadLog.long walPutRecord(long, byte[], int, int)", "public synchronized long walPutRecord(long, byte[], int, int)"], ["void", "org.mapdb.WriteAheadLog.walPutLong(long, long)", "public void walPutLong(long, long)"], ["void", "org.mapdb.WriteAheadLog.walPutTombstone(long)", "public void walPutTombstone(long)"], ["void", "org.mapdb.WriteAheadLog.walPutPreallocate(long)", "public void walPutPreallocate(long)"], ["int", "org.mapdb.serializer.CompressLZF.compress(byte[], int, byte[], int)", "public int compress(byte[], int, byte[], int)"], ["void", "org.mapdb.serializer.CompressLZF.expand(java.io.DataInput, byte[], int, int)", "public void expand(java.io.DataInput, byte[], int, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.CompressLZF.expand(java.nio.ByteBuffer, int, byte[], int, int)", "public void expand(java.nio.ByteBuffer, int, byte[], int, int)"], ["void", "org.mapdb.serializer.CompressLZF.expand(byte[], int, byte[], int, int)", "public void expand(byte[], int, byte[], int, int)"], ["default", "org.mapdb.serializer.GroupSerializer.A valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public default A valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["default", "org.mapdb.serializer.GroupSerializer.int valueArrayBinarySearch(A, org.mapdb.DataInput2, int, java.util.Comparator)", "public default int valueArrayBinarySearch(A, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["default", "org.mapdb.serializer.GroupSerializer.java.lang.Object[] valueArrayToArray(java.lang.Object)", "public default java.lang.Object[] valueArrayToArray(java.lang.Object)"], ["default", "org.mapdb.serializer.GroupSerializer.A nextValue(A)", "public default A nextValue(A)"], ["org.mapdb.serializer.GroupSerializerObjectArray", "org.mapdb.serializer.GroupSerializerObjectArray()", "public org.mapdb.serializer.GroupSerializerObjectArray()"], ["void", "org.mapdb.serializer.GroupSerializerObjectArray.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object[] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["A", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayGet(java.lang.Object, int)", "public A valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.GroupSerializerObjectArray.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayEmpty()", "public java.lang.Object[] valueArrayEmpty()"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayPut(java.lang.Object, int, A)", "public java.lang.Object[] valueArrayPut(java.lang.Object, int, A)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayUpdateVal(java.lang.Object, int, A)", "public java.lang.Object[] valueArrayUpdateVal(java.lang.Object, int, A)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object[] valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object[] valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object[] valueArrayDeleteValue(java.lang.Object, int)"], ["int", "org.mapdb.serializer.GroupSerializerObjectArray.valueArraySearch(java.lang.Object, A)", "public int valueArraySearch(java.lang.Object, A)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayToArray(java.lang.Object)", "public java.lang.Object[] valueArrayToArray(java.lang.Object)"], ["int", "org.mapdb.serializer.GroupSerializerObjectArray.valueArraySearch(java.lang.Object, A, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, A, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["org.mapdb.serializer.SerializerArray", "org.mapdb.serializer.SerializerArray(org.mapdb.Serializer<T>)", "public org.mapdb.serializer.SerializerArray(org.mapdb.Serializer<T>)"], ["org.mapdb.serializer.SerializerArray", "org.mapdb.serializer.SerializerArray(org.mapdb.Serializer<T>, java.lang.Class<T>)", "public org.mapdb.serializer.SerializerArray(org.mapdb.Serializer<T>, java.lang.Class<T>)"], ["void", "org.mapdb.serializer.SerializerArray.serialize(org.mapdb.DataOutput2, T[])", "public void serialize(org.mapdb.DataOutput2, T[]) throws java.io.IOException"], ["T[]", "org.mapdb.serializer.SerializerArray.deserialize(org.mapdb.DataInput2, int)", "public T[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerArray.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerArray.equals(T[], T[])", "public boolean equals(T[], T[])"], ["int", "org.mapdb.serializer.SerializerArray.hashCode(T[], int)", "public int hashCode(T[], int)"], ["boolean", "org.mapdb.serializer.SerializerArray.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerArray.hashCode()", "public int hashCode()"], ["int", "org.mapdb.serializer.SerializerArray.compare(java.lang.Object[], java.lang.Object[])", "public int compare(java.lang.Object[], java.lang.Object[])"], ["int", "org.mapdb.serializer.SerializerArray.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerArray.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerArray.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerArrayDelta", "org.mapdb.serializer.SerializerArrayDelta(org.mapdb.Serializer<T>)", "public org.mapdb.serializer.SerializerArrayDelta(org.mapdb.Serializer<T>)"], ["void", "org.mapdb.serializer.SerializerArrayDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerArrayDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object[] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["org.mapdb.serializer.SerializerArrayTuple", "org.mapdb.serializer.SerializerArrayTuple(org.mapdb.Serializer[], java.util.Comparator[])", "public org.mapdb.serializer.SerializerArrayTuple(org.mapdb.Serializer[], java.util.Comparator[])"], ["org.mapdb.serializer.SerializerArrayTuple", "org.mapdb.serializer.SerializerArrayTuple(org.mapdb.Serializer...)", "public org.mapdb.serializer.SerializerArrayTuple(org.mapdb.Serializer...)"], ["void", "org.mapdb.serializer.SerializerArrayTuple.serialize(org.mapdb.DataOutput2, java.lang.Object[])", "public void serialize(org.mapdb.DataOutput2, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerArrayTuple.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerArrayTuple.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySearch(java.lang.Object, java.lang.Object[])", "public int valueArraySearch(java.lang.Object, java.lang.Object[])"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySearch(java.lang.Object, java.lang.Object[], java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object[], java.util.Comparator)"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerArrayTuple.valueArrayGet(java.lang.Object, int)", "public java.lang.Object[] valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayPut(java.lang.Object, int, java.lang.Object[])", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object[])", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerArrayTuple.nextValue(java.lang.Object[])", "public java.lang.Object[] nextValue(java.lang.Object[])"], ["boolean", "org.mapdb.serializer.SerializerArrayTuple.equals(java.lang.Object[], java.lang.Object[])", "public boolean equals(java.lang.Object[], java.lang.Object[])"], ["int", "org.mapdb.serializer.SerializerArrayTuple.compare(java.lang.Object[], java.lang.Object[])", "public int compare(java.lang.Object[], java.lang.Object[])"], ["int", "org.mapdb.serializer.SerializerArrayTuple.hashCode(java.lang.Object[], int)", "public int hashCode(java.lang.Object[], int)"], ["boolean", "org.mapdb.serializer.SerializerArrayTuple.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.nextValue(java.lang.Object)", "public java.lang.Object nextValue(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayGet(java.lang.Object, int)", "public java.lang.Object valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerArrayTuple.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerArrayTuple.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerBigDecimal", "org.mapdb.serializer.SerializerBigDecimal()", "public org.mapdb.serializer.SerializerBigDecimal()"], ["void", "org.mapdb.serializer.SerializerBigDecimal.serialize(org.mapdb.DataOutput2, java.math.BigDecimal)", "public void serialize(org.mapdb.DataOutput2, java.math.BigDecimal) throws java.io.IOException"], ["java.math.BigDecimal", "org.mapdb.serializer.SerializerBigDecimal.deserialize(org.mapdb.DataInput2, int)", "public java.math.BigDecimal deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerBigDecimal.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerBigDecimal.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerBigDecimal.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerBigInteger", "org.mapdb.serializer.SerializerBigInteger()", "public org.mapdb.serializer.SerializerBigInteger()"], ["void", "org.mapdb.serializer.SerializerBigInteger.serialize(org.mapdb.DataOutput2, java.math.BigInteger)", "public void serialize(org.mapdb.DataOutput2, java.math.BigInteger) throws java.io.IOException"], ["java.math.BigInteger", "org.mapdb.serializer.SerializerBigInteger.deserialize(org.mapdb.DataInput2, int)", "public java.math.BigInteger deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerBigInteger.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerBigInteger.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerBigInteger.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerBoolean", "org.mapdb.serializer.SerializerBoolean()", "public org.mapdb.serializer.SerializerBoolean()"], ["void", "org.mapdb.serializer.SerializerBoolean.serialize(org.mapdb.DataOutput2, java.lang.Boolean)", "public void serialize(org.mapdb.DataOutput2, java.lang.Boolean) throws java.io.IOException"], ["java.lang.Boolean", "org.mapdb.serializer.SerializerBoolean.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Boolean deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerBoolean.fixedSize()", "public int fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerBoolean.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySearch(java.lang.Object, java.lang.Boolean)", "public int valueArraySearch(java.lang.Object, java.lang.Boolean)"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySearch(java.lang.Object, java.lang.Boolean, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Boolean, java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerBoolean.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.lang.Boolean", "org.mapdb.serializer.SerializerBoolean.valueArrayGet(java.lang.Object, int)", "public java.lang.Boolean valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayPut(java.lang.Object, int, java.lang.Boolean)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Boolean)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayUpdateVal(java.lang.Object, int, java.lang.Boolean)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Boolean)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayGet(java.lang.Object, int)", "public java.lang.Object valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerBoolean.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerByte", "org.mapdb.serializer.SerializerByte()", "public org.mapdb.serializer.SerializerByte()"], ["void", "org.mapdb.serializer.SerializerByte.serialize(org.mapdb.DataOutput2, java.lang.Byte)", "public void serialize(org.mapdb.DataOutput2, java.lang.Byte) throws java.io.IOException"], ["java.lang.Byte", "org.mapdb.serializer.SerializerByte.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Byte deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerByte.fixedSize()", "public int fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerByte.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerByte.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerByte.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerByteArray", "org.mapdb.serializer.SerializerByteArray()", "public org.mapdb.serializer.SerializerByteArray()"], ["void", "org.mapdb.serializer.SerializerByteArray.serialize(org.mapdb.DataOutput2, byte[])", "public void serialize(org.mapdb.DataOutput2, byte[]) throws java.io.IOException"], ["byte[]", "org.mapdb.serializer.SerializerByteArray.deserialize(org.mapdb.DataInput2, int)", "public byte[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerByteArray.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerByteArray.equals(byte[], byte[])", "public boolean equals(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArray.hashCode(byte[], int)", "public int hashCode(byte[], int)"], ["int", "org.mapdb.serializer.SerializerByteArray.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySearch(java.lang.Object, byte[])", "public int valueArraySearch(java.lang.Object, byte[])"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySearch(java.lang.Object, byte[], java.util.Comparator)", "public int valueArraySearch(java.lang.Object, byte[], java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerByteArray.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public byte[][] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["byte[]", "org.mapdb.serializer.SerializerByteArray.valueArrayGet(java.lang.Object, int)", "public byte[] valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayEmpty()", "public byte[][] valueArrayEmpty()"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayPut(java.lang.Object, int, byte[])", "public byte[][] valueArrayPut(java.lang.Object, int, byte[])"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayUpdateVal(java.lang.Object, int, byte[])", "public byte[][] valueArrayUpdateVal(java.lang.Object, int, byte[])"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayFromArray(java.lang.Object[])", "public byte[][] valueArrayFromArray(java.lang.Object[])"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayCopyOfRange(java.lang.Object, int, int)", "public byte[][] valueArrayCopyOfRange(java.lang.Object, int, int)"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayDeleteValue(java.lang.Object, int)", "public byte[][] valueArrayDeleteValue(java.lang.Object, int)"], ["byte[]", "org.mapdb.serializer.SerializerByteArray.nextValue(byte[])", "public byte[] nextValue(byte[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.nextValue(java.lang.Object)", "public java.lang.Object nextValue(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayGet(java.lang.Object, int)", "public java.lang.Object valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArray.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerByteArray.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArray.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerByteArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerByteArrayDelta", "org.mapdb.serializer.SerializerByteArrayDelta()", "public org.mapdb.serializer.SerializerByteArrayDelta()"], ["void", "org.mapdb.serializer.SerializerByteArrayDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["byte[][]", "org.mapdb.serializer.SerializerByteArrayDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public byte[][] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["org.mapdb.serializer.SerializerByteArrayDelta2", "org.mapdb.serializer.SerializerByteArrayDelta2()", "public org.mapdb.serializer.SerializerByteArrayDelta2()"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySearch(java.lang.Object, byte[])", "public int valueArraySearch(java.lang.Object, byte[])"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySearch(java.lang.Object, byte[], java.util.Comparator)", "public int valueArraySearch(java.lang.Object, byte[], java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["byte[]", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayGet(java.lang.Object, int)", "public byte[] valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayEmpty()", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys valueArrayEmpty()"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayPut(java.lang.Object, int, byte[])", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys valueArrayPut(java.lang.Object, int, byte[])"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayUpdateVal(java.lang.Object, int, byte[])", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys valueArrayUpdateVal(java.lang.Object, int, byte[])"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayFromArray(java.lang.Object[])", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys valueArrayFromArray(java.lang.Object[])"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayCopyOfRange(java.lang.Object, int, int)", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys valueArrayCopyOfRange(java.lang.Object, int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayDeleteValue(java.lang.Object, int)", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys valueArrayDeleteValue(java.lang.Object, int)"], ["void", "org.mapdb.serializer.SerializerByteArrayDelta2.serialize(org.mapdb.DataOutput2, byte[])", "public void serialize(org.mapdb.DataOutput2, byte[]) throws java.io.IOException"], ["byte[]", "org.mapdb.serializer.SerializerByteArrayDelta2.deserialize(org.mapdb.DataInput2, int)", "public byte[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["boolean", "org.mapdb.serializer.SerializerByteArrayDelta2.equals(byte[], byte[])", "public boolean equals(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.hashCode(byte[], int)", "public int hashCode(byte[], int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayDelta2.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayGet(java.lang.Object, int)", "public java.lang.Object valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayDelta2.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerByteArrayDelta2.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerByteArrayNoSize", "org.mapdb.serializer.SerializerByteArrayNoSize()", "public org.mapdb.serializer.SerializerByteArrayNoSize()"], ["void", "org.mapdb.serializer.SerializerByteArrayNoSize.serialize(org.mapdb.DataOutput2, byte[])", "public void serialize(org.mapdb.DataOutput2, byte[]) throws java.io.IOException"], ["byte[]", "org.mapdb.serializer.SerializerByteArrayNoSize.deserialize(org.mapdb.DataInput2, int)", "public byte[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerByteArrayNoSize.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerByteArrayNoSize.equals(byte[], byte[])", "public boolean equals(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArrayNoSize.hashCode(byte[], int)", "public int hashCode(byte[], int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayNoSize.needsAvailableSizeHint()", "public boolean needsAvailableSizeHint()"], ["int", "org.mapdb.serializer.SerializerByteArrayNoSize.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArrayNoSize.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayNoSize.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArrayNoSize.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayNoSize.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerByteArrayNoSize.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerChar", "org.mapdb.serializer.SerializerChar()", "public org.mapdb.serializer.SerializerChar()"], ["void", "org.mapdb.serializer.SerializerChar.serialize(org.mapdb.DataOutput2, java.lang.Character)", "public void serialize(org.mapdb.DataOutput2, java.lang.Character) throws java.io.IOException"], ["java.lang.Character", "org.mapdb.serializer.SerializerChar.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Character deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerChar.fixedSize()", "public int fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerChar.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerChar.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerChar.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerCharArray", "org.mapdb.serializer.SerializerCharArray()", "public org.mapdb.serializer.SerializerCharArray()"], ["void", "org.mapdb.serializer.SerializerCharArray.serialize(org.mapdb.DataOutput2, char[])", "public void serialize(org.mapdb.DataOutput2, char[]) throws java.io.IOException"], ["char[]", "org.mapdb.serializer.SerializerCharArray.deserialize(org.mapdb.DataInput2, int)", "public char[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerCharArray.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerCharArray.equals(char[], char[])", "public boolean equals(char[], char[])"], ["int", "org.mapdb.serializer.SerializerCharArray.hashCode(char[], int)", "public int hashCode(char[], int)"], ["int", "org.mapdb.serializer.SerializerCharArray.compare(char[], char[])", "public int compare(char[], char[])"], ["char[]", "org.mapdb.serializer.SerializerCharArray.nextValue(char[])", "public char[] nextValue(char[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerCharArray.nextValue(java.lang.Object)", "public java.lang.Object nextValue(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerCharArray.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerCharArray.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerCharArray.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCharArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerCharArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerClass", "org.mapdb.serializer.SerializerClass(java.lang.ClassLoader)", "public org.mapdb.serializer.SerializerClass(java.lang.ClassLoader)"], ["org.mapdb.serializer.SerializerClass", "org.mapdb.serializer.SerializerClass()", "public org.mapdb.serializer.SerializerClass()"], ["void", "org.mapdb.serializer.SerializerClass.serialize(org.mapdb.DataOutput2, java.lang.Class<?>)", "public void serialize(org.mapdb.DataOutput2, java.lang.Class<?>) throws java.io.IOException"], ["java.lang.Class<?>", "org.mapdb.serializer.SerializerClass.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Class<?> deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerClass.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerClass.equals(java.lang.Class<?>, java.lang.Class<?>)", "public boolean equals(java.lang.Class<?>, java.lang.Class<?>)"], ["int", "org.mapdb.serializer.SerializerClass.hashCode(java.lang.Class<?>, int)", "public int hashCode(java.lang.Class<?>, int)"], ["int", "org.mapdb.serializer.SerializerClass.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerClass.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerClass.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerClass.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerCompressionDeflateWrapper", "org.mapdb.serializer.SerializerCompressionDeflateWrapper(org.mapdb.serializer.GroupSerializer<E>)", "public org.mapdb.serializer.SerializerCompressionDeflateWrapper(org.mapdb.serializer.GroupSerializer<E>)"], ["org.mapdb.serializer.SerializerCompressionDeflateWrapper", "org.mapdb.serializer.SerializerCompressionDeflateWrapper(org.mapdb.serializer.GroupSerializer<E>, int, byte[])", "public org.mapdb.serializer.SerializerCompressionDeflateWrapper(org.mapdb.serializer.GroupSerializer<E>, int, byte[])"], ["void", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.serialize(org.mapdb.DataOutput2, E)", "public void serialize(org.mapdb.DataOutput2, E) throws java.io.IOException"], ["E", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.deserialize(org.mapdb.DataInput2, int)", "public E deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.hashCode()", "public int hashCode()"], ["boolean", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArraySearch(java.lang.Object, E)", "public int valueArraySearch(java.lang.Object, E)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArraySearch(java.lang.Object, E, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, E, java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["E", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayGet(java.lang.Object, int)", "public E valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayPut(java.lang.Object, int, E)", "public java.lang.Object valueArrayPut(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayUpdateVal(java.lang.Object, int, E)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.equals(E, E)", "public boolean equals(E, E)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.hashCode(E, int)", "public int hashCode(E, int)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.compare(E, E)", "public int compare(E, E)"], ["org.mapdb.serializer.SerializerCompressionWrapper", "org.mapdb.serializer.SerializerCompressionWrapper(org.mapdb.serializer.GroupSerializer<E>)", "public org.mapdb.serializer.SerializerCompressionWrapper(org.mapdb.serializer.GroupSerializer<E>)"], ["void", "org.mapdb.serializer.SerializerCompressionWrapper.serialize(org.mapdb.DataOutput2, E)", "public void serialize(org.mapdb.DataOutput2, E) throws java.io.IOException"], ["E", "org.mapdb.serializer.SerializerCompressionWrapper.deserialize(org.mapdb.DataInput2, int)", "public E deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerCompressionWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.hashCode()", "public int hashCode()"], ["boolean", "org.mapdb.serializer.SerializerCompressionWrapper.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.valueArraySearch(java.lang.Object, E)", "public int valueArraySearch(java.lang.Object, E)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.valueArraySearch(java.lang.Object, E, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, E, java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerCompressionWrapper.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["E", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayGet(java.lang.Object, int)", "public E valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayPut(java.lang.Object, int, E)", "public java.lang.Object valueArrayPut(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayUpdateVal(java.lang.Object, int, E)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerCompressionWrapper.equals(E, E)", "public boolean equals(E, E)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.hashCode(E, int)", "public int hashCode(E, int)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.compare(E, E)", "public int compare(E, E)"], ["org.mapdb.serializer.SerializerDate", "org.mapdb.serializer.SerializerDate()", "public org.mapdb.serializer.SerializerDate()"], ["void", "org.mapdb.serializer.SerializerDate.serialize(org.mapdb.DataOutput2, java.util.Date)", "public void serialize(org.mapdb.DataOutput2, java.util.Date) throws java.io.IOException"], ["java.util.Date", "org.mapdb.serializer.SerializerDate.deserialize(org.mapdb.DataInput2, int)", "public java.util.Date deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerDate.valueArraySearch(java.lang.Object, java.util.Date)", "public final int valueArraySearch(java.lang.Object, java.util.Date)"], ["int", "org.mapdb.serializer.SerializerDate.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerDate.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerDate.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerDouble", "org.mapdb.serializer.SerializerDouble()", "public org.mapdb.serializer.SerializerDouble()"], ["int", "org.mapdb.serializer.SerializerDouble.valueArraySearch(java.lang.Object, java.lang.Double)", "public int valueArraySearch(java.lang.Object, java.lang.Double)"], ["void", "org.mapdb.serializer.SerializerDouble.serialize(org.mapdb.DataOutput2, java.lang.Double)", "public void serialize(org.mapdb.DataOutput2, java.lang.Double) throws java.io.IOException"], ["java.lang.Double", "org.mapdb.serializer.SerializerDouble.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Double deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerDouble.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerDouble.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerDouble.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerDoubleArray", "org.mapdb.serializer.SerializerDoubleArray()", "public org.mapdb.serializer.SerializerDoubleArray()"], ["void", "org.mapdb.serializer.SerializerDoubleArray.serialize(org.mapdb.DataOutput2, double[])", "public void serialize(org.mapdb.DataOutput2, double[]) throws java.io.IOException"], ["double[]", "org.mapdb.serializer.SerializerDoubleArray.deserialize(org.mapdb.DataInput2, int)", "public double[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerDoubleArray.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerDoubleArray.equals(double[], double[])", "public boolean equals(double[], double[])"], ["int", "org.mapdb.serializer.SerializerDoubleArray.hashCode(double[], int)", "public int hashCode(double[], int)"], ["int", "org.mapdb.serializer.SerializerDoubleArray.compare(double[], double[])", "public int compare(double[], double[])"], ["int", "org.mapdb.serializer.SerializerDoubleArray.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerDoubleArray.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerDoubleArray.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerDoubleArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerDoubleArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerEightByte", "org.mapdb.serializer.SerializerEightByte()", "public org.mapdb.serializer.SerializerEightByte()"], ["E", "org.mapdb.serializer.SerializerEightByte.valueArrayGet(java.lang.Object, int)", "public E valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerEightByte.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayPut(java.lang.Object, int, E)", "public java.lang.Object valueArrayPut(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayUpdateVal(java.lang.Object, int, E)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["void", "org.mapdb.serializer.SerializerEightByte.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["E", "org.mapdb.serializer.SerializerEightByte.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public E valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerEightByte.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerEightByte.fixedSize()", "public int fixedSize()"], ["int", "org.mapdb.serializer.SerializerEightByte.valueArraySearch(java.lang.Object, E, java.util.Comparator)", "public final int valueArraySearch(java.lang.Object, E, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.SerializerElsa.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerElsa.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerElsa", "org.mapdb.serializer.SerializerElsa()", "public org.mapdb.serializer.SerializerElsa()"], ["org.mapdb.serializer.SerializerFloat", "org.mapdb.serializer.SerializerFloat()", "public org.mapdb.serializer.SerializerFloat()"], ["void", "org.mapdb.serializer.SerializerFloat.serialize(org.mapdb.DataOutput2, java.lang.Float)", "public void serialize(org.mapdb.DataOutput2, java.lang.Float) throws java.io.IOException"], ["java.lang.Float", "org.mapdb.serializer.SerializerFloat.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Float deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerFloat.valueArraySearch(java.lang.Object, java.lang.Float)", "public int valueArraySearch(java.lang.Object, java.lang.Float)"], ["int", "org.mapdb.serializer.SerializerFloat.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFloat.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerFloat.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerFloatArray", "org.mapdb.serializer.SerializerFloatArray()", "public org.mapdb.serializer.SerializerFloatArray()"], ["void", "org.mapdb.serializer.SerializerFloatArray.serialize(org.mapdb.DataOutput2, float[])", "public void serialize(org.mapdb.DataOutput2, float[]) throws java.io.IOException"], ["float[]", "org.mapdb.serializer.SerializerFloatArray.deserialize(org.mapdb.DataInput2, int)", "public float[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerFloatArray.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerFloatArray.equals(float[], float[])", "public boolean equals(float[], float[])"], ["int", "org.mapdb.serializer.SerializerFloatArray.hashCode(float[], int)", "public int hashCode(float[], int)"], ["int", "org.mapdb.serializer.SerializerFloatArray.compare(float[], float[])", "public int compare(float[], float[])"], ["int", "org.mapdb.serializer.SerializerFloatArray.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerFloatArray.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerFloatArray.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFloatArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerFloatArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerFourByte", "org.mapdb.serializer.SerializerFourByte()", "public org.mapdb.serializer.SerializerFourByte()"], ["boolean", "org.mapdb.serializer.SerializerFourByte.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerFourByte.fixedSize()", "public int fixedSize()"], ["E", "org.mapdb.serializer.SerializerFourByte.valueArrayGet(java.lang.Object, int)", "public E valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerFourByte.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayPut(java.lang.Object, int, E)", "public java.lang.Object valueArrayPut(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayUpdateVal(java.lang.Object, int, E)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["void", "org.mapdb.serializer.SerializerFourByte.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerFourByte.valueArraySearch(java.lang.Object, E, java.util.Comparator)", "public final int valueArraySearch(java.lang.Object, E, java.util.Comparator)"], ["E", "org.mapdb.serializer.SerializerFourByte.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public E valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["org.mapdb.serializer.SerializerIllegalAccess", "org.mapdb.serializer.SerializerIllegalAccess()", "public org.mapdb.serializer.SerializerIllegalAccess()"], ["void", "org.mapdb.serializer.SerializerIllegalAccess.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerIllegalAccess.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerIllegalAccess.isTrusted()", "public boolean isTrusted()"], ["org.mapdb.serializer.SerializerIntArray", "org.mapdb.serializer.SerializerIntArray()", "public org.mapdb.serializer.SerializerIntArray()"], ["void", "org.mapdb.serializer.SerializerIntArray.serialize(org.mapdb.DataOutput2, int[])", "public void serialize(org.mapdb.DataOutput2, int[]) throws java.io.IOException"], ["int[]", "org.mapdb.serializer.SerializerIntArray.deserialize(org.mapdb.DataInput2, int)", "public int[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerIntArray.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerIntArray.equals(int[], int[])", "public boolean equals(int[], int[])"], ["int", "org.mapdb.serializer.SerializerIntArray.hashCode(int[], int)", "public int hashCode(int[], int)"], ["int", "org.mapdb.serializer.SerializerIntArray.compare(int[], int[])", "public int compare(int[], int[])"], ["int[]", "org.mapdb.serializer.SerializerIntArray.nextValue(int[])", "public int[] nextValue(int[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntArray.nextValue(java.lang.Object)", "public java.lang.Object nextValue(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerIntArray.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerIntArray.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerIntArray.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerIntArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerInteger", "org.mapdb.serializer.SerializerInteger()", "public org.mapdb.serializer.SerializerInteger()"], ["void", "org.mapdb.serializer.SerializerInteger.serialize(org.mapdb.DataOutput2, java.lang.Integer)", "public void serialize(org.mapdb.DataOutput2, java.lang.Integer) throws java.io.IOException"], ["java.lang.Integer", "org.mapdb.serializer.SerializerInteger.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Integer deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerInteger.valueArraySearch(java.lang.Object, java.lang.Integer)", "public int valueArraySearch(java.lang.Object, java.lang.Integer)"], ["int", "org.mapdb.serializer.SerializerInteger.valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerInteger.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerInteger.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerInteger.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerInteger.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerIntegerDelta", "org.mapdb.serializer.SerializerIntegerDelta()", "public org.mapdb.serializer.SerializerIntegerDelta()"], ["void", "org.mapdb.serializer.SerializerIntegerDelta.serialize(org.mapdb.DataOutput2, java.lang.Integer)", "public void serialize(org.mapdb.DataOutput2, java.lang.Integer) throws java.io.IOException"], ["java.lang.Integer", "org.mapdb.serializer.SerializerIntegerDelta.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Integer deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerIntegerDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["int[]", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public int[] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.lang.Integer", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Integer valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerIntegerDelta.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Object valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerDelta.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerIntegerDelta.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerIntegerPacked", "org.mapdb.serializer.SerializerIntegerPacked()", "public org.mapdb.serializer.SerializerIntegerPacked()"], ["void", "org.mapdb.serializer.SerializerIntegerPacked.serialize(org.mapdb.DataOutput2, java.lang.Integer)", "public void serialize(org.mapdb.DataOutput2, java.lang.Integer) throws java.io.IOException"], ["java.lang.Integer", "org.mapdb.serializer.SerializerIntegerPacked.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Integer deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerIntegerPacked.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["int[]", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public int[] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerIntegerPacked.fixedSize()", "public int fixedSize()"], ["int", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["java.lang.Integer", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Integer valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Object valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerPacked.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerIntegerPacked.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerJava", "org.mapdb.serializer.SerializerJava()", "public org.mapdb.serializer.SerializerJava()"], ["void", "org.mapdb.serializer.SerializerJava.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerJava.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerJava.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object[] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerJava.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerJava.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["org.mapdb.serializer.SerializerLong", "org.mapdb.serializer.SerializerLong()", "public org.mapdb.serializer.SerializerLong()"], ["void", "org.mapdb.serializer.SerializerLong.serialize(org.mapdb.DataOutput2, java.lang.Long)", "public void serialize(org.mapdb.DataOutput2, java.lang.Long) throws java.io.IOException"], ["java.lang.Long", "org.mapdb.serializer.SerializerLong.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Long deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerLong.valueArraySearch(java.lang.Object, java.lang.Long)", "public int valueArraySearch(java.lang.Object, java.lang.Long)"], ["int", "org.mapdb.serializer.SerializerLong.valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerLong.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerLong.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerLong.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerLong.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerLongArray", "org.mapdb.serializer.SerializerLongArray()", "public org.mapdb.serializer.SerializerLongArray()"], ["void", "org.mapdb.serializer.SerializerLongArray.serialize(org.mapdb.DataOutput2, long[])", "public void serialize(org.mapdb.DataOutput2, long[]) throws java.io.IOException"], ["long[]", "org.mapdb.serializer.SerializerLongArray.deserialize(org.mapdb.DataInput2, int)", "public long[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerLongArray.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerLongArray.equals(long[], long[])", "public boolean equals(long[], long[])"], ["int", "org.mapdb.serializer.SerializerLongArray.hashCode(long[], int)", "public int hashCode(long[], int)"], ["int", "org.mapdb.serializer.SerializerLongArray.compare(long[], long[])", "public int compare(long[], long[])"], ["long[]", "org.mapdb.serializer.SerializerLongArray.nextValue(long[])", "public long[] nextValue(long[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongArray.nextValue(java.lang.Object)", "public java.lang.Object nextValue(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerLongArray.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerLongArray.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerLongArray.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerLongArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerLongDelta", "org.mapdb.serializer.SerializerLongDelta()", "public org.mapdb.serializer.SerializerLongDelta()"], ["void", "org.mapdb.serializer.SerializerLongDelta.serialize(org.mapdb.DataOutput2, java.lang.Long)", "public void serialize(org.mapdb.DataOutput2, java.lang.Long) throws java.io.IOException"], ["java.lang.Long", "org.mapdb.serializer.SerializerLongDelta.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Long deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerLongDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["long[]", "org.mapdb.serializer.SerializerLongDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public long[] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.lang.Long", "org.mapdb.serializer.SerializerLongDelta.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Long valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerLongDelta.valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerLongDelta.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongDelta.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Object valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerLongDelta.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongDelta.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerLongDelta.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerLongPacked", "org.mapdb.serializer.SerializerLongPacked()", "public org.mapdb.serializer.SerializerLongPacked()"], ["void", "org.mapdb.serializer.SerializerLongPacked.serialize(org.mapdb.DataOutput2, java.lang.Long)", "public void serialize(org.mapdb.DataOutput2, java.lang.Long) throws java.io.IOException"], ["java.lang.Long", "org.mapdb.serializer.SerializerLongPacked.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Long deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerLongPacked.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["long[]", "org.mapdb.serializer.SerializerLongPacked.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public long[] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerLongPacked.fixedSize()", "public int fixedSize()"], ["int", "org.mapdb.serializer.SerializerLongPacked.valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["java.lang.Long", "org.mapdb.serializer.SerializerLongPacked.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Long valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongPacked.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Object valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongPacked.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerLongPacked.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)", "public int valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongPacked.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerLongPacked.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerRecid", "org.mapdb.serializer.SerializerRecid()", "public org.mapdb.serializer.SerializerRecid()"], ["void", "org.mapdb.serializer.SerializerRecid.serialize(org.mapdb.DataOutput2, java.lang.Long)", "public void serialize(org.mapdb.DataOutput2, java.lang.Long) throws java.io.IOException"], ["java.lang.Long", "org.mapdb.serializer.SerializerRecid.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Long deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerRecid.fixedSize()", "public int fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerRecid.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerRecid.valueArraySearch(java.lang.Object, java.lang.Long)", "public int valueArraySearch(java.lang.Object, java.lang.Long)"], ["void", "org.mapdb.serializer.SerializerRecid.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["long[]", "org.mapdb.serializer.SerializerRecid.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public long[] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.lang.Long", "org.mapdb.serializer.SerializerRecid.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Long valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerRecid.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)", "public java.lang.Object valueArrayBinaryGet(org.mapdb.DataInput2, int, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerRecid.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerRecid.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerRecid.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerRecid.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerRecidArray", "org.mapdb.serializer.SerializerRecidArray()", "public org.mapdb.serializer.SerializerRecidArray()"], ["void", "org.mapdb.serializer.SerializerRecidArray.serialize(org.mapdb.DataOutput2, long[])", "public void serialize(org.mapdb.DataOutput2, long[]) throws java.io.IOException"], ["long[]", "org.mapdb.serializer.SerializerRecidArray.deserialize(org.mapdb.DataInput2, int)", "public long[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerRecidArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerRecidArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerShort", "org.mapdb.serializer.SerializerShort()", "public org.mapdb.serializer.SerializerShort()"], ["void", "org.mapdb.serializer.SerializerShort.serialize(org.mapdb.DataOutput2, java.lang.Short)", "public void serialize(org.mapdb.DataOutput2, java.lang.Short) throws java.io.IOException"], ["java.lang.Short", "org.mapdb.serializer.SerializerShort.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Short deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerShort.fixedSize()", "public int fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerShort.isTrusted()", "public boolean isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerShort.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerShort.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerShortArray", "org.mapdb.serializer.SerializerShortArray()", "public org.mapdb.serializer.SerializerShortArray()"], ["void", "org.mapdb.serializer.SerializerShortArray.serialize(org.mapdb.DataOutput2, short[])", "public void serialize(org.mapdb.DataOutput2, short[]) throws java.io.IOException"], ["short[]", "org.mapdb.serializer.SerializerShortArray.deserialize(org.mapdb.DataInput2, int)", "public short[] deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerShortArray.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerShortArray.equals(short[], short[])", "public boolean equals(short[], short[])"], ["int", "org.mapdb.serializer.SerializerShortArray.hashCode(short[], int)", "public int hashCode(short[], int)"], ["int", "org.mapdb.serializer.SerializerShortArray.compare(short[], short[])", "public int compare(short[], short[])"], ["short[]", "org.mapdb.serializer.SerializerShortArray.nextValue(short[])", "public short[] nextValue(short[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerShortArray.nextValue(java.lang.Object)", "public java.lang.Object nextValue(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerShortArray.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerShortArray.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerShortArray.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerShortArray.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerShortArray.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerString", "org.mapdb.serializer.SerializerString()", "public org.mapdb.serializer.SerializerString()"], ["void", "org.mapdb.serializer.SerializerString.serialize(org.mapdb.DataOutput2, java.lang.String)", "public void serialize(org.mapdb.DataOutput2, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.serializer.SerializerString.deserialize(org.mapdb.DataInput2, int)", "public java.lang.String deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerString.isTrusted()", "public boolean isTrusted()"], ["void", "org.mapdb.serializer.SerializerString.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public char[][] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerString.valueArraySearch(java.lang.Object, java.lang.String)", "public int valueArraySearch(java.lang.Object, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerString.valueArraySearch(java.lang.Object, java.lang.String, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.String, java.util.Comparator)"], ["java.lang.String", "org.mapdb.serializer.SerializerString.valueArrayGet(java.lang.Object, int)", "public java.lang.String valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerString.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayEmpty()", "public char[][] valueArrayEmpty()"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayPut(java.lang.Object, int, java.lang.String)", "public char[][] valueArrayPut(java.lang.Object, int, java.lang.String)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayUpdateVal(java.lang.Object, int, java.lang.String)", "public char[][] valueArrayUpdateVal(java.lang.Object, int, java.lang.String)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayFromArray(java.lang.Object[])", "public char[][] valueArrayFromArray(java.lang.Object[])"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayCopyOfRange(java.lang.Object, int, int)", "public char[][] valueArrayCopyOfRange(java.lang.Object, int, int)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayDeleteValue(java.lang.Object, int)", "public char[][] valueArrayDeleteValue(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerString.hashCode(java.lang.String, int)", "public int hashCode(java.lang.String, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayGet(java.lang.Object, int)", "public java.lang.Object valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerString.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerString.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerString.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerString.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringAscii", "org.mapdb.serializer.SerializerStringAscii()", "public org.mapdb.serializer.SerializerStringAscii()"], ["void", "org.mapdb.serializer.SerializerStringAscii.serialize(org.mapdb.DataOutput2, java.lang.String)", "public void serialize(org.mapdb.DataOutput2, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.serializer.SerializerStringAscii.deserialize(org.mapdb.DataInput2, int)", "public java.lang.String deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerStringAscii.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerStringAscii.hashCode(java.lang.String, int)", "public int hashCode(java.lang.String, int)"], ["int", "org.mapdb.serializer.SerializerStringAscii.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringAscii.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerStringAscii.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringDelta", "org.mapdb.serializer.SerializerStringDelta()", "public org.mapdb.serializer.SerializerStringDelta()"], ["char[][]", "org.mapdb.serializer.SerializerStringDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public char[][] valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerStringDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.commonPrefixLen()", "public int commonPrefixLen()"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.length()", "public int length()"], ["int[]", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.getOffset()", "public int[] getOffset()"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.deleteKey(int)", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys deleteKey(int)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.copyOfRange(int, int)", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys copyOfRange(int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.putKey(int, java.lang.String)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys putKey(int, java.lang.String)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.putKey(int, byte[])", "public org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys putKey(int, byte[])"], ["byte[]", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.getKey(int)", "public byte[] getKey(int)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.compare(int, byte[])", "public int compare(int, byte[])"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.compare(int, java.lang.String)", "public int compare(int, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.compare(int, int)", "public int compare(int, int)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.getKeyString(int)", "public java.lang.String getKeyString(int)"], ["boolean", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.hasUnicodeChars()", "public boolean hasUnicodeChars()"], ["void", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.serialize(java.io.DataOutput, int)", "public void serialize(java.io.DataOutput, int) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.copyOfRange(int, int)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys copyOfRange(int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.deleteKey(int)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys deleteKey(int)"], ["org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys(org.mapdb.DataInput2, int[], int)", "public org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys(org.mapdb.DataInput2, int[], int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.commonPrefixLen()", "public int commonPrefixLen()"], ["int", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.length()", "public int length()"], ["int[]", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.getOffset()", "public int[] getOffset()"], ["org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.deleteKey(int)", "public org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys deleteKey(int)"], ["org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.copyOfRange(int, int)", "public org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys copyOfRange(int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.putKey(int, java.lang.String)", "public org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys putKey(int, java.lang.String)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.putKey(org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys, int, java.lang.String)", "public static org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys putKey(org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys, int, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.compare(int, java.lang.String)", "public int compare(int, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.compare(int, int)", "public int compare(int, int)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.getKeyString(int)", "public java.lang.String getKeyString(int)"], ["boolean", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.hasUnicodeChars()", "public boolean hasUnicodeChars()"], ["void", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.serialize(java.io.DataOutput, int)", "public void serialize(java.io.DataOutput, int) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.putKey(int, java.lang.String)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys putKey(int, java.lang.String)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.copyOfRange(int, int)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys copyOfRange(int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.deleteKey(int)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys deleteKey(int)"], ["org.mapdb.serializer.SerializerStringDelta2", "org.mapdb.serializer.SerializerStringDelta2()", "public org.mapdb.serializer.SerializerStringDelta2()"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerStringDelta2.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayCopyOfRange(java.lang.Object, int, int)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys valueArrayCopyOfRange(java.lang.Object, int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayDeleteValue(java.lang.Object, int)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys valueArrayDeleteValue(java.lang.Object, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayEmpty()", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys valueArrayEmpty()"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayFromArray(java.lang.Object[])", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys valueArrayFromArray(java.lang.Object[])"], ["java.lang.String", "org.mapdb.serializer.SerializerStringDelta2.valueArrayGet(java.lang.Object, int)", "public java.lang.String valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayPut(java.lang.Object, int, java.lang.String)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySearch(java.lang.Object, java.lang.String)", "public int valueArraySearch(java.lang.Object, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySearch(java.lang.Object, java.lang.String, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.String, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayUpdateVal(java.lang.Object, int, java.lang.String)", "public org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys valueArrayUpdateVal(java.lang.Object, int, java.lang.String)"], ["boolean", "org.mapdb.serializer.SerializerStringDelta2.isTrusted()", "public boolean isTrusted()"], ["void", "org.mapdb.serializer.SerializerStringDelta2.serialize(org.mapdb.DataOutput2, java.lang.String)", "public void serialize(org.mapdb.DataOutput2, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.serializer.SerializerStringDelta2.deserialize(org.mapdb.DataInput2, int)", "public java.lang.String deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerStringDelta2.hashCode(java.lang.String, int)", "public int hashCode(java.lang.String, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayGet(java.lang.Object, int)", "public java.lang.Object valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerStringDelta2.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringIntern", "org.mapdb.serializer.SerializerStringIntern()", "public org.mapdb.serializer.SerializerStringIntern()"], ["void", "org.mapdb.serializer.SerializerStringIntern.serialize(org.mapdb.DataOutput2, java.lang.String)", "public void serialize(org.mapdb.DataOutput2, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.serializer.SerializerStringIntern.deserialize(org.mapdb.DataInput2, int)", "public java.lang.String deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerStringIntern.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerStringIntern.hashCode(java.lang.String, int)", "public int hashCode(java.lang.String, int)"], ["int", "org.mapdb.serializer.SerializerStringIntern.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringIntern.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerStringIntern.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringNoSize", "org.mapdb.serializer.SerializerStringNoSize()", "public org.mapdb.serializer.SerializerStringNoSize()"], ["void", "org.mapdb.serializer.SerializerStringNoSize.serialize(org.mapdb.DataOutput2, java.lang.String)", "public void serialize(org.mapdb.DataOutput2, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.serializer.SerializerStringNoSize.deserialize(org.mapdb.DataInput2, int)", "public java.lang.String deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerStringNoSize.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerStringNoSize.needsAvailableSizeHint()", "public boolean needsAvailableSizeHint()"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringNoSize.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerStringNoSize.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerStringOrigHash", "org.mapdb.serializer.SerializerStringOrigHash()", "public org.mapdb.serializer.SerializerStringOrigHash()"], ["void", "org.mapdb.serializer.SerializerStringOrigHash.serialize(org.mapdb.DataOutput2, java.lang.String)", "public void serialize(org.mapdb.DataOutput2, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.serializer.SerializerStringOrigHash.deserialize(org.mapdb.DataInput2, int)", "public java.lang.String deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["boolean", "org.mapdb.serializer.SerializerStringOrigHash.isTrusted()", "public boolean isTrusted()"], ["int", "org.mapdb.serializer.SerializerStringOrigHash.hashCode(java.lang.String, int)", "public int hashCode(java.lang.String, int)"], ["int", "org.mapdb.serializer.SerializerStringOrigHash.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringOrigHash.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerStringOrigHash.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerUUID", "org.mapdb.serializer.SerializerUUID()", "public org.mapdb.serializer.SerializerUUID()"], ["void", "org.mapdb.serializer.SerializerUUID.serialize(org.mapdb.DataOutput2, java.util.UUID)", "public void serialize(org.mapdb.DataOutput2, java.util.UUID) throws java.io.IOException"], ["java.util.UUID", "org.mapdb.serializer.SerializerUUID.deserialize(org.mapdb.DataInput2, int)", "public java.util.UUID deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["int", "org.mapdb.serializer.SerializerUUID.fixedSize()", "public int fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerUUID.isTrusted()", "public boolean isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerUUID.equals(java.util.UUID, java.util.UUID)", "public boolean equals(java.util.UUID, java.util.UUID)"], ["int", "org.mapdb.serializer.SerializerUUID.hashCode(java.util.UUID, int)", "public int hashCode(java.util.UUID, int)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySearch(java.lang.Object, java.util.UUID)", "public int valueArraySearch(java.lang.Object, java.util.UUID)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySearch(java.lang.Object, java.util.UUID, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.util.UUID, java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerUUID.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)", "public void valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayDeserialize(org.mapdb.DataInput2, int)", "public java.lang.Object valueArrayDeserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["java.util.UUID", "org.mapdb.serializer.SerializerUUID.valueArrayGet(java.lang.Object, int)", "public java.util.UUID valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySize(java.lang.Object)", "public int valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayEmpty()", "public java.lang.Object valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayPut(java.lang.Object, int, java.util.UUID)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.util.UUID)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayUpdateVal(java.lang.Object, int, java.util.UUID)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.util.UUID)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayFromArray(java.lang.Object[])", "public java.lang.Object valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayCopyOfRange(java.lang.Object, int, int)", "public java.lang.Object valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayDeleteValue(java.lang.Object, int)", "public java.lang.Object valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayPut(java.lang.Object, int, java.lang.Object)", "public java.lang.Object valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayGet(java.lang.Object, int)", "public java.lang.Object valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)", "public int valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySearch(java.lang.Object, java.lang.Object)", "public int valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerUUID.hashCode(java.lang.Object, int)", "public int hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerUUID.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.deserialize(org.mapdb.DataInput2, int)", "public java.lang.Object deserialize(org.mapdb.DataInput2, int) throws java.io.IOException"], ["void", "org.mapdb.serializer.SerializerUUID.serialize(org.mapdb.DataOutput2, java.lang.Object)", "public void serialize(org.mapdb.DataOutput2, java.lang.Object) throws java.io.IOException"], ["org.mapdb.serializer.SerializerUtils", "org.mapdb.serializer.SerializerUtils()", "public org.mapdb.serializer.SerializerUtils()"], ["<R> org.mapdb.Serializer<R>", "org.mapdb.serializer.SerializerUtils.serializerForClass(java.lang.Class<R>)", "public static <R> org.mapdb.Serializer<R> serializerForClass(java.lang.Class<R>)"], ["int", "org.mapdb.serializer.SerializerUtils.compareInt(int, int)", "public static int compareInt(int, int)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.ByteArrayVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.ByteArrayVol$1.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.ByteArrayVol$1.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.ByteArrayVol", "org.mapdb.volume.ByteArrayVol()", "public org.mapdb.volume.ByteArrayVol()"], ["org.mapdb.volume.ByteArrayVol", "org.mapdb.volume.ByteArrayVol(int, long)", "public org.mapdb.volume.ByteArrayVol(int, long)"], ["void", "org.mapdb.volume.ByteArrayVol.ensureAvailable(long)", "public final void ensureAvailable(long)"], ["void", "org.mapdb.volume.ByteArrayVol.truncate(long)", "public void truncate(long)"], ["void", "org.mapdb.volume.ByteArrayVol.putLong(long, long)", "public void putLong(long, long)"], ["void", "org.mapdb.volume.ByteArrayVol.putInt(long, int)", "public void putInt(long, int)"], ["void", "org.mapdb.volume.ByteArrayVol.putByte(long, byte)", "public void putByte(long, byte)"], ["void", "org.mapdb.volume.ByteArrayVol.putData(long, byte[], int, int)", "public void putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ByteArrayVol.putData(long, java.nio.ByteBuffer)", "public void putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.ByteArrayVol.copyTo(long, org.mapdb.volume.Volume, long, long)", "public void copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.ByteArrayVol.putDataOverlap(long, byte[], int, int)", "public void putDataOverlap(long, byte[], int, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteArrayVol.getDataInputOverlap(long, int)", "public org.mapdb.DataInput2 getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.ByteArrayVol.clear(long, long)", "public void clear(long, long)"], ["long", "org.mapdb.volume.ByteArrayVol.getLong(long)", "public long getLong(long)"], ["int", "org.mapdb.volume.ByteArrayVol.getInt(long)", "public int getInt(long)"], ["byte", "org.mapdb.volume.ByteArrayVol.getByte(long)", "public byte getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteArrayVol.getDataInput(long, int)", "public org.mapdb.DataInput2 getDataInput(long, int)"], ["void", "org.mapdb.volume.ByteArrayVol.getData(long, byte[], int, int)", "public void getData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ByteArrayVol.close()", "public void close()"], ["void", "org.mapdb.volume.ByteArrayVol.sync()", "public void sync()"], ["int", "org.mapdb.volume.ByteArrayVol.sliceSize()", "public int sliceSize()"], ["boolean", "org.mapdb.volume.ByteArrayVol.isSliced()", "public boolean isSliced()"], ["long", "org.mapdb.volume.ByteArrayVol.length()", "public long length()"], ["boolean", "org.mapdb.volume.ByteArrayVol.isReadOnly()", "public boolean isReadOnly()"], ["java.io.File", "org.mapdb.volume.ByteArrayVol.getFile()", "public java.io.File getFile()"], ["boolean", "org.mapdb.volume.ByteArrayVol.getFileLocked()", "public boolean getFileLocked()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.ByteBufferMemoryVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol$1.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol$1.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.ByteBufferMemoryVol$2.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol$2.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol$2.handlesReadonly()", "public boolean handlesReadonly()"], ["java.lang.String", "org.mapdb.volume.ByteBufferMemoryVol.toString()", "public java.lang.String toString()"], ["org.mapdb.volume.ByteBufferMemoryVol", "org.mapdb.volume.ByteBufferMemoryVol(boolean, int, boolean, long)", "public org.mapdb.volume.ByteBufferMemoryVol(boolean, int, boolean, long)"], ["void", "org.mapdb.volume.ByteBufferMemoryVol.ensureAvailable(long)", "public final void ensureAvailable(long)"], ["void", "org.mapdb.volume.ByteBufferMemoryVol.truncate(long)", "public void truncate(long)"], ["void", "org.mapdb.volume.ByteBufferMemoryVol.close()", "public void close()"], ["void", "org.mapdb.volume.ByteBufferMemoryVol.sync()", "public void sync()"], ["long", "org.mapdb.volume.ByteBufferMemoryVol.length()", "public long length()"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol.isReadOnly()", "public boolean isReadOnly()"], ["java.io.File", "org.mapdb.volume.ByteBufferMemoryVol.getFile()", "public java.io.File getFile()"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol.getFileLocked()", "public boolean getFileLocked()"], ["java.lang.String", "org.mapdb.volume.ByteBufferMemoryVolSingle.toString()", "public java.lang.String toString()"], ["org.mapdb.volume.ByteBufferMemoryVolSingle", "org.mapdb.volume.ByteBufferMemoryVolSingle(boolean, long, boolean)", "public org.mapdb.volume.ByteBufferMemoryVolSingle(boolean, long, boolean)"], ["void", "org.mapdb.volume.ByteBufferMemoryVolSingle.truncate(long)", "public void truncate(long)"], ["synchronized", "org.mapdb.volume.ByteBufferMemoryVolSingle.void close()", "public synchronized void close()"], ["void", "org.mapdb.volume.ByteBufferMemoryVolSingle.sync()", "public void sync()"], ["long", "org.mapdb.volume.ByteBufferMemoryVolSingle.length()", "public long length()"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVolSingle.isReadOnly()", "public boolean isReadOnly()"], ["java.io.File", "org.mapdb.volume.ByteBufferMemoryVolSingle.getFile()", "public java.io.File getFile()"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVolSingle.getFileLocked()", "public boolean getFileLocked()"], ["void", "org.mapdb.volume.ByteBufferVol.putLong(long, long)", "public final void putLong(long, long)"], ["void", "org.mapdb.volume.ByteBufferVol.putInt(long, int)", "public final void putInt(long, int)"], ["void", "org.mapdb.volume.ByteBufferVol.putByte(long, byte)", "public final void putByte(long, byte)"], ["void", "org.mapdb.volume.ByteBufferVol.putData(long, byte[], int, int)", "public void putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ByteBufferVol.putData(long, java.nio.ByteBuffer)", "public final void putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.ByteBufferVol.copyTo(long, org.mapdb.volume.Volume, long, long)", "public void copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.ByteBufferVol.getData(long, byte[], int, int)", "public void getData(long, byte[], int, int)"], ["long", "org.mapdb.volume.ByteBufferVol.getLong(long)", "public final long getLong(long)"], ["int", "org.mapdb.volume.ByteBufferVol.getInt(long)", "public final int getInt(long)"], ["byte", "org.mapdb.volume.ByteBufferVol.getByte(long)", "public final byte getByte(long)"], ["org.mapdb.DataInput2$ByteBuffer", "org.mapdb.volume.ByteBufferVol.getDataInput(long, int)", "public final org.mapdb.DataInput2$ByteBuffer getDataInput(long, int)"], ["void", "org.mapdb.volume.ByteBufferVol.putDataOverlap(long, byte[], int, int)", "public void putDataOverlap(long, byte[], int, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteBufferVol.getDataInputOverlap(long, int)", "public org.mapdb.DataInput2 getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.ByteBufferVol.putUnsignedShort(long, int)", "public void putUnsignedShort(long, int)"], ["int", "org.mapdb.volume.ByteBufferVol.getUnsignedShort(long)", "public int getUnsignedShort(long)"], ["int", "org.mapdb.volume.ByteBufferVol.getUnsignedByte(long)", "public int getUnsignedByte(long)"], ["void", "org.mapdb.volume.ByteBufferVol.putUnsignedByte(long, int)", "public void putUnsignedByte(long, int)"], ["long", "org.mapdb.volume.ByteBufferVol.getSixLong(long)", "public long getSixLong(long)"], ["void", "org.mapdb.volume.ByteBufferVol.putSixLong(long, long)", "public void putSixLong(long, long)"], ["int", "org.mapdb.volume.ByteBufferVol.putPackedLong(long, long)", "public int putPackedLong(long, long)"], ["long", "org.mapdb.volume.ByteBufferVol.getPackedLong(long)", "public long getPackedLong(long)"], ["void", "org.mapdb.volume.ByteBufferVol.clear(long, long)", "public void clear(long, long)"], ["boolean", "org.mapdb.volume.ByteBufferVol.isSliced()", "public boolean isSliced()"], ["int", "org.mapdb.volume.ByteBufferVol.sliceSize()", "public int sliceSize()"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteBufferVol.getDataInput(long, int)", "public org.mapdb.DataInput2 getDataInput(long, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.ensureAvailable(long)", "public void ensureAvailable(long)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putLong(long, long)", "public final void putLong(long, long)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putInt(long, int)", "public final void putInt(long, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putByte(long, byte)", "public final void putByte(long, byte)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putData(long, byte[], int, int)", "public void putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putData(long, java.nio.ByteBuffer)", "public final void putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.copyTo(long, org.mapdb.volume.Volume, long, long)", "public void copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.getData(long, byte[], int, int)", "public void getData(long, byte[], int, int)"], ["long", "org.mapdb.volume.ByteBufferVolSingle.getLong(long)", "public final long getLong(long)"], ["int", "org.mapdb.volume.ByteBufferVolSingle.getInt(long)", "public final int getInt(long)"], ["byte", "org.mapdb.volume.ByteBufferVolSingle.getByte(long)", "public final byte getByte(long)"], ["org.mapdb.DataInput2$ByteBuffer", "org.mapdb.volume.ByteBufferVolSingle.getDataInput(long, int)", "public final org.mapdb.DataInput2$ByteBuffer getDataInput(long, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putDataOverlap(long, byte[], int, int)", "public void putDataOverlap(long, byte[], int, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteBufferVolSingle.getDataInputOverlap(long, int)", "public org.mapdb.DataInput2 getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.clear(long, long)", "public void clear(long, long)"], ["int", "org.mapdb.volume.ByteBufferVolSingle.sliceSize()", "public int sliceSize()"], ["boolean", "org.mapdb.volume.ByteBufferVolSingle.isSliced()", "public boolean isSliced()"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteBufferVolSingle.getDataInput(long, int)", "public org.mapdb.DataInput2 getDataInput(long, int)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.FileChannelVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.FileChannelVol$1.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.FileChannelVol$1.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.FileChannelVol", "org.mapdb.volume.FileChannelVol(java.io.File, boolean, long, int, long)", "public org.mapdb.volume.FileChannelVol(java.io.File, boolean, long, int, long)"], ["org.mapdb.volume.FileChannelVol", "org.mapdb.volume.FileChannelVol(java.io.File)", "public org.mapdb.volume.FileChannelVol(java.io.File)"], ["void", "org.mapdb.volume.FileChannelVol.ensureAvailable(long)", "public void ensureAvailable(long)"], ["void", "org.mapdb.volume.FileChannelVol.truncate(long)", "public void truncate(long)"], ["void", "org.mapdb.volume.FileChannelVol.putLong(long, long)", "public void putLong(long, long)"], ["void", "org.mapdb.volume.FileChannelVol.putInt(long, int)", "public void putInt(long, int)"], ["void", "org.mapdb.volume.FileChannelVol.putByte(long, byte)", "public void putByte(long, byte)"], ["void", "org.mapdb.volume.FileChannelVol.putData(long, byte[], int, int)", "public void putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.FileChannelVol.putData(long, java.nio.ByteBuffer)", "public void putData(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.volume.FileChannelVol.getLong(long)", "public long getLong(long)"], ["int", "org.mapdb.volume.FileChannelVol.getInt(long)", "public int getInt(long)"], ["byte", "org.mapdb.volume.FileChannelVol.getByte(long)", "public byte getByte(long)"], ["org.mapdb.DataInput2$ByteBuffer", "org.mapdb.volume.FileChannelVol.getDataInput(long, int)", "public org.mapdb.DataInput2$ByteBuffer getDataInput(long, int)"], ["void", "org.mapdb.volume.FileChannelVol.getData(long, byte[], int, int)", "public void getData(long, byte[], int, int)"], ["synchronized", "org.mapdb.volume.FileChannelVol.void close()", "public synchronized void close()"], ["void", "org.mapdb.volume.FileChannelVol.sync()", "public void sync()"], ["int", "org.mapdb.volume.FileChannelVol.sliceSize()", "public int sliceSize()"], ["boolean", "org.mapdb.volume.FileChannelVol.isSliced()", "public boolean isSliced()"], ["long", "org.mapdb.volume.FileChannelVol.length()", "public long length()"], ["boolean", "org.mapdb.volume.FileChannelVol.isReadOnly()", "public boolean isReadOnly()"], ["java.io.File", "org.mapdb.volume.FileChannelVol.getFile()", "public java.io.File getFile()"], ["boolean", "org.mapdb.volume.FileChannelVol.getFileLocked()", "public boolean getFileLocked()"], ["void", "org.mapdb.volume.FileChannelVol.clear(long, long)", "public void clear(long, long)"], ["void", "org.mapdb.volume.FileChannelVol.clear(java.nio.channels.FileChannel, long, long)", "public static void clear(java.nio.channels.FileChannel, long, long)"], ["org.mapdb.DataInput2", "org.mapdb.volume.FileChannelVol.getDataInput(long, int)", "public org.mapdb.DataInput2 getDataInput(long, int)"], ["org.mapdb.volume.MappedFileVol$MappedFileFactory", "org.mapdb.volume.MappedFileVol$MappedFileFactory(boolean, boolean)", "public org.mapdb.volume.MappedFileVol$MappedFileFactory(boolean, boolean)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.MappedFileVol$MappedFileFactory.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.MappedFileVol$MappedFileFactory.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.MappedFileVol$MappedFileFactory.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.MappedFileVol", "org.mapdb.volume.MappedFileVol(java.io.File, boolean, long, int, boolean, long, boolean)", "public org.mapdb.volume.MappedFileVol(java.io.File, boolean, long, int, boolean, long, boolean)"], ["void", "org.mapdb.volume.MappedFileVol.ensureAvailable(long)", "public final void ensureAvailable(long)"], ["void", "org.mapdb.volume.MappedFileVol.close()", "public void close()"], ["void", "org.mapdb.volume.MappedFileVol.sync()", "public void sync()"], ["long", "org.mapdb.volume.MappedFileVol.length()", "public long length()"], ["boolean", "org.mapdb.volume.MappedFileVol.isReadOnly()", "public boolean isReadOnly()"], ["java.io.File", "org.mapdb.volume.MappedFileVol.getFile()", "public java.io.File getFile()"], ["boolean", "org.mapdb.volume.MappedFileVol.getFileLocked()", "public boolean getFileLocked()"], ["void", "org.mapdb.volume.MappedFileVol.truncate(long)", "public void truncate(long)"], ["boolean", "org.mapdb.volume.MappedFileVol.fileLoad()", "public boolean fileLoad()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.MappedFileVolSingle$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle$1.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle$1.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.MappedFileVolSingle$2.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle$2.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle$2.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.MappedFileVolSingle", "org.mapdb.volume.MappedFileVolSingle(java.io.File, boolean, long, long, boolean)", "public org.mapdb.volume.MappedFileVolSingle(java.io.File, boolean, long, long, boolean)"], ["synchronized", "org.mapdb.volume.MappedFileVolSingle.void close()", "public synchronized void close()"], ["synchronized", "org.mapdb.volume.MappedFileVolSingle.void sync()", "public synchronized void sync()"], ["long", "org.mapdb.volume.MappedFileVolSingle.length()", "public long length()"], ["boolean", "org.mapdb.volume.MappedFileVolSingle.isReadOnly()", "public boolean isReadOnly()"], ["java.io.File", "org.mapdb.volume.MappedFileVolSingle.getFile()", "public java.io.File getFile()"], ["boolean", "org.mapdb.volume.MappedFileVolSingle.getFileLocked()", "public boolean getFileLocked()"], ["void", "org.mapdb.volume.MappedFileVolSingle.truncate(long)", "public void truncate(long)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle.fileLoad()", "public boolean fileLoad()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.RandomAccessFileVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.RandomAccessFileVol$1.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.RandomAccessFileVol$1.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.RandomAccessFileVol", "org.mapdb.volume.RandomAccessFileVol(java.io.File, boolean, long, long)", "public org.mapdb.volume.RandomAccessFileVol(java.io.File, boolean, long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void ensureAvailable(long)", "public synchronized void ensureAvailable(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void truncate(long)", "public synchronized void truncate(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putLong(long, long)", "public synchronized void putLong(long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putInt(long, int)", "public synchronized void putInt(long, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putByte(long, byte)", "public synchronized void putByte(long, byte)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putData(long, byte[], int, int)", "public synchronized void putData(long, byte[], int, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putData(long, java.nio.ByteBuffer)", "public synchronized void putData(long, java.nio.ByteBuffer)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.long getLong(long)", "public synchronized long getLong(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.int getInt(long)", "public synchronized int getInt(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.byte getByte(long)", "public synchronized byte getByte(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.org.mapdb.DataInput2 getDataInput(long, int)", "public synchronized org.mapdb.DataInput2 getDataInput(long, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void getData(long, byte[], int, int)", "public synchronized void getData(long, byte[], int, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void close()", "public synchronized void close()"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void sync()", "public synchronized void sync()"], ["int", "org.mapdb.volume.RandomAccessFileVol.sliceSize()", "public int sliceSize()"], ["boolean", "org.mapdb.volume.RandomAccessFileVol.isSliced()", "public boolean isSliced()"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.long length()", "public synchronized long length()"], ["java.io.File", "org.mapdb.volume.RandomAccessFileVol.getFile()", "public java.io.File getFile()"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.boolean getFileLocked()", "public synchronized boolean getFileLocked()"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void clear(long, long)", "public synchronized void clear(long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putUnsignedShort(long, int)", "public synchronized void putUnsignedShort(long, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.int getUnsignedShort(long)", "public synchronized int getUnsignedShort(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.long getSixLong(long)", "public synchronized long getSixLong(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putSixLong(long, long)", "public synchronized void putSixLong(long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.int putPackedLong(long, long)", "public synchronized int putPackedLong(long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.long getPackedLong(long)", "public synchronized long getPackedLong(long)"], ["boolean", "org.mapdb.volume.RandomAccessFileVol.isReadOnly()", "public boolean isReadOnly()"], ["org.mapdb.volume.ReadOnlyVolume", "org.mapdb.volume.ReadOnlyVolume(org.mapdb.volume.Volume)", "public org.mapdb.volume.ReadOnlyVolume(org.mapdb.volume.Volume)"], ["void", "org.mapdb.volume.ReadOnlyVolume.ensureAvailable(long)", "public void ensureAvailable(long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.truncate(long)", "public void truncate(long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putLong(long, long)", "public void putLong(long, long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putInt(long, int)", "public void putInt(long, int)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putByte(long, byte)", "public void putByte(long, byte)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putData(long, byte[], int, int)", "public void putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putData(long, java.nio.ByteBuffer)", "public void putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putDataOverlap(long, byte[], int, int)", "public void putDataOverlap(long, byte[], int, int)"], ["long", "org.mapdb.volume.ReadOnlyVolume.getLong(long)", "public long getLong(long)"], ["int", "org.mapdb.volume.ReadOnlyVolume.getInt(long)", "public int getInt(long)"], ["byte", "org.mapdb.volume.ReadOnlyVolume.getByte(long)", "public byte getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ReadOnlyVolume.getDataInput(long, int)", "public org.mapdb.DataInput2 getDataInput(long, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ReadOnlyVolume.getDataInputOverlap(long, int)", "public org.mapdb.DataInput2 getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.ReadOnlyVolume.getData(long, byte[], int, int)", "public void getData(long, byte[], int, int)"], ["boolean", "org.mapdb.volume.ReadOnlyVolume.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.volume.ReadOnlyVolume.close()", "public void close()"], ["void", "org.mapdb.volume.ReadOnlyVolume.sync()", "public void sync()"], ["int", "org.mapdb.volume.ReadOnlyVolume.sliceSize()", "public int sliceSize()"], ["void", "org.mapdb.volume.ReadOnlyVolume.deleteFile()", "public void deleteFile()"], ["boolean", "org.mapdb.volume.ReadOnlyVolume.isSliced()", "public boolean isSliced()"], ["long", "org.mapdb.volume.ReadOnlyVolume.length()", "public long length()"], ["void", "org.mapdb.volume.ReadOnlyVolume.putUnsignedShort(long, int)", "public void putUnsignedShort(long, int)"], ["int", "org.mapdb.volume.ReadOnlyVolume.getUnsignedShort(long)", "public int getUnsignedShort(long)"], ["int", "org.mapdb.volume.ReadOnlyVolume.getUnsignedByte(long)", "public int getUnsignedByte(long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putUnsignedByte(long, int)", "public void putUnsignedByte(long, int)"], ["long", "org.mapdb.volume.ReadOnlyVolume.getSixLong(long)", "public long getSixLong(long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putSixLong(long, long)", "public void putSixLong(long, long)"], ["boolean", "org.mapdb.volume.ReadOnlyVolume.isReadOnly()", "public boolean isReadOnly()"], ["java.io.File", "org.mapdb.volume.ReadOnlyVolume.getFile()", "public java.io.File getFile()"], ["boolean", "org.mapdb.volume.ReadOnlyVolume.getFileLocked()", "public boolean getFileLocked()"], ["void", "org.mapdb.volume.ReadOnlyVolume.copyTo(long, org.mapdb.volume.Volume, long, long)", "public void copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.clear(long, long)", "public void clear(long, long)"], ["boolean", "org.mapdb.volume.ReadOnlyVolumeFactory.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.ReadOnlyVolumeFactory.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.ReadOnlyVolumeFactory.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.ReadOnlyVolumeFactory", "org.mapdb.volume.ReadOnlyVolumeFactory(org.mapdb.volume.VolumeFactory)", "public org.mapdb.volume.ReadOnlyVolumeFactory(org.mapdb.volume.VolumeFactory)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.SingleByteArrayVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.SingleByteArrayVol$1.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.SingleByteArrayVol$1.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.SingleByteArrayVol", "org.mapdb.volume.SingleByteArrayVol(int)", "public org.mapdb.volume.SingleByteArrayVol(int)"], ["org.mapdb.volume.SingleByteArrayVol", "org.mapdb.volume.SingleByteArrayVol(byte[])", "public org.mapdb.volume.SingleByteArrayVol(byte[])"], ["void", "org.mapdb.volume.SingleByteArrayVol.ensureAvailable(long)", "public void ensureAvailable(long)"], ["void", "org.mapdb.volume.SingleByteArrayVol.truncate(long)", "public void truncate(long)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putLong(long, long)", "public void putLong(long, long)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putInt(long, int)", "public void putInt(long, int)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putByte(long, byte)", "public void putByte(long, byte)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putData(long, byte[], int, int)", "public void putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putData(long, java.nio.ByteBuffer)", "public void putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.SingleByteArrayVol.copyTo(long, org.mapdb.volume.Volume, long, long)", "public void copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.SingleByteArrayVol.clear(long, long)", "public void clear(long, long)"], ["long", "org.mapdb.volume.SingleByteArrayVol.getLong(long)", "public long getLong(long)"], ["int", "org.mapdb.volume.SingleByteArrayVol.getInt(long)", "public int getInt(long)"], ["byte", "org.mapdb.volume.SingleByteArrayVol.getByte(long)", "public byte getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.volume.SingleByteArrayVol.getDataInput(long, int)", "public org.mapdb.DataInput2 getDataInput(long, int)"], ["void", "org.mapdb.volume.SingleByteArrayVol.getData(long, byte[], int, int)", "public void getData(long, byte[], int, int)"], ["void", "org.mapdb.volume.SingleByteArrayVol.close()", "public void close()"], ["void", "org.mapdb.volume.SingleByteArrayVol.sync()", "public void sync()"], ["int", "org.mapdb.volume.SingleByteArrayVol.sliceSize()", "public int sliceSize()"], ["boolean", "org.mapdb.volume.SingleByteArrayVol.isSliced()", "public boolean isSliced()"], ["long", "org.mapdb.volume.SingleByteArrayVol.length()", "public long length()"], ["boolean", "org.mapdb.volume.SingleByteArrayVol.isReadOnly()", "public boolean isReadOnly()"], ["java.io.File", "org.mapdb.volume.SingleByteArrayVol.getFile()", "public java.io.File getFile()"], ["boolean", "org.mapdb.volume.SingleByteArrayVol.getFileLocked()", "public boolean getFileLocked()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.Volume$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.Volume$1.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.Volume$1.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.Volume()", "public org.mapdb.volume.Volume()"], ["boolean", "org.mapdb.volume.Volume.fileLoad()", "public boolean fileLoad()"], ["void", "org.mapdb.volume.Volume.assertZeroes(long, long)", "public void assertZeroes(long, long) throws org.mapdb.DBException$DataCorruption"], ["boolean", "org.mapdb.volume.Volume.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.volume.Volume.putDataOverlap(long, byte[], int, int)", "public void putDataOverlap(long, byte[], int, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.Volume.getDataInputOverlap(long, int)", "public org.mapdb.DataInput2 getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.Volume.deleteFile()", "public void deleteFile()"], ["void", "org.mapdb.volume.Volume.putUnsignedShort(long, int)", "public void putUnsignedShort(long, int)"], ["int", "org.mapdb.volume.Volume.getUnsignedShort(long)", "public int getUnsignedShort(long)"], ["int", "org.mapdb.volume.Volume.getUnsignedByte(long)", "public int getUnsignedByte(long)"], ["void", "org.mapdb.volume.Volume.putUnsignedByte(long, int)", "public void putUnsignedByte(long, int)"], ["long", "org.mapdb.volume.Volume.getSixLong(long)", "public long getSixLong(long)"], ["void", "org.mapdb.volume.Volume.putSixLong(long, long)", "public void putSixLong(long, long)"], ["int", "org.mapdb.volume.Volume.putPackedLong(long, long)", "public int putPackedLong(long, long)"], ["long", "org.mapdb.volume.Volume.getPackedLong(long)", "public long getPackedLong(long)"], ["void", "org.mapdb.volume.Volume.copyTo(long, org.mapdb.volume.Volume, long, long)", "public void copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.Volume.clearOverlap(long, long)", "public void clearOverlap(long, long)"], ["void", "org.mapdb.volume.Volume.copyTo(org.mapdb.volume.Volume)", "public void copyTo(org.mapdb.volume.Volume)"], ["void", "org.mapdb.volume.Volume.copyFrom(java.io.InputStream)", "public void copyFrom(java.io.InputStream)"], ["void", "org.mapdb.volume.Volume.copyTo(java.io.OutputStream)", "public void copyTo(java.io.OutputStream)"], ["long", "org.mapdb.volume.Volume.hash(long, long, long)", "public long hash(long, long, long)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.VolumeFactory$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.VolumeFactory$1.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.mapdb.volume.VolumeFactory$1.handlesReadonly()", "public boolean handlesReadonly()"], ["org.mapdb.volume.VolumeFactory", "org.mapdb.volume.VolumeFactory()", "public org.mapdb.volume.VolumeFactory()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.VolumeFactory.makeVolume(java.lang.String, boolean)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.VolumeFactory.makeVolume(java.lang.String, boolean, long)", "public org.mapdb.volume.Volume makeVolume(java.lang.String, boolean, long)"], ["org.mapdb.volume.VolumeFactory", "org.mapdb.volume.VolumeFactory.wrap(org.mapdb.volume.Volume, boolean)", "public static org.mapdb.volume.VolumeFactory wrap(org.mapdb.volume.Volume, boolean)"]]}