{"rocksdbjni-5.11.3.jar": [["org.rocksdb.AbstractCompactionFilter$Context", "org.rocksdb.AbstractCompactionFilter$Context(boolean, boolean)"], ["boolean", "org.rocksdb.AbstractCompactionFilter$Context.isFullCompaction()"], ["boolean", "org.rocksdb.AbstractCompactionFilter$Context.isManualCompaction()"], ["org.rocksdb.AbstractCompactionFilterFactory", "org.rocksdb.AbstractCompactionFilterFactory()"], ["java.lang.String", "org.rocksdb.AbstractComparator.findShortestSeparator(java.lang.String, T)"], ["java.lang.String", "org.rocksdb.AbstractComparator.findShortSuccessor(java.lang.String)"], ["boolean", "org.rocksdb.AbstractImmutableNativeReference.isOwningHandle()"], ["void", "org.rocksdb.AbstractImmutableNativeReference.close()"], ["org.rocksdb.AbstractNativeReference", "org.rocksdb.AbstractNativeReference()"], ["void", "org.rocksdb.AbstractNativeReference.dispose()"], ["boolean", "org.rocksdb.AbstractRocksIterator.isValid()"], ["void", "org.rocksdb.AbstractRocksIterator.seekToFirst()"], ["void", "org.rocksdb.AbstractRocksIterator.seekToLast()"], ["void", "org.rocksdb.AbstractRocksIterator.seek(byte[])"], ["void", "org.rocksdb.AbstractRocksIterator.seekForPrev(byte[])"], ["void", "org.rocksdb.AbstractRocksIterator.next()"], ["void", "org.rocksdb.AbstractRocksIterator.prev()"], ["void", "org.rocksdb.AbstractRocksIterator.status()"], ["T", "org.rocksdb.AbstractSlice.data()"], ["int", "org.rocksdb.AbstractSlice.size()"], ["boolean", "org.rocksdb.AbstractSlice.empty()"], ["java.lang.String", "org.rocksdb.AbstractSlice.toString(boolean)"], ["java.lang.String", "org.rocksdb.AbstractSlice.toString()"], ["int", "org.rocksdb.AbstractSlice.compare(org.rocksdb.AbstractSlice<?>)"], ["int", "org.rocksdb.AbstractSlice.hashCode()"], ["boolean", "org.rocksdb.AbstractSlice.equals(java.lang.Object)"], ["boolean", "org.rocksdb.AbstractSlice.startsWith(org.rocksdb.AbstractSlice<?>)"], ["int", "org.rocksdb.AbstractWriteBatch.count()"], ["void", "org.rocksdb.AbstractWriteBatch.put(byte[], byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.put(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.merge(byte[], byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.remove(byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.remove(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.delete(byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.delete(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.singleDelete(byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.singleDelete(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.deleteRange(byte[], byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.deleteRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.putLogData(byte[])"], ["void", "org.rocksdb.AbstractWriteBatch.clear()"], ["void", "org.rocksdb.AbstractWriteBatch.setSavePoint()"], ["void", "org.rocksdb.AbstractWriteBatch.rollbackToSavePoint()"], ["void", "org.rocksdb.AbstractWriteBatch.popSavePoint()"], ["void", "org.rocksdb.AbstractWriteBatch.setMaxBytes(long)"], ["org.rocksdb.WriteBatch", "org.rocksdb.AbstractWriteBatch.getWriteBatch()"], ["org.rocksdb.AccessHint[]", "org.rocksdb.AccessHint.values()"], ["org.rocksdb.AccessHint", "org.rocksdb.AccessHint.valueOf(java.lang.String)"], ["byte", "org.rocksdb.AccessHint.getValue()"], ["org.rocksdb.AccessHint", "org.rocksdb.AccessHint.getAccessHint(byte)"], ["org.rocksdb.BackupEngine", "org.rocksdb.BackupEngine.open(org.rocksdb.Env, org.rocksdb.BackupableDBOptions)"], ["void", "org.rocksdb.BackupEngine.createNewBackup(org.rocksdb.RocksDB)"], ["void", "org.rocksdb.BackupEngine.createNewBackup(org.rocksdb.RocksDB, boolean)"], ["int[]", "org.rocksdb.BackupEngine.getCorruptedBackups()"], ["void", "org.rocksdb.BackupEngine.garbageCollect()"], ["void", "org.rocksdb.BackupEngine.purgeOldBackups(int)"], ["void", "org.rocksdb.BackupEngine.deleteBackup(int)"], ["void", "org.rocksdb.BackupEngine.restoreDbFromBackup(int, java.lang.String, java.lang.String, org.rocksdb.RestoreOptions)"], ["void", "org.rocksdb.BackupEngine.restoreDbFromLatestBackup(java.lang.String, java.lang.String, org.rocksdb.RestoreOptions)"], ["int", "org.rocksdb.BackupInfo.backupId()"], ["long", "org.rocksdb.BackupInfo.timestamp()"], ["long", "org.rocksdb.BackupInfo.size()"], ["int", "org.rocksdb.BackupInfo.numberFiles()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions(java.lang.String)"], ["java.lang.String", "org.rocksdb.BackupableDBOptions.backupDir()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setBackupEnv(org.rocksdb.Env)"], ["org.rocksdb.Env", "org.rocksdb.BackupableDBOptions.backupEnv()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setShareTableFiles(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.shareTableFiles()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setInfoLog(org.rocksdb.Logger)"], ["org.rocksdb.Logger", "org.rocksdb.BackupableDBOptions.infoLog()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setSync(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.sync()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setDestroyOldData(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.destroyOldData()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setBackupLogFiles(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.backupLogFiles()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setBackupRateLimit(long)"], ["long", "org.rocksdb.BackupableDBOptions.backupRateLimit()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setBackupRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.RateLimiter", "org.rocksdb.BackupableDBOptions.backupRateLimiter()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setRestoreRateLimit(long)"], ["long", "org.rocksdb.BackupableDBOptions.restoreRateLimit()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setRestoreRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.RateLimiter", "org.rocksdb.BackupableDBOptions.restoreRateLimiter()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setShareFilesWithChecksum(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.shareFilesWithChecksum()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setMaxBackgroundOperations(int)"], ["int", "org.rocksdb.BackupableDBOptions.maxBackgroundOperations()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setCallbackTriggerIntervalSize(long)"], ["long", "org.rocksdb.BackupableDBOptions.callbackTriggerIntervalSize()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setNoBlockCache(boolean)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.noBlockCache()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockCacheSize(long)"], ["long", "org.rocksdb.BlockBasedTableConfig.blockCacheSize()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setCacheNumShardBits(int)"], ["int", "org.rocksdb.BlockBasedTableConfig.cacheNumShardBits()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockSize(long)"], ["long", "org.rocksdb.BlockBasedTableConfig.blockSize()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockSizeDeviation(int)"], ["int", "org.rocksdb.BlockBasedTableConfig.blockSizeDeviation()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockRestartInterval(int)"], ["int", "org.rocksdb.BlockBasedTableConfig.blockRestartInterval()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setWholeKeyFiltering(boolean)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.wholeKeyFiltering()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setFilter(org.rocksdb.Filter)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.cacheIndexAndFilterBlocks()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setCacheIndexAndFilterBlocks(boolean)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.pinL0FilterAndIndexBlocksInCache()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setPinL0FilterAndIndexBlocksInCache(boolean)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.hashIndexAllowCollision()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setHashIndexAllowCollision(boolean)"], ["long", "org.rocksdb.BlockBasedTableConfig.blockCacheCompressedSize()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockCacheCompressedSize(long)"], ["int", "org.rocksdb.BlockBasedTableConfig.blockCacheCompressedNumShardBits()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockCacheCompressedNumShardBits(int)"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setChecksumType(org.rocksdb.ChecksumType)"], ["org.rocksdb.ChecksumType", "org.rocksdb.BlockBasedTableConfig.checksumType()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setIndexType(org.rocksdb.IndexType)"], ["org.rocksdb.IndexType", "org.rocksdb.BlockBasedTableConfig.indexType()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setFormatVersion(int)"], ["int", "org.rocksdb.BlockBasedTableConfig.formatVersion()"], ["org.rocksdb.BloomFilter", "org.rocksdb.BloomFilter()"], ["org.rocksdb.BloomFilter", "org.rocksdb.BloomFilter(int)"], ["org.rocksdb.BloomFilter", "org.rocksdb.BloomFilter(int, boolean)"], ["org.rocksdb.BuiltinComparator[]", "org.rocksdb.BuiltinComparator.values()"], ["org.rocksdb.BuiltinComparator", "org.rocksdb.BuiltinComparator.valueOf(java.lang.String)"], ["org.rocksdb.CassandraCompactionFilter", "org.rocksdb.CassandraCompactionFilter(boolean, int)"], ["org.rocksdb.CassandraValueMergeOperator", "org.rocksdb.CassandraValueMergeOperator(int)"], ["org.rocksdb.CassandraValueMergeOperator", "org.rocksdb.CassandraValueMergeOperator(int, int)"], ["org.rocksdb.Checkpoint", "org.rocksdb.Checkpoint.create(org.rocksdb.RocksDB)"], ["void", "org.rocksdb.Checkpoint.createCheckpoint(java.lang.String)"], ["org.rocksdb.ChecksumType[]", "org.rocksdb.ChecksumType.values()"], ["org.rocksdb.ChecksumType", "org.rocksdb.ChecksumType.valueOf(java.lang.String)"], ["byte", "org.rocksdb.ChecksumType.getValue()"], ["org.rocksdb.ClockCache", "org.rocksdb.ClockCache(long)"], ["org.rocksdb.ClockCache", "org.rocksdb.ClockCache(long, int)"], ["org.rocksdb.ClockCache", "org.rocksdb.ClockCache(long, int, boolean)"], ["org.rocksdb.ColumnFamilyDescriptor", "org.rocksdb.ColumnFamilyDescriptor(byte[])"], ["org.rocksdb.ColumnFamilyDescriptor", "org.rocksdb.ColumnFamilyDescriptor(byte[], org.rocksdb.ColumnFamilyOptions)"], ["byte[]", "org.rocksdb.ColumnFamilyDescriptor.getName()"], ["byte[]", "org.rocksdb.ColumnFamilyDescriptor.columnFamilyName()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyDescriptor.getOptions()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyDescriptor.columnFamilyOptions()"], ["boolean", "org.rocksdb.ColumnFamilyDescriptor.equals(java.lang.Object)"], ["int", "org.rocksdb.ColumnFamilyDescriptor.hashCode()"], ["byte[]", "org.rocksdb.ColumnFamilyHandle.getName()"], ["int", "org.rocksdb.ColumnFamilyHandle.getID()"], ["org.rocksdb.ColumnFamilyDescriptor", "org.rocksdb.ColumnFamilyHandle.getDescriptor()"], ["boolean", "org.rocksdb.ColumnFamilyHandle.equals(java.lang.Object)"], ["int", "org.rocksdb.ColumnFamilyHandle.hashCode()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.getColumnFamilyOptionsFromProps(java.util.Properties)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeForSmallDb()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeForPointLookup(long)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeLevelStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeLevelStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeUniversalStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeUniversalStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setComparator(org.rocksdb.BuiltinComparator)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMergeOperatorName(java.lang.String)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMergeOperator(org.rocksdb.MergeOperator)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionFilter(org.rocksdb.AbstractCompactionFilter<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionFilterFactory(org.rocksdb.AbstractCompactionFilterFactory<? extends org.rocksdb.AbstractCompactionFilter<?>>)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setWriteBufferSize(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.writeBufferSize()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxWriteBufferNumber(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.maxWriteBufferNumber()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMinWriteBufferNumberToMerge(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.minWriteBufferNumberToMerge()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.useFixedLengthPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.useCappedPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.CompressionType", "org.rocksdb.ColumnFamilyOptions.compressionType()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setBottommostCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.CompressionType", "org.rocksdb.ColumnFamilyOptions.bottommostCompressionType()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompressionOptions(org.rocksdb.CompressionOptions)"], ["org.rocksdb.CompressionOptions", "org.rocksdb.ColumnFamilyOptions.compressionOptions()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setNumLevels(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.numLevels()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevelZeroFileNumCompactionTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.levelZeroFileNumCompactionTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevelZeroSlowdownWritesTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.levelZeroSlowdownWritesTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevelZeroStopWritesTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.levelZeroStopWritesTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setTargetFileSizeBase(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.targetFileSizeBase()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setTargetFileSizeMultiplier(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.targetFileSizeMultiplier()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelBase(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxBytesForLevelBase()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevelCompactionDynamicLevelBytes(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.levelCompactionDynamicLevelBytes()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplier(double)"], ["double", "org.rocksdb.ColumnFamilyOptions.maxBytesForLevelMultiplier()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxCompactionBytes(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxCompactionBytes()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setArenaBlockSize(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.arenaBlockSize()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setDisableAutoCompactions(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.disableAutoCompactions()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionStyle(org.rocksdb.CompactionStyle)"], ["org.rocksdb.CompactionStyle", "org.rocksdb.ColumnFamilyOptions.compactionStyle()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxTableFilesSizeFIFO(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxTableFilesSizeFIFO()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxSequentialSkipInIterations(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxSequentialSkipInIterations()"], ["org.rocksdb.MemTableConfig", "org.rocksdb.ColumnFamilyOptions.memTableConfig()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMemTableConfig(org.rocksdb.MemTableConfig)"], ["java.lang.String", "org.rocksdb.ColumnFamilyOptions.memTableFactoryName()"], ["org.rocksdb.TableFormatConfig", "org.rocksdb.ColumnFamilyOptions.tableFormatConfig()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setTableFormatConfig(org.rocksdb.TableFormatConfig)"], ["java.lang.String", "org.rocksdb.ColumnFamilyOptions.tableFactoryName()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setInplaceUpdateSupport(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.inplaceUpdateSupport()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setInplaceUpdateNumLocks(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.inplaceUpdateNumLocks()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMemtablePrefixBloomSizeRatio(double)"], ["double", "org.rocksdb.ColumnFamilyOptions.memtablePrefixBloomSizeRatio()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setBloomLocality(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.bloomLocality()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxSuccessiveMerges(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxSuccessiveMerges()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setOptimizeFiltersForHits(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.optimizeFiltersForHits()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMemtableHugePageSize(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.memtableHugePageSize()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setSoftPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.softPendingCompactionBytesLimit()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setHardPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.hardPendingCompactionBytesLimit()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevel0FileNumCompactionTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.level0FileNumCompactionTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevel0SlowdownWritesTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.level0SlowdownWritesTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevel0StopWritesTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.level0StopWritesTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplierAdditional(int[])"], ["int[]", "org.rocksdb.ColumnFamilyOptions.maxBytesForLevelMultiplierAdditional()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setParanoidFileChecks(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.paranoidFileChecks()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxWriteBufferNumberToMaintain(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.maxWriteBufferNumberToMaintain()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionPriority(org.rocksdb.CompactionPriority)"], ["org.rocksdb.CompactionPriority", "org.rocksdb.ColumnFamilyOptions.compactionPriority()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setReportBgIoStats(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.reportBgIoStats()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.ColumnFamilyOptions.compactionOptionsUniversal()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)"], ["org.rocksdb.CompactionOptionsFIFO", "org.rocksdb.ColumnFamilyOptions.compactionOptionsFIFO()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setForceConsistencyChecks(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.forceConsistencyChecks()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompressionOptions(org.rocksdb.CompressionOptions)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setBottommostCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setTableFormatConfig(org.rocksdb.TableFormatConfig)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMemTableConfig(org.rocksdb.MemTableConfig)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxTableFilesSizeFIFO(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevelZeroStopWritesTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevelZeroSlowdownWritesTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevelZeroFileNumCompactionTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.useCappedPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.useFixedLengthPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMergeOperator(org.rocksdb.MergeOperator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMergeOperatorName(java.lang.String)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setComparator(org.rocksdb.AbstractComparator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setComparator(org.rocksdb.BuiltinComparator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeUniversalStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeUniversalStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeLevelStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeLevelStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeForPointLookup(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeForSmallDb()"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setForceConsistencyChecks(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setOptimizeFiltersForHits(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompactionPriority(org.rocksdb.CompactionPriority)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompactionStyle(org.rocksdb.CompactionStyle)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxCompactionBytes(long)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevelCompactionDynamicLevelBytes(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setNumLevels(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompressionPerLevel(java.util.List)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setBloomLocality(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setInplaceUpdateSupport(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxWriteBufferNumberToMaintain(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMinWriteBufferNumberToMerge(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelBase(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxCompactionBytes(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevel0FileNumCompactionTrigger(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setDisableAutoCompactions(boolean)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setWriteBufferSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setReportBgIoStats(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setParanoidFileChecks(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxSuccessiveMerges(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxSequentialSkipInIterations(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setHardPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setSoftPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplierAdditional(int[])"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setTargetFileSizeMultiplier(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setTargetFileSizeBase(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevel0StopWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevel0SlowdownWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setArenaBlockSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMemtableHugePageSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMemtablePrefixBloomSizeRatio(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setInplaceUpdateNumLocks(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxWriteBufferNumber(int)"], ["org.rocksdb.CompactionOptionsFIFO", "org.rocksdb.CompactionOptionsFIFO()"], ["org.rocksdb.CompactionOptionsFIFO", "org.rocksdb.CompactionOptionsFIFO.setMaxTableFilesSize(long)"], ["long", "org.rocksdb.CompactionOptionsFIFO.maxTableFilesSize()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setSizeRatio(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.sizeRatio()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setMinMergeWidth(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.minMergeWidth()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setMaxMergeWidth(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.maxMergeWidth()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setMaxSizeAmplificationPercent(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.maxSizeAmplificationPercent()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setCompressionSizePercent(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.compressionSizePercent()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setStopStyle(org.rocksdb.CompactionStopStyle)"], ["org.rocksdb.CompactionStopStyle", "org.rocksdb.CompactionOptionsUniversal.stopStyle()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setAllowTrivialMove(boolean)"], ["boolean", "org.rocksdb.CompactionOptionsUniversal.allowTrivialMove()"], ["org.rocksdb.CompactionPriority[]", "org.rocksdb.CompactionPriority.values()"], ["org.rocksdb.CompactionPriority", "org.rocksdb.CompactionPriority.valueOf(java.lang.String)"], ["byte", "org.rocksdb.CompactionPriority.getValue()"], ["org.rocksdb.CompactionPriority", "org.rocksdb.CompactionPriority.getCompactionPriority(byte)"], ["org.rocksdb.CompactionStopStyle[]", "org.rocksdb.CompactionStopStyle.values()"], ["org.rocksdb.CompactionStopStyle", "org.rocksdb.CompactionStopStyle.valueOf(java.lang.String)"], ["byte", "org.rocksdb.CompactionStopStyle.getValue()"], ["org.rocksdb.CompactionStopStyle", "org.rocksdb.CompactionStopStyle.getCompactionStopStyle(byte)"], ["org.rocksdb.CompactionStyle[]", "org.rocksdb.CompactionStyle.values()"], ["org.rocksdb.CompactionStyle", "org.rocksdb.CompactionStyle.valueOf(java.lang.String)"], ["byte", "org.rocksdb.CompactionStyle.getValue()"], ["org.rocksdb.Comparator", "org.rocksdb.Comparator(org.rocksdb.ComparatorOptions)"], ["org.rocksdb.ComparatorOptions", "org.rocksdb.ComparatorOptions()"], ["boolean", "org.rocksdb.ComparatorOptions.useAdaptiveMutex()"], ["org.rocksdb.ComparatorOptions", "org.rocksdb.ComparatorOptions.setUseAdaptiveMutex(boolean)"], ["org.rocksdb.ComparatorType[]", "org.rocksdb.ComparatorType.values()"], ["org.rocksdb.ComparatorType", "org.rocksdb.ComparatorType.valueOf(java.lang.String)"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions()"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions.setWindowBits(int)"], ["int", "org.rocksdb.CompressionOptions.windowBits()"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions.setLevel(int)"], ["int", "org.rocksdb.CompressionOptions.level()"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions.setStrategy(int)"], ["int", "org.rocksdb.CompressionOptions.strategy()"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions.setMaxDictBytes(int)"], ["int", "org.rocksdb.CompressionOptions.maxDictBytes()"], ["org.rocksdb.CompressionType[]", "org.rocksdb.CompressionType.values()"], ["org.rocksdb.CompressionType", "org.rocksdb.CompressionType.valueOf(java.lang.String)"], ["org.rocksdb.CompressionType", "org.rocksdb.CompressionType.getCompressionType(java.lang.String)"], ["org.rocksdb.CompressionType", "org.rocksdb.CompressionType.getCompressionType(byte)"], ["byte", "org.rocksdb.CompressionType.getValue()"], ["java.lang.String", "org.rocksdb.CompressionType.getLibraryName()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.getDBOptionsFromProps(java.util.Properties)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.optimizeForSmallDb()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setIncreaseParallelism(int)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setCreateIfMissing(boolean)"], ["boolean", "org.rocksdb.DBOptions.createIfMissing()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setCreateMissingColumnFamilies(boolean)"], ["boolean", "org.rocksdb.DBOptions.createMissingColumnFamilies()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setEnv(org.rocksdb.Env)"], ["org.rocksdb.Env", "org.rocksdb.DBOptions.getEnv()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setErrorIfExists(boolean)"], ["boolean", "org.rocksdb.DBOptions.errorIfExists()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setParanoidChecks(boolean)"], ["boolean", "org.rocksdb.DBOptions.paranoidChecks()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setLogger(org.rocksdb.Logger)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.DBOptions.infoLogLevel()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxOpenFiles(int)"], ["int", "org.rocksdb.DBOptions.maxOpenFiles()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxFileOpeningThreads(int)"], ["int", "org.rocksdb.DBOptions.maxFileOpeningThreads()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxTotalWalSize(long)"], ["long", "org.rocksdb.DBOptions.maxTotalWalSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setStatistics(org.rocksdb.Statistics)"], ["org.rocksdb.Statistics", "org.rocksdb.DBOptions.statistics()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setUseFsync(boolean)"], ["boolean", "org.rocksdb.DBOptions.useFsync()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDbPaths(java.util.Collection<org.rocksdb.DbPath>)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDbLogDir(java.lang.String)"], ["java.lang.String", "org.rocksdb.DBOptions.dbLogDir()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalDir(java.lang.String)"], ["java.lang.String", "org.rocksdb.DBOptions.walDir()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDeleteObsoleteFilesPeriodMicros(long)"], ["long", "org.rocksdb.DBOptions.deleteObsoleteFilesPeriodMicros()"], ["void", "org.rocksdb.DBOptions.setBaseBackgroundCompactions(int)"], ["int", "org.rocksdb.DBOptions.baseBackgroundCompactions()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxBackgroundCompactions(int)"], ["int", "org.rocksdb.DBOptions.maxBackgroundCompactions()"], ["void", "org.rocksdb.DBOptions.setMaxSubcompactions(int)"], ["int", "org.rocksdb.DBOptions.maxSubcompactions()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxBackgroundFlushes(int)"], ["int", "org.rocksdb.DBOptions.maxBackgroundFlushes()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxBackgroundJobs(int)"], ["int", "org.rocksdb.DBOptions.maxBackgroundJobs()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxLogFileSize(long)"], ["long", "org.rocksdb.DBOptions.maxLogFileSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setLogFileTimeToRoll(long)"], ["long", "org.rocksdb.DBOptions.logFileTimeToRoll()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setKeepLogFileNum(long)"], ["long", "org.rocksdb.DBOptions.keepLogFileNum()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setRecycleLogFileNum(long)"], ["long", "org.rocksdb.DBOptions.recycleLogFileNum()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxManifestFileSize(long)"], ["long", "org.rocksdb.DBOptions.maxManifestFileSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setTableCacheNumshardbits(int)"], ["int", "org.rocksdb.DBOptions.tableCacheNumshardbits()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalTtlSeconds(long)"], ["long", "org.rocksdb.DBOptions.walTtlSeconds()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalSizeLimitMB(long)"], ["long", "org.rocksdb.DBOptions.walSizeLimitMB()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setManifestPreallocationSize(long)"], ["long", "org.rocksdb.DBOptions.manifestPreallocationSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setUseDirectReads(boolean)"], ["boolean", "org.rocksdb.DBOptions.useDirectReads()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setUseDirectIoForFlushAndCompaction(boolean)"], ["boolean", "org.rocksdb.DBOptions.useDirectIoForFlushAndCompaction()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllowFAllocate(boolean)"], ["boolean", "org.rocksdb.DBOptions.allowFAllocate()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllowMmapReads(boolean)"], ["boolean", "org.rocksdb.DBOptions.allowMmapReads()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllowMmapWrites(boolean)"], ["boolean", "org.rocksdb.DBOptions.allowMmapWrites()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setIsFdCloseOnExec(boolean)"], ["boolean", "org.rocksdb.DBOptions.isFdCloseOnExec()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setStatsDumpPeriodSec(int)"], ["int", "org.rocksdb.DBOptions.statsDumpPeriodSec()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAdviseRandomOnOpen(boolean)"], ["boolean", "org.rocksdb.DBOptions.adviseRandomOnOpen()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDbWriteBufferSize(long)"], ["long", "org.rocksdb.DBOptions.dbWriteBufferSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAccessHintOnCompactionStart(org.rocksdb.AccessHint)"], ["org.rocksdb.AccessHint", "org.rocksdb.DBOptions.accessHintOnCompactionStart()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setNewTableReaderForCompactionInputs(boolean)"], ["boolean", "org.rocksdb.DBOptions.newTableReaderForCompactionInputs()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setCompactionReadaheadSize(long)"], ["long", "org.rocksdb.DBOptions.compactionReadaheadSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setRandomAccessMaxBufferSize(long)"], ["long", "org.rocksdb.DBOptions.randomAccessMaxBufferSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWritableFileMaxBufferSize(long)"], ["long", "org.rocksdb.DBOptions.writableFileMaxBufferSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setUseAdaptiveMutex(boolean)"], ["boolean", "org.rocksdb.DBOptions.useAdaptiveMutex()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setBytesPerSync(long)"], ["long", "org.rocksdb.DBOptions.bytesPerSync()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalBytesPerSync(long)"], ["long", "org.rocksdb.DBOptions.walBytesPerSync()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setEnableThreadTracking(boolean)"], ["boolean", "org.rocksdb.DBOptions.enableThreadTracking()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDelayedWriteRate(long)"], ["long", "org.rocksdb.DBOptions.delayedWriteRate()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllowConcurrentMemtableWrite(boolean)"], ["boolean", "org.rocksdb.DBOptions.allowConcurrentMemtableWrite()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setEnableWriteThreadAdaptiveYield(boolean)"], ["boolean", "org.rocksdb.DBOptions.enableWriteThreadAdaptiveYield()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWriteThreadMaxYieldUsec(long)"], ["long", "org.rocksdb.DBOptions.writeThreadMaxYieldUsec()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWriteThreadSlowYieldUsec(long)"], ["long", "org.rocksdb.DBOptions.writeThreadSlowYieldUsec()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setSkipStatsUpdateOnDbOpen(boolean)"], ["boolean", "org.rocksdb.DBOptions.skipStatsUpdateOnDbOpen()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalRecoveryMode(org.rocksdb.WALRecoveryMode)"], ["org.rocksdb.WALRecoveryMode", "org.rocksdb.DBOptions.walRecoveryMode()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllow2pc(boolean)"], ["boolean", "org.rocksdb.DBOptions.allow2pc()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setRowCache(org.rocksdb.Cache)"], ["org.rocksdb.Cache", "org.rocksdb.DBOptions.rowCache()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setFailIfOptionsFileError(boolean)"], ["boolean", "org.rocksdb.DBOptions.failIfOptionsFileError()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDumpMallocStats(boolean)"], ["boolean", "org.rocksdb.DBOptions.dumpMallocStats()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAvoidFlushDuringRecovery(boolean)"], ["boolean", "org.rocksdb.DBOptions.avoidFlushDuringRecovery()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAvoidFlushDuringShutdown(boolean)"], ["boolean", "org.rocksdb.DBOptions.avoidFlushDuringShutdown()"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAvoidFlushDuringShutdown(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAvoidFlushDuringRecovery(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDumpMallocStats(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setFailIfOptionsFileError(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setRowCache(org.rocksdb.Cache)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllow2pc(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalRecoveryMode(org.rocksdb.WALRecoveryMode)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setSkipStatsUpdateOnDbOpen(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWriteThreadSlowYieldUsec(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWriteThreadMaxYieldUsec(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setEnableWriteThreadAdaptiveYield(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllowConcurrentMemtableWrite(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDelayedWriteRate(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setEnableThreadTracking(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalBytesPerSync(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setBytesPerSync(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setUseAdaptiveMutex(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWritableFileMaxBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setRandomAccessMaxBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setCompactionReadaheadSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setNewTableReaderForCompactionInputs(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAccessHintOnCompactionStart(org.rocksdb.AccessHint)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDbWriteBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAdviseRandomOnOpen(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setStatsDumpPeriodSec(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setIsFdCloseOnExec(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllowMmapWrites(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllowMmapReads(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllowFAllocate(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setUseDirectIoForFlushAndCompaction(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setUseDirectReads(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setManifestPreallocationSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalSizeLimitMB(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalTtlSeconds(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setTableCacheNumshardbits(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxManifestFileSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setRecycleLogFileNum(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setKeepLogFileNum(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setLogFileTimeToRoll(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxLogFileSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxBackgroundJobs(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxBackgroundFlushes(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxBackgroundCompactions(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDeleteObsoleteFilesPeriodMicros(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalDir(java.lang.String)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDbLogDir(java.lang.String)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDbPaths(java.util.Collection)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setUseFsync(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setStatistics(org.rocksdb.Statistics)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxTotalWalSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxFileOpeningThreads(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxOpenFiles(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setLogger(org.rocksdb.Logger)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setParanoidChecks(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setErrorIfExists(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setCreateMissingColumnFamilies(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setCreateIfMissing(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setIncreaseParallelism(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setEnv(org.rocksdb.Env)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.optimizeForSmallDb()"], ["org.rocksdb.DbPath", "org.rocksdb.DbPath(java.nio.file.Path, long)"], ["boolean", "org.rocksdb.DbPath.equals(java.lang.Object)"], ["int", "org.rocksdb.DbPath.hashCode()"], ["org.rocksdb.DirectComparator", "org.rocksdb.DirectComparator(org.rocksdb.ComparatorOptions)"], ["org.rocksdb.DirectSlice", "org.rocksdb.DirectSlice(java.lang.String)"], ["org.rocksdb.DirectSlice", "org.rocksdb.DirectSlice(java.nio.ByteBuffer, int)"], ["org.rocksdb.DirectSlice", "org.rocksdb.DirectSlice(java.nio.ByteBuffer)"], ["byte", "org.rocksdb.DirectSlice.get(int)"], ["void", "org.rocksdb.DirectSlice.clear()"], ["void", "org.rocksdb.DirectSlice.removePrefix(int)"], ["org.rocksdb.EncodingType[]", "org.rocksdb.EncodingType.values()"], ["org.rocksdb.EncodingType", "org.rocksdb.EncodingType.valueOf(java.lang.String)"], ["byte", "org.rocksdb.EncodingType.getValue()"], ["org.rocksdb.Env", "org.rocksdb.Env.getDefault()"], ["org.rocksdb.Env", "org.rocksdb.Env.setBackgroundThreads(int)"], ["org.rocksdb.Env", "org.rocksdb.Env.setBackgroundThreads(int, int)"], ["int", "org.rocksdb.Env.getThreadPoolQueueLen(int)"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseOsBuffer(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useOsBuffer()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseMmapReads(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useMmapReads()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseMmapWrites(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useMmapWrites()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseDirectReads(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useDirectReads()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseDirectWrites(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useDirectWrites()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setAllowFallocate(boolean)"], ["boolean", "org.rocksdb.EnvOptions.allowFallocate()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setSetFdCloexec(boolean)"], ["boolean", "org.rocksdb.EnvOptions.setFdCloexec()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setBytesPerSync(long)"], ["long", "org.rocksdb.EnvOptions.bytesPerSync()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setFallocateWithKeepSize(boolean)"], ["boolean", "org.rocksdb.EnvOptions.fallocateWithKeepSize()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setCompactionReadaheadSize(long)"], ["long", "org.rocksdb.EnvOptions.compactionReadaheadSize()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setRandomAccessMaxBufferSize(long)"], ["long", "org.rocksdb.EnvOptions.randomAccessMaxBufferSize()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setWritableFileMaxBufferSize(long)"], ["long", "org.rocksdb.EnvOptions.writableFileMaxBufferSize()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.RateLimiter", "org.rocksdb.EnvOptions.rateLimiter()"], ["org.rocksdb.FlushOptions", "org.rocksdb.FlushOptions()"], ["org.rocksdb.FlushOptions", "org.rocksdb.FlushOptions.setWaitForFlush(boolean)"], ["boolean", "org.rocksdb.FlushOptions.waitForFlush()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setBucketCount(long)"], ["long", "org.rocksdb.HashLinkedListMemTableConfig.bucketCount()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setHugePageTlbSize(long)"], ["long", "org.rocksdb.HashLinkedListMemTableConfig.hugePageTlbSize()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setBucketEntriesLoggingThreshold(int)"], ["int", "org.rocksdb.HashLinkedListMemTableConfig.bucketEntriesLoggingThreshold()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setIfLogBucketDistWhenFlush(boolean)"], ["boolean", "org.rocksdb.HashLinkedListMemTableConfig.ifLogBucketDistWhenFlush()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setThresholdUseSkiplist(int)"], ["int", "org.rocksdb.HashLinkedListMemTableConfig.thresholdUseSkiplist()"], ["org.rocksdb.HashSkipListMemTableConfig", "org.rocksdb.HashSkipListMemTableConfig()"], ["org.rocksdb.HashSkipListMemTableConfig", "org.rocksdb.HashSkipListMemTableConfig.setBucketCount(long)"], ["long", "org.rocksdb.HashSkipListMemTableConfig.bucketCount()"], ["org.rocksdb.HashSkipListMemTableConfig", "org.rocksdb.HashSkipListMemTableConfig.setHeight(int)"], ["int", "org.rocksdb.HashSkipListMemTableConfig.height()"], ["org.rocksdb.HashSkipListMemTableConfig", "org.rocksdb.HashSkipListMemTableConfig.setBranchingFactor(int)"], ["int", "org.rocksdb.HashSkipListMemTableConfig.branchingFactor()"], ["org.rocksdb.HistogramData", "org.rocksdb.HistogramData(double, double, double, double, double)"], ["double", "org.rocksdb.HistogramData.getMedian()"], ["double", "org.rocksdb.HistogramData.getPercentile95()"], ["double", "org.rocksdb.HistogramData.getPercentile99()"], ["double", "org.rocksdb.HistogramData.getAverage()"], ["double", "org.rocksdb.HistogramData.getStandardDeviation()"], ["org.rocksdb.HistogramType[]", "org.rocksdb.HistogramType.values()"], ["org.rocksdb.HistogramType", "org.rocksdb.HistogramType.valueOf(java.lang.String)"], ["byte", "org.rocksdb.HistogramType.getValue()"], ["org.rocksdb.IndexType[]", "org.rocksdb.IndexType.values()"], ["org.rocksdb.IndexType", "org.rocksdb.IndexType.valueOf(java.lang.String)"], ["byte", "org.rocksdb.IndexType.getValue()"], ["org.rocksdb.InfoLogLevel[]", "org.rocksdb.InfoLogLevel.values()"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.InfoLogLevel.valueOf(java.lang.String)"], ["byte", "org.rocksdb.InfoLogLevel.getValue()"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.InfoLogLevel.getInfoLogLevel(byte)"], ["org.rocksdb.IngestExternalFileOptions", "org.rocksdb.IngestExternalFileOptions()"], ["org.rocksdb.IngestExternalFileOptions", "org.rocksdb.IngestExternalFileOptions(boolean, boolean, boolean, boolean)"], ["boolean", "org.rocksdb.IngestExternalFileOptions.moveFiles()"], ["void", "org.rocksdb.IngestExternalFileOptions.setMoveFiles(boolean)"], ["boolean", "org.rocksdb.IngestExternalFileOptions.snapshotConsistency()"], ["void", "org.rocksdb.IngestExternalFileOptions.setSnapshotConsistency(boolean)"], ["boolean", "org.rocksdb.IngestExternalFileOptions.allowGlobalSeqNo()"], ["void", "org.rocksdb.IngestExternalFileOptions.setAllowGlobalSeqNo(boolean)"], ["boolean", "org.rocksdb.IngestExternalFileOptions.allowBlockingFlush()"], ["void", "org.rocksdb.IngestExternalFileOptions.setAllowBlockingFlush(boolean)"], ["org.rocksdb.LRUCache", "org.rocksdb.LRUCache(long)"], ["org.rocksdb.LRUCache", "org.rocksdb.LRUCache(long, int)"], ["org.rocksdb.LRUCache", "org.rocksdb.LRUCache(long, int, boolean)"], ["org.rocksdb.LRUCache", "org.rocksdb.LRUCache(long, int, boolean, double)"], ["org.rocksdb.Logger", "org.rocksdb.Logger(org.rocksdb.Options)"], ["org.rocksdb.Logger", "org.rocksdb.Logger(org.rocksdb.DBOptions)"], ["void", "org.rocksdb.Logger.setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.Logger.infoLogLevel()"], ["org.rocksdb.MemTableConfig", "org.rocksdb.MemTableConfig()"], ["org.rocksdb.MutableColumnFamilyOptions$CompactionOption[]", "org.rocksdb.MutableColumnFamilyOptions$CompactionOption.values()"], ["org.rocksdb.MutableColumnFamilyOptions$CompactionOption", "org.rocksdb.MutableColumnFamilyOptions$CompactionOption.valueOf(java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType", "org.rocksdb.MutableColumnFamilyOptions$CompactionOption.getValueType()"], ["org.rocksdb.MutableColumnFamilyOptions$MemtableOption[]", "org.rocksdb.MutableColumnFamilyOptions$MemtableOption.values()"], ["org.rocksdb.MutableColumnFamilyOptions$MemtableOption", "org.rocksdb.MutableColumnFamilyOptions$MemtableOption.valueOf(java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType", "org.rocksdb.MutableColumnFamilyOptions$MemtableOption.getValueType()"], ["org.rocksdb.MutableColumnFamilyOptions$MiscOption[]", "org.rocksdb.MutableColumnFamilyOptions$MiscOption.values()"], ["org.rocksdb.MutableColumnFamilyOptions$MiscOption", "org.rocksdb.MutableColumnFamilyOptions$MiscOption.valueOf(java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType", "org.rocksdb.MutableColumnFamilyOptions$MiscOption.getValueType()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder()"], ["org.rocksdb.MutableColumnFamilyOptions", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.build()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.fromString(java.lang.String, java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setWriteBufferSize(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.writeBufferSize()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setArenaBlockSize(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.arenaBlockSize()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMemtablePrefixBloomSizeRatio(double)"], ["double", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.memtablePrefixBloomSizeRatio()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMemtableHugePageSize(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.memtableHugePageSize()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxSuccessiveMerges(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxSuccessiveMerges()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxWriteBufferNumber(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxWriteBufferNumber()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setInplaceUpdateNumLocks(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.inplaceUpdateNumLocks()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setDisableAutoCompactions(boolean)"], ["boolean", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.disableAutoCompactions()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setSoftPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.softPendingCompactionBytesLimit()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setHardPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.hardPendingCompactionBytesLimit()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0FileNumCompactionTrigger(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.level0FileNumCompactionTrigger()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0SlowdownWritesTrigger(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.level0SlowdownWritesTrigger()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0StopWritesTrigger(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.level0StopWritesTrigger()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxCompactionBytes(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxCompactionBytes()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setTargetFileSizeBase(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.targetFileSizeBase()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setTargetFileSizeMultiplier(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.targetFileSizeMultiplier()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelBase(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxBytesForLevelBase()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelMultiplier(double)"], ["double", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxBytesForLevelMultiplier()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelMultiplierAdditional(int[])"], ["int[]", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxBytesForLevelMultiplierAdditional()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxSequentialSkipInIterations(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxSequentialSkipInIterations()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setParanoidFileChecks(boolean)"], ["boolean", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.paranoidFileChecks()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.CompressionType", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.compressionType()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setReportBgIoStats(boolean)"], ["boolean", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.reportBgIoStats()"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelBase(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxCompactionBytes(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0FileNumCompactionTrigger(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setDisableAutoCompactions(boolean)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setWriteBufferSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setReportBgIoStats(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setParanoidFileChecks(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxSuccessiveMerges(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxSequentialSkipInIterations(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setHardPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setSoftPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelMultiplierAdditional(int[])"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setTargetFileSizeMultiplier(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setTargetFileSizeBase(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0StopWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0SlowdownWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setArenaBlockSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMemtableHugePageSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMemtablePrefixBloomSizeRatio(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setInplaceUpdateNumLocks(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxWriteBufferNumber(int)"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType[]", "org.rocksdb.MutableColumnFamilyOptions$ValueType.values()"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType", "org.rocksdb.MutableColumnFamilyOptions$ValueType.valueOf(java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions.builder()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions.parse(java.lang.String)"], ["java.lang.String", "org.rocksdb.MutableColumnFamilyOptions.toString()"], ["org.rocksdb.NativeComparatorWrapper", "org.rocksdb.NativeComparatorWrapper()"], ["java.lang.String", "org.rocksdb.NativeComparatorWrapper.name()"], ["int", "org.rocksdb.NativeComparatorWrapper.compare(org.rocksdb.Slice, org.rocksdb.Slice)"], ["java.lang.String", "org.rocksdb.NativeComparatorWrapper.findShortestSeparator(java.lang.String, org.rocksdb.Slice)"], ["java.lang.String", "org.rocksdb.NativeComparatorWrapper.findShortSuccessor(java.lang.String)"], ["java.lang.String", "org.rocksdb.NativeComparatorWrapper.findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)"], ["int", "org.rocksdb.NativeComparatorWrapper.compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)"], ["org.rocksdb.NativeLibraryLoader", "org.rocksdb.NativeLibraryLoader.getInstance()"], ["synchronized", "org.rocksdb.NativeLibraryLoader.void loadLibrary(java.lang.String)"], ["org.rocksdb.OptimisticTransactionDB", "org.rocksdb.OptimisticTransactionDB.open(org.rocksdb.Options, java.lang.String)"], ["org.rocksdb.OptimisticTransactionDB", "org.rocksdb.OptimisticTransactionDB.open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.OptimisticTransactionOptions)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.OptimisticTransactionOptions, org.rocksdb.Transaction)"], ["org.rocksdb.RocksDB", "org.rocksdb.OptimisticTransactionDB.getBaseDB()"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions)"], ["org.rocksdb.OptimisticTransactionOptions", "org.rocksdb.OptimisticTransactionOptions()"], ["boolean", "org.rocksdb.OptimisticTransactionOptions.isSetSnapshot()"], ["org.rocksdb.OptimisticTransactionOptions", "org.rocksdb.OptimisticTransactionOptions.setSetSnapshot(boolean)"], ["org.rocksdb.OptimisticTransactionOptions", "org.rocksdb.OptimisticTransactionOptions.setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.TransactionalOptions", "org.rocksdb.OptimisticTransactionOptions.setSetSnapshot(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options()"], ["org.rocksdb.Options", "org.rocksdb.Options(org.rocksdb.DBOptions, org.rocksdb.ColumnFamilyOptions)"], ["org.rocksdb.Options", "org.rocksdb.Options.setIncreaseParallelism(int)"], ["org.rocksdb.Options", "org.rocksdb.Options.setCreateIfMissing(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options.setCreateMissingColumnFamilies(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options.setEnv(org.rocksdb.Env)"], ["org.rocksdb.Env", "org.rocksdb.Options.getEnv()"], ["org.rocksdb.Options", "org.rocksdb.Options.prepareForBulkLoad()"], ["boolean", "org.rocksdb.Options.createIfMissing()"], ["boolean", "org.rocksdb.Options.createMissingColumnFamilies()"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeForSmallDb()"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeForPointLookup(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeLevelStyleCompaction()"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeLevelStyleCompaction(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeUniversalStyleCompaction()"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeUniversalStyleCompaction(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setComparator(org.rocksdb.BuiltinComparator)"], ["org.rocksdb.Options", "org.rocksdb.Options.setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.Options", "org.rocksdb.Options.setMergeOperatorName(java.lang.String)"], ["org.rocksdb.Options", "org.rocksdb.Options.setMergeOperator(org.rocksdb.MergeOperator)"], ["org.rocksdb.Options", "org.rocksdb.Options.setWriteBufferSize(long)"], ["long", "org.rocksdb.Options.writeBufferSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxWriteBufferNumber(int)"], ["int", "org.rocksdb.Options.maxWriteBufferNumber()"], ["boolean", "org.rocksdb.Options.errorIfExists()"], ["org.rocksdb.Options", "org.rocksdb.Options.setErrorIfExists(boolean)"], ["boolean", "org.rocksdb.Options.paranoidChecks()"], ["org.rocksdb.Options", "org.rocksdb.Options.setParanoidChecks(boolean)"], ["int", "org.rocksdb.Options.maxOpenFiles()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxFileOpeningThreads(int)"], ["int", "org.rocksdb.Options.maxFileOpeningThreads()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxTotalWalSize(long)"], ["long", "org.rocksdb.Options.maxTotalWalSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxOpenFiles(int)"], ["boolean", "org.rocksdb.Options.useFsync()"], ["org.rocksdb.Options", "org.rocksdb.Options.setUseFsync(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options.setDbPaths(java.util.Collection<org.rocksdb.DbPath>)"], ["java.lang.String", "org.rocksdb.Options.dbLogDir()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDbLogDir(java.lang.String)"], ["java.lang.String", "org.rocksdb.Options.walDir()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalDir(java.lang.String)"], ["long", "org.rocksdb.Options.deleteObsoleteFilesPeriodMicros()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDeleteObsoleteFilesPeriodMicros(long)"], ["int", "org.rocksdb.Options.maxBackgroundCompactions()"], ["org.rocksdb.Options", "org.rocksdb.Options.setStatistics(org.rocksdb.Statistics)"], ["org.rocksdb.Statistics", "org.rocksdb.Options.statistics()"], ["void", "org.rocksdb.Options.setBaseBackgroundCompactions(int)"], ["int", "org.rocksdb.Options.baseBackgroundCompactions()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBackgroundCompactions(int)"], ["void", "org.rocksdb.Options.setMaxSubcompactions(int)"], ["int", "org.rocksdb.Options.maxSubcompactions()"], ["int", "org.rocksdb.Options.maxBackgroundFlushes()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBackgroundFlushes(int)"], ["int", "org.rocksdb.Options.maxBackgroundJobs()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBackgroundJobs(int)"], ["long", "org.rocksdb.Options.maxLogFileSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxLogFileSize(long)"], ["long", "org.rocksdb.Options.logFileTimeToRoll()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLogFileTimeToRoll(long)"], ["long", "org.rocksdb.Options.keepLogFileNum()"], ["org.rocksdb.Options", "org.rocksdb.Options.setKeepLogFileNum(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setRecycleLogFileNum(long)"], ["long", "org.rocksdb.Options.recycleLogFileNum()"], ["long", "org.rocksdb.Options.maxManifestFileSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxManifestFileSize(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxTableFilesSizeFIFO(long)"], ["long", "org.rocksdb.Options.maxTableFilesSizeFIFO()"], ["int", "org.rocksdb.Options.tableCacheNumshardbits()"], ["org.rocksdb.Options", "org.rocksdb.Options.setTableCacheNumshardbits(int)"], ["long", "org.rocksdb.Options.walTtlSeconds()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalTtlSeconds(long)"], ["long", "org.rocksdb.Options.walSizeLimitMB()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalSizeLimitMB(long)"], ["long", "org.rocksdb.Options.manifestPreallocationSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setManifestPreallocationSize(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setUseDirectReads(boolean)"], ["boolean", "org.rocksdb.Options.useDirectReads()"], ["org.rocksdb.Options", "org.rocksdb.Options.setUseDirectIoForFlushAndCompaction(boolean)"], ["boolean", "org.rocksdb.Options.useDirectIoForFlushAndCompaction()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllowFAllocate(boolean)"], ["boolean", "org.rocksdb.Options.allowFAllocate()"], ["boolean", "org.rocksdb.Options.allowMmapReads()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllowMmapReads(boolean)"], ["boolean", "org.rocksdb.Options.allowMmapWrites()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllowMmapWrites(boolean)"], ["boolean", "org.rocksdb.Options.isFdCloseOnExec()"], ["org.rocksdb.Options", "org.rocksdb.Options.setIsFdCloseOnExec(boolean)"], ["int", "org.rocksdb.Options.statsDumpPeriodSec()"], ["org.rocksdb.Options", "org.rocksdb.Options.setStatsDumpPeriodSec(int)"], ["boolean", "org.rocksdb.Options.adviseRandomOnOpen()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAdviseRandomOnOpen(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options.setDbWriteBufferSize(long)"], ["long", "org.rocksdb.Options.dbWriteBufferSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAccessHintOnCompactionStart(org.rocksdb.AccessHint)"], ["org.rocksdb.AccessHint", "org.rocksdb.Options.accessHintOnCompactionStart()"], ["org.rocksdb.Options", "org.rocksdb.Options.setNewTableReaderForCompactionInputs(boolean)"], ["boolean", "org.rocksdb.Options.newTableReaderForCompactionInputs()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionReadaheadSize(long)"], ["long", "org.rocksdb.Options.compactionReadaheadSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setRandomAccessMaxBufferSize(long)"], ["long", "org.rocksdb.Options.randomAccessMaxBufferSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWritableFileMaxBufferSize(long)"], ["long", "org.rocksdb.Options.writableFileMaxBufferSize()"], ["boolean", "org.rocksdb.Options.useAdaptiveMutex()"], ["org.rocksdb.Options", "org.rocksdb.Options.setUseAdaptiveMutex(boolean)"], ["long", "org.rocksdb.Options.bytesPerSync()"], ["org.rocksdb.Options", "org.rocksdb.Options.setBytesPerSync(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalBytesPerSync(long)"], ["long", "org.rocksdb.Options.walBytesPerSync()"], ["org.rocksdb.Options", "org.rocksdb.Options.setEnableThreadTracking(boolean)"], ["boolean", "org.rocksdb.Options.enableThreadTracking()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDelayedWriteRate(long)"], ["long", "org.rocksdb.Options.delayedWriteRate()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllowConcurrentMemtableWrite(boolean)"], ["boolean", "org.rocksdb.Options.allowConcurrentMemtableWrite()"], ["org.rocksdb.Options", "org.rocksdb.Options.setEnableWriteThreadAdaptiveYield(boolean)"], ["boolean", "org.rocksdb.Options.enableWriteThreadAdaptiveYield()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWriteThreadMaxYieldUsec(long)"], ["long", "org.rocksdb.Options.writeThreadMaxYieldUsec()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWriteThreadSlowYieldUsec(long)"], ["long", "org.rocksdb.Options.writeThreadSlowYieldUsec()"], ["org.rocksdb.Options", "org.rocksdb.Options.setSkipStatsUpdateOnDbOpen(boolean)"], ["boolean", "org.rocksdb.Options.skipStatsUpdateOnDbOpen()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalRecoveryMode(org.rocksdb.WALRecoveryMode)"], ["org.rocksdb.WALRecoveryMode", "org.rocksdb.Options.walRecoveryMode()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllow2pc(boolean)"], ["boolean", "org.rocksdb.Options.allow2pc()"], ["org.rocksdb.Options", "org.rocksdb.Options.setRowCache(org.rocksdb.Cache)"], ["org.rocksdb.Cache", "org.rocksdb.Options.rowCache()"], ["org.rocksdb.Options", "org.rocksdb.Options.setFailIfOptionsFileError(boolean)"], ["boolean", "org.rocksdb.Options.failIfOptionsFileError()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDumpMallocStats(boolean)"], ["boolean", "org.rocksdb.Options.dumpMallocStats()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAvoidFlushDuringRecovery(boolean)"], ["boolean", "org.rocksdb.Options.avoidFlushDuringRecovery()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAvoidFlushDuringShutdown(boolean)"], ["boolean", "org.rocksdb.Options.avoidFlushDuringShutdown()"], ["org.rocksdb.MemTableConfig", "org.rocksdb.Options.memTableConfig()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMemTableConfig(org.rocksdb.MemTableConfig)"], ["org.rocksdb.Options", "org.rocksdb.Options.setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.Options", "org.rocksdb.Options.setLogger(org.rocksdb.Logger)"], ["org.rocksdb.Options", "org.rocksdb.Options.setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.Options.infoLogLevel()"], ["java.lang.String", "org.rocksdb.Options.memTableFactoryName()"], ["org.rocksdb.TableFormatConfig", "org.rocksdb.Options.tableFormatConfig()"], ["org.rocksdb.Options", "org.rocksdb.Options.setTableFormatConfig(org.rocksdb.TableFormatConfig)"], ["java.lang.String", "org.rocksdb.Options.tableFactoryName()"], ["org.rocksdb.Options", "org.rocksdb.Options.useFixedLengthPrefixExtractor(int)"], ["org.rocksdb.Options", "org.rocksdb.Options.useCappedPrefixExtractor(int)"], ["org.rocksdb.CompressionType", "org.rocksdb.Options.compressionType()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>)"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.Options", "org.rocksdb.Options.setBottommostCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.CompressionType", "org.rocksdb.Options.bottommostCompressionType()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompressionOptions(org.rocksdb.CompressionOptions)"], ["org.rocksdb.CompressionOptions", "org.rocksdb.Options.compressionOptions()"], ["org.rocksdb.CompactionStyle", "org.rocksdb.Options.compactionStyle()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionStyle(org.rocksdb.CompactionStyle)"], ["int", "org.rocksdb.Options.numLevels()"], ["org.rocksdb.Options", "org.rocksdb.Options.setNumLevels(int)"], ["int", "org.rocksdb.Options.levelZeroFileNumCompactionTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevelZeroFileNumCompactionTrigger(int)"], ["int", "org.rocksdb.Options.levelZeroSlowdownWritesTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevelZeroSlowdownWritesTrigger(int)"], ["int", "org.rocksdb.Options.levelZeroStopWritesTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevelZeroStopWritesTrigger(int)"], ["long", "org.rocksdb.Options.targetFileSizeBase()"], ["org.rocksdb.Options", "org.rocksdb.Options.setTargetFileSizeBase(long)"], ["int", "org.rocksdb.Options.targetFileSizeMultiplier()"], ["org.rocksdb.Options", "org.rocksdb.Options.setTargetFileSizeMultiplier(int)"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBytesForLevelBase(long)"], ["long", "org.rocksdb.Options.maxBytesForLevelBase()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevelCompactionDynamicLevelBytes(boolean)"], ["boolean", "org.rocksdb.Options.levelCompactionDynamicLevelBytes()"], ["double", "org.rocksdb.Options.maxBytesForLevelMultiplier()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBytesForLevelMultiplier(double)"], ["long", "org.rocksdb.Options.maxCompactionBytes()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxCompactionBytes(long)"], ["long", "org.rocksdb.Options.arenaBlockSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setArenaBlockSize(long)"], ["boolean", "org.rocksdb.Options.disableAutoCompactions()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDisableAutoCompactions(boolean)"], ["long", "org.rocksdb.Options.maxSequentialSkipInIterations()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxSequentialSkipInIterations(long)"], ["boolean", "org.rocksdb.Options.inplaceUpdateSupport()"], ["org.rocksdb.Options", "org.rocksdb.Options.setInplaceUpdateSupport(boolean)"], ["long", "org.rocksdb.Options.inplaceUpdateNumLocks()"], ["org.rocksdb.Options", "org.rocksdb.Options.setInplaceUpdateNumLocks(long)"], ["double", "org.rocksdb.Options.memtablePrefixBloomSizeRatio()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMemtablePrefixBloomSizeRatio(double)"], ["int", "org.rocksdb.Options.bloomLocality()"], ["org.rocksdb.Options", "org.rocksdb.Options.setBloomLocality(int)"], ["long", "org.rocksdb.Options.maxSuccessiveMerges()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxSuccessiveMerges(long)"], ["int", "org.rocksdb.Options.minWriteBufferNumberToMerge()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMinWriteBufferNumberToMerge(int)"], ["org.rocksdb.Options", "org.rocksdb.Options.setOptimizeFiltersForHits(boolean)"], ["boolean", "org.rocksdb.Options.optimizeFiltersForHits()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMemtableHugePageSize(long)"], ["long", "org.rocksdb.Options.memtableHugePageSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setSoftPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.Options.softPendingCompactionBytesLimit()"], ["org.rocksdb.Options", "org.rocksdb.Options.setHardPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.Options.hardPendingCompactionBytesLimit()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevel0FileNumCompactionTrigger(int)"], ["int", "org.rocksdb.Options.level0FileNumCompactionTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevel0SlowdownWritesTrigger(int)"], ["int", "org.rocksdb.Options.level0SlowdownWritesTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevel0StopWritesTrigger(int)"], ["int", "org.rocksdb.Options.level0StopWritesTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBytesForLevelMultiplierAdditional(int[])"], ["int[]", "org.rocksdb.Options.maxBytesForLevelMultiplierAdditional()"], ["org.rocksdb.Options", "org.rocksdb.Options.setParanoidFileChecks(boolean)"], ["boolean", "org.rocksdb.Options.paranoidFileChecks()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxWriteBufferNumberToMaintain(int)"], ["int", "org.rocksdb.Options.maxWriteBufferNumberToMaintain()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionPriority(org.rocksdb.CompactionPriority)"], ["org.rocksdb.CompactionPriority", "org.rocksdb.Options.compactionPriority()"], ["org.rocksdb.Options", "org.rocksdb.Options.setReportBgIoStats(boolean)"], ["boolean", "org.rocksdb.Options.reportBgIoStats()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.Options.compactionOptionsUniversal()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)"], ["org.rocksdb.CompactionOptionsFIFO", "org.rocksdb.Options.compactionOptionsFIFO()"], ["org.rocksdb.Options", "org.rocksdb.Options.setForceConsistencyChecks(boolean)"], ["boolean", "org.rocksdb.Options.forceConsistencyChecks()"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAvoidFlushDuringShutdown(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAvoidFlushDuringRecovery(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDumpMallocStats(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setFailIfOptionsFileError(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setRowCache(org.rocksdb.Cache)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllow2pc(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalRecoveryMode(org.rocksdb.WALRecoveryMode)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setSkipStatsUpdateOnDbOpen(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWriteThreadSlowYieldUsec(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWriteThreadMaxYieldUsec(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setEnableWriteThreadAdaptiveYield(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllowConcurrentMemtableWrite(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDelayedWriteRate(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setEnableThreadTracking(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalBytesPerSync(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setBytesPerSync(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setUseAdaptiveMutex(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWritableFileMaxBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setRandomAccessMaxBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setCompactionReadaheadSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setNewTableReaderForCompactionInputs(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAccessHintOnCompactionStart(org.rocksdb.AccessHint)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDbWriteBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAdviseRandomOnOpen(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setStatsDumpPeriodSec(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setIsFdCloseOnExec(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllowMmapWrites(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllowMmapReads(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllowFAllocate(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setUseDirectIoForFlushAndCompaction(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setUseDirectReads(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setManifestPreallocationSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalSizeLimitMB(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalTtlSeconds(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setTableCacheNumshardbits(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxManifestFileSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setRecycleLogFileNum(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setKeepLogFileNum(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setLogFileTimeToRoll(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxLogFileSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxBackgroundJobs(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxBackgroundFlushes(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxBackgroundCompactions(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDeleteObsoleteFilesPeriodMicros(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalDir(java.lang.String)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDbLogDir(java.lang.String)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDbPaths(java.util.Collection)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setUseFsync(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setStatistics(org.rocksdb.Statistics)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxTotalWalSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxFileOpeningThreads(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxOpenFiles(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setLogger(org.rocksdb.Logger)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setParanoidChecks(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setErrorIfExists(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setCreateMissingColumnFamilies(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setCreateIfMissing(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setIncreaseParallelism(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setEnv(org.rocksdb.Env)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.optimizeForSmallDb()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompressionOptions(org.rocksdb.CompressionOptions)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setBottommostCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setTableFormatConfig(org.rocksdb.TableFormatConfig)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMemTableConfig(org.rocksdb.MemTableConfig)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxTableFilesSizeFIFO(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevelZeroStopWritesTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevelZeroSlowdownWritesTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevelZeroFileNumCompactionTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.useCappedPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.useFixedLengthPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMergeOperator(org.rocksdb.MergeOperator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMergeOperatorName(java.lang.String)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setComparator(org.rocksdb.AbstractComparator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setComparator(org.rocksdb.BuiltinComparator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeUniversalStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeUniversalStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeLevelStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeLevelStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeForPointLookup(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeForSmallDb()"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setForceConsistencyChecks(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setOptimizeFiltersForHits(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompactionPriority(org.rocksdb.CompactionPriority)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompactionStyle(org.rocksdb.CompactionStyle)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxCompactionBytes(long)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevelCompactionDynamicLevelBytes(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setNumLevels(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompressionPerLevel(java.util.List)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setBloomLocality(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setInplaceUpdateSupport(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxWriteBufferNumberToMaintain(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setMinWriteBufferNumberToMerge(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxBytesForLevelBase(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxCompactionBytes(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevel0FileNumCompactionTrigger(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setDisableAutoCompactions(boolean)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setWriteBufferSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setReportBgIoStats(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setParanoidFileChecks(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxSuccessiveMerges(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxSequentialSkipInIterations(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setHardPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setSoftPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxBytesForLevelMultiplierAdditional(int[])"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setTargetFileSizeMultiplier(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setTargetFileSizeBase(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevel0StopWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevel0SlowdownWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setArenaBlockSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMemtableHugePageSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMemtablePrefixBloomSizeRatio(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setInplaceUpdateNumLocks(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxWriteBufferNumber(int)"], ["void", "org.rocksdb.OptionsUtil.loadLatestOptions(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>)"], ["void", "org.rocksdb.OptionsUtil.loadLatestOptions(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, boolean)"], ["void", "org.rocksdb.OptionsUtil.loadOptionsFromFile(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>)"], ["void", "org.rocksdb.OptionsUtil.loadOptionsFromFile(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, boolean)"], ["java.lang.String", "org.rocksdb.OptionsUtil.getLatestOptionsFileName(java.lang.String, org.rocksdb.Env)"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setKeySize(int)"], ["int", "org.rocksdb.PlainTableConfig.keySize()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setBloomBitsPerKey(int)"], ["int", "org.rocksdb.PlainTableConfig.bloomBitsPerKey()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setHashTableRatio(double)"], ["double", "org.rocksdb.PlainTableConfig.hashTableRatio()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setIndexSparseness(int)"], ["long", "org.rocksdb.PlainTableConfig.indexSparseness()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setHugePageTlbSize(int)"], ["int", "org.rocksdb.PlainTableConfig.hugePageTlbSize()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setEncodingType(org.rocksdb.EncodingType)"], ["org.rocksdb.EncodingType", "org.rocksdb.PlainTableConfig.encodingType()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setFullScanMode(boolean)"], ["boolean", "org.rocksdb.PlainTableConfig.fullScanMode()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setStoreIndexInFile(boolean)"], ["boolean", "org.rocksdb.PlainTableConfig.storeIndexInFile()"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long)"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long, long)"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long, long, int)"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long, long, int, org.rocksdb.RateLimiterMode)"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long, long, int, org.rocksdb.RateLimiterMode, boolean)"], ["void", "org.rocksdb.RateLimiter.setBytesPerSecond(long)"], ["long", "org.rocksdb.RateLimiter.getBytesPerSecond()"], ["void", "org.rocksdb.RateLimiter.request(long)"], ["long", "org.rocksdb.RateLimiter.getSingleBurstBytes()"], ["long", "org.rocksdb.RateLimiter.getTotalBytesThrough()"], ["long", "org.rocksdb.RateLimiter.getTotalRequests()"], ["org.rocksdb.RateLimiterMode[]", "org.rocksdb.RateLimiterMode.values()"], ["org.rocksdb.RateLimiterMode", "org.rocksdb.RateLimiterMode.valueOf(java.lang.String)"], ["byte", "org.rocksdb.RateLimiterMode.getValue()"], ["org.rocksdb.RateLimiterMode", "org.rocksdb.RateLimiterMode.getRateLimiterMode(byte)"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions(org.rocksdb.ReadOptions)"], ["boolean", "org.rocksdb.ReadOptions.verifyChecksums()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setVerifyChecksums(boolean)"], ["boolean", "org.rocksdb.ReadOptions.fillCache()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setFillCache(boolean)"], ["org.rocksdb.Snapshot", "org.rocksdb.ReadOptions.snapshot()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setSnapshot(org.rocksdb.Snapshot)"], ["org.rocksdb.ReadTier", "org.rocksdb.ReadOptions.readTier()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setReadTier(org.rocksdb.ReadTier)"], ["boolean", "org.rocksdb.ReadOptions.tailing()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setTailing(boolean)"], ["boolean", "org.rocksdb.ReadOptions.managed()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setManaged(boolean)"], ["boolean", "org.rocksdb.ReadOptions.totalOrderSeek()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setTotalOrderSeek(boolean)"], ["boolean", "org.rocksdb.ReadOptions.prefixSameAsStart()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setPrefixSameAsStart(boolean)"], ["boolean", "org.rocksdb.ReadOptions.pinData()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setPinData(boolean)"], ["boolean", "org.rocksdb.ReadOptions.backgroundPurgeOnIteratorCleanup()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setBackgroundPurgeOnIteratorCleanup(boolean)"], ["long", "org.rocksdb.ReadOptions.readaheadSize()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setReadaheadSize(long)"], ["boolean", "org.rocksdb.ReadOptions.ignoreRangeDeletions()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setIgnoreRangeDeletions(boolean)"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setIterateUpperBound(org.rocksdb.Slice)"], ["org.rocksdb.Slice", "org.rocksdb.ReadOptions.iterateUpperBound()"], ["org.rocksdb.ReadTier[]", "org.rocksdb.ReadTier.values()"], ["org.rocksdb.ReadTier", "org.rocksdb.ReadTier.valueOf(java.lang.String)"], ["byte", "org.rocksdb.ReadTier.getValue()"], ["org.rocksdb.ReadTier", "org.rocksdb.ReadTier.getReadTier(byte)"], ["org.rocksdb.RemoveEmptyValueCompactionFilter", "org.rocksdb.RemoveEmptyValueCompactionFilter()"], ["org.rocksdb.RestoreOptions", "org.rocksdb.RestoreOptions(boolean)"], ["org.rocksdb.RocksDB$LibraryState[]", "org.rocksdb.RocksDB$LibraryState.values()"], ["org.rocksdb.RocksDB$LibraryState", "org.rocksdb.RocksDB$LibraryState.valueOf(java.lang.String)"], ["void", "org.rocksdb.RocksDB.loadLibrary()"], ["void", "org.rocksdb.RocksDB.loadLibrary(java.util.List<java.lang.String>)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.open(java.lang.String)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.open(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.open(org.rocksdb.Options, java.lang.String)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.openReadOnly(java.lang.String)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.openReadOnly(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.openReadOnly(org.rocksdb.Options, java.lang.String)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.openReadOnly(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)"], ["void", "org.rocksdb.RocksDB.put(byte[], byte[])"], ["void", "org.rocksdb.RocksDB.put(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.RocksDB.put(org.rocksdb.WriteOptions, byte[], byte[])"], ["void", "org.rocksdb.RocksDB.put(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[])"], ["boolean", "org.rocksdb.RocksDB.keyMayExist(byte[], java.lang.StringBuilder)"], ["boolean", "org.rocksdb.RocksDB.keyMayExist(org.rocksdb.ColumnFamilyHandle, byte[], java.lang.StringBuilder)"], ["boolean", "org.rocksdb.RocksDB.keyMayExist(org.rocksdb.ReadOptions, byte[], java.lang.StringBuilder)"], ["boolean", "org.rocksdb.RocksDB.keyMayExist(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle, byte[], java.lang.StringBuilder)"], ["void", "org.rocksdb.RocksDB.write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatch)"], ["void", "org.rocksdb.RocksDB.write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatchWithIndex)"], ["void", "org.rocksdb.RocksDB.merge(byte[], byte[])"], ["void", "org.rocksdb.RocksDB.merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.RocksDB.merge(org.rocksdb.WriteOptions, byte[], byte[])"], ["void", "org.rocksdb.RocksDB.merge(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[])"], ["int", "org.rocksdb.RocksDB.get(byte[], byte[])"], ["int", "org.rocksdb.RocksDB.get(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["int", "org.rocksdb.RocksDB.get(org.rocksdb.ReadOptions, byte[], byte[])"], ["int", "org.rocksdb.RocksDB.get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], byte[])"], ["byte[]", "org.rocksdb.RocksDB.get(byte[])"], ["byte[]", "org.rocksdb.RocksDB.get(org.rocksdb.ColumnFamilyHandle, byte[])"], ["byte[]", "org.rocksdb.RocksDB.get(org.rocksdb.ReadOptions, byte[])"], ["byte[]", "org.rocksdb.RocksDB.get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[])"], ["java.util.Map<byte[], byte[]>", "org.rocksdb.RocksDB.multiGet(java.util.List<byte[]>)"], ["java.util.Map<byte[], byte[]>", "org.rocksdb.RocksDB.multiGet(java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>)"], ["java.util.Map<byte[], byte[]>", "org.rocksdb.RocksDB.multiGet(org.rocksdb.ReadOptions, java.util.List<byte[]>)"], ["java.util.Map<byte[], byte[]>", "org.rocksdb.RocksDB.multiGet(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>)"], ["void", "org.rocksdb.RocksDB.remove(byte[])"], ["void", "org.rocksdb.RocksDB.delete(byte[])"], ["void", "org.rocksdb.RocksDB.remove(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.RocksDB.delete(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.RocksDB.remove(org.rocksdb.WriteOptions, byte[])"], ["void", "org.rocksdb.RocksDB.delete(org.rocksdb.WriteOptions, byte[])"], ["void", "org.rocksdb.RocksDB.remove(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[])"], ["void", "org.rocksdb.RocksDB.delete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[])"], ["void", "org.rocksdb.RocksDB.singleDelete(byte[])"], ["void", "org.rocksdb.RocksDB.singleDelete(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.RocksDB.singleDelete(org.rocksdb.WriteOptions, byte[])"], ["void", "org.rocksdb.RocksDB.singleDelete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[])"], ["java.lang.String", "org.rocksdb.RocksDB.getProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String)"], ["void", "org.rocksdb.RocksDB.deleteRange(byte[], byte[])"], ["void", "org.rocksdb.RocksDB.deleteRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.RocksDB.deleteRange(org.rocksdb.WriteOptions, byte[], byte[])"], ["void", "org.rocksdb.RocksDB.deleteRange(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[])"], ["java.lang.String", "org.rocksdb.RocksDB.getProperty(java.lang.String)"], ["long", "org.rocksdb.RocksDB.getLongProperty(java.lang.String)"], ["long", "org.rocksdb.RocksDB.getLongProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String)"], ["org.rocksdb.RocksIterator", "org.rocksdb.RocksDB.newIterator()"], ["org.rocksdb.RocksIterator", "org.rocksdb.RocksDB.newIterator(org.rocksdb.ReadOptions)"], ["org.rocksdb.Snapshot", "org.rocksdb.RocksDB.getSnapshot()"], ["void", "org.rocksdb.RocksDB.releaseSnapshot(org.rocksdb.Snapshot)"], ["org.rocksdb.RocksIterator", "org.rocksdb.RocksDB.newIterator(org.rocksdb.ColumnFamilyHandle)"], ["org.rocksdb.RocksIterator", "org.rocksdb.RocksDB.newIterator(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions)"], ["org.rocksdb.ColumnFamilyHandle", "org.rocksdb.RocksDB.getDefaultColumnFamily()"], ["org.rocksdb.ColumnFamilyHandle", "org.rocksdb.RocksDB.createColumnFamily(org.rocksdb.ColumnFamilyDescriptor)"], ["void", "org.rocksdb.RocksDB.dropColumnFamily(org.rocksdb.ColumnFamilyHandle)"], ["void", "org.rocksdb.RocksDB.flush(org.rocksdb.FlushOptions)"], ["void", "org.rocksdb.RocksDB.flush(org.rocksdb.FlushOptions, org.rocksdb.ColumnFamilyHandle)"], ["void", "org.rocksdb.RocksDB.compactRange()"], ["void", "org.rocksdb.RocksDB.compactRange(byte[], byte[])"], ["void", "org.rocksdb.RocksDB.compactRange(boolean, int, int)"], ["void", "org.rocksdb.RocksDB.compactRange(byte[], byte[], boolean, int, int)"], ["void", "org.rocksdb.RocksDB.compactRange(org.rocksdb.ColumnFamilyHandle)"], ["void", "org.rocksdb.RocksDB.compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.RocksDB.compactRange(org.rocksdb.ColumnFamilyHandle, boolean, int, int)"], ["void", "org.rocksdb.RocksDB.compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[], boolean, int, int)"], ["void", "org.rocksdb.RocksDB.pauseBackgroundWork()"], ["void", "org.rocksdb.RocksDB.continueBackgroundWork()"], ["long", "org.rocksdb.RocksDB.getLatestSequenceNumber()"], ["void", "org.rocksdb.RocksDB.disableFileDeletions()"], ["void", "org.rocksdb.RocksDB.enableFileDeletions(boolean)"], ["org.rocksdb.TransactionLogIterator", "org.rocksdb.RocksDB.getUpdatesSince(long)"], ["void", "org.rocksdb.RocksDB.setOptions(org.rocksdb.ColumnFamilyHandle, org.rocksdb.MutableColumnFamilyOptions)"], ["void", "org.rocksdb.RocksDB.ingestExternalFile(java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions)"], ["void", "org.rocksdb.RocksDB.ingestExternalFile(org.rocksdb.ColumnFamilyHandle, java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions)"], ["void", "org.rocksdb.RocksDB.destroyDB(java.lang.String, org.rocksdb.Options)"], ["org.rocksdb.RocksDBException", "org.rocksdb.RocksDBException(java.lang.String)"], ["org.rocksdb.RocksDBException", "org.rocksdb.RocksDBException(java.lang.String, org.rocksdb.Status)"], ["org.rocksdb.RocksDBException", "org.rocksdb.RocksDBException(org.rocksdb.Status)"], ["org.rocksdb.Status", "org.rocksdb.RocksDBException.getStatus()"], ["byte[]", "org.rocksdb.RocksIterator.key()"], ["byte[]", "org.rocksdb.RocksIterator.value()"], ["org.rocksdb.RocksMemEnv", "org.rocksdb.RocksMemEnv()"], ["synchronized", "org.rocksdb.RocksMutableObject.void resetNativeHandle(long, boolean)"], ["synchronized", "org.rocksdb.RocksMutableObject.void setNativeHandle(long, boolean)"], ["synchronized", "org.rocksdb.RocksMutableObject.void close()"], ["org.rocksdb.SkipListMemTableConfig", "org.rocksdb.SkipListMemTableConfig()"], ["org.rocksdb.SkipListMemTableConfig", "org.rocksdb.SkipListMemTableConfig.setLookahead(long)"], ["long", "org.rocksdb.SkipListMemTableConfig.lookahead()"], ["org.rocksdb.Slice", "org.rocksdb.Slice(java.lang.String)"], ["org.rocksdb.Slice", "org.rocksdb.Slice(byte[], int)"], ["org.rocksdb.Slice", "org.rocksdb.Slice(byte[])"], ["void", "org.rocksdb.Slice.clear()"], ["void", "org.rocksdb.Slice.removePrefix(int)"], ["long", "org.rocksdb.Snapshot.getSequenceNumber()"], ["org.rocksdb.SstFileWriter", "org.rocksdb.SstFileWriter(org.rocksdb.EnvOptions, org.rocksdb.Options, org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.SstFileWriter", "org.rocksdb.SstFileWriter(org.rocksdb.EnvOptions, org.rocksdb.Options)"], ["void", "org.rocksdb.SstFileWriter.open(java.lang.String)"], ["void", "org.rocksdb.SstFileWriter.add(org.rocksdb.Slice, org.rocksdb.Slice)"], ["void", "org.rocksdb.SstFileWriter.add(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)"], ["void", "org.rocksdb.SstFileWriter.put(org.rocksdb.Slice, org.rocksdb.Slice)"], ["void", "org.rocksdb.SstFileWriter.put(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)"], ["void", "org.rocksdb.SstFileWriter.put(byte[], byte[])"], ["void", "org.rocksdb.SstFileWriter.merge(org.rocksdb.Slice, org.rocksdb.Slice)"], ["void", "org.rocksdb.SstFileWriter.merge(byte[], byte[])"], ["void", "org.rocksdb.SstFileWriter.merge(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)"], ["void", "org.rocksdb.SstFileWriter.delete(org.rocksdb.Slice)"], ["void", "org.rocksdb.SstFileWriter.delete(org.rocksdb.DirectSlice)"], ["void", "org.rocksdb.SstFileWriter.delete(byte[])"], ["void", "org.rocksdb.SstFileWriter.finish()"], ["org.rocksdb.Statistics", "org.rocksdb.Statistics()"], ["org.rocksdb.Statistics", "org.rocksdb.Statistics(org.rocksdb.Statistics)"], ["org.rocksdb.Statistics", "org.rocksdb.Statistics(java.util.EnumSet<org.rocksdb.HistogramType>)"], ["org.rocksdb.Statistics", "org.rocksdb.Statistics(java.util.EnumSet<org.rocksdb.HistogramType>, org.rocksdb.Statistics)"], ["org.rocksdb.StatsLevel", "org.rocksdb.Statistics.statsLevel()"], ["void", "org.rocksdb.Statistics.setStatsLevel(org.rocksdb.StatsLevel)"], ["long", "org.rocksdb.Statistics.getTickerCount(org.rocksdb.TickerType)"], ["long", "org.rocksdb.Statistics.getAndResetTickerCount(org.rocksdb.TickerType)"], ["org.rocksdb.HistogramData", "org.rocksdb.Statistics.getHistogramData(org.rocksdb.HistogramType)"], ["java.lang.String", "org.rocksdb.Statistics.getHistogramString(org.rocksdb.HistogramType)"], ["void", "org.rocksdb.Statistics.reset()"], ["java.lang.String", "org.rocksdb.Statistics.toString()"], ["void", "org.rocksdb.StatisticsCollector$1.run()"], ["org.rocksdb.StatisticsCollector", "org.rocksdb.StatisticsCollector(java.util.List<org.rocksdb.StatsCollectorInput>, int)"], ["void", "org.rocksdb.StatisticsCollector.start()"], ["void", "org.rocksdb.StatisticsCollector.shutDown(int)"], ["org.rocksdb.StatsCollectorInput", "org.rocksdb.StatsCollectorInput(org.rocksdb.Statistics, org.rocksdb.StatisticsCollectorCallback)"], ["org.rocksdb.Statistics", "org.rocksdb.StatsCollectorInput.getStatistics()"], ["org.rocksdb.StatisticsCollectorCallback", "org.rocksdb.StatsCollectorInput.getCallback()"], ["org.rocksdb.StatsLevel[]", "org.rocksdb.StatsLevel.values()"], ["org.rocksdb.StatsLevel", "org.rocksdb.StatsLevel.valueOf(java.lang.String)"], ["byte", "org.rocksdb.StatsLevel.getValue()"], ["org.rocksdb.StatsLevel", "org.rocksdb.StatsLevel.getStatsLevel(byte)"], ["org.rocksdb.Status$Code[]", "org.rocksdb.Status$Code.values()"], ["org.rocksdb.Status$Code", "org.rocksdb.Status$Code.valueOf(java.lang.String)"], ["org.rocksdb.Status$Code", "org.rocksdb.Status$Code.getCode(byte)"], ["byte", "org.rocksdb.Status$Code.getValue()"], ["org.rocksdb.Status$SubCode[]", "org.rocksdb.Status$SubCode.values()"], ["org.rocksdb.Status$SubCode", "org.rocksdb.Status$SubCode.valueOf(java.lang.String)"], ["org.rocksdb.Status$SubCode", "org.rocksdb.Status$SubCode.getSubCode(byte)"], ["byte", "org.rocksdb.Status$SubCode.getValue()"], ["org.rocksdb.Status", "org.rocksdb.Status(org.rocksdb.Status$Code, org.rocksdb.Status$SubCode, java.lang.String)"], ["org.rocksdb.Status$Code", "org.rocksdb.Status.getCode()"], ["org.rocksdb.Status$SubCode", "org.rocksdb.Status.getSubCode()"], ["java.lang.String", "org.rocksdb.Status.getState()"], ["java.lang.String", "org.rocksdb.Status.getCodeString()"], ["org.rocksdb.StringAppendOperator", "org.rocksdb.StringAppendOperator()"], ["org.rocksdb.TableFormatConfig", "org.rocksdb.TableFormatConfig()"], ["org.rocksdb.TickerType[]", "org.rocksdb.TickerType.values()"], ["org.rocksdb.TickerType", "org.rocksdb.TickerType.valueOf(java.lang.String)"], ["byte", "org.rocksdb.TickerType.getValue()"], ["org.rocksdb.Transaction$TransactionState[]", "org.rocksdb.Transaction$TransactionState.values()"], ["org.rocksdb.Transaction$TransactionState", "org.rocksdb.Transaction$TransactionState.valueOf(java.lang.String)"], ["org.rocksdb.Transaction$TransactionState", "org.rocksdb.Transaction$TransactionState.getTransactionState(byte)"], ["long", "org.rocksdb.Transaction$WaitingTransactions.getColumnFamilyId()"], ["java.lang.String", "org.rocksdb.Transaction$WaitingTransactions.getKey()"], ["long[]", "org.rocksdb.Transaction$WaitingTransactions.getTransactionIds()"], ["void", "org.rocksdb.Transaction.setSnapshot()"], ["void", "org.rocksdb.Transaction.setSnapshotOnNextOperation()"], ["void", "org.rocksdb.Transaction.setSnapshotOnNextOperation(org.rocksdb.AbstractTransactionNotifier)"], ["org.rocksdb.Snapshot", "org.rocksdb.Transaction.getSnapshot()"], ["void", "org.rocksdb.Transaction.clearSnapshot()"], ["void", "org.rocksdb.Transaction.commit()"], ["void", "org.rocksdb.Transaction.rollback()"], ["void", "org.rocksdb.Transaction.setSavePoint()"], ["void", "org.rocksdb.Transaction.rollbackToSavePoint()"], ["byte[]", "org.rocksdb.Transaction.get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[])"], ["byte[]", "org.rocksdb.Transaction.get(org.rocksdb.ReadOptions, byte[])"], ["byte[][]", "org.rocksdb.Transaction.multiGet(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, byte[][])"], ["byte[][]", "org.rocksdb.Transaction.multiGet(org.rocksdb.ReadOptions, byte[][])"], ["byte[]", "org.rocksdb.Transaction.getForUpdate(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle, byte[], boolean)"], ["byte[]", "org.rocksdb.Transaction.getForUpdate(org.rocksdb.ReadOptions, byte[], boolean)"], ["byte[][]", "org.rocksdb.Transaction.multiGetForUpdate(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, byte[][])"], ["byte[][]", "org.rocksdb.Transaction.multiGetForUpdate(org.rocksdb.ReadOptions, byte[][])"], ["org.rocksdb.RocksIterator", "org.rocksdb.Transaction.getIterator(org.rocksdb.ReadOptions)"], ["org.rocksdb.RocksIterator", "org.rocksdb.Transaction.getIterator(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle)"], ["void", "org.rocksdb.Transaction.put(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.Transaction.put(byte[], byte[])"], ["void", "org.rocksdb.Transaction.put(org.rocksdb.ColumnFamilyHandle, byte[][], byte[][])"], ["void", "org.rocksdb.Transaction.put(byte[][], byte[][])"], ["void", "org.rocksdb.Transaction.merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.Transaction.merge(byte[], byte[])"], ["void", "org.rocksdb.Transaction.delete(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.Transaction.delete(byte[])"], ["void", "org.rocksdb.Transaction.delete(org.rocksdb.ColumnFamilyHandle, byte[][])"], ["void", "org.rocksdb.Transaction.delete(byte[][])"], ["void", "org.rocksdb.Transaction.singleDelete(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.Transaction.singleDelete(byte[])"], ["void", "org.rocksdb.Transaction.singleDelete(org.rocksdb.ColumnFamilyHandle, byte[][])"], ["void", "org.rocksdb.Transaction.singleDelete(byte[][])"], ["void", "org.rocksdb.Transaction.putUntracked(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.Transaction.putUntracked(byte[], byte[])"], ["void", "org.rocksdb.Transaction.putUntracked(org.rocksdb.ColumnFamilyHandle, byte[][], byte[][])"], ["void", "org.rocksdb.Transaction.putUntracked(byte[][], byte[][])"], ["void", "org.rocksdb.Transaction.mergeUntracked(org.rocksdb.ColumnFamilyHandle, byte[], byte[])"], ["void", "org.rocksdb.Transaction.mergeUntracked(byte[], byte[])"], ["void", "org.rocksdb.Transaction.deleteUntracked(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.Transaction.deleteUntracked(byte[])"], ["void", "org.rocksdb.Transaction.deleteUntracked(org.rocksdb.ColumnFamilyHandle, byte[][])"], ["void", "org.rocksdb.Transaction.deleteUntracked(byte[][])"], ["void", "org.rocksdb.Transaction.putLogData(byte[])"], ["void", "org.rocksdb.Transaction.disableIndexing()"], ["void", "org.rocksdb.Transaction.enableIndexing()"], ["long", "org.rocksdb.Transaction.getNumKeys()"], ["long", "org.rocksdb.Transaction.getNumPuts()"], ["long", "org.rocksdb.Transaction.getNumDeletes()"], ["long", "org.rocksdb.Transaction.getNumMerges()"], ["long", "org.rocksdb.Transaction.getElapsedTime()"], ["org.rocksdb.WriteBatchWithIndex", "org.rocksdb.Transaction.getWriteBatch()"], ["void", "org.rocksdb.Transaction.setLockTimeout(long)"], ["org.rocksdb.WriteOptions", "org.rocksdb.Transaction.getWriteOptions()"], ["void", "org.rocksdb.Transaction.setWriteOptions(org.rocksdb.WriteOptions)"], ["void", "org.rocksdb.Transaction.undoGetForUpdate(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.Transaction.undoGetForUpdate(byte[])"], ["void", "org.rocksdb.Transaction.rebuildFromWriteBatch(org.rocksdb.WriteBatch)"], ["org.rocksdb.WriteBatch", "org.rocksdb.Transaction.getCommitTimeWriteBatch()"], ["void", "org.rocksdb.Transaction.setLogNumber(long)"], ["long", "org.rocksdb.Transaction.getLogNumber()"], ["void", "org.rocksdb.Transaction.setName(java.lang.String)"], ["java.lang.String", "org.rocksdb.Transaction.getName()"], ["long", "org.rocksdb.Transaction.getID()"], ["boolean", "org.rocksdb.Transaction.isDeadlockDetect()"], ["org.rocksdb.Transaction$WaitingTransactions", "org.rocksdb.Transaction.getWaitingTxns()"], ["org.rocksdb.Transaction$TransactionState", "org.rocksdb.Transaction.getState()"], ["long", "org.rocksdb.Transaction.getId()"], ["long", "org.rocksdb.TransactionDB$DeadlockInfo.getTransactionID()"], ["long", "org.rocksdb.TransactionDB$DeadlockInfo.getColumnFamilyId()"], ["java.lang.String", "org.rocksdb.TransactionDB$DeadlockInfo.getWaitingKey()"], ["boolean", "org.rocksdb.TransactionDB$DeadlockInfo.isExclusive()"], ["org.rocksdb.TransactionDB$DeadlockPath", "org.rocksdb.TransactionDB$DeadlockPath(org.rocksdb.TransactionDB$DeadlockInfo[], boolean)"], ["boolean", "org.rocksdb.TransactionDB$DeadlockPath.isEmpty()"], ["org.rocksdb.TransactionDB$KeyLockInfo", "org.rocksdb.TransactionDB$KeyLockInfo(java.lang.String, long[], boolean)"], ["java.lang.String", "org.rocksdb.TransactionDB$KeyLockInfo.getKey()"], ["long[]", "org.rocksdb.TransactionDB$KeyLockInfo.getTransactionIDs()"], ["boolean", "org.rocksdb.TransactionDB$KeyLockInfo.isExclusive()"], ["org.rocksdb.TransactionDB", "org.rocksdb.TransactionDB.open(org.rocksdb.Options, org.rocksdb.TransactionDBOptions, java.lang.String)"], ["org.rocksdb.TransactionDB", "org.rocksdb.TransactionDB.open(org.rocksdb.DBOptions, org.rocksdb.TransactionDBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionOptions)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.getTransactionByName(java.lang.String)"], ["java.util.Map<java.lang.Long, org.rocksdb.TransactionDB$KeyLockInfo>", "org.rocksdb.TransactionDB.getLockStatusData()"], ["org.rocksdb.TransactionDB$DeadlockPath[]", "org.rocksdb.TransactionDB.getDeadlockInfoBuffer()"], ["void", "org.rocksdb.TransactionDB.setDeadlockInfoBufferSize(int)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions)"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions()"], ["long", "org.rocksdb.TransactionDBOptions.getMaxNumLocks()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setMaxNumLocks(long)"], ["long", "org.rocksdb.TransactionDBOptions.getNumStripes()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setNumStripes(long)"], ["long", "org.rocksdb.TransactionDBOptions.getTransactionLockTimeout()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setTransactionLockTimeout(long)"], ["long", "org.rocksdb.TransactionDBOptions.getDefaultLockTimeout()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setDefaultLockTimeout(long)"], ["org.rocksdb.TxnDBWritePolicy", "org.rocksdb.TransactionDBOptions.getWritePolicy()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setWritePolicy(org.rocksdb.TxnDBWritePolicy)"], ["org.rocksdb.TransactionLogIterator$BatchResult", "org.rocksdb.TransactionLogIterator$BatchResult(long, long)"], ["long", "org.rocksdb.TransactionLogIterator$BatchResult.sequenceNumber()"], ["org.rocksdb.WriteBatch", "org.rocksdb.TransactionLogIterator$BatchResult.writeBatch()"], ["boolean", "org.rocksdb.TransactionLogIterator.isValid()"], ["void", "org.rocksdb.TransactionLogIterator.next()"], ["void", "org.rocksdb.TransactionLogIterator.status()"], ["org.rocksdb.TransactionLogIterator$BatchResult", "org.rocksdb.TransactionLogIterator.getBatch()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions()"], ["boolean", "org.rocksdb.TransactionOptions.isSetSnapshot()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setSetSnapshot(boolean)"], ["boolean", "org.rocksdb.TransactionOptions.isDeadlockDetect()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setDeadlockDetect(boolean)"], ["long", "org.rocksdb.TransactionOptions.getLockTimeout()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setLockTimeout(long)"], ["long", "org.rocksdb.TransactionOptions.getExpiration()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setExpiration(long)"], ["long", "org.rocksdb.TransactionOptions.getDeadlockDetectDepth()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setDeadlockDetectDepth(long)"], ["long", "org.rocksdb.TransactionOptions.getMaxWriteBatchSize()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setMaxWriteBatchSize(long)"], ["org.rocksdb.TransactionalOptions", "org.rocksdb.TransactionOptions.setSetSnapshot(boolean)"], ["org.rocksdb.TtlDB", "org.rocksdb.TtlDB.open(org.rocksdb.Options, java.lang.String)"], ["org.rocksdb.TtlDB", "org.rocksdb.TtlDB.open(org.rocksdb.Options, java.lang.String, int, boolean)"], ["org.rocksdb.TtlDB", "org.rocksdb.TtlDB.open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<java.lang.Integer>, boolean)"], ["org.rocksdb.ColumnFamilyHandle", "org.rocksdb.TtlDB.createColumnFamilyWithTtl(org.rocksdb.ColumnFamilyDescriptor, int)"], ["void", "org.rocksdb.TtlDB.close()"], ["org.rocksdb.TxnDBWritePolicy[]", "org.rocksdb.TxnDBWritePolicy.values()"], ["org.rocksdb.TxnDBWritePolicy", "org.rocksdb.TxnDBWritePolicy.valueOf(java.lang.String)"], ["byte", "org.rocksdb.TxnDBWritePolicy.getValue()"], ["org.rocksdb.TxnDBWritePolicy", "org.rocksdb.TxnDBWritePolicy.getTxnDBWritePolicy(byte)"], ["org.rocksdb.VectorMemTableConfig", "org.rocksdb.VectorMemTableConfig()"], ["org.rocksdb.VectorMemTableConfig", "org.rocksdb.VectorMemTableConfig.setReservedSize(int)"], ["int", "org.rocksdb.VectorMemTableConfig.reservedSize()"], ["org.rocksdb.WALRecoveryMode[]", "org.rocksdb.WALRecoveryMode.values()"], ["org.rocksdb.WALRecoveryMode", "org.rocksdb.WALRecoveryMode.valueOf(java.lang.String)"], ["byte", "org.rocksdb.WALRecoveryMode.getValue()"], ["org.rocksdb.WALRecoveryMode", "org.rocksdb.WALRecoveryMode.getWALRecoveryMode(byte)"], ["org.rocksdb.WBWIRocksIterator$WriteEntry", "org.rocksdb.WBWIRocksIterator$WriteEntry(org.rocksdb.WBWIRocksIterator$WriteType, org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)"], ["org.rocksdb.WBWIRocksIterator$WriteType", "org.rocksdb.WBWIRocksIterator$WriteEntry.getType()"], ["org.rocksdb.DirectSlice", "org.rocksdb.WBWIRocksIterator$WriteEntry.getKey()"], ["org.rocksdb.DirectSlice", "org.rocksdb.WBWIRocksIterator$WriteEntry.getValue()"], ["int", "org.rocksdb.WBWIRocksIterator$WriteEntry.hashCode()"], ["boolean", "org.rocksdb.WBWIRocksIterator$WriteEntry.equals(java.lang.Object)"], ["void", "org.rocksdb.WBWIRocksIterator$WriteEntry.close()"], ["org.rocksdb.WBWIRocksIterator$WriteType[]", "org.rocksdb.WBWIRocksIterator$WriteType.values()"], ["org.rocksdb.WBWIRocksIterator$WriteType", "org.rocksdb.WBWIRocksIterator$WriteType.valueOf(java.lang.String)"], ["org.rocksdb.WBWIRocksIterator$WriteType", "org.rocksdb.WBWIRocksIterator$WriteType.fromId(byte)"], ["org.rocksdb.WBWIRocksIterator$WriteEntry", "org.rocksdb.WBWIRocksIterator.entry()"], ["void", "org.rocksdb.WBWIRocksIterator.close()"], ["org.rocksdb.WriteBatch$Handler", "org.rocksdb.WriteBatch$Handler()"], ["boolean", "org.rocksdb.WriteBatch$Handler.shouldContinue()"], ["org.rocksdb.WriteBatch$SavePoint", "org.rocksdb.WriteBatch$SavePoint(long, long, long)"], ["void", "org.rocksdb.WriteBatch$SavePoint.clear()"], ["long", "org.rocksdb.WriteBatch$SavePoint.getSize()"], ["long", "org.rocksdb.WriteBatch$SavePoint.getCount()"], ["long", "org.rocksdb.WriteBatch$SavePoint.getContentFlags()"], ["boolean", "org.rocksdb.WriteBatch$SavePoint.isCleared()"], ["org.rocksdb.WriteBatch", "org.rocksdb.WriteBatch()"], ["org.rocksdb.WriteBatch", "org.rocksdb.WriteBatch(int)"], ["org.rocksdb.WriteBatch", "org.rocksdb.WriteBatch(byte[])"], ["void", "org.rocksdb.WriteBatch.iterate(org.rocksdb.WriteBatch$Handler)"], ["byte[]", "org.rocksdb.WriteBatch.data()"], ["long", "org.rocksdb.WriteBatch.getDataSize()"], ["boolean", "org.rocksdb.WriteBatch.hasPut()"], ["boolean", "org.rocksdb.WriteBatch.hasDelete()"], ["boolean", "org.rocksdb.WriteBatch.hasSingleDelete()"], ["boolean", "org.rocksdb.WriteBatch.hasDeleteRange()"], ["boolean", "org.rocksdb.WriteBatch.hasMerge()"], ["boolean", "org.rocksdb.WriteBatch.hasBeginPrepare()"], ["boolean", "org.rocksdb.WriteBatch.hasEndPrepare()"], ["boolean", "org.rocksdb.WriteBatch.hasCommit()"], ["boolean", "org.rocksdb.WriteBatch.hasRollback()"], ["org.rocksdb.WriteBatch", "org.rocksdb.WriteBatch.getWriteBatch()"], ["void", "org.rocksdb.WriteBatch.markWalTerminationPoint()"], ["org.rocksdb.WriteBatch$SavePoint", "org.rocksdb.WriteBatch.getWalTerminationPoint()"], ["org.rocksdb.WriteBatchWithIndex", "org.rocksdb.WriteBatchWithIndex()"], ["org.rocksdb.WriteBatchWithIndex", "org.rocksdb.WriteBatchWithIndex(boolean)"], ["org.rocksdb.WriteBatchWithIndex", "org.rocksdb.WriteBatchWithIndex(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>, int, boolean)"], ["org.rocksdb.WBWIRocksIterator", "org.rocksdb.WriteBatchWithIndex.newIterator(org.rocksdb.ColumnFamilyHandle)"], ["org.rocksdb.WBWIRocksIterator", "org.rocksdb.WriteBatchWithIndex.newIterator()"], ["org.rocksdb.RocksIterator", "org.rocksdb.WriteBatchWithIndex.newIteratorWithBase(org.rocksdb.ColumnFamilyHandle, org.rocksdb.RocksIterator)"], ["org.rocksdb.RocksIterator", "org.rocksdb.WriteBatchWithIndex.newIteratorWithBase(org.rocksdb.RocksIterator)"], ["byte[]", "org.rocksdb.WriteBatchWithIndex.getFromBatch(org.rocksdb.ColumnFamilyHandle, org.rocksdb.DBOptions, byte[])"], ["byte[]", "org.rocksdb.WriteBatchWithIndex.getFromBatch(org.rocksdb.DBOptions, byte[])"], ["byte[]", "org.rocksdb.WriteBatchWithIndex.getFromBatchAndDB(org.rocksdb.RocksDB, org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[])"], ["byte[]", "org.rocksdb.WriteBatchWithIndex.getFromBatchAndDB(org.rocksdb.RocksDB, org.rocksdb.ReadOptions, byte[])"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions()"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions.setSync(boolean)"], ["boolean", "org.rocksdb.WriteOptions.sync()"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions.setDisableWAL(boolean)"], ["boolean", "org.rocksdb.WriteOptions.disableWAL()"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions.setIgnoreMissingColumnFamilies(boolean)"], ["boolean", "org.rocksdb.WriteOptions.ignoreMissingColumnFamilies()"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions.setNoSlowdown(boolean)"], ["boolean", "org.rocksdb.WriteOptions.noSlowdown()"], ["org.rocksdb.util.BytewiseComparator", "org.rocksdb.util.BytewiseComparator(org.rocksdb.ComparatorOptions)"], ["java.lang.String", "org.rocksdb.util.BytewiseComparator.name()"], ["int", "org.rocksdb.util.BytewiseComparator.compare(org.rocksdb.Slice, org.rocksdb.Slice)"], ["java.lang.String", "org.rocksdb.util.BytewiseComparator.findShortestSeparator(java.lang.String, org.rocksdb.Slice)"], ["java.lang.String", "org.rocksdb.util.BytewiseComparator.findShortSuccessor(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.BytewiseComparator.findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)"], ["int", "org.rocksdb.util.BytewiseComparator.compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)"], ["org.rocksdb.util.DirectBytewiseComparator", "org.rocksdb.util.DirectBytewiseComparator(org.rocksdb.ComparatorOptions)"], ["java.lang.String", "org.rocksdb.util.DirectBytewiseComparator.name()"], ["int", "org.rocksdb.util.DirectBytewiseComparator.compare(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)"], ["java.lang.String", "org.rocksdb.util.DirectBytewiseComparator.findShortestSeparator(java.lang.String, org.rocksdb.DirectSlice)"], ["java.lang.String", "org.rocksdb.util.DirectBytewiseComparator.findShortSuccessor(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.DirectBytewiseComparator.findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)"], ["int", "org.rocksdb.util.DirectBytewiseComparator.compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)"], ["org.rocksdb.util.Environment", "org.rocksdb.util.Environment()"], ["boolean", "org.rocksdb.util.Environment.isPowerPC()"], ["boolean", "org.rocksdb.util.Environment.isWindows()"], ["boolean", "org.rocksdb.util.Environment.isFreeBSD()"], ["boolean", "org.rocksdb.util.Environment.isMac()"], ["boolean", "org.rocksdb.util.Environment.isAix()"], ["boolean", "org.rocksdb.util.Environment.isUnix()"], ["boolean", "org.rocksdb.util.Environment.isSolaris()"], ["boolean", "org.rocksdb.util.Environment.is64Bit()"], ["java.lang.String", "org.rocksdb.util.Environment.getSharedLibraryName(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.Environment.getSharedLibraryFileName(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.Environment.getJniLibraryName(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.Environment.getJniLibraryFileName(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.Environment.getJniLibraryExtension()"], ["org.rocksdb.util.ReverseBytewiseComparator", "org.rocksdb.util.ReverseBytewiseComparator(org.rocksdb.ComparatorOptions)"], ["java.lang.String", "org.rocksdb.util.ReverseBytewiseComparator.name()"], ["int", "org.rocksdb.util.ReverseBytewiseComparator.compare(org.rocksdb.Slice, org.rocksdb.Slice)"], ["int", "org.rocksdb.util.ReverseBytewiseComparator.compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)"]]}