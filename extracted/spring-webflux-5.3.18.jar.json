{
    "spring-webflux-5.3.18.jar": [
        [
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient()",
            "public org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient()"
        ],
        [
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient(reactor.netty.http.client.HttpClient)",
            "public org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient(reactor.netty.http.client.HttpClient)"
        ],
        [
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient(reactor.netty.http.client.HttpClient, java.util.function.Supplier<reactor.netty.http.client.WebsocketClientSpec$Builder>)",
            "public org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient(reactor.netty.http.client.HttpClient, java.util.function.Supplier<reactor.netty.http.client.WebsocketClientSpec$Builder>)"
        ],
        [
            "reactor.netty.http.client.HttpClient",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient.getHttpClient()",
            "public reactor.netty.http.client.HttpClient getHttpClient()"
        ],
        [
            "reactor.netty.http.client.WebsocketClientSpec",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient.getWebsocketClientSpec()",
            "public reactor.netty.http.client.WebsocketClientSpec getWebsocketClientSpec()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient.setMaxFramePayloadLength(int)",
            "public void setMaxFramePayloadLength(int)"
        ],
        [
            "int",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient.getMaxFramePayloadLength()",
            "public int getMaxFramePayloadLength()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient.setHandlePing(boolean)",
            "public void setHandlePing(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient.getHandlePing()",
            "public boolean getHandlePing()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient.execute(java.net.URI, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> execute(java.net.URI, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient.execute(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> execute(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "org.springframework.web.reactive.socket.client.TomcatWebSocketClient",
            "org.springframework.web.reactive.socket.client.TomcatWebSocketClient()",
            "public org.springframework.web.reactive.socket.client.TomcatWebSocketClient()"
        ],
        [
            "org.springframework.web.reactive.socket.client.TomcatWebSocketClient",
            "org.springframework.web.reactive.socket.client.TomcatWebSocketClient(javax.websocket.WebSocketContainer)",
            "public org.springframework.web.reactive.socket.client.TomcatWebSocketClient(javax.websocket.WebSocketContainer)"
        ],
        [
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient(org.xnio.XnioWorker)",
            "public org.springframework.web.reactive.socket.client.UndertowWebSocketClient(org.xnio.XnioWorker)"
        ],
        [
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient(org.xnio.XnioWorker, java.util.function.Consumer<io.undertow.websockets.client.WebSocketClient$ConnectionBuilder>)",
            "public org.springframework.web.reactive.socket.client.UndertowWebSocketClient(org.xnio.XnioWorker, java.util.function.Consumer<io.undertow.websockets.client.WebSocketClient$ConnectionBuilder>)"
        ],
        [
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient(org.xnio.XnioWorker, io.undertow.connector.ByteBufferPool, java.util.function.Consumer<io.undertow.websockets.client.WebSocketClient$ConnectionBuilder>)",
            "public org.springframework.web.reactive.socket.client.UndertowWebSocketClient(org.xnio.XnioWorker, io.undertow.connector.ByteBufferPool, java.util.function.Consumer<io.undertow.websockets.client.WebSocketClient$ConnectionBuilder>)"
        ],
        [
            "org.xnio.XnioWorker",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient.getXnioWorker()",
            "public org.xnio.XnioWorker getXnioWorker()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient.setByteBufferPool(io.undertow.connector.ByteBufferPool)",
            "public void setByteBufferPool(io.undertow.connector.ByteBufferPool)"
        ],
        [
            "io.undertow.connector.ByteBufferPool",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient.getByteBufferPool()",
            "public io.undertow.connector.ByteBufferPool getByteBufferPool()"
        ],
        [
            "java.util.function.Consumer<io.undertow.websockets.client.WebSocketClient$ConnectionBuilder>",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient.getConnectionBuilderConsumer()",
            "public java.util.function.Consumer<io.undertow.websockets.client.WebSocketClient$ConnectionBuilder> getConnectionBuilderConsumer()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient.execute(java.net.URI, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> execute(java.net.URI, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient.execute(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> execute(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient$1.handleDone(io.undertow.websockets.core.WebSocketChannel, java.lang.Object)",
            "public void handleDone(io.undertow.websockets.core.WebSocketChannel, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient$1.handleFailed(java.io.IOException, java.lang.Object)",
            "public void handleFailed(java.io.IOException, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient$1.handleDone(java.lang.Object, java.lang.Object)",
            "public void handleDone(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient$DefaultUpgradeListener",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient$DefaultUpgradeListener(org.springframework.http.HttpHeaders)",
            "public org.springframework.web.reactive.socket.client.JettyWebSocketClient$DefaultUpgradeListener(org.springframework.http.HttpHeaders)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient$DefaultUpgradeListener.onHandshakeRequest(org.eclipse.jetty.websocket.api.UpgradeRequest)",
            "public void onHandshakeRequest(org.eclipse.jetty.websocket.api.UpgradeRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient$DefaultUpgradeListener.onHandshakeResponse(org.eclipse.jetty.websocket.api.UpgradeResponse)",
            "public void onHandshakeResponse(org.eclipse.jetty.websocket.api.UpgradeResponse)"
        ],
        [
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient()",
            "public org.springframework.web.reactive.socket.client.JettyWebSocketClient()"
        ],
        [
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient(org.eclipse.jetty.websocket.client.WebSocketClient)",
            "public org.springframework.web.reactive.socket.client.JettyWebSocketClient(org.eclipse.jetty.websocket.client.WebSocketClient)"
        ],
        [
            "org.eclipse.jetty.websocket.client.WebSocketClient",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient.getJettyClient()",
            "public org.eclipse.jetty.websocket.client.WebSocketClient getJettyClient()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient.execute(java.net.URI, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> execute(java.net.URI, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient.execute(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> execute(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient()",
            "public org.springframework.web.reactive.socket.client.StandardWebSocketClient()"
        ],
        [
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient(javax.websocket.WebSocketContainer)",
            "public org.springframework.web.reactive.socket.client.StandardWebSocketClient(javax.websocket.WebSocketContainer)"
        ],
        [
            "javax.websocket.WebSocketContainer",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient.getWebSocketContainer()",
            "public javax.websocket.WebSocketContainer getWebSocketContainer()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient.execute(java.net.URI, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> execute(java.net.URI, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient.execute(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> execute(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient$Jetty9UpgradeHelper.upgrade(org.eclipse.jetty.websocket.client.WebSocketClient, java.lang.Object, java.net.URI, org.eclipse.jetty.websocket.client.ClientUpgradeRequest, org.springframework.http.HttpHeaders, reactor.core.publisher.Sinks$Empty<java.lang.Void>)",
            "public reactor.core.publisher.Mono<java.lang.Void> upgrade(org.eclipse.jetty.websocket.client.WebSocketClient, java.lang.Object, java.net.URI, org.eclipse.jetty.websocket.client.ClientUpgradeRequest, org.springframework.http.HttpHeaders, reactor.core.publisher.Sinks$Empty<java.lang.Void>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.client.JettyWebSocketClient$Jetty10UpgradeHelper.upgrade(org.eclipse.jetty.websocket.client.WebSocketClient, java.lang.Object, java.net.URI, org.eclipse.jetty.websocket.client.ClientUpgradeRequest, org.springframework.http.HttpHeaders, reactor.core.publisher.Sinks$Empty<java.lang.Void>)",
            "public reactor.core.publisher.Mono<java.lang.Void> upgrade(org.eclipse.jetty.websocket.client.WebSocketClient, java.lang.Object, java.net.URI, org.eclipse.jetty.websocket.client.ClientUpgradeRequest, org.springframework.http.HttpHeaders, reactor.core.publisher.Sinks$Empty<java.lang.Void>)"
        ],
        [
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient$DefaultNegotiation",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient$DefaultNegotiation(java.util.List<java.lang.String>, org.springframework.http.HttpHeaders, io.undertow.websockets.client.WebSocketClient$ConnectionBuilder)",
            "public org.springframework.web.reactive.socket.client.UndertowWebSocketClient$DefaultNegotiation(java.util.List<java.lang.String>, org.springframework.http.HttpHeaders, io.undertow.websockets.client.WebSocketClient$ConnectionBuilder)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient$DefaultNegotiation.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient$DefaultNegotiation.beforeRequest(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public void beforeRequest(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.UndertowWebSocketClient$DefaultNegotiation.afterRequest(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public void afterRequest(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient$DefaultConfigurator",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient$DefaultConfigurator(org.springframework.http.HttpHeaders)",
            "public org.springframework.web.reactive.socket.client.StandardWebSocketClient$DefaultConfigurator(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient$DefaultConfigurator.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient$DefaultConfigurator.beforeRequest(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public void beforeRequest(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.client.StandardWebSocketClient$DefaultConfigurator.afterResponse(javax.websocket.HandshakeResponse)",
            "public void afterResponse(javax.websocket.HandshakeResponse)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.socket.WebSocketHandler.getSubProtocols()",
            "public default java.util.List<java.lang.String> getSubProtocols()"
        ],
        [
            "org.springframework.web.reactive.socket.CloseStatus",
            "org.springframework.web.reactive.socket.CloseStatus(int)",
            "public org.springframework.web.reactive.socket.CloseStatus(int)"
        ],
        [
            "org.springframework.web.reactive.socket.CloseStatus",
            "org.springframework.web.reactive.socket.CloseStatus(int, java.lang.String)",
            "public org.springframework.web.reactive.socket.CloseStatus(int, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.web.reactive.socket.CloseStatus.getCode()",
            "public int getCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.CloseStatus.getReason()",
            "public java.lang.String getReason()"
        ],
        [
            "org.springframework.web.reactive.socket.CloseStatus",
            "org.springframework.web.reactive.socket.CloseStatus.withReason(java.lang.String)",
            "public org.springframework.web.reactive.socket.CloseStatus withReason(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.CloseStatus.equalsCode(org.springframework.web.reactive.socket.CloseStatus)",
            "public boolean equalsCode(org.springframework.web.reactive.socket.CloseStatus)"
        ],
        [
            "org.springframework.web.reactive.socket.CloseStatus",
            "org.springframework.web.reactive.socket.CloseStatus.create(int, java.lang.String)",
            "public static org.springframework.web.reactive.socket.CloseStatus create(int, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.CloseStatus.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.reactive.socket.CloseStatus.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.CloseStatus.toString()",
            "public java.lang.String toString()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.WebSocketSession.close()",
            "public default reactor.core.publisher.Mono<java.lang.Void> close()"
        ],
        [
            "org.springframework.web.reactive.socket.HandshakeInfo",
            "org.springframework.web.reactive.socket.HandshakeInfo(java.net.URI, org.springframework.http.HttpHeaders, reactor.core.publisher.Mono<java.security.Principal>, java.lang.String)",
            "public org.springframework.web.reactive.socket.HandshakeInfo(java.net.URI, org.springframework.http.HttpHeaders, reactor.core.publisher.Mono<java.security.Principal>, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.socket.HandshakeInfo",
            "org.springframework.web.reactive.socket.HandshakeInfo(java.net.URI, org.springframework.http.HttpHeaders, reactor.core.publisher.Mono<java.security.Principal>, java.lang.String, java.net.InetSocketAddress, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String)",
            "public org.springframework.web.reactive.socket.HandshakeInfo(java.net.URI, org.springframework.http.HttpHeaders, reactor.core.publisher.Mono<java.security.Principal>, java.lang.String, java.net.InetSocketAddress, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.socket.HandshakeInfo",
            "org.springframework.web.reactive.socket.HandshakeInfo(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>, reactor.core.publisher.Mono<java.security.Principal>, java.lang.String, java.net.InetSocketAddress, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String)",
            "public org.springframework.web.reactive.socket.HandshakeInfo(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>, reactor.core.publisher.Mono<java.security.Principal>, java.lang.String, java.net.InetSocketAddress, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.socket.HandshakeInfo.getUri()",
            "public java.net.URI getUri()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.socket.HandshakeInfo.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.web.reactive.socket.HandshakeInfo.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> getCookies()"
        ],
        [
            "reactor.core.publisher.Mono<java.security.Principal>",
            "org.springframework.web.reactive.socket.HandshakeInfo.getPrincipal()",
            "public reactor.core.publisher.Mono<java.security.Principal> getPrincipal()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.HandshakeInfo.getSubProtocol()",
            "public java.lang.String getSubProtocol()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.reactive.socket.HandshakeInfo.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.socket.HandshakeInfo.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.HandshakeInfo.getLogPrefix()",
            "public java.lang.String getLogPrefix()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.HandshakeInfo.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.socket.server.support.WebSocketUpgradeHandlerPredicate",
            "org.springframework.web.reactive.socket.server.support.WebSocketUpgradeHandlerPredicate()",
            "public org.springframework.web.reactive.socket.server.support.WebSocketUpgradeHandlerPredicate()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.server.support.WebSocketUpgradeHandlerPredicate.test(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public boolean test(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.server.support.WebSocketUpgradeHandlerPredicate.test(java.lang.Object, java.lang.Object)",
            "public boolean test(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService()",
            "public org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService()"
        ],
        [
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService(org.springframework.web.reactive.socket.server.RequestUpgradeStrategy)",
            "public org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService(org.springframework.web.reactive.socket.server.RequestUpgradeStrategy)"
        ],
        [
            "org.springframework.web.reactive.socket.server.RequestUpgradeStrategy",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService.getUpgradeStrategy()",
            "public org.springframework.web.reactive.socket.server.RequestUpgradeStrategy getUpgradeStrategy()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService.setSessionAttributePredicate(java.util.function.Predicate<java.lang.String>)",
            "public void setSessionAttributePredicate(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "java.util.function.Predicate<java.lang.String>",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService.getSessionAttributePredicate()",
            "public java.util.function.Predicate<java.lang.String> getSessionAttributePredicate()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.server.support.HandshakeWebSocketService.handleRequest(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleRequest(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter",
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter()",
            "public org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter()"
        ],
        [
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter",
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter(org.springframework.web.reactive.socket.server.WebSocketService)",
            "public org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter(org.springframework.web.reactive.socket.server.WebSocketService)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter.getOrder()",
            "public int getOrder()"
        ],
        [
            "org.springframework.web.reactive.socket.server.WebSocketService",
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter.getWebSocketService()",
            "public org.springframework.web.reactive.socket.server.WebSocketService getWebSocketService()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter.supports(java.lang.Object)",
            "public boolean supports(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult>",
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter.handle(org.springframework.web.server.ServerWebExchange, java.lang.Object)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult> handle(org.springframework.web.server.ServerWebExchange, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.Jetty10RequestUpgradeStrategy$WebSocketCreatorInterceptor",
            "org.springframework.web.reactive.socket.server.upgrade.Jetty10RequestUpgradeStrategy$WebSocketCreatorInterceptor(org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter, java.lang.String)",
            "public org.springframework.web.reactive.socket.server.upgrade.Jetty10RequestUpgradeStrategy$WebSocketCreatorInterceptor(org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.socket.server.upgrade.Jetty10RequestUpgradeStrategy$WebSocketCreatorInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy()",
            "public org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.setWebSocketPolicy(org.eclipse.jetty.websocket.api.WebSocketPolicy)",
            "public void setWebSocketPolicy(org.eclipse.jetty.websocket.api.WebSocketPolicy)"
        ],
        [
            "org.eclipse.jetty.websocket.api.WebSocketPolicy",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.getWebSocketPolicy()",
            "public org.eclipse.jetty.websocket.api.WebSocketPolicy getWebSocketPolicy()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy.upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)",
            "public reactor.core.publisher.Mono<java.lang.Void> upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy$DefaultCallback",
            "org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy$DefaultCallback(org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.web.reactive.socket.WebSocketHandler, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy$DefaultCallback(org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.web.reactive.socket.WebSocketHandler, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy$DefaultCallback.onConnect(io.undertow.websockets.spi.WebSocketHttpExchange, io.undertow.websockets.core.WebSocketChannel)",
            "public void onConnect(io.undertow.websockets.spi.WebSocketHttpExchange, io.undertow.websockets.core.WebSocketChannel)"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig(java.lang.String, javax.websocket.Endpoint)",
            "public org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig(java.lang.String, javax.websocket.Endpoint)"
        ],
        [
            "java.util.List<java.lang.Class<? extends javax.websocket.Encoder>>",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getEncoders()",
            "public java.util.List<java.lang.Class<? extends javax.websocket.Encoder>> getEncoders()"
        ],
        [
            "java.util.List<java.lang.Class<? extends javax.websocket.Decoder>>",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getDecoders()",
            "public java.util.List<java.lang.Class<? extends javax.websocket.Decoder>> getDecoders()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getUserProperties()",
            "public java.util.Map<java.lang.String, java.lang.Object> getUserProperties()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getEndpointClass()",
            "public java.lang.Class<?> getEndpointClass()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.setSubprotocols(java.util.List<java.lang.String>)",
            "public void setSubprotocols(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getSubprotocols()",
            "public java.util.List<java.lang.String> getSubprotocols()"
        ],
        [
            "java.util.List<javax.websocket.Extension>",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getExtensions()",
            "public java.util.List<javax.websocket.Extension> getExtensions()"
        ],
        [
            "javax.websocket.server.ServerEndpointConfig$Configurator",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getConfigurator()",
            "public javax.websocket.server.ServerEndpointConfig$Configurator getConfigurator()"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.getEndpointInstance(java.lang.Class<T>)",
            "public <T> T getEndpointInstance(java.lang.Class<T>) throws java.lang.InstantiationException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.server.upgrade.DefaultServerEndpointConfig.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy",
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy()",
            "public org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy()"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy",
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy(java.util.function.Supplier<reactor.netty.http.server.WebsocketServerSpec$Builder>)",
            "public org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy(java.util.function.Supplier<reactor.netty.http.server.WebsocketServerSpec$Builder>)"
        ],
        [
            "reactor.netty.http.server.WebsocketServerSpec",
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy.getWebsocketServerSpec()",
            "public reactor.netty.http.server.WebsocketServerSpec getWebsocketServerSpec()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy.setMaxFramePayloadLength(java.lang.Integer)",
            "public void setMaxFramePayloadLength(java.lang.Integer)"
        ],
        [
            "int",
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy.getMaxFramePayloadLength()",
            "public int getMaxFramePayloadLength()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy.setHandlePing(boolean)",
            "public void setHandlePing(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy.getHandlePing()",
            "public boolean getHandlePing()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy.upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)",
            "public reactor.core.publisher.Mono<java.lang.Void> upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy()",
            "public org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.setAsyncSendTimeout(java.lang.Long)",
            "public void setAsyncSendTimeout(java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.getAsyncSendTimeout()",
            "public java.lang.Long getAsyncSendTimeout()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.setMaxSessionIdleTimeout(java.lang.Long)",
            "public void setMaxSessionIdleTimeout(java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.getMaxSessionIdleTimeout()",
            "public java.lang.Long getMaxSessionIdleTimeout()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.setMaxTextMessageBufferSize(java.lang.Integer)",
            "public void setMaxTextMessageBufferSize(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.getMaxTextMessageBufferSize()",
            "public java.lang.Integer getMaxTextMessageBufferSize()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.setMaxBinaryMessageBufferSize(java.lang.Integer)",
            "public void setMaxBinaryMessageBufferSize(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.getMaxBinaryMessageBufferSize()",
            "public java.lang.Integer getMaxBinaryMessageBufferSize()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.server.upgrade.TomcatRequestUpgradeStrategy.upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)",
            "public reactor.core.publisher.Mono<java.lang.Void> upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy$WebSocketHandlerContainer",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy$WebSocketHandlerContainer(org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter, java.lang.String)",
            "public org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy$WebSocketHandlerContainer(org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy$WebSocketHandlerContainer.getAdapter()",
            "public org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter getAdapter()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy$WebSocketHandlerContainer.getProtocol()",
            "public java.lang.String getProtocol()"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.Jetty10RequestUpgradeStrategy",
            "org.springframework.web.reactive.socket.server.upgrade.Jetty10RequestUpgradeStrategy()",
            "public org.springframework.web.reactive.socket.server.upgrade.Jetty10RequestUpgradeStrategy()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.server.upgrade.Jetty10RequestUpgradeStrategy.upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)",
            "public reactor.core.publisher.Mono<java.lang.Void> upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)"
        ],
        [
            "org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy",
            "org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy()",
            "public org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy.upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)",
            "public reactor.core.publisher.Mono<java.lang.Void> upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.server.RequestUpgradeStrategy.upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String)",
            "public default reactor.core.publisher.Mono<java.lang.Void> upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.server.RequestUpgradeStrategy.upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier)",
            "public default reactor.core.publisher.Mono<java.lang.Void> upgrade(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler, java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.socket.HandshakeInfo>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession$WebSocketSendProcessor.setReadyToSend(boolean)",
            "public void setReadyToSend(boolean)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession(T, java.lang.String, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession(T, java.lang.String, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession(T, java.lang.String, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession(T, java.lang.String, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession(T, java.lang.String, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession(T, java.lang.String, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.web.reactive.socket.WebSocketMessage>",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.receive()",
            "public reactor.core.publisher.Flux<org.springframework.web.reactive.socket.WebSocketMessage> receive()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.send(org.reactivestreams.Publisher<org.springframework.web.reactive.socket.WebSocketMessage>)",
            "public reactor.core.publisher.Mono<java.lang.Void> send(org.reactivestreams.Publisher<org.springframework.web.reactive.socket.WebSocketMessage>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.socket.CloseStatus>",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.closeStatus()",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.socket.CloseStatus> closeStatus()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onSubscribe(org.reactivestreams.Subscription)",
            "public void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onNext(java.lang.Void)",
            "public void onNext(java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onComplete()",
            "public void onComplete()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onNext(java.lang.Object)",
            "public void onNext(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession(org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.web.reactive.socket.adapter.JettyWebSocketSession(org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession(org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.JettyWebSocketSession(org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession(org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.JettyWebSocketSession(org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession.close(org.springframework.web.reactive.socket.CloseStatus)",
            "public reactor.core.publisher.Mono<java.lang.Void> close(org.springframework.web.reactive.socket.CloseStatus)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.socket.adapter.ContextWebSocketHandler.getSubProtocols()",
            "public java.util.List<java.lang.String> getSubProtocols()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.adapter.ContextWebSocketHandler.handle(org.springframework.web.reactive.socket.WebSocketSession)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.reactive.socket.WebSocketSession)"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketHandler",
            "org.springframework.web.reactive.socket.adapter.ContextWebSocketHandler.decorate(org.springframework.web.reactive.socket.WebSocketHandler, reactor.util.context.ContextView)",
            "public static org.springframework.web.reactive.socket.WebSocketHandler decorate(org.springframework.web.reactive.socket.WebSocketHandler, reactor.util.context.ContextView)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter(org.springframework.web.reactive.socket.WebSocketHandler, java.util.function.Function<org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.adapter.JettyWebSocketSession>)",
            "public org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter(org.springframework.web.reactive.socket.WebSocketHandler, java.util.function.Function<org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.adapter.JettyWebSocketSession>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter.onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)",
            "public void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter.onWebSocketText(java.lang.String)",
            "public void onWebSocketText(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter.onWebSocketBinary(byte[], int, int)",
            "public void onWebSocketBinary(byte[], int, int)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter.onWebSocketFrame(org.eclipse.jetty.websocket.api.extensions.Frame)",
            "public void onWebSocketFrame(org.eclipse.jetty.websocket.api.extensions.Frame)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter.onWebSocketClose(int, java.lang.String)",
            "public void onWebSocketClose(int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketHandlerAdapter.onWebSocketError(java.lang.Throwable)",
            "public void onWebSocketError(java.lang.Throwable)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter(org.springframework.web.reactive.socket.WebSocketHandler, java.util.function.Function<javax.websocket.Session, org.springframework.web.reactive.socket.adapter.StandardWebSocketSession>)",
            "public org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter(org.springframework.web.reactive.socket.WebSocketHandler, java.util.function.Function<javax.websocket.Session, org.springframework.web.reactive.socket.adapter.StandardWebSocketSession>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter.onOpen(javax.websocket.Session, javax.websocket.EndpointConfig)",
            "public void onOpen(javax.websocket.Session, javax.websocket.EndpointConfig)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter.onClose(javax.websocket.Session, javax.websocket.CloseReason)",
            "public void onClose(javax.websocket.Session, javax.websocket.CloseReason)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter.onError(javax.websocket.Session, java.lang.Throwable)",
            "public void onError(javax.websocket.Session, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketHandlerAdapter",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketHandlerAdapter(org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession)",
            "public org.springframework.web.reactive.socket.adapter.UndertowWebSocketHandlerAdapter(org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBufferFactory",
            "org.springframework.web.reactive.socket.adapter.NettyWebSocketSessionSupport.bufferFactory()",
            "public org.springframework.core.io.buffer.NettyDataBufferFactory bufferFactory()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.web.reactive.socket.adapter.NettyWebSocketSessionSupport.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession$WebSocketConnection",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession$WebSocketConnection(reactor.netty.http.websocket.WebsocketInbound, reactor.netty.http.websocket.WebsocketOutbound)",
            "public org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession$WebSocketConnection(reactor.netty.http.websocket.WebsocketInbound, reactor.netty.http.websocket.WebsocketOutbound)"
        ],
        [
            "reactor.netty.http.websocket.WebsocketInbound",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession$WebSocketConnection.getInbound()",
            "public reactor.netty.http.websocket.WebsocketInbound getInbound()"
        ],
        [
            "reactor.netty.http.websocket.WebsocketOutbound",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession$WebSocketConnection.getOutbound()",
            "public reactor.netty.http.websocket.WebsocketOutbound getOutbound()"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.TomcatWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession$SendProcessorCallback.writeFailed(java.lang.Throwable)",
            "public void writeFailed(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.JettyWebSocketSession$SendProcessorCallback.writeSuccess()",
            "public void writeSuccess()"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.web.reactive.socket.adapter.StandardWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.StandardWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.StandardWebSocketSession(javax.websocket.Session, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession.close(org.springframework.web.reactive.socket.CloseStatus)",
            "public reactor.core.publisher.Mono<java.lang.Void> close(org.springframework.web.reactive.socket.CloseStatus)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter",
            "org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter(org.springframework.web.reactive.socket.WebSocketHandler, java.util.function.Function<org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.adapter.JettyWebSocketSession>)",
            "public org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter(org.springframework.web.reactive.socket.WebSocketHandler, java.util.function.Function<org.eclipse.jetty.websocket.api.Session, org.springframework.web.reactive.socket.adapter.JettyWebSocketSession>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter.onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)",
            "public void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter.onWebSocketText(java.lang.String)",
            "public void onWebSocketText(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter.onWebSocketBinary(byte[], int, int)",
            "public void onWebSocketBinary(byte[], int, int)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter.onWebSocketClose(int, java.lang.String)",
            "public void onWebSocketClose(int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.Jetty10WebSocketHandlerAdapter.onWebSocketError(java.lang.Throwable)",
            "public void onWebSocketError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.StandardWebSocketSession$SendProcessorCallback.onResult(javax.websocket.SendResult)",
            "public void onResult(javax.websocket.SendResult)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "org.springframework.web.reactive.socket.HandshakeInfo",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.getHandshakeInfo()",
            "public org.springframework.web.reactive.socket.HandshakeInfo getHandshakeInfo()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.textMessage(java.lang.String)",
            "public org.springframework.web.reactive.socket.WebSocketMessage textMessage(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.binaryMessage(java.util.function.Function<org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.web.reactive.socket.WebSocketMessage binaryMessage(java.util.function.Function<org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.pingMessage(java.util.function.Function<org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.web.reactive.socket.WebSocketMessage pingMessage(java.util.function.Function<org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.pongMessage(java.util.function.Function<org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.web.reactive.socket.WebSocketMessage pongMessage(java.util.function.Function<org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.adapter.AbstractWebSocketSession.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession(io.undertow.websockets.core.WebSocketChannel, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession(io.undertow.websockets.core.WebSocketChannel, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession(io.undertow.websockets.core.WebSocketChannel, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession(io.undertow.websockets.core.WebSocketChannel, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.Sinks$Empty<java.lang.Void>)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession(io.undertow.websockets.core.WebSocketChannel, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)",
            "public org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession(io.undertow.websockets.core.WebSocketChannel, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.DataBufferFactory, reactor.core.publisher.MonoProcessor<java.lang.Void>)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession.close(org.springframework.web.reactive.socket.CloseStatus)",
            "public reactor.core.publisher.Mono<java.lang.Void> close(org.springframework.web.reactive.socket.CloseStatus)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession$SendProcessorCallback.complete(io.undertow.websockets.core.WebSocketChannel, java.lang.Void)",
            "public void complete(io.undertow.websockets.core.WebSocketChannel, java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession$SendProcessorCallback.onError(io.undertow.websockets.core.WebSocketChannel, java.lang.Void, java.lang.Throwable)",
            "public void onError(io.undertow.websockets.core.WebSocketChannel, java.lang.Void, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession$SendProcessorCallback.onError(io.undertow.websockets.core.WebSocketChannel, java.lang.Object, java.lang.Throwable)",
            "public void onError(io.undertow.websockets.core.WebSocketChannel, java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession$SendProcessorCallback.complete(io.undertow.websockets.core.WebSocketChannel, java.lang.Object)",
            "public void complete(io.undertow.websockets.core.WebSocketChannel, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession(reactor.netty.http.websocket.WebsocketInbound, reactor.netty.http.websocket.WebsocketOutbound, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.NettyDataBufferFactory)",
            "public org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession(reactor.netty.http.websocket.WebsocketInbound, reactor.netty.http.websocket.WebsocketOutbound, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.NettyDataBufferFactory)"
        ],
        [
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession(reactor.netty.http.websocket.WebsocketInbound, reactor.netty.http.websocket.WebsocketOutbound, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.NettyDataBufferFactory, int)",
            "public org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession(reactor.netty.http.websocket.WebsocketInbound, reactor.netty.http.websocket.WebsocketOutbound, org.springframework.web.reactive.socket.HandshakeInfo, org.springframework.core.io.buffer.NettyDataBufferFactory, int)"
        ],
        [
            "io.netty.channel.ChannelId",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession.getChannelId()",
            "public io.netty.channel.ChannelId getChannelId()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.web.reactive.socket.WebSocketMessage>",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession.receive()",
            "public reactor.core.publisher.Flux<org.springframework.web.reactive.socket.WebSocketMessage> receive()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession.send(org.reactivestreams.Publisher<org.springframework.web.reactive.socket.WebSocketMessage>)",
            "public reactor.core.publisher.Mono<java.lang.Void> send(org.reactivestreams.Publisher<org.springframework.web.reactive.socket.WebSocketMessage>)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession.close(org.springframework.web.reactive.socket.CloseStatus)",
            "public reactor.core.publisher.Mono<java.lang.Void> close(org.springframework.web.reactive.socket.CloseStatus)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.socket.CloseStatus>",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession.closeStatus()",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.socket.CloseStatus> closeStatus()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession$DisposedCallback.isDisposed()",
            "public boolean isDisposed()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession$DisposedCallback.accept(reactor.netty.Connection)",
            "public void accept(reactor.netty.Connection)"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession$DisposedCallback.accept(java.lang.Object)",
            "public void accept(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage",
            "org.springframework.web.reactive.socket.WebSocketMessage(org.springframework.web.reactive.socket.WebSocketMessage$Type, org.springframework.core.io.buffer.DataBuffer)",
            "public org.springframework.web.reactive.socket.WebSocketMessage(org.springframework.web.reactive.socket.WebSocketMessage$Type, org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage",
            "org.springframework.web.reactive.socket.WebSocketMessage(org.springframework.web.reactive.socket.WebSocketMessage$Type, org.springframework.core.io.buffer.DataBuffer, java.lang.Object)",
            "public org.springframework.web.reactive.socket.WebSocketMessage(org.springframework.web.reactive.socket.WebSocketMessage$Type, org.springframework.core.io.buffer.DataBuffer, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage$Type",
            "org.springframework.web.reactive.socket.WebSocketMessage.getType()",
            "public org.springframework.web.reactive.socket.WebSocketMessage$Type getType()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.web.reactive.socket.WebSocketMessage.getPayload()",
            "public org.springframework.core.io.buffer.DataBuffer getPayload()"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.socket.WebSocketMessage.getNativeMessage()",
            "public <T> T getNativeMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.WebSocketMessage.getPayloadAsText()",
            "public java.lang.String getPayloadAsText()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.WebSocketMessage.getPayloadAsText(java.nio.charset.Charset)",
            "public java.lang.String getPayloadAsText(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage",
            "org.springframework.web.reactive.socket.WebSocketMessage.retain()",
            "public org.springframework.web.reactive.socket.WebSocketMessage retain()"
        ],
        [
            "void",
            "org.springframework.web.reactive.socket.WebSocketMessage.release()",
            "public void release()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.socket.WebSocketMessage.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.reactive.socket.WebSocketMessage.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.socket.WebSocketMessage.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage$Type[]",
            "org.springframework.web.reactive.socket.WebSocketMessage$Type.values()",
            "public static org.springframework.web.reactive.socket.WebSocketMessage$Type[] values()"
        ],
        [
            "org.springframework.web.reactive.socket.WebSocketMessage$Type",
            "org.springframework.web.reactive.socket.WebSocketMessage$Type.valueOf(java.lang.String)",
            "public static org.springframework.web.reactive.socket.WebSocketMessage$Type valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.handler.AbstractHandlerMapping",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping()",
            "public org.springframework.web.reactive.handler.AbstractHandlerMapping()"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.setUseCaseSensitiveMatch(boolean)",
            "public void setUseCaseSensitiveMatch(boolean)"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.setUseTrailingSlashMatch(boolean)",
            "public void setUseTrailingSlashMatch(boolean)"
        ],
        [
            "org.springframework.web.util.pattern.PathPatternParser",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.getPathPatternParser()",
            "public org.springframework.web.util.pattern.PathPatternParser getPathPatternParser()"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.setCorsConfigurations(java.util.Map<java.lang.String, org.springframework.web.cors.CorsConfiguration>)",
            "public void setCorsConfigurations(java.util.Map<java.lang.String, org.springframework.web.cors.CorsConfiguration>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.setCorsConfigurationSource(org.springframework.web.cors.reactive.CorsConfigurationSource)",
            "public void setCorsConfigurationSource(org.springframework.web.cors.reactive.CorsConfigurationSource)"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.setCorsProcessor(org.springframework.web.cors.reactive.CorsProcessor)",
            "public void setCorsProcessor(org.springframework.web.cors.reactive.CorsProcessor)"
        ],
        [
            "org.springframework.web.cors.reactive.CorsProcessor",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.getCorsProcessor()",
            "public org.springframework.web.cors.reactive.CorsProcessor getCorsProcessor()"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.getHandler(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> getHandler(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping",
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping()",
            "public org.springframework.web.reactive.handler.SimpleUrlHandlerMapping()"
        ],
        [
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping",
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.reactive.handler.SimpleUrlHandlerMapping(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping",
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping(java.util.Map<java.lang.String, ?>, int)",
            "public org.springframework.web.reactive.handler.SimpleUrlHandlerMapping(java.util.Map<java.lang.String, ?>, int)"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping.setMappings(java.util.Properties)",
            "public void setMappings(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping.setUrlMap(java.util.Map<java.lang.String, ?>)",
            "public void setUrlMap(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, ?>",
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping.getUrlMap()",
            "public java.util.Map<java.lang.String, ?> getUrlMap()"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping.initApplicationContext()",
            "public void initApplicationContext() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.web.reactive.handler.AbstractUrlHandlerMapping",
            "org.springframework.web.reactive.handler.AbstractUrlHandlerMapping()",
            "public org.springframework.web.reactive.handler.AbstractUrlHandlerMapping()"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractUrlHandlerMapping.setLazyInitHandlers(boolean)",
            "public void setLazyInitHandlers(boolean)"
        ],
        [
            "java.util.Map<org.springframework.web.util.pattern.PathPattern, java.lang.Object>",
            "org.springframework.web.reactive.handler.AbstractUrlHandlerMapping.getHandlerMap()",
            "public final java.util.Map<org.springframework.web.util.pattern.PathPattern, java.lang.Object> getHandlerMap()"
        ],
        [
            "void",
            "org.springframework.web.reactive.handler.AbstractUrlHandlerMapping.setHandlerPredicate(java.util.function.BiPredicate<java.lang.Object, org.springframework.web.server.ServerWebExchange>)",
            "public void setHandlerPredicate(java.util.function.BiPredicate<java.lang.Object, org.springframework.web.server.ServerWebExchange>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.handler.AbstractUrlHandlerMapping.getHandlerInternal(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> getHandlerInternal(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.handler.WebFluxResponseStatusExceptionHandler",
            "org.springframework.web.reactive.handler.WebFluxResponseStatusExceptionHandler()",
            "public org.springframework.web.reactive.handler.WebFluxResponseStatusExceptionHandler()"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters",
            "org.springframework.web.reactive.function.BodyInserters()",
            "public org.springframework.web.reactive.function.BodyInserters()"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.empty()",
            "public static <T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage> empty()"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.fromValue(T)",
            "public static <T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage> fromValue(T)"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.fromObject(T)",
            "public static <T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage> fromObject(T)"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.fromProducer(T, java.lang.Class<?>)",
            "public static <T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage> fromProducer(T, java.lang.Class<?>)"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.fromProducer(T, org.springframework.core.ParameterizedTypeReference<?>)",
            "public static <T> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage> fromProducer(T, org.springframework.core.ParameterizedTypeReference<?>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserter<P, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.fromPublisher(P, java.lang.Class<T>)",
            "public static <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserter<P, org.springframework.http.ReactiveHttpOutputMessage> fromPublisher(P, java.lang.Class<T>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserter<P, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.fromPublisher(P, org.springframework.core.ParameterizedTypeReference<T>)",
            "public static <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserter<P, org.springframework.http.ReactiveHttpOutputMessage> fromPublisher(P, org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T extends org.springframework.core.io.Resource> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.fromResource(T)",
            "public static <T extends org.springframework.core.io.Resource> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage> fromResource(T)"
        ],
        [
            "<T, S extends org.reactivestreams.Publisher<org.springframework.http.codec.ServerSentEvent<T>>> org.springframework.web.reactive.function.BodyInserter<S, org.springframework.http.server.reactive.ServerHttpResponse>",
            "org.springframework.web.reactive.function.BodyInserters.fromServerSentEvents(S)",
            "public static <T, S extends org.reactivestreams.Publisher<org.springframework.http.codec.ServerSentEvent<T>>> org.springframework.web.reactive.function.BodyInserter<S, org.springframework.http.server.reactive.ServerHttpResponse> fromServerSentEvents(S)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$FormInserter<java.lang.String>",
            "org.springframework.web.reactive.function.BodyInserters.fromFormData(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public static org.springframework.web.reactive.function.BodyInserters$FormInserter<java.lang.String> fromFormData(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$FormInserter<java.lang.String>",
            "org.springframework.web.reactive.function.BodyInserters.fromFormData(java.lang.String, java.lang.String)",
            "public static org.springframework.web.reactive.function.BodyInserters$FormInserter<java.lang.String> fromFormData(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$MultipartInserter",
            "org.springframework.web.reactive.function.BodyInserters.fromMultipartData(org.springframework.util.MultiValueMap<java.lang.String, ?>)",
            "public static org.springframework.web.reactive.function.BodyInserters$MultipartInserter fromMultipartData(org.springframework.util.MultiValueMap<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$MultipartInserter",
            "org.springframework.web.reactive.function.BodyInserters.fromMultipartData(java.lang.String, java.lang.Object)",
            "public static org.springframework.web.reactive.function.BodyInserters$MultipartInserter fromMultipartData(java.lang.String, java.lang.Object)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserters$MultipartInserter",
            "org.springframework.web.reactive.function.BodyInserters.fromMultipartAsyncData(java.lang.String, P, java.lang.Class<T>)",
            "public static <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserters$MultipartInserter fromMultipartAsyncData(java.lang.String, P, java.lang.Class<T>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserters$MultipartInserter",
            "org.springframework.web.reactive.function.BodyInserters.fromMultipartAsyncData(java.lang.String, P, org.springframework.core.ParameterizedTypeReference<T>)",
            "public static <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserters$MultipartInserter fromMultipartAsyncData(java.lang.String, P, org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T extends org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage>",
            "org.springframework.web.reactive.function.BodyInserters.fromDataBuffers(T)",
            "public static <T extends org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>> org.springframework.web.reactive.function.BodyInserter<T, org.springframework.http.ReactiveHttpOutputMessage> fromDataBuffers(T)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientResponseException",
            "org.springframework.web.reactive.function.client.WebClientResponseException(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.reactive.function.client.WebClientResponseException(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientResponseException",
            "org.springframework.web.reactive.function.client.WebClientResponseException(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset, org.springframework.http.HttpRequest)",
            "public org.springframework.web.reactive.function.client.WebClientResponseException(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset, org.springframework.http.HttpRequest)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientResponseException",
            "org.springframework.web.reactive.function.client.WebClientResponseException(java.lang.String, int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.reactive.function.client.WebClientResponseException(java.lang.String, int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientResponseException",
            "org.springframework.web.reactive.function.client.WebClientResponseException(java.lang.String, int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset, org.springframework.http.HttpRequest)",
            "public org.springframework.web.reactive.function.client.WebClientResponseException(java.lang.String, int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset, org.springframework.http.HttpRequest)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.reactive.function.client.WebClientResponseException.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.web.reactive.function.client.WebClientResponseException.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.WebClientResponseException.getStatusText()",
            "public java.lang.String getStatusText()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.WebClientResponseException.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "byte[]",
            "org.springframework.web.reactive.function.client.WebClientResponseException.getResponseBodyAsByteArray()",
            "public byte[] getResponseBodyAsByteArray()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.WebClientResponseException.getResponseBodyAsString()",
            "public java.lang.String getResponseBodyAsString()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.WebClientResponseException.getResponseBodyAsString(java.nio.charset.Charset)",
            "public java.lang.String getResponseBodyAsString(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.http.HttpRequest",
            "org.springframework.web.reactive.function.client.WebClientResponseException.getRequest()",
            "public org.springframework.http.HttpRequest getRequest()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientResponseException",
            "org.springframework.web.reactive.function.client.WebClientResponseException.create(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public static org.springframework.web.reactive.function.client.WebClientResponseException create(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientResponseException",
            "org.springframework.web.reactive.function.client.WebClientResponseException.create(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset, org.springframework.http.HttpRequest)",
            "public static org.springframework.web.reactive.function.client.WebClientResponseException create(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset, org.springframework.http.HttpRequest)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse$1.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "java.util.Optional<org.springframework.http.server.reactive.ServerHttpResponse>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse$1.serverResponse()",
            "public java.util.Optional<org.springframework.http.server.reactive.ServerHttpResponse> serverResponse()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse$1.hints()",
            "public java.util.Map<java.lang.String, java.lang.Object> hints()"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder()",
            "public org.springframework.web.reactive.function.client.DefaultWebClientBuilder()"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder(org.springframework.web.reactive.function.client.DefaultWebClientBuilder)",
            "public org.springframework.web.reactive.function.client.DefaultWebClientBuilder(org.springframework.web.reactive.function.client.DefaultWebClientBuilder)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.baseUrl(java.lang.String)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder baseUrl(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.defaultUriVariables(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder defaultUriVariables(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.uriBuilderFactory(org.springframework.web.util.UriBuilderFactory)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder uriBuilderFactory(org.springframework.web.util.UriBuilderFactory)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.defaultHeader(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder defaultHeader(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.defaultHeaders(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder defaultHeaders(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.defaultCookie(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder defaultCookie(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.defaultCookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder defaultCookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.defaultRequest(java.util.function.Consumer<org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder defaultRequest(java.util.function.Consumer<org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.filter(org.springframework.web.reactive.function.client.ExchangeFilterFunction)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder filter(org.springframework.web.reactive.function.client.ExchangeFilterFunction)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.filters(java.util.function.Consumer<java.util.List<org.springframework.web.reactive.function.client.ExchangeFilterFunction>>)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder filters(java.util.function.Consumer<java.util.List<org.springframework.web.reactive.function.client.ExchangeFilterFunction>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.clientConnector(org.springframework.http.client.reactive.ClientHttpConnector)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder clientConnector(org.springframework.http.client.reactive.ClientHttpConnector)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.codecs(java.util.function.Consumer<org.springframework.http.codec.ClientCodecConfigurer>)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder codecs(java.util.function.Consumer<org.springframework.http.codec.ClientCodecConfigurer>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.exchangeStrategies(org.springframework.web.reactive.function.client.ExchangeStrategies)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder exchangeStrategies(org.springframework.web.reactive.function.client.ExchangeStrategies)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.exchangeStrategies(java.util.function.Consumer<org.springframework.web.reactive.function.client.ExchangeStrategies$Builder>)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder exchangeStrategies(java.util.function.Consumer<org.springframework.web.reactive.function.client.ExchangeStrategies$Builder>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.exchangeFunction(org.springframework.web.reactive.function.client.ExchangeFunction)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder exchangeFunction(org.springframework.web.reactive.function.client.ExchangeFunction)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.apply(java.util.function.Consumer<org.springframework.web.reactive.function.client.WebClient$Builder>)",
            "public org.springframework.web.reactive.function.client.WebClient$Builder apply(java.util.function.Consumer<org.springframework.web.reactive.function.client.WebClient$Builder>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.clone()",
            "public org.springframework.web.reactive.function.client.WebClient$Builder clone()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.build()",
            "public org.springframework.web.reactive.function.client.WebClient build()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.DefaultWebClientBuilder.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultClientResponse",
            "org.springframework.web.reactive.function.client.DefaultClientResponse(org.springframework.http.client.reactive.ClientHttpResponse, org.springframework.web.reactive.function.client.ExchangeStrategies, java.lang.String, java.lang.String, java.util.function.Supplier<org.springframework.http.HttpRequest>)",
            "public org.springframework.web.reactive.function.client.DefaultClientResponse(org.springframework.http.client.reactive.ClientHttpResponse, org.springframework.web.reactive.function.client.ExchangeStrategies, java.lang.String, java.lang.String, java.util.function.Supplier<org.springframework.http.HttpRequest>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeStrategies",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.strategies()",
            "public org.springframework.web.reactive.function.client.ExchangeStrategies strategies()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.statusCode()",
            "public org.springframework.http.HttpStatus statusCode()"
        ],
        [
            "int",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.rawStatusCode()",
            "public int rawStatusCode()"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Headers",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.headers()",
            "public org.springframework.web.reactive.function.client.ClientResponse$Headers headers()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.cookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> cookies()"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.client.reactive.ClientHttpResponse>)",
            "public <T> T body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.client.reactive.ClientHttpResponse>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToMono(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToFlux(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.releaseBody()",
            "public reactor.core.publisher.Mono<java.lang.Void> releaseBody()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.toBodilessEntity()",
            "public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> toBodilessEntity()"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.toEntity(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> toEntity(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.toEntity(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> toEntity(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.toEntityList(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> toEntityList(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.toEntityList(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> toEntityList(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.WebClientResponseException>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.createException()",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.WebClientResponseException> createException()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.DefaultClientResponse.logPrefix()",
            "public java.lang.String logPrefix()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction.org.springframework.web.reactive.function.client.ExchangeFilterFunction andThen(org.springframework.web.reactive.function.client.ExchangeFilterFunction)",
            "public default org.springframework.web.reactive.function.client.ExchangeFilterFunction andThen(org.springframework.web.reactive.function.client.ExchangeFilterFunction)"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction.org.springframework.web.reactive.function.client.ExchangeFunction apply(org.springframework.web.reactive.function.client.ExchangeFunction)",
            "public default org.springframework.web.reactive.function.client.ExchangeFunction apply(org.springframework.web.reactive.function.client.ExchangeFunction)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction.ofRequestProcessor(java.util.function.Function<org.springframework.web.reactive.function.client.ClientRequest, reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientRequest>>)",
            "public static org.springframework.web.reactive.function.client.ExchangeFilterFunction ofRequestProcessor(java.util.function.Function<org.springframework.web.reactive.function.client.ClientRequest, reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientRequest>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction.ofResponseProcessor(java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientResponse>>)",
            "public static org.springframework.web.reactive.function.client.ExchangeFilterFunction ofResponseProcessor(java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientResponse>>)"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.client.ExchangeStrategies.org.springframework.web.reactive.function.client.ExchangeStrategies$Builder mutate()",
            "public default org.springframework.web.reactive.function.client.ExchangeStrategies$Builder mutate()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeStrategies",
            "org.springframework.web.reactive.function.client.ExchangeStrategies.withDefaults()",
            "public static org.springframework.web.reactive.function.client.ExchangeStrategies withDefaults()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeStrategies$Builder",
            "org.springframework.web.reactive.function.client.ExchangeStrategies.builder()",
            "public static org.springframework.web.reactive.function.client.ExchangeStrategies$Builder builder()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeStrategies$Builder",
            "org.springframework.web.reactive.function.client.ExchangeStrategies.empty()",
            "public static org.springframework.web.reactive.function.client.ExchangeStrategies$Builder empty()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFunctions",
            "org.springframework.web.reactive.function.client.ExchangeFunctions()",
            "public org.springframework.web.reactive.function.client.ExchangeFunctions()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFunction",
            "org.springframework.web.reactive.function.client.ExchangeFunctions.create(org.springframework.http.client.reactive.ClientHttpConnector)",
            "public static org.springframework.web.reactive.function.client.ExchangeFunction create(org.springframework.http.client.reactive.ClientHttpConnector)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFunction",
            "org.springframework.web.reactive.function.client.ExchangeFunctions.create(org.springframework.http.client.reactive.ClientHttpConnector, org.springframework.web.reactive.function.client.ExchangeStrategies)",
            "public static org.springframework.web.reactive.function.client.ExchangeFunction create(org.springframework.http.client.reactive.ClientHttpConnector, org.springframework.web.reactive.function.client.ExchangeStrategies)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder",
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder()",
            "public org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder.defaultConfiguration()",
            "public void defaultConfiguration()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeStrategies$Builder",
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder.codecs(java.util.function.Consumer<org.springframework.http.codec.ClientCodecConfigurer>)",
            "public org.springframework.web.reactive.function.client.ExchangeStrategies$Builder codecs(java.util.function.Consumer<org.springframework.http.codec.ClientCodecConfigurer>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeStrategies",
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder.build()",
            "public org.springframework.web.reactive.function.client.ExchangeStrategies build()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec$1.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec$1.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec$1.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec$1.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies",
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies(org.springframework.http.codec.ClientCodecConfigurer)",
            "public org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies(org.springframework.http.codec.ClientCodecConfigurer)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies.messageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeStrategies$Builder",
            "org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies.mutate()",
            "public org.springframework.web.reactive.function.client.ExchangeStrategies$Builder mutate()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient",
            "org.springframework.web.reactive.function.client.WebClient.create()",
            "public static org.springframework.web.reactive.function.client.WebClient create()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient",
            "org.springframework.web.reactive.function.client.WebClient.create(java.lang.String)",
            "public static org.springframework.web.reactive.function.client.WebClient create(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.WebClient.builder()",
            "public static org.springframework.web.reactive.function.client.WebClient$Builder builder()"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.statusCode(org.springframework.http.HttpStatus)",
            "public org.springframework.web.reactive.function.client.DefaultClientResponseBuilder statusCode(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.rawStatusCode(int)",
            "public org.springframework.web.reactive.function.client.DefaultClientResponseBuilder rawStatusCode(int)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.cookie(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.client.DefaultClientResponseBuilder cookie(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>>)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.body(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>>)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder body(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.body(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder body(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.body(java.lang.String)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder body(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.request(org.springframework.http.HttpRequest)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder request(org.springframework.http.HttpRequest)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.build()",
            "public org.springframework.web.reactive.function.client.ClientResponse build()"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.cookie(java.lang.String, java.lang.String[])",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder cookie(java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.rawStatusCode(int)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder rawStatusCode(int)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.statusCode(org.springframework.http.HttpStatus)",
            "public org.springframework.web.reactive.function.client.ClientResponse$Builder statusCode(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler(java.util.function.IntPredicate, java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<? extends java.lang.Throwable>>)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler(java.util.function.IntPredicate, java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<? extends java.lang.Throwable>>)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler.test(int)",
            "public boolean test(int)"
        ],
        [
            "reactor.core.publisher.Mono<? extends java.lang.Throwable>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler.apply(org.springframework.web.reactive.function.client.ClientResponse)",
            "public reactor.core.publisher.Mono<? extends java.lang.Throwable> apply(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder(org.springframework.web.reactive.function.client.ClientRequest)",
            "public org.springframework.web.reactive.function.client.DefaultClientRequestBuilder(org.springframework.web.reactive.function.client.ClientRequest)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder(org.springframework.http.HttpMethod, java.net.URI)",
            "public org.springframework.web.reactive.function.client.DefaultClientRequestBuilder(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.method(org.springframework.http.HttpMethod)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder method(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.url(java.net.URI)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder url(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.cookie(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder cookie(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)"
        ],
        [
            "<S, P extends org.reactivestreams.Publisher<S>> org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.body(P, java.lang.Class<S>)",
            "public <S, P extends org.reactivestreams.Publisher<S>> org.springframework.web.reactive.function.client.ClientRequest$Builder body(P, java.lang.Class<S>)"
        ],
        [
            "<S, P extends org.reactivestreams.Publisher<S>> org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.body(P, org.springframework.core.ParameterizedTypeReference<S>)",
            "public <S, P extends org.reactivestreams.Publisher<S>> org.springframework.web.reactive.function.client.ClientRequest$Builder body(P, org.springframework.core.ParameterizedTypeReference<S>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.attributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder attributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.httpRequest(java.util.function.Consumer<org.springframework.http.client.reactive.ClientHttpRequest>)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder httpRequest(java.util.function.Consumer<org.springframework.http.client.reactive.ClientHttpRequest>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.body(org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>)",
            "public org.springframework.web.reactive.function.client.ClientRequest$Builder body(org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.build()",
            "public org.springframework.web.reactive.function.client.ClientRequest build()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient.get()",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec<?> get()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient.head()",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec<?> head()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient.post()",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec post()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient.put()",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec put()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient.patch()",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec patch()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient.delete()",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec<?> delete()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient.options()",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec<?> options()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient.method(org.springframework.http.HttpMethod)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec method(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$Builder",
            "org.springframework.web.reactive.function.client.DefaultWebClient.mutate()",
            "public org.springframework.web.reactive.function.client.WebClient$Builder mutate()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.function.client.ClientResponse$1.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.function.client.ClientResponse$1.messageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters()"
        ],
        [
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper(org.springframework.web.reactive.function.client.ClientResponse)",
            "public org.springframework.web.reactive.function.client.support.ClientResponseWrapper(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.response()",
            "public org.springframework.web.reactive.function.client.ClientResponse response()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeStrategies",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.strategies()",
            "public org.springframework.web.reactive.function.client.ExchangeStrategies strategies()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.statusCode()",
            "public org.springframework.http.HttpStatus statusCode()"
        ],
        [
            "int",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.rawStatusCode()",
            "public int rawStatusCode()"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Headers",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.headers()",
            "public org.springframework.web.reactive.function.client.ClientResponse$Headers headers()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.cookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> cookies()"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.client.reactive.ClientHttpResponse>)",
            "public <T> T body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.client.reactive.ClientHttpResponse>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.bodyToMono(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.bodyToFlux(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.releaseBody()",
            "public reactor.core.publisher.Mono<java.lang.Void> releaseBody()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.toBodilessEntity()",
            "public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> toBodilessEntity()"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.toEntity(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> toEntity(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.toEntity(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> toEntity(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.toEntityList(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> toEntityList(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.toEntityList(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> toEntityList(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.WebClientResponseException>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.createException()",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.WebClientResponseException> createException()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper.logPrefix()",
            "public java.lang.String logPrefix()"
        ],
        [
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper$HeadersWrapper",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper$HeadersWrapper(org.springframework.web.reactive.function.client.ClientResponse$Headers)",
            "public org.springframework.web.reactive.function.client.support.ClientResponseWrapper$HeadersWrapper(org.springframework.web.reactive.function.client.ClientResponse$Headers)"
        ],
        [
            "java.util.OptionalLong",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper$HeadersWrapper.contentLength()",
            "public java.util.OptionalLong contentLength()"
        ],
        [
            "java.util.Optional<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper$HeadersWrapper.contentType()",
            "public java.util.Optional<org.springframework.http.MediaType> contentType()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper$HeadersWrapper.header(java.lang.String)",
            "public java.util.List<java.lang.String> header(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.support.ClientResponseWrapper$HeadersWrapper.asHttpHeaders()",
            "public org.springframework.http.HttpHeaders asHttpHeaders()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions()",
            "public org.springframework.web.reactive.function.client.ExchangeFilterFunctions()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions.limitResponseSize(long)",
            "public static org.springframework.web.reactive.function.client.ExchangeFilterFunction limitResponseSize(long)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions.statusError(java.util.function.Predicate<org.springframework.http.HttpStatus>, java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, ? extends java.lang.Throwable>)",
            "public static org.springframework.web.reactive.function.client.ExchangeFilterFunction statusError(java.util.function.Predicate<org.springframework.http.HttpStatus>, java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, ? extends java.lang.Throwable>)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions.basicAuthentication(java.lang.String, java.lang.String)",
            "public static org.springframework.web.reactive.function.client.ExchangeFilterFunction basicAuthentication(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFilterFunction",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions.basicAuthentication()",
            "public static org.springframework.web.reactive.function.client.ExchangeFilterFunction basicAuthentication()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder$BuiltClientHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder$BuiltClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder$BuiltClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder$BuiltClientHttpResponse.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder$BuiltClientHttpResponse.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "java.util.OptionalLong",
            "org.springframework.web.reactive.function.client.DefaultClientResponse$DefaultHeaders.contentLength()",
            "public java.util.OptionalLong contentLength()"
        ],
        [
            "java.util.Optional<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse$DefaultHeaders.contentType()",
            "public java.util.Optional<org.springframework.http.MediaType> contentType()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.function.client.DefaultClientResponse$DefaultHeaders.header(java.lang.String)",
            "public java.util.List<java.lang.String> header(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.DefaultClientResponse$DefaultHeaders.asHttpHeaders()",
            "public org.springframework.http.HttpHeaders asHttpHeaders()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientRequestException",
            "org.springframework.web.reactive.function.client.WebClientRequestException(java.lang.Throwable, org.springframework.http.HttpMethod, java.net.URI, org.springframework.http.HttpHeaders)",
            "public org.springframework.web.reactive.function.client.WebClientRequestException(java.lang.Throwable, org.springframework.http.HttpMethod, java.net.URI, org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.reactive.function.client.WebClientRequestException.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.client.WebClientRequestException.getUri()",
            "public java.net.URI getUri()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.WebClientRequestException.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$ResponseSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.onStatus(java.util.function.Predicate<org.springframework.http.HttpStatus>, java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<? extends java.lang.Throwable>>)",
            "public org.springframework.web.reactive.function.client.WebClient$ResponseSpec onStatus(java.util.function.Predicate<org.springframework.http.HttpStatus>, java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<? extends java.lang.Throwable>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$ResponseSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.onRawStatus(java.util.function.IntPredicate, java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<? extends java.lang.Throwable>>)",
            "public org.springframework.web.reactive.function.client.WebClient$ResponseSpec onRawStatus(java.util.function.IntPredicate, java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<? extends java.lang.Throwable>>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToFlux(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.toEntity(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> toEntity(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.toEntity(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> toEntity(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.toEntityList(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> toEntityList(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.toEntityList(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> toEntityList(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<reactor.core.publisher.Flux<T>>>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.toEntityFlux(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<reactor.core.publisher.Flux<T>>> toEntityFlux(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<reactor.core.publisher.Flux<T>>>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.toEntityFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<reactor.core.publisher.Flux<T>>> toEntityFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<reactor.core.publisher.Flux<T>>>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.toEntityFlux(org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<T>, ? super org.springframework.http.client.reactive.ClientHttpResponse>)",
            "public <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<reactor.core.publisher.Flux<T>>> toEntityFlux(org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<T>, ? super org.springframework.http.client.reactive.ClientHttpResponse>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.toBodilessEntity()",
            "public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> toBodilessEntity()"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions$Credentials",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions$Credentials(java.lang.String, java.lang.String)",
            "public org.springframework.web.reactive.function.client.ExchangeFilterFunctions$Credentials(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions$Credentials.basicAuthenticationCredentials(java.lang.String, java.lang.String)",
            "public static java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>> basicAuthenticationCredentials(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions$Credentials.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.reactive.function.client.ExchangeFilterFunctions$Credentials.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest$1.messageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters()"
        ],
        [
            "java.util.Optional<org.springframework.http.server.reactive.ServerHttpRequest>",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest$1.serverRequest()",
            "public java.util.Optional<org.springframework.http.server.reactive.ServerHttpRequest> serverRequest()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest$1.hints()",
            "public java.util.Map<java.lang.String, java.lang.Object> hints()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.lang.Object...)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec uri(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec uri(java.lang.String, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.util.function.Function<org.springframework.web.util.UriBuilder, java.net.URI>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec uri(java.lang.String, java.util.function.Function<org.springframework.web.util.UriBuilder, java.net.URI>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.util.function.Function<org.springframework.web.util.UriBuilder, java.net.URI>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec uri(java.util.function.Function<org.springframework.web.util.UriBuilder, java.net.URI>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.net.URI)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec uri(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.header(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.accept(org.springframework.http.MediaType...)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec accept(org.springframework.http.MediaType...)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.acceptCharset(java.nio.charset.Charset...)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec acceptCharset(java.nio.charset.Charset...)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.contentType(org.springframework.http.MediaType)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.contentLength(long)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec contentLength(long)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.cookie(java.lang.String, java.lang.String)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec cookie(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.ifModifiedSince(java.time.ZonedDateTime)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec ifModifiedSince(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.ifNoneMatch(java.lang.String...)",
            "public org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec ifNoneMatch(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.attributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec attributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.context(java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec context(java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.httpRequest(java.util.function.Consumer<org.springframework.http.client.reactive.ClientHttpRequest>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec httpRequest(java.util.function.Consumer<org.springframework.http.client.reactive.ClientHttpRequest>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.bodyValue(java.lang.Object)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> bodyValue(java.lang.Object)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.body(P, org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> body(P, org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.body(P, java.lang.Class<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> body(P, java.lang.Class<T>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.body(java.lang.Object, java.lang.Class<?>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> body(java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.body(java.lang.Object, org.springframework.core.ParameterizedTypeReference<?>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> body(java.lang.Object, org.springframework.core.ParameterizedTypeReference<?>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.body(org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> body(org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.syncBody(java.lang.Object)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> syncBody(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$ResponseSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.retrieve()",
            "public org.springframework.web.reactive.function.client.WebClient$ResponseSpec retrieve()"
        ],
        [
            "<V> reactor.core.publisher.Mono<V>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.exchangeToMono(java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, ? extends reactor.core.publisher.Mono<V>>)",
            "public <V> reactor.core.publisher.Mono<V> exchangeToMono(java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, ? extends reactor.core.publisher.Mono<V>>)"
        ],
        [
            "<V> reactor.core.publisher.Flux<V>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.exchangeToFlux(java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, ? extends reactor.core.publisher.Flux<V>>)",
            "public <V> reactor.core.publisher.Flux<V> exchangeToFlux(java.util.function.Function<org.springframework.web.reactive.function.client.ClientResponse, ? extends reactor.core.publisher.Flux<V>>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientResponse>",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.exchange()",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientResponse> exchange()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.contentType(org.springframework.http.MediaType)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.contentLength(long)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestBodySpec contentLength(long)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.httpRequest(java.util.function.Consumer)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec httpRequest(java.util.function.Consumer)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.context(java.util.function.Function)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec context(java.util.function.Function)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.attributes(java.util.function.Consumer)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec attributes(java.util.function.Consumer)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.headers(java.util.function.Consumer)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec headers(java.util.function.Consumer)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.header(java.lang.String, java.lang.String[])",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec header(java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.ifNoneMatch(java.lang.String[])",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec ifNoneMatch(java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.ifModifiedSince(java.time.ZonedDateTime)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec ifModifiedSince(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.cookies(java.util.function.Consumer)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec cookies(java.util.function.Consumer)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.cookie(java.lang.String, java.lang.String)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec cookie(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.acceptCharset(java.nio.charset.Charset[])",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec acceptCharset(java.nio.charset.Charset[])"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.accept(org.springframework.http.MediaType[])",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec accept(org.springframework.http.MediaType[])"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.util.function.Function)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec uri(java.util.function.Function)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.util.function.Function)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec uri(java.lang.String, java.util.function.Function)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.util.Map)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec uri(java.lang.String, java.util.Map)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.lang.Object[])",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec uri(java.lang.String, java.lang.Object[])"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec",
            "org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.uri(java.net.URI)",
            "public org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec uri(java.net.URI)"
        ],
        [
            "java.util.Optional<java.lang.Object>",
            "org.springframework.web.reactive.function.client.ClientRequest.attribute(java.lang.String)",
            "public default java.util.Optional<java.lang.Object> attribute(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.ClientRequest.from(org.springframework.web.reactive.function.client.ClientRequest)",
            "public static org.springframework.web.reactive.function.client.ClientRequest$Builder from(org.springframework.web.reactive.function.client.ClientRequest)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.ClientRequest.method(org.springframework.http.HttpMethod, java.net.URI)",
            "public static org.springframework.web.reactive.function.client.ClientRequest$Builder method(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientRequest$Builder",
            "org.springframework.web.reactive.function.client.ClientRequest.create(org.springframework.http.HttpMethod, java.net.URI)",
            "public static org.springframework.web.reactive.function.client.ClientRequest$Builder create(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction$1.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction$1.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction$1.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction$1.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.client.ClientResponse.org.springframework.web.reactive.function.client.ClientResponse$Builder mutate()",
            "public default org.springframework.web.reactive.function.client.ClientResponse$Builder mutate()"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.ClientResponse.from(org.springframework.web.reactive.function.client.ClientResponse)",
            "public static org.springframework.web.reactive.function.client.ClientResponse$Builder from(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.ClientResponse.create(org.springframework.http.HttpStatus)",
            "public static org.springframework.web.reactive.function.client.ClientResponse$Builder create(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.ClientResponse.create(org.springframework.http.HttpStatus, org.springframework.web.reactive.function.client.ExchangeStrategies)",
            "public static org.springframework.web.reactive.function.client.ClientResponse$Builder create(org.springframework.http.HttpStatus, org.springframework.web.reactive.function.client.ExchangeStrategies)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.ClientResponse.create(int, org.springframework.web.reactive.function.client.ExchangeStrategies)",
            "public static org.springframework.web.reactive.function.client.ClientResponse$Builder create(int, org.springframework.web.reactive.function.client.ExchangeStrategies)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponse$Builder",
            "org.springframework.web.reactive.function.client.ClientResponse.create(org.springframework.http.HttpStatus, java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)",
            "public static org.springframework.web.reactive.function.client.ClientResponse$Builder create(org.springframework.http.HttpStatus, java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.client.ExchangeFunction.org.springframework.web.reactive.function.client.ExchangeFunction filter(org.springframework.web.reactive.function.client.ExchangeFilterFunction)",
            "public default org.springframework.web.reactive.function.client.ExchangeFunction filter(org.springframework.web.reactive.function.client.ExchangeFilterFunction)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder$1.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder$1.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.DefaultClientResponseBuilder$1.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.WebClientUtils.mapToEntity(org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<T>)",
            "public static <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> mapToEntity(org.springframework.web.reactive.function.client.ClientResponse, reactor.core.publisher.Mono<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.WebClientUtils.mapToEntityList(org.springframework.web.reactive.function.client.ClientResponse, org.reactivestreams.Publisher<T>)",
            "public static <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> mapToEntityList(org.springframework.web.reactive.function.client.ClientResponse, org.reactivestreams.Publisher<T>)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientException",
            "org.springframework.web.reactive.function.client.WebClientException(java.lang.String)",
            "public org.springframework.web.reactive.function.client.WebClientException(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientException",
            "org.springframework.web.reactive.function.client.WebClientException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.reactive.function.client.WebClientException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest(org.springframework.http.HttpMethod, java.net.URI, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>, java.util.function.Consumer<org.springframework.http.client.reactive.ClientHttpRequest>)",
            "public org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest(org.springframework.http.HttpMethod, java.net.URI, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>, java.util.function.Consumer<org.springframework.http.client.reactive.ClientHttpRequest>)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.method()",
            "public org.springframework.http.HttpMethod method()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.url()",
            "public java.net.URI url()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.headers()",
            "public org.springframework.http.HttpHeaders headers()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.cookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> cookies()"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.body()",
            "public org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest> body()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.attributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> attributes()"
        ],
        [
            "java.util.function.Consumer<org.springframework.http.client.reactive.ClientHttpRequest>",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.httpRequest()",
            "public java.util.function.Consumer<org.springframework.http.client.reactive.ClientHttpRequest> httpRequest()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.logPrefix()",
            "public java.lang.String logPrefix()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.writeTo(org.springframework.http.client.reactive.ClientHttpRequest, org.springframework.web.reactive.function.client.ExchangeStrategies)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeTo(org.springframework.http.client.reactive.ClientHttpRequest, org.springframework.web.reactive.function.client.ExchangeStrategies)"
        ],
        [
            "org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction",
            "org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction(org.springframework.http.client.reactive.ClientHttpConnector, org.springframework.web.reactive.function.client.ExchangeStrategies)",
            "public org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction(org.springframework.http.client.reactive.ClientHttpConnector, org.springframework.web.reactive.function.client.ExchangeStrategies)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientResponse>",
            "org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.exchange(org.springframework.web.reactive.function.client.ClientRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientResponse> exchange(org.springframework.web.reactive.function.client.ClientRequest)"
        ],
        [
            "org.springframework.web.reactive.function.client.UnknownHttpStatusCodeException",
            "org.springframework.web.reactive.function.client.UnknownHttpStatusCodeException(int, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.reactive.function.client.UnknownHttpStatusCodeException(int, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.reactive.function.client.UnknownHttpStatusCodeException",
            "org.springframework.web.reactive.function.client.UnknownHttpStatusCodeException(int, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset, org.springframework.http.HttpRequest)",
            "public org.springframework.web.reactive.function.client.UnknownHttpStatusCodeException(int, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset, org.springframework.http.HttpRequest)"
        ],
        [
            "org.springframework.web.reactive.function.BodyExtractors",
            "org.springframework.web.reactive.function.BodyExtractors()",
            "public org.springframework.web.reactive.function.BodyExtractors()"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Mono<T>, org.springframework.http.ReactiveHttpInputMessage>",
            "org.springframework.web.reactive.function.BodyExtractors.toMono(java.lang.Class<? extends T>)",
            "public static <T> org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Mono<T>, org.springframework.http.ReactiveHttpInputMessage> toMono(java.lang.Class<? extends T>)"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Mono<T>, org.springframework.http.ReactiveHttpInputMessage>",
            "org.springframework.web.reactive.function.BodyExtractors.toMono(org.springframework.core.ParameterizedTypeReference<T>)",
            "public static <T> org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Mono<T>, org.springframework.http.ReactiveHttpInputMessage> toMono(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<T>, org.springframework.http.ReactiveHttpInputMessage>",
            "org.springframework.web.reactive.function.BodyExtractors.toFlux(java.lang.Class<? extends T>)",
            "public static <T> org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<T>, org.springframework.http.ReactiveHttpInputMessage> toFlux(java.lang.Class<? extends T>)"
        ],
        [
            "<T> org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<T>, org.springframework.http.ReactiveHttpInputMessage>",
            "org.springframework.web.reactive.function.BodyExtractors.toFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public static <T> org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<T>, org.springframework.http.ReactiveHttpInputMessage> toFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>, org.springframework.http.ReactiveHttpInputMessage>",
            "org.springframework.web.reactive.function.BodyExtractors.toFormData()",
            "public static org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>, org.springframework.http.ReactiveHttpInputMessage> toFormData()"
        ],
        [
            "org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>, org.springframework.http.server.reactive.ServerHttpRequest>",
            "org.springframework.web.reactive.function.BodyExtractors.toMultipartData()",
            "public static org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>, org.springframework.http.server.reactive.ServerHttpRequest> toMultipartData()"
        ],
        [
            "org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part>, org.springframework.http.server.reactive.ServerHttpRequest>",
            "org.springframework.web.reactive.function.BodyExtractors.toParts()",
            "public static org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part>, org.springframework.http.server.reactive.ServerHttpRequest> toParts()"
        ],
        [
            "org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, org.springframework.http.ReactiveHttpInputMessage>",
            "org.springframework.web.reactive.function.BodyExtractors.toDataBuffers()",
            "public static org.springframework.web.reactive.function.BodyExtractor<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, org.springframework.http.ReactiveHttpInputMessage> toDataBuffers()"
        ],
        [
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException",
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException(java.lang.String)",
            "public org.springframework.web.reactive.function.UnsupportedMediaTypeException(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException",
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>)",
            "public org.springframework.web.reactive.function.UnsupportedMediaTypeException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException",
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, org.springframework.core.ResolvableType)",
            "public org.springframework.web.reactive.function.UnsupportedMediaTypeException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException.getContentType()",
            "public org.springframework.http.MediaType getContentType()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.web.reactive.function.UnsupportedMediaTypeException.getBodyType()",
            "public org.springframework.core.ResolvableType getBodyType()"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder$DefaultRenderingResponse",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder$DefaultRenderingResponse(int, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder$DefaultRenderingResponse(int, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder$DefaultRenderingResponse.name()",
            "public java.lang.String name()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder$DefaultRenderingResponse.model()",
            "public java.util.Map<java.lang.String, java.lang.Object> model()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.ServerRequest$Headers.java.lang.String firstHeader(java.lang.String)",
            "public default java.lang.String firstHeader(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.from(org.springframework.web.reactive.function.server.ServerResponse)",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder from(org.springframework.web.reactive.function.server.ServerResponse)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.status(org.springframework.http.HttpStatus)",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder status(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.status(int)",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder status(int)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.ok()",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder ok()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.created(java.net.URI)",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder created(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.accepted()",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder accepted()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?>",
            "org.springframework.web.reactive.function.server.ServerResponse.noContent()",
            "public static org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?> noContent()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.seeOther(java.net.URI)",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder seeOther(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.temporaryRedirect(java.net.URI)",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder temporaryRedirect(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.permanentRedirect(java.net.URI)",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder permanentRedirect(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.badRequest()",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder badRequest()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?>",
            "org.springframework.web.reactive.function.server.ServerResponse.notFound()",
            "public static org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?> notFound()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponse.unprocessableEntity()",
            "public static org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder unprocessableEntity()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.ServerRequest.org.springframework.http.HttpMethod method()",
            "public default org.springframework.http.HttpMethod method()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.ServerRequest.java.lang.String path()",
            "public default java.lang.String path()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.ServerRequest.org.springframework.http.server.PathContainer pathContainer()",
            "public default org.springframework.http.server.PathContainer pathContainer()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.ServerRequest.org.springframework.http.server.RequestPath requestPath()",
            "public default org.springframework.http.server.RequestPath requestPath()"
        ],
        [
            "java.util.Optional<java.lang.Object>",
            "org.springframework.web.reactive.function.server.ServerRequest.attribute(java.lang.String)",
            "public default java.util.Optional<java.lang.Object> attribute(java.lang.String)"
        ],
        [
            "java.util.Optional<java.lang.String>",
            "org.springframework.web.reactive.function.server.ServerRequest.queryParam(java.lang.String)",
            "public default java.util.Optional<java.lang.String> queryParam(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.ServerRequest.java.lang.String pathVariable(java.lang.String)",
            "public default java.lang.String pathVariable(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.ServerRequest.checkNotModified(java.time.Instant)",
            "public default reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> checkNotModified(java.time.Instant)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.ServerRequest.checkNotModified(java.lang.String)",
            "public default reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> checkNotModified(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.ServerRequest.checkNotModified(java.time.Instant, java.lang.String)",
            "public default reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> checkNotModified(java.time.Instant, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest",
            "org.springframework.web.reactive.function.server.ServerRequest.create(org.springframework.web.server.ServerWebExchange, java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)",
            "public static org.springframework.web.reactive.function.server.ServerRequest create(org.springframework.web.server.ServerWebExchange, java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.ServerRequest.from(org.springframework.web.reactive.function.server.ServerRequest)",
            "public static org.springframework.web.reactive.function.server.ServerRequest$Builder from(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate(org.springframework.http.HttpMethod)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate(org.springframework.http.HttpMethod...)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate(org.springframework.http.HttpMethod...)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate.test(org.springframework.web.reactive.function.server.ServerRequest)",
            "public boolean test(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$AcceptPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$AcceptPredicate(org.springframework.http.MediaType...)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$AcceptPredicate(org.springframework.http.MediaType...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$AcceptPredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$AcceptPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunction.and(org.springframework.web.reactive.function.server.RouterFunction<T>)",
            "public default org.springframework.web.reactive.function.server.RouterFunction<T> and(org.springframework.web.reactive.function.server.RouterFunction<T>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<?>",
            "org.springframework.web.reactive.function.server.RouterFunction.andOther(org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public default org.springframework.web.reactive.function.server.RouterFunction<?> andOther(org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunction.andRoute(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<T>)",
            "public default org.springframework.web.reactive.function.server.RouterFunction<T> andRoute(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<T>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunction.andNest(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RouterFunction<T>)",
            "public default org.springframework.web.reactive.function.server.RouterFunction<T> andNest(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RouterFunction<T>)"
        ],
        [
            "<S extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<S>",
            "org.springframework.web.reactive.function.server.RouterFunction.filter(org.springframework.web.reactive.function.server.HandlerFilterFunction<T, S>)",
            "public default <S extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<S> filter(org.springframework.web.reactive.function.server.HandlerFilterFunction<T, S>)"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.RouterFunction.void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public default void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunction.withAttribute(java.lang.String, java.lang.Object)",
            "public default org.springframework.web.reactive.function.server.RouterFunction<T> withAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunction.withAttributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public default org.springframework.web.reactive.function.server.RouterFunction<T> withAttributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction",
            "org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<T>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<T>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>>",
            "org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction.route(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>> route(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction.accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$DifferentComposedRouterFunction",
            "org.springframework.web.reactive.function.server.RouterFunctions$DifferentComposedRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<?>, org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$DifferentComposedRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<?>, org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>>",
            "org.springframework.web.reactive.function.server.RouterFunctions$DifferentComposedRouterFunction.route(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> route(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctions$DifferentComposedRouterFunction.accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$NegateRequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$NegateRequestPredicate(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$NegateRequestPredicate(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RequestPredicates$NegateRequestPredicate.test(org.springframework.web.reactive.function.server.ServerRequest)",
            "public boolean test(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$NegateRequestPredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$NegateRequestPredicate.changeParser(org.springframework.web.util.pattern.PathPatternParser)",
            "public void changeParser(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$NegateRequestPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.add(org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder add(org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.GET(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder GET(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.GET(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder GET(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.GET(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder GET(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.GET(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder GET(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.HEAD(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder HEAD(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.HEAD(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder HEAD(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.HEAD(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder HEAD(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.HEAD(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder HEAD(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.POST(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder POST(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.POST(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder POST(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.POST(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder POST(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.POST(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder POST(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.PUT(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder PUT(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.PUT(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder PUT(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.PUT(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder PUT(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.PUT(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder PUT(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.PATCH(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder PATCH(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.PATCH(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder PATCH(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.PATCH(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder PATCH(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.PATCH(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder PATCH(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.DELETE(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder DELETE(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.DELETE(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder DELETE(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.DELETE(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder DELETE(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.DELETE(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder DELETE(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.OPTIONS(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder OPTIONS(org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.OPTIONS(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder OPTIONS(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.OPTIONS(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder OPTIONS(java.lang.String, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.OPTIONS(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder OPTIONS(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.route(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder route(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.resources(java.lang.String, org.springframework.core.io.Resource)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder resources(java.lang.String, org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.resources(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder resources(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.nest(org.springframework.web.reactive.function.server.RequestPredicate, java.util.function.Consumer<org.springframework.web.reactive.function.server.RouterFunctions$Builder>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder nest(org.springframework.web.reactive.function.server.RequestPredicate, java.util.function.Consumer<org.springframework.web.reactive.function.server.RouterFunctions$Builder>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.nest(org.springframework.web.reactive.function.server.RequestPredicate, java.util.function.Supplier<org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder nest(org.springframework.web.reactive.function.server.RequestPredicate, java.util.function.Supplier<org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.path(java.lang.String, java.util.function.Consumer<org.springframework.web.reactive.function.server.RouterFunctions$Builder>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder path(java.lang.String, java.util.function.Consumer<org.springframework.web.reactive.function.server.RouterFunctions$Builder>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.path(java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder path(java.lang.String, java.util.function.Supplier<org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.filter(org.springframework.web.reactive.function.server.HandlerFilterFunction<org.springframework.web.reactive.function.server.ServerResponse, org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder filter(org.springframework.web.reactive.function.server.HandlerFilterFunction<org.springframework.web.reactive.function.server.ServerResponse, org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.before(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.reactive.function.server.ServerRequest>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder before(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.reactive.function.server.ServerRequest>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.after(java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.reactive.function.server.ServerResponse, org.springframework.web.reactive.function.server.ServerResponse>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder after(java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.reactive.function.server.ServerResponse, org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.onError(java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.BiFunction<? super java.lang.Throwable, org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder onError(java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.BiFunction<? super java.lang.Throwable, org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "<T extends java.lang.Throwable> org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.onError(java.lang.Class<T>, java.util.function.BiFunction<? super T, org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public <T extends java.lang.Throwable> org.springframework.web.reactive.function.server.RouterFunctions$Builder onError(java.lang.Class<T>, java.util.function.BiFunction<? super T, org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.withAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder withAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.withAttributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$Builder withAttributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder.build()",
            "public org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> build()"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterResponse",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterResponse(int, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>, org.springframework.web.reactive.function.BodyInserter<T, ? super org.springframework.http.server.reactive.ServerHttpResponse>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterResponse(int, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>, org.springframework.web.reactive.function.BodyInserter<T, ? super org.springframework.http.server.reactive.ServerHttpResponse>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions",
            "org.springframework.web.reactive.function.server.RouterFunctions()",
            "public org.springframework.web.reactive.function.server.RouterFunctions()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctions.route()",
            "public static org.springframework.web.reactive.function.server.RouterFunctions$Builder route()"
        ],
        [
            "<T extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunctions.route(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<T>)",
            "public static <T extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<T> route(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<T>)"
        ],
        [
            "<T extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunctions.nest(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RouterFunction<T>)",
            "public static <T extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<T> nest(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RouterFunction<T>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctions.resources(java.lang.String, org.springframework.core.io.Resource)",
            "public static org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> resources(java.lang.String, org.springframework.core.io.Resource)"
        ],
        [
            "java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>",
            "org.springframework.web.reactive.function.server.RouterFunctions.resourceLookupFunction(java.lang.String, org.springframework.core.io.Resource)",
            "public static java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>> resourceLookupFunction(java.lang.String, org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctions.resources(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)",
            "public static org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> resources(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)"
        ],
        [
            "org.springframework.http.server.reactive.HttpHandler",
            "org.springframework.web.reactive.function.server.RouterFunctions.toHttpHandler(org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public static org.springframework.http.server.reactive.HttpHandler toHttpHandler(org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "org.springframework.http.server.reactive.HttpHandler",
            "org.springframework.web.reactive.function.server.RouterFunctions.toHttpHandler(org.springframework.web.reactive.function.server.RouterFunction<?>, org.springframework.web.reactive.function.server.HandlerStrategies)",
            "public static org.springframework.http.server.reactive.HttpHandler toHttpHandler(org.springframework.web.reactive.function.server.RouterFunction<?>, org.springframework.web.reactive.function.server.HandlerStrategies)"
        ],
        [
            "org.springframework.web.server.WebHandler",
            "org.springframework.web.reactive.function.server.RouterFunctions.toWebHandler(org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public static org.springframework.web.server.WebHandler toWebHandler(org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "org.springframework.web.server.WebHandler",
            "org.springframework.web.reactive.function.server.RouterFunctions.toWebHandler(org.springframework.web.reactive.function.server.RouterFunction<?>, org.springframework.web.reactive.function.server.HandlerStrategies)",
            "public static org.springframework.web.server.WebHandler toWebHandler(org.springframework.web.reactive.function.server.RouterFunction<?>, org.springframework.web.reactive.function.server.HandlerStrategies)"
        ],
        [
            "<T extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunctions.changeParser(org.springframework.web.reactive.function.server.RouterFunction<T>, org.springframework.web.util.pattern.PathPatternParser)",
            "public static <T extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<T> changeParser(org.springframework.web.reactive.function.server.RouterFunction<T>, org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates",
            "org.springframework.web.reactive.function.server.RequestPredicates()",
            "public org.springframework.web.reactive.function.server.RequestPredicates()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.all()",
            "public static org.springframework.web.reactive.function.server.RequestPredicate all()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.method(org.springframework.http.HttpMethod)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate method(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.methods(org.springframework.http.HttpMethod...)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate methods(org.springframework.http.HttpMethod...)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.path(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate path(java.lang.String)"
        ],
        [
            "java.util.function.Function<java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate>",
            "org.springframework.web.reactive.function.server.RequestPredicates.pathPredicates(org.springframework.web.util.pattern.PathPatternParser)",
            "public static java.util.function.Function<java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate> pathPredicates(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.headers(java.util.function.Predicate<org.springframework.web.reactive.function.server.ServerRequest$Headers>)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate headers(java.util.function.Predicate<org.springframework.web.reactive.function.server.ServerRequest$Headers>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.contentType(org.springframework.http.MediaType...)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate contentType(org.springframework.http.MediaType...)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.accept(org.springframework.http.MediaType...)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate accept(org.springframework.http.MediaType...)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.GET(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate GET(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.HEAD(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate HEAD(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.POST(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate POST(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.PUT(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate PUT(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.PATCH(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate PATCH(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.DELETE(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate DELETE(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.OPTIONS(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate OPTIONS(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.pathExtension(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate pathExtension(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.pathExtension(java.util.function.Predicate<java.lang.String>)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate pathExtension(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.queryParam(java.lang.String, java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate queryParam(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates.queryParam(java.lang.String, java.util.function.Predicate<java.lang.String>)",
            "public static org.springframework.web.reactive.function.server.RequestPredicate queryParam(java.lang.String, java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "org.springframework.web.reactive.function.server.PathResourceLookupFunction",
            "org.springframework.web.reactive.function.server.PathResourceLookupFunction(java.lang.String, org.springframework.core.io.Resource)",
            "public org.springframework.web.reactive.function.server.PathResourceLookupFunction(java.lang.String, org.springframework.core.io.Resource)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.function.server.PathResourceLookupFunction.apply(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.core.io.Resource> apply(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.PathResourceLookupFunction.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.PathResourceLookupFunction.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder$DefaultEntityResponse",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder$DefaultEntityResponse(int, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>, T, org.springframework.web.reactive.function.BodyInserter<T, ? super org.springframework.http.server.reactive.ServerHttpResponse>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder$DefaultEntityResponse(int, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>, T, org.springframework.web.reactive.function.BodyInserter<T, ? super org.springframework.http.server.reactive.ServerHttpResponse>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "T",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder$DefaultEntityResponse.entity()",
            "public T entity()"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserter<T, ? super org.springframework.http.server.reactive.ServerHttpResponse>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder$DefaultEntityResponse.inserter()",
            "public org.springframework.web.reactive.function.BodyInserter<T, ? super org.springframework.http.server.reactive.ServerHttpResponse> inserter()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder$BuiltRouterFunction",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder$BuiltRouterFunction(java.util.List<org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public org.springframework.web.reactive.function.server.RouterFunctionBuilder$BuiltRouterFunction(java.util.List<org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>>",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder$BuiltRouterFunction.route(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> route(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionBuilder$BuiltRouterFunction.accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate.test(org.springframework.web.reactive.function.server.ServerRequest)",
            "public boolean test(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.util.Optional<org.springframework.web.reactive.function.server.ServerRequest>",
            "org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate.nest(org.springframework.web.reactive.function.server.ServerRequest)",
            "public java.util.Optional<org.springframework.web.reactive.function.server.ServerRequest> nest(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate.changeParser(org.springframework.web.util.pattern.PathPatternParser)",
            "public void changeParser(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$DefaultNestedRouterFunction",
            "org.springframework.web.reactive.function.server.RouterFunctions$DefaultNestedRouterFunction(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RouterFunction<T>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$DefaultNestedRouterFunction(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RouterFunction<T>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>>",
            "org.springframework.web.reactive.function.server.RouterFunctions$DefaultNestedRouterFunction.route(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>> route(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctions$DefaultNestedRouterFunction.accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "<T> org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.EntityResponse.fromObject(T)",
            "public static <T> org.springframework.web.reactive.function.server.EntityResponse$Builder<T> fromObject(T)"
        ],
        [
            "<T> org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.EntityResponse.fromProducer(T, java.lang.Class<?>)",
            "public static <T> org.springframework.web.reactive.function.server.EntityResponse$Builder<T> fromProducer(T, java.lang.Class<?>)"
        ],
        [
            "<T> org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.EntityResponse.fromProducer(T, org.springframework.core.ParameterizedTypeReference<?>)",
            "public static <T> org.springframework.web.reactive.function.server.EntityResponse$Builder<T> fromProducer(T, org.springframework.core.ParameterizedTypeReference<?>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.server.EntityResponse$Builder<P>",
            "org.springframework.web.reactive.function.server.EntityResponse.fromPublisher(P, java.lang.Class<T>)",
            "public static <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.server.EntityResponse$Builder<P> fromPublisher(P, java.lang.Class<T>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.server.EntityResponse$Builder<P>",
            "org.springframework.web.reactive.function.server.EntityResponse.fromPublisher(P, org.springframework.core.ParameterizedTypeReference<T>)",
            "public static <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.server.EntityResponse$Builder<P> fromPublisher(P, org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterResponse$1.messageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters()"
        ],
        [
            "java.util.Optional<org.springframework.http.server.reactive.ServerHttpRequest>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterResponse$1.serverRequest()",
            "public java.util.Optional<org.springframework.http.server.reactive.ServerHttpRequest> serverRequest()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterResponse$1.hints()",
            "public java.util.Map<java.lang.String, java.lang.Object> hints()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$OrRequestPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$OrRequestPredicate(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$OrRequestPredicate(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RequestPredicates$OrRequestPredicate.test(org.springframework.web.reactive.function.server.ServerRequest)",
            "public boolean test(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.util.Optional<org.springframework.web.reactive.function.server.ServerRequest>",
            "org.springframework.web.reactive.function.server.RequestPredicates$OrRequestPredicate.nest(org.springframework.web.reactive.function.server.ServerRequest)",
            "public java.util.Optional<org.springframework.web.reactive.function.server.ServerRequest> nest(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$OrRequestPredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$OrRequestPredicate.changeParser(org.springframework.web.util.pattern.PathPatternParser)",
            "public void changeParser(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$OrRequestPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate(java.lang.String, java.util.function.Predicate<java.lang.String>)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate(java.lang.String, java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate(java.lang.String, java.lang.String)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate.test(org.springframework.web.reactive.function.server.ServerRequest)",
            "public boolean test(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$QueryParamPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RouterFunctions$AbstractRouterFunction.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies",
            "org.springframework.web.reactive.function.server.HandlerStrategies.withDefaults()",
            "public static org.springframework.web.reactive.function.server.HandlerStrategies withDefaults()"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies$Builder",
            "org.springframework.web.reactive.function.server.HandlerStrategies.builder()",
            "public static org.springframework.web.reactive.function.server.HandlerStrategies$Builder builder()"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies$Builder",
            "org.springframework.web.reactive.function.server.HandlerStrategies.empty()",
            "public static org.springframework.web.reactive.function.server.HandlerStrategies$Builder empty()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.RequestPredicate.org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public default org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.RequestPredicate.org.springframework.web.reactive.function.server.RequestPredicate negate()",
            "public default org.springframework.web.reactive.function.server.RequestPredicate negate()"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.RequestPredicate.org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public default org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "java.util.Optional<org.springframework.web.reactive.function.server.ServerRequest>",
            "org.springframework.web.reactive.function.server.RequestPredicate.nest(org.springframework.web.reactive.function.server.ServerRequest)",
            "public default java.util.Optional<org.springframework.web.reactive.function.server.ServerRequest> nest(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "default",
            "org.springframework.web.reactive.function.server.RequestPredicate.void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public default void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper(org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.util.pattern.PathPattern$PathRemainingMatchInfo, org.springframework.web.util.pattern.PathPattern)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper(org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.util.pattern.PathPattern$PathRemainingMatchInfo, org.springframework.web.util.pattern.PathPattern)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.method()",
            "public org.springframework.http.HttpMethod method()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.methodName()",
            "public java.lang.String methodName()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.uri()",
            "public java.net.URI uri()"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.uriBuilder()",
            "public org.springframework.web.util.UriBuilder uriBuilder()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.requestPath()",
            "public org.springframework.http.server.RequestPath requestPath()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Headers",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.headers()",
            "public org.springframework.web.reactive.function.server.ServerRequest$Headers headers()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.cookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> cookies()"
        ],
        [
            "java.util.Optional<java.net.InetSocketAddress>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.remoteAddress()",
            "public java.util.Optional<java.net.InetSocketAddress> remoteAddress()"
        ],
        [
            "java.util.Optional<java.net.InetSocketAddress>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.localAddress()",
            "public java.util.Optional<java.net.InetSocketAddress> localAddress()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>)",
            "public <T> T body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>)"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public <T> T body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.bodyToMono(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.bodyToFlux(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.attributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> attributes()"
        ],
        [
            "java.util.Optional<java.lang.String>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.queryParam(java.lang.String)",
            "public java.util.Optional<java.lang.String> queryParam(java.lang.String)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.queryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> queryParams()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.pathVariables()",
            "public java.util.Map<java.lang.String, java.lang.String> pathVariables()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.session()",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> session()"
        ],
        [
            "reactor.core.publisher.Mono<? extends java.security.Principal>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.principal()",
            "public reactor.core.publisher.Mono<? extends java.security.Principal> principal()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.formData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> formData()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.multipartData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> multipartData()"
        ],
        [
            "org.springframework.web.server.ServerWebExchange",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.exchange()",
            "public org.springframework.web.server.ServerWebExchange exchange()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$SubPathServerRequestWrapper.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.RenderingResponse.from(org.springframework.web.reactive.function.server.RenderingResponse)",
            "public static org.springframework.web.reactive.function.server.RenderingResponse$Builder from(org.springframework.web.reactive.function.server.RenderingResponse)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.RenderingResponse.create(java.lang.String)",
            "public static org.springframework.web.reactive.function.server.RenderingResponse$Builder create(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.accept()",
            "public java.util.List<org.springframework.http.MediaType> accept()"
        ],
        [
            "java.util.List<java.nio.charset.Charset>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.acceptCharset()",
            "public java.util.List<java.nio.charset.Charset> acceptCharset()"
        ],
        [
            "java.util.List<java.util.Locale$LanguageRange>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.acceptLanguage()",
            "public java.util.List<java.util.Locale$LanguageRange> acceptLanguage()"
        ],
        [
            "java.util.OptionalLong",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.contentLength()",
            "public java.util.OptionalLong contentLength()"
        ],
        [
            "java.util.Optional<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.contentType()",
            "public java.util.Optional<org.springframework.http.MediaType> contentType()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.host()",
            "public java.net.InetSocketAddress host()"
        ],
        [
            "java.util.List<org.springframework.http.HttpRange>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.range()",
            "public java.util.List<org.springframework.http.HttpRange> range()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.header(java.lang.String)",
            "public java.util.List<java.lang.String> header(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.asHttpHeaders()",
            "public org.springframework.http.HttpHeaders asHttpHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getRequest()",
            "public org.springframework.http.server.reactive.ServerHttpRequest getRequest()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getFormData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> getFormData()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getMultipartData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> getMultipartData()"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpResponse",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getResponse()",
            "public org.springframework.http.server.reactive.ServerHttpResponse getResponse()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getSession()",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> getSession()"
        ],
        [
            "<T extends java.security.Principal> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getPrincipal()",
            "public <T extends java.security.Principal> reactor.core.publisher.Mono<T> getPrincipal()"
        ],
        [
            "org.springframework.context.i18n.LocaleContext",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getLocaleContext()",
            "public org.springframework.context.i18n.LocaleContext getLocaleContext()"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.isNotModified()",
            "public boolean isNotModified()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.checkNotModified(java.time.Instant)",
            "public boolean checkNotModified(java.time.Instant)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.checkNotModified(java.lang.String)",
            "public boolean checkNotModified(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.checkNotModified(java.lang.String, java.time.Instant)",
            "public boolean checkNotModified(java.lang.String, java.time.Instant)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.transformUrl(java.lang.String)",
            "public java.lang.String transformUrl(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.addUrlTransformer(java.util.function.Function<java.lang.String, java.lang.String>)",
            "public void addUrlTransformer(java.util.function.Function<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$DelegatingServerWebExchange.getLogPrefix()",
            "public java.lang.String getLogPrefix()"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder(T, org.springframework.web.reactive.function.BodyInserter<T, ? super org.springframework.http.server.reactive.ServerHttpResponse>)",
            "public org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder(T, org.springframework.web.reactive.function.BodyInserter<T, ? super org.springframework.http.server.reactive.ServerHttpResponse>)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.status(org.springframework.http.HttpStatus)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> status(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.status(int)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> status(int)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.cookie(org.springframework.http.ResponseCookie)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> cookie(org.springframework.http.ResponseCookie)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>>)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.allow(org.springframework.http.HttpMethod...)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> allow(org.springframework.http.HttpMethod...)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.allow(java.util.Set<org.springframework.http.HttpMethod>)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> allow(java.util.Set<org.springframework.http.HttpMethod>)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.contentLength(long)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> contentLength(long)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.contentType(org.springframework.http.MediaType)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.eTag(java.lang.String)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> eTag(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.hint(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> hint(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.hints(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> hints(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.lastModified(java.time.ZonedDateTime)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> lastModified(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.lastModified(java.time.Instant)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> lastModified(java.time.Instant)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.location(java.net.URI)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> location(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.cacheControl(org.springframework.http.CacheControl)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> cacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "org.springframework.web.reactive.function.server.EntityResponse$Builder<T>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.varyBy(java.lang.String...)",
            "public org.springframework.web.reactive.function.server.EntityResponse$Builder<T> varyBy(java.lang.String...)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.EntityResponse<T>>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder.build()",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.EntityResponse<T>> build()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder$DefaultEntityResponse$1.messageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters()"
        ],
        [
            "java.util.Optional<org.springframework.http.server.reactive.ServerHttpRequest>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder$DefaultEntityResponse$1.serverRequest()",
            "public java.util.Optional<org.springframework.http.server.reactive.ServerHttpRequest> serverRequest()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder$DefaultEntityResponse$1.hints()",
            "public java.util.Map<java.lang.String, java.lang.Object> hints()"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest(java.lang.String, java.lang.String, java.net.URI, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest(java.lang.String, java.lang.String, java.net.URI, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest.getPath()",
            "public org.springframework.http.server.RequestPath getPath()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> getCookies()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest.getQueryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> getQueryParams()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder$BuiltServerHttpRequest.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "org.springframework.web.reactive.function.server.support.RouterFunctionMapping",
            "org.springframework.web.reactive.function.server.support.RouterFunctionMapping()",
            "public org.springframework.web.reactive.function.server.support.RouterFunctionMapping()"
        ],
        [
            "org.springframework.web.reactive.function.server.support.RouterFunctionMapping",
            "org.springframework.web.reactive.function.server.support.RouterFunctionMapping(org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public org.springframework.web.reactive.function.server.support.RouterFunctionMapping(org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<?>",
            "org.springframework.web.reactive.function.server.support.RouterFunctionMapping.getRouterFunction()",
            "public org.springframework.web.reactive.function.server.RouterFunction<?> getRouterFunction()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.support.RouterFunctionMapping.setMessageReaders(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)",
            "public void setMessageReaders(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.support.RouterFunctionMapping.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler$1.messageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters()"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.view.ViewResolver>",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler$1.viewResolvers()",
            "public java.util.List<org.springframework.web.reactive.result.view.ViewResolver> viewResolvers()"
        ],
        [
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper(org.springframework.web.reactive.function.server.ServerRequest$Headers)",
            "public org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper(org.springframework.web.reactive.function.server.ServerRequest$Headers)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.accept()",
            "public java.util.List<org.springframework.http.MediaType> accept()"
        ],
        [
            "java.util.List<java.nio.charset.Charset>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.acceptCharset()",
            "public java.util.List<java.nio.charset.Charset> acceptCharset()"
        ],
        [
            "java.util.List<java.util.Locale$LanguageRange>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.acceptLanguage()",
            "public java.util.List<java.util.Locale$LanguageRange> acceptLanguage()"
        ],
        [
            "java.util.OptionalLong",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.contentLength()",
            "public java.util.OptionalLong contentLength()"
        ],
        [
            "java.util.Optional<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.contentType()",
            "public java.util.Optional<org.springframework.http.MediaType> contentType()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.host()",
            "public java.net.InetSocketAddress host()"
        ],
        [
            "java.util.List<org.springframework.http.HttpRange>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.range()",
            "public java.util.List<org.springframework.http.HttpRange> range()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.header(java.lang.String)",
            "public java.util.List<java.lang.String> header(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper$HeadersWrapper.asHttpHeaders()",
            "public org.springframework.http.HttpHeaders asHttpHeaders()"
        ],
        [
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler()",
            "public org.springframework.web.reactive.function.server.support.ServerResponseResultHandler()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler.setMessageWriters(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>)",
            "public void setMessageWriters(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler.setViewResolvers(java.util.List<org.springframework.web.reactive.result.view.ViewResolver>)",
            "public void setViewResolvers(java.util.List<org.springframework.web.reactive.result.view.ViewResolver>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler.supports(org.springframework.web.reactive.HandlerResult)",
            "public boolean supports(org.springframework.web.reactive.HandlerResult)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler.handleResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.HandlerResult)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.HandlerResult)"
        ],
        [
            "org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter",
            "org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter()",
            "public org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter.supports(java.lang.Object)",
            "public boolean supports(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult>",
            "org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter.handle(org.springframework.web.server.ServerWebExchange, java.lang.Object)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult> handle(org.springframework.web.server.ServerWebExchange, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper(org.springframework.web.reactive.function.server.ServerRequest)",
            "public org.springframework.web.reactive.function.server.support.ServerRequestWrapper(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.request()",
            "public org.springframework.web.reactive.function.server.ServerRequest request()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.method()",
            "public org.springframework.http.HttpMethod method()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.methodName()",
            "public java.lang.String methodName()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.uri()",
            "public java.net.URI uri()"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.uriBuilder()",
            "public org.springframework.web.util.UriBuilder uriBuilder()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.path()",
            "public java.lang.String path()"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.pathContainer()",
            "public org.springframework.http.server.PathContainer pathContainer()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.requestPath()",
            "public org.springframework.http.server.RequestPath requestPath()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Headers",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.headers()",
            "public org.springframework.web.reactive.function.server.ServerRequest$Headers headers()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.cookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> cookies()"
        ],
        [
            "java.util.Optional<java.net.InetSocketAddress>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.remoteAddress()",
            "public java.util.Optional<java.net.InetSocketAddress> remoteAddress()"
        ],
        [
            "java.util.Optional<java.net.InetSocketAddress>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.localAddress()",
            "public java.util.Optional<java.net.InetSocketAddress> localAddress()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>)",
            "public <T> T body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>)"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public <T> T body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.bodyToMono(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.bodyToFlux(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "java.util.Optional<java.lang.Object>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.attribute(java.lang.String)",
            "public java.util.Optional<java.lang.Object> attribute(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.attributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> attributes()"
        ],
        [
            "java.util.Optional<java.lang.String>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.queryParam(java.lang.String)",
            "public java.util.Optional<java.lang.String> queryParam(java.lang.String)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.queryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> queryParams()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.pathVariable(java.lang.String)",
            "public java.lang.String pathVariable(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.pathVariables()",
            "public java.util.Map<java.lang.String, java.lang.String> pathVariables()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.session()",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> session()"
        ],
        [
            "reactor.core.publisher.Mono<? extends java.security.Principal>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.principal()",
            "public reactor.core.publisher.Mono<? extends java.security.Principal> principal()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.formData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> formData()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.multipartData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> multipartData()"
        ],
        [
            "org.springframework.web.server.ServerWebExchange",
            "org.springframework.web.reactive.function.server.support.ServerRequestWrapper.exchange()",
            "public org.springframework.web.server.ServerWebExchange exchange()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$RouterFunctionWebHandler",
            "org.springframework.web.reactive.function.server.RouterFunctions$RouterFunctionWebHandler(org.springframework.web.reactive.function.server.HandlerStrategies, org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$RouterFunctionWebHandler(org.springframework.web.reactive.function.server.HandlerStrategies, org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.function.server.RouterFunctions$RouterFunctionWebHandler.handle(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$WriterFunctionResponse",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$WriterFunctionResponse(int, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>, java.util.function.BiFunction<org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.function.server.ServerResponse$Context, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$WriterFunctionResponse(int, org.springframework.http.HttpHeaders, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>, java.util.function.BiFunction<org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.function.server.ServerResponse$Context, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder(org.springframework.web.reactive.function.server.ServerResponse)",
            "public org.springframework.web.reactive.function.server.DefaultServerResponseBuilder(org.springframework.web.reactive.function.server.ServerResponse)"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder(org.springframework.http.HttpStatus)",
            "public org.springframework.web.reactive.function.server.DefaultServerResponseBuilder(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder(int)",
            "public org.springframework.web.reactive.function.server.DefaultServerResponseBuilder(int)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.cookie(org.springframework.http.ResponseCookie)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder cookie(org.springframework.http.ResponseCookie)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>>)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.allow(org.springframework.http.HttpMethod...)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder allow(org.springframework.http.HttpMethod...)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.allow(java.util.Set<org.springframework.http.HttpMethod>)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder allow(java.util.Set<org.springframework.http.HttpMethod>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.contentLength(long)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder contentLength(long)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.contentType(org.springframework.http.MediaType)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.eTag(java.lang.String)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder eTag(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.hint(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder hint(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.hints(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder hints(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.lastModified(java.time.ZonedDateTime)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder lastModified(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.lastModified(java.time.Instant)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder lastModified(java.time.Instant)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.location(java.net.URI)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder location(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.cacheControl(org.springframework.http.CacheControl)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder cacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.varyBy(java.lang.String...)",
            "public org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder varyBy(java.lang.String...)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.build()",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> build()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.build(org.reactivestreams.Publisher<java.lang.Void>)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> build(org.reactivestreams.Publisher<java.lang.Void>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.build(java.util.function.BiFunction<org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.function.server.ServerResponse$Context, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> build(java.util.function.BiFunction<org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.function.server.ServerResponse$Context, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.bodyValue(java.lang.Object)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> bodyValue(java.lang.Object)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.body(P, java.lang.Class<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> body(P, java.lang.Class<T>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.body(P, org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> body(P, org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.body(java.lang.Object, java.lang.Class<?>)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> body(java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.body(java.lang.Object, org.springframework.core.ParameterizedTypeReference<?>)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> body(java.lang.Object, org.springframework.core.ParameterizedTypeReference<?>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.body(org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.server.reactive.ServerHttpResponse>)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> body(org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.server.reactive.ServerHttpResponse>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.syncBody(java.lang.Object)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> syncBody(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.render(java.lang.String, java.lang.Object...)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> render(java.lang.String, java.lang.Object...)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.render(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> render(java.lang.String, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.varyBy(java.lang.String[])",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder varyBy(java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.cacheControl(org.springframework.http.CacheControl)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder cacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.location(java.net.URI)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder location(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.lastModified(java.time.Instant)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder lastModified(java.time.Instant)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.lastModified(java.time.ZonedDateTime)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder lastModified(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.eTag(java.lang.String)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder eTag(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.allow(java.util.Set)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder allow(java.util.Set)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.allow(org.springframework.http.HttpMethod[])",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder allow(org.springframework.http.HttpMethod[])"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.cookies(java.util.function.Consumer)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder cookies(java.util.function.Consumer)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.cookie(org.springframework.http.ResponseCookie)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder cookie(org.springframework.http.ResponseCookie)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.headers(java.util.function.Consumer)",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder headers(java.util.function.Consumer)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.header(java.lang.String, java.lang.String[])",
            "public org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder header(java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction(org.springframework.core.io.Resource)",
            "public org.springframework.web.reactive.function.server.ResourceHandlerFunction(org.springframework.core.io.Resource)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$1.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "java.util.Optional<org.springframework.http.server.reactive.ServerHttpResponse>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$1.serverResponse()",
            "public java.util.Optional<org.springframework.http.server.reactive.ServerHttpResponse> serverResponse()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest$1.hints()",
            "public java.util.Map<java.lang.String, java.lang.Object> hints()"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder()",
            "public org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder.defaultConfiguration()",
            "public void defaultConfiguration()"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies$Builder",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder.codecs(java.util.function.Consumer<org.springframework.http.codec.ServerCodecConfigurer>)",
            "public org.springframework.web.reactive.function.server.HandlerStrategies$Builder codecs(java.util.function.Consumer<org.springframework.http.codec.ServerCodecConfigurer>)"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies$Builder",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder.viewResolver(org.springframework.web.reactive.result.view.ViewResolver)",
            "public org.springframework.web.reactive.function.server.HandlerStrategies$Builder viewResolver(org.springframework.web.reactive.result.view.ViewResolver)"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies$Builder",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder.webFilter(org.springframework.web.server.WebFilter)",
            "public org.springframework.web.reactive.function.server.HandlerStrategies$Builder webFilter(org.springframework.web.server.WebFilter)"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies$Builder",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder.exceptionHandler(org.springframework.web.server.WebExceptionHandler)",
            "public org.springframework.web.reactive.function.server.HandlerStrategies$Builder exceptionHandler(org.springframework.web.server.WebExceptionHandler)"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies$Builder",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder.localeContextResolver(org.springframework.web.server.i18n.LocaleContextResolver)",
            "public org.springframework.web.reactive.function.server.HandlerStrategies$Builder localeContextResolver(org.springframework.web.server.i18n.LocaleContextResolver)"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerStrategies",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder.build()",
            "public org.springframework.web.reactive.function.server.HandlerStrategies build()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.method(org.springframework.http.HttpMethod)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder method(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.uri(java.net.URI)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder uri(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.cookie(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder cookie(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>>)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.body(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder body(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.body(java.lang.String)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder body(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Builder",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.attributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.web.reactive.function.server.ServerRequest$Builder attributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest",
            "org.springframework.web.reactive.function.server.DefaultServerRequestBuilder.build()",
            "public org.springframework.web.reactive.function.server.ServerRequest build()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$HandlerStrategiesResponseContext",
            "org.springframework.web.reactive.function.server.RouterFunctions$HandlerStrategiesResponseContext(org.springframework.web.reactive.function.server.HandlerStrategies)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$HandlerStrategiesResponseContext(org.springframework.web.reactive.function.server.HandlerStrategies)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.function.server.RouterFunctions$HandlerStrategiesResponseContext.messageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters()"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.view.ViewResolver>",
            "org.springframework.web.reactive.function.server.RouterFunctions$HandlerStrategiesResponseContext.viewResolvers()",
            "public java.util.List<org.springframework.web.reactive.result.view.ViewResolver> viewResolvers()"
        ],
        [
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource(org.springframework.core.io.Resource)",
            "public org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource(org.springframework.core.io.Resource)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.exists()",
            "public boolean exists()"
        ],
        [
            "java.net.URL",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "java.io.File",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.ResourceHandlerFunction$HeadMethodResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$SameComposedRouterFunction",
            "org.springframework.web.reactive.function.server.RouterFunctions$SameComposedRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<T>, org.springframework.web.reactive.function.server.RouterFunction<T>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$SameComposedRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<T>, org.springframework.web.reactive.function.server.RouterFunction<T>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>>",
            "org.springframework.web.reactive.function.server.RouterFunctions$SameComposedRouterFunction.route(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>> route(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctions$SameComposedRouterFunction.accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$HeadersPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$HeadersPredicate(java.util.function.Predicate<org.springframework.web.reactive.function.server.ServerRequest$Headers>)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$HeadersPredicate(java.util.function.Predicate<org.springframework.web.reactive.function.server.ServerRequest$Headers>)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RequestPredicates$HeadersPredicate.test(org.springframework.web.reactive.function.server.ServerRequest)",
            "public boolean test(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$HeadersPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.methodName()",
            "public java.lang.String methodName()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.uri()",
            "public java.net.URI uri()"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.uriBuilder()",
            "public org.springframework.web.util.UriBuilder uriBuilder()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.requestPath()",
            "public org.springframework.http.server.RequestPath requestPath()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Headers",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.headers()",
            "public org.springframework.web.reactive.function.server.ServerRequest$Headers headers()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.cookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> cookies()"
        ],
        [
            "java.util.Optional<java.net.InetSocketAddress>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.remoteAddress()",
            "public java.util.Optional<java.net.InetSocketAddress> remoteAddress()"
        ],
        [
            "java.util.Optional<java.net.InetSocketAddress>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.localAddress()",
            "public java.util.Optional<java.net.InetSocketAddress> localAddress()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>)",
            "public <T> T body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>)"
        ],
        [
            "<T> T",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public <T> T body(org.springframework.web.reactive.function.BodyExtractor<T, ? super org.springframework.http.server.reactive.ServerHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.bodyToMono(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.bodyToFlux(java.lang.Class<? extends T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(java.lang.Class<? extends T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.attributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> attributes()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.queryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> queryParams()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.pathVariables()",
            "public java.util.Map<java.lang.String, java.lang.String> pathVariables()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.session()",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> session()"
        ],
        [
            "reactor.core.publisher.Mono<? extends java.security.Principal>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.principal()",
            "public reactor.core.publisher.Mono<? extends java.security.Principal> principal()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.formData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> formData()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.multipartData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> multipartData()"
        ],
        [
            "org.springframework.web.server.ServerWebExchange",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.exchange()",
            "public org.springframework.web.server.ServerWebExchange exchange()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.DefaultServerRequest.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$ResourcesRouterFunction",
            "org.springframework.web.reactive.function.server.RouterFunctions$ResourcesRouterFunction(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$ResourcesRouterFunction(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>>",
            "org.springframework.web.reactive.function.server.RouterFunctions$ResourcesRouterFunction.route(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> route(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctions$ResourcesRouterFunction.accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$PathPatternPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathPatternPredicate(org.springframework.web.util.pattern.PathPattern)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$PathPatternPredicate(org.springframework.web.util.pattern.PathPattern)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathPatternPredicate.test(org.springframework.web.reactive.function.server.ServerRequest)",
            "public boolean test(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.util.Optional<org.springframework.web.reactive.function.server.ServerRequest>",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathPatternPredicate.nest(org.springframework.web.reactive.function.server.ServerRequest)",
            "public java.util.Optional<org.springframework.web.reactive.function.server.ServerRequest> nest(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathPatternPredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathPatternPredicate.changeParser(org.springframework.web.util.pattern.PathPatternParser)",
            "public void changeParser(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathPatternPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$AttributesRouterFunction",
            "org.springframework.web.reactive.function.server.RouterFunctions$AttributesRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<T>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$AttributesRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<T>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>>",
            "org.springframework.web.reactive.function.server.RouterFunctions$AttributesRouterFunction.route(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<T>> route(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctions$AttributesRouterFunction.accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunctions$AttributesRouterFunction.withAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.server.RouterFunction<T> withAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.RouterFunctions$AttributesRouterFunction.withAttributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.web.reactive.function.server.RouterFunction<T> withAttributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerFilterFunction<T, R>",
            "org.springframework.web.reactive.function.server.HandlerFilterFunction.andThen(org.springframework.web.reactive.function.server.HandlerFilterFunction<T, T>)",
            "public default org.springframework.web.reactive.function.server.HandlerFilterFunction<T, R> andThen(org.springframework.web.reactive.function.server.HandlerFilterFunction<T, T>)"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerFunction<R>",
            "org.springframework.web.reactive.function.server.HandlerFilterFunction.apply(org.springframework.web.reactive.function.server.HandlerFunction<T>)",
            "public default org.springframework.web.reactive.function.server.HandlerFunction<R> apply(org.springframework.web.reactive.function.server.HandlerFunction<T>)"
        ],
        [
            "org.springframework.web.reactive.function.server.HandlerFilterFunction<?, ?>",
            "org.springframework.web.reactive.function.server.HandlerFilterFunction.ofRequestProcessor(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerRequest>>)",
            "public static org.springframework.web.reactive.function.server.HandlerFilterFunction<?, ?> ofRequestProcessor(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerRequest>>)"
        ],
        [
            "<T extends org.springframework.web.reactive.function.server.ServerResponse, R extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.HandlerFilterFunction<T, R>",
            "org.springframework.web.reactive.function.server.HandlerFilterFunction.ofResponseProcessor(java.util.function.Function<T, reactor.core.publisher.Mono<R>>)",
            "public static <T extends org.springframework.web.reactive.function.server.ServerResponse, R extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.HandlerFilterFunction<T, R> ofResponseProcessor(java.util.function.Function<T, reactor.core.publisher.Mono<R>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$FilteredRouterFunction",
            "org.springframework.web.reactive.function.server.RouterFunctions$FilteredRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<T>, org.springframework.web.reactive.function.server.HandlerFilterFunction<T, S>)",
            "public org.springframework.web.reactive.function.server.RouterFunctions$FilteredRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<T>, org.springframework.web.reactive.function.server.HandlerFilterFunction<T, S>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<S>>",
            "org.springframework.web.reactive.function.server.RouterFunctions$FilteredRouterFunction.route(org.springframework.web.reactive.function.server.ServerRequest)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.HandlerFunction<S>> route(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctions$FilteredRouterFunction.accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RouterFunctions$Visitor)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RouterFunctions$FilteredRouterFunction.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor",
            "org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor(org.springframework.web.util.pattern.PathPatternParser)",
            "public org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor.startNested(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public void startNested(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor.endNested(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public void endNested(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor.route(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<?>)",
            "public void route(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<?>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor.resources(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)",
            "public void resources(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor.attributes(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void attributes(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ChangePathPatternParserVisitor.unknown(org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public void unknown(org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.startNested(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public void startNested(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.endNested(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public void endNested(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.route(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<?>)",
            "public void route(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.HandlerFunction<?>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.resources(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)",
            "public void resources(java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest, reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.attributes(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void attributes(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.unknown(org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public void unknown(org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.method(java.util.Set<org.springframework.http.HttpMethod>)",
            "public void method(java.util.Set<org.springframework.http.HttpMethod>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.path(java.lang.String)",
            "public void path(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.pathExtension(java.lang.String)",
            "public void pathExtension(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.header(java.lang.String, java.lang.String)",
            "public void header(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.queryParam(java.lang.String, java.lang.String)",
            "public void queryParam(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.startAnd()",
            "public void startAnd()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.and()",
            "public void and()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.endAnd()",
            "public void endAnd()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.startOr()",
            "public void startOr()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.or()",
            "public void or()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.endOr()",
            "public void endOr()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.startNegate()",
            "public void startNegate()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.endNegate()",
            "public void endNegate()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.ToStringVisitor.unknown(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public void unknown(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.ToStringVisitor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$ContentTypePredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$ContentTypePredicate(org.springframework.http.MediaType...)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$ContentTypePredicate(org.springframework.http.MediaType...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$ContentTypePredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$ContentTypePredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate(java.util.function.Predicate<java.lang.String>)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate(java.lang.String)",
            "public org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate.test(org.springframework.web.reactive.function.server.ServerRequest)",
            "public boolean test(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate.accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)",
            "public void accept(org.springframework.web.reactive.function.server.RequestPredicates$Visitor)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.RequestPredicates$PathExtensionPredicate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$AbstractServerResponse.statusCode()",
            "public final org.springframework.http.HttpStatus statusCode()"
        ],
        [
            "int",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$AbstractServerResponse.rawStatusCode()",
            "public int rawStatusCode()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$AbstractServerResponse.headers()",
            "public final org.springframework.http.HttpHeaders headers()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$AbstractServerResponse.cookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> cookies()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$AbstractServerResponse.writeTo(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.function.server.ServerResponse$Context)",
            "public final reactor.core.publisher.Mono<java.lang.Void> writeTo(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.function.server.ServerResponse$Context)"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>, java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, java.util.List<org.springframework.web.reactive.result.view.ViewResolver>, java.util.List<org.springframework.web.server.WebFilter>, java.util.List<org.springframework.web.server.WebExceptionHandler>, org.springframework.web.server.i18n.LocaleContextResolver)",
            "public org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>, java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, java.util.List<org.springframework.web.reactive.result.view.ViewResolver>, java.util.List<org.springframework.web.server.WebFilter>, java.util.List<org.springframework.web.server.WebExceptionHandler>, org.springframework.web.server.i18n.LocaleContextResolver)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies.messageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters()"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.view.ViewResolver>",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies.viewResolvers()",
            "public java.util.List<org.springframework.web.reactive.result.view.ViewResolver> viewResolvers()"
        ],
        [
            "java.util.List<org.springframework.web.server.WebFilter>",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies.webFilters()",
            "public java.util.List<org.springframework.web.server.WebFilter> webFilters()"
        ],
        [
            "java.util.List<org.springframework.web.server.WebExceptionHandler>",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies.exceptionHandlers()",
            "public java.util.List<org.springframework.web.server.WebExceptionHandler> exceptionHandlers()"
        ],
        [
            "org.springframework.web.server.i18n.LocaleContextResolver",
            "org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder$DefaultHandlerStrategies.localeContextResolver()",
            "public org.springframework.web.server.i18n.LocaleContextResolver localeContextResolver()"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder(org.springframework.web.reactive.function.server.RenderingResponse)",
            "public org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder(org.springframework.web.reactive.function.server.RenderingResponse)"
        ],
        [
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder(java.lang.String)",
            "public org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.status(org.springframework.http.HttpStatus)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder status(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.status(int)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder status(int)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.cookie(org.springframework.http.ResponseCookie)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder cookie(org.springframework.http.ResponseCookie)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>>)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.modelAttribute(java.lang.Object)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder modelAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.modelAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder modelAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.modelAttributes(java.lang.Object...)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder modelAttributes(java.lang.Object...)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.modelAttributes(java.util.Collection<?>)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder modelAttributes(java.util.Collection<?>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.modelAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder modelAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.function.server.RenderingResponse$Builder",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.web.reactive.function.server.RenderingResponse$Builder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.RenderingResponse>",
            "org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder.build()",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.RenderingResponse> build()"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$MultipartInserter",
            "org.springframework.web.reactive.function.BodyInserters$DefaultMultipartInserter.with(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.BodyInserters$MultipartInserter with(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$MultipartInserter",
            "org.springframework.web.reactive.function.BodyInserters$DefaultMultipartInserter.with(org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.reactive.function.BodyInserters$MultipartInserter with(org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserters$MultipartInserter",
            "org.springframework.web.reactive.function.BodyInserters$DefaultMultipartInserter.withPublisher(java.lang.String, P, java.lang.Class<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserters$MultipartInserter withPublisher(java.lang.String, P, java.lang.Class<T>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserters$MultipartInserter",
            "org.springframework.web.reactive.function.BodyInserters$DefaultMultipartInserter.withPublisher(java.lang.String, P, org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.BodyInserters$MultipartInserter withPublisher(java.lang.String, P, org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.function.BodyInserters$DefaultMultipartInserter.insert(org.springframework.http.client.reactive.ClientHttpRequest, org.springframework.web.reactive.function.BodyInserter$Context)",
            "public reactor.core.publisher.Mono<java.lang.Void> insert(org.springframework.http.client.reactive.ClientHttpRequest, org.springframework.web.reactive.function.BodyInserter$Context)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$FormInserter",
            "org.springframework.web.reactive.function.BodyInserters$DefaultMultipartInserter.with(org.springframework.util.MultiValueMap)",
            "public org.springframework.web.reactive.function.BodyInserters$FormInserter with(org.springframework.util.MultiValueMap)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$FormInserter",
            "org.springframework.web.reactive.function.BodyInserters$DefaultMultipartInserter.with(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.BodyInserters$FormInserter with(java.lang.String, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono",
            "org.springframework.web.reactive.function.BodyInserters$DefaultMultipartInserter.insert(org.springframework.http.ReactiveHttpOutputMessage, org.springframework.web.reactive.function.BodyInserter$Context)",
            "public reactor.core.publisher.Mono insert(org.springframework.http.ReactiveHttpOutputMessage, org.springframework.web.reactive.function.BodyInserter$Context)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$FormInserter<java.lang.String>",
            "org.springframework.web.reactive.function.BodyInserters$DefaultFormInserter.with(java.lang.String, java.lang.String)",
            "public org.springframework.web.reactive.function.BodyInserters$FormInserter<java.lang.String> with(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$FormInserter<java.lang.String>",
            "org.springframework.web.reactive.function.BodyInserters$DefaultFormInserter.with(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.web.reactive.function.BodyInserters$FormInserter<java.lang.String> with(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.function.BodyInserters$DefaultFormInserter.insert(org.springframework.http.client.reactive.ClientHttpRequest, org.springframework.web.reactive.function.BodyInserter$Context)",
            "public reactor.core.publisher.Mono<java.lang.Void> insert(org.springframework.http.client.reactive.ClientHttpRequest, org.springframework.web.reactive.function.BodyInserter$Context)"
        ],
        [
            "org.springframework.web.reactive.function.BodyInserters$FormInserter",
            "org.springframework.web.reactive.function.BodyInserters$DefaultFormInserter.with(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.function.BodyInserters$FormInserter with(java.lang.String, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono",
            "org.springframework.web.reactive.function.BodyInserters$DefaultFormInserter.insert(org.springframework.http.ReactiveHttpOutputMessage, org.springframework.web.reactive.function.BodyInserter$Context)",
            "public reactor.core.publisher.Mono insert(org.springframework.http.ReactiveHttpOutputMessage, org.springframework.web.reactive.function.BodyInserter$Context)"
        ],
        [
            "org.springframework.web.reactive.DispatcherHandler",
            "org.springframework.web.reactive.DispatcherHandler()",
            "public org.springframework.web.reactive.DispatcherHandler()"
        ],
        [
            "org.springframework.web.reactive.DispatcherHandler",
            "org.springframework.web.reactive.DispatcherHandler(org.springframework.context.ApplicationContext)",
            "public org.springframework.web.reactive.DispatcherHandler(org.springframework.context.ApplicationContext)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.HandlerMapping>",
            "org.springframework.web.reactive.DispatcherHandler.getHandlerMappings()",
            "public final java.util.List<org.springframework.web.reactive.HandlerMapping> getHandlerMappings()"
        ],
        [
            "void",
            "org.springframework.web.reactive.DispatcherHandler.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.DispatcherHandler.handle(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.DispatcherHandler.handlePreFlight(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> handlePreFlight(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceHandlerRegistry",
            "org.springframework.web.reactive.config.ResourceHandlerRegistry(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.web.reactive.config.ResourceHandlerRegistry(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.ResourceHandlerRegistry.setResourceUrlProvider(org.springframework.web.reactive.resource.ResourceUrlProvider)",
            "public void setResourceUrlProvider(org.springframework.web.reactive.resource.ResourceUrlProvider)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceHandlerRegistration",
            "org.springframework.web.reactive.config.ResourceHandlerRegistry.addResourceHandler(java.lang.String...)",
            "public org.springframework.web.reactive.config.ResourceHandlerRegistration addResourceHandler(java.lang.String...)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.config.ResourceHandlerRegistry.hasMappingForPattern(java.lang.String)",
            "public boolean hasMappingForPattern(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceHandlerRegistry",
            "org.springframework.web.reactive.config.ResourceHandlerRegistry.setOrder(int)",
            "public org.springframework.web.reactive.config.ResourceHandlerRegistry setOrder(int)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport$EmptyHandlerMapping.getHandlerInternal(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> getHandlerInternal(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration(java.lang.String)",
            "public org.springframework.web.reactive.config.CorsRegistration(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration.allowedOrigins(java.lang.String...)",
            "public org.springframework.web.reactive.config.CorsRegistration allowedOrigins(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration.allowedOriginPatterns(java.lang.String...)",
            "public org.springframework.web.reactive.config.CorsRegistration allowedOriginPatterns(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration.allowedMethods(java.lang.String...)",
            "public org.springframework.web.reactive.config.CorsRegistration allowedMethods(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration.allowedHeaders(java.lang.String...)",
            "public org.springframework.web.reactive.config.CorsRegistration allowedHeaders(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration.exposedHeaders(java.lang.String...)",
            "public org.springframework.web.reactive.config.CorsRegistration exposedHeaders(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration.allowCredentials(boolean)",
            "public org.springframework.web.reactive.config.CorsRegistration allowCredentials(boolean)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration.maxAge(long)",
            "public org.springframework.web.reactive.config.CorsRegistration maxAge(long)"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistration.combine(org.springframework.web.cors.CorsConfiguration)",
            "public org.springframework.web.reactive.config.CorsRegistration combine(org.springframework.web.cors.CorsConfiguration)"
        ],
        [
            "org.springframework.web.reactive.config.ViewResolverRegistry",
            "org.springframework.web.reactive.config.ViewResolverRegistry(org.springframework.context.ApplicationContext)",
            "public org.springframework.web.reactive.config.ViewResolverRegistry(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration",
            "org.springframework.web.reactive.config.ViewResolverRegistry.freeMarker()",
            "public org.springframework.web.reactive.config.UrlBasedViewResolverRegistration freeMarker()"
        ],
        [
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration",
            "org.springframework.web.reactive.config.ViewResolverRegistry.scriptTemplate()",
            "public org.springframework.web.reactive.config.UrlBasedViewResolverRegistration scriptTemplate()"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.ViewResolverRegistry.viewResolver(org.springframework.web.reactive.result.view.ViewResolver)",
            "public void viewResolver(org.springframework.web.reactive.result.view.ViewResolver)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.ViewResolverRegistry.defaultViews(org.springframework.web.reactive.result.view.View...)",
            "public void defaultViews(org.springframework.web.reactive.result.view.View...)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.config.ViewResolverRegistry.hasRegistrations()",
            "public boolean hasRegistrations()"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.ViewResolverRegistry.order(int)",
            "public void order(int)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport$NoUpgradeStrategyWebSocketService.handleRequest(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleRequest(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.socket.WebSocketHandler)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceChainRegistration",
            "org.springframework.web.reactive.config.ResourceChainRegistration(boolean)",
            "public org.springframework.web.reactive.config.ResourceChainRegistration(boolean)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceChainRegistration",
            "org.springframework.web.reactive.config.ResourceChainRegistration(boolean, org.springframework.cache.Cache)",
            "public org.springframework.web.reactive.config.ResourceChainRegistration(boolean, org.springframework.cache.Cache)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceChainRegistration",
            "org.springframework.web.reactive.config.ResourceChainRegistration.addResolver(org.springframework.web.reactive.resource.ResourceResolver)",
            "public org.springframework.web.reactive.config.ResourceChainRegistration addResolver(org.springframework.web.reactive.resource.ResourceResolver)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceChainRegistration",
            "org.springframework.web.reactive.config.ResourceChainRegistration.addTransformer(org.springframework.web.reactive.resource.ResourceTransformer)",
            "public org.springframework.web.reactive.config.ResourceChainRegistration addTransformer(org.springframework.web.reactive.resource.ResourceTransformer)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport$NoOpValidator.supports(java.lang.Class<?>)",
            "public boolean supports(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport$NoOpValidator.validate(java.lang.Object, org.springframework.validation.Errors)",
            "public void validate(java.lang.Object, org.springframework.validation.Errors)"
        ],
        [
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite()",
            "public org.springframework.web.reactive.config.WebFluxConfigurerComposite()"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.addWebFluxConfigurers(java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer>)",
            "public void addWebFluxConfigurers(java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.configureContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder)",
            "public void configureContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.addCorsMappings(org.springframework.web.reactive.config.CorsRegistry)",
            "public void addCorsMappings(org.springframework.web.reactive.config.CorsRegistry)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)",
            "public void configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.addResourceHandlers(org.springframework.web.reactive.config.ResourceHandlerRegistry)",
            "public void addResourceHandlers(org.springframework.web.reactive.config.ResourceHandlerRegistry)"
        ],
        [
            "org.springframework.web.reactive.socket.server.WebSocketService",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.getWebSocketService()",
            "public org.springframework.web.reactive.socket.server.WebSocketService getWebSocketService()"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.configureArgumentResolvers(org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer)",
            "public void configureArgumentResolvers(org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.configureHttpMessageCodecs(org.springframework.http.codec.ServerCodecConfigurer)",
            "public void configureHttpMessageCodecs(org.springframework.http.codec.ServerCodecConfigurer)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.addFormatters(org.springframework.format.FormatterRegistry)",
            "public void addFormatters(org.springframework.format.FormatterRegistry)"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.getValidator()",
            "public org.springframework.validation.Validator getValidator()"
        ],
        [
            "org.springframework.validation.MessageCodesResolver",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.getMessageCodesResolver()",
            "public org.springframework.validation.MessageCodesResolver getMessageCodesResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurerComposite.configureViewResolvers(org.springframework.web.reactive.config.ViewResolverRegistry)",
            "public void configureViewResolvers(org.springframework.web.reactive.config.ViewResolverRegistry)"
        ],
        [
            "org.springframework.web.reactive.config.PathMatchConfigurer",
            "org.springframework.web.reactive.config.PathMatchConfigurer()",
            "public org.springframework.web.reactive.config.PathMatchConfigurer()"
        ],
        [
            "org.springframework.web.reactive.config.PathMatchConfigurer",
            "org.springframework.web.reactive.config.PathMatchConfigurer.setUseCaseSensitiveMatch(java.lang.Boolean)",
            "public org.springframework.web.reactive.config.PathMatchConfigurer setUseCaseSensitiveMatch(java.lang.Boolean)"
        ],
        [
            "org.springframework.web.reactive.config.PathMatchConfigurer",
            "org.springframework.web.reactive.config.PathMatchConfigurer.setUseTrailingSlashMatch(java.lang.Boolean)",
            "public org.springframework.web.reactive.config.PathMatchConfigurer setUseTrailingSlashMatch(java.lang.Boolean)"
        ],
        [
            "org.springframework.web.reactive.config.PathMatchConfigurer",
            "org.springframework.web.reactive.config.PathMatchConfigurer.addPathPrefix(java.lang.String, java.util.function.Predicate<java.lang.Class<?>>)",
            "public org.springframework.web.reactive.config.PathMatchConfigurer addPathPrefix(java.lang.String, java.util.function.Predicate<java.lang.Class<?>>)"
        ],
        [
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration",
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration(org.springframework.web.reactive.result.view.UrlBasedViewResolver)",
            "public org.springframework.web.reactive.config.UrlBasedViewResolverRegistration(org.springframework.web.reactive.result.view.UrlBasedViewResolver)"
        ],
        [
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration",
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration.prefix(java.lang.String)",
            "public org.springframework.web.reactive.config.UrlBasedViewResolverRegistration prefix(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration",
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration.suffix(java.lang.String)",
            "public org.springframework.web.reactive.config.UrlBasedViewResolverRegistration suffix(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration",
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration.viewClass(java.lang.Class<?>)",
            "public org.springframework.web.reactive.config.UrlBasedViewResolverRegistration viewClass(java.lang.Class<?>)"
        ],
        [
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration",
            "org.springframework.web.reactive.config.UrlBasedViewResolverRegistration.viewNames(java.lang.String...)",
            "public org.springframework.web.reactive.config.UrlBasedViewResolverRegistration viewNames(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.config.ViewResolverRegistry$FreeMarkerRegistration",
            "org.springframework.web.reactive.config.ViewResolverRegistry$FreeMarkerRegistration()",
            "public org.springframework.web.reactive.config.ViewResolverRegistry$FreeMarkerRegistration()"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistry",
            "org.springframework.web.reactive.config.CorsRegistry()",
            "public org.springframework.web.reactive.config.CorsRegistry()"
        ],
        [
            "org.springframework.web.reactive.config.CorsRegistration",
            "org.springframework.web.reactive.config.CorsRegistry.addMapping(java.lang.String)",
            "public org.springframework.web.reactive.config.CorsRegistration addMapping(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport()",
            "public org.springframework.web.reactive.config.WebFluxConfigurationSupport()"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.getApplicationContext()",
            "public final org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "org.springframework.web.reactive.DispatcherHandler",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.webHandler()",
            "public org.springframework.web.reactive.DispatcherHandler webHandler()"
        ],
        [
            "org.springframework.web.server.WebExceptionHandler",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.responseStatusExceptionHandler()",
            "public org.springframework.web.server.WebExceptionHandler responseStatusExceptionHandler()"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.requestMappingHandlerMapping(org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolver",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.webFluxContentTypeResolver()",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolver webFluxContentTypeResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)",
            "public void configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)"
        ],
        [
            "org.springframework.web.reactive.function.server.support.RouterFunctionMapping",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.routerFunctionMapping(org.springframework.http.codec.ServerCodecConfigurer)",
            "public org.springframework.web.reactive.function.server.support.RouterFunctionMapping routerFunctionMapping(org.springframework.http.codec.ServerCodecConfigurer)"
        ],
        [
            "org.springframework.web.reactive.HandlerMapping",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.resourceHandlerMapping(org.springframework.web.reactive.resource.ResourceUrlProvider)",
            "public org.springframework.web.reactive.HandlerMapping resourceHandlerMapping(org.springframework.web.reactive.resource.ResourceUrlProvider)"
        ],
        [
            "org.springframework.web.reactive.resource.ResourceUrlProvider",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.resourceUrlProvider()",
            "public org.springframework.web.reactive.resource.ResourceUrlProvider resourceUrlProvider()"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.requestMappingHandlerAdapter(org.springframework.core.ReactiveAdapterRegistry, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.format.support.FormattingConversionService, org.springframework.validation.Validator)",
            "public org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.core.ReactiveAdapterRegistry, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.format.support.FormattingConversionService, org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.http.codec.ServerCodecConfigurer",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.serverCodecConfigurer()",
            "public org.springframework.http.codec.ServerCodecConfigurer serverCodecConfigurer()"
        ],
        [
            "org.springframework.web.server.i18n.LocaleContextResolver",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.localeContextResolver()",
            "public org.springframework.web.server.i18n.LocaleContextResolver localeContextResolver()"
        ],
        [
            "org.springframework.format.support.FormattingConversionService",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.webFluxConversionService()",
            "public org.springframework.format.support.FormattingConversionService webFluxConversionService()"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.webFluxAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry webFluxAdapterRegistry()"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.webFluxValidator()",
            "public org.springframework.validation.Validator webFluxValidator()"
        ],
        [
            "org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.handlerFunctionAdapter()",
            "public org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter handlerFunctionAdapter()"
        ],
        [
            "org.springframework.web.reactive.result.SimpleHandlerAdapter",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.simpleHandlerAdapter()",
            "public org.springframework.web.reactive.result.SimpleHandlerAdapter simpleHandlerAdapter()"
        ],
        [
            "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.webFluxWebSocketHandlerAdapter()",
            "public org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter webFluxWebSocketHandlerAdapter()"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.responseEntityResultHandler(org.springframework.core.ReactiveAdapterRegistry, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler responseEntityResultHandler(org.springframework.core.ReactiveAdapterRegistry, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.responseBodyResultHandler(org.springframework.core.ReactiveAdapterRegistry, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler responseBodyResultHandler(org.springframework.core.ReactiveAdapterRegistry, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.viewResolutionResultHandler(org.springframework.core.ReactiveAdapterRegistry, org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public org.springframework.web.reactive.result.view.ViewResolutionResultHandler viewResolutionResultHandler(org.springframework.core.ReactiveAdapterRegistry, org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler",
            "org.springframework.web.reactive.config.WebFluxConfigurationSupport.serverResponseResultHandler(org.springframework.http.codec.ServerCodecConfigurer)",
            "public org.springframework.web.reactive.function.server.support.ServerResponseResultHandler serverResponseResultHandler(org.springframework.http.codec.ServerCodecConfigurer)"
        ],
        [
            "org.springframework.web.reactive.config.DelegatingWebFluxConfiguration",
            "org.springframework.web.reactive.config.DelegatingWebFluxConfiguration()",
            "public org.springframework.web.reactive.config.DelegatingWebFluxConfiguration()"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.DelegatingWebFluxConfiguration.setConfigurers(java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer>)",
            "public void setConfigurers(java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.DelegatingWebFluxConfiguration.configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)",
            "public void configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)"
        ],
        [
            "org.springframework.web.reactive.config.ViewResolverRegistry$ScriptRegistration",
            "org.springframework.web.reactive.config.ViewResolverRegistry$ScriptRegistration()",
            "public org.springframework.web.reactive.config.ViewResolverRegistry$ScriptRegistration()"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.void configureContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder)",
            "public default void configureContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder)"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.void addCorsMappings(org.springframework.web.reactive.config.CorsRegistry)",
            "public default void addCorsMappings(org.springframework.web.reactive.config.CorsRegistry)"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.void configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)",
            "public default void configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.void addResourceHandlers(org.springframework.web.reactive.config.ResourceHandlerRegistry)",
            "public default void addResourceHandlers(org.springframework.web.reactive.config.ResourceHandlerRegistry)"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.void configureArgumentResolvers(org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer)",
            "public default void configureArgumentResolvers(org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer)"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.void configureHttpMessageCodecs(org.springframework.http.codec.ServerCodecConfigurer)",
            "public default void configureHttpMessageCodecs(org.springframework.http.codec.ServerCodecConfigurer)"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.void addFormatters(org.springframework.format.FormatterRegistry)",
            "public default void addFormatters(org.springframework.format.FormatterRegistry)"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.org.springframework.validation.Validator getValidator()",
            "public default org.springframework.validation.Validator getValidator()"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.org.springframework.validation.MessageCodesResolver getMessageCodesResolver()",
            "public default org.springframework.validation.MessageCodesResolver getMessageCodesResolver()"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.org.springframework.web.reactive.socket.server.WebSocketService getWebSocketService()",
            "public default org.springframework.web.reactive.socket.server.WebSocketService getWebSocketService()"
        ],
        [
            "default",
            "org.springframework.web.reactive.config.WebFluxConfigurer.void configureViewResolvers(org.springframework.web.reactive.config.ViewResolverRegistry)",
            "public default void configureViewResolvers(org.springframework.web.reactive.config.ViewResolverRegistry)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceHandlerRegistration",
            "org.springframework.web.reactive.config.ResourceHandlerRegistration(org.springframework.core.io.ResourceLoader, java.lang.String...)",
            "public org.springframework.web.reactive.config.ResourceHandlerRegistration(org.springframework.core.io.ResourceLoader, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceHandlerRegistration",
            "org.springframework.web.reactive.config.ResourceHandlerRegistration.addResourceLocations(java.lang.String...)",
            "public org.springframework.web.reactive.config.ResourceHandlerRegistration addResourceLocations(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceHandlerRegistration",
            "org.springframework.web.reactive.config.ResourceHandlerRegistration.setCacheControl(org.springframework.http.CacheControl)",
            "public org.springframework.web.reactive.config.ResourceHandlerRegistration setCacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceHandlerRegistration",
            "org.springframework.web.reactive.config.ResourceHandlerRegistration.setUseLastModified(boolean)",
            "public org.springframework.web.reactive.config.ResourceHandlerRegistration setUseLastModified(boolean)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceHandlerRegistration",
            "org.springframework.web.reactive.config.ResourceHandlerRegistration.setOptimizeLocations(boolean)",
            "public org.springframework.web.reactive.config.ResourceHandlerRegistration setOptimizeLocations(boolean)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceChainRegistration",
            "org.springframework.web.reactive.config.ResourceHandlerRegistration.resourceChain(boolean)",
            "public org.springframework.web.reactive.config.ResourceChainRegistration resourceChain(boolean)"
        ],
        [
            "org.springframework.web.reactive.config.ResourceChainRegistration",
            "org.springframework.web.reactive.config.ResourceHandlerRegistration.resourceChain(boolean, org.springframework.cache.Cache)",
            "public org.springframework.web.reactive.config.ResourceChainRegistration resourceChain(boolean, org.springframework.cache.Cache)"
        ],
        [
            "void",
            "org.springframework.web.reactive.config.ResourceHandlerRegistration.setMediaTypes(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public void setMediaTypes(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "org.springframework.web.reactive.result.view.BindStatus",
            "org.springframework.web.reactive.result.view.BindStatus(org.springframework.web.reactive.result.view.RequestContext, java.lang.String, boolean)",
            "public org.springframework.web.reactive.result.view.BindStatus(org.springframework.web.reactive.result.view.RequestContext, java.lang.String, boolean) throws java.lang.IllegalStateException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.BindStatus.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.BindStatus.getExpression()",
            "public java.lang.String getExpression()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.view.BindStatus.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.reactive.result.view.BindStatus.getValueType()",
            "public java.lang.Class<?> getValueType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.view.BindStatus.getActualValue()",
            "public java.lang.Object getActualValue()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.BindStatus.getDisplayValue()",
            "public java.lang.String getDisplayValue()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.BindStatus.isError()",
            "public boolean isError()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.reactive.result.view.BindStatus.getErrorCodes()",
            "public java.lang.String[] getErrorCodes()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.BindStatus.getErrorCode()",
            "public java.lang.String getErrorCode()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.reactive.result.view.BindStatus.getErrorMessages()",
            "public java.lang.String[] getErrorMessages()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.BindStatus.getErrorMessage()",
            "public java.lang.String getErrorMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.BindStatus.getErrorMessagesAsString(java.lang.String)",
            "public java.lang.String getErrorMessagesAsString(java.lang.String)"
        ],
        [
            "org.springframework.validation.Errors",
            "org.springframework.web.reactive.result.view.BindStatus.getErrors()",
            "public org.springframework.validation.Errors getErrors()"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.web.reactive.result.view.BindStatus.getEditor()",
            "public java.beans.PropertyEditor getEditor()"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.web.reactive.result.view.BindStatus.findEditor(java.lang.Class<?>)",
            "public java.beans.PropertyEditor findEditor(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.BindStatus.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.result.view.ViewResolverSupport",
            "org.springframework.web.reactive.result.view.ViewResolverSupport()",
            "public org.springframework.web.reactive.result.view.ViewResolverSupport()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.ViewResolverSupport.setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>)",
            "public void setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.view.ViewResolverSupport.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.ViewResolverSupport.setDefaultCharset(java.nio.charset.Charset)",
            "public void setDefaultCharset(java.nio.charset.Charset)"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.web.reactive.result.view.ViewResolverSupport.getDefaultCharset()",
            "public java.nio.charset.Charset getDefaultCharset()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.ViewResolverSupport.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.view.ViewResolverSupport.getOrder()",
            "public int getOrder()"
        ],
        [
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver()",
            "public org.springframework.web.reactive.result.view.UrlBasedViewResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.setViewClass(java.lang.Class<?>)",
            "public void setViewClass(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.setPrefix(java.lang.String)",
            "public void setPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.setSuffix(java.lang.String)",
            "public void setSuffix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.setViewNames(java.lang.String...)",
            "public void setViewNames(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.setRedirectViewProvider(java.util.function.Function<java.lang.String, org.springframework.web.reactive.result.view.RedirectView>)",
            "public void setRedirectViewProvider(java.util.function.Function<java.lang.String, org.springframework.web.reactive.result.view.RedirectView>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.setRequestContextAttribute(java.lang.String)",
            "public void setRequestContextAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.result.view.View>",
            "org.springframework.web.reactive.result.view.UrlBasedViewResolver.resolveViewName(java.lang.String, java.util.Locale)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.result.view.View> resolveViewName(java.lang.String, java.util.Locale)"
        ],
        [
            "org.springframework.web.reactive.result.view.AbstractView",
            "org.springframework.web.reactive.result.view.AbstractView()",
            "public org.springframework.web.reactive.result.view.AbstractView()"
        ],
        [
            "org.springframework.web.reactive.result.view.AbstractView",
            "org.springframework.web.reactive.result.view.AbstractView(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.view.AbstractView(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.AbstractView.setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>)",
            "public void setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.view.AbstractView.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.AbstractView.setDefaultCharset(java.nio.charset.Charset)",
            "public void setDefaultCharset(java.nio.charset.Charset)"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.web.reactive.result.view.AbstractView.getDefaultCharset()",
            "public java.nio.charset.Charset getDefaultCharset()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.AbstractView.setRequestContextAttribute(java.lang.String)",
            "public void setRequestContextAttribute(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.AbstractView.getRequestContextAttribute()",
            "public java.lang.String getRequestContextAttribute()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.AbstractView.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.AbstractView.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.AbstractView.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.web.reactive.result.view.AbstractView.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.result.view.AbstractView.render(java.util.Map<java.lang.String, ?>, org.springframework.http.MediaType, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> render(java.util.Map<java.lang.String, ?>, org.springframework.http.MediaType, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.AbstractView.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.result.view.RequestContext",
            "org.springframework.web.reactive.result.view.RequestContext(org.springframework.web.server.ServerWebExchange, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.context.MessageSource)",
            "public org.springframework.web.reactive.result.view.RequestContext(org.springframework.web.server.ServerWebExchange, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.context.MessageSource)"
        ],
        [
            "org.springframework.web.reactive.result.view.RequestContext",
            "org.springframework.web.reactive.result.view.RequestContext(org.springframework.web.server.ServerWebExchange, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.context.MessageSource, org.springframework.web.reactive.result.view.RequestDataValueProcessor)",
            "public org.springframework.web.reactive.result.view.RequestContext(org.springframework.web.server.ServerWebExchange, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.context.MessageSource, org.springframework.web.reactive.result.view.RequestDataValueProcessor)"
        ],
        [
            "org.springframework.context.MessageSource",
            "org.springframework.web.reactive.result.view.RequestContext.getMessageSource()",
            "public org.springframework.context.MessageSource getMessageSource()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.result.view.RequestContext.getModel()",
            "public java.util.Map<java.lang.String, java.lang.Object> getModel()"
        ],
        [
            "java.util.Locale",
            "org.springframework.web.reactive.result.view.RequestContext.getLocale()",
            "public final java.util.Locale getLocale()"
        ],
        [
            "java.util.TimeZone",
            "org.springframework.web.reactive.result.view.RequestContext.getTimeZone()",
            "public java.util.TimeZone getTimeZone()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.RequestContext.changeLocale(java.util.Locale)",
            "public void changeLocale(java.util.Locale)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.RequestContext.changeLocale(java.util.Locale, java.util.TimeZone)",
            "public void changeLocale(java.util.Locale, java.util.TimeZone)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.RequestContext.setDefaultHtmlEscape(boolean)",
            "public void setDefaultHtmlEscape(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.RequestContext.isDefaultHtmlEscape()",
            "public boolean isDefaultHtmlEscape()"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.web.reactive.result.view.RequestContext.getDefaultHtmlEscape()",
            "public java.lang.Boolean getDefaultHtmlEscape()"
        ],
        [
            "org.springframework.web.reactive.result.view.RequestDataValueProcessor",
            "org.springframework.web.reactive.result.view.RequestContext.getRequestDataValueProcessor()",
            "public org.springframework.web.reactive.result.view.RequestDataValueProcessor getRequestDataValueProcessor()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getContextPath()",
            "public java.lang.String getContextPath()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getContextUrl(java.lang.String)",
            "public java.lang.String getContextUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getContextUrl(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public java.lang.String getContextUrl(java.lang.String, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getRequestPath()",
            "public java.lang.String getRequestPath()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getQueryString()",
            "public java.lang.String getQueryString()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(java.lang.String, java.lang.String)",
            "public java.lang.String getMessage(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(java.lang.String, java.lang.Object[], java.lang.String)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(java.lang.String, java.util.List<?>, java.lang.String)",
            "public java.lang.String getMessage(java.lang.String, java.util.List<?>, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(java.lang.String, java.lang.Object[], java.lang.String, boolean)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(java.lang.String)",
            "public java.lang.String getMessage(java.lang.String) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(java.lang.String, java.lang.Object[])",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[]) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(java.lang.String, java.util.List<?>)",
            "public java.lang.String getMessage(java.lang.String, java.util.List<?>) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(java.lang.String, java.lang.Object[], boolean)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], boolean) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(org.springframework.context.MessageSourceResolvable)",
            "public java.lang.String getMessage(org.springframework.context.MessageSourceResolvable) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.RequestContext.getMessage(org.springframework.context.MessageSourceResolvable, boolean)",
            "public java.lang.String getMessage(org.springframework.context.MessageSourceResolvable, boolean) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "org.springframework.validation.Errors",
            "org.springframework.web.reactive.result.view.RequestContext.getErrors(java.lang.String)",
            "public org.springframework.validation.Errors getErrors(java.lang.String)"
        ],
        [
            "org.springframework.validation.Errors",
            "org.springframework.web.reactive.result.view.RequestContext.getErrors(java.lang.String, boolean)",
            "public org.springframework.validation.Errors getErrors(java.lang.String, boolean)"
        ],
        [
            "org.springframework.web.reactive.result.view.BindStatus",
            "org.springframework.web.reactive.result.view.RequestContext.getBindStatus(java.lang.String)",
            "public org.springframework.web.reactive.result.view.BindStatus getBindStatus(java.lang.String) throws java.lang.IllegalStateException"
        ],
        [
            "org.springframework.web.reactive.result.view.BindStatus",
            "org.springframework.web.reactive.result.view.RequestContext.getBindStatus(java.lang.String, boolean)",
            "public org.springframework.web.reactive.result.view.BindStatus getBindStatus(java.lang.String, boolean) throws java.lang.IllegalStateException"
        ],
        [
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerView",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerView()",
            "public org.springframework.web.reactive.result.view.freemarker.FreeMarkerView()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerView.setConfiguration(freemarker.template.Configuration)",
            "public void setConfiguration(freemarker.template.Configuration)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerView.setEncoding(java.lang.String)",
            "public void setEncoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerView.setExposeSpringMacroHelpers(boolean)",
            "public void setExposeSpringMacroHelpers(boolean)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerView.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerView.checkResourceExists(java.util.Locale)",
            "public boolean checkResourceExists(java.util.Locale) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerViewResolver",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerViewResolver()",
            "public org.springframework.web.reactive.result.view.freemarker.FreeMarkerViewResolver()"
        ],
        [
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerViewResolver",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerViewResolver(java.lang.String, java.lang.String)",
            "public org.springframework.web.reactive.result.view.freemarker.FreeMarkerViewResolver(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer()",
            "public org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer.setConfiguration(freemarker.template.Configuration)",
            "public void setConfiguration(freemarker.template.Configuration)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.io.IOException, freemarker.template.TemplateException"
        ],
        [
            "freemarker.template.Configuration",
            "org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer.getConfiguration()",
            "public freemarker.template.Configuration getConfiguration()"
        ],
        [
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView()",
            "public org.springframework.web.reactive.result.view.script.ScriptTemplateView()"
        ],
        [
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView(java.lang.String)",
            "public org.springframework.web.reactive.result.view.script.ScriptTemplateView(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setEngine(javax.script.ScriptEngine)",
            "public void setEngine(javax.script.ScriptEngine)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setEngineSupplier(java.util.function.Supplier<javax.script.ScriptEngine>)",
            "public void setEngineSupplier(java.util.function.Supplier<javax.script.ScriptEngine>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setEngineName(java.lang.String)",
            "public void setEngineName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setSharedEngine(java.lang.Boolean)",
            "public void setSharedEngine(java.lang.Boolean)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setScripts(java.lang.String...)",
            "public void setScripts(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setRenderObject(java.lang.String)",
            "public void setRenderObject(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setRenderFunction(java.lang.String)",
            "public void setRenderFunction(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setResourceLoaderPath(java.lang.String)",
            "public void setResourceLoaderPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateView.checkResourceExists(java.util.Locale)",
            "public boolean checkResourceExists(java.util.Locale) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer()",
            "public org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer()"
        ],
        [
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer(java.lang.String)",
            "public org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setEngine(javax.script.ScriptEngine)",
            "public void setEngine(javax.script.ScriptEngine)"
        ],
        [
            "javax.script.ScriptEngine",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.getEngine()",
            "public javax.script.ScriptEngine getEngine()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setEngineSupplier(java.util.function.Supplier<javax.script.ScriptEngine>)",
            "public void setEngineSupplier(java.util.function.Supplier<javax.script.ScriptEngine>)"
        ],
        [
            "java.util.function.Supplier<javax.script.ScriptEngine>",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.getEngineSupplier()",
            "public java.util.function.Supplier<javax.script.ScriptEngine> getEngineSupplier()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setEngineName(java.lang.String)",
            "public void setEngineName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.getEngineName()",
            "public java.lang.String getEngineName()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setSharedEngine(java.lang.Boolean)",
            "public void setSharedEngine(java.lang.Boolean)"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.isSharedEngine()",
            "public java.lang.Boolean isSharedEngine()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setScripts(java.lang.String...)",
            "public void setScripts(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.getScripts()",
            "public java.lang.String[] getScripts()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setRenderObject(java.lang.String)",
            "public void setRenderObject(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.getRenderObject()",
            "public java.lang.String getRenderObject()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setRenderFunction(java.lang.String)",
            "public void setRenderFunction(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.getRenderFunction()",
            "public java.lang.String getRenderFunction()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setCharset(java.nio.charset.Charset)",
            "public void setCharset(java.nio.charset.Charset)"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.getCharset()",
            "public java.nio.charset.Charset getCharset()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.setResourceLoaderPath(java.lang.String)",
            "public void setResourceLoaderPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer.getResourceLoaderPath()",
            "public java.lang.String getResourceLoaderPath()"
        ],
        [
            "org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver()",
            "public org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver()"
        ],
        [
            "org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver",
            "org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver(java.lang.String, java.lang.String)",
            "public org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.view.script.RenderingContext",
            "org.springframework.web.reactive.result.view.script.RenderingContext(org.springframework.context.ApplicationContext, java.util.Locale, java.util.function.Function<java.lang.String, java.lang.String>, java.lang.String)",
            "public org.springframework.web.reactive.result.view.script.RenderingContext(org.springframework.context.ApplicationContext, java.util.Locale, java.util.function.Function<java.lang.String, java.lang.String>, java.lang.String)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.web.reactive.result.view.script.RenderingContext.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "java.util.Locale",
            "org.springframework.web.reactive.result.view.script.RenderingContext.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "java.util.function.Function<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.result.view.script.RenderingContext.getTemplateLoader()",
            "public java.util.function.Function<java.lang.String, java.lang.String> getTemplateLoader()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.script.RenderingContext.getUrl()",
            "public java.lang.String getUrl()"
        ],
        [
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler",
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler(java.util.List<org.springframework.web.reactive.result.view.ViewResolver>, org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public org.springframework.web.reactive.result.view.ViewResolutionResultHandler(java.util.List<org.springframework.web.reactive.result.view.ViewResolver>, org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler",
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler(java.util.List<org.springframework.web.reactive.result.view.ViewResolver>, org.springframework.web.reactive.accept.RequestedContentTypeResolver, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.view.ViewResolutionResultHandler(java.util.List<org.springframework.web.reactive.result.view.ViewResolver>, org.springframework.web.reactive.accept.RequestedContentTypeResolver, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.view.ViewResolver>",
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler.getViewResolvers()",
            "public java.util.List<org.springframework.web.reactive.result.view.ViewResolver> getViewResolvers()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler.setDefaultViews(java.util.List<org.springframework.web.reactive.result.view.View>)",
            "public void setDefaultViews(java.util.List<org.springframework.web.reactive.result.view.View>)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.view.View>",
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler.getDefaultViews()",
            "public java.util.List<org.springframework.web.reactive.result.view.View> getDefaultViews()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler.supports(org.springframework.web.reactive.HandlerResult)",
            "public boolean supports(org.springframework.web.reactive.HandlerResult)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.result.view.ViewResolutionResultHandler.handleResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.HandlerResult)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.HandlerResult)"
        ],
        [
            "org.springframework.web.reactive.result.view.HttpMessageWriterView",
            "org.springframework.web.reactive.result.view.HttpMessageWriterView(org.springframework.core.codec.Encoder<?>)",
            "public org.springframework.web.reactive.result.view.HttpMessageWriterView(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "org.springframework.web.reactive.result.view.HttpMessageWriterView",
            "org.springframework.web.reactive.result.view.HttpMessageWriterView(org.springframework.http.codec.HttpMessageWriter<?>)",
            "public org.springframework.web.reactive.result.view.HttpMessageWriterView(org.springframework.http.codec.HttpMessageWriter<?>)"
        ],
        [
            "org.springframework.http.codec.HttpMessageWriter<?>",
            "org.springframework.web.reactive.result.view.HttpMessageWriterView.getMessageWriter()",
            "public org.springframework.http.codec.HttpMessageWriter<?> getMessageWriter()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.view.HttpMessageWriterView.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.HttpMessageWriterView.setModelKeys(java.util.Set<java.lang.String>)",
            "public void setModelKeys(java.util.Set<java.lang.String>)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.web.reactive.result.view.HttpMessageWriterView.getModelKeys()",
            "public final java.util.Set<java.lang.String> getModelKeys()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.result.view.HttpMessageWriterView.render(java.util.Map<java.lang.String, ?>, org.springframework.http.MediaType, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> render(java.util.Map<java.lang.String, ?>, org.springframework.http.MediaType, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.view.View.getSupportedMediaTypes()",
            "public default java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "default",
            "org.springframework.web.reactive.result.view.View.boolean isRedirectView()",
            "public default boolean isRedirectView()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.view.DefaultRendering.view()",
            "public java.lang.Object view()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.result.view.DefaultRendering.modelAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> modelAttributes()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.reactive.result.view.DefaultRendering.status()",
            "public org.springframework.http.HttpStatus status()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.result.view.DefaultRendering.headers()",
            "public org.springframework.http.HttpHeaders headers()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.DefaultRendering.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.modelAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.result.view.DefaultRenderingBuilder modelAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.modelAttribute(java.lang.Object)",
            "public org.springframework.web.reactive.result.view.DefaultRenderingBuilder modelAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.modelAttributes(java.lang.Object...)",
            "public org.springframework.web.reactive.result.view.DefaultRenderingBuilder modelAttributes(java.lang.Object...)"
        ],
        [
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.model(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.reactive.result.view.DefaultRenderingBuilder model(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.status(org.springframework.http.HttpStatus)",
            "public org.springframework.web.reactive.result.view.DefaultRenderingBuilder status(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.result.view.DefaultRenderingBuilder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.web.reactive.result.view.DefaultRenderingBuilder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$RedirectBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.contextRelative(boolean)",
            "public org.springframework.web.reactive.result.view.Rendering$RedirectBuilder contextRelative(boolean)"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$RedirectBuilder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.propagateQuery(boolean)",
            "public org.springframework.web.reactive.result.view.Rendering$RedirectBuilder propagateQuery(boolean)"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.build()",
            "public org.springframework.web.reactive.result.view.Rendering build()"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$Builder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.web.reactive.result.view.Rendering$Builder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$Builder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.header(java.lang.String, java.lang.String[])",
            "public org.springframework.web.reactive.result.view.Rendering$Builder header(java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$Builder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.status(org.springframework.http.HttpStatus)",
            "public org.springframework.web.reactive.result.view.Rendering$Builder status(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$Builder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.model(java.util.Map)",
            "public org.springframework.web.reactive.result.view.Rendering$Builder model(java.util.Map)"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$Builder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.modelAttributes(java.lang.Object[])",
            "public org.springframework.web.reactive.result.view.Rendering$Builder modelAttributes(java.lang.Object[])"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$Builder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.modelAttribute(java.lang.Object)",
            "public org.springframework.web.reactive.result.view.Rendering$Builder modelAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$Builder",
            "org.springframework.web.reactive.result.view.DefaultRenderingBuilder.modelAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.reactive.result.view.Rendering$Builder modelAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.AbstractUrlBasedView.setUrl(java.lang.String)",
            "public void setUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.AbstractUrlBasedView.getUrl()",
            "public java.lang.String getUrl()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.AbstractUrlBasedView.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.view.AbstractUrlBasedView.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$Builder<?>",
            "org.springframework.web.reactive.result.view.Rendering.view(java.lang.String)",
            "public static org.springframework.web.reactive.result.view.Rendering$Builder<?> view(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.view.Rendering$RedirectBuilder",
            "org.springframework.web.reactive.result.view.Rendering.redirectTo(java.lang.String)",
            "public static org.springframework.web.reactive.result.view.Rendering$RedirectBuilder redirectTo(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.view.RedirectView",
            "org.springframework.web.reactive.result.view.RedirectView()",
            "public org.springframework.web.reactive.result.view.RedirectView()"
        ],
        [
            "org.springframework.web.reactive.result.view.RedirectView",
            "org.springframework.web.reactive.result.view.RedirectView(java.lang.String)",
            "public org.springframework.web.reactive.result.view.RedirectView(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.view.RedirectView",
            "org.springframework.web.reactive.result.view.RedirectView(java.lang.String, org.springframework.http.HttpStatus)",
            "public org.springframework.web.reactive.result.view.RedirectView(java.lang.String, org.springframework.http.HttpStatus)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.RedirectView.setStatusCode(org.springframework.http.HttpStatus)",
            "public void setStatusCode(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.reactive.result.view.RedirectView.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.RedirectView.setContextRelative(boolean)",
            "public void setContextRelative(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.RedirectView.isContextRelative()",
            "public boolean isContextRelative()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.RedirectView.setPropagateQuery(boolean)",
            "public void setPropagateQuery(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.RedirectView.isPropagateQuery()",
            "public boolean isPropagateQuery()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.RedirectView.setHosts(java.lang.String...)",
            "public void setHosts(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.reactive.result.view.RedirectView.getHosts()",
            "public java.lang.String[] getHosts()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.view.RedirectView.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.RedirectView.isRedirectView()",
            "public boolean isRedirectView()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.view.RedirectView.checkResourceExists(java.util.Locale)",
            "public boolean checkResourceExists(java.util.Locale) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition(org.springframework.web.reactive.result.condition.RequestCondition<?>...)",
            "public org.springframework.web.reactive.result.condition.CompositeRequestCondition(org.springframework.web.reactive.result.condition.RequestCondition<?>...)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>>",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition.getConditions()",
            "public java.util.List<org.springframework.web.reactive.result.condition.RequestCondition<?>> getConditions()"
        ],
        [
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition.combine(org.springframework.web.reactive.result.condition.CompositeRequestCondition)",
            "public org.springframework.web.reactive.result.condition.CompositeRequestCondition combine(org.springframework.web.reactive.result.condition.CompositeRequestCondition)"
        ],
        [
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.condition.CompositeRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition.compareTo(org.springframework.web.reactive.result.condition.CompositeRequestCondition, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.condition.CompositeRequestCondition, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.CompositeRequestCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition(java.lang.String...)",
            "public org.springframework.web.reactive.result.condition.ConsumesRequestCondition(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition(java.lang.String[], java.lang.String[])",
            "public org.springframework.web.reactive.result.condition.ConsumesRequestCondition(java.lang.String[], java.lang.String[])"
        ],
        [
            "java.util.Set<org.springframework.web.reactive.result.condition.MediaTypeExpression>",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.getExpressions()",
            "public java.util.Set<org.springframework.web.reactive.result.condition.MediaTypeExpression> getExpressions()"
        ],
        [
            "java.util.Set<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.getConsumableMediaTypes()",
            "public java.util.Set<org.springframework.http.MediaType> getConsumableMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.setBodyRequired(boolean)",
            "public void setBodyRequired(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.isBodyRequired()",
            "public boolean isBodyRequired()"
        ],
        [
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.combine(org.springframework.web.reactive.result.condition.ConsumesRequestCondition)",
            "public org.springframework.web.reactive.result.condition.ConsumesRequestCondition combine(org.springframework.web.reactive.result.condition.ConsumesRequestCondition)"
        ],
        [
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.condition.ConsumesRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.compareTo(org.springframework.web.reactive.result.condition.ConsumesRequestCondition, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.condition.ConsumesRequestCondition, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestConditionHolder",
            "org.springframework.web.reactive.result.condition.RequestConditionHolder(org.springframework.web.reactive.result.condition.RequestCondition<?>)",
            "public org.springframework.web.reactive.result.condition.RequestConditionHolder(org.springframework.web.reactive.result.condition.RequestCondition<?>)"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestCondition<?>",
            "org.springframework.web.reactive.result.condition.RequestConditionHolder.getCondition()",
            "public org.springframework.web.reactive.result.condition.RequestCondition<?> getCondition()"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestConditionHolder",
            "org.springframework.web.reactive.result.condition.RequestConditionHolder.combine(org.springframework.web.reactive.result.condition.RequestConditionHolder)",
            "public org.springframework.web.reactive.result.condition.RequestConditionHolder combine(org.springframework.web.reactive.result.condition.RequestConditionHolder)"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestConditionHolder",
            "org.springframework.web.reactive.result.condition.RequestConditionHolder.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.condition.RequestConditionHolder getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.RequestConditionHolder.compareTo(org.springframework.web.reactive.result.condition.RequestConditionHolder, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.condition.RequestConditionHolder, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.RequestConditionHolder.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.RequestConditionHolder.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.RequestConditionHolder.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition$HeaderExpression",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition$HeaderExpression(java.lang.String)",
            "public org.springframework.web.reactive.result.condition.HeadersRequestCondition$HeaderExpression(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.condition.AbstractRequestCondition",
            "org.springframework.web.reactive.result.condition.AbstractRequestCondition()",
            "public org.springframework.web.reactive.result.condition.AbstractRequestCondition()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.AbstractRequestCondition.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.AbstractRequestCondition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.AbstractRequestCondition.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.condition.AbstractRequestCondition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition",
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition(java.lang.String...)",
            "public org.springframework.web.reactive.result.condition.ParamsRequestCondition(java.lang.String...)"
        ],
        [
            "java.util.Set<org.springframework.web.reactive.result.condition.NameValueExpression<java.lang.String>>",
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition.getExpressions()",
            "public java.util.Set<org.springframework.web.reactive.result.condition.NameValueExpression<java.lang.String>> getExpressions()"
        ],
        [
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition",
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition.combine(org.springframework.web.reactive.result.condition.ParamsRequestCondition)",
            "public org.springframework.web.reactive.result.condition.ParamsRequestCondition combine(org.springframework.web.reactive.result.condition.ParamsRequestCondition)"
        ],
        [
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition",
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.condition.ParamsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition.compareTo(org.springframework.web.reactive.result.condition.ParamsRequestCondition, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.condition.ParamsRequestCondition, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition",
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition(org.springframework.web.bind.annotation.RequestMethod...)",
            "public org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition(org.springframework.web.bind.annotation.RequestMethod...)"
        ],
        [
            "java.util.Set<org.springframework.web.bind.annotation.RequestMethod>",
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition.getMethods()",
            "public java.util.Set<org.springframework.web.bind.annotation.RequestMethod> getMethods()"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition",
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition.combine(org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition)",
            "public org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition combine(org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition)"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition",
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition.compareTo(org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.condition.AbstractNameValueExpression.getName()",
            "public java.lang.String getName()"
        ],
        [
            "T",
            "org.springframework.web.reactive.result.condition.AbstractNameValueExpression.getValue()",
            "public T getValue()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.AbstractNameValueExpression.isNegated()",
            "public boolean isNegated()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.AbstractNameValueExpression.match(org.springframework.web.server.ServerWebExchange)",
            "public final boolean match(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.AbstractNameValueExpression.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.AbstractNameValueExpression.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.condition.AbstractNameValueExpression.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition(java.lang.String...)",
            "public org.springframework.web.reactive.result.condition.ProducesRequestCondition(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition(java.lang.String[], java.lang.String[])",
            "public org.springframework.web.reactive.result.condition.ProducesRequestCondition(java.lang.String[], java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition(java.lang.String[], java.lang.String[], org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public org.springframework.web.reactive.result.condition.ProducesRequestCondition(java.lang.String[], java.lang.String[], org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "java.util.Set<org.springframework.web.reactive.result.condition.MediaTypeExpression>",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.getExpressions()",
            "public java.util.Set<org.springframework.web.reactive.result.condition.MediaTypeExpression> getExpressions()"
        ],
        [
            "java.util.Set<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.getProducibleMediaTypes()",
            "public java.util.Set<org.springframework.http.MediaType> getProducibleMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.combine(org.springframework.web.reactive.result.condition.ProducesRequestCondition)",
            "public org.springframework.web.reactive.result.condition.ProducesRequestCondition combine(org.springframework.web.reactive.result.condition.ProducesRequestCondition)"
        ],
        [
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.condition.ProducesRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.compareTo(org.springframework.web.reactive.result.condition.ProducesRequestCondition, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.condition.ProducesRequestCondition, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.clearMediaTypesAttribute(org.springframework.web.server.ServerWebExchange)",
            "public static void clearMediaTypesAttribute(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression.getMediaType()",
            "public org.springframework.http.MediaType getMediaType()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression.isNegated()",
            "public boolean isNegated()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression.match(org.springframework.web.server.ServerWebExchange)",
            "public final boolean match(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression.compareTo(org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression)",
            "public int compareTo(org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.AbstractMediaTypeExpression.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition(java.lang.String...)",
            "public org.springframework.web.reactive.result.condition.HeadersRequestCondition(java.lang.String...)"
        ],
        [
            "java.util.Set<org.springframework.web.reactive.result.condition.NameValueExpression<java.lang.String>>",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition.getExpressions()",
            "public java.util.Set<org.springframework.web.reactive.result.condition.NameValueExpression<java.lang.String>> getExpressions()"
        ],
        [
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition.combine(org.springframework.web.reactive.result.condition.HeadersRequestCondition)",
            "public org.springframework.web.reactive.result.condition.HeadersRequestCondition combine(org.springframework.web.reactive.result.condition.HeadersRequestCondition)"
        ],
        [
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.condition.HeadersRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition.compareTo(org.springframework.web.reactive.result.condition.HeadersRequestCondition, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.condition.HeadersRequestCondition, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition(org.springframework.web.util.pattern.PathPattern...)",
            "public org.springframework.web.reactive.result.condition.PatternsRequestCondition(org.springframework.web.util.pattern.PathPattern...)"
        ],
        [
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition(java.util.List<org.springframework.web.util.pattern.PathPattern>)",
            "public org.springframework.web.reactive.result.condition.PatternsRequestCondition(java.util.List<org.springframework.web.util.pattern.PathPattern>)"
        ],
        [
            "java.util.Set<org.springframework.web.util.pattern.PathPattern>",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition.getPatterns()",
            "public java.util.Set<org.springframework.web.util.pattern.PathPattern> getPatterns()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition.getDirectPaths()",
            "public java.util.Set<java.lang.String> getDirectPaths()"
        ],
        [
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition.combine(org.springframework.web.reactive.result.condition.PatternsRequestCondition)",
            "public org.springframework.web.reactive.result.condition.PatternsRequestCondition combine(org.springframework.web.reactive.result.condition.PatternsRequestCondition)"
        ],
        [
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.condition.PatternsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition.compareTo(org.springframework.web.reactive.result.condition.PatternsRequestCondition, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.condition.PatternsRequestCondition, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.SimpleHandlerAdapter",
            "org.springframework.web.reactive.result.SimpleHandlerAdapter()",
            "public org.springframework.web.reactive.result.SimpleHandlerAdapter()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.SimpleHandlerAdapter.supports(java.lang.Object)",
            "public boolean supports(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult>",
            "org.springframework.web.reactive.result.SimpleHandlerAdapter.handle(org.springframework.web.server.ServerWebExchange, java.lang.Object)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult> handle(org.springframework.web.server.ServerWebExchange, java.lang.Object)"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.web.reactive.result.HandlerResultHandlerSupport.getAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry getAdapterRegistry()"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolver",
            "org.springframework.web.reactive.result.HandlerResultHandlerSupport.getContentTypeResolver()",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolver getContentTypeResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.HandlerResultHandlerSupport.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.HandlerResultHandlerSupport.getOrder()",
            "public int getOrder()"
        ],
        [
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration(T, org.springframework.web.method.HandlerMethod, java.util.Set<java.lang.String>, boolean)",
            "public org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration(T, org.springframework.web.method.HandlerMethod, java.util.Set<java.lang.String>, boolean)"
        ],
        [
            "T",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration.getMapping()",
            "public T getMapping()"
        ],
        [
            "org.springframework.web.method.HandlerMethod",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration.getHandlerMethod()",
            "public org.springframework.web.method.HandlerMethod getHandlerMethod()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration.getDirectPaths()",
            "public java.util.Set<java.lang.String> getDirectPaths()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration.hasCorsConfig()",
            "public boolean hasCorsConfig()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.SyncHandlerMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public default reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.util.Map<T, org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration<T>>",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistry.getRegistrations()",
            "public java.util.Map<T, org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration<T>> getRegistrations()"
        ],
        [
            "java.util.List<T>",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistry.getMappingsByDirectPath(org.springframework.web.server.ServerWebExchange)",
            "public java.util.List<T> getMappingsByDirectPath(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistry.getCorsConfiguration(org.springframework.web.method.HandlerMethod)",
            "public org.springframework.web.cors.CorsConfiguration getCorsConfiguration(org.springframework.web.method.HandlerMethod)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistry.acquireReadLock()",
            "public void acquireReadLock()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistry.releaseReadLock()",
            "public void releaseReadLock()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistry.register(T, java.lang.Object, java.lang.reflect.Method)",
            "public void register(T, java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistry.unregister(T)",
            "public void unregister(T)"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverSupport.getAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry getAdapterRegistry()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo",
            "org.springframework.web.reactive.result.method.RequestMappingInfo(java.lang.String, org.springframework.web.reactive.result.condition.PatternsRequestCondition, org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition, org.springframework.web.reactive.result.condition.ParamsRequestCondition, org.springframework.web.reactive.result.condition.HeadersRequestCondition, org.springframework.web.reactive.result.condition.ConsumesRequestCondition, org.springframework.web.reactive.result.condition.ProducesRequestCondition, org.springframework.web.reactive.result.condition.RequestCondition<?>)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo(java.lang.String, org.springframework.web.reactive.result.condition.PatternsRequestCondition, org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition, org.springframework.web.reactive.result.condition.ParamsRequestCondition, org.springframework.web.reactive.result.condition.HeadersRequestCondition, org.springframework.web.reactive.result.condition.ConsumesRequestCondition, org.springframework.web.reactive.result.condition.ProducesRequestCondition, org.springframework.web.reactive.result.condition.RequestCondition<?>)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo",
            "org.springframework.web.reactive.result.method.RequestMappingInfo(org.springframework.web.reactive.result.condition.PatternsRequestCondition, org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition, org.springframework.web.reactive.result.condition.ParamsRequestCondition, org.springframework.web.reactive.result.condition.HeadersRequestCondition, org.springframework.web.reactive.result.condition.ConsumesRequestCondition, org.springframework.web.reactive.result.condition.ProducesRequestCondition, org.springframework.web.reactive.result.condition.RequestCondition<?>)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo(org.springframework.web.reactive.result.condition.PatternsRequestCondition, org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition, org.springframework.web.reactive.result.condition.ParamsRequestCondition, org.springframework.web.reactive.result.condition.HeadersRequestCondition, org.springframework.web.reactive.result.condition.ConsumesRequestCondition, org.springframework.web.reactive.result.condition.ProducesRequestCondition, org.springframework.web.reactive.result.condition.RequestCondition<?>)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo",
            "org.springframework.web.reactive.result.method.RequestMappingInfo(org.springframework.web.reactive.result.method.RequestMappingInfo, org.springframework.web.reactive.result.condition.RequestCondition<?>)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo(org.springframework.web.reactive.result.method.RequestMappingInfo, org.springframework.web.reactive.result.condition.RequestCondition<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getName()",
            "public java.lang.String getName()"
        ],
        [
            "org.springframework.web.reactive.result.condition.PatternsRequestCondition",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getPatternsCondition()",
            "public org.springframework.web.reactive.result.condition.PatternsRequestCondition getPatternsCondition()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getDirectPaths()",
            "public java.util.Set<java.lang.String> getDirectPaths()"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getMethodsCondition()",
            "public org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition getMethodsCondition()"
        ],
        [
            "org.springframework.web.reactive.result.condition.ParamsRequestCondition",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getParamsCondition()",
            "public org.springframework.web.reactive.result.condition.ParamsRequestCondition getParamsCondition()"
        ],
        [
            "org.springframework.web.reactive.result.condition.HeadersRequestCondition",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getHeadersCondition()",
            "public org.springframework.web.reactive.result.condition.HeadersRequestCondition getHeadersCondition()"
        ],
        [
            "org.springframework.web.reactive.result.condition.ConsumesRequestCondition",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getConsumesCondition()",
            "public org.springframework.web.reactive.result.condition.ConsumesRequestCondition getConsumesCondition()"
        ],
        [
            "org.springframework.web.reactive.result.condition.ProducesRequestCondition",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getProducesCondition()",
            "public org.springframework.web.reactive.result.condition.ProducesRequestCondition getProducesCondition()"
        ],
        [
            "org.springframework.web.reactive.result.condition.RequestCondition<?>",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getCustomCondition()",
            "public org.springframework.web.reactive.result.condition.RequestCondition<?> getCustomCondition()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.combine(org.springframework.web.reactive.result.method.RequestMappingInfo)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo combine(org.springframework.web.reactive.result.method.RequestMappingInfo)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.compareTo(org.springframework.web.reactive.result.method.RequestMappingInfo, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(org.springframework.web.reactive.result.method.RequestMappingInfo, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.mutate()",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder mutate()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.paths(java.lang.String...)",
            "public static org.springframework.web.reactive.result.method.RequestMappingInfo$Builder paths(java.lang.String...)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)",
            "public int compareTo(java.lang.Object, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.getMatchingCondition(org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object getMatchingCondition(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.RequestMappingInfo.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.paths(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder paths(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.methods(org.springframework.web.bind.annotation.RequestMethod...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder methods(org.springframework.web.bind.annotation.RequestMethod...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.params(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder params(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.headers(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder headers(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.consumes(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder consumes(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.produces(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder produces(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.mappingName(java.lang.String)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder mappingName(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.customCondition(org.springframework.web.reactive.result.condition.RequestCondition<?>)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder customCondition(org.springframework.web.reactive.result.condition.RequestCondition<?>)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.options(org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder options(org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.build()",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo build()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.customCondition(org.springframework.web.reactive.result.condition.RequestCondition)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder customCondition(org.springframework.web.reactive.result.condition.RequestCondition)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.mappingName(java.lang.String)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder mappingName(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.produces(java.lang.String[])",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder produces(java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.consumes(java.lang.String[])",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder consumes(java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.headers(java.lang.String[])",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder headers(java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.params(java.lang.String[])",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder params(java.lang.String[])"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$DefaultBuilder.methods(org.springframework.web.bind.annotation.RequestMethod[])",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder methods(org.springframework.web.bind.annotation.RequestMethod[])"
        ],
        [
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$Match",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$Match(T, org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration<T>)",
            "public org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$Match(T, org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistration<T>)"
        ],
        [
            "org.springframework.web.method.HandlerMethod",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$Match.getHandlerMethod()",
            "public org.springframework.web.method.HandlerMethod getHandlerMethod()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$Match.hasCorsConfig()",
            "public boolean hasCorsConfig()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$Match.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder(org.springframework.web.reactive.result.method.RequestMappingInfo)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder(org.springframework.web.reactive.result.method.RequestMappingInfo)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.paths(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder paths(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.methods(org.springframework.web.bind.annotation.RequestMethod...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder methods(org.springframework.web.bind.annotation.RequestMethod...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.params(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder params(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.headers(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder headers(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.consumes(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder consumes(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.produces(java.lang.String...)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder produces(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.mappingName(java.lang.String)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder mappingName(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.customCondition(org.springframework.web.reactive.result.condition.RequestCondition<?>)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder customCondition(org.springframework.web.reactive.result.condition.RequestCondition<?>)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$Builder",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.options(org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$Builder options(org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$MutateBuilder.build()",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo build()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping()",
            "public org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.method.HandlerMethod>",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.getHandlerInternal(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<org.springframework.web.method.HandlerMethod> getHandlerInternal(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod",
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod(org.springframework.web.method.HandlerMethod)",
            "public org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod(org.springframework.web.method.HandlerMethod)"
        ],
        [
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod",
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod.setArgumentResolvers(java.util.List<org.springframework.web.reactive.result.method.SyncHandlerMethodArgumentResolver>)",
            "public void setArgumentResolvers(java.util.List<org.springframework.web.reactive.result.method.SyncHandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.method.SyncHandlerMethodArgumentResolver>",
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod.getResolvers()",
            "public java.util.List<org.springframework.web.reactive.result.method.SyncHandlerMethodArgumentResolver> getResolvers()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod.setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "org.springframework.core.ParameterNameDiscoverer",
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod.getParameterNameDiscoverer()",
            "public org.springframework.core.ParameterNameDiscoverer getParameterNameDiscoverer()"
        ],
        [
            "org.springframework.web.reactive.HandlerResult",
            "org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod.invokeForHandlerResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.BindingContext, java.lang.Object...)",
            "public org.springframework.web.reactive.HandlerResult invokeForHandlerResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.BindingContext, java.lang.Object...)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver$NamedValueInfo",
            "org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver$NamedValueInfo(java.lang.String, boolean, java.lang.String)",
            "public org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver$NamedValueInfo(java.lang.String, boolean, java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.AbstractNamedValueSyncArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.annotation.AbstractNamedValueSyncArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.MatrixVariableMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.MatrixVariableMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.MatrixVariableMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.MatrixVariableMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry, boolean)",
            "public org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry, boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "reactor.core.publisher.Mono<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver.getValuesToBind(org.springframework.web.bind.support.WebExchangeDataBinder, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.util.Map<java.lang.String, java.lang.Object>> getValuesToBind(org.springframework.web.bind.support.WebExchangeDataBinder, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ServerWebExchangeMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.ServerWebExchangeMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.ServerWebExchangeMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.ServerWebExchangeMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.annotation.ServerWebExchangeMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver$PartServerHttpRequest",
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver$PartServerHttpRequest(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.codec.multipart.Part)",
            "public org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver$PartServerHttpRequest(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.codec.multipart.Part)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver$PartServerHttpRequest.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver$PartServerHttpRequest.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.PathVariableMapMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.PathVariableMapMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.PathVariableMapMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.PathVariableMapMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.annotation.PathVariableMapMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler",
            "org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler",
            "org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.web.reactive.accept.RequestedContentTypeResolver, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.web.reactive.accept.RequestedContentTypeResolver, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler.supports(org.springframework.web.reactive.HandlerResult)",
            "public boolean supports(org.springframework.web.reactive.HandlerResult)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler.handleResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.HandlerResult)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.HandlerResult)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ModelMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.ModelMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.ModelMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.ModelMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.annotation.ModelMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.getMessageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> getMessageReaders()"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.SessionStatusMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.SessionStatusMethodArgumentResolver()",
            "public org.springframework.web.reactive.result.method.annotation.SessionStatusMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.SessionStatusMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.annotation.SessionStatusMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry, boolean)",
            "public org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry, boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestBodyMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.RequestBodyMethodArgumentResolver(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.RequestBodyMethodArgumentResolver(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.RequestBodyMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.RequestBodyMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter()",
            "public org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.setMessageReaders(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)",
            "public void setMessageReaders(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.getMessageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> getMessageReaders()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.setWebBindingInitializer(org.springframework.web.bind.support.WebBindingInitializer)",
            "public void setWebBindingInitializer(org.springframework.web.bind.support.WebBindingInitializer)"
        ],
        [
            "org.springframework.web.bind.support.WebBindingInitializer",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.getWebBindingInitializer()",
            "public org.springframework.web.bind.support.WebBindingInitializer getWebBindingInitializer()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.setArgumentResolverConfigurer(org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer)",
            "public void setArgumentResolverConfigurer(org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.getArgumentResolverConfigurer()",
            "public org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer getArgumentResolverConfigurer()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)",
            "public void setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.getReactiveAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry getReactiveAdapterRegistry()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.supports(java.lang.Object)",
            "public boolean supports(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult>",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(org.springframework.web.server.ServerWebExchange, java.lang.Object)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult> handle(org.springframework.web.server.ServerWebExchange, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.SessionAttributeMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping()",
            "public org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.setPathPrefixes(java.util.Map<java.lang.String, java.util.function.Predicate<java.lang.Class<?>>>)",
            "public void setPathPrefixes(java.util.Map<java.lang.String, java.util.function.Predicate<java.lang.Class<?>>>)"
        ],
        [
            "java.util.Map<java.lang.String, java.util.function.Predicate<java.lang.Class<?>>>",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.getPathPrefixes()",
            "public java.util.Map<java.lang.String, java.util.function.Predicate<java.lang.Class<?>>> getPathPrefixes()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.setContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public void setContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolver",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.getContentTypeResolver()",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolver getContentTypeResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.registerMapping(org.springframework.web.reactive.result.method.RequestMappingInfo, java.lang.Object, java.lang.reflect.Method)",
            "public void registerMapping(org.springframework.web.reactive.result.method.RequestMappingInfo, java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.registerMapping(java.lang.Object, java.lang.Object, java.lang.reflect.Method)",
            "public void registerMapping(java.lang.Object, java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer",
            "org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer()",
            "public org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer.addCustomResolver(org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver...)",
            "public void addCustomResolver(org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver...)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.RequestHeaderMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.PrincipalMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.PrincipalMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.PrincipalMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.PrincipalMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.PrincipalMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler",
            "org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler(java.lang.Class<?>)",
            "public org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler.hasSessionAttributes()",
            "public boolean hasSessionAttributes()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler.isHandlerSessionAttribute(java.lang.String, java.lang.Class<?>)",
            "public boolean isHandlerSessionAttribute(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler.retrieveAttributes(org.springframework.web.server.WebSession)",
            "public java.util.Map<java.lang.String, java.lang.Object> retrieveAttributes(org.springframework.web.server.WebSession)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler.storeAttributes(org.springframework.web.server.WebSession, java.util.Map<java.lang.String, ?>)",
            "public void storeAttributes(org.springframework.web.server.WebSession, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler.cleanupAttributes(org.springframework.web.server.WebSession)",
            "public void cleanupAttributes(org.springframework.web.server.WebSession)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.HttpEntityMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.HttpEntityMethodArgumentResolver(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.HttpEntityMethodArgumentResolver(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.HttpEntityMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.HttpEntityMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler.getMessageWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> getMessageWriters()"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver$PathVariableNamedValueInfo",
            "org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver$PathVariableNamedValueInfo(org.springframework.web.bind.annotation.PathVariable)",
            "public org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver$PathVariableNamedValueInfo(org.springframework.web.bind.annotation.PathVariable)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part>",
            "org.springframework.web.reactive.result.method.annotation.RequestPartMethodArgumentResolver.getPartValues(org.springframework.core.MethodParameter, org.springframework.web.bind.annotation.RequestPart, boolean, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part> getPartValues(org.springframework.core.MethodParameter, org.springframework.web.bind.annotation.RequestPart, boolean, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ContinuationHandlerMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.ContinuationHandlerMethodArgumentResolver()",
            "public org.springframework.web.reactive.result.method.annotation.ContinuationHandlerMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.ContinuationHandlerMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.ContinuationHandlerMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.WebSessionMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.WebSessionMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.WebSessionMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.WebSessionMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.WebSessionMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ModelInitializer",
            "org.springframework.web.reactive.result.method.annotation.ModelInitializer(org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.ModelInitializer(org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.result.method.annotation.ModelInitializer.initModel(org.springframework.web.method.HandlerMethod, org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> initModel(org.springframework.web.method.HandlerMethod, org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.method.annotation.ModelInitializer.getNameForParameter(org.springframework.core.MethodParameter)",
            "public static java.lang.String getNameForParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.bind.support.SessionStatus",
            "org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext.getSessionStatus()",
            "public org.springframework.web.bind.support.SessionStatus getSessionStatus()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext.setSessionContext(org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler, org.springframework.web.server.WebSession)",
            "public void setSessionContext(org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler, org.springframework.web.server.WebSession)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext.saveModel()",
            "public void saveModel()"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler",
            "org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler",
            "org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.web.reactive.accept.RequestedContentTypeResolver, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.web.reactive.accept.RequestedContentTypeResolver, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler.supports(org.springframework.web.reactive.HandlerResult)",
            "public boolean supports(org.springframework.web.reactive.HandlerResult)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler.handleResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.HandlerResult)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleResult(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.HandlerResult)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod",
            "org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.getRequestMappingMethod(org.springframework.web.method.HandlerMethod)",
            "public org.springframework.web.reactive.result.method.InvocableHandlerMethod getRequestMappingMethod(org.springframework.web.method.HandlerMethod)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod>",
            "org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.getInitBinderMethods(org.springframework.web.method.HandlerMethod)",
            "public java.util.List<org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod> getInitBinderMethods(org.springframework.web.method.HandlerMethod)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.method.InvocableHandlerMethod>",
            "org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.getModelAttributeMethods(org.springframework.web.method.HandlerMethod)",
            "public java.util.List<org.springframework.web.reactive.result.method.InvocableHandlerMethod> getModelAttributeMethods(org.springframework.web.method.HandlerMethod)"
        ],
        [
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod",
            "org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.getExceptionHandlerMethod(java.lang.Throwable, org.springframework.web.method.HandlerMethod)",
            "public org.springframework.web.reactive.result.method.InvocableHandlerMethod getExceptionHandlerMethod(java.lang.Throwable, org.springframework.web.method.HandlerMethod)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler",
            "org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver.getSessionAttributesHandler(org.springframework.web.method.HandlerMethod)",
            "public org.springframework.web.reactive.result.method.annotation.SessionAttributesHandler getSessionAttributesHandler(org.springframework.web.method.HandlerMethod)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.MatrixVariableMapMethodArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.MatrixVariableMapMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.MatrixVariableMapMethodArgumentResolver(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.annotation.MatrixVariableMapMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.result.method.annotation.MatrixVariableMapMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver",
            "org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite",
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite.addResolver(org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver)",
            "public org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite addResolver(org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver)"
        ],
        [
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite",
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite.addResolvers(org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver...)",
            "public org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite addResolvers(org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver...)"
        ],
        [
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite",
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite.addResolvers(java.util.List<? extends org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver>)",
            "public org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite addResolvers(java.util.List<? extends org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver>",
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite.getResolvers()",
            "public java.util.List<org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver> getResolvers()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverComposite.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler(java.util.Set<org.springframework.http.HttpMethod>, java.util.Set<org.springframework.http.MediaType>)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler(java.util.Set<org.springframework.http.HttpMethod>, java.util.Set<org.springframework.http.MediaType>)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler.handle()",
            "public org.springframework.http.HttpHeaders handle()"
        ],
        [
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod",
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod(org.springframework.web.method.HandlerMethod)",
            "public org.springframework.web.reactive.result.method.InvocableHandlerMethod(org.springframework.web.method.HandlerMethod)"
        ],
        [
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod",
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.web.reactive.result.method.InvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod.setArgumentResolvers(java.util.List<? extends org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver>)",
            "public void setArgumentResolvers(java.util.List<? extends org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver>",
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod.getResolvers()",
            "public java.util.List<org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver> getResolvers()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod.setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "org.springframework.core.ParameterNameDiscoverer",
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod.getParameterNameDiscoverer()",
            "public org.springframework.core.ParameterNameDiscoverer getParameterNameDiscoverer()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod.setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)",
            "public void setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult>",
            "org.springframework.web.reactive.result.method.InvocableHandlerMethod.invoke(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.BindingContext, java.lang.Object...)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult> invoke(org.springframework.web.server.ServerWebExchange, org.springframework.web.reactive.BindingContext, java.lang.Object...)"
        ],
        [
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping()",
            "public org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping()"
        ],
        [
            "java.util.Map<T, org.springframework.web.method.HandlerMethod>",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.getHandlerMethods()",
            "public java.util.Map<T, org.springframework.web.method.HandlerMethod> getHandlerMethods()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.registerMapping(T, java.lang.Object, java.lang.reflect.Method)",
            "public void registerMapping(T, java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.unregisterMapping(T)",
            "public void unregisterMapping(T)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.method.HandlerMethod>",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.getHandlerInternal(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<org.springframework.web.method.HandlerMethod> getHandlerInternal(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$PreFlightAmbiguousMatchHandler.handle()",
            "public void handle()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper(java.util.Set<org.springframework.web.reactive.result.method.RequestMappingInfo>, org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper(java.util.Set<org.springframework.web.reactive.result.method.RequestMappingInfo>, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.hasMethodsMismatch()",
            "public boolean hasMethodsMismatch()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.hasConsumesMismatch()",
            "public boolean hasConsumesMismatch()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.hasProducesMismatch()",
            "public boolean hasProducesMismatch()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.hasParamsMismatch()",
            "public boolean hasParamsMismatch()"
        ],
        [
            "java.util.Set<org.springframework.http.HttpMethod>",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.getAllowedMethods()",
            "public java.util.Set<org.springframework.http.HttpMethod> getAllowedMethods()"
        ],
        [
            "java.util.Set<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.getConsumableMediaTypes()",
            "public java.util.Set<org.springframework.http.MediaType> getConsumableMediaTypes()"
        ],
        [
            "java.util.Set<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.getProducibleMediaTypes()",
            "public java.util.Set<org.springframework.http.MediaType> getProducibleMediaTypes()"
        ],
        [
            "java.util.List<java.util.Set<org.springframework.web.reactive.result.condition.NameValueExpression<java.lang.String>>>",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.getParamConditions()",
            "public java.util.List<java.util.Set<org.springframework.web.reactive.result.condition.NameValueExpression<java.lang.String>>> getParamConditions()"
        ],
        [
            "java.util.Set<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper.getConsumablePatchMediaTypes()",
            "public java.util.Set<org.springframework.http.MediaType> getConsumablePatchMediaTypes()"
        ],
        [
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MatchComparator",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MatchComparator(java.util.Comparator<T>)",
            "public org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MatchComparator(java.util.Comparator<T>)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MatchComparator.compare(org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<T>.Match, org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<T>.Match)",
            "public int compare(org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<T>.Match, org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping<T>.Match)"
        ],
        [
            "int",
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MatchComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration()",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration.setPatternParser(org.springframework.web.util.pattern.PathPatternParser)",
            "public void setPatternParser(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "org.springframework.web.util.pattern.PathPatternParser",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration.getPatternParser()",
            "public org.springframework.web.util.pattern.PathPatternParser getPatternParser()"
        ],
        [
            "void",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration.setContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public void setContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolver",
            "org.springframework.web.reactive.result.method.RequestMappingInfo$BuilderConfiguration.getContentTypeResolver()",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolver getContentTypeResolver()"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch(org.springframework.web.reactive.result.method.RequestMappingInfo, org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch(org.springframework.web.reactive.result.method.RequestMappingInfo, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.result.method.RequestMappingInfo",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch.getInfo()",
            "public org.springframework.web.reactive.result.method.RequestMappingInfo getInfo()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch.hasMethodsMatch()",
            "public boolean hasMethodsMatch()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch.hasConsumesMatch()",
            "public boolean hasConsumesMatch()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch.hasProducesMatch()",
            "public boolean hasProducesMatch()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch.hasParamsMatch()",
            "public boolean hasParamsMatch()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$PartialMatchHelper$PartialMatch.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.HandlerResult",
            "org.springframework.web.reactive.HandlerResult(java.lang.Object, java.lang.Object, org.springframework.core.MethodParameter)",
            "public org.springframework.web.reactive.HandlerResult(java.lang.Object, java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.reactive.HandlerResult",
            "org.springframework.web.reactive.HandlerResult(java.lang.Object, java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext)",
            "public org.springframework.web.reactive.HandlerResult(java.lang.Object, java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.reactive.BindingContext)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.HandlerResult.getHandler()",
            "public java.lang.Object getHandler()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.HandlerResult.getReturnValue()",
            "public java.lang.Object getReturnValue()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.web.reactive.HandlerResult.getReturnType()",
            "public org.springframework.core.ResolvableType getReturnType()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.reactive.HandlerResult.getReturnTypeSource()",
            "public org.springframework.core.MethodParameter getReturnTypeSource()"
        ],
        [
            "org.springframework.web.reactive.BindingContext",
            "org.springframework.web.reactive.HandlerResult.getBindingContext()",
            "public org.springframework.web.reactive.BindingContext getBindingContext()"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.web.reactive.HandlerResult.getModel()",
            "public org.springframework.ui.Model getModel()"
        ],
        [
            "org.springframework.web.reactive.HandlerResult",
            "org.springframework.web.reactive.HandlerResult.setExceptionHandler(java.util.function.Function<java.lang.Throwable, reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult>>)",
            "public org.springframework.web.reactive.HandlerResult setExceptionHandler(java.util.function.Function<java.lang.Throwable, reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult>>)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.HandlerResult.hasExceptionHandler()",
            "public boolean hasExceptionHandler()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult>",
            "org.springframework.web.reactive.HandlerResult.applyExceptionHandler(java.lang.Throwable)",
            "public reactor.core.publisher.Mono<org.springframework.web.reactive.HandlerResult> applyExceptionHandler(java.lang.Throwable)"
        ],
        [
            "org.springframework.web.reactive.BindingContext",
            "org.springframework.web.reactive.BindingContext()",
            "public org.springframework.web.reactive.BindingContext()"
        ],
        [
            "org.springframework.web.reactive.BindingContext",
            "org.springframework.web.reactive.BindingContext(org.springframework.web.bind.support.WebBindingInitializer)",
            "public org.springframework.web.reactive.BindingContext(org.springframework.web.bind.support.WebBindingInitializer)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.web.reactive.BindingContext.getModel()",
            "public org.springframework.ui.Model getModel()"
        ],
        [
            "org.springframework.web.bind.support.WebExchangeDataBinder",
            "org.springframework.web.reactive.BindingContext.createDataBinder(org.springframework.web.server.ServerWebExchange, java.lang.Object, java.lang.String)",
            "public org.springframework.web.bind.support.WebExchangeDataBinder createDataBinder(org.springframework.web.server.ServerWebExchange, java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.web.bind.support.WebExchangeDataBinder",
            "org.springframework.web.reactive.BindingContext.createDataBinder(org.springframework.web.server.ServerWebExchange, java.lang.String)",
            "public org.springframework.web.bind.support.WebExchangeDataBinder createDataBinder(org.springframework.web.server.ServerWebExchange, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.BindingContext$ExtendedWebExchangeDataBinder",
            "org.springframework.web.reactive.BindingContext$ExtendedWebExchangeDataBinder(java.lang.Object, java.lang.String)",
            "public org.springframework.web.reactive.BindingContext$ExtendedWebExchangeDataBinder(java.lang.Object, java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.web.reactive.BindingContext$ExtendedWebExchangeDataBinder.getValuesToBind(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.util.Map<java.lang.String, java.lang.Object>> getValuesToBind(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.resource.ContentVersionStrategy",
            "org.springframework.web.reactive.resource.ContentVersionStrategy()",
            "public org.springframework.web.reactive.resource.ContentVersionStrategy()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.String>",
            "org.springframework.web.reactive.resource.ContentVersionStrategy.getResourceVersion(org.springframework.core.io.Resource)",
            "public reactor.core.publisher.Mono<java.lang.String> getResourceVersion(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer",
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer()",
            "public org.springframework.web.reactive.resource.AppCacheManifestTransformer()"
        ],
        [
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer",
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer(java.lang.String)",
            "public org.springframework.web.reactive.resource.AppCacheManifestTransformer(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer.transform(org.springframework.web.server.ServerWebExchange, org.springframework.core.io.Resource, org.springframework.web.reactive.resource.ResourceTransformerChain)",
            "public reactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange, org.springframework.core.io.Resource, org.springframework.web.reactive.resource.ResourceTransformerChain)"
        ],
        [
            "org.springframework.web.reactive.resource.DefaultResourceTransformerChain",
            "org.springframework.web.reactive.resource.DefaultResourceTransformerChain(org.springframework.web.reactive.resource.ResourceResolverChain, java.util.List<org.springframework.web.reactive.resource.ResourceTransformer>)",
            "public org.springframework.web.reactive.resource.DefaultResourceTransformerChain(org.springframework.web.reactive.resource.ResourceResolverChain, java.util.List<org.springframework.web.reactive.resource.ResourceTransformer>)"
        ],
        [
            "org.springframework.web.reactive.resource.DefaultResourceTransformerChain",
            "org.springframework.web.reactive.resource.DefaultResourceTransformerChain(org.springframework.web.reactive.resource.ResourceResolverChain, org.springframework.web.reactive.resource.ResourceTransformer, org.springframework.web.reactive.resource.ResourceTransformerChain)",
            "public org.springframework.web.reactive.resource.DefaultResourceTransformerChain(org.springframework.web.reactive.resource.ResourceResolverChain, org.springframework.web.reactive.resource.ResourceTransformer, org.springframework.web.reactive.resource.ResourceTransformerChain)"
        ],
        [
            "org.springframework.web.reactive.resource.ResourceResolverChain",
            "org.springframework.web.reactive.resource.DefaultResourceTransformerChain.getResolverChain()",
            "public org.springframework.web.reactive.resource.ResourceResolverChain getResolverChain()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.resource.DefaultResourceTransformerChain.transform(org.springframework.web.server.ServerWebExchange, org.springframework.core.io.Resource)",
            "public reactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange, org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.web.reactive.resource.AbstractFileNameVersionStrategy",
            "org.springframework.web.reactive.resource.AbstractFileNameVersionStrategy()",
            "public org.springframework.web.reactive.resource.AbstractFileNameVersionStrategy()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.AbstractFileNameVersionStrategy.extractVersion(java.lang.String)",
            "public java.lang.String extractVersion(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.AbstractFileNameVersionStrategy.removeVersion(java.lang.String, java.lang.String)",
            "public java.lang.String removeVersion(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.AbstractFileNameVersionStrategy.addVersion(java.lang.String, java.lang.String)",
            "public java.lang.String addVersion(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.resource.CachingResourceResolver",
            "org.springframework.web.reactive.resource.CachingResourceResolver(org.springframework.cache.Cache)",
            "public org.springframework.web.reactive.resource.CachingResourceResolver(org.springframework.cache.Cache)"
        ],
        [
            "org.springframework.web.reactive.resource.CachingResourceResolver",
            "org.springframework.web.reactive.resource.CachingResourceResolver(org.springframework.cache.CacheManager, java.lang.String)",
            "public org.springframework.web.reactive.resource.CachingResourceResolver(org.springframework.cache.CacheManager, java.lang.String)"
        ],
        [
            "org.springframework.cache.Cache",
            "org.springframework.web.reactive.resource.CachingResourceResolver.getCache()",
            "public org.springframework.cache.Cache getCache()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.CachingResourceResolver.setContentCodings(java.util.List<java.lang.String>)",
            "public void setContentCodings(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.resource.CachingResourceResolver.getContentCodings()",
            "public java.util.List<java.lang.String> getContentCodings()"
        ],
        [
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer()",
            "public org.springframework.web.reactive.resource.CssLinkResourceTransformer()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer.transform(org.springframework.web.server.ServerWebExchange, org.springframework.core.io.Resource, org.springframework.web.reactive.resource.ResourceTransformerChain)",
            "public reactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange, org.springframework.core.io.Resource, org.springframework.web.reactive.resource.ResourceTransformerChain)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer$LineInfo.getLine()",
            "public java.lang.String getLine()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer$LineInfo.isCacheSection()",
            "public boolean isCacheSection()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer$LineInfo.isLink()",
            "public boolean isLink()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$AbstractLinkParser.parse(java.lang.String, java.util.SortedSet<org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo>)",
            "public void parse(java.lang.String, java.util.SortedSet<org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo>)"
        ],
        [
            "org.springframework.web.reactive.resource.TransformedResource",
            "org.springframework.web.reactive.resource.TransformedResource(org.springframework.core.io.Resource, byte[])",
            "public org.springframework.web.reactive.resource.TransformedResource(org.springframework.core.io.Resource, byte[])"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.TransformedResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "long",
            "org.springframework.web.reactive.resource.TransformedResource.lastModified()",
            "public long lastModified()"
        ],
        [
            "org.springframework.web.reactive.resource.ResourceTransformerSupport",
            "org.springframework.web.reactive.resource.ResourceTransformerSupport()",
            "public org.springframework.web.reactive.resource.ResourceTransformerSupport()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceTransformerSupport.setResourceUrlProvider(org.springframework.web.reactive.resource.ResourceUrlProvider)",
            "public void setResourceUrlProvider(org.springframework.web.reactive.resource.ResourceUrlProvider)"
        ],
        [
            "org.springframework.web.reactive.resource.ResourceUrlProvider",
            "org.springframework.web.reactive.resource.ResourceTransformerSupport.getResourceUrlProvider()",
            "public org.springframework.web.reactive.resource.ResourceUrlProvider getResourceUrlProvider()"
        ],
        [
            "org.springframework.web.reactive.resource.CachingResourceTransformer",
            "org.springframework.web.reactive.resource.CachingResourceTransformer(org.springframework.cache.Cache)",
            "public org.springframework.web.reactive.resource.CachingResourceTransformer(org.springframework.cache.Cache)"
        ],
        [
            "org.springframework.web.reactive.resource.CachingResourceTransformer",
            "org.springframework.web.reactive.resource.CachingResourceTransformer(org.springframework.cache.CacheManager, java.lang.String)",
            "public org.springframework.web.reactive.resource.CachingResourceTransformer(org.springframework.cache.CacheManager, java.lang.String)"
        ],
        [
            "org.springframework.cache.Cache",
            "org.springframework.web.reactive.resource.CachingResourceTransformer.getCache()",
            "public org.springframework.cache.Cache getCache()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.resource.CachingResourceTransformer.transform(org.springframework.web.server.ServerWebExchange, org.springframework.core.io.Resource, org.springframework.web.reactive.resource.ResourceTransformerChain)",
            "public reactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange, org.springframework.core.io.Resource, org.springframework.web.reactive.resource.ResourceTransformerChain)"
        ],
        [
            "org.springframework.web.reactive.resource.ResourceUrlProvider",
            "org.springframework.web.reactive.resource.ResourceUrlProvider()",
            "public org.springframework.web.reactive.resource.ResourceUrlProvider()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceUrlProvider.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException"
        ],
        [
            "java.util.Map<org.springframework.web.util.pattern.PathPattern, org.springframework.web.reactive.resource.ResourceWebHandler>",
            "org.springframework.web.reactive.resource.ResourceUrlProvider.getHandlerMap()",
            "public java.util.Map<org.springframework.web.util.pattern.PathPattern, org.springframework.web.reactive.resource.ResourceWebHandler> getHandlerMap()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceUrlProvider.registerHandlers(java.util.Map<java.lang.String, org.springframework.web.reactive.resource.ResourceWebHandler>)",
            "public void registerHandlers(java.util.Map<java.lang.String, org.springframework.web.reactive.resource.ResourceWebHandler>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceUrlProvider.onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent)",
            "public void onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.String>",
            "org.springframework.web.reactive.resource.ResourceUrlProvider.getForUriString(java.lang.String, org.springframework.web.server.ServerWebExchange)",
            "public final reactor.core.publisher.Mono<java.lang.String> getForUriString(java.lang.String, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceUrlProvider.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "int",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo.getStart()",
            "public int getStart()"
        ],
        [
            "int",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo.getEnd()",
            "public int getEnd()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo.isLink()",
            "public boolean isLink()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo.getContent(java.lang.String)",
            "public java.lang.String getContent(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo.compareTo(org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo)",
            "public int compareTo(org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo.hashCode()",
            "public int hashCode()"
        ],
        [
            "int",
            "org.springframework.web.reactive.resource.CssLinkResourceTransformer$ContentChunkInfo.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.net.URL",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "java.io.File",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.resource.EncodedResourceResolver$EncodedResource.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "org.springframework.web.reactive.resource.PathResourceResolver",
            "org.springframework.web.reactive.resource.PathResourceResolver()",
            "public org.springframework.web.reactive.resource.PathResourceResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.PathResourceResolver.setAllowedLocations(org.springframework.core.io.Resource...)",
            "public void setAllowedLocations(org.springframework.core.io.Resource...)"
        ],
        [
            "org.springframework.core.io.Resource[]",
            "org.springframework.web.reactive.resource.PathResourceResolver.getAllowedLocations()",
            "public org.springframework.core.io.Resource[] getAllowedLocations()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.AbstractPrefixVersionStrategy.extractVersion(java.lang.String)",
            "public java.lang.String extractVersion(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.AbstractPrefixVersionStrategy.removeVersion(java.lang.String, java.lang.String)",
            "public java.lang.String removeVersion(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.AbstractPrefixVersionStrategy.addVersion(java.lang.String, java.lang.String)",
            "public java.lang.String addVersion(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.resource.DefaultResourceResolverChain",
            "org.springframework.web.reactive.resource.DefaultResourceResolverChain(java.util.List<? extends org.springframework.web.reactive.resource.ResourceResolver>)",
            "public org.springframework.web.reactive.resource.DefaultResourceResolverChain(java.util.List<? extends org.springframework.web.reactive.resource.ResourceResolver>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.resource.DefaultResourceResolverChain.resolveResource(org.springframework.web.server.ServerWebExchange, java.lang.String, java.util.List<? extends org.springframework.core.io.Resource>)",
            "public reactor.core.publisher.Mono<org.springframework.core.io.Resource> resolveResource(org.springframework.web.server.ServerWebExchange, java.lang.String, java.util.List<? extends org.springframework.core.io.Resource>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.String>",
            "org.springframework.web.reactive.resource.DefaultResourceResolverChain.resolveUrlPath(java.lang.String, java.util.List<? extends org.springframework.core.io.Resource>)",
            "public reactor.core.publisher.Mono<java.lang.String> resolveUrlPath(java.lang.String, java.util.List<? extends org.springframework.core.io.Resource>)"
        ],
        [
            "org.springframework.web.reactive.resource.VersionResourceResolver",
            "org.springframework.web.reactive.resource.VersionResourceResolver()",
            "public org.springframework.web.reactive.resource.VersionResourceResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.VersionResourceResolver.setStrategyMap(java.util.Map<java.lang.String, org.springframework.web.reactive.resource.VersionStrategy>)",
            "public void setStrategyMap(java.util.Map<java.lang.String, org.springframework.web.reactive.resource.VersionStrategy>)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.web.reactive.resource.VersionStrategy>",
            "org.springframework.web.reactive.resource.VersionResourceResolver.getStrategyMap()",
            "public java.util.Map<java.lang.String, org.springframework.web.reactive.resource.VersionStrategy> getStrategyMap()"
        ],
        [
            "org.springframework.web.reactive.resource.VersionResourceResolver",
            "org.springframework.web.reactive.resource.VersionResourceResolver.addContentVersionStrategy(java.lang.String...)",
            "public org.springframework.web.reactive.resource.VersionResourceResolver addContentVersionStrategy(java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.resource.VersionResourceResolver",
            "org.springframework.web.reactive.resource.VersionResourceResolver.addFixedVersionStrategy(java.lang.String, java.lang.String...)",
            "public org.springframework.web.reactive.resource.VersionResourceResolver addFixedVersionStrategy(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.resource.VersionResourceResolver",
            "org.springframework.web.reactive.resource.VersionResourceResolver.addVersionStrategy(org.springframework.web.reactive.resource.VersionStrategy, java.lang.String...)",
            "public org.springframework.web.reactive.resource.VersionResourceResolver addVersionStrategy(org.springframework.web.reactive.resource.VersionStrategy, java.lang.String...)"
        ],
        [
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource(org.springframework.web.reactive.resource.VersionResourceResolver, org.springframework.core.io.Resource, java.lang.String)",
            "public org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource(org.springframework.web.reactive.resource.VersionResourceResolver, org.springframework.core.io.Resource, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.net.URL",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "java.io.File",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "long",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.resource.VersionResourceResolver$FileNameVersionedResource.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "org.springframework.web.reactive.resource.EncodedResourceResolver",
            "org.springframework.web.reactive.resource.EncodedResourceResolver()",
            "public org.springframework.web.reactive.resource.EncodedResourceResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.EncodedResourceResolver.setContentCodings(java.util.List<java.lang.String>)",
            "public void setContentCodings(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.resource.EncodedResourceResolver.getContentCodings()",
            "public java.util.List<java.lang.String> getContentCodings()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.EncodedResourceResolver.setExtensions(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setExtensions(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.reactive.resource.EncodedResourceResolver.getExtensions()",
            "public java.util.Map<java.lang.String, java.lang.String> getExtensions()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.EncodedResourceResolver.registerExtension(java.lang.String, java.lang.String)",
            "public void registerExtension(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.resource.GzipResourceResolver",
            "org.springframework.web.reactive.resource.GzipResourceResolver()",
            "public org.springframework.web.reactive.resource.GzipResourceResolver()"
        ],
        [
            "org.springframework.web.reactive.resource.WebJarsResourceResolver",
            "org.springframework.web.reactive.resource.WebJarsResourceResolver()",
            "public org.springframework.web.reactive.resource.WebJarsResourceResolver()"
        ],
        [
            "org.springframework.web.reactive.resource.WebJarsResourceResolver",
            "org.springframework.web.reactive.resource.WebJarsResourceResolver(org.webjars.WebJarAssetLocator)",
            "public org.springframework.web.reactive.resource.WebJarsResourceResolver(org.webjars.WebJarAssetLocator)"
        ],
        [
            "org.springframework.web.reactive.resource.ResourceWebHandler",
            "org.springframework.web.reactive.resource.ResourceWebHandler()",
            "public org.springframework.web.reactive.resource.ResourceWebHandler()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setResourceLoader(org.springframework.core.io.ResourceLoader)",
            "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setLocationValues(java.util.List<java.lang.String>)",
            "public void setLocationValues(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.reactive.resource.ResourceWebHandler.getLocationValues()",
            "public java.util.List<java.lang.String> getLocationValues()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setLocations(java.util.List<org.springframework.core.io.Resource>)",
            "public void setLocations(java.util.List<org.springframework.core.io.Resource>)"
        ],
        [
            "java.util.List<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.resource.ResourceWebHandler.getLocations()",
            "public java.util.List<org.springframework.core.io.Resource> getLocations()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setResourceResolvers(java.util.List<org.springframework.web.reactive.resource.ResourceResolver>)",
            "public void setResourceResolvers(java.util.List<org.springframework.web.reactive.resource.ResourceResolver>)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.resource.ResourceResolver>",
            "org.springframework.web.reactive.resource.ResourceWebHandler.getResourceResolvers()",
            "public java.util.List<org.springframework.web.reactive.resource.ResourceResolver> getResourceResolvers()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setResourceTransformers(java.util.List<org.springframework.web.reactive.resource.ResourceTransformer>)",
            "public void setResourceTransformers(java.util.List<org.springframework.web.reactive.resource.ResourceTransformer>)"
        ],
        [
            "java.util.List<org.springframework.web.reactive.resource.ResourceTransformer>",
            "org.springframework.web.reactive.resource.ResourceWebHandler.getResourceTransformers()",
            "public java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> getResourceTransformers()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setResourceHttpMessageWriter(org.springframework.http.codec.ResourceHttpMessageWriter)",
            "public void setResourceHttpMessageWriter(org.springframework.http.codec.ResourceHttpMessageWriter)"
        ],
        [
            "org.springframework.http.codec.ResourceHttpMessageWriter",
            "org.springframework.web.reactive.resource.ResourceWebHandler.getResourceHttpMessageWriter()",
            "public org.springframework.http.codec.ResourceHttpMessageWriter getResourceHttpMessageWriter()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setCacheControl(org.springframework.http.CacheControl)",
            "public void setCacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.web.reactive.resource.ResourceWebHandler.getCacheControl()",
            "public org.springframework.http.CacheControl getCacheControl()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setUseLastModified(boolean)",
            "public void setUseLastModified(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.ResourceWebHandler.isUseLastModified()",
            "public boolean isUseLastModified()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setOptimizeLocations(boolean)",
            "public void setOptimizeLocations(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.ResourceWebHandler.isOptimizeLocations()",
            "public boolean isOptimizeLocations()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.setMediaTypes(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public void setMediaTypes(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.http.MediaType>",
            "org.springframework.web.reactive.resource.ResourceWebHandler.getMediaTypes()",
            "public java.util.Map<java.lang.String, org.springframework.http.MediaType> getMediaTypes()"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.ResourceWebHandler.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.reactive.resource.ResourceWebHandler.handle(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.ResourceWebHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.reactive.resource.AbstractResourceResolver",
            "org.springframework.web.reactive.resource.AbstractResourceResolver()",
            "public org.springframework.web.reactive.resource.AbstractResourceResolver()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.resource.AbstractResourceResolver.resolveResource(org.springframework.web.server.ServerWebExchange, java.lang.String, java.util.List<? extends org.springframework.core.io.Resource>, org.springframework.web.reactive.resource.ResourceResolverChain)",
            "public reactor.core.publisher.Mono<org.springframework.core.io.Resource> resolveResource(org.springframework.web.server.ServerWebExchange, java.lang.String, java.util.List<? extends org.springframework.core.io.Resource>, org.springframework.web.reactive.resource.ResourceResolverChain)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.String>",
            "org.springframework.web.reactive.resource.AbstractResourceResolver.resolveUrlPath(java.lang.String, java.util.List<? extends org.springframework.core.io.Resource>, org.springframework.web.reactive.resource.ResourceResolverChain)",
            "public reactor.core.publisher.Mono<java.lang.String> resolveUrlPath(java.lang.String, java.util.List<? extends org.springframework.core.io.Resource>, org.springframework.web.reactive.resource.ResourceResolverChain)"
        ],
        [
            "org.springframework.web.reactive.resource.FixedVersionStrategy",
            "org.springframework.web.reactive.resource.FixedVersionStrategy(java.lang.String)",
            "public org.springframework.web.reactive.resource.FixedVersionStrategy(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.String>",
            "org.springframework.web.reactive.resource.FixedVersionStrategy.getResourceVersion(org.springframework.core.io.Resource)",
            "public reactor.core.publisher.Mono<java.lang.String> getResourceVersion(org.springframework.core.io.Resource)"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer$LineInfoGenerator.accept(reactor.core.publisher.SynchronousSink<org.springframework.web.reactive.resource.AppCacheManifestTransformer$LineInfo>)",
            "public void accept(reactor.core.publisher.SynchronousSink<org.springframework.web.reactive.resource.AppCacheManifestTransformer$LineInfo>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.resource.AppCacheManifestTransformer$LineInfoGenerator.accept(java.lang.Object)",
            "public void accept(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource(org.springframework.core.io.Resource)",
            "public org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource(org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.net.URL",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.net.URI",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "java.io.File",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.reactive.resource.GzipResourceResolver$GzippedResource.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "org.springframework.web.reactive.accept.HeaderContentTypeResolver",
            "org.springframework.web.reactive.accept.HeaderContentTypeResolver()",
            "public org.springframework.web.reactive.accept.HeaderContentTypeResolver()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.accept.HeaderContentTypeResolver.resolveMediaTypes(org.springframework.web.server.ServerWebExchange)",
            "public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.server.ServerWebExchange) throws org.springframework.web.server.NotAcceptableStatusException"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer()",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer()"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer.mediaType(java.lang.String, org.springframework.http.MediaType)",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer mediaType(java.lang.String, org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer.mediaType(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer mediaType(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer.parameterName(java.lang.String)",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer parameterName(java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder()",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder()"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder.parameterResolver()",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$ParameterResolverConfigurer parameterResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder.headerResolver()",
            "public void headerResolver()"
        ],
        [
            "void",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder.fixedResolver(org.springframework.http.MediaType...)",
            "public void fixedResolver(org.springframework.http.MediaType...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder.resolver(org.springframework.web.reactive.accept.RequestedContentTypeResolver)",
            "public void resolver(org.springframework.web.reactive.accept.RequestedContentTypeResolver)"
        ],
        [
            "org.springframework.web.reactive.accept.RequestedContentTypeResolver",
            "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder.build()",
            "public org.springframework.web.reactive.accept.RequestedContentTypeResolver build()"
        ],
        [
            "org.springframework.web.reactive.accept.FixedContentTypeResolver",
            "org.springframework.web.reactive.accept.FixedContentTypeResolver(org.springframework.http.MediaType)",
            "public org.springframework.web.reactive.accept.FixedContentTypeResolver(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.web.reactive.accept.FixedContentTypeResolver",
            "org.springframework.web.reactive.accept.FixedContentTypeResolver(java.util.List<org.springframework.http.MediaType>)",
            "public org.springframework.web.reactive.accept.FixedContentTypeResolver(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.accept.FixedContentTypeResolver.getContentTypes()",
            "public java.util.List<org.springframework.http.MediaType> getContentTypes()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.accept.FixedContentTypeResolver.resolveMediaTypes(org.springframework.web.server.ServerWebExchange)",
            "public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.reactive.accept.ParameterContentTypeResolver",
            "org.springframework.web.reactive.accept.ParameterContentTypeResolver(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public org.springframework.web.reactive.accept.ParameterContentTypeResolver(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.accept.ParameterContentTypeResolver.setParameterName(java.lang.String)",
            "public void setParameterName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.accept.ParameterContentTypeResolver.getParameterName()",
            "public java.lang.String getParameterName()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.reactive.accept.ParameterContentTypeResolver.resolveMediaTypes(org.springframework.web.server.ServerWebExchange)",
            "public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.server.ServerWebExchange) throws org.springframework.web.server.NotAcceptableStatusException"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitBody$2.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchange$2.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToFlux$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToFlux$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToFlux$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToFlux$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToFlux$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToFlux$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitBodilessEntity$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitEntityList$$inlined$toEntityList$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitEntityList$$inlined$toEntityList$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitEntityList$$inlined$toEntityList$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntity$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntity$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntity$1()"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.bodyToMono(org.springframework.web.reactive.function.client.ClientResponse)",
            "public static final <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.bodyToFlux(org.springframework.web.reactive.function.client.ClientResponse)",
            "public static final <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "<T> kotlinx.coroutines.flow.Flow<T>",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.bodyToFlow(org.springframework.web.reactive.function.client.ClientResponse)",
            "public static final <T> kotlinx.coroutines.flow.Flow<T> bodyToFlow(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "<T> kotlinx.coroutines.flow.Flow<T>",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.bodyToFlow(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>)",
            "public static final <T> kotlinx.coroutines.flow.Flow<T> bodyToFlow(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.toEntity(org.springframework.web.reactive.function.client.ClientResponse)",
            "public static final <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> toEntity(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.toEntityList(org.springframework.web.reactive.function.client.ClientResponse)",
            "public static final <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> toEntityList(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitBody(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBody(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitBody(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBody(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitBodyOrNull(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBodyOrNull(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitBodyOrNull(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBodyOrNull(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitEntity(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<T>>)",
            "public static final <T> java.lang.Object awaitEntity(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<T>>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitEntity(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<T>>)",
            "public static final <T> java.lang.Object awaitEntity(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<T>>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitEntityList(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<java.util.List<T>>>)",
            "public static final <T> java.lang.Object awaitEntityList(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<java.util.List<T>>>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitEntityList(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<java.util.List<T>>>)",
            "public static final <T> java.lang.Object awaitEntityList(org.springframework.web.reactive.function.client.ClientResponse, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<java.util.List<T>>>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.awaitBodilessEntity(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<java.lang.Void>>)",
            "public static final java.lang.Object awaitBodilessEntity(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<java.lang.Void>>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt.createExceptionAndAwait(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.client.WebClientResponseException>)",
            "public static final java.lang.Object createExceptionAndAwait(org.springframework.web.reactive.function.client.ClientResponse, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.client.WebClientResponseException>)"
        ],
        [
            "<T, S extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.body(org.springframework.web.reactive.function.client.WebClient$RequestBodySpec, S)",
            "public static final <T, S extends org.reactivestreams.Publisher<T>> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> body(org.springframework.web.reactive.function.client.WebClient$RequestBodySpec, S)"
        ],
        [
            "<T> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.body(org.springframework.web.reactive.function.client.WebClient$RequestBodySpec, kotlinx.coroutines.flow.Flow<? extends T>)",
            "public static final <T> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> body(org.springframework.web.reactive.function.client.WebClient$RequestBodySpec, kotlinx.coroutines.flow.Flow<? extends T>)"
        ],
        [
            "<T> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.body(org.springframework.web.reactive.function.client.WebClient$RequestBodySpec, java.lang.Object)",
            "public static final <T> org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?> body(org.springframework.web.reactive.function.client.WebClient$RequestBodySpec, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.awaitExchange(org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<? extends org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.client.ClientResponse>)",
            "public static final java.lang.Object awaitExchange(org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<? extends org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.client.ClientResponse>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.awaitExchange(org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<? extends org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.client.ClientResponse, ? super kotlin.coroutines.Continuation<? super T>, ? extends java.lang.Object>, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitExchange(org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<? extends org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.client.ClientResponse, ? super kotlin.coroutines.Continuation<? super T>, ? extends java.lang.Object>, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.awaitExchangeOrNull(org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<? extends org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.client.ClientResponse, ? super kotlin.coroutines.Continuation<? super T>, ? extends java.lang.Object>, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitExchangeOrNull(org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<? extends org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.client.ClientResponse, ? super kotlin.coroutines.Continuation<? super T>, ? extends java.lang.Object>, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> kotlinx.coroutines.flow.Flow<T>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.exchangeToFlow(org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<? extends org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.client.ClientResponse, ? extends kotlinx.coroutines.flow.Flow<? extends T>>)",
            "public static final <T> kotlinx.coroutines.flow.Flow<T> exchangeToFlow(org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<? extends org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec<?>>, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.client.ClientResponse, ? extends kotlinx.coroutines.flow.Flow<? extends T>>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.bodyToMono(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)",
            "public static final <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.bodyToFlux(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)",
            "public static final <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)"
        ],
        [
            "<T> kotlinx.coroutines.flow.Flow<T>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.bodyToFlow(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)",
            "public static final <T> kotlinx.coroutines.flow.Flow<T> bodyToFlow(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.awaitBody(org.springframework.web.reactive.function.client.WebClient$ResponseSpec, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBody(org.springframework.web.reactive.function.client.WebClient$ResponseSpec, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.awaitBodyOrNull(org.springframework.web.reactive.function.client.WebClient$ResponseSpec, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBodyOrNull(org.springframework.web.reactive.function.client.WebClient$ResponseSpec, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.awaitBodilessEntity(org.springframework.web.reactive.function.client.WebClient$ResponseSpec, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<java.lang.Void>>)",
            "public static final java.lang.Object awaitBodilessEntity(org.springframework.web.reactive.function.client.WebClient$ResponseSpec, kotlin.coroutines.Continuation<? super org.springframework.http.ResponseEntity<java.lang.Void>>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.toEntity(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)",
            "public static final <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<T>> toEntity(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.toEntityList(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)",
            "public static final <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.util.List<T>>> toEntityList(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<reactor.core.publisher.Flux<T>>>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt.toEntityFlux(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)",
            "public static final <T> reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<reactor.core.publisher.Flux<T>>> toEntityFlux(org.springframework.web.reactive.function.client.WebClient$ResponseSpec)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitBody$$inlined$bodyToMono$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitBody$$inlined$bodyToMono$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitBody$$inlined$bodyToMono$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitEntity$$inlined$toEntity$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitEntity$$inlined$toEntity$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitEntity$$inlined$toEntity$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchange$3.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchange$3.apply(org.springframework.web.reactive.function.client.ClientResponse)",
            "public final reactor.core.publisher.Mono<T> apply(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchangeOrNull$2$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchangeOrNull$2$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchangeOrNull$2$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchange$3$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchange$3$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchange$3$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToMono$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToMono$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$bodyToMono$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$createExceptionAndAwait$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToMono$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToMono$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$bodyToMono$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$exchangeToFlow$1.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$exchangeToFlow$1.apply(org.springframework.web.reactive.function.client.ClientResponse)",
            "public final reactor.core.publisher.Flux<T> apply(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchangeOrNull$2.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchangeOrNull$2.apply(org.springframework.web.reactive.function.client.ClientResponse)",
            "public final reactor.core.publisher.Mono<T> apply(org.springframework.web.reactive.function.client.ClientResponse)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$awaitExchange$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntityFlux$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntityFlux$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntityFlux$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitEntity$2.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$toEntityList$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$toEntityList$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$toEntityList$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntityList$1",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntityList$1()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$toEntityList$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$3",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$3()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$3()"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$toEntity$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$toEntity$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$toEntity$1()"
        ],
        [
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$2",
            "org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$2()",
            "public org.springframework.web.reactive.function.client.WebClientExtensionsKt$body$2()"
        ],
        [
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitBody$$inlined$bodyToMono$1",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitBody$$inlined$bodyToMono$1()",
            "public org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitBody$$inlined$bodyToMono$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.client.ClientResponseExtensionsKt$awaitEntityList$2.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$1$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$1$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$1$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$OPTIONS$3.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitBody$$inlined$bodyToMono$1",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitBody$$inlined$bodyToMono$1()",
            "public org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitBody$$inlined$bodyToMono$1()"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.body(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, org.reactivestreams.Publisher<T>)",
            "public static final <T> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> body(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, org.reactivestreams.Publisher<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.body(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, java.lang.Object)",
            "public static final <T> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> body(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.bodyValueAndAwait(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, java.lang.Object, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)",
            "public static final java.lang.Object bodyValueAndAwait(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, java.lang.Object, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.bodyAndAwait(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, kotlinx.coroutines.flow.Flow<? extends T>, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)",
            "public static final <T> java.lang.Object bodyAndAwait(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, kotlinx.coroutines.flow.Flow<? extends T>, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.bodyToServerSentEvents(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, org.reactivestreams.Publisher<T>)",
            "public static final <T> reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> bodyToServerSentEvents(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, org.reactivestreams.Publisher<T>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.json(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder)",
            "public static final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder json(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.xml(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder)",
            "public static final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder xml(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.html(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder)",
            "public static final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder html(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.sse(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder)",
            "public static final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder sse(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.renderAndAwait(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, java.lang.String, java.lang.String[], kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)",
            "public static final java.lang.Object renderAndAwait(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, java.lang.String, java.lang.String[], kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.renderAndAwait(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, java.lang.String, java.util.Map<java.lang.String, ?>, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)",
            "public static final java.lang.Object renderAndAwait(org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder, java.lang.String, java.util.Map<java.lang.String, ?>, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt.buildAndAwait(org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<? extends org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?>>, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)",
            "public static final java.lang.Object buildAndAwait(org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<? extends org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?>>, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$DELETE$3.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$nest$1.get()",
            "public java.lang.Object get()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$nest$1.get()",
            "public final org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> get()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$OPTIONS$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$contentType$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$pathExtension$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RouterFunctionDslKt$sam$java_util_function_Predicate$0.test(java.lang.Object)",
            "public final boolean test(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$headers$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$filter$1$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$filter$1$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$filter$1$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$OPTIONS$4.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$bodyValueAndAwait$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$PUT$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$DELETE$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$bodyToServerSentEvents$1",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$bodyToServerSentEvents$1()",
            "public org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$bodyToServerSentEvents$1()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$PUT$3.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$path$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$HEAD$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$DELETE$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$1.apply(java.lang.Object, java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$1.apply(java.lang.Throwable, org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> apply(java.lang.Throwable, org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$renderAndAwait$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$resources$1$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$resources$1$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$resources$1$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.RenderingResponseExtensionsKt.buildAndAwait(org.springframework.web.reactive.function.server.RenderingResponse$Builder, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.RenderingResponse>)",
            "public static final java.lang.Object buildAndAwait(org.springframework.web.reactive.function.server.RenderingResponse$Builder, kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.RenderingResponse>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$PUT$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctionDslKt$sam$i$java_util_function_BiFunction$0",
            "org.springframework.web.reactive.function.server.RouterFunctionDslKt$sam$i$java_util_function_BiFunction$0(kotlin.jvm.functions.Function2)",
            "public org.springframework.web.reactive.function.server.RouterFunctionDslKt$sam$i$java_util_function_BiFunction$0(kotlin.jvm.functions.Function2)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.RouterFunctionDslKt$sam$i$java_util_function_BiFunction$0.apply(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object apply(java.lang.Object, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDslKt$sam$java_util_function_Predicate$0.test(java.lang.Object)",
            "public final boolean test(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToMono$1",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToMono$1()",
            "public org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToMono$1()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$HEAD$3.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$resources$1.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.Resource>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$resources$1.apply(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.core.io.Resource> apply(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.RouterFunctionDslKt$sam$java_util_function_Function$0.apply(java.lang.Object)",
            "public final java.lang.Object apply(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$POST$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDslKt.router(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.RouterFunctionDsl, kotlin.Unit>)",
            "public static final org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> router(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.RouterFunctionDsl, kotlin.Unit>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$GET$4.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3.apply(java.lang.Object, java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3.apply(java.lang.Throwable, org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> apply(java.lang.Throwable, org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3(kotlin.jvm.functions.Function3)",
            "public org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3(kotlin.jvm.functions.Function3)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$asHandlerFunction$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.builder$annotations()",
            "public static void builder$annotations()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.getBuilder()",
            "public final org.springframework.web.reactive.function.server.RouterFunctions$Builder getBuilder()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.and(org.springframework.web.reactive.function.server.RequestPredicate, java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.or(org.springframework.web.reactive.function.server.RequestPredicate, java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.and(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate and(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.or(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate or(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.and(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.or(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.not(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate not(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.nest(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.RouterFunctionDsl, kotlin.Unit>)",
            "public final void nest(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.RouterFunctionDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.nest(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.RouterFunctionDsl, kotlin.Unit>)",
            "public final void nest(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.RouterFunctionDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.GET(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void GET(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.GET(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void GET(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.GET(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void GET(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.GET(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void GET(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.GET(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate GET(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.HEAD(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void HEAD(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.HEAD(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void HEAD(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.HEAD(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void HEAD(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.HEAD(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void HEAD(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.HEAD(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate HEAD(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.POST(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void POST(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.POST(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void POST(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.POST(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void POST(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.POST(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void POST(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.POST(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate POST(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PUT(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void PUT(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PUT(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void PUT(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PUT(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void PUT(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PUT(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void PUT(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PUT(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate PUT(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PATCH(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void PATCH(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PATCH(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void PATCH(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PATCH(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void PATCH(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PATCH(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void PATCH(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.PATCH(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate PATCH(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.DELETE(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void DELETE(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.DELETE(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void DELETE(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.DELETE(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void DELETE(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.DELETE(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void DELETE(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.DELETE(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate DELETE(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.OPTIONS(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void OPTIONS(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.OPTIONS(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void OPTIONS(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.OPTIONS(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void OPTIONS(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.OPTIONS(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void OPTIONS(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.OPTIONS(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate OPTIONS(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.accept(org.springframework.http.MediaType, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void accept(org.springframework.http.MediaType, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.accept(org.springframework.http.MediaType...)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate accept(org.springframework.http.MediaType...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.contentType(org.springframework.http.MediaType, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void contentType(org.springframework.http.MediaType, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.contentType(org.springframework.http.MediaType...)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate contentType(org.springframework.http.MediaType...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.headers(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest$Headers, java.lang.Boolean>, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void headers(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest$Headers, java.lang.Boolean>, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.headers(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest$Headers, java.lang.Boolean>)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate headers(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest$Headers, java.lang.Boolean>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.method(org.springframework.http.HttpMethod, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void method(org.springframework.http.HttpMethod, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.method(org.springframework.http.HttpMethod)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate method(org.springframework.http.HttpMethod)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.path(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void path(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.path(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate path(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.pathExtension(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void pathExtension(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.pathExtension(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate pathExtension(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.pathExtension(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void pathExtension(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.pathExtension(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate pathExtension(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.queryParam(java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void queryParam(java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.queryParam(java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate queryParam(java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.invoke(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void invoke(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.invoke(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void invoke(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<? extends org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.resources(java.lang.String, org.springframework.core.io.Resource)",
            "public final void resources(java.lang.String, org.springframework.core.io.Resource)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.resources(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)",
            "public final void resources(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<org.springframework.core.io.Resource>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.add(org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public final void add(org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.filter(kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>, ? extends reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void filter(kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>, ? extends reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.before(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends org.springframework.web.reactive.function.server.ServerRequest>)",
            "public final void before(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends org.springframework.web.reactive.function.server.ServerRequest>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.after(kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super org.springframework.web.reactive.function.server.ServerResponse, ? extends org.springframework.web.reactive.function.server.ServerResponse>)",
            "public final void after(kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super org.springframework.web.reactive.function.server.ServerResponse, ? extends org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.onError(kotlin.jvm.functions.Function1<? super java.lang.Throwable, java.lang.Boolean>, kotlin.jvm.functions.Function2<? super java.lang.Throwable, ? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final void onError(kotlin.jvm.functions.Function1<? super java.lang.Throwable, java.lang.Boolean>, kotlin.jvm.functions.Function2<? super java.lang.Throwable, ? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "<E extends java.lang.Throwable> void",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.onError(kotlin.jvm.functions.Function2<? super java.lang.Throwable, ? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)",
            "public final <E extends java.lang.Throwable> void onError(kotlin.jvm.functions.Function2<? super java.lang.Throwable, ? super org.springframework.web.reactive.function.server.ServerRequest, ? extends reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.build$spring_webflux()",
            "public final org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> build$spring_webflux()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.from(org.springframework.web.reactive.function.server.ServerResponse)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder from(org.springframework.web.reactive.function.server.ServerResponse)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.status(org.springframework.http.HttpStatus)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder status(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.status(int)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder status(int)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.ok()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder ok()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.created(java.net.URI)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder created(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.accepted()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder accepted()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.noContent()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?> noContent()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.seeOther(java.net.URI)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder seeOther(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.temporaryRedirect(java.net.URI)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder temporaryRedirect(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.permanentRedirect(java.net.URI)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder permanentRedirect(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.badRequest()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder badRequest()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.notFound()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?> notFound()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl.unprocessableEntity()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder unprocessableEntity()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctionDsl",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.RouterFunctionDsl, kotlin.Unit>)",
            "public org.springframework.web.reactive.function.server.RouterFunctionDsl(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.RouterFunctionDsl, kotlin.Unit>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$POST$4.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$filter$1$1$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$filter$1$1$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$filter$1$1$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$pathExtension$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$renderAndAwait$2.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$filter$1$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$filter$1$1.invoke(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> invoke(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$filter$1.filter(org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> filter(org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.RenderingResponseExtensionsKt$buildAndAwait$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$HEAD$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$bodyAndAwait$2",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$bodyAndAwait$2()",
            "public org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$bodyAndAwait$2()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$OPTIONS$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$accept$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$invoke$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3$1",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3$1(org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3, java.lang.Throwable, org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation)",
            "public org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3$1(org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3, java.lang.Throwable, org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$3$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$POST$3.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$nest$2.get()",
            "public java.lang.Object get()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$nest$2.get()",
            "public final org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> get()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitMultipartData$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitBody$2.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$PATCH$4.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToFlux$1",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToFlux$1()",
            "public org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToFlux$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDslKt$sam$java_util_function_BiFunction$0.apply(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object apply(java.lang.Object, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$GET$3.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$DELETE$4.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$PATCH$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$PATCH$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$PATCH$3.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDslKt.coRouter(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.CoRouterFunctionDsl, kotlin.Unit>)",
            "public static final org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> coRouter(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.CoRouterFunctionDsl, kotlin.Unit>)"
        ],
        [
            "<T extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<T>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDslKt.plus(org.springframework.web.reactive.function.server.RouterFunction<T>, org.springframework.web.reactive.function.server.RouterFunction<T>)",
            "public static final <T extends org.springframework.web.reactive.function.server.ServerResponse> org.springframework.web.reactive.function.server.RouterFunction<T> plus(org.springframework.web.reactive.function.server.RouterFunction<T>, org.springframework.web.reactive.function.server.RouterFunction<T>)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$body$2",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$body$2()",
            "public org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$body$2()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDslKt$sam$java_util_function_Function$0.apply(java.lang.Object)",
            "public final java.lang.Object apply(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$queryParam$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$filter$1.filter(org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> filter(org.springframework.web.reactive.function.server.ServerRequest, org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.bodyToMono(org.springframework.web.reactive.function.server.ServerRequest)",
            "public static final <T> reactor.core.publisher.Mono<T> bodyToMono(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.bodyToFlux(org.springframework.web.reactive.function.server.ServerRequest)",
            "public static final <T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "<T> kotlinx.coroutines.flow.Flow<T>",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.bodyToFlow(org.springframework.web.reactive.function.server.ServerRequest)",
            "public static final <T> kotlinx.coroutines.flow.Flow<T> bodyToFlow(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "<T> kotlinx.coroutines.flow.Flow<T>",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.bodyToFlow(org.springframework.web.reactive.function.server.ServerRequest, kotlin.reflect.KClass<T>)",
            "public static final <T> kotlinx.coroutines.flow.Flow<T> bodyToFlow(org.springframework.web.reactive.function.server.ServerRequest, kotlin.reflect.KClass<T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.awaitBody(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBody(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.awaitBody(org.springframework.web.reactive.function.server.ServerRequest, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBody(org.springframework.web.reactive.function.server.ServerRequest, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.awaitBodyOrNull(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBodyOrNull(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.awaitBodyOrNull(org.springframework.web.reactive.function.server.ServerRequest, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object awaitBodyOrNull(org.springframework.web.reactive.function.server.ServerRequest, kotlin.reflect.KClass<T>, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.awaitFormData(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)",
            "public static final java.lang.Object awaitFormData(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.awaitMultipartData(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>)",
            "public static final java.lang.Object awaitMultipartData(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.awaitPrincipal(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super java.security.Principal>)",
            "public static final java.lang.Object awaitPrincipal(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super java.security.Principal>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.awaitSession(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super org.springframework.web.server.WebSession>)",
            "public static final java.lang.Object awaitSession(org.springframework.web.reactive.function.server.ServerRequest, kotlin.coroutines.Continuation<? super org.springframework.web.server.WebSession>)"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.remoteAddressOrNull(org.springframework.web.reactive.function.server.ServerRequest)",
            "public static final java.net.InetSocketAddress remoteAddressOrNull(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.attributeOrNull(org.springframework.web.reactive.function.server.ServerRequest, java.lang.String)",
            "public static final java.lang.Object attributeOrNull(org.springframework.web.reactive.function.server.ServerRequest, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.queryParamOrNull(org.springframework.web.reactive.function.server.ServerRequest, java.lang.String)",
            "public static final java.lang.String queryParamOrNull(org.springframework.web.reactive.function.server.ServerRequest, java.lang.String)"
        ],
        [
            "java.lang.Long",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.contentLengthOrNull(org.springframework.web.reactive.function.server.ServerRequest$Headers)",
            "public static final java.lang.Long contentLengthOrNull(org.springframework.web.reactive.function.server.ServerRequest$Headers)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt.contentTypeOrNull(org.springframework.web.reactive.function.server.ServerRequest$Headers)",
            "public static final org.springframework.http.MediaType contentTypeOrNull(org.springframework.web.reactive.function.server.ServerRequest$Headers)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$buildAndAwait$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$GET$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$method$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$asHandlerFunction$1$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$asHandlerFunction$1$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$asHandlerFunction$1$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$GET$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$PUT$4.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$POST$1.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$2.test(java.lang.Object)",
            "public boolean test(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$2.test(java.lang.Throwable)",
            "public final boolean test(java.lang.Throwable)"
        ],
        [
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$2",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$2()",
            "public org.springframework.web.reactive.function.server.CoRouterFunctionDsl$onError$2()"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.builder$annotations()",
            "public static void builder$annotations()"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctions$Builder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.getBuilder()",
            "public final org.springframework.web.reactive.function.server.RouterFunctions$Builder getBuilder()"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.and(org.springframework.web.reactive.function.server.RequestPredicate, java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.or(org.springframework.web.reactive.function.server.RequestPredicate, java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate, java.lang.String)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.and(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate and(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.or(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate or(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.and(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate and(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.or(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate or(org.springframework.web.reactive.function.server.RequestPredicate, org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.not(org.springframework.web.reactive.function.server.RequestPredicate)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate not(org.springframework.web.reactive.function.server.RequestPredicate)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.nest(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.CoRouterFunctionDsl, kotlin.Unit>)",
            "public final void nest(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.CoRouterFunctionDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.nest(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.CoRouterFunctionDsl, kotlin.Unit>)",
            "public final void nest(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.CoRouterFunctionDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.GET(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void GET(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.GET(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void GET(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.GET(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate GET(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.HEAD(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void HEAD(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.HEAD(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void HEAD(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.HEAD(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate HEAD(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.POST(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void POST(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.POST(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void POST(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.POST(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate POST(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.PUT(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void PUT(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.PUT(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void PUT(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.PUT(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate PUT(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.PATCH(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void PATCH(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.PATCH(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void PATCH(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.PATCH(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate PATCH(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.DELETE(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void DELETE(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.DELETE(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void DELETE(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.DELETE(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate DELETE(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.OPTIONS(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void OPTIONS(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.OPTIONS(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void OPTIONS(java.lang.String, org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.OPTIONS(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate OPTIONS(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.accept(org.springframework.http.MediaType, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void accept(org.springframework.http.MediaType, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.accept(org.springframework.http.MediaType...)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate accept(org.springframework.http.MediaType...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.contentType(org.springframework.http.MediaType, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void contentType(org.springframework.http.MediaType, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.contentType(org.springframework.http.MediaType...)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate contentType(org.springframework.http.MediaType...)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.headers(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest$Headers, java.lang.Boolean>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void headers(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest$Headers, java.lang.Boolean>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.headers(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest$Headers, java.lang.Boolean>)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate headers(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest$Headers, java.lang.Boolean>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.method(org.springframework.http.HttpMethod, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void method(org.springframework.http.HttpMethod, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.method(org.springframework.http.HttpMethod)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate method(org.springframework.http.HttpMethod)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.path(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void path(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.path(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate path(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.pathExtension(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void pathExtension(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.pathExtension(java.lang.String)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate pathExtension(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.pathExtension(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void pathExtension(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.pathExtension(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate pathExtension(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.queryParam(java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void queryParam(java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RequestPredicate",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.queryParam(java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>)",
            "public final org.springframework.web.reactive.function.server.RequestPredicate queryParam(java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.Boolean>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.invoke(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void invoke(org.springframework.web.reactive.function.server.RequestPredicate, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.invoke(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void invoke(java.lang.String, kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.resources(java.lang.String, org.springframework.core.io.Resource)",
            "public final void resources(java.lang.String, org.springframework.core.io.Resource)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.resources(kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.core.io.Resource>, ? extends java.lang.Object>)",
            "public final void resources(kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.core.io.Resource>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.add(org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>)",
            "public final void add(org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.filter(kotlin.jvm.functions.Function3<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void filter(kotlin.jvm.functions.Function3<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.before(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends org.springframework.web.reactive.function.server.ServerRequest>)",
            "public final void before(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.ServerRequest, ? extends org.springframework.web.reactive.function.server.ServerRequest>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.after(kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super org.springframework.web.reactive.function.server.ServerResponse, ? extends org.springframework.web.reactive.function.server.ServerResponse>)",
            "public final void after(kotlin.jvm.functions.Function2<? super org.springframework.web.reactive.function.server.ServerRequest, ? super org.springframework.web.reactive.function.server.ServerResponse, ? extends org.springframework.web.reactive.function.server.ServerResponse>)"
        ],
        [
            "void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.onError(kotlin.jvm.functions.Function1<? super java.lang.Throwable, java.lang.Boolean>, kotlin.jvm.functions.Function3<? super java.lang.Throwable, ? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final void onError(kotlin.jvm.functions.Function1<? super java.lang.Throwable, java.lang.Boolean>, kotlin.jvm.functions.Function3<? super java.lang.Throwable, ? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "<E extends java.lang.Throwable> void",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.onError(kotlin.jvm.functions.Function3<? super java.lang.Throwable, ? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)",
            "public final <E extends java.lang.Throwable> void onError(kotlin.jvm.functions.Function3<? super java.lang.Throwable, ? super org.springframework.web.reactive.function.server.ServerRequest, ? super kotlin.coroutines.Continuation<? super org.springframework.web.reactive.function.server.ServerResponse>, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.build$spring_webflux()",
            "public final org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> build$spring_webflux()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.from(org.springframework.web.reactive.function.server.ServerResponse)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder from(org.springframework.web.reactive.function.server.ServerResponse)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.created(java.net.URI)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder created(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.ok()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder ok()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.noContent()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?> noContent()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.accepted()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder accepted()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.permanentRedirect(java.net.URI)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder permanentRedirect(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.temporaryRedirect(java.net.URI)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder temporaryRedirect(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.seeOther(java.net.URI)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder seeOther(java.net.URI)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.badRequest()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder badRequest()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?>",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.notFound()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$HeadersBuilder<?> notFound()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.unprocessableEntity()",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder unprocessableEntity()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.status(org.springframework.http.HttpStatus)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder status(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl.status(int)",
            "public final org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder status(int)"
        ],
        [
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl",
            "org.springframework.web.reactive.function.server.CoRouterFunctionDsl(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.CoRouterFunctionDsl, kotlin.Unit>)",
            "public org.springframework.web.reactive.function.server.CoRouterFunctionDsl(kotlin.jvm.functions.Function1<? super org.springframework.web.reactive.function.server.CoRouterFunctionDsl, kotlin.Unit>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.RouterFunctionDslKt$sam$java_util_function_BiFunction$0.apply(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object apply(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitFormData$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1()",
            "public org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitBodyOrNull$$inlined$bodyToMono$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$awaitSession$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$HEAD$4.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$body$1",
            "org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$body$1()",
            "public org.springframework.web.reactive.function.server.ServerResponseExtensionsKt$body$1()"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$onError$1.test(java.lang.Object)",
            "public boolean test(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$onError$1.test(java.lang.Throwable)",
            "public final boolean test(java.lang.Throwable)"
        ],
        [
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$onError$1",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$onError$1()",
            "public org.springframework.web.reactive.function.server.RouterFunctionDsl$onError$1()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse>",
            "org.springframework.web.reactive.function.server.RouterFunctionDsl$invoke$2.handle(org.springframework.web.reactive.function.server.ServerRequest)",
            "public final reactor.core.publisher.Mono<org.springframework.web.reactive.function.server.ServerResponse> handle(org.springframework.web.reactive.function.server.ServerRequest)"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1",
            "org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1()",
            "public org.springframework.web.reactive.function.server.ServerRequestExtensionsKt$bodyToFlow$$inlined$bodyToFlux$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt$awaitMultipartData$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt.awaitFormData(org.springframework.web.server.ServerWebExchange, kotlin.coroutines.Continuation<? super org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)",
            "public static final java.lang.Object awaitFormData(org.springframework.web.server.ServerWebExchange, kotlin.coroutines.Continuation<? super org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt.awaitMultipartData(org.springframework.web.server.ServerWebExchange, kotlin.coroutines.Continuation<? super org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>)",
            "public static final java.lang.Object awaitMultipartData(org.springframework.web.server.ServerWebExchange, kotlin.coroutines.Continuation<? super org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>)"
        ],
        [
            "<T extends java.security.Principal> java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt.awaitPrincipal(org.springframework.web.server.ServerWebExchange, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T extends java.security.Principal> java.lang.Object awaitPrincipal(org.springframework.web.server.ServerWebExchange, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt.awaitSession(org.springframework.web.server.ServerWebExchange, kotlin.coroutines.Continuation<? super org.springframework.web.server.WebSession>)",
            "public static final java.lang.Object awaitSession(org.springframework.web.server.ServerWebExchange, kotlin.coroutines.Continuation<? super org.springframework.web.server.WebSession>)"
        ],
        [
            "org.springframework.web.server.ServerWebExchange$Builder",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt.principal(org.springframework.web.server.ServerWebExchange$Builder, kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super java.security.Principal>, ? extends java.lang.Object>)",
            "public static final org.springframework.web.server.ServerWebExchange$Builder principal(org.springframework.web.server.ServerWebExchange$Builder, kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super java.security.Principal>, ? extends java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt$principal$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "kotlin.coroutines.Continuation<kotlin.Unit>",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt$principal$1.create(java.lang.Object, kotlin.coroutines.Continuation<?>)",
            "public final kotlin.coroutines.Continuation<kotlin.Unit> create(java.lang.Object, kotlin.coroutines.Continuation<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt$principal$1.invoke(java.lang.Object, java.lang.Object)",
            "public final java.lang.Object invoke(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt$awaitSession$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt$awaitPrincipal$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.reactive.server.ServerWebExchangeExtensionsKt$awaitFormData$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ]
    ]
}