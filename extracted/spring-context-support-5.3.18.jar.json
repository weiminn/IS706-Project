{"spring-context-support-5.3.18.jar": [["org.springframework.mail.MailAuthenticationException", "org.springframework.mail.MailAuthenticationException(java.lang.String)", "public org.springframework.mail.MailAuthenticationException(java.lang.String)"], ["org.springframework.mail.MailAuthenticationException", "org.springframework.mail.MailAuthenticationException(java.lang.String, java.lang.Throwable)", "public org.springframework.mail.MailAuthenticationException(java.lang.String, java.lang.Throwable)"], ["org.springframework.mail.MailAuthenticationException", "org.springframework.mail.MailAuthenticationException(java.lang.Throwable)", "public org.springframework.mail.MailAuthenticationException(java.lang.Throwable)"], ["org.springframework.mail.MailParseException", "org.springframework.mail.MailParseException(java.lang.String)", "public org.springframework.mail.MailParseException(java.lang.String)"], ["org.springframework.mail.MailParseException", "org.springframework.mail.MailParseException(java.lang.String, java.lang.Throwable)", "public org.springframework.mail.MailParseException(java.lang.String, java.lang.Throwable)"], ["org.springframework.mail.MailParseException", "org.springframework.mail.MailParseException(java.lang.Throwable)", "public org.springframework.mail.MailParseException(java.lang.Throwable)"], ["org.springframework.mail.MailException", "org.springframework.mail.MailException(java.lang.String)", "public org.springframework.mail.MailException(java.lang.String)"], ["org.springframework.mail.MailException", "org.springframework.mail.MailException(java.lang.String, java.lang.Throwable)", "public org.springframework.mail.MailException(java.lang.String, java.lang.Throwable)"], ["org.springframework.mail.MailSendException", "org.springframework.mail.MailSendException(java.lang.String)", "public org.springframework.mail.MailSendException(java.lang.String)"], ["org.springframework.mail.MailSendException", "org.springframework.mail.MailSendException(java.lang.String, java.lang.Throwable)", "public org.springframework.mail.MailSendException(java.lang.String, java.lang.Throwable)"], ["org.springframework.mail.MailSendException", "org.springframework.mail.MailSendException(java.lang.String, java.lang.Throwable, java.util.Map<java.lang.Object, java.lang.Exception>)", "public org.springframework.mail.MailSendException(java.lang.String, java.lang.Throwable, java.util.Map<java.lang.Object, java.lang.Exception>)"], ["org.springframework.mail.MailSendException", "org.springframework.mail.MailSendException(java.util.Map<java.lang.Object, java.lang.Exception>)", "public org.springframework.mail.MailSendException(java.util.Map<java.lang.Object, java.lang.Exception>)"], ["java.util.Map<java.lang.Object, java.lang.Exception>", "org.springframework.mail.MailSendException.getFailedMessages()", "public final java.util.Map<java.lang.Object, java.lang.Exception> getFailedMessages()"], ["java.lang.Exception[]", "org.springframework.mail.MailSendException.getMessageExceptions()", "public final java.lang.Exception[] getMessageExceptions()"], ["java.lang.String", "org.springframework.mail.MailSendException.getMessage()", "public java.lang.String getMessage()"], ["java.lang.String", "org.springframework.mail.MailSendException.toString()", "public java.lang.String toString()"], ["void", "org.springframework.mail.MailSendException.printStackTrace(java.io.PrintStream)", "public void printStackTrace(java.io.PrintStream)"], ["void", "org.springframework.mail.MailSendException.printStackTrace(java.io.PrintWriter)", "public void printStackTrace(java.io.PrintWriter)"], ["org.springframework.mail.MailPreparationException", "org.springframework.mail.MailPreparationException(java.lang.String)", "public org.springframework.mail.MailPreparationException(java.lang.String)"], ["org.springframework.mail.MailPreparationException", "org.springframework.mail.MailPreparationException(java.lang.String, java.lang.Throwable)", "public org.springframework.mail.MailPreparationException(java.lang.String, java.lang.Throwable)"], ["org.springframework.mail.MailPreparationException", "org.springframework.mail.MailPreparationException(java.lang.Throwable)", "public org.springframework.mail.MailPreparationException(java.lang.Throwable)"], ["org.springframework.mail.SimpleMailMessage", "org.springframework.mail.SimpleMailMessage()", "public org.springframework.mail.SimpleMailMessage()"], ["org.springframework.mail.SimpleMailMessage", "org.springframework.mail.SimpleMailMessage(org.springframework.mail.SimpleMailMessage)", "public org.springframework.mail.SimpleMailMessage(org.springframework.mail.SimpleMailMessage)"], ["void", "org.springframework.mail.SimpleMailMessage.setFrom(java.lang.String)", "public void setFrom(java.lang.String)"], ["java.lang.String", "org.springframework.mail.SimpleMailMessage.getFrom()", "public java.lang.String getFrom()"], ["void", "org.springframework.mail.SimpleMailMessage.setReplyTo(java.lang.String)", "public void setReplyTo(java.lang.String)"], ["java.lang.String", "org.springframework.mail.SimpleMailMessage.getReplyTo()", "public java.lang.String getReplyTo()"], ["void", "org.springframework.mail.SimpleMailMessage.setTo(java.lang.String)", "public void setTo(java.lang.String)"], ["void", "org.springframework.mail.SimpleMailMessage.setTo(java.lang.String...)", "public void setTo(java.lang.String...)"], ["java.lang.String[]", "org.springframework.mail.SimpleMailMessage.getTo()", "public java.lang.String[] getTo()"], ["void", "org.springframework.mail.SimpleMailMessage.setCc(java.lang.String)", "public void setCc(java.lang.String)"], ["void", "org.springframework.mail.SimpleMailMessage.setCc(java.lang.String...)", "public void setCc(java.lang.String...)"], ["java.lang.String[]", "org.springframework.mail.SimpleMailMessage.getCc()", "public java.lang.String[] getCc()"], ["void", "org.springframework.mail.SimpleMailMessage.setBcc(java.lang.String)", "public void setBcc(java.lang.String)"], ["void", "org.springframework.mail.SimpleMailMessage.setBcc(java.lang.String...)", "public void setBcc(java.lang.String...)"], ["java.lang.String[]", "org.springframework.mail.SimpleMailMessage.getBcc()", "public java.lang.String[] getBcc()"], ["void", "org.springframework.mail.SimpleMailMessage.setSentDate(java.util.Date)", "public void setSentDate(java.util.Date)"], ["java.util.Date", "org.springframework.mail.SimpleMailMessage.getSentDate()", "public java.util.Date getSentDate()"], ["void", "org.springframework.mail.SimpleMailMessage.setSubject(java.lang.String)", "public void setSubject(java.lang.String)"], ["java.lang.String", "org.springframework.mail.SimpleMailMessage.getSubject()", "public java.lang.String getSubject()"], ["void", "org.springframework.mail.SimpleMailMessage.setText(java.lang.String)", "public void setText(java.lang.String)"], ["java.lang.String", "org.springframework.mail.SimpleMailMessage.getText()", "public java.lang.String getText()"], ["void", "org.springframework.mail.SimpleMailMessage.copyTo(org.springframework.mail.MailMessage)", "public void copyTo(org.springframework.mail.MailMessage)"], ["boolean", "org.springframework.mail.SimpleMailMessage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.mail.SimpleMailMessage.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.mail.SimpleMailMessage.toString()", "public java.lang.String toString()"], ["org.springframework.mail.javamail.MimeMessageHelper", "org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage)", "public org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage)"], ["org.springframework.mail.javamail.MimeMessageHelper", "org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, java.lang.String)", "public org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, java.lang.String)"], ["org.springframework.mail.javamail.MimeMessageHelper", "org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)", "public org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, boolean) throws javax.mail.MessagingException"], ["org.springframework.mail.javamail.MimeMessageHelper", "org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, boolean, java.lang.String)", "public org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, boolean, java.lang.String) throws javax.mail.MessagingException"], ["org.springframework.mail.javamail.MimeMessageHelper", "org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, int)", "public org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, int) throws javax.mail.MessagingException"], ["org.springframework.mail.javamail.MimeMessageHelper", "org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, int, java.lang.String)", "public org.springframework.mail.javamail.MimeMessageHelper(javax.mail.internet.MimeMessage, int, java.lang.String) throws javax.mail.MessagingException"], ["javax.mail.internet.MimeMessage", "org.springframework.mail.javamail.MimeMessageHelper.getMimeMessage()", "public final javax.mail.internet.MimeMessage getMimeMessage()"], ["boolean", "org.springframework.mail.javamail.MimeMessageHelper.isMultipart()", "public final boolean isMultipart()"], ["javax.mail.internet.MimeMultipart", "org.springframework.mail.javamail.MimeMessageHelper.getRootMimeMultipart()", "public final javax.mail.internet.MimeMultipart getRootMimeMultipart() throws java.lang.IllegalStateException"], ["javax.mail.internet.MimeMultipart", "org.springframework.mail.javamail.MimeMessageHelper.getMimeMultipart()", "public final javax.mail.internet.MimeMultipart getMimeMultipart() throws java.lang.IllegalStateException"], ["java.lang.String", "org.springframework.mail.javamail.MimeMessageHelper.getEncoding()", "public java.lang.String getEncoding()"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setFileTypeMap(javax.activation.FileTypeMap)", "public void setFileTypeMap(javax.activation.FileTypeMap)"], ["javax.activation.FileTypeMap", "org.springframework.mail.javamail.MimeMessageHelper.getFileTypeMap()", "public javax.activation.FileTypeMap getFileTypeMap()"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setEncodeFilenames(boolean)", "public void setEncodeFilenames(boolean)"], ["boolean", "org.springframework.mail.javamail.MimeMessageHelper.isEncodeFilenames()", "public boolean isEncodeFilenames()"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setValidateAddresses(boolean)", "public void setValidateAddresses(boolean)"], ["boolean", "org.springframework.mail.javamail.MimeMessageHelper.isValidateAddresses()", "public boolean isValidateAddresses()"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setFrom(javax.mail.internet.InternetAddress)", "public void setFrom(javax.mail.internet.InternetAddress) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setFrom(java.lang.String)", "public void setFrom(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setFrom(java.lang.String, java.lang.String)", "public void setFrom(java.lang.String, java.lang.String) throws javax.mail.MessagingException, java.io.UnsupportedEncodingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setReplyTo(javax.mail.internet.InternetAddress)", "public void setReplyTo(javax.mail.internet.InternetAddress) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setReplyTo(java.lang.String)", "public void setReplyTo(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setReplyTo(java.lang.String, java.lang.String)", "public void setReplyTo(java.lang.String, java.lang.String) throws javax.mail.MessagingException, java.io.UnsupportedEncodingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setTo(javax.mail.internet.InternetAddress)", "public void setTo(javax.mail.internet.InternetAddress) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setTo(javax.mail.internet.InternetAddress[])", "public void setTo(javax.mail.internet.InternetAddress[]) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setTo(java.lang.String)", "public void setTo(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setTo(java.lang.String[])", "public void setTo(java.lang.String[]) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addTo(javax.mail.internet.InternetAddress)", "public void addTo(javax.mail.internet.InternetAddress) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addTo(java.lang.String)", "public void addTo(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addTo(java.lang.String, java.lang.String)", "public void addTo(java.lang.String, java.lang.String) throws javax.mail.MessagingException, java.io.UnsupportedEncodingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setCc(javax.mail.internet.InternetAddress)", "public void setCc(javax.mail.internet.InternetAddress) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setCc(javax.mail.internet.InternetAddress[])", "public void setCc(javax.mail.internet.InternetAddress[]) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setCc(java.lang.String)", "public void setCc(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setCc(java.lang.String[])", "public void setCc(java.lang.String[]) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addCc(javax.mail.internet.InternetAddress)", "public void addCc(javax.mail.internet.InternetAddress) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addCc(java.lang.String)", "public void addCc(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addCc(java.lang.String, java.lang.String)", "public void addCc(java.lang.String, java.lang.String) throws javax.mail.MessagingException, java.io.UnsupportedEncodingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setBcc(javax.mail.internet.InternetAddress)", "public void setBcc(javax.mail.internet.InternetAddress) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setBcc(javax.mail.internet.InternetAddress[])", "public void setBcc(javax.mail.internet.InternetAddress[]) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setBcc(java.lang.String)", "public void setBcc(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setBcc(java.lang.String[])", "public void setBcc(java.lang.String[]) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addBcc(javax.mail.internet.InternetAddress)", "public void addBcc(javax.mail.internet.InternetAddress) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addBcc(java.lang.String)", "public void addBcc(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addBcc(java.lang.String, java.lang.String)", "public void addBcc(java.lang.String, java.lang.String) throws javax.mail.MessagingException, java.io.UnsupportedEncodingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setPriority(int)", "public void setPriority(int) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setSentDate(java.util.Date)", "public void setSentDate(java.util.Date) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setSubject(java.lang.String)", "public void setSubject(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setText(java.lang.String)", "public void setText(java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setText(java.lang.String, boolean)", "public void setText(java.lang.String, boolean) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.setText(java.lang.String, java.lang.String)", "public void setText(java.lang.String, java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addInline(java.lang.String, javax.activation.DataSource)", "public void addInline(java.lang.String, javax.activation.DataSource) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addInline(java.lang.String, java.io.File)", "public void addInline(java.lang.String, java.io.File) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addInline(java.lang.String, org.springframework.core.io.Resource)", "public void addInline(java.lang.String, org.springframework.core.io.Resource) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addInline(java.lang.String, org.springframework.core.io.InputStreamSource, java.lang.String)", "public void addInline(java.lang.String, org.springframework.core.io.InputStreamSource, java.lang.String) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addAttachment(java.lang.String, javax.activation.DataSource)", "public void addAttachment(java.lang.String, javax.activation.DataSource) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addAttachment(java.lang.String, java.io.File)", "public void addAttachment(java.lang.String, java.io.File) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addAttachment(java.lang.String, org.springframework.core.io.InputStreamSource)", "public void addAttachment(java.lang.String, org.springframework.core.io.InputStreamSource) throws javax.mail.MessagingException"], ["void", "org.springframework.mail.javamail.MimeMessageHelper.addAttachment(java.lang.String, org.springframework.core.io.InputStreamSource, java.lang.String)", "public void addAttachment(java.lang.String, org.springframework.core.io.InputStreamSource, java.lang.String) throws javax.mail.MessagingException"], ["java.io.InputStream", "org.springframework.mail.javamail.MimeMessageHelper$1.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.io.OutputStream", "org.springframework.mail.javamail.MimeMessageHelper$1.getOutputStream()", "public java.io.OutputStream getOutputStream()"], ["java.lang.String", "org.springframework.mail.javamail.MimeMessageHelper$1.getContentType()", "public java.lang.String getContentType()"], ["java.lang.String", "org.springframework.mail.javamail.MimeMessageHelper$1.getName()", "public java.lang.String getName()"], ["org.springframework.mail.javamail.ConfigurableMimeFileTypeMap", "org.springframework.mail.javamail.ConfigurableMimeFileTypeMap()", "public org.springframework.mail.javamail.ConfigurableMimeFileTypeMap()"], ["void", "org.springframework.mail.javamail.ConfigurableMimeFileTypeMap.setMappingLocation(org.springframework.core.io.Resource)", "public void setMappingLocation(org.springframework.core.io.Resource)"], ["void", "org.springframework.mail.javamail.ConfigurableMimeFileTypeMap.setMappings(java.lang.String...)", "public void setMappings(java.lang.String...)"], ["void", "org.springframework.mail.javamail.ConfigurableMimeFileTypeMap.afterPropertiesSet()", "public void afterPropertiesSet()"], ["java.lang.String", "org.springframework.mail.javamail.ConfigurableMimeFileTypeMap.getContentType(java.io.File)", "public java.lang.String getContentType(java.io.File)"], ["java.lang.String", "org.springframework.mail.javamail.ConfigurableMimeFileTypeMap.getContentType(java.lang.String)", "public java.lang.String getContentType(java.lang.String)"], ["org.springframework.mail.javamail.InternetAddressEditor", "org.springframework.mail.javamail.InternetAddressEditor()", "public org.springframework.mail.javamail.InternetAddressEditor()"], ["void", "org.springframework.mail.javamail.InternetAddressEditor.setAsText(java.lang.String)", "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"], ["java.lang.String", "org.springframework.mail.javamail.InternetAddressEditor.getAsText()", "public java.lang.String getAsText()"], ["org.springframework.mail.javamail.SmartMimeMessage", "org.springframework.mail.javamail.SmartMimeMessage(javax.mail.Session, java.lang.String, javax.activation.FileTypeMap)", "public org.springframework.mail.javamail.SmartMimeMessage(javax.mail.Session, java.lang.String, javax.activation.FileTypeMap)"], ["java.lang.String", "org.springframework.mail.javamail.SmartMimeMessage.getDefaultEncoding()", "public final java.lang.String getDefaultEncoding()"], ["javax.activation.FileTypeMap", "org.springframework.mail.javamail.SmartMimeMessage.getDefaultFileTypeMap()", "public final javax.activation.FileTypeMap getDefaultFileTypeMap()"], ["org.springframework.mail.javamail.MimeMailMessage", "org.springframework.mail.javamail.MimeMailMessage(org.springframework.mail.javamail.MimeMessageHelper)", "public org.springframework.mail.javamail.MimeMailMessage(org.springframework.mail.javamail.MimeMessageHelper)"], ["org.springframework.mail.javamail.MimeMailMessage", "org.springframework.mail.javamail.MimeMailMessage(javax.mail.internet.MimeMessage)", "public org.springframework.mail.javamail.MimeMailMessage(javax.mail.internet.MimeMessage)"], ["org.springframework.mail.javamail.MimeMessageHelper", "org.springframework.mail.javamail.MimeMailMessage.getMimeMessageHelper()", "public final org.springframework.mail.javamail.MimeMessageHelper getMimeMessageHelper()"], ["javax.mail.internet.MimeMessage", "org.springframework.mail.javamail.MimeMailMessage.getMimeMessage()", "public final javax.mail.internet.MimeMessage getMimeMessage()"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setFrom(java.lang.String)", "public void setFrom(java.lang.String) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setReplyTo(java.lang.String)", "public void setReplyTo(java.lang.String) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setTo(java.lang.String)", "public void setTo(java.lang.String) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setTo(java.lang.String...)", "public void setTo(java.lang.String...) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setCc(java.lang.String)", "public void setCc(java.lang.String) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setCc(java.lang.String...)", "public void setCc(java.lang.String...) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setBcc(java.lang.String)", "public void setBcc(java.lang.String) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setBcc(java.lang.String...)", "public void setBcc(java.lang.String...) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setSentDate(java.util.Date)", "public void setSentDate(java.util.Date) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setSubject(java.lang.String)", "public void setSubject(java.lang.String) throws org.springframework.mail.MailParseException"], ["void", "org.springframework.mail.javamail.MimeMailMessage.setText(java.lang.String)", "public void setText(java.lang.String) throws org.springframework.mail.MailParseException"], ["org.springframework.mail.javamail.JavaMailSenderImpl", "org.springframework.mail.javamail.JavaMailSenderImpl()", "public org.springframework.mail.javamail.JavaMailSenderImpl()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.setJavaMailProperties(java.util.Properties)", "public void setJavaMailProperties(java.util.Properties)"], ["java.util.Properties", "org.springframework.mail.javamail.JavaMailSenderImpl.getJavaMailProperties()", "public java.util.Properties getJavaMailProperties()"], ["synchronized", "org.springframework.mail.javamail.JavaMailSenderImpl.void setSession(javax.mail.Session)", "public synchronized void setSession(javax.mail.Session)"], ["synchronized", "org.springframework.mail.javamail.JavaMailSenderImpl.javax.mail.Session getSession()", "public synchronized javax.mail.Session getSession()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.setProtocol(java.lang.String)", "public void setProtocol(java.lang.String)"], ["java.lang.String", "org.springframework.mail.javamail.JavaMailSenderImpl.getProtocol()", "public java.lang.String getProtocol()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.setHost(java.lang.String)", "public void setHost(java.lang.String)"], ["java.lang.String", "org.springframework.mail.javamail.JavaMailSenderImpl.getHost()", "public java.lang.String getHost()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.setPort(int)", "public void setPort(int)"], ["int", "org.springframework.mail.javamail.JavaMailSenderImpl.getPort()", "public int getPort()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.setUsername(java.lang.String)", "public void setUsername(java.lang.String)"], ["java.lang.String", "org.springframework.mail.javamail.JavaMailSenderImpl.getUsername()", "public java.lang.String getUsername()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.setPassword(java.lang.String)", "public void setPassword(java.lang.String)"], ["java.lang.String", "org.springframework.mail.javamail.JavaMailSenderImpl.getPassword()", "public java.lang.String getPassword()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.setDefaultEncoding(java.lang.String)", "public void setDefaultEncoding(java.lang.String)"], ["java.lang.String", "org.springframework.mail.javamail.JavaMailSenderImpl.getDefaultEncoding()", "public java.lang.String getDefaultEncoding()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.setDefaultFileTypeMap(javax.activation.FileTypeMap)", "public void setDefaultFileTypeMap(javax.activation.FileTypeMap)"], ["javax.activation.FileTypeMap", "org.springframework.mail.javamail.JavaMailSenderImpl.getDefaultFileTypeMap()", "public javax.activation.FileTypeMap getDefaultFileTypeMap()"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.send(org.springframework.mail.SimpleMailMessage)", "public void send(org.springframework.mail.SimpleMailMessage) throws org.springframework.mail.MailException"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.send(org.springframework.mail.SimpleMailMessage...)", "public void send(org.springframework.mail.SimpleMailMessage...) throws org.springframework.mail.MailException"], ["javax.mail.internet.MimeMessage", "org.springframework.mail.javamail.JavaMailSenderImpl.createMimeMessage()", "public javax.mail.internet.MimeMessage createMimeMessage()"], ["javax.mail.internet.MimeMessage", "org.springframework.mail.javamail.JavaMailSenderImpl.createMimeMessage(java.io.InputStream)", "public javax.mail.internet.MimeMessage createMimeMessage(java.io.InputStream) throws org.springframework.mail.MailException"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.send(javax.mail.internet.MimeMessage)", "public void send(javax.mail.internet.MimeMessage) throws org.springframework.mail.MailException"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.send(javax.mail.internet.MimeMessage...)", "public void send(javax.mail.internet.MimeMessage...) throws org.springframework.mail.MailException"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.send(org.springframework.mail.javamail.MimeMessagePreparator)", "public void send(org.springframework.mail.javamail.MimeMessagePreparator) throws org.springframework.mail.MailException"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.send(org.springframework.mail.javamail.MimeMessagePreparator...)", "public void send(org.springframework.mail.javamail.MimeMessagePreparator...) throws org.springframework.mail.MailException"], ["void", "org.springframework.mail.javamail.JavaMailSenderImpl.testConnection()", "public void testConnection() throws javax.mail.MessagingException"], ["org.springframework.scheduling.commonj.TimerManagerAccessor", "org.springframework.scheduling.commonj.TimerManagerAccessor()", "public org.springframework.scheduling.commonj.TimerManagerAccessor()"], ["void", "org.springframework.scheduling.commonj.TimerManagerAccessor.setTimerManager(commonj.timers.TimerManager)", "public void setTimerManager(commonj.timers.TimerManager)"], ["void", "org.springframework.scheduling.commonj.TimerManagerAccessor.setTimerManagerName(java.lang.String)", "public void setTimerManagerName(java.lang.String)"], ["void", "org.springframework.scheduling.commonj.TimerManagerAccessor.setShared(boolean)", "public void setShared(boolean)"], ["void", "org.springframework.scheduling.commonj.TimerManagerAccessor.afterPropertiesSet()", "public void afterPropertiesSet() throws javax.naming.NamingException"], ["void", "org.springframework.scheduling.commonj.TimerManagerAccessor.start()", "public void start()"], ["void", "org.springframework.scheduling.commonj.TimerManagerAccessor.stop()", "public void stop()"], ["boolean", "org.springframework.scheduling.commonj.TimerManagerAccessor.isRunning()", "public boolean isRunning()"], ["void", "org.springframework.scheduling.commonj.TimerManagerAccessor.destroy()", "public void destroy()"], ["org.springframework.scheduling.commonj.DelegatingTimerListener", "org.springframework.scheduling.commonj.DelegatingTimerListener(java.lang.Runnable)", "public org.springframework.scheduling.commonj.DelegatingTimerListener(java.lang.Runnable)"], ["void", "org.springframework.scheduling.commonj.DelegatingTimerListener.timerExpired(commonj.timers.Timer)", "public void timerExpired(commonj.timers.Timer)"], ["org.springframework.scheduling.commonj.DelegatingWork", "org.springframework.scheduling.commonj.DelegatingWork(java.lang.Runnable)", "public org.springframework.scheduling.commonj.DelegatingWork(java.lang.Runnable)"], ["java.lang.Runnable", "org.springframework.scheduling.commonj.DelegatingWork.getDelegate()", "public final java.lang.Runnable getDelegate()"], ["void", "org.springframework.scheduling.commonj.DelegatingWork.run()", "public void run()"], ["boolean", "org.springframework.scheduling.commonj.DelegatingWork.isDaemon()", "public boolean isDaemon()"], ["void", "org.springframework.scheduling.commonj.DelegatingWork.release()", "public void release()"], ["org.springframework.scheduling.commonj.TimerManagerFactoryBean", "org.springframework.scheduling.commonj.TimerManagerFactoryBean()", "public org.springframework.scheduling.commonj.TimerManagerFactoryBean()"], ["void", "org.springframework.scheduling.commonj.TimerManagerFactoryBean.setScheduledTimerListeners(org.springframework.scheduling.commonj.ScheduledTimerListener[])", "public void setScheduledTimerListeners(org.springframework.scheduling.commonj.ScheduledTimerListener[])"], ["void", "org.springframework.scheduling.commonj.TimerManagerFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws javax.naming.NamingException"], ["commonj.timers.TimerManager", "org.springframework.scheduling.commonj.TimerManagerFactoryBean.getObject()", "public commonj.timers.TimerManager getObject()"], ["java.lang.Class<? extends commonj.timers.TimerManager>", "org.springframework.scheduling.commonj.TimerManagerFactoryBean.getObjectType()", "public java.lang.Class<? extends commonj.timers.TimerManager> getObjectType()"], ["boolean", "org.springframework.scheduling.commonj.TimerManagerFactoryBean.isSingleton()", "public boolean isSingleton()"], ["void", "org.springframework.scheduling.commonj.TimerManagerFactoryBean.destroy()", "public void destroy()"], ["java.lang.Object", "org.springframework.scheduling.commonj.TimerManagerFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.scheduling.commonj.ScheduledTimerListener", "org.springframework.scheduling.commonj.ScheduledTimerListener()", "public org.springframework.scheduling.commonj.ScheduledTimerListener()"], ["org.springframework.scheduling.commonj.ScheduledTimerListener", "org.springframework.scheduling.commonj.ScheduledTimerListener(commonj.timers.TimerListener)", "public org.springframework.scheduling.commonj.ScheduledTimerListener(commonj.timers.TimerListener)"], ["org.springframework.scheduling.commonj.ScheduledTimerListener", "org.springframework.scheduling.commonj.ScheduledTimerListener(commonj.timers.TimerListener, long)", "public org.springframework.scheduling.commonj.ScheduledTimerListener(commonj.timers.TimerListener, long)"], ["org.springframework.scheduling.commonj.ScheduledTimerListener", "org.springframework.scheduling.commonj.ScheduledTimerListener(commonj.timers.TimerListener, long, long, boolean)", "public org.springframework.scheduling.commonj.ScheduledTimerListener(commonj.timers.TimerListener, long, long, boolean)"], ["org.springframework.scheduling.commonj.ScheduledTimerListener", "org.springframework.scheduling.commonj.ScheduledTimerListener(java.lang.Runnable)", "public org.springframework.scheduling.commonj.ScheduledTimerListener(java.lang.Runnable)"], ["org.springframework.scheduling.commonj.ScheduledTimerListener", "org.springframework.scheduling.commonj.ScheduledTimerListener(java.lang.Runnable, long)", "public org.springframework.scheduling.commonj.ScheduledTimerListener(java.lang.Runnable, long)"], ["org.springframework.scheduling.commonj.ScheduledTimerListener", "org.springframework.scheduling.commonj.ScheduledTimerListener(java.lang.Runnable, long, long, boolean)", "public org.springframework.scheduling.commonj.ScheduledTimerListener(java.lang.Runnable, long, long, boolean)"], ["void", "org.springframework.scheduling.commonj.ScheduledTimerListener.setRunnable(java.lang.Runnable)", "public void setRunnable(java.lang.Runnable)"], ["void", "org.springframework.scheduling.commonj.ScheduledTimerListener.setTimerListener(commonj.timers.TimerListener)", "public void setTimerListener(commonj.timers.TimerListener)"], ["commonj.timers.TimerListener", "org.springframework.scheduling.commonj.ScheduledTimerListener.getTimerListener()", "public commonj.timers.TimerListener getTimerListener()"], ["void", "org.springframework.scheduling.commonj.ScheduledTimerListener.setDelay(long)", "public void setDelay(long)"], ["long", "org.springframework.scheduling.commonj.ScheduledTimerListener.getDelay()", "public long getDelay()"], ["void", "org.springframework.scheduling.commonj.ScheduledTimerListener.setPeriod(long)", "public void setPeriod(long)"], ["long", "org.springframework.scheduling.commonj.ScheduledTimerListener.getPeriod()", "public long getPeriod()"], ["boolean", "org.springframework.scheduling.commonj.ScheduledTimerListener.isOneTimeTask()", "public boolean isOneTimeTask()"], ["void", "org.springframework.scheduling.commonj.ScheduledTimerListener.setFixedRate(boolean)", "public void setFixedRate(boolean)"], ["boolean", "org.springframework.scheduling.commonj.ScheduledTimerListener.isFixedRate()", "public boolean isFixedRate()"], ["org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture(java.lang.Runnable)", "public org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture(java.lang.Runnable)"], ["void", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture.setTimer(commonj.timers.Timer)", "public void setTimer(commonj.timers.Timer)"], ["void", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture.timerExpired(commonj.timers.Timer)", "public void timerExpired(commonj.timers.Timer)"], ["boolean", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["long", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture.getDelay(java.util.concurrent.TimeUnit)", "public long getDelay(java.util.concurrent.TimeUnit)"], ["int", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture.compareTo(java.util.concurrent.Delayed)", "public int compareTo(java.util.concurrent.Delayed)"], ["int", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$TimerScheduledFuture.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.springframework.scheduling.commonj.TimerManagerTaskScheduler$ReschedulingTimerListener", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$ReschedulingTimerListener(org.springframework.scheduling.commonj.TimerManagerTaskScheduler, java.lang.Runnable, org.springframework.scheduling.Trigger)", "public org.springframework.scheduling.commonj.TimerManagerTaskScheduler$ReschedulingTimerListener(org.springframework.scheduling.commonj.TimerManagerTaskScheduler, java.lang.Runnable, org.springframework.scheduling.Trigger)"], ["java.util.concurrent.ScheduledFuture<?>", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$ReschedulingTimerListener.schedule()", "public java.util.concurrent.ScheduledFuture<?> schedule()"], ["void", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler$ReschedulingTimerListener.timerExpired(commonj.timers.Timer)", "public void timerExpired(commonj.timers.Timer)"], ["org.springframework.scheduling.commonj.TimerManagerTaskScheduler", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler()", "public org.springframework.scheduling.commonj.TimerManagerTaskScheduler()"], ["void", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler.setErrorHandler(org.springframework.util.ErrorHandler)", "public void setErrorHandler(org.springframework.util.ErrorHandler)"], ["java.util.concurrent.ScheduledFuture<?>", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler.schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)", "public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)"], ["java.util.concurrent.ScheduledFuture<?>", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler.schedule(java.lang.Runnable, java.util.Date)", "public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, java.util.Date)"], ["java.util.concurrent.ScheduledFuture<?>", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler.scheduleAtFixedRate(java.lang.Runnable, java.util.Date, long)", "public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, java.util.Date, long)"], ["java.util.concurrent.ScheduledFuture<?>", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler.scheduleAtFixedRate(java.lang.Runnable, long)", "public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long)"], ["java.util.concurrent.ScheduledFuture<?>", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler.scheduleWithFixedDelay(java.lang.Runnable, java.util.Date, long)", "public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, java.util.Date, long)"], ["java.util.concurrent.ScheduledFuture<?>", "org.springframework.scheduling.commonj.TimerManagerTaskScheduler.scheduleWithFixedDelay(java.lang.Runnable, long)", "public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long)"], ["org.springframework.scheduling.commonj.WorkManagerTaskExecutor", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor()", "public org.springframework.scheduling.commonj.WorkManagerTaskExecutor()"], ["void", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.setWorkManager(commonj.work.WorkManager)", "public void setWorkManager(commonj.work.WorkManager)"], ["void", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.setWorkManagerName(java.lang.String)", "public void setWorkManagerName(java.lang.String)"], ["void", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.setWorkListener(commonj.work.WorkListener)", "public void setWorkListener(commonj.work.WorkListener)"], ["void", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.setTaskDecorator(org.springframework.core.task.TaskDecorator)", "public void setTaskDecorator(org.springframework.core.task.TaskDecorator)"], ["void", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.afterPropertiesSet()", "public void afterPropertiesSet() throws javax.naming.NamingException"], ["void", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.execute(java.lang.Runnable, long)", "public void execute(java.lang.Runnable, long)"], ["java.util.concurrent.Future<?>", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.submit(java.lang.Runnable)", "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.submit(java.util.concurrent.Callable<T>)", "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"], ["org.springframework.util.concurrent.ListenableFuture<?>", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.submitListenable(java.lang.Runnable)", "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"], ["<T> org.springframework.util.concurrent.ListenableFuture<T>", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.submitListenable(java.util.concurrent.Callable<T>)", "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"], ["commonj.work.WorkItem", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.schedule(commonj.work.Work)", "public commonj.work.WorkItem schedule(commonj.work.Work) throws commonj.work.WorkException, java.lang.IllegalArgumentException"], ["commonj.work.WorkItem", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.schedule(commonj.work.Work, commonj.work.WorkListener)", "public commonj.work.WorkItem schedule(commonj.work.Work, commonj.work.WorkListener) throws commonj.work.WorkException"], ["boolean", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.waitForAll(java.util.Collection, long)", "public boolean waitForAll(java.util.Collection, long) throws java.lang.InterruptedException"], ["java.util.Collection", "org.springframework.scheduling.commonj.WorkManagerTaskExecutor.waitForAny(java.util.Collection, long)", "public java.util.Collection waitForAny(java.util.Collection, long) throws java.lang.InterruptedException"], ["org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$StatefulMethodInvokingJob", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$StatefulMethodInvokingJob()", "public org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$StatefulMethodInvokingJob()"], ["org.springframework.scheduling.quartz.SchedulerAccessor", "org.springframework.scheduling.quartz.SchedulerAccessor()", "public org.springframework.scheduling.quartz.SchedulerAccessor()"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setOverwriteExistingJobs(boolean)", "public void setOverwriteExistingJobs(boolean)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setJobSchedulingDataLocation(java.lang.String)", "public void setJobSchedulingDataLocation(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setJobSchedulingDataLocations(java.lang.String...)", "public void setJobSchedulingDataLocations(java.lang.String...)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setJobDetails(org.quartz.JobDetail...)", "public void setJobDetails(org.quartz.JobDetail...)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setCalendars(java.util.Map<java.lang.String, org.quartz.Calendar>)", "public void setCalendars(java.util.Map<java.lang.String, org.quartz.Calendar>)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setTriggers(org.quartz.Trigger...)", "public void setTriggers(org.quartz.Trigger...)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setSchedulerListeners(org.quartz.SchedulerListener...)", "public void setSchedulerListeners(org.quartz.SchedulerListener...)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setGlobalJobListeners(org.quartz.JobListener...)", "public void setGlobalJobListeners(org.quartz.JobListener...)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setGlobalTriggerListeners(org.quartz.TriggerListener...)", "public void setGlobalTriggerListeners(org.quartz.TriggerListener...)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setTransactionManager(org.springframework.transaction.PlatformTransactionManager)", "public void setTransactionManager(org.springframework.transaction.PlatformTransactionManager)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessor.setResourceLoader(org.springframework.core.io.ResourceLoader)", "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"], ["org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool", "org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool()", "public org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool()"], ["void", "org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool.setInstanceId(java.lang.String)", "public void setInstanceId(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool.setInstanceName(java.lang.String)", "public void setInstanceName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool.initialize()", "public void initialize() throws org.quartz.SchedulerConfigException"], ["void", "org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool.shutdown(boolean)", "public void shutdown(boolean)"], ["int", "org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool.getPoolSize()", "public int getPoolSize()"], ["boolean", "org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool.runInThread(java.lang.Runnable)", "public boolean runInThread(java.lang.Runnable)"], ["int", "org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool.blockForAvailableThreads()", "public int blockForAvailableThreads()"], ["org.springframework.scheduling.quartz.SchedulerFactoryBean", "org.springframework.scheduling.quartz.SchedulerFactoryBean()", "public org.springframework.scheduling.quartz.SchedulerFactoryBean()"], ["org.springframework.core.io.ResourceLoader", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getConfigTimeResourceLoader()", "public static org.springframework.core.io.ResourceLoader getConfigTimeResourceLoader()"], ["java.util.concurrent.Executor", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getConfigTimeTaskExecutor()", "public static java.util.concurrent.Executor getConfigTimeTaskExecutor()"], ["javax.sql.DataSource", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getConfigTimeDataSource()", "public static javax.sql.DataSource getConfigTimeDataSource()"], ["javax.sql.DataSource", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getConfigTimeNonTransactionalDataSource()", "public static javax.sql.DataSource getConfigTimeNonTransactionalDataSource()"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setSchedulerFactory(org.quartz.SchedulerFactory)", "public void setSchedulerFactory(org.quartz.SchedulerFactory)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setSchedulerFactoryClass(java.lang.Class<? extends org.quartz.SchedulerFactory>)", "public void setSchedulerFactoryClass(java.lang.Class<? extends org.quartz.SchedulerFactory>)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setSchedulerName(java.lang.String)", "public void setSchedulerName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setConfigLocation(org.springframework.core.io.Resource)", "public void setConfigLocation(org.springframework.core.io.Resource)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setQuartzProperties(java.util.Properties)", "public void setQuartzProperties(java.util.Properties)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setTaskExecutor(java.util.concurrent.Executor)", "public void setTaskExecutor(java.util.concurrent.Executor)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setDataSource(javax.sql.DataSource)", "public void setDataSource(javax.sql.DataSource)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setNonTransactionalDataSource(javax.sql.DataSource)", "public void setNonTransactionalDataSource(javax.sql.DataSource)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setSchedulerContextAsMap(java.util.Map<java.lang.String, ?>)", "public void setSchedulerContextAsMap(java.util.Map<java.lang.String, ?>)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setApplicationContextSchedulerContextKey(java.lang.String)", "public void setApplicationContextSchedulerContextKey(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setJobFactory(org.quartz.spi.JobFactory)", "public void setJobFactory(org.quartz.spi.JobFactory)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setAutoStartup(boolean)", "public void setAutoStartup(boolean)"], ["boolean", "org.springframework.scheduling.quartz.SchedulerFactoryBean.isAutoStartup()", "public boolean isAutoStartup()"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setPhase(int)", "public void setPhase(int)"], ["int", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getPhase()", "public int getPhase()"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setStartupDelay(int)", "public void setStartupDelay(int)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setExposeSchedulerInRepository(boolean)", "public void setExposeSchedulerInRepository(boolean)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(boolean)", "public void setWaitForJobsToCompleteOnShutdown(boolean)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setBeanName(java.lang.String)", "public void setBeanName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.setApplicationContext(org.springframework.context.ApplicationContext)", "public void setApplicationContext(org.springframework.context.ApplicationContext)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws java.lang.Exception"], ["org.quartz.Scheduler", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getScheduler()", "public org.quartz.Scheduler getScheduler()"], ["org.quartz.Scheduler", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getObject()", "public org.quartz.Scheduler getObject()"], ["java.lang.Class<? extends org.quartz.Scheduler>", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getObjectType()", "public java.lang.Class<? extends org.quartz.Scheduler> getObjectType()"], ["boolean", "org.springframework.scheduling.quartz.SchedulerFactoryBean.isSingleton()", "public boolean isSingleton()"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.start()", "public void start() throws org.springframework.scheduling.SchedulingException"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.stop()", "public void stop() throws org.springframework.scheduling.SchedulingException"], ["boolean", "org.springframework.scheduling.quartz.SchedulerFactoryBean.isRunning()", "public boolean isRunning() throws org.springframework.scheduling.SchedulingException"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy()", "public void destroy() throws org.quartz.SchedulerException"], ["java.lang.Object", "org.springframework.scheduling.quartz.SchedulerFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$MethodInvokingJob", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$MethodInvokingJob()", "public org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$MethodInvokingJob()"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$MethodInvokingJob.setMethodInvoker(org.springframework.util.MethodInvoker)", "public void setMethodInvoker(org.springframework.util.MethodInvoker)"], ["org.springframework.scheduling.quartz.SchedulerAccessorBean", "org.springframework.scheduling.quartz.SchedulerAccessorBean()", "public org.springframework.scheduling.quartz.SchedulerAccessorBean()"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessorBean.setSchedulerName(java.lang.String)", "public void setSchedulerName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessorBean.setScheduler(org.quartz.Scheduler)", "public void setScheduler(org.quartz.Scheduler)"], ["org.quartz.Scheduler", "org.springframework.scheduling.quartz.SchedulerAccessorBean.getScheduler()", "public org.quartz.Scheduler getScheduler()"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessorBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["void", "org.springframework.scheduling.quartz.SchedulerAccessorBean.afterPropertiesSet()", "public void afterPropertiesSet() throws org.quartz.SchedulerException"], ["org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor()", "public org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor()"], ["void", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.setWaitForJobsToCompleteOnShutdown(boolean)", "public void setWaitForJobsToCompleteOnShutdown(boolean)"], ["void", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.afterPropertiesSet()", "public void afterPropertiesSet() throws org.quartz.SchedulerConfigException"], ["void", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.execute(java.lang.Runnable, long)", "public void execute(java.lang.Runnable, long)"], ["java.util.concurrent.Future<?>", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.submit(java.lang.Runnable)", "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.submit(java.util.concurrent.Callable<T>)", "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"], ["org.springframework.util.concurrent.ListenableFuture<?>", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.submitListenable(java.lang.Runnable)", "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"], ["<T> org.springframework.util.concurrent.ListenableFuture<T>", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.submitListenable(java.util.concurrent.Callable<T>)", "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"], ["void", "org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor.destroy()", "public void destroy()"], ["org.springframework.scheduling.quartz.DelegatingJob", "org.springframework.scheduling.quartz.DelegatingJob(java.lang.Runnable)", "public org.springframework.scheduling.quartz.DelegatingJob(java.lang.Runnable)"], ["java.lang.Runnable", "org.springframework.scheduling.quartz.DelegatingJob.getDelegate()", "public final java.lang.Runnable getDelegate()"], ["void", "org.springframework.scheduling.quartz.DelegatingJob.execute(org.quartz.JobExecutionContext)", "public void execute(org.quartz.JobExecutionContext) throws org.quartz.JobExecutionException"], ["org.springframework.scheduling.quartz.JobDetailFactoryBean", "org.springframework.scheduling.quartz.JobDetailFactoryBean()", "public org.springframework.scheduling.quartz.JobDetailFactoryBean()"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setGroup(java.lang.String)", "public void setGroup(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setJobClass(java.lang.Class<? extends org.quartz.Job>)", "public void setJobClass(java.lang.Class<? extends org.quartz.Job>)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setJobDataMap(org.quartz.JobDataMap)", "public void setJobDataMap(org.quartz.JobDataMap)"], ["org.quartz.JobDataMap", "org.springframework.scheduling.quartz.JobDetailFactoryBean.getJobDataMap()", "public org.quartz.JobDataMap getJobDataMap()"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setJobDataAsMap(java.util.Map<java.lang.String, ?>)", "public void setJobDataAsMap(java.util.Map<java.lang.String, ?>)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setDurability(boolean)", "public void setDurability(boolean)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setRequestsRecovery(boolean)", "public void setRequestsRecovery(boolean)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setBeanName(java.lang.String)", "public void setBeanName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setApplicationContext(org.springframework.context.ApplicationContext)", "public void setApplicationContext(org.springframework.context.ApplicationContext)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.setApplicationContextJobDataKey(java.lang.String)", "public void setApplicationContextJobDataKey(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.JobDetailFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.quartz.JobDetail", "org.springframework.scheduling.quartz.JobDetailFactoryBean.getObject()", "public org.quartz.JobDetail getObject()"], ["java.lang.Class<?>", "org.springframework.scheduling.quartz.JobDetailFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.scheduling.quartz.JobDetailFactoryBean.isSingleton()", "public boolean isSingleton()"], ["java.lang.Object", "org.springframework.scheduling.quartz.JobDetailFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.scheduling.quartz.JobMethodInvocationFailedException", "org.springframework.scheduling.quartz.JobMethodInvocationFailedException(org.springframework.util.MethodInvoker, java.lang.Throwable)", "public org.springframework.scheduling.quartz.JobMethodInvocationFailedException(org.springframework.util.MethodInvoker, java.lang.Throwable)"], ["org.springframework.scheduling.quartz.CronTriggerFactoryBean", "org.springframework.scheduling.quartz.CronTriggerFactoryBean()", "public org.springframework.scheduling.quartz.CronTriggerFactoryBean()"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setGroup(java.lang.String)", "public void setGroup(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setJobDetail(org.quartz.JobDetail)", "public void setJobDetail(org.quartz.JobDetail)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setJobDataMap(org.quartz.JobDataMap)", "public void setJobDataMap(org.quartz.JobDataMap)"], ["org.quartz.JobDataMap", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.getJobDataMap()", "public org.quartz.JobDataMap getJobDataMap()"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setJobDataAsMap(java.util.Map<java.lang.String, ?>)", "public void setJobDataAsMap(java.util.Map<java.lang.String, ?>)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setStartTime(java.util.Date)", "public void setStartTime(java.util.Date)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setStartDelay(long)", "public void setStartDelay(long)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setCronExpression(java.lang.String)", "public void setCronExpression(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setTimeZone(java.util.TimeZone)", "public void setTimeZone(java.util.TimeZone)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setCalendarName(java.lang.String)", "public void setCalendarName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setPriority(int)", "public void setPriority(int)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setMisfireInstruction(int)", "public void setMisfireInstruction(int)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setMisfireInstructionName(java.lang.String)", "public void setMisfireInstructionName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.setBeanName(java.lang.String)", "public void setBeanName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws java.text.ParseException"], ["org.quartz.CronTrigger", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.getObject()", "public org.quartz.CronTrigger getObject()"], ["java.lang.Class<?>", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.isSingleton()", "public boolean isSingleton()"], ["java.lang.Object", "org.springframework.scheduling.quartz.CronTriggerFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.scheduling.quartz.QuartzJobBean", "org.springframework.scheduling.quartz.QuartzJobBean()", "public org.springframework.scheduling.quartz.QuartzJobBean()"], ["void", "org.springframework.scheduling.quartz.QuartzJobBean.execute(org.quartz.JobExecutionContext)", "public final void execute(org.quartz.JobExecutionContext) throws org.quartz.JobExecutionException"], ["java.sql.Connection", "org.springframework.scheduling.quartz.LocalDataSourceJobStore$2.getConnection()", "public java.sql.Connection getConnection() throws java.sql.SQLException"], ["void", "org.springframework.scheduling.quartz.LocalDataSourceJobStore$2.shutdown()", "public void shutdown()"], ["void", "org.springframework.scheduling.quartz.LocalDataSourceJobStore$2.initialize()", "public void initialize()"], ["org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean()", "public org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean()"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.setGroup(java.lang.String)", "public void setGroup(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.setConcurrent(boolean)", "public void setConcurrent(boolean)"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.setTargetBeanName(java.lang.String)", "public void setTargetBeanName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.setBeanName(java.lang.String)", "public void setBeanName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.setBeanClassLoader(java.lang.ClassLoader)", "public void setBeanClassLoader(java.lang.ClassLoader)"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["void", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException"], ["java.lang.Class<?>", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.getTargetClass()", "public java.lang.Class<?> getTargetClass()"], ["java.lang.Object", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.getTargetObject()", "public java.lang.Object getTargetObject()"], ["org.quartz.JobDetail", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.getObject()", "public org.quartz.JobDetail getObject()"], ["java.lang.Class<? extends org.quartz.JobDetail>", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.getObjectType()", "public java.lang.Class<? extends org.quartz.JobDetail> getObjectType()"], ["boolean", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.isSingleton()", "public boolean isSingleton()"], ["java.lang.Object", "org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.scheduling.quartz.AdaptableJobFactory", "org.springframework.scheduling.quartz.AdaptableJobFactory()", "public org.springframework.scheduling.quartz.AdaptableJobFactory()"], ["org.quartz.Job", "org.springframework.scheduling.quartz.AdaptableJobFactory.newJob(org.quartz.spi.TriggerFiredBundle, org.quartz.Scheduler)", "public org.quartz.Job newJob(org.quartz.spi.TriggerFiredBundle, org.quartz.Scheduler) throws org.quartz.SchedulerException"], ["org.springframework.scheduling.quartz.SpringBeanJobFactory", "org.springframework.scheduling.quartz.SpringBeanJobFactory()", "public org.springframework.scheduling.quartz.SpringBeanJobFactory()"], ["void", "org.springframework.scheduling.quartz.SpringBeanJobFactory.setIgnoredUnknownProperties(java.lang.String...)", "public void setIgnoredUnknownProperties(java.lang.String...)"], ["void", "org.springframework.scheduling.quartz.SpringBeanJobFactory.setApplicationContext(org.springframework.context.ApplicationContext)", "public void setApplicationContext(org.springframework.context.ApplicationContext)"], ["void", "org.springframework.scheduling.quartz.SpringBeanJobFactory.setSchedulerContext(org.quartz.SchedulerContext)", "public void setSchedulerContext(org.quartz.SchedulerContext)"], ["void", "org.springframework.scheduling.quartz.SchedulerFactoryBean$1.run()", "public void run()"], ["org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper", "org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper()", "public org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper()"], ["org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper", "org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper(org.springframework.core.io.ResourceLoader)", "public org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper(org.springframework.core.io.ResourceLoader)"], ["void", "org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper.initialize()", "public void initialize()"], ["java.lang.Class<?>", "org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper.loadClass(java.lang.String)", "public java.lang.Class<?> loadClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["<T> java.lang.Class<? extends T>", "org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper.loadClass(java.lang.String, java.lang.Class<T>)", "public <T> java.lang.Class<? extends T> loadClass(java.lang.String, java.lang.Class<T>) throws java.lang.ClassNotFoundException"], ["java.net.URL", "org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String)"], ["java.io.InputStream", "org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["java.lang.ClassLoader", "org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["org.springframework.scheduling.quartz.SimpleTriggerFactoryBean", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean()", "public org.springframework.scheduling.quartz.SimpleTriggerFactoryBean()"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setGroup(java.lang.String)", "public void setGroup(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setJobDetail(org.quartz.JobDetail)", "public void setJobDetail(org.quartz.JobDetail)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setJobDataMap(org.quartz.JobDataMap)", "public void setJobDataMap(org.quartz.JobDataMap)"], ["org.quartz.JobDataMap", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.getJobDataMap()", "public org.quartz.JobDataMap getJobDataMap()"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setJobDataAsMap(java.util.Map<java.lang.String, ?>)", "public void setJobDataAsMap(java.util.Map<java.lang.String, ?>)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setStartTime(java.util.Date)", "public void setStartTime(java.util.Date)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setStartDelay(long)", "public void setStartDelay(long)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setRepeatInterval(long)", "public void setRepeatInterval(long)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setRepeatCount(int)", "public void setRepeatCount(int)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setPriority(int)", "public void setPriority(int)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setMisfireInstruction(int)", "public void setMisfireInstruction(int)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setMisfireInstructionName(java.lang.String)", "public void setMisfireInstructionName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.setBeanName(java.lang.String)", "public void setBeanName(java.lang.String)"], ["void", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.quartz.SimpleTrigger", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.getObject()", "public org.quartz.SimpleTrigger getObject()"], ["java.lang.Class<?>", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.isSingleton()", "public boolean isSingleton()"], ["java.lang.Object", "org.springframework.scheduling.quartz.SimpleTriggerFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.scheduling.quartz.LocalDataSourceJobStore", "org.springframework.scheduling.quartz.LocalDataSourceJobStore()", "public org.springframework.scheduling.quartz.LocalDataSourceJobStore()"], ["void", "org.springframework.scheduling.quartz.LocalDataSourceJobStore.initialize(org.quartz.spi.ClassLoadHelper, org.quartz.spi.SchedulerSignaler)", "public void initialize(org.quartz.spi.ClassLoadHelper, org.quartz.spi.SchedulerSignaler) throws org.quartz.SchedulerConfigException"], ["java.sql.Connection", "org.springframework.scheduling.quartz.LocalDataSourceJobStore$1.getConnection()", "public java.sql.Connection getConnection() throws java.sql.SQLException"], ["void", "org.springframework.scheduling.quartz.LocalDataSourceJobStore$1.shutdown()", "public void shutdown()"], ["void", "org.springframework.scheduling.quartz.LocalDataSourceJobStore$1.initialize()", "public void initialize()"], ["org.springframework.ui.freemarker.FreeMarkerTemplateUtils", "org.springframework.ui.freemarker.FreeMarkerTemplateUtils()", "public org.springframework.ui.freemarker.FreeMarkerTemplateUtils()"], ["java.lang.String", "org.springframework.ui.freemarker.FreeMarkerTemplateUtils.processTemplateIntoString(freemarker.template.Template, java.lang.Object)", "public static java.lang.String processTemplateIntoString(freemarker.template.Template, java.lang.Object) throws java.io.IOException, freemarker.template.TemplateException"], ["org.springframework.ui.freemarker.FreeMarkerConfigurationFactory", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory()", "public org.springframework.ui.freemarker.FreeMarkerConfigurationFactory()"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setConfigLocation(org.springframework.core.io.Resource)", "public void setConfigLocation(org.springframework.core.io.Resource)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setFreemarkerSettings(java.util.Properties)", "public void setFreemarkerSettings(java.util.Properties)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setFreemarkerVariables(java.util.Map<java.lang.String, java.lang.Object>)", "public void setFreemarkerVariables(java.util.Map<java.lang.String, java.lang.Object>)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setDefaultEncoding(java.lang.String)", "public void setDefaultEncoding(java.lang.String)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setPreTemplateLoaders(freemarker.cache.TemplateLoader...)", "public void setPreTemplateLoaders(freemarker.cache.TemplateLoader...)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setPostTemplateLoaders(freemarker.cache.TemplateLoader...)", "public void setPostTemplateLoaders(freemarker.cache.TemplateLoader...)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setTemplateLoaderPath(java.lang.String)", "public void setTemplateLoaderPath(java.lang.String)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setTemplateLoaderPaths(java.lang.String...)", "public void setTemplateLoaderPaths(java.lang.String...)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setResourceLoader(org.springframework.core.io.ResourceLoader)", "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.setPreferFileSystemAccess(boolean)", "public void setPreferFileSystemAccess(boolean)"], ["freemarker.template.Configuration", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.createConfiguration()", "public freemarker.template.Configuration createConfiguration() throws java.io.IOException, freemarker.template.TemplateException"], ["org.springframework.ui.freemarker.SpringTemplateLoader", "org.springframework.ui.freemarker.SpringTemplateLoader(org.springframework.core.io.ResourceLoader, java.lang.String)", "public org.springframework.ui.freemarker.SpringTemplateLoader(org.springframework.core.io.ResourceLoader, java.lang.String)"], ["java.lang.Object", "org.springframework.ui.freemarker.SpringTemplateLoader.findTemplateSource(java.lang.String)", "public java.lang.Object findTemplateSource(java.lang.String) throws java.io.IOException"], ["java.io.Reader", "org.springframework.ui.freemarker.SpringTemplateLoader.getReader(java.lang.Object, java.lang.String)", "public java.io.Reader getReader(java.lang.Object, java.lang.String) throws java.io.IOException"], ["long", "org.springframework.ui.freemarker.SpringTemplateLoader.getLastModified(java.lang.Object)", "public long getLastModified(java.lang.Object)"], ["void", "org.springframework.ui.freemarker.SpringTemplateLoader.closeTemplateSource(java.lang.Object)", "public void closeTemplateSource(java.lang.Object) throws java.io.IOException"], ["org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean()", "public org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean()"], ["void", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws java.io.IOException, freemarker.template.TemplateException"], ["freemarker.template.Configuration", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean.getObject()", "public freemarker.template.Configuration getObject()"], ["java.lang.Class<? extends freemarker.template.Configuration>", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean.getObjectType()", "public java.lang.Class<? extends freemarker.template.Configuration> getObjectType()"], ["boolean", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean.isSingleton()", "public boolean isSingleton()"], ["java.lang.Object", "org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.cache.caffeine.CaffeineCache", "org.springframework.cache.caffeine.CaffeineCache(java.lang.String, com.github.benmanes.caffeine.cache.Cache<java.lang.Object, java.lang.Object>)", "public org.springframework.cache.caffeine.CaffeineCache(java.lang.String, com.github.benmanes.caffeine.cache.Cache<java.lang.Object, java.lang.Object>)"], ["org.springframework.cache.caffeine.CaffeineCache", "org.springframework.cache.caffeine.CaffeineCache(java.lang.String, com.github.benmanes.caffeine.cache.Cache<java.lang.Object, java.lang.Object>, boolean)", "public org.springframework.cache.caffeine.CaffeineCache(java.lang.String, com.github.benmanes.caffeine.cache.Cache<java.lang.Object, java.lang.Object>, boolean)"], ["java.lang.String", "org.springframework.cache.caffeine.CaffeineCache.getName()", "public final java.lang.String getName()"], ["com.github.benmanes.caffeine.cache.Cache<java.lang.Object, java.lang.Object>", "org.springframework.cache.caffeine.CaffeineCache.getNativeCache()", "public final com.github.benmanes.caffeine.cache.Cache<java.lang.Object, java.lang.Object> getNativeCache()"], ["<T> T", "org.springframework.cache.caffeine.CaffeineCache.get(java.lang.Object, java.util.concurrent.Callable<T>)", "public <T> T get(java.lang.Object, java.util.concurrent.Callable<T>)"], ["void", "org.springframework.cache.caffeine.CaffeineCache.put(java.lang.Object, java.lang.Object)", "public void put(java.lang.Object, java.lang.Object)"], ["org.springframework.cache.Cache$ValueWrapper", "org.springframework.cache.caffeine.CaffeineCache.putIfAbsent(java.lang.Object, java.lang.Object)", "public org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object)"], ["void", "org.springframework.cache.caffeine.CaffeineCache.evict(java.lang.Object)", "public void evict(java.lang.Object)"], ["boolean", "org.springframework.cache.caffeine.CaffeineCache.evictIfPresent(java.lang.Object)", "public boolean evictIfPresent(java.lang.Object)"], ["void", "org.springframework.cache.caffeine.CaffeineCache.clear()", "public void clear()"], ["boolean", "org.springframework.cache.caffeine.CaffeineCache.invalidate()", "public boolean invalidate()"], ["java.lang.Object", "org.springframework.cache.caffeine.CaffeineCache.getNativeCache()", "public java.lang.Object getNativeCache()"], ["org.springframework.cache.caffeine.CaffeineCache$PutIfAbsentFunction", "org.springframework.cache.caffeine.CaffeineCache$PutIfAbsentFunction(org.springframework.cache.caffeine.CaffeineCache, java.lang.Object)", "public org.springframework.cache.caffeine.CaffeineCache$PutIfAbsentFunction(org.springframework.cache.caffeine.CaffeineCache, java.lang.Object)"], ["java.lang.Object", "org.springframework.cache.caffeine.CaffeineCache$PutIfAbsentFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.springframework.cache.caffeine.CaffeineCacheManager", "org.springframework.cache.caffeine.CaffeineCacheManager()", "public org.springframework.cache.caffeine.CaffeineCacheManager()"], ["org.springframework.cache.caffeine.CaffeineCacheManager", "org.springframework.cache.caffeine.CaffeineCacheManager(java.lang.String...)", "public org.springframework.cache.caffeine.CaffeineCacheManager(java.lang.String...)"], ["void", "org.springframework.cache.caffeine.CaffeineCacheManager.setCacheNames(java.util.Collection<java.lang.String>)", "public void setCacheNames(java.util.Collection<java.lang.String>)"], ["void", "org.springframework.cache.caffeine.CaffeineCacheManager.setCaffeine(com.github.benmanes.caffeine.cache.Caffeine<java.lang.Object, java.lang.Object>)", "public void setCaffeine(com.github.benmanes.caffeine.cache.Caffeine<java.lang.Object, java.lang.Object>)"], ["void", "org.springframework.cache.caffeine.CaffeineCacheManager.setCaffeineSpec(com.github.benmanes.caffeine.cache.CaffeineSpec)", "public void setCaffeineSpec(com.github.benmanes.caffeine.cache.CaffeineSpec)"], ["void", "org.springframework.cache.caffeine.CaffeineCacheManager.setCacheSpecification(java.lang.String)", "public void setCacheSpecification(java.lang.String)"], ["void", "org.springframework.cache.caffeine.CaffeineCacheManager.setCacheLoader(com.github.benmanes.caffeine.cache.CacheLoader<java.lang.Object, java.lang.Object>)", "public void setCacheLoader(com.github.benmanes.caffeine.cache.CacheLoader<java.lang.Object, java.lang.Object>)"], ["void", "org.springframework.cache.caffeine.CaffeineCacheManager.setAllowNullValues(boolean)", "public void setAllowNullValues(boolean)"], ["boolean", "org.springframework.cache.caffeine.CaffeineCacheManager.isAllowNullValues()", "public boolean isAllowNullValues()"], ["java.util.Collection<java.lang.String>", "org.springframework.cache.caffeine.CaffeineCacheManager.getCacheNames()", "public java.util.Collection<java.lang.String> getCacheNames()"], ["org.springframework.cache.Cache", "org.springframework.cache.caffeine.CaffeineCacheManager.getCache(java.lang.String)", "public org.springframework.cache.Cache getCache(java.lang.String)"], ["void", "org.springframework.cache.caffeine.CaffeineCacheManager.registerCustomCache(java.lang.String, com.github.benmanes.caffeine.cache.Cache<java.lang.Object, java.lang.Object>)", "public void registerCustomCache(java.lang.String, com.github.benmanes.caffeine.cache.Cache<java.lang.Object, java.lang.Object>)"], ["org.springframework.cache.caffeine.CaffeineCache$LoadFunction", "org.springframework.cache.caffeine.CaffeineCache$LoadFunction(java.util.concurrent.Callable<?>)", "public org.springframework.cache.caffeine.CaffeineCache$LoadFunction(java.util.concurrent.Callable<?>)"], ["java.lang.Object", "org.springframework.cache.caffeine.CaffeineCache$LoadFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.springframework.cache.ehcache.EhCacheCacheManager", "org.springframework.cache.ehcache.EhCacheCacheManager()", "public org.springframework.cache.ehcache.EhCacheCacheManager()"], ["org.springframework.cache.ehcache.EhCacheCacheManager", "org.springframework.cache.ehcache.EhCacheCacheManager(net.sf.ehcache.CacheManager)", "public org.springframework.cache.ehcache.EhCacheCacheManager(net.sf.ehcache.CacheManager)"], ["void", "org.springframework.cache.ehcache.EhCacheCacheManager.setCacheManager(net.sf.ehcache.CacheManager)", "public void setCacheManager(net.sf.ehcache.CacheManager)"], ["net.sf.ehcache.CacheManager", "org.springframework.cache.ehcache.EhCacheCacheManager.getCacheManager()", "public net.sf.ehcache.CacheManager getCacheManager()"], ["void", "org.springframework.cache.ehcache.EhCacheCacheManager.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.springframework.cache.ehcache.EhCacheManagerUtils", "org.springframework.cache.ehcache.EhCacheManagerUtils()", "public org.springframework.cache.ehcache.EhCacheManagerUtils()"], ["net.sf.ehcache.CacheManager", "org.springframework.cache.ehcache.EhCacheManagerUtils.buildCacheManager()", "public static net.sf.ehcache.CacheManager buildCacheManager() throws net.sf.ehcache.CacheException"], ["net.sf.ehcache.CacheManager", "org.springframework.cache.ehcache.EhCacheManagerUtils.buildCacheManager(java.lang.String)", "public static net.sf.ehcache.CacheManager buildCacheManager(java.lang.String) throws net.sf.ehcache.CacheException"], ["net.sf.ehcache.CacheManager", "org.springframework.cache.ehcache.EhCacheManagerUtils.buildCacheManager(org.springframework.core.io.Resource)", "public static net.sf.ehcache.CacheManager buildCacheManager(org.springframework.core.io.Resource) throws net.sf.ehcache.CacheException"], ["net.sf.ehcache.CacheManager", "org.springframework.cache.ehcache.EhCacheManagerUtils.buildCacheManager(java.lang.String, org.springframework.core.io.Resource)", "public static net.sf.ehcache.CacheManager buildCacheManager(java.lang.String, org.springframework.core.io.Resource) throws net.sf.ehcache.CacheException"], ["net.sf.ehcache.config.Configuration", "org.springframework.cache.ehcache.EhCacheManagerUtils.parseConfiguration(org.springframework.core.io.Resource)", "public static net.sf.ehcache.config.Configuration parseConfiguration(org.springframework.core.io.Resource) throws net.sf.ehcache.CacheException"], ["org.springframework.cache.ehcache.EhCacheCache", "org.springframework.cache.ehcache.EhCacheCache(net.sf.ehcache.Ehcache)", "public org.springframework.cache.ehcache.EhCacheCache(net.sf.ehcache.Ehcache)"], ["java.lang.String", "org.springframework.cache.ehcache.EhCacheCache.getName()", "public final java.lang.String getName()"], ["net.sf.ehcache.Ehcache", "org.springframework.cache.ehcache.EhCacheCache.getNativeCache()", "public final net.sf.ehcache.Ehcache getNativeCache()"], ["org.springframework.cache.Cache$ValueWrapper", "org.springframework.cache.ehcache.EhCacheCache.get(java.lang.Object)", "public org.springframework.cache.Cache$ValueWrapper get(java.lang.Object)"], ["<T> T", "org.springframework.cache.ehcache.EhCacheCache.get(java.lang.Object, java.lang.Class<T>)", "public <T> T get(java.lang.Object, java.lang.Class<T>)"], ["<T> T", "org.springframework.cache.ehcache.EhCacheCache.get(java.lang.Object, java.util.concurrent.Callable<T>)", "public <T> T get(java.lang.Object, java.util.concurrent.Callable<T>)"], ["void", "org.springframework.cache.ehcache.EhCacheCache.put(java.lang.Object, java.lang.Object)", "public void put(java.lang.Object, java.lang.Object)"], ["org.springframework.cache.Cache$ValueWrapper", "org.springframework.cache.ehcache.EhCacheCache.putIfAbsent(java.lang.Object, java.lang.Object)", "public org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object)"], ["void", "org.springframework.cache.ehcache.EhCacheCache.evict(java.lang.Object)", "public void evict(java.lang.Object)"], ["boolean", "org.springframework.cache.ehcache.EhCacheCache.evictIfPresent(java.lang.Object)", "public boolean evictIfPresent(java.lang.Object)"], ["void", "org.springframework.cache.ehcache.EhCacheCache.clear()", "public void clear()"], ["boolean", "org.springframework.cache.ehcache.EhCacheCache.invalidate()", "public boolean invalidate()"], ["java.lang.Object", "org.springframework.cache.ehcache.EhCacheCache.getNativeCache()", "public java.lang.Object getNativeCache()"], ["org.springframework.cache.ehcache.EhCacheFactoryBean", "org.springframework.cache.ehcache.EhCacheFactoryBean()", "public org.springframework.cache.ehcache.EhCacheFactoryBean()"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setCacheManager(net.sf.ehcache.CacheManager)", "public void setCacheManager(net.sf.ehcache.CacheManager)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setCacheName(java.lang.String)", "public void setCacheName(java.lang.String)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setTimeToLive(int)", "public void setTimeToLive(int)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setTimeToIdle(int)", "public void setTimeToIdle(int)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setDiskSpoolBufferSize(int)", "public void setDiskSpoolBufferSize(int)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setBlocking(boolean)", "public void setBlocking(boolean)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setCacheEntryFactory(net.sf.ehcache.constructs.blocking.CacheEntryFactory)", "public void setCacheEntryFactory(net.sf.ehcache.constructs.blocking.CacheEntryFactory)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setBootstrapCacheLoader(net.sf.ehcache.bootstrap.BootstrapCacheLoader)", "public void setBootstrapCacheLoader(net.sf.ehcache.bootstrap.BootstrapCacheLoader)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setCacheEventListeners(java.util.Set<net.sf.ehcache.event.CacheEventListener>)", "public void setCacheEventListeners(java.util.Set<net.sf.ehcache.event.CacheEventListener>)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setDisabled(boolean)", "public void setDisabled(boolean)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.setBeanName(java.lang.String)", "public void setBeanName(java.lang.String)"], ["void", "org.springframework.cache.ehcache.EhCacheFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws net.sf.ehcache.CacheException"], ["net.sf.ehcache.Ehcache", "org.springframework.cache.ehcache.EhCacheFactoryBean.getObject()", "public net.sf.ehcache.Ehcache getObject()"], ["java.lang.Class<? extends net.sf.ehcache.Ehcache>", "org.springframework.cache.ehcache.EhCacheFactoryBean.getObjectType()", "public java.lang.Class<? extends net.sf.ehcache.Ehcache> getObjectType()"], ["boolean", "org.springframework.cache.ehcache.EhCacheFactoryBean.isSingleton()", "public boolean isSingleton()"], ["java.lang.Object", "org.springframework.cache.ehcache.EhCacheFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.cache.ehcache.EhCacheManagerFactoryBean", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean()", "public org.springframework.cache.ehcache.EhCacheManagerFactoryBean()"], ["void", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.setConfigLocation(org.springframework.core.io.Resource)", "public void setConfigLocation(org.springframework.core.io.Resource)"], ["void", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.setCacheManagerName(java.lang.String)", "public void setCacheManagerName(java.lang.String)"], ["void", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.setAcceptExisting(boolean)", "public void setAcceptExisting(boolean)"], ["void", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.setShared(boolean)", "public void setShared(boolean)"], ["void", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet() throws net.sf.ehcache.CacheException"], ["net.sf.ehcache.CacheManager", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.getObject()", "public net.sf.ehcache.CacheManager getObject()"], ["java.lang.Class<? extends net.sf.ehcache.CacheManager>", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.getObjectType()", "public java.lang.Class<? extends net.sf.ehcache.CacheManager> getObjectType()"], ["boolean", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.isSingleton()", "public boolean isSingleton()"], ["void", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.destroy()", "public void destroy()"], ["java.lang.Object", "org.springframework.cache.ehcache.EhCacheManagerFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.cache.transaction.TransactionAwareCacheManagerProxy", "org.springframework.cache.transaction.TransactionAwareCacheManagerProxy()", "public org.springframework.cache.transaction.TransactionAwareCacheManagerProxy()"], ["org.springframework.cache.transaction.TransactionAwareCacheManagerProxy", "org.springframework.cache.transaction.TransactionAwareCacheManagerProxy(org.springframework.cache.CacheManager)", "public org.springframework.cache.transaction.TransactionAwareCacheManagerProxy(org.springframework.cache.CacheManager)"], ["void", "org.springframework.cache.transaction.TransactionAwareCacheManagerProxy.setTargetCacheManager(org.springframework.cache.CacheManager)", "public void setTargetCacheManager(org.springframework.cache.CacheManager)"], ["void", "org.springframework.cache.transaction.TransactionAwareCacheManagerProxy.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.springframework.cache.Cache", "org.springframework.cache.transaction.TransactionAwareCacheManagerProxy.getCache(java.lang.String)", "public org.springframework.cache.Cache getCache(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.springframework.cache.transaction.TransactionAwareCacheManagerProxy.getCacheNames()", "public java.util.Collection<java.lang.String> getCacheNames()"], ["org.springframework.cache.transaction.TransactionAwareCacheDecorator", "org.springframework.cache.transaction.TransactionAwareCacheDecorator(org.springframework.cache.Cache)", "public org.springframework.cache.transaction.TransactionAwareCacheDecorator(org.springframework.cache.Cache)"], ["org.springframework.cache.Cache", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.getTargetCache()", "public org.springframework.cache.Cache getTargetCache()"], ["java.lang.String", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.getName()", "public java.lang.String getName()"], ["java.lang.Object", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.getNativeCache()", "public java.lang.Object getNativeCache()"], ["org.springframework.cache.Cache$ValueWrapper", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.get(java.lang.Object)", "public org.springframework.cache.Cache$ValueWrapper get(java.lang.Object)"], ["<T> T", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.get(java.lang.Object, java.lang.Class<T>)", "public <T> T get(java.lang.Object, java.lang.Class<T>)"], ["<T> T", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.get(java.lang.Object, java.util.concurrent.Callable<T>)", "public <T> T get(java.lang.Object, java.util.concurrent.Callable<T>)"], ["void", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.put(java.lang.Object, java.lang.Object)", "public void put(java.lang.Object, java.lang.Object)"], ["org.springframework.cache.Cache$ValueWrapper", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.putIfAbsent(java.lang.Object, java.lang.Object)", "public org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object)"], ["void", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.evict(java.lang.Object)", "public void evict(java.lang.Object)"], ["boolean", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.evictIfPresent(java.lang.Object)", "public boolean evictIfPresent(java.lang.Object)"], ["void", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.clear()", "public void clear()"], ["boolean", "org.springframework.cache.transaction.TransactionAwareCacheDecorator.invalidate()", "public boolean invalidate()"], ["void", "org.springframework.cache.transaction.TransactionAwareCacheDecorator$2.afterCommit()", "public void afterCommit()"], ["void", "org.springframework.cache.transaction.TransactionAwareCacheDecorator$1.afterCommit()", "public void afterCommit()"], ["void", "org.springframework.cache.transaction.TransactionAwareCacheDecorator$3.afterCommit()", "public void afterCommit()"], ["org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager", "org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager()", "public org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager()"], ["void", "org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager.setTransactionAware(boolean)", "public void setTransactionAware(boolean)"], ["boolean", "org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager.isTransactionAware()", "public boolean isTransactionAware()"], ["T", "org.springframework.cache.jcache.JCacheCache$ValueLoaderEntryProcessor.process(javax.cache.processor.MutableEntry<java.lang.Object, java.lang.Object>, java.lang.Object...)", "public T process(javax.cache.processor.MutableEntry<java.lang.Object, java.lang.Object>, java.lang.Object...) throws javax.cache.processor.EntryProcessorException"], ["org.springframework.cache.jcache.JCacheCacheManager", "org.springframework.cache.jcache.JCacheCacheManager()", "public org.springframework.cache.jcache.JCacheCacheManager()"], ["org.springframework.cache.jcache.JCacheCacheManager", "org.springframework.cache.jcache.JCacheCacheManager(javax.cache.CacheManager)", "public org.springframework.cache.jcache.JCacheCacheManager(javax.cache.CacheManager)"], ["void", "org.springframework.cache.jcache.JCacheCacheManager.setCacheManager(javax.cache.CacheManager)", "public void setCacheManager(javax.cache.CacheManager)"], ["javax.cache.CacheManager", "org.springframework.cache.jcache.JCacheCacheManager.getCacheManager()", "public javax.cache.CacheManager getCacheManager()"], ["void", "org.springframework.cache.jcache.JCacheCacheManager.setAllowNullValues(boolean)", "public void setAllowNullValues(boolean)"], ["boolean", "org.springframework.cache.jcache.JCacheCacheManager.isAllowNullValues()", "public boolean isAllowNullValues()"], ["void", "org.springframework.cache.jcache.JCacheCacheManager.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.springframework.cache.jcache.config.AbstractJCacheConfiguration", "org.springframework.cache.jcache.config.AbstractJCacheConfiguration()", "public org.springframework.cache.jcache.config.AbstractJCacheConfiguration()"], ["org.springframework.cache.jcache.interceptor.JCacheOperationSource", "org.springframework.cache.jcache.config.AbstractJCacheConfiguration.cacheOperationSource()", "public org.springframework.cache.jcache.interceptor.JCacheOperationSource cacheOperationSource()"], ["org.springframework.cache.jcache.config.ProxyJCacheConfiguration", "org.springframework.cache.jcache.config.ProxyJCacheConfiguration()", "public org.springframework.cache.jcache.config.ProxyJCacheConfiguration()"], ["org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor", "org.springframework.cache.jcache.config.ProxyJCacheConfiguration.cacheAdvisor(org.springframework.cache.jcache.interceptor.JCacheOperationSource, org.springframework.cache.jcache.interceptor.JCacheInterceptor)", "public org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor cacheAdvisor(org.springframework.cache.jcache.interceptor.JCacheOperationSource, org.springframework.cache.jcache.interceptor.JCacheInterceptor)"], ["org.springframework.cache.jcache.interceptor.JCacheInterceptor", "org.springframework.cache.jcache.config.ProxyJCacheConfiguration.cacheInterceptor(org.springframework.cache.jcache.interceptor.JCacheOperationSource)", "public org.springframework.cache.jcache.interceptor.JCacheInterceptor cacheInterceptor(org.springframework.cache.jcache.interceptor.JCacheOperationSource)"], ["org.springframework.cache.jcache.config.JCacheConfigurerSupport", "org.springframework.cache.jcache.config.JCacheConfigurerSupport()", "public org.springframework.cache.jcache.config.JCacheConfigurerSupport()"], ["org.springframework.cache.interceptor.CacheResolver", "org.springframework.cache.jcache.config.JCacheConfigurerSupport.exceptionCacheResolver()", "public org.springframework.cache.interceptor.CacheResolver exceptionCacheResolver()"], ["default", "org.springframework.cache.jcache.config.JCacheConfigurer.org.springframework.cache.interceptor.CacheResolver exceptionCacheResolver()", "public default org.springframework.cache.interceptor.CacheResolver exceptionCacheResolver()"], ["org.springframework.cache.jcache.interceptor.JCacheInterceptor", "org.springframework.cache.jcache.interceptor.JCacheInterceptor()", "public org.springframework.cache.jcache.interceptor.JCacheInterceptor()"], ["org.springframework.cache.jcache.interceptor.JCacheInterceptor", "org.springframework.cache.jcache.interceptor.JCacheInterceptor(java.util.function.Supplier<org.springframework.cache.interceptor.CacheErrorHandler>)", "public org.springframework.cache.jcache.interceptor.JCacheInterceptor(java.util.function.Supplier<org.springframework.cache.interceptor.CacheErrorHandler>)"], ["java.lang.Object", "org.springframework.cache.jcache.interceptor.JCacheInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.cache.jcache.interceptor.JCacheAspectSupport$CacheOperationInvokerAdapter", "org.springframework.cache.jcache.interceptor.JCacheAspectSupport$CacheOperationInvokerAdapter(org.springframework.cache.jcache.interceptor.JCacheAspectSupport, org.springframework.cache.interceptor.CacheOperationInvoker)", "public org.springframework.cache.jcache.interceptor.JCacheAspectSupport$CacheOperationInvokerAdapter(org.springframework.cache.jcache.interceptor.JCacheAspectSupport, org.springframework.cache.interceptor.CacheOperationInvoker)"], ["java.lang.Object", "org.springframework.cache.jcache.interceptor.JCacheAspectSupport$CacheOperationInvokerAdapter.invoke()", "public java.lang.Object invoke() throws org.springframework.cache.interceptor.CacheOperationInvoker$ThrowableWrapper"], ["org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheInvocationParameterImpl", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheInvocationParameterImpl(org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheParameterDetail, java.lang.Object)", "public org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheInvocationParameterImpl(org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheParameterDetail, java.lang.Object)"], ["java.lang.Class<?>", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheInvocationParameterImpl.getRawType()", "public java.lang.Class<?> getRawType()"], ["java.lang.Object", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheInvocationParameterImpl.getValue()", "public java.lang.Object getValue()"], ["java.util.Set<java.lang.annotation.Annotation>", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheInvocationParameterImpl.getAnnotations()", "public java.util.Set<java.lang.annotation.Annotation> getAnnotations()"], ["int", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheInvocationParameterImpl.getParameterPosition()", "public int getParameterPosition()"], ["org.springframework.cache.interceptor.KeyGenerator", "org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation.getKeyGenerator()", "public org.springframework.cache.interceptor.KeyGenerator getKeyGenerator()"], ["javax.cache.annotation.CacheInvocationParameter[]", "org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation.getKeyParameters(java.lang.Object...)", "public javax.cache.annotation.CacheInvocationParameter[] getKeyParameters(java.lang.Object...)"], ["org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails", "org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails(java.lang.reflect.Method, A, java.lang.String)", "public org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails(java.lang.reflect.Method, A, java.lang.String)"], ["java.lang.reflect.Method", "org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails.getMethod()", "public java.lang.reflect.Method getMethod()"], ["java.util.Set<java.lang.annotation.Annotation>", "org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails.getAnnotations()", "public java.util.Set<java.lang.annotation.Annotation> getAnnotations()"], ["A", "org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails.getCacheAnnotation()", "public A getCacheAnnotation()"], ["java.lang.String", "org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails.getCacheName()", "public java.lang.String getCacheName()"], ["java.lang.String", "org.springframework.cache.jcache.interceptor.DefaultCacheMethodDetails.toString()", "public java.lang.String toString()"], ["org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor", "org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor()", "public org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor()"], ["void", "org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor.setCacheOperationSource(org.springframework.cache.jcache.interceptor.JCacheOperationSource)", "public void setCacheOperationSource(org.springframework.cache.jcache.interceptor.JCacheOperationSource)"], ["void", "org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor.setClassFilter(org.springframework.aop.ClassFilter)", "public void setClassFilter(org.springframework.aop.ClassFilter)"], ["org.springframework.aop.Pointcut", "org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["org.springframework.cache.jcache.interceptor.SimpleExceptionCacheResolver", "org.springframework.cache.jcache.interceptor.SimpleExceptionCacheResolver(org.springframework.cache.CacheManager)", "public org.springframework.cache.jcache.interceptor.SimpleExceptionCacheResolver(org.springframework.cache.CacheManager)"], ["org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource()", "public org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource()"], ["org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource(java.util.function.Supplier<org.springframework.cache.CacheManager>, java.util.function.Supplier<org.springframework.cache.interceptor.CacheResolver>, java.util.function.Supplier<org.springframework.cache.interceptor.CacheResolver>, java.util.function.Supplier<org.springframework.cache.interceptor.KeyGenerator>)", "public org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource(java.util.function.Supplier<org.springframework.cache.CacheManager>, java.util.function.Supplier<org.springframework.cache.interceptor.CacheResolver>, java.util.function.Supplier<org.springframework.cache.interceptor.CacheResolver>, java.util.function.Supplier<org.springframework.cache.interceptor.KeyGenerator>)"], ["void", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.setCacheManager(org.springframework.cache.CacheManager)", "public void setCacheManager(org.springframework.cache.CacheManager)"], ["org.springframework.cache.CacheManager", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.getCacheManager()", "public org.springframework.cache.CacheManager getCacheManager()"], ["void", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.setCacheResolver(org.springframework.cache.interceptor.CacheResolver)", "public void setCacheResolver(org.springframework.cache.interceptor.CacheResolver)"], ["org.springframework.cache.interceptor.CacheResolver", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.getCacheResolver()", "public org.springframework.cache.interceptor.CacheResolver getCacheResolver()"], ["void", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.setExceptionCacheResolver(org.springframework.cache.interceptor.CacheResolver)", "public void setExceptionCacheResolver(org.springframework.cache.interceptor.CacheResolver)"], ["org.springframework.cache.interceptor.CacheResolver", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.getExceptionCacheResolver()", "public org.springframework.cache.interceptor.CacheResolver getExceptionCacheResolver()"], ["void", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.setKeyGenerator(org.springframework.cache.interceptor.KeyGenerator)", "public void setKeyGenerator(org.springframework.cache.interceptor.KeyGenerator)"], ["org.springframework.cache.interceptor.KeyGenerator", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.getKeyGenerator()", "public org.springframework.cache.interceptor.KeyGenerator getKeyGenerator()"], ["void", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["void", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource.afterSingletonsInstantiated()", "public void afterSingletonsInstantiated()"], ["org.springframework.cache.jcache.interceptor.CacheRemoveOperation", "org.springframework.cache.jcache.interceptor.CacheRemoveOperation(javax.cache.annotation.CacheMethodDetails<javax.cache.annotation.CacheRemove>, org.springframework.cache.interceptor.CacheResolver, org.springframework.cache.interceptor.KeyGenerator)", "public org.springframework.cache.jcache.interceptor.CacheRemoveOperation(javax.cache.annotation.CacheMethodDetails<javax.cache.annotation.CacheRemove>, org.springframework.cache.interceptor.CacheResolver, org.springframework.cache.interceptor.KeyGenerator)"], ["org.springframework.util.ExceptionTypeFilter", "org.springframework.cache.jcache.interceptor.CacheRemoveOperation.getExceptionTypeFilter()", "public org.springframework.util.ExceptionTypeFilter getExceptionTypeFilter()"], ["boolean", "org.springframework.cache.jcache.interceptor.CacheRemoveOperation.isEarlyRemove()", "public boolean isEarlyRemove()"], ["org.springframework.cache.jcache.interceptor.AnnotationJCacheOperationSource", "org.springframework.cache.jcache.interceptor.AnnotationJCacheOperationSource()", "public org.springframework.cache.jcache.interceptor.AnnotationJCacheOperationSource()"], ["org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation", "org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation(javax.cache.annotation.CacheMethodDetails<javax.cache.annotation.CacheRemoveAll>, org.springframework.cache.interceptor.CacheResolver)", "public org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation(javax.cache.annotation.CacheMethodDetails<javax.cache.annotation.CacheRemoveAll>, org.springframework.cache.interceptor.CacheResolver)"], ["org.springframework.util.ExceptionTypeFilter", "org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation.getExceptionTypeFilter()", "public org.springframework.util.ExceptionTypeFilter getExceptionTypeFilter()"], ["boolean", "org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation.isEarlyRemove()", "public boolean isEarlyRemove()"], ["org.springframework.cache.jcache.interceptor.CacheResolverAdapter", "org.springframework.cache.jcache.interceptor.CacheResolverAdapter(javax.cache.annotation.CacheResolver)", "public org.springframework.cache.jcache.interceptor.CacheResolverAdapter(javax.cache.annotation.CacheResolver)"], ["java.util.Collection<? extends org.springframework.cache.Cache>", "org.springframework.cache.jcache.interceptor.CacheResolverAdapter.resolveCaches(org.springframework.cache.interceptor.CacheOperationInvocationContext<?>)", "public java.util.Collection<? extends org.springframework.cache.Cache> resolveCaches(org.springframework.cache.interceptor.CacheOperationInvocationContext<?>)"], ["org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter", "org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter(org.springframework.cache.jcache.interceptor.JCacheOperationSource, org.springframework.cache.interceptor.KeyGenerator)", "public org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter(org.springframework.cache.jcache.interceptor.JCacheOperationSource, org.springframework.cache.interceptor.KeyGenerator)"], ["org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter", "org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter(org.springframework.cache.jcache.interceptor.JCacheOperationSource, javax.cache.annotation.CacheKeyGenerator)", "public org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter(org.springframework.cache.jcache.interceptor.JCacheOperationSource, javax.cache.annotation.CacheKeyGenerator)"], ["java.lang.Object", "org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter.getTarget()", "public java.lang.Object getTarget()"], ["java.lang.Object", "org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter.generate(java.lang.Object, java.lang.reflect.Method, java.lang.Object...)", "public java.lang.Object generate(java.lang.Object, java.lang.reflect.Method, java.lang.Object...)"], ["org.springframework.cache.jcache.interceptor.JCacheAspectSupport", "org.springframework.cache.jcache.interceptor.JCacheAspectSupport()", "public org.springframework.cache.jcache.interceptor.JCacheAspectSupport()"], ["void", "org.springframework.cache.jcache.interceptor.JCacheAspectSupport.setCacheOperationSource(org.springframework.cache.jcache.interceptor.JCacheOperationSource)", "public void setCacheOperationSource(org.springframework.cache.jcache.interceptor.JCacheOperationSource)"], ["org.springframework.cache.jcache.interceptor.JCacheOperationSource", "org.springframework.cache.jcache.interceptor.JCacheAspectSupport.getCacheOperationSource()", "public org.springframework.cache.jcache.interceptor.JCacheOperationSource getCacheOperationSource()"], ["void", "org.springframework.cache.jcache.interceptor.JCacheAspectSupport.afterPropertiesSet()", "public void afterPropertiesSet()"], ["org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheParameterDetail", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheParameterDetail(java.lang.reflect.Method, int)", "public org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheParameterDetail(java.lang.reflect.Method, int)"], ["int", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheParameterDetail.getParameterPosition()", "public int getParameterPosition()"], ["javax.cache.annotation.CacheInvocationParameter", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation$CacheParameterDetail.toCacheInvocationParameter(java.lang.Object)", "public javax.cache.annotation.CacheInvocationParameter toCacheInvocationParameter(java.lang.Object)"], ["java.util.Collection<? extends org.springframework.cache.Cache>", "org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource$LazyCacheResolver.resolveCaches(org.springframework.cache.interceptor.CacheOperationInvocationContext<?>)", "public java.util.Collection<? extends org.springframework.cache.Cache> resolveCaches(org.springframework.cache.interceptor.CacheOperationInvocationContext<?>)"], ["org.springframework.cache.jcache.interceptor.CacheResultInterceptor", "org.springframework.cache.jcache.interceptor.CacheResultInterceptor(org.springframework.cache.interceptor.CacheErrorHandler)", "public org.springframework.cache.jcache.interceptor.CacheResultInterceptor(org.springframework.cache.interceptor.CacheErrorHandler)"], ["org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext(org.springframework.cache.jcache.interceptor.JCacheOperation<A>, java.lang.Object, java.lang.Object[])", "public org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext(org.springframework.cache.jcache.interceptor.JCacheOperation<A>, java.lang.Object, java.lang.Object[])"], ["org.springframework.cache.jcache.interceptor.JCacheOperation<A>", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getOperation()", "public org.springframework.cache.jcache.interceptor.JCacheOperation<A> getOperation()"], ["java.lang.reflect.Method", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getMethod()", "public java.lang.reflect.Method getMethod()"], ["java.lang.Object[]", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getArgs()", "public java.lang.Object[] getArgs()"], ["java.util.Set<java.lang.annotation.Annotation>", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getAnnotations()", "public java.util.Set<java.lang.annotation.Annotation> getAnnotations()"], ["A", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getCacheAnnotation()", "public A getCacheAnnotation()"], ["java.lang.String", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getCacheName()", "public java.lang.String getCacheName()"], ["java.lang.Object", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getTarget()", "public java.lang.Object getTarget()"], ["javax.cache.annotation.CacheInvocationParameter[]", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getAllParameters()", "public javax.cache.annotation.CacheInvocationParameter[] getAllParameters()"], ["<T> T", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.unwrap(java.lang.Class<T>)", "public <T> T unwrap(java.lang.Class<T>)"], ["java.lang.String", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.toString()", "public java.lang.String toString()"], ["org.springframework.cache.interceptor.BasicOperation", "org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext.getOperation()", "public org.springframework.cache.interceptor.BasicOperation getOperation()"], ["org.springframework.cache.jcache.interceptor.CachePutOperation", "org.springframework.cache.jcache.interceptor.CachePutOperation(javax.cache.annotation.CacheMethodDetails<javax.cache.annotation.CachePut>, org.springframework.cache.interceptor.CacheResolver, org.springframework.cache.interceptor.KeyGenerator)", "public org.springframework.cache.jcache.interceptor.CachePutOperation(javax.cache.annotation.CacheMethodDetails<javax.cache.annotation.CachePut>, org.springframework.cache.interceptor.CacheResolver, org.springframework.cache.interceptor.KeyGenerator)"], ["org.springframework.util.ExceptionTypeFilter", "org.springframework.cache.jcache.interceptor.CachePutOperation.getExceptionTypeFilter()", "public org.springframework.util.ExceptionTypeFilter getExceptionTypeFilter()"], ["boolean", "org.springframework.cache.jcache.interceptor.CachePutOperation.isEarlyPut()", "public boolean isEarlyPut()"], ["javax.cache.annotation.CacheInvocationParameter", "org.springframework.cache.jcache.interceptor.CachePutOperation.getValueParameter(java.lang.Object...)", "public javax.cache.annotation.CacheInvocationParameter getValueParameter(java.lang.Object...)"], ["org.springframework.cache.jcache.interceptor.JCacheOperationSourcePointcut", "org.springframework.cache.jcache.interceptor.JCacheOperationSourcePointcut()", "public org.springframework.cache.jcache.interceptor.JCacheOperationSourcePointcut()"], ["boolean", "org.springframework.cache.jcache.interceptor.JCacheOperationSourcePointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.cache.jcache.interceptor.JCacheOperationSourcePointcut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.cache.jcache.interceptor.JCacheOperationSourcePointcut.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.cache.jcache.interceptor.JCacheOperationSourcePointcut.toString()", "public java.lang.String toString()"], ["org.springframework.cache.jcache.interceptor.DefaultCacheKeyInvocationContext", "org.springframework.cache.jcache.interceptor.DefaultCacheKeyInvocationContext(org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation<A>, java.lang.Object, java.lang.Object[])", "public org.springframework.cache.jcache.interceptor.DefaultCacheKeyInvocationContext(org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation<A>, java.lang.Object, java.lang.Object[])"], ["javax.cache.annotation.CacheInvocationParameter[]", "org.springframework.cache.jcache.interceptor.DefaultCacheKeyInvocationContext.getKeyParameters()", "public javax.cache.annotation.CacheInvocationParameter[] getKeyParameters()"], ["javax.cache.annotation.CacheInvocationParameter", "org.springframework.cache.jcache.interceptor.DefaultCacheKeyInvocationContext.getValueParameter()", "public javax.cache.annotation.CacheInvocationParameter getValueParameter()"], ["org.springframework.cache.jcache.interceptor.AbstractFallbackJCacheOperationSource", "org.springframework.cache.jcache.interceptor.AbstractFallbackJCacheOperationSource()", "public org.springframework.cache.jcache.interceptor.AbstractFallbackJCacheOperationSource()"], ["org.springframework.cache.jcache.interceptor.JCacheOperation<?>", "org.springframework.cache.jcache.interceptor.AbstractFallbackJCacheOperationSource.getCacheOperation(java.lang.reflect.Method, java.lang.Class<?>)", "public org.springframework.cache.jcache.interceptor.JCacheOperation<?> getCacheOperation(java.lang.reflect.Method, java.lang.Class<?>)"], ["java.lang.reflect.Method", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.getMethod()", "public java.lang.reflect.Method getMethod()"], ["java.util.Set<java.lang.annotation.Annotation>", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.getAnnotations()", "public java.util.Set<java.lang.annotation.Annotation> getAnnotations()"], ["A", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.getCacheAnnotation()", "public A getCacheAnnotation()"], ["java.lang.String", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.getCacheName()", "public java.lang.String getCacheName()"], ["java.util.Set<java.lang.String>", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.getCacheNames()", "public java.util.Set<java.lang.String> getCacheNames()"], ["org.springframework.cache.interceptor.CacheResolver", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.getCacheResolver()", "public org.springframework.cache.interceptor.CacheResolver getCacheResolver()"], ["javax.cache.annotation.CacheInvocationParameter[]", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.getAllParameters(java.lang.Object...)", "public javax.cache.annotation.CacheInvocationParameter[] getAllParameters(java.lang.Object...)"], ["java.lang.String", "org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.toString()", "public java.lang.String toString()"], ["org.springframework.cache.jcache.interceptor.CacheResultOperation", "org.springframework.cache.jcache.interceptor.CacheResultOperation(javax.cache.annotation.CacheMethodDetails<javax.cache.annotation.CacheResult>, org.springframework.cache.interceptor.CacheResolver, org.springframework.cache.interceptor.KeyGenerator, org.springframework.cache.interceptor.CacheResolver)", "public org.springframework.cache.jcache.interceptor.CacheResultOperation(javax.cache.annotation.CacheMethodDetails<javax.cache.annotation.CacheResult>, org.springframework.cache.interceptor.CacheResolver, org.springframework.cache.interceptor.KeyGenerator, org.springframework.cache.interceptor.CacheResolver)"], ["org.springframework.util.ExceptionTypeFilter", "org.springframework.cache.jcache.interceptor.CacheResultOperation.getExceptionTypeFilter()", "public org.springframework.util.ExceptionTypeFilter getExceptionTypeFilter()"], ["boolean", "org.springframework.cache.jcache.interceptor.CacheResultOperation.isAlwaysInvoked()", "public boolean isAlwaysInvoked()"], ["org.springframework.cache.interceptor.CacheResolver", "org.springframework.cache.jcache.interceptor.CacheResultOperation.getExceptionCacheResolver()", "public org.springframework.cache.interceptor.CacheResolver getExceptionCacheResolver()"], ["java.lang.String", "org.springframework.cache.jcache.interceptor.CacheResultOperation.getExceptionCacheName()", "public java.lang.String getExceptionCacheName()"], ["org.springframework.cache.jcache.interceptor.CachePutInterceptor", "org.springframework.cache.jcache.interceptor.CachePutInterceptor(org.springframework.cache.interceptor.CacheErrorHandler)", "public org.springframework.cache.jcache.interceptor.CachePutInterceptor(org.springframework.cache.interceptor.CacheErrorHandler)"], ["org.springframework.cache.jcache.JCacheManagerFactoryBean", "org.springframework.cache.jcache.JCacheManagerFactoryBean()", "public org.springframework.cache.jcache.JCacheManagerFactoryBean()"], ["void", "org.springframework.cache.jcache.JCacheManagerFactoryBean.setCacheManagerUri(java.net.URI)", "public void setCacheManagerUri(java.net.URI)"], ["void", "org.springframework.cache.jcache.JCacheManagerFactoryBean.setCacheManagerProperties(java.util.Properties)", "public void setCacheManagerProperties(java.util.Properties)"], ["void", "org.springframework.cache.jcache.JCacheManagerFactoryBean.setBeanClassLoader(java.lang.ClassLoader)", "public void setBeanClassLoader(java.lang.ClassLoader)"], ["void", "org.springframework.cache.jcache.JCacheManagerFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet()"], ["javax.cache.CacheManager", "org.springframework.cache.jcache.JCacheManagerFactoryBean.getObject()", "public javax.cache.CacheManager getObject()"], ["java.lang.Class<?>", "org.springframework.cache.jcache.JCacheManagerFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.cache.jcache.JCacheManagerFactoryBean.isSingleton()", "public boolean isSingleton()"], ["void", "org.springframework.cache.jcache.JCacheManagerFactoryBean.destroy()", "public void destroy()"], ["java.lang.Object", "org.springframework.cache.jcache.JCacheManagerFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.cache.jcache.JCacheCache", "org.springframework.cache.jcache.JCacheCache(javax.cache.Cache<java.lang.Object, java.lang.Object>)", "public org.springframework.cache.jcache.JCacheCache(javax.cache.Cache<java.lang.Object, java.lang.Object>)"], ["org.springframework.cache.jcache.JCacheCache", "org.springframework.cache.jcache.JCacheCache(javax.cache.Cache<java.lang.Object, java.lang.Object>, boolean)", "public org.springframework.cache.jcache.JCacheCache(javax.cache.Cache<java.lang.Object, java.lang.Object>, boolean)"], ["java.lang.String", "org.springframework.cache.jcache.JCacheCache.getName()", "public final java.lang.String getName()"], ["javax.cache.Cache<java.lang.Object, java.lang.Object>", "org.springframework.cache.jcache.JCacheCache.getNativeCache()", "public final javax.cache.Cache<java.lang.Object, java.lang.Object> getNativeCache()"], ["<T> T", "org.springframework.cache.jcache.JCacheCache.get(java.lang.Object, java.util.concurrent.Callable<T>)", "public <T> T get(java.lang.Object, java.util.concurrent.Callable<T>)"], ["void", "org.springframework.cache.jcache.JCacheCache.put(java.lang.Object, java.lang.Object)", "public void put(java.lang.Object, java.lang.Object)"], ["org.springframework.cache.Cache$ValueWrapper", "org.springframework.cache.jcache.JCacheCache.putIfAbsent(java.lang.Object, java.lang.Object)", "public org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object)"], ["void", "org.springframework.cache.jcache.JCacheCache.evict(java.lang.Object)", "public void evict(java.lang.Object)"], ["boolean", "org.springframework.cache.jcache.JCacheCache.evictIfPresent(java.lang.Object)", "public boolean evictIfPresent(java.lang.Object)"], ["void", "org.springframework.cache.jcache.JCacheCache.clear()", "public void clear()"], ["boolean", "org.springframework.cache.jcache.JCacheCache.invalidate()", "public boolean invalidate()"], ["java.lang.Object", "org.springframework.cache.jcache.JCacheCache.getNativeCache()", "public java.lang.Object getNativeCache()"]]}