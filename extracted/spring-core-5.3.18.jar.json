{
    "spring-core-5.3.18.jar": [
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.AnnotationVisitor(int)",
            "public org.springframework.asm.AnnotationVisitor(int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.AnnotationVisitor(int, org.springframework.asm.AnnotationVisitor)",
            "public org.springframework.asm.AnnotationVisitor(int, org.springframework.asm.AnnotationVisitor)"
        ],
        [
            "void",
            "org.springframework.asm.AnnotationVisitor.visit(java.lang.String, java.lang.Object)",
            "public void visit(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.asm.AnnotationVisitor.visitEnum(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitEnum(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.AnnotationVisitor.visitAnnotation(java.lang.String, java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.AnnotationVisitor.visitArray(java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.AnnotationVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "void",
            "org.springframework.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)",
            "public void visit(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitEnum(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.AnnotationWriter.visitArray(java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.AnnotationWriter.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "boolean",
            "org.springframework.asm.Attribute.isUnknown()",
            "public boolean isUnknown()"
        ],
        [
            "boolean",
            "org.springframework.asm.Attribute.isCodeAttribute()",
            "public boolean isCodeAttribute()"
        ],
        [
            "org.springframework.asm.ByteVector",
            "org.springframework.asm.ByteVector()",
            "public org.springframework.asm.ByteVector()"
        ],
        [
            "org.springframework.asm.ByteVector",
            "org.springframework.asm.ByteVector(int)",
            "public org.springframework.asm.ByteVector(int)"
        ],
        [
            "org.springframework.asm.ByteVector",
            "org.springframework.asm.ByteVector.putByte(int)",
            "public org.springframework.asm.ByteVector putByte(int)"
        ],
        [
            "org.springframework.asm.ByteVector",
            "org.springframework.asm.ByteVector.putShort(int)",
            "public org.springframework.asm.ByteVector putShort(int)"
        ],
        [
            "org.springframework.asm.ByteVector",
            "org.springframework.asm.ByteVector.putInt(int)",
            "public org.springframework.asm.ByteVector putInt(int)"
        ],
        [
            "org.springframework.asm.ByteVector",
            "org.springframework.asm.ByteVector.putLong(long)",
            "public org.springframework.asm.ByteVector putLong(long)"
        ],
        [
            "org.springframework.asm.ByteVector",
            "org.springframework.asm.ByteVector.putUTF8(java.lang.String)",
            "public org.springframework.asm.ByteVector putUTF8(java.lang.String)"
        ],
        [
            "org.springframework.asm.ByteVector",
            "org.springframework.asm.ByteVector.putByteArray(byte[], int, int)",
            "public org.springframework.asm.ByteVector putByteArray(byte[], int, int)"
        ],
        [
            "org.springframework.asm.ClassReader",
            "org.springframework.asm.ClassReader(byte[])",
            "public org.springframework.asm.ClassReader(byte[])"
        ],
        [
            "org.springframework.asm.ClassReader",
            "org.springframework.asm.ClassReader(byte[], int, int)",
            "public org.springframework.asm.ClassReader(byte[], int, int)"
        ],
        [
            "org.springframework.asm.ClassReader",
            "org.springframework.asm.ClassReader(java.io.InputStream)",
            "public org.springframework.asm.ClassReader(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "org.springframework.asm.ClassReader",
            "org.springframework.asm.ClassReader(java.lang.String)",
            "public org.springframework.asm.ClassReader(java.lang.String) throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.asm.ClassReader.getAccess()",
            "public int getAccess()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ClassReader.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ClassReader.getSuperName()",
            "public java.lang.String getSuperName()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.asm.ClassReader.getInterfaces()",
            "public java.lang.String[] getInterfaces()"
        ],
        [
            "void",
            "org.springframework.asm.ClassReader.accept(org.springframework.asm.ClassVisitor, int)",
            "public void accept(org.springframework.asm.ClassVisitor, int)"
        ],
        [
            "void",
            "org.springframework.asm.ClassReader.accept(org.springframework.asm.ClassVisitor, org.springframework.asm.Attribute[], int)",
            "public void accept(org.springframework.asm.ClassVisitor, org.springframework.asm.Attribute[], int)"
        ],
        [
            "int",
            "org.springframework.asm.ClassReader.getItemCount()",
            "public int getItemCount()"
        ],
        [
            "int",
            "org.springframework.asm.ClassReader.getItem(int)",
            "public int getItem(int)"
        ],
        [
            "int",
            "org.springframework.asm.ClassReader.getMaxStringLength()",
            "public int getMaxStringLength()"
        ],
        [
            "int",
            "org.springframework.asm.ClassReader.readByte(int)",
            "public int readByte(int)"
        ],
        [
            "int",
            "org.springframework.asm.ClassReader.readUnsignedShort(int)",
            "public int readUnsignedShort(int)"
        ],
        [
            "short",
            "org.springframework.asm.ClassReader.readShort(int)",
            "public short readShort(int)"
        ],
        [
            "int",
            "org.springframework.asm.ClassReader.readInt(int)",
            "public int readInt(int)"
        ],
        [
            "long",
            "org.springframework.asm.ClassReader.readLong(int)",
            "public long readLong(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ClassReader.readUTF8(int, char[])",
            "public java.lang.String readUTF8(int, char[])"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ClassReader.readClass(int, char[])",
            "public java.lang.String readClass(int, char[])"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ClassReader.readModule(int, char[])",
            "public java.lang.String readModule(int, char[])"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ClassReader.readPackage(int, char[])",
            "public java.lang.String readPackage(int, char[])"
        ],
        [
            "java.lang.Object",
            "org.springframework.asm.ClassReader.readConst(int, char[])",
            "public java.lang.Object readConst(int, char[])"
        ],
        [
            "org.springframework.asm.ClassTooLargeException",
            "org.springframework.asm.ClassTooLargeException(java.lang.String, int)",
            "public org.springframework.asm.ClassTooLargeException(java.lang.String, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ClassTooLargeException.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "int",
            "org.springframework.asm.ClassTooLargeException.getConstantPoolCount()",
            "public int getConstantPoolCount()"
        ],
        [
            "org.springframework.asm.ClassVisitor",
            "org.springframework.asm.ClassVisitor(int)",
            "public org.springframework.asm.ClassVisitor(int)"
        ],
        [
            "org.springframework.asm.ClassVisitor",
            "org.springframework.asm.ClassVisitor(int, org.springframework.asm.ClassVisitor)",
            "public org.springframework.asm.ClassVisitor(int, org.springframework.asm.ClassVisitor)"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visitSource(java.lang.String, java.lang.String)",
            "public void visitSource(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.ModuleVisitor",
            "org.springframework.asm.ClassVisitor.visitModule(java.lang.String, int, java.lang.String)",
            "public org.springframework.asm.ModuleVisitor visitModule(java.lang.String, int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visitNestHost(java.lang.String)",
            "public void visitNestHost(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.ClassVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.ClassVisitor.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visitNestMember(java.lang.String)",
            "public void visitNestMember(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visitPermittedSubclass(java.lang.String)",
            "public void visitPermittedSubclass(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)",
            "public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)"
        ],
        [
            "org.springframework.asm.RecordComponentVisitor",
            "org.springframework.asm.ClassVisitor.visitRecordComponent(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.asm.RecordComponentVisitor visitRecordComponent(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.asm.ClassVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
            "public org.springframework.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.asm.ClassVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.asm.ClassVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.ClassWriter",
            "org.springframework.asm.ClassWriter(int)",
            "public org.springframework.asm.ClassWriter(int)"
        ],
        [
            "org.springframework.asm.ClassWriter",
            "org.springframework.asm.ClassWriter(org.springframework.asm.ClassReader, int)",
            "public org.springframework.asm.ClassWriter(org.springframework.asm.ClassReader, int)"
        ],
        [
            "boolean",
            "org.springframework.asm.ClassWriter.hasFlags(int)",
            "public boolean hasFlags(int)"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public final void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)",
            "public final void visitSource(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.ModuleVisitor",
            "org.springframework.asm.ClassWriter.visitModule(java.lang.String, int, java.lang.String)",
            "public final org.springframework.asm.ModuleVisitor visitModule(java.lang.String, int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visitNestHost(java.lang.String)",
            "public final void visitNestHost(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)",
            "public final void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)",
            "public final org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.ClassWriter.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public final org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visitAttribute(org.springframework.asm.Attribute)",
            "public final void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visitNestMember(java.lang.String)",
            "public final void visitNestMember(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visitPermittedSubclass(java.lang.String)",
            "public final void visitPermittedSubclass(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)",
            "public final void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)"
        ],
        [
            "org.springframework.asm.RecordComponentVisitor",
            "org.springframework.asm.ClassWriter.visitRecordComponent(java.lang.String, java.lang.String, java.lang.String)",
            "public final org.springframework.asm.RecordComponentVisitor visitRecordComponent(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.asm.ClassWriter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
            "public final org.springframework.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public final org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.asm.ClassWriter.visitEnd()",
            "public final void visitEnd()"
        ],
        [
            "byte[]",
            "org.springframework.asm.ClassWriter.toByteArray()",
            "public byte[] toByteArray()"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newConst(java.lang.Object)",
            "public int newConst(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newUTF8(java.lang.String)",
            "public int newUTF8(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newClass(java.lang.String)",
            "public int newClass(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newMethodType(java.lang.String)",
            "public int newMethodType(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newModule(java.lang.String)",
            "public int newModule(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newPackage(java.lang.String)",
            "public int newPackage(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newHandle(int, java.lang.String, java.lang.String, java.lang.String)",
            "public int newHandle(int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newHandle(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public int newHandle(int, java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newConstantDynamic(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)",
            "public int newConstantDynamic(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newInvokeDynamic(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)",
            "public int newInvokeDynamic(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newField(java.lang.String, java.lang.String, java.lang.String)",
            "public int newField(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newMethod(java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public int newMethod(java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "int",
            "org.springframework.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)",
            "public int newNameType(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.ConstantDynamic",
            "org.springframework.asm.ConstantDynamic(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)",
            "public org.springframework.asm.ConstantDynamic(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ConstantDynamic.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ConstantDynamic.getDescriptor()",
            "public java.lang.String getDescriptor()"
        ],
        [
            "org.springframework.asm.Handle",
            "org.springframework.asm.ConstantDynamic.getBootstrapMethod()",
            "public org.springframework.asm.Handle getBootstrapMethod()"
        ],
        [
            "int",
            "org.springframework.asm.ConstantDynamic.getBootstrapMethodArgumentCount()",
            "public int getBootstrapMethodArgumentCount()"
        ],
        [
            "java.lang.Object",
            "org.springframework.asm.ConstantDynamic.getBootstrapMethodArgument(int)",
            "public java.lang.Object getBootstrapMethodArgument(int)"
        ],
        [
            "int",
            "org.springframework.asm.ConstantDynamic.getSize()",
            "public int getSize()"
        ],
        [
            "boolean",
            "org.springframework.asm.ConstantDynamic.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.asm.ConstantDynamic.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.ConstantDynamic.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.asm.FieldVisitor(int)",
            "public org.springframework.asm.FieldVisitor(int)"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.asm.FieldVisitor(int, org.springframework.asm.FieldVisitor)",
            "public org.springframework.asm.FieldVisitor(int, org.springframework.asm.FieldVisitor)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.FieldVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.FieldVisitor.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.FieldVisitor.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.asm.FieldVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.FieldWriter.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.FieldWriter.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.asm.FieldWriter.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.Handle",
            "org.springframework.asm.Handle(int, java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.asm.Handle(int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.Handle",
            "org.springframework.asm.Handle(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public org.springframework.asm.Handle(int, java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "int",
            "org.springframework.asm.Handle.getTag()",
            "public int getTag()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Handle.getOwner()",
            "public java.lang.String getOwner()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Handle.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Handle.getDesc()",
            "public java.lang.String getDesc()"
        ],
        [
            "boolean",
            "org.springframework.asm.Handle.isInterface()",
            "public boolean isInterface()"
        ],
        [
            "boolean",
            "org.springframework.asm.Handle.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.asm.Handle.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Handle.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.asm.Label",
            "org.springframework.asm.Label()",
            "public org.springframework.asm.Label()"
        ],
        [
            "int",
            "org.springframework.asm.Label.getOffset()",
            "public int getOffset()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Label.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.asm.MethodTooLargeException",
            "org.springframework.asm.MethodTooLargeException(java.lang.String, java.lang.String, java.lang.String, int)",
            "public org.springframework.asm.MethodTooLargeException(java.lang.String, java.lang.String, java.lang.String, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.MethodTooLargeException.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.MethodTooLargeException.getMethodName()",
            "public java.lang.String getMethodName()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.MethodTooLargeException.getDescriptor()",
            "public java.lang.String getDescriptor()"
        ],
        [
            "int",
            "org.springframework.asm.MethodTooLargeException.getCodeSize()",
            "public int getCodeSize()"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.asm.MethodVisitor(int)",
            "public org.springframework.asm.MethodVisitor(int)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.asm.MethodVisitor(int, org.springframework.asm.MethodVisitor)",
            "public org.springframework.asm.MethodVisitor(int, org.springframework.asm.MethodVisitor)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitParameter(java.lang.String, int)",
            "public void visitParameter(java.lang.String, int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodVisitor.visitAnnotationDefault()",
            "public org.springframework.asm.AnnotationVisitor visitAnnotationDefault()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodVisitor.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitAnnotableParameterCount(int, boolean)",
            "public void visitAnnotableParameterCount(int, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodVisitor.visitParameterAnnotation(int, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitParameterAnnotation(int, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitCode()",
            "public void visitCode()"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])",
            "public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitInsn(int)",
            "public void visitInsn(int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitIntInsn(int, int)",
            "public void visitIntInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitVarInsn(int, int)",
            "public void visitVarInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)",
            "public void visitTypeInsn(int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)",
            "public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)",
            "public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)",
            "public void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitJumpInsn(int, org.springframework.asm.Label)",
            "public void visitJumpInsn(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitLabel(org.springframework.asm.Label)",
            "public void visitLabel(org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitLdcInsn(java.lang.Object)",
            "public void visitLdcInsn(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitIincInsn(int, int)",
            "public void visitIincInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitTableSwitchInsn(int, int, org.springframework.asm.Label, org.springframework.asm.Label...)",
            "public void visitTableSwitchInsn(int, int, org.springframework.asm.Label, org.springframework.asm.Label...)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitLookupSwitchInsn(org.springframework.asm.Label, int[], org.springframework.asm.Label[])",
            "public void visitLookupSwitchInsn(org.springframework.asm.Label, int[], org.springframework.asm.Label[])"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitMultiANewArrayInsn(java.lang.String, int)",
            "public void visitMultiANewArrayInsn(java.lang.String, int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodVisitor.visitInsnAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitInsnAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitTryCatchBlock(org.springframework.asm.Label, org.springframework.asm.Label, org.springframework.asm.Label, java.lang.String)",
            "public void visitTryCatchBlock(org.springframework.asm.Label, org.springframework.asm.Label, org.springframework.asm.Label, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodVisitor.visitTryCatchAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTryCatchAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)",
            "public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodVisitor.visitLocalVariableAnnotation(int, org.springframework.asm.TypePath, org.springframework.asm.Label[], org.springframework.asm.Label[], int[], java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitLocalVariableAnnotation(int, org.springframework.asm.TypePath, org.springframework.asm.Label[], org.springframework.asm.Label[], int[], java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitLineNumber(int, org.springframework.asm.Label)",
            "public void visitLineNumber(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitMaxs(int, int)",
            "public void visitMaxs(int, int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitParameter(java.lang.String, int)",
            "public void visitParameter(java.lang.String, int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodWriter.visitAnnotationDefault()",
            "public org.springframework.asm.AnnotationVisitor visitAnnotationDefault()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodWriter.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitAnnotableParameterCount(int, boolean)",
            "public void visitAnnotableParameterCount(int, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitParameterAnnotation(int, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitCode()",
            "public void visitCode()"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])",
            "public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitInsn(int)",
            "public void visitInsn(int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitIntInsn(int, int)",
            "public void visitIntInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitVarInsn(int, int)",
            "public void visitVarInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitTypeInsn(int, java.lang.String)",
            "public void visitTypeInsn(int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)",
            "public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)",
            "public void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitJumpInsn(int, org.springframework.asm.Label)",
            "public void visitJumpInsn(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitLabel(org.springframework.asm.Label)",
            "public void visitLabel(org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitLdcInsn(java.lang.Object)",
            "public void visitLdcInsn(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitIincInsn(int, int)",
            "public void visitIincInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitTableSwitchInsn(int, int, org.springframework.asm.Label, org.springframework.asm.Label...)",
            "public void visitTableSwitchInsn(int, int, org.springframework.asm.Label, org.springframework.asm.Label...)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitLookupSwitchInsn(org.springframework.asm.Label, int[], org.springframework.asm.Label[])",
            "public void visitLookupSwitchInsn(org.springframework.asm.Label, int[], org.springframework.asm.Label[])"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)",
            "public void visitMultiANewArrayInsn(java.lang.String, int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodWriter.visitInsnAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitInsnAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitTryCatchBlock(org.springframework.asm.Label, org.springframework.asm.Label, org.springframework.asm.Label, java.lang.String)",
            "public void visitTryCatchBlock(org.springframework.asm.Label, org.springframework.asm.Label, org.springframework.asm.Label, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodWriter.visitTryCatchAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTryCatchAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)",
            "public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.MethodWriter.visitLocalVariableAnnotation(int, org.springframework.asm.TypePath, org.springframework.asm.Label[], org.springframework.asm.Label[], int[], java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitLocalVariableAnnotation(int, org.springframework.asm.TypePath, org.springframework.asm.Label[], org.springframework.asm.Label[], int[], java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitLineNumber(int, org.springframework.asm.Label)",
            "public void visitLineNumber(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitMaxs(int, int)",
            "public void visitMaxs(int, int)"
        ],
        [
            "void",
            "org.springframework.asm.MethodWriter.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.ModuleVisitor",
            "org.springframework.asm.ModuleVisitor(int)",
            "public org.springframework.asm.ModuleVisitor(int)"
        ],
        [
            "org.springframework.asm.ModuleVisitor",
            "org.springframework.asm.ModuleVisitor(int, org.springframework.asm.ModuleVisitor)",
            "public org.springframework.asm.ModuleVisitor(int, org.springframework.asm.ModuleVisitor)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleVisitor.visitMainClass(java.lang.String)",
            "public void visitMainClass(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleVisitor.visitPackage(java.lang.String)",
            "public void visitPackage(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleVisitor.visitRequire(java.lang.String, int, java.lang.String)",
            "public void visitRequire(java.lang.String, int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleVisitor.visitExport(java.lang.String, int, java.lang.String...)",
            "public void visitExport(java.lang.String, int, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleVisitor.visitOpen(java.lang.String, int, java.lang.String...)",
            "public void visitOpen(java.lang.String, int, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleVisitor.visitUse(java.lang.String)",
            "public void visitUse(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleVisitor.visitProvide(java.lang.String, java.lang.String...)",
            "public void visitProvide(java.lang.String, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "void",
            "org.springframework.asm.ModuleWriter.visitMainClass(java.lang.String)",
            "public void visitMainClass(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleWriter.visitPackage(java.lang.String)",
            "public void visitPackage(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleWriter.visitRequire(java.lang.String, int, java.lang.String)",
            "public void visitRequire(java.lang.String, int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleWriter.visitExport(java.lang.String, int, java.lang.String...)",
            "public void visitExport(java.lang.String, int, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleWriter.visitOpen(java.lang.String, int, java.lang.String...)",
            "public void visitOpen(java.lang.String, int, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleWriter.visitUse(java.lang.String)",
            "public void visitUse(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleWriter.visitProvide(java.lang.String, java.lang.String...)",
            "public void visitProvide(java.lang.String, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.asm.ModuleWriter.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.RecordComponentVisitor",
            "org.springframework.asm.RecordComponentVisitor(int)",
            "public org.springframework.asm.RecordComponentVisitor(int)"
        ],
        [
            "org.springframework.asm.RecordComponentVisitor",
            "org.springframework.asm.RecordComponentVisitor(int, org.springframework.asm.RecordComponentVisitor)",
            "public org.springframework.asm.RecordComponentVisitor(int, org.springframework.asm.RecordComponentVisitor)"
        ],
        [
            "org.springframework.asm.RecordComponentVisitor",
            "org.springframework.asm.RecordComponentVisitor.getDelegate()",
            "public org.springframework.asm.RecordComponentVisitor getDelegate()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.RecordComponentVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.RecordComponentVisitor.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.RecordComponentVisitor.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.asm.RecordComponentVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.RecordComponentWriter.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.asm.RecordComponentWriter.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.asm.RecordComponentWriter.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.asm.RecordComponentWriter.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.SpringAsmInfo",
            "org.springframework.asm.SpringAsmInfo()",
            "public org.springframework.asm.SpringAsmInfo()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getType(java.lang.String)",
            "public static org.springframework.asm.Type getType(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getType(java.lang.Class<?>)",
            "public static org.springframework.asm.Type getType(java.lang.Class<?>)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getType(java.lang.reflect.Constructor<?>)",
            "public static org.springframework.asm.Type getType(java.lang.reflect.Constructor<?>)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getType(java.lang.reflect.Method)",
            "public static org.springframework.asm.Type getType(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getElementType()",
            "public org.springframework.asm.Type getElementType()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getObjectType(java.lang.String)",
            "public static org.springframework.asm.Type getObjectType(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getMethodType(java.lang.String)",
            "public static org.springframework.asm.Type getMethodType(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getMethodType(org.springframework.asm.Type, org.springframework.asm.Type...)",
            "public static org.springframework.asm.Type getMethodType(org.springframework.asm.Type, org.springframework.asm.Type...)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.asm.Type.getArgumentTypes()",
            "public org.springframework.asm.Type[] getArgumentTypes()"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.asm.Type.getArgumentTypes(java.lang.String)",
            "public static org.springframework.asm.Type[] getArgumentTypes(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.asm.Type.getArgumentTypes(java.lang.reflect.Method)",
            "public static org.springframework.asm.Type[] getArgumentTypes(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getReturnType()",
            "public org.springframework.asm.Type getReturnType()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getReturnType(java.lang.String)",
            "public static org.springframework.asm.Type getReturnType(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.asm.Type.getReturnType(java.lang.reflect.Method)",
            "public static org.springframework.asm.Type getReturnType(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.getInternalName()",
            "public java.lang.String getInternalName()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.getInternalName(java.lang.Class<?>)",
            "public static java.lang.String getInternalName(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.getDescriptor()",
            "public java.lang.String getDescriptor()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.getDescriptor(java.lang.Class<?>)",
            "public static java.lang.String getDescriptor(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor<?>)",
            "public static java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.getMethodDescriptor(org.springframework.asm.Type, org.springframework.asm.Type...)",
            "public static java.lang.String getMethodDescriptor(org.springframework.asm.Type, org.springframework.asm.Type...)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.getMethodDescriptor(java.lang.reflect.Method)",
            "public static java.lang.String getMethodDescriptor(java.lang.reflect.Method)"
        ],
        [
            "int",
            "org.springframework.asm.Type.getSort()",
            "public int getSort()"
        ],
        [
            "int",
            "org.springframework.asm.Type.getDimensions()",
            "public int getDimensions()"
        ],
        [
            "int",
            "org.springframework.asm.Type.getSize()",
            "public int getSize()"
        ],
        [
            "int",
            "org.springframework.asm.Type.getArgumentsAndReturnSizes()",
            "public int getArgumentsAndReturnSizes()"
        ],
        [
            "int",
            "org.springframework.asm.Type.getArgumentsAndReturnSizes(java.lang.String)",
            "public static int getArgumentsAndReturnSizes(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.asm.Type.getOpcode(int)",
            "public int getOpcode(int)"
        ],
        [
            "boolean",
            "org.springframework.asm.Type.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.asm.Type.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.Type.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.asm.TypePath.getLength()",
            "public int getLength()"
        ],
        [
            "int",
            "org.springframework.asm.TypePath.getStep(int)",
            "public int getStep(int)"
        ],
        [
            "int",
            "org.springframework.asm.TypePath.getStepArgument(int)",
            "public int getStepArgument(int)"
        ],
        [
            "org.springframework.asm.TypePath",
            "org.springframework.asm.TypePath.fromString(java.lang.String)",
            "public static org.springframework.asm.TypePath fromString(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.asm.TypePath.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference(int)",
            "public org.springframework.asm.TypeReference(int)"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference.newTypeReference(int)",
            "public static org.springframework.asm.TypeReference newTypeReference(int)"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference.newTypeParameterReference(int, int)",
            "public static org.springframework.asm.TypeReference newTypeParameterReference(int, int)"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference.newTypeParameterBoundReference(int, int, int)",
            "public static org.springframework.asm.TypeReference newTypeParameterBoundReference(int, int, int)"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference.newSuperTypeReference(int)",
            "public static org.springframework.asm.TypeReference newSuperTypeReference(int)"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference.newFormalParameterReference(int)",
            "public static org.springframework.asm.TypeReference newFormalParameterReference(int)"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference.newExceptionReference(int)",
            "public static org.springframework.asm.TypeReference newExceptionReference(int)"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference.newTryCatchReference(int)",
            "public static org.springframework.asm.TypeReference newTryCatchReference(int)"
        ],
        [
            "org.springframework.asm.TypeReference",
            "org.springframework.asm.TypeReference.newTypeArgumentReference(int, int)",
            "public static org.springframework.asm.TypeReference newTypeArgumentReference(int, int)"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getSort()",
            "public int getSort()"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getTypeParameterIndex()",
            "public int getTypeParameterIndex()"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getTypeParameterBoundIndex()",
            "public int getTypeParameterBoundIndex()"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getSuperTypeIndex()",
            "public int getSuperTypeIndex()"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getFormalParameterIndex()",
            "public int getFormalParameterIndex()"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getExceptionIndex()",
            "public int getExceptionIndex()"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getTryCatchBlockIndex()",
            "public int getTryCatchBlockIndex()"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getTypeArgumentIndex()",
            "public int getTypeArgumentIndex()"
        ],
        [
            "int",
            "org.springframework.asm.TypeReference.getValue()",
            "public int getValue()"
        ],
        [
            "org.springframework.cglib.SpringCglibInfo",
            "org.springframework.cglib.SpringCglibInfo()",
            "public org.springframework.cglib.SpringCglibInfo()"
        ],
        [
            "org.springframework.cglib.beans.BeanMap$Generator",
            "org.springframework.cglib.beans.BeanMap$Generator()",
            "public org.springframework.cglib.beans.BeanMap$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMap$Generator.setBean(java.lang.Object)",
            "public void setBean(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMap$Generator.setBeanClass(java.lang.Class)",
            "public void setBeanClass(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMap$Generator.setRequire(int)",
            "public void setRequire(int)"
        ],
        [
            "org.springframework.cglib.beans.BeanMap",
            "org.springframework.cglib.beans.BeanMap$Generator.create()",
            "public org.springframework.cglib.beans.BeanMap create()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMap$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "org.springframework.cglib.beans.BeanMap",
            "org.springframework.cglib.beans.BeanMap.create(java.lang.Object)",
            "public static org.springframework.cglib.beans.BeanMap create(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.beans.BeanMap.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.beans.BeanMap.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMap.setBean(java.lang.Object)",
            "public void setBean(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.beans.BeanMap.getBean()",
            "public java.lang.Object getBean()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMap.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.cglib.beans.BeanMap.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.cglib.beans.BeanMap.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.beans.BeanMap.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.cglib.beans.BeanMap.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.beans.BeanMap.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMap.putAll(java.util.Map)",
            "public void putAll(java.util.Map)"
        ],
        [
            "boolean",
            "org.springframework.cglib.beans.BeanMap.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.beans.BeanMap.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.util.Set",
            "org.springframework.cglib.beans.BeanMap.entrySet()",
            "public java.util.Set entrySet()"
        ],
        [
            "java.util.Collection",
            "org.springframework.cglib.beans.BeanMap.values()",
            "public java.util.Collection values()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.beans.BeanMap.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$1.evaluate(java.lang.Object)",
            "public boolean evaluate(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$2.apply(org.springframework.cglib.core.AbstractClassGenerator)",
            "public java.lang.Object apply(org.springframework.cglib.core.AbstractClassGenerator)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$2.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(org.springframework.cglib.core.AbstractClassGenerator)",
            "public java.lang.Object apply(org.springframework.cglib.core.AbstractClassGenerator)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData(java.lang.ClassLoader)",
            "public org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData(java.lang.ClassLoader)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "void",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.reserveName(java.lang.String)",
            "public void reserveName(java.lang.String)"
        ],
        [
            "org.springframework.cglib.core.Predicate",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.getUniqueNamePredicate()",
            "public org.springframework.cglib.core.Predicate getUniqueNamePredicate()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(org.springframework.cglib.core.AbstractClassGenerator, boolean)",
            "public java.lang.Object get(org.springframework.cglib.core.AbstractClassGenerator, boolean)"
        ],
        [
            "org.springframework.cglib.core.AbstractClassGenerator$Source",
            "org.springframework.cglib.core.AbstractClassGenerator$Source(java.lang.String)",
            "public org.springframework.cglib.core.AbstractClassGenerator$Source(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.core.AbstractClassGenerator.setClassLoader(java.lang.ClassLoader)",
            "public void setClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.cglib.core.AbstractClassGenerator.setContextClass(java.lang.Class)",
            "public void setContextClass(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.core.AbstractClassGenerator.setNamingPolicy(org.springframework.cglib.core.NamingPolicy)",
            "public void setNamingPolicy(org.springframework.cglib.core.NamingPolicy)"
        ],
        [
            "org.springframework.cglib.core.NamingPolicy",
            "org.springframework.cglib.core.AbstractClassGenerator.getNamingPolicy()",
            "public org.springframework.cglib.core.NamingPolicy getNamingPolicy()"
        ],
        [
            "void",
            "org.springframework.cglib.core.AbstractClassGenerator.setUseCache(boolean)",
            "public void setUseCache(boolean)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.AbstractClassGenerator.getUseCache()",
            "public boolean getUseCache()"
        ],
        [
            "void",
            "org.springframework.cglib.core.AbstractClassGenerator.setAttemptLoad(boolean)",
            "public void setAttemptLoad(boolean)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.AbstractClassGenerator.getAttemptLoad()",
            "public boolean getAttemptLoad()"
        ],
        [
            "void",
            "org.springframework.cglib.core.AbstractClassGenerator.setStrategy(org.springframework.cglib.core.GeneratorStrategy)",
            "public void setStrategy(org.springframework.cglib.core.GeneratorStrategy)"
        ],
        [
            "org.springframework.cglib.core.GeneratorStrategy",
            "org.springframework.cglib.core.AbstractClassGenerator.getStrategy()",
            "public org.springframework.cglib.core.GeneratorStrategy getStrategy()"
        ],
        [
            "org.springframework.cglib.core.AbstractClassGenerator",
            "org.springframework.cglib.core.AbstractClassGenerator.getCurrent()",
            "public static org.springframework.cglib.core.AbstractClassGenerator getCurrent()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.cglib.core.AbstractClassGenerator.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "org.springframework.cglib.core.ClassLoaderAwareGeneratorStrategy",
            "org.springframework.cglib.core.ClassLoaderAwareGeneratorStrategy(java.lang.ClassLoader)",
            "public org.springframework.cglib.core.ClassLoaderAwareGeneratorStrategy(java.lang.ClassLoader)"
        ],
        [
            "byte[]",
            "org.springframework.cglib.core.ClassLoaderAwareGeneratorStrategy.generate(org.springframework.cglib.core.ClassGenerator)",
            "public byte[] generate(org.springframework.cglib.core.ClassGenerator) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$1.customize(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type)",
            "public void customize(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$2.customize(org.springframework.cglib.core.CodeEmitter, int, org.springframework.asm.Type)",
            "public void customize(org.springframework.cglib.core.CodeEmitter, int, org.springframework.asm.Type)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.KeyFactory$2.getOutType(int, org.springframework.asm.Type)",
            "public org.springframework.asm.Type getOutType(int, org.springframework.asm.Type)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.KeyFactory$3.customize(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type)",
            "public boolean customize(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$4.customize(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type)",
            "public void customize(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type)"
        ],
        [
            "org.springframework.cglib.core.KeyFactory$Generator",
            "org.springframework.cglib.core.KeyFactory$Generator()",
            "public org.springframework.cglib.core.KeyFactory$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$Generator.setCustomizer(org.springframework.cglib.core.Customizer)",
            "public void setCustomizer(org.springframework.cglib.core.Customizer)"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$Generator.addCustomizer(org.springframework.cglib.core.KeyFactoryCustomizer)",
            "public void addCustomizer(org.springframework.cglib.core.KeyFactoryCustomizer)"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.cglib.core.KeyFactory$Generator.getCustomizers(java.lang.Class<T>)",
            "public <T> java.util.List<T> getCustomizers(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$Generator.setInterface(java.lang.Class)",
            "public void setInterface(java.lang.Class)"
        ],
        [
            "org.springframework.cglib.core.KeyFactory",
            "org.springframework.cglib.core.KeyFactory$Generator.create()",
            "public org.springframework.cglib.core.KeyFactory create()"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$Generator.setHashConstant(int)",
            "public void setHashConstant(int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$Generator.setHashMultiplier(int)",
            "public void setHashMultiplier(int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.KeyFactory$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.core.KeyFactory",
            "org.springframework.cglib.core.KeyFactory.create(java.lang.Class)",
            "public static org.springframework.cglib.core.KeyFactory create(java.lang.Class)"
        ],
        [
            "org.springframework.cglib.core.KeyFactory",
            "org.springframework.cglib.core.KeyFactory.create(java.lang.Class, org.springframework.cglib.core.Customizer)",
            "public static org.springframework.cglib.core.KeyFactory create(java.lang.Class, org.springframework.cglib.core.Customizer)"
        ],
        [
            "org.springframework.cglib.core.KeyFactory",
            "org.springframework.cglib.core.KeyFactory.create(java.lang.Class, org.springframework.cglib.core.KeyFactoryCustomizer, java.util.List<org.springframework.cglib.core.KeyFactoryCustomizer>)",
            "public static org.springframework.cglib.core.KeyFactory create(java.lang.Class, org.springframework.cglib.core.KeyFactoryCustomizer, java.util.List<org.springframework.cglib.core.KeyFactoryCustomizer>)"
        ],
        [
            "org.springframework.cglib.core.KeyFactory",
            "org.springframework.cglib.core.KeyFactory.create(java.lang.ClassLoader, java.lang.Class, org.springframework.cglib.core.Customizer)",
            "public static org.springframework.cglib.core.KeyFactory create(java.lang.ClassLoader, java.lang.Class, org.springframework.cglib.core.Customizer)"
        ],
        [
            "org.springframework.cglib.core.KeyFactory",
            "org.springframework.cglib.core.KeyFactory.create(java.lang.ClassLoader, java.lang.Class, org.springframework.cglib.core.KeyFactoryCustomizer, java.util.List<org.springframework.cglib.core.KeyFactoryCustomizer>)",
            "public static org.springframework.cglib.core.KeyFactory create(java.lang.ClassLoader, java.lang.Class, org.springframework.cglib.core.KeyFactoryCustomizer, java.util.List<org.springframework.cglib.core.KeyFactoryCustomizer>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ReflectUtils$1.run()",
            "public java.lang.Object run() throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ReflectUtils$2.run()",
            "public java.lang.Object run() throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ReflectUtils$3.run()",
            "public java.lang.Object run() throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ReflectUtils$4.run()",
            "public java.lang.Object run()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ReflectUtils$5.run()",
            "public java.lang.Object run()"
        ],
        [
            "org.springframework.cglib.core.ClassInfo",
            "org.springframework.cglib.core.ReflectUtils$6.getClassInfo()",
            "public org.springframework.cglib.core.ClassInfo getClassInfo()"
        ],
        [
            "int",
            "org.springframework.cglib.core.ReflectUtils$6.getModifiers()",
            "public int getModifiers()"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.ReflectUtils$6.getSignature()",
            "public org.springframework.cglib.core.Signature getSignature()"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.ReflectUtils$6.getExceptionTypes()",
            "public org.springframework.asm.Type[] getExceptionTypes()"
        ],
        [
            "org.springframework.asm.Attribute",
            "org.springframework.cglib.core.ReflectUtils$6.getAttribute()",
            "public org.springframework.asm.Attribute getAttribute()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.ReflectUtils$7.getType()",
            "public org.springframework.asm.Type getType()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.ReflectUtils$7.getSuperType()",
            "public org.springframework.asm.Type getSuperType()"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.ReflectUtils$7.getInterfaces()",
            "public org.springframework.asm.Type[] getInterfaces()"
        ],
        [
            "int",
            "org.springframework.cglib.core.ReflectUtils$7.getModifiers()",
            "public int getModifiers()"
        ],
        [
            "java.security.ProtectionDomain",
            "org.springframework.cglib.core.ReflectUtils.getProtectionDomain(java.lang.Class)",
            "public static java.security.ProtectionDomain getProtectionDomain(java.lang.Class)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.ReflectUtils.getExceptionTypes(java.lang.reflect.Member)",
            "public static org.springframework.asm.Type[] getExceptionTypes(java.lang.reflect.Member)"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.ReflectUtils.getSignature(java.lang.reflect.Member)",
            "public static org.springframework.cglib.core.Signature getSignature(java.lang.reflect.Member)"
        ],
        [
            "java.lang.reflect.Constructor",
            "org.springframework.cglib.core.ReflectUtils.findConstructor(java.lang.String)",
            "public static java.lang.reflect.Constructor findConstructor(java.lang.String)"
        ],
        [
            "java.lang.reflect.Constructor",
            "org.springframework.cglib.core.ReflectUtils.findConstructor(java.lang.String, java.lang.ClassLoader)",
            "public static java.lang.reflect.Constructor findConstructor(java.lang.String, java.lang.ClassLoader)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.cglib.core.ReflectUtils.findMethod(java.lang.String)",
            "public static java.lang.reflect.Method findMethod(java.lang.String)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.cglib.core.ReflectUtils.findMethod(java.lang.String, java.lang.ClassLoader)",
            "public static java.lang.reflect.Method findMethod(java.lang.String, java.lang.ClassLoader)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ReflectUtils.newInstance(java.lang.Class)",
            "public static java.lang.Object newInstance(java.lang.Class)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ReflectUtils.newInstance(java.lang.Class, java.lang.Class[], java.lang.Object[])",
            "public static java.lang.Object newInstance(java.lang.Class, java.lang.Class[], java.lang.Object[])"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ReflectUtils.newInstance(java.lang.reflect.Constructor, java.lang.Object[])",
            "public static java.lang.Object newInstance(java.lang.reflect.Constructor, java.lang.Object[])"
        ],
        [
            "java.lang.reflect.Constructor",
            "org.springframework.cglib.core.ReflectUtils.getConstructor(java.lang.Class, java.lang.Class[])",
            "public static java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.cglib.core.ReflectUtils.getNames(java.lang.Class[])",
            "public static java.lang.String[] getNames(java.lang.Class[])"
        ],
        [
            "java.lang.Class[]",
            "org.springframework.cglib.core.ReflectUtils.getClasses(java.lang.Object[])",
            "public static java.lang.Class[] getClasses(java.lang.Object[])"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.cglib.core.ReflectUtils.findNewInstance(java.lang.Class)",
            "public static java.lang.reflect.Method findNewInstance(java.lang.Class)"
        ],
        [
            "java.lang.reflect.Method[]",
            "org.springframework.cglib.core.ReflectUtils.getPropertyMethods(java.beans.PropertyDescriptor[], boolean, boolean)",
            "public static java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[], boolean, boolean)"
        ],
        [
            "java.beans.PropertyDescriptor[]",
            "org.springframework.cglib.core.ReflectUtils.getBeanProperties(java.lang.Class)",
            "public static java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)"
        ],
        [
            "java.beans.PropertyDescriptor[]",
            "org.springframework.cglib.core.ReflectUtils.getBeanGetters(java.lang.Class)",
            "public static java.beans.PropertyDescriptor[] getBeanGetters(java.lang.Class)"
        ],
        [
            "java.beans.PropertyDescriptor[]",
            "org.springframework.cglib.core.ReflectUtils.getBeanSetters(java.lang.Class)",
            "public static java.beans.PropertyDescriptor[] getBeanSetters(java.lang.Class)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.cglib.core.ReflectUtils.findDeclaredMethod(java.lang.Class, java.lang.String, java.lang.Class[])",
            "public static java.lang.reflect.Method findDeclaredMethod(java.lang.Class, java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException"
        ],
        [
            "java.util.List",
            "org.springframework.cglib.core.ReflectUtils.addAllMethods(java.lang.Class, java.util.List)",
            "public static java.util.List addAllMethods(java.lang.Class, java.util.List)"
        ],
        [
            "java.util.List",
            "org.springframework.cglib.core.ReflectUtils.addAllInterfaces(java.lang.Class, java.util.List)",
            "public static java.util.List addAllInterfaces(java.lang.Class, java.util.List)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.cglib.core.ReflectUtils.findInterfaceMethod(java.lang.Class)",
            "public static java.lang.reflect.Method findInterfaceMethod(java.lang.Class)"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.core.ReflectUtils.defineClass(java.lang.String, byte[], java.lang.ClassLoader)",
            "public static java.lang.Class defineClass(java.lang.String, byte[], java.lang.ClassLoader) throws java.lang.Exception"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.core.ReflectUtils.defineClass(java.lang.String, byte[], java.lang.ClassLoader, java.security.ProtectionDomain)",
            "public static java.lang.Class defineClass(java.lang.String, byte[], java.lang.ClassLoader, java.security.ProtectionDomain) throws java.lang.Exception"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.core.ReflectUtils.defineClass(java.lang.String, byte[], java.lang.ClassLoader, java.security.ProtectionDomain, java.lang.Class<?>)",
            "public static java.lang.Class defineClass(java.lang.String, byte[], java.lang.ClassLoader, java.security.ProtectionDomain, java.lang.Class<?>) throws java.lang.Exception"
        ],
        [
            "int",
            "org.springframework.cglib.core.ReflectUtils.findPackageProtected(java.lang.Class[])",
            "public static int findPackageProtected(java.lang.Class[])"
        ],
        [
            "org.springframework.cglib.core.MethodInfo",
            "org.springframework.cglib.core.ReflectUtils.getMethodInfo(java.lang.reflect.Member, int)",
            "public static org.springframework.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member, int)"
        ],
        [
            "org.springframework.cglib.core.MethodInfo",
            "org.springframework.cglib.core.ReflectUtils.getMethodInfo(java.lang.reflect.Member)",
            "public static org.springframework.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)"
        ],
        [
            "org.springframework.cglib.core.ClassInfo",
            "org.springframework.cglib.core.ReflectUtils.getClassInfo(java.lang.Class)",
            "public static org.springframework.cglib.core.ClassInfo getClassInfo(java.lang.Class)"
        ],
        [
            "java.lang.reflect.Method[]",
            "org.springframework.cglib.core.ReflectUtils.findMethods(java.lang.String[], java.lang.reflect.Method[])",
            "public static java.lang.reflect.Method[] findMethods(java.lang.String[], java.lang.reflect.Method[])"
        ],
        [
            "org.springframework.cglib.core.SpringNamingPolicy",
            "org.springframework.cglib.core.SpringNamingPolicy()",
            "public org.springframework.cglib.core.SpringNamingPolicy()"
        ],
        [
            "int",
            "org.springframework.cglib.proxy.Enhancer$1.accept(java.lang.reflect.Method)",
            "public int accept(java.lang.reflect.Method)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.Enhancer$2.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer$3.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer$3.processDefault()",
            "public void processDefault()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer$4.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer$4.processDefault()",
            "public void processDefault()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer$5.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer$5.processDefault()",
            "public void processDefault()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.cglib.proxy.Enhancer$6.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "int",
            "org.springframework.cglib.proxy.Enhancer$6.getOriginalModifiers(org.springframework.cglib.core.MethodInfo)",
            "public int getOriginalModifiers(org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "int",
            "org.springframework.cglib.proxy.Enhancer$6.getIndex(org.springframework.cglib.core.MethodInfo)",
            "public int getIndex(org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer$6.emitCallback(org.springframework.cglib.core.CodeEmitter, int)",
            "public void emitCallback(org.springframework.cglib.core.CodeEmitter, int)"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.proxy.Enhancer$6.getImplSignature(org.springframework.cglib.core.MethodInfo)",
            "public org.springframework.cglib.core.Signature getImplSignature(org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer$6.emitLoadArgsAndInvoke(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.core.MethodInfo)",
            "public void emitLoadArgsAndInvoke(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.proxy.Enhancer$6.beginMethod(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.core.MethodInfo)",
            "public org.springframework.cglib.core.CodeEmitter beginMethod(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "org.springframework.cglib.proxy.Enhancer$EnhancerFactoryData",
            "org.springframework.cglib.proxy.Enhancer$EnhancerFactoryData(java.lang.Class, java.lang.Class[], boolean)",
            "public org.springframework.cglib.proxy.Enhancer$EnhancerFactoryData(java.lang.Class, java.lang.Class[], boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.Enhancer$EnhancerFactoryData.newInstance(java.lang.Class[], java.lang.Object[], org.springframework.cglib.proxy.Callback[])",
            "public java.lang.Object newInstance(java.lang.Class[], java.lang.Object[], org.springframework.cglib.proxy.Callback[])"
        ],
        [
            "org.springframework.cglib.proxy.Enhancer",
            "org.springframework.cglib.proxy.Enhancer()",
            "public org.springframework.cglib.proxy.Enhancer()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setSuperclass(java.lang.Class)",
            "public void setSuperclass(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setInterfaces(java.lang.Class[])",
            "public void setInterfaces(java.lang.Class[])"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setCallbackFilter(org.springframework.cglib.proxy.CallbackFilter)",
            "public void setCallbackFilter(org.springframework.cglib.proxy.CallbackFilter)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setCallback(org.springframework.cglib.proxy.Callback)",
            "public void setCallback(org.springframework.cglib.proxy.Callback)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setCallbacks(org.springframework.cglib.proxy.Callback[])",
            "public void setCallbacks(org.springframework.cglib.proxy.Callback[])"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setUseFactory(boolean)",
            "public void setUseFactory(boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setInterceptDuringConstruction(boolean)",
            "public void setInterceptDuringConstruction(boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setCallbackType(java.lang.Class)",
            "public void setCallbackType(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setCallbackTypes(java.lang.Class[])",
            "public void setCallbackTypes(java.lang.Class[])"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.Enhancer.create()",
            "public java.lang.Object create()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.Enhancer.create(java.lang.Class[], java.lang.Object[])",
            "public java.lang.Object create(java.lang.Class[], java.lang.Object[])"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.proxy.Enhancer.createClass()",
            "public java.lang.Class createClass()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.setSerialVersionUID(java.lang.Long)",
            "public void setSerialVersionUID(java.lang.Long)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.getMethods(java.lang.Class, java.lang.Class[], java.util.List)",
            "public static void getMethods(java.lang.Class, java.lang.Class[], java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class, org.springframework.cglib.proxy.Callback[])",
            "public static void registerCallbacks(java.lang.Class, org.springframework.cglib.proxy.Callback[])"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Enhancer.registerStaticCallbacks(java.lang.Class, org.springframework.cglib.proxy.Callback[])",
            "public static void registerStaticCallbacks(java.lang.Class, org.springframework.cglib.proxy.Callback[])"
        ],
        [
            "boolean",
            "org.springframework.cglib.proxy.Enhancer.isEnhanced(java.lang.Class)",
            "public static boolean isEnhanced(java.lang.Class)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.Enhancer.create(java.lang.Class, org.springframework.cglib.proxy.Callback)",
            "public static java.lang.Object create(java.lang.Class, org.springframework.cglib.proxy.Callback)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.Enhancer.create(java.lang.Class, java.lang.Class[], org.springframework.cglib.proxy.Callback)",
            "public static java.lang.Object create(java.lang.Class, java.lang.Class[], org.springframework.cglib.proxy.Callback)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.Enhancer.create(java.lang.Class, java.lang.Class[], org.springframework.cglib.proxy.CallbackFilter, org.springframework.cglib.proxy.Callback[])",
            "public static java.lang.Object create(java.lang.Class, java.lang.Class[], org.springframework.cglib.proxy.CallbackFilter, org.springframework.cglib.proxy.Callback[])"
        ],
        [
            "org.springframework.cglib.proxy.MethodProxy$CreateInfo",
            "org.springframework.cglib.proxy.MethodProxy$CreateInfo(java.lang.Class, java.lang.Class)",
            "public org.springframework.cglib.proxy.MethodProxy$CreateInfo(java.lang.Class, java.lang.Class)"
        ],
        [
            "org.springframework.cglib.proxy.MethodProxy",
            "org.springframework.cglib.proxy.MethodProxy.create(java.lang.Class, java.lang.Class, java.lang.String, java.lang.String, java.lang.String)",
            "public static org.springframework.cglib.proxy.MethodProxy create(java.lang.Class, java.lang.Class, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.proxy.MethodProxy.getSignature()",
            "public org.springframework.cglib.core.Signature getSignature()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.proxy.MethodProxy.getSuperName()",
            "public java.lang.String getSuperName()"
        ],
        [
            "int",
            "org.springframework.cglib.proxy.MethodProxy.getSuperIndex()",
            "public int getSuperIndex()"
        ],
        [
            "org.springframework.cglib.proxy.MethodProxy",
            "org.springframework.cglib.proxy.MethodProxy.find(java.lang.Class, org.springframework.cglib.core.Signature)",
            "public static org.springframework.cglib.proxy.MethodProxy find(java.lang.Class, org.springframework.cglib.core.Signature)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.MethodProxy.invoke(java.lang.Object, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[])",
            "public java.lang.Object invokeSuper(java.lang.Object, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "<T> T",
            "org.springframework.core.AttributeAccessor.computeAttribute(java.lang.String, java.util.function.Function<java.lang.String, T>)",
            "public default <T> T computeAttribute(java.lang.String, java.util.function.Function<java.lang.String, T>)"
        ],
        [
            "org.springframework.core.AttributeAccessorSupport",
            "org.springframework.core.AttributeAccessorSupport()",
            "public org.springframework.core.AttributeAccessorSupport()"
        ],
        [
            "void",
            "org.springframework.core.AttributeAccessorSupport.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.AttributeAccessorSupport.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.core.AttributeAccessorSupport.computeAttribute(java.lang.String, java.util.function.Function<java.lang.String, T>)",
            "public <T> T computeAttribute(java.lang.String, java.util.function.Function<java.lang.String, T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.AttributeAccessorSupport.removeAttribute(java.lang.String)",
            "public java.lang.Object removeAttribute(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.AttributeAccessorSupport.hasAttribute(java.lang.String)",
            "public boolean hasAttribute(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.AttributeAccessorSupport.attributeNames()",
            "public java.lang.String[] attributeNames()"
        ],
        [
            "boolean",
            "org.springframework.core.AttributeAccessorSupport.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.AttributeAccessorSupport.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.core.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)",
            "public static java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.core.BridgeMethodResolver.isVisibilityBridgeMethodPair(java.lang.reflect.Method, java.lang.reflect.Method)",
            "public static boolean isVisibilityBridgeMethodPair(java.lang.reflect.Method, java.lang.reflect.Method)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.CollectionFactory$1.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.CollectionFactory.isApproximableCollectionType(java.lang.Class<?>)",
            "public static boolean isApproximableCollectionType(java.lang.Class<?>)"
        ],
        [
            "<E> java.util.Collection<E>",
            "org.springframework.core.CollectionFactory.createApproximateCollection(java.lang.Object, int)",
            "public static <E> java.util.Collection<E> createApproximateCollection(java.lang.Object, int)"
        ],
        [
            "<E> java.util.Collection<E>",
            "org.springframework.core.CollectionFactory.createCollection(java.lang.Class<?>, int)",
            "public static <E> java.util.Collection<E> createCollection(java.lang.Class<?>, int)"
        ],
        [
            "<E> java.util.Collection<E>",
            "org.springframework.core.CollectionFactory.createCollection(java.lang.Class<?>, java.lang.Class<?>, int)",
            "public static <E> java.util.Collection<E> createCollection(java.lang.Class<?>, java.lang.Class<?>, int)"
        ],
        [
            "boolean",
            "org.springframework.core.CollectionFactory.isApproximableMapType(java.lang.Class<?>)",
            "public static boolean isApproximableMapType(java.lang.Class<?>)"
        ],
        [
            "<K, V> java.util.Map<K, V>",
            "org.springframework.core.CollectionFactory.createApproximateMap(java.lang.Object, int)",
            "public static <K, V> java.util.Map<K, V> createApproximateMap(java.lang.Object, int)"
        ],
        [
            "<K, V> java.util.Map<K, V>",
            "org.springframework.core.CollectionFactory.createMap(java.lang.Class<?>, int)",
            "public static <K, V> java.util.Map<K, V> createMap(java.lang.Class<?>, int)"
        ],
        [
            "<K, V> java.util.Map<K, V>",
            "org.springframework.core.CollectionFactory.createMap(java.lang.Class<?>, java.lang.Class<?>, int)",
            "public static <K, V> java.util.Map<K, V> createMap(java.lang.Class<?>, java.lang.Class<?>, int)"
        ],
        [
            "java.util.Properties",
            "org.springframework.core.CollectionFactory.createStringAdaptingProperties()",
            "public static java.util.Properties createStringAdaptingProperties()"
        ],
        [
            "java.util.Properties",
            "org.springframework.core.CollectionFactory.createSortedProperties(boolean)",
            "public static java.util.Properties createSortedProperties(boolean)"
        ],
        [
            "java.util.Properties",
            "org.springframework.core.CollectionFactory.createSortedProperties(java.util.Properties, boolean)",
            "public static java.util.Properties createSortedProperties(java.util.Properties, boolean)"
        ],
        [
            "org.springframework.core.ConfigurableObjectInputStream",
            "org.springframework.core.ConfigurableObjectInputStream(java.io.InputStream, java.lang.ClassLoader)",
            "public org.springframework.core.ConfigurableObjectInputStream(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException"
        ],
        [
            "org.springframework.core.ConfigurableObjectInputStream",
            "org.springframework.core.ConfigurableObjectInputStream(java.io.InputStream, java.lang.ClassLoader, boolean)",
            "public org.springframework.core.ConfigurableObjectInputStream(java.io.InputStream, java.lang.ClassLoader, boolean) throws java.io.IOException"
        ],
        [
            "org.springframework.core.Constants$ConstantException",
            "org.springframework.core.Constants$ConstantException(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.core.Constants$ConstantException(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.core.Constants$ConstantException",
            "org.springframework.core.Constants$ConstantException(java.lang.String, java.lang.String, java.lang.Object)",
            "public org.springframework.core.Constants$ConstantException(java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.core.Constants",
            "org.springframework.core.Constants(java.lang.Class<?>)",
            "public org.springframework.core.Constants(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Constants.getClassName()",
            "public final java.lang.String getClassName()"
        ],
        [
            "int",
            "org.springframework.core.Constants.getSize()",
            "public final int getSize()"
        ],
        [
            "java.lang.Number",
            "org.springframework.core.Constants.asNumber(java.lang.String)",
            "public java.lang.Number asNumber(java.lang.String) throws org.springframework.core.Constants$ConstantException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Constants.asString(java.lang.String)",
            "public java.lang.String asString(java.lang.String) throws org.springframework.core.Constants$ConstantException"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.Constants.asObject(java.lang.String)",
            "public java.lang.Object asObject(java.lang.String) throws org.springframework.core.Constants$ConstantException"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.Constants.getNames(java.lang.String)",
            "public java.util.Set<java.lang.String> getNames(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.Constants.getNamesForProperty(java.lang.String)",
            "public java.util.Set<java.lang.String> getNamesForProperty(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.Constants.getNamesForSuffix(java.lang.String)",
            "public java.util.Set<java.lang.String> getNamesForSuffix(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.Object>",
            "org.springframework.core.Constants.getValues(java.lang.String)",
            "public java.util.Set<java.lang.Object> getValues(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.Object>",
            "org.springframework.core.Constants.getValuesForProperty(java.lang.String)",
            "public java.util.Set<java.lang.Object> getValuesForProperty(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.Object>",
            "org.springframework.core.Constants.getValuesForSuffix(java.lang.String)",
            "public java.util.Set<java.lang.Object> getValuesForSuffix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Constants.toCode(java.lang.Object, java.lang.String)",
            "public java.lang.String toCode(java.lang.Object, java.lang.String) throws org.springframework.core.Constants$ConstantException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Constants.toCodeForProperty(java.lang.Object, java.lang.String)",
            "public java.lang.String toCodeForProperty(java.lang.Object, java.lang.String) throws org.springframework.core.Constants$ConstantException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Constants.toCodeForSuffix(java.lang.Object, java.lang.String)",
            "public java.lang.String toCodeForSuffix(java.lang.Object, java.lang.String) throws org.springframework.core.Constants$ConstantException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Constants.propertyToConstantNamePrefix(java.lang.String)",
            "public java.lang.String propertyToConstantNamePrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Conventions.getVariableName(java.lang.Object)",
            "public static java.lang.String getVariableName(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Conventions.getVariableNameForParameter(org.springframework.core.MethodParameter)",
            "public static java.lang.String getVariableNameForParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Conventions.getVariableNameForReturnType(java.lang.reflect.Method)",
            "public static java.lang.String getVariableNameForReturnType(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Conventions.getVariableNameForReturnType(java.lang.reflect.Method, java.lang.Object)",
            "public static java.lang.String getVariableNameForReturnType(java.lang.reflect.Method, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Conventions.getVariableNameForReturnType(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object)",
            "public static java.lang.String getVariableNameForReturnType(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Conventions.attributeNameToPropertyName(java.lang.String)",
            "public static java.lang.String attributeNameToPropertyName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.Conventions.getQualifiedAttributeName(java.lang.Class<?>, java.lang.String)",
            "public static java.lang.String getQualifiedAttributeName(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.core.CoroutinesUtils",
            "org.springframework.core.CoroutinesUtils()",
            "public org.springframework.core.CoroutinesUtils()"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.core.CoroutinesUtils.deferredToMono(kotlinx.coroutines.Deferred<T>)",
            "public static <T> reactor.core.publisher.Mono<T> deferredToMono(kotlinx.coroutines.Deferred<T>)"
        ],
        [
            "<T> kotlinx.coroutines.Deferred<T>",
            "org.springframework.core.CoroutinesUtils.monoToDeferred(reactor.core.publisher.Mono<T>)",
            "public static <T> kotlinx.coroutines.Deferred<T> monoToDeferred(reactor.core.publisher.Mono<T>)"
        ],
        [
            "org.reactivestreams.Publisher<?>",
            "org.springframework.core.CoroutinesUtils.invokeSuspendingFunction(java.lang.reflect.Method, java.lang.Object, java.lang.Object...)",
            "public static org.reactivestreams.Publisher<?> invokeSuspendingFunction(java.lang.reflect.Method, java.lang.Object, java.lang.Object...)"
        ],
        [
            "org.springframework.core.DecoratingClassLoader",
            "org.springframework.core.DecoratingClassLoader()",
            "public org.springframework.core.DecoratingClassLoader()"
        ],
        [
            "org.springframework.core.DecoratingClassLoader",
            "org.springframework.core.DecoratingClassLoader(java.lang.ClassLoader)",
            "public org.springframework.core.DecoratingClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.core.DecoratingClassLoader.excludePackage(java.lang.String)",
            "public void excludePackage(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.DecoratingClassLoader.excludeClass(java.lang.String)",
            "public void excludeClass(java.lang.String)"
        ],
        [
            "org.springframework.core.DefaultParameterNameDiscoverer",
            "org.springframework.core.DefaultParameterNameDiscoverer()",
            "public org.springframework.core.DefaultParameterNameDiscoverer()"
        ],
        [
            "org.springframework.core.ExceptionDepthComparator",
            "org.springframework.core.ExceptionDepthComparator(java.lang.Throwable)",
            "public org.springframework.core.ExceptionDepthComparator(java.lang.Throwable)"
        ],
        [
            "org.springframework.core.ExceptionDepthComparator",
            "org.springframework.core.ExceptionDepthComparator(java.lang.Class<? extends java.lang.Throwable>)",
            "public org.springframework.core.ExceptionDepthComparator(java.lang.Class<? extends java.lang.Throwable>)"
        ],
        [
            "int",
            "org.springframework.core.ExceptionDepthComparator.compare(java.lang.Class<? extends java.lang.Throwable>, java.lang.Class<? extends java.lang.Throwable>)",
            "public int compare(java.lang.Class<? extends java.lang.Throwable>, java.lang.Class<? extends java.lang.Throwable>)"
        ],
        [
            "java.lang.Class<? extends java.lang.Throwable>",
            "org.springframework.core.ExceptionDepthComparator.findClosestMatch(java.util.Collection<java.lang.Class<? extends java.lang.Throwable>>, java.lang.Throwable)",
            "public static java.lang.Class<? extends java.lang.Throwable> findClosestMatch(java.util.Collection<java.lang.Class<? extends java.lang.Throwable>>, java.lang.Throwable)"
        ],
        [
            "int",
            "org.springframework.core.ExceptionDepthComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.core.GenericTypeResolver$TypeVariableMapVariableResolver",
            "org.springframework.core.GenericTypeResolver$TypeVariableMapVariableResolver(java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>)",
            "public org.springframework.core.GenericTypeResolver$TypeVariableMapVariableResolver(java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.GenericTypeResolver$TypeVariableMapVariableResolver.resolveVariable(java.lang.reflect.TypeVariable<?>)",
            "public org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.GenericTypeResolver$TypeVariableMapVariableResolver.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.GenericTypeResolver.resolveParameterType(org.springframework.core.MethodParameter, java.lang.Class<?>)",
            "public static java.lang.Class<?> resolveParameterType(org.springframework.core.MethodParameter, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.GenericTypeResolver.resolveReturnType(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static java.lang.Class<?> resolveReturnType(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.GenericTypeResolver.resolveReturnTypeArgument(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static java.lang.Class<?> resolveReturnTypeArgument(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.GenericTypeResolver.resolveTypeArgument(java.lang.Class<?>, java.lang.Class<?>)",
            "public static java.lang.Class<?> resolveTypeArgument(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.core.GenericTypeResolver.resolveTypeArguments(java.lang.Class<?>, java.lang.Class<?>)",
            "public static java.lang.Class<?>[] resolveTypeArguments(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.GenericTypeResolver.resolveType(java.lang.reflect.Type, java.lang.Class<?>)",
            "public static java.lang.reflect.Type resolveType(java.lang.reflect.Type, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.GenericTypeResolver.resolveType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>)",
            "public static java.lang.Class<?> resolveType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>)"
        ],
        [
            "java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>",
            "org.springframework.core.GenericTypeResolver.getTypeVariableMap(java.lang.Class<?>)",
            "public static java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type> getTypeVariableMap(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.KotlinDetector",
            "org.springframework.core.KotlinDetector()",
            "public org.springframework.core.KotlinDetector()"
        ],
        [
            "boolean",
            "org.springframework.core.KotlinDetector.isKotlinPresent()",
            "public static boolean isKotlinPresent()"
        ],
        [
            "boolean",
            "org.springframework.core.KotlinDetector.isKotlinReflectPresent()",
            "public static boolean isKotlinReflectPresent()"
        ],
        [
            "boolean",
            "org.springframework.core.KotlinDetector.isKotlinType(java.lang.Class<?>)",
            "public static boolean isKotlinType(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.KotlinDetector.isSuspendingFunction(java.lang.reflect.Method)",
            "public static boolean isSuspendingFunction(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.core.KotlinReflectionParameterNameDiscoverer",
            "org.springframework.core.KotlinReflectionParameterNameDiscoverer()",
            "public org.springframework.core.KotlinReflectionParameterNameDiscoverer()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.KotlinReflectionParameterNameDiscoverer.getParameterNames(java.lang.reflect.Method)",
            "public java.lang.String[] getParameterNames(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.KotlinReflectionParameterNameDiscoverer.getParameterNames(java.lang.reflect.Constructor<?>)",
            "public java.lang.String[] getParameterNames(java.lang.reflect.Constructor<?>)"
        ],
        [
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer$LocalVariableTableVisitor",
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer$LocalVariableTableVisitor(java.lang.Class<?>, java.util.Map<java.lang.reflect.Executable, java.lang.String[]>, java.lang.String, java.lang.String, boolean)",
            "public org.springframework.core.LocalVariableTableParameterNameDiscoverer$LocalVariableTableVisitor(java.lang.Class<?>, java.util.Map<java.lang.reflect.Executable, java.lang.String[]>, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer$LocalVariableTableVisitor.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)",
            "public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)"
        ],
        [
            "void",
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer$LocalVariableTableVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor",
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor(java.lang.Class<?>, java.util.Map<java.lang.reflect.Executable, java.lang.String[]>)",
            "public org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor(java.lang.Class<?>, java.util.Map<java.lang.reflect.Executable, java.lang.String[]>)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer",
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer()",
            "public org.springframework.core.LocalVariableTableParameterNameDiscoverer()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer.getParameterNames(java.lang.reflect.Method)",
            "public java.lang.String[] getParameterNames(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.LocalVariableTableParameterNameDiscoverer.getParameterNames(java.lang.reflect.Constructor<?>)",
            "public java.lang.String[] getParameterNames(java.lang.reflect.Constructor<?>)"
        ],
        [
            "org.springframework.core.MethodClassKey",
            "org.springframework.core.MethodClassKey(java.lang.reflect.Method, java.lang.Class<?>)",
            "public org.springframework.core.MethodClassKey(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.MethodClassKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.MethodClassKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.MethodClassKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.core.MethodClassKey.compareTo(org.springframework.core.MethodClassKey)",
            "public int compareTo(org.springframework.core.MethodClassKey)"
        ],
        [
            "int",
            "org.springframework.core.MethodClassKey.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "<T> java.util.Map<java.lang.reflect.Method, T>",
            "org.springframework.core.MethodIntrospector.selectMethods(java.lang.Class<?>, org.springframework.core.MethodIntrospector$MetadataLookup<T>)",
            "public static <T> java.util.Map<java.lang.reflect.Method, T> selectMethods(java.lang.Class<?>, org.springframework.core.MethodIntrospector$MetadataLookup<T>)"
        ],
        [
            "java.util.Set<java.lang.reflect.Method>",
            "org.springframework.core.MethodIntrospector.selectMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodFilter)",
            "public static java.util.Set<java.lang.reflect.Method> selectMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodFilter)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.core.MethodIntrospector.selectInvocableMethod(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static java.lang.reflect.Method selectInvocableMethod(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.MethodParameter$KotlinDelegate.isOptional(org.springframework.core.MethodParameter)",
            "public static boolean isOptional(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter(java.lang.reflect.Method, int)",
            "public org.springframework.core.MethodParameter(java.lang.reflect.Method, int)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter(java.lang.reflect.Method, int, int)",
            "public org.springframework.core.MethodParameter(java.lang.reflect.Method, int, int)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter(java.lang.reflect.Constructor<?>, int)",
            "public org.springframework.core.MethodParameter(java.lang.reflect.Constructor<?>, int)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter(java.lang.reflect.Constructor<?>, int, int)",
            "public org.springframework.core.MethodParameter(java.lang.reflect.Constructor<?>, int, int)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter(org.springframework.core.MethodParameter)",
            "public org.springframework.core.MethodParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.core.MethodParameter.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "java.lang.reflect.Constructor<?>",
            "org.springframework.core.MethodParameter.getConstructor()",
            "public java.lang.reflect.Constructor<?> getConstructor()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.MethodParameter.getDeclaringClass()",
            "public java.lang.Class<?> getDeclaringClass()"
        ],
        [
            "java.lang.reflect.Member",
            "org.springframework.core.MethodParameter.getMember()",
            "public java.lang.reflect.Member getMember()"
        ],
        [
            "java.lang.reflect.AnnotatedElement",
            "org.springframework.core.MethodParameter.getAnnotatedElement()",
            "public java.lang.reflect.AnnotatedElement getAnnotatedElement()"
        ],
        [
            "java.lang.reflect.Executable",
            "org.springframework.core.MethodParameter.getExecutable()",
            "public java.lang.reflect.Executable getExecutable()"
        ],
        [
            "java.lang.reflect.Parameter",
            "org.springframework.core.MethodParameter.getParameter()",
            "public java.lang.reflect.Parameter getParameter()"
        ],
        [
            "int",
            "org.springframework.core.MethodParameter.getParameterIndex()",
            "public int getParameterIndex()"
        ],
        [
            "void",
            "org.springframework.core.MethodParameter.increaseNestingLevel()",
            "public void increaseNestingLevel()"
        ],
        [
            "void",
            "org.springframework.core.MethodParameter.decreaseNestingLevel()",
            "public void decreaseNestingLevel()"
        ],
        [
            "int",
            "org.springframework.core.MethodParameter.getNestingLevel()",
            "public int getNestingLevel()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.withTypeIndex(int)",
            "public org.springframework.core.MethodParameter withTypeIndex(int)"
        ],
        [
            "void",
            "org.springframework.core.MethodParameter.setTypeIndexForCurrentLevel(int)",
            "public void setTypeIndexForCurrentLevel(int)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.MethodParameter.getTypeIndexForCurrentLevel()",
            "public java.lang.Integer getTypeIndexForCurrentLevel()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.MethodParameter.getTypeIndexForLevel(int)",
            "public java.lang.Integer getTypeIndexForLevel(int)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.nested()",
            "public org.springframework.core.MethodParameter nested()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.nested(java.lang.Integer)",
            "public org.springframework.core.MethodParameter nested(java.lang.Integer)"
        ],
        [
            "boolean",
            "org.springframework.core.MethodParameter.isOptional()",
            "public boolean isOptional()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.nestedIfOptional()",
            "public org.springframework.core.MethodParameter nestedIfOptional()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.withContainingClass(java.lang.Class<?>)",
            "public org.springframework.core.MethodParameter withContainingClass(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.MethodParameter.getContainingClass()",
            "public java.lang.Class<?> getContainingClass()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.MethodParameter.getParameterType()",
            "public java.lang.Class<?> getParameterType()"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.MethodParameter.getGenericParameterType()",
            "public java.lang.reflect.Type getGenericParameterType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.MethodParameter.getNestedParameterType()",
            "public java.lang.Class<?> getNestedParameterType()"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.MethodParameter.getNestedGenericParameterType()",
            "public java.lang.reflect.Type getNestedGenericParameterType()"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.MethodParameter.getMethodAnnotations()",
            "public java.lang.annotation.Annotation[] getMethodAnnotations()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.MethodParameter.getMethodAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A getMethodAnnotation(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> boolean",
            "org.springframework.core.MethodParameter.hasMethodAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> boolean hasMethodAnnotation(java.lang.Class<A>)"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.MethodParameter.getParameterAnnotations()",
            "public java.lang.annotation.Annotation[] getParameterAnnotations()"
        ],
        [
            "boolean",
            "org.springframework.core.MethodParameter.hasParameterAnnotations()",
            "public boolean hasParameterAnnotations()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.MethodParameter.getParameterAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A getParameterAnnotation(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> boolean",
            "org.springframework.core.MethodParameter.hasParameterAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> boolean hasParameterAnnotation(java.lang.Class<A>)"
        ],
        [
            "void",
            "org.springframework.core.MethodParameter.initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)",
            "public void initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.MethodParameter.getParameterName()",
            "public java.lang.String getParameterName()"
        ],
        [
            "boolean",
            "org.springframework.core.MethodParameter.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.MethodParameter.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.MethodParameter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.clone()",
            "public org.springframework.core.MethodParameter clone()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.forMethodOrConstructor(java.lang.Object, int)",
            "public static org.springframework.core.MethodParameter forMethodOrConstructor(java.lang.Object, int)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.forExecutable(java.lang.reflect.Executable, int)",
            "public static org.springframework.core.MethodParameter forExecutable(java.lang.reflect.Executable, int)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.MethodParameter.forParameter(java.lang.reflect.Parameter)",
            "public static org.springframework.core.MethodParameter forParameter(java.lang.reflect.Parameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.MethodParameter.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.core.NamedInheritableThreadLocal",
            "org.springframework.core.NamedInheritableThreadLocal(java.lang.String)",
            "public org.springframework.core.NamedInheritableThreadLocal(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.NamedInheritableThreadLocal.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.NamedThreadLocal",
            "org.springframework.core.NamedThreadLocal(java.lang.String)",
            "public org.springframework.core.NamedThreadLocal(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.NamedThreadLocal.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.NativeDetector",
            "org.springframework.core.NativeDetector()",
            "public org.springframework.core.NativeDetector()"
        ],
        [
            "boolean",
            "org.springframework.core.NativeDetector.inNativeImage()",
            "public static boolean inNativeImage()"
        ],
        [
            "org.springframework.core.NestedCheckedException",
            "org.springframework.core.NestedCheckedException(java.lang.String)",
            "public org.springframework.core.NestedCheckedException(java.lang.String)"
        ],
        [
            "org.springframework.core.NestedCheckedException",
            "org.springframework.core.NestedCheckedException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.NestedCheckedException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.NestedCheckedException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.core.NestedCheckedException.getRootCause()",
            "public java.lang.Throwable getRootCause()"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.core.NestedCheckedException.getMostSpecificCause()",
            "public java.lang.Throwable getMostSpecificCause()"
        ],
        [
            "boolean",
            "org.springframework.core.NestedCheckedException.contains(java.lang.Class<?>)",
            "public boolean contains(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.NestedExceptionUtils",
            "org.springframework.core.NestedExceptionUtils()",
            "public org.springframework.core.NestedExceptionUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.NestedExceptionUtils.buildMessage(java.lang.String, java.lang.Throwable)",
            "public static java.lang.String buildMessage(java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.core.NestedExceptionUtils.getRootCause(java.lang.Throwable)",
            "public static java.lang.Throwable getRootCause(java.lang.Throwable)"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.core.NestedExceptionUtils.getMostSpecificCause(java.lang.Throwable)",
            "public static java.lang.Throwable getMostSpecificCause(java.lang.Throwable)"
        ],
        [
            "org.springframework.core.NestedIOException",
            "org.springframework.core.NestedIOException(java.lang.String)",
            "public org.springframework.core.NestedIOException(java.lang.String)"
        ],
        [
            "org.springframework.core.NestedIOException",
            "org.springframework.core.NestedIOException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.NestedIOException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.NestedIOException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "org.springframework.core.NestedRuntimeException",
            "org.springframework.core.NestedRuntimeException(java.lang.String)",
            "public org.springframework.core.NestedRuntimeException(java.lang.String)"
        ],
        [
            "org.springframework.core.NestedRuntimeException",
            "org.springframework.core.NestedRuntimeException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.NestedRuntimeException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.NestedRuntimeException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.core.NestedRuntimeException.getRootCause()",
            "public java.lang.Throwable getRootCause()"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.core.NestedRuntimeException.getMostSpecificCause()",
            "public java.lang.Throwable getMostSpecificCause()"
        ],
        [
            "boolean",
            "org.springframework.core.NestedRuntimeException.contains(java.lang.Class<?>)",
            "public boolean contains(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.OrderComparator",
            "org.springframework.core.OrderComparator()",
            "public org.springframework.core.OrderComparator()"
        ],
        [
            "java.util.Comparator<java.lang.Object>",
            "org.springframework.core.OrderComparator.withSourceProvider(org.springframework.core.OrderComparator$OrderSourceProvider)",
            "public java.util.Comparator<java.lang.Object> withSourceProvider(org.springframework.core.OrderComparator$OrderSourceProvider)"
        ],
        [
            "int",
            "org.springframework.core.OrderComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.OrderComparator.getPriority(java.lang.Object)",
            "public java.lang.Integer getPriority(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.OrderComparator.sort(java.util.List<?>)",
            "public static void sort(java.util.List<?>)"
        ],
        [
            "void",
            "org.springframework.core.OrderComparator.sort(java.lang.Object[])",
            "public static void sort(java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.core.OrderComparator.sortIfNecessary(java.lang.Object)",
            "public static void sortIfNecessary(java.lang.Object)"
        ],
        [
            "org.springframework.core.OverridingClassLoader",
            "org.springframework.core.OverridingClassLoader(java.lang.ClassLoader)",
            "public org.springframework.core.OverridingClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.OverridingClassLoader",
            "org.springframework.core.OverridingClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)",
            "public org.springframework.core.OverridingClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.OverridingClassLoader.loadClass(java.lang.String)",
            "public java.lang.Class<?> loadClass(java.lang.String) throws java.lang.ClassNotFoundException"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.ParameterizedTypeReference.getType()",
            "public java.lang.reflect.Type getType()"
        ],
        [
            "boolean",
            "org.springframework.core.ParameterizedTypeReference.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.ParameterizedTypeReference.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.ParameterizedTypeReference.toString()",
            "public java.lang.String toString()"
        ],
        [
            "<T> org.springframework.core.ParameterizedTypeReference<T>",
            "org.springframework.core.ParameterizedTypeReference.forType(java.lang.reflect.Type)",
            "public static <T> org.springframework.core.ParameterizedTypeReference<T> forType(java.lang.reflect.Type)"
        ],
        [
            "org.springframework.core.PrioritizedParameterNameDiscoverer",
            "org.springframework.core.PrioritizedParameterNameDiscoverer()",
            "public org.springframework.core.PrioritizedParameterNameDiscoverer()"
        ],
        [
            "void",
            "org.springframework.core.PrioritizedParameterNameDiscoverer.addDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void addDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.PrioritizedParameterNameDiscoverer.getParameterNames(java.lang.reflect.Method)",
            "public java.lang.String[] getParameterNames(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.PrioritizedParameterNameDiscoverer.getParameterNames(java.lang.reflect.Constructor<?>)",
            "public java.lang.String[] getParameterNames(java.lang.reflect.Constructor<?>)"
        ],
        [
            "org.springframework.core.ReactiveAdapter",
            "org.springframework.core.ReactiveAdapter(org.springframework.core.ReactiveTypeDescriptor, java.util.function.Function<java.lang.Object, org.reactivestreams.Publisher<?>>, java.util.function.Function<org.reactivestreams.Publisher<?>, java.lang.Object>)",
            "public org.springframework.core.ReactiveAdapter(org.springframework.core.ReactiveTypeDescriptor, java.util.function.Function<java.lang.Object, org.reactivestreams.Publisher<?>>, java.util.function.Function<org.reactivestreams.Publisher<?>, java.lang.Object>)"
        ],
        [
            "org.springframework.core.ReactiveTypeDescriptor",
            "org.springframework.core.ReactiveAdapter.getDescriptor()",
            "public org.springframework.core.ReactiveTypeDescriptor getDescriptor()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.ReactiveAdapter.getReactiveType()",
            "public java.lang.Class<?> getReactiveType()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveAdapter.isMultiValue()",
            "public boolean isMultiValue()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveAdapter.isNoValue()",
            "public boolean isNoValue()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveAdapter.supportsEmpty()",
            "public boolean supportsEmpty()"
        ],
        [
            "<T> org.reactivestreams.Publisher<T>",
            "org.springframework.core.ReactiveAdapter.toPublisher(java.lang.Object)",
            "public <T> org.reactivestreams.Publisher<T> toPublisher(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.ReactiveAdapter.fromPublisher(org.reactivestreams.Publisher<?>)",
            "public java.lang.Object fromPublisher(org.reactivestreams.Publisher<?>)"
        ],
        [
            "<T> org.reactivestreams.Publisher<T>",
            "org.springframework.core.ReactiveAdapterRegistry$ReactorAdapter.toPublisher(java.lang.Object)",
            "public <T> org.reactivestreams.Publisher<T> toPublisher(java.lang.Object)"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry$SpringCoreBlockHoundIntegration",
            "org.springframework.core.ReactiveAdapterRegistry$SpringCoreBlockHoundIntegration()",
            "public org.springframework.core.ReactiveAdapterRegistry$SpringCoreBlockHoundIntegration()"
        ],
        [
            "void",
            "org.springframework.core.ReactiveAdapterRegistry$SpringCoreBlockHoundIntegration.applyTo(reactor.blockhound.BlockHound$Builder)",
            "public void applyTo(reactor.blockhound.BlockHound$Builder)"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.core.ReactiveAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveAdapterRegistry.hasAdapters()",
            "public boolean hasAdapters()"
        ],
        [
            "void",
            "org.springframework.core.ReactiveAdapterRegistry.registerReactiveType(org.springframework.core.ReactiveTypeDescriptor, java.util.function.Function<java.lang.Object, org.reactivestreams.Publisher<?>>, java.util.function.Function<org.reactivestreams.Publisher<?>, java.lang.Object>)",
            "public void registerReactiveType(org.springframework.core.ReactiveTypeDescriptor, java.util.function.Function<java.lang.Object, org.reactivestreams.Publisher<?>>, java.util.function.Function<org.reactivestreams.Publisher<?>, java.lang.Object>)"
        ],
        [
            "org.springframework.core.ReactiveAdapter",
            "org.springframework.core.ReactiveAdapterRegistry.getAdapter(java.lang.Class<?>)",
            "public org.springframework.core.ReactiveAdapter getAdapter(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ReactiveAdapter",
            "org.springframework.core.ReactiveAdapterRegistry.getAdapter(java.lang.Class<?>, java.lang.Object)",
            "public org.springframework.core.ReactiveAdapter getAdapter(java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.core.ReactiveAdapterRegistry.getSharedInstance()",
            "public static org.springframework.core.ReactiveAdapterRegistry getSharedInstance()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.ReactiveTypeDescriptor.getReactiveType()",
            "public java.lang.Class<?> getReactiveType()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveTypeDescriptor.isMultiValue()",
            "public boolean isMultiValue()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveTypeDescriptor.isNoValue()",
            "public boolean isNoValue()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveTypeDescriptor.supportsEmpty()",
            "public boolean supportsEmpty()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.ReactiveTypeDescriptor.getEmptyValue()",
            "public java.lang.Object getEmptyValue()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveTypeDescriptor.isDeferred()",
            "public boolean isDeferred()"
        ],
        [
            "boolean",
            "org.springframework.core.ReactiveTypeDescriptor.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.ReactiveTypeDescriptor.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.ReactiveTypeDescriptor",
            "org.springframework.core.ReactiveTypeDescriptor.multiValue(java.lang.Class<?>, java.util.function.Supplier<?>)",
            "public static org.springframework.core.ReactiveTypeDescriptor multiValue(java.lang.Class<?>, java.util.function.Supplier<?>)"
        ],
        [
            "org.springframework.core.ReactiveTypeDescriptor",
            "org.springframework.core.ReactiveTypeDescriptor.singleOptionalValue(java.lang.Class<?>, java.util.function.Supplier<?>)",
            "public static org.springframework.core.ReactiveTypeDescriptor singleOptionalValue(java.lang.Class<?>, java.util.function.Supplier<?>)"
        ],
        [
            "org.springframework.core.ReactiveTypeDescriptor",
            "org.springframework.core.ReactiveTypeDescriptor.singleRequiredValue(java.lang.Class<?>)",
            "public static org.springframework.core.ReactiveTypeDescriptor singleRequiredValue(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ReactiveTypeDescriptor",
            "org.springframework.core.ReactiveTypeDescriptor.noValue(java.lang.Class<?>, java.util.function.Supplier<?>)",
            "public static org.springframework.core.ReactiveTypeDescriptor noValue(java.lang.Class<?>, java.util.function.Supplier<?>)"
        ],
        [
            "org.springframework.core.ReactiveTypeDescriptor",
            "org.springframework.core.ReactiveTypeDescriptor.nonDeferredAsyncValue(java.lang.Class<?>, java.util.function.Supplier<?>)",
            "public static org.springframework.core.ReactiveTypeDescriptor nonDeferredAsyncValue(java.lang.Class<?>, java.util.function.Supplier<?>)"
        ],
        [
            "org.springframework.core.ResolvableType[]",
            "org.springframework.core.ResolvableType$1.getGenerics()",
            "public org.springframework.core.ResolvableType[] getGenerics()"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType$1.isAssignableFrom(java.lang.Class<?>)",
            "public boolean isAssignableFrom(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType$1.isAssignableFrom(org.springframework.core.ResolvableType)",
            "public boolean isAssignableFrom(org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType$DefaultVariableResolver.resolveVariable(java.lang.reflect.TypeVariable<?>)",
            "public org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.ResolvableType$DefaultVariableResolver.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.core.ResolvableType$SyntheticParameterizedType",
            "org.springframework.core.ResolvableType$SyntheticParameterizedType(java.lang.reflect.Type, java.lang.reflect.Type[])",
            "public org.springframework.core.ResolvableType$SyntheticParameterizedType(java.lang.reflect.Type, java.lang.reflect.Type[])"
        ],
        [
            "java.lang.String",
            "org.springframework.core.ResolvableType$SyntheticParameterizedType.getTypeName()",
            "public java.lang.String getTypeName()"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.ResolvableType$SyntheticParameterizedType.getOwnerType()",
            "public java.lang.reflect.Type getOwnerType()"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()",
            "public java.lang.reflect.Type getRawType()"
        ],
        [
            "java.lang.reflect.Type[]",
            "org.springframework.core.ResolvableType$SyntheticParameterizedType.getActualTypeArguments()",
            "public java.lang.reflect.Type[] getActualTypeArguments()"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType$SyntheticParameterizedType.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.ResolvableType$SyntheticParameterizedType.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.ResolvableType$TypeVariablesVariableResolver",
            "org.springframework.core.ResolvableType$TypeVariablesVariableResolver(java.lang.reflect.TypeVariable<?>[], org.springframework.core.ResolvableType[])",
            "public org.springframework.core.ResolvableType$TypeVariablesVariableResolver(java.lang.reflect.TypeVariable<?>[], org.springframework.core.ResolvableType[])"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType$TypeVariablesVariableResolver.resolveVariable(java.lang.reflect.TypeVariable<?>)",
            "public org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.core.ResolvableType$WildcardBounds$Kind[]",
            "org.springframework.core.ResolvableType$WildcardBounds$Kind.values()",
            "public static org.springframework.core.ResolvableType$WildcardBounds$Kind[] values()"
        ],
        [
            "org.springframework.core.ResolvableType$WildcardBounds$Kind",
            "org.springframework.core.ResolvableType$WildcardBounds$Kind.valueOf(java.lang.String)",
            "public static org.springframework.core.ResolvableType$WildcardBounds$Kind valueOf(java.lang.String)"
        ],
        [
            "org.springframework.core.ResolvableType$WildcardBounds",
            "org.springframework.core.ResolvableType$WildcardBounds(org.springframework.core.ResolvableType$WildcardBounds$Kind, org.springframework.core.ResolvableType[])",
            "public org.springframework.core.ResolvableType$WildcardBounds(org.springframework.core.ResolvableType$WildcardBounds$Kind, org.springframework.core.ResolvableType[])"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType$WildcardBounds.isSameKind(org.springframework.core.ResolvableType$WildcardBounds)",
            "public boolean isSameKind(org.springframework.core.ResolvableType$WildcardBounds)"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType$WildcardBounds.isAssignableFrom(org.springframework.core.ResolvableType...)",
            "public boolean isAssignableFrom(org.springframework.core.ResolvableType...)"
        ],
        [
            "org.springframework.core.ResolvableType[]",
            "org.springframework.core.ResolvableType$WildcardBounds.getBounds()",
            "public org.springframework.core.ResolvableType[] getBounds()"
        ],
        [
            "org.springframework.core.ResolvableType$WildcardBounds",
            "org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType)",
            "public static org.springframework.core.ResolvableType$WildcardBounds get(org.springframework.core.ResolvableType)"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.ResolvableType.getType()",
            "public java.lang.reflect.Type getType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.ResolvableType.getRawClass()",
            "public java.lang.Class<?> getRawClass()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.ResolvableType.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.ResolvableType.toClass()",
            "public java.lang.Class<?> toClass()"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType.isInstance(java.lang.Object)",
            "public boolean isInstance(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType.isAssignableFrom(java.lang.Class<?>)",
            "public boolean isAssignableFrom(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType)",
            "public boolean isAssignableFrom(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType.isArray()",
            "public boolean isArray()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.getComponentType()",
            "public org.springframework.core.ResolvableType getComponentType()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.asCollection()",
            "public org.springframework.core.ResolvableType asCollection()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.asMap()",
            "public org.springframework.core.ResolvableType asMap()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.as(java.lang.Class<?>)",
            "public org.springframework.core.ResolvableType as(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.getSuperType()",
            "public org.springframework.core.ResolvableType getSuperType()"
        ],
        [
            "org.springframework.core.ResolvableType[]",
            "org.springframework.core.ResolvableType.getInterfaces()",
            "public org.springframework.core.ResolvableType[] getInterfaces()"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType.hasGenerics()",
            "public boolean hasGenerics()"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType.hasUnresolvableGenerics()",
            "public boolean hasUnresolvableGenerics()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.getNested(int)",
            "public org.springframework.core.ResolvableType getNested(int)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.getNested(int, java.util.Map<java.lang.Integer, java.lang.Integer>)",
            "public org.springframework.core.ResolvableType getNested(int, java.util.Map<java.lang.Integer, java.lang.Integer>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.getGeneric(int...)",
            "public org.springframework.core.ResolvableType getGeneric(int...)"
        ],
        [
            "org.springframework.core.ResolvableType[]",
            "org.springframework.core.ResolvableType.getGenerics()",
            "public org.springframework.core.ResolvableType[] getGenerics()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.core.ResolvableType.resolveGenerics()",
            "public java.lang.Class<?>[] resolveGenerics()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.core.ResolvableType.resolveGenerics(java.lang.Class<?>)",
            "public java.lang.Class<?>[] resolveGenerics(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.ResolvableType.resolveGeneric(int...)",
            "public java.lang.Class<?> resolveGeneric(int...)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.ResolvableType.resolve()",
            "public java.lang.Class<?> resolve()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.ResolvableType.resolve(java.lang.Class<?>)",
            "public java.lang.Class<?> resolve(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.ResolvableType.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.ResolvableType.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.ResolvableType.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forClass(java.lang.Class<?>)",
            "public static org.springframework.core.ResolvableType forClass(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forRawClass(java.lang.Class<?>)",
            "public static org.springframework.core.ResolvableType forRawClass(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forClass(java.lang.Class<?>, java.lang.Class<?>)",
            "public static org.springframework.core.ResolvableType forClass(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class<?>, java.lang.Class<?>...)",
            "public static org.springframework.core.ResolvableType forClassWithGenerics(java.lang.Class<?>, java.lang.Class<?>...)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class<?>, org.springframework.core.ResolvableType...)",
            "public static org.springframework.core.ResolvableType forClassWithGenerics(java.lang.Class<?>, org.springframework.core.ResolvableType...)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forInstance(java.lang.Object)",
            "public static org.springframework.core.ResolvableType forInstance(java.lang.Object)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forField(java.lang.reflect.Field)",
            "public static org.springframework.core.ResolvableType forField(java.lang.reflect.Field)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forField(java.lang.reflect.Field, java.lang.Class<?>)",
            "public static org.springframework.core.ResolvableType forField(java.lang.reflect.Field, java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forField(java.lang.reflect.Field, org.springframework.core.ResolvableType)",
            "public static org.springframework.core.ResolvableType forField(java.lang.reflect.Field, org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forField(java.lang.reflect.Field, int)",
            "public static org.springframework.core.ResolvableType forField(java.lang.reflect.Field, int)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forField(java.lang.reflect.Field, int, java.lang.Class<?>)",
            "public static org.springframework.core.ResolvableType forField(java.lang.reflect.Field, int, java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forConstructorParameter(java.lang.reflect.Constructor<?>, int)",
            "public static org.springframework.core.ResolvableType forConstructorParameter(java.lang.reflect.Constructor<?>, int)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forConstructorParameter(java.lang.reflect.Constructor<?>, int, java.lang.Class<?>)",
            "public static org.springframework.core.ResolvableType forConstructorParameter(java.lang.reflect.Constructor<?>, int, java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forMethodReturnType(java.lang.reflect.Method)",
            "public static org.springframework.core.ResolvableType forMethodReturnType(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forMethodReturnType(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static org.springframework.core.ResolvableType forMethodReturnType(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forMethodParameter(java.lang.reflect.Method, int)",
            "public static org.springframework.core.ResolvableType forMethodParameter(java.lang.reflect.Method, int)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forMethodParameter(java.lang.reflect.Method, int, java.lang.Class<?>)",
            "public static org.springframework.core.ResolvableType forMethodParameter(java.lang.reflect.Method, int, java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forMethodParameter(org.springframework.core.MethodParameter)",
            "public static org.springframework.core.ResolvableType forMethodParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forMethodParameter(org.springframework.core.MethodParameter, org.springframework.core.ResolvableType)",
            "public static org.springframework.core.ResolvableType forMethodParameter(org.springframework.core.MethodParameter, org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forMethodParameter(org.springframework.core.MethodParameter, java.lang.reflect.Type)",
            "public static org.springframework.core.ResolvableType forMethodParameter(org.springframework.core.MethodParameter, java.lang.reflect.Type)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forArrayComponent(org.springframework.core.ResolvableType)",
            "public static org.springframework.core.ResolvableType forArrayComponent(org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forType(java.lang.reflect.Type)",
            "public static org.springframework.core.ResolvableType forType(java.lang.reflect.Type)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forType(java.lang.reflect.Type, org.springframework.core.ResolvableType)",
            "public static org.springframework.core.ResolvableType forType(java.lang.reflect.Type, org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.ResolvableType.forType(org.springframework.core.ParameterizedTypeReference<?>)",
            "public static org.springframework.core.ResolvableType forType(org.springframework.core.ParameterizedTypeReference<?>)"
        ],
        [
            "void",
            "org.springframework.core.ResolvableType.clearCache()",
            "public static void clearCache()"
        ],
        [
            "org.springframework.core.SerializableTypeWrapper$FieldTypeProvider",
            "org.springframework.core.SerializableTypeWrapper$FieldTypeProvider(java.lang.reflect.Field)",
            "public org.springframework.core.SerializableTypeWrapper$FieldTypeProvider(java.lang.reflect.Field)"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.SerializableTypeWrapper$FieldTypeProvider.getType()",
            "public java.lang.reflect.Type getType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.SerializableTypeWrapper$FieldTypeProvider.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider",
            "org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider(org.springframework.core.SerializableTypeWrapper$TypeProvider, java.lang.reflect.Method, int)",
            "public org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider(org.springframework.core.SerializableTypeWrapper$TypeProvider, java.lang.reflect.Method, int)"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider.getType()",
            "public java.lang.reflect.Type getType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider",
            "org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider(org.springframework.core.MethodParameter)",
            "public org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider.getType()",
            "public java.lang.reflect.Type getType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "default",
            "org.springframework.core.SerializableTypeWrapper$TypeProvider.java.lang.Object getSource()",
            "public default java.lang.Object getSource()"
        ],
        [
            "org.springframework.core.SerializableTypeWrapper$TypeProxyInvocationHandler",
            "org.springframework.core.SerializableTypeWrapper$TypeProxyInvocationHandler(org.springframework.core.SerializableTypeWrapper$TypeProvider)",
            "public org.springframework.core.SerializableTypeWrapper$TypeProxyInvocationHandler(org.springframework.core.SerializableTypeWrapper$TypeProvider)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.SerializableTypeWrapper$TypeProxyInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.SerializableTypeWrapper.forField(java.lang.reflect.Field)",
            "public static java.lang.reflect.Type forField(java.lang.reflect.Field)"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.core.SerializableTypeWrapper.forMethodParameter(org.springframework.core.MethodParameter)",
            "public static java.lang.reflect.Type forMethodParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "<T extends java.lang.reflect.Type> T",
            "org.springframework.core.SerializableTypeWrapper.unwrap(T)",
            "public static <T extends java.lang.reflect.Type> T unwrap(T)"
        ],
        [
            "org.springframework.core.SimpleAliasRegistry",
            "org.springframework.core.SimpleAliasRegistry()",
            "public org.springframework.core.SimpleAliasRegistry()"
        ],
        [
            "void",
            "org.springframework.core.SimpleAliasRegistry.registerAlias(java.lang.String, java.lang.String)",
            "public void registerAlias(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.SimpleAliasRegistry.hasAlias(java.lang.String, java.lang.String)",
            "public boolean hasAlias(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.SimpleAliasRegistry.removeAlias(java.lang.String)",
            "public void removeAlias(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.SimpleAliasRegistry.isAlias(java.lang.String)",
            "public boolean isAlias(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.SimpleAliasRegistry.getAliases(java.lang.String)",
            "public java.lang.String[] getAliases(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.SimpleAliasRegistry.resolveAliases(org.springframework.util.StringValueResolver)",
            "public void resolveAliases(org.springframework.util.StringValueResolver)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.SimpleAliasRegistry.canonicalName(java.lang.String)",
            "public java.lang.String canonicalName(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.core.SmartClassLoader.boolean isClassReloadable(java.lang.Class<?>)",
            "public default boolean isClassReloadable(java.lang.Class<?>)"
        ],
        [
            "default",
            "org.springframework.core.SmartClassLoader.java.lang.ClassLoader getOriginalClassLoader()",
            "public default java.lang.ClassLoader getOriginalClassLoader()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.SmartClassLoader.publicDefineClass(java.lang.String, byte[], java.security.ProtectionDomain)",
            "public default java.lang.Class<?> publicDefineClass(java.lang.String, byte[], java.security.ProtectionDomain)"
        ],
        [
            "void",
            "org.springframework.core.SortedProperties.store(java.io.OutputStream, java.lang.String)",
            "public void store(java.io.OutputStream, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.SortedProperties.store(java.io.Writer, java.lang.String)",
            "public void store(java.io.Writer, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.SortedProperties.storeToXML(java.io.OutputStream, java.lang.String)",
            "public void storeToXML(java.io.OutputStream, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.SortedProperties.storeToXML(java.io.OutputStream, java.lang.String, java.lang.String)",
            "public void storeToXML(java.io.OutputStream, java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "java.util.Enumeration<java.lang.Object>",
            "org.springframework.core.SortedProperties.keys()",
            "public synchronized java.util.Enumeration<java.lang.Object> keys()"
        ],
        [
            "java.util.Set<java.lang.Object>",
            "org.springframework.core.SortedProperties.keySet()",
            "public java.util.Set<java.lang.Object> keySet()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>>",
            "org.springframework.core.SortedProperties.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet()"
        ],
        [
            "void",
            "org.springframework.core.SpringProperties.setProperty(java.lang.String, java.lang.String)",
            "public static void setProperty(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.SpringProperties.getProperty(java.lang.String)",
            "public static java.lang.String getProperty(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.SpringProperties.setFlag(java.lang.String)",
            "public static void setFlag(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.SpringProperties.getFlag(java.lang.String)",
            "public static boolean getFlag(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.SpringVersion.getVersion()",
            "public static java.lang.String getVersion()"
        ],
        [
            "org.springframework.core.StandardReflectionParameterNameDiscoverer",
            "org.springframework.core.StandardReflectionParameterNameDiscoverer()",
            "public org.springframework.core.StandardReflectionParameterNameDiscoverer()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.StandardReflectionParameterNameDiscoverer.getParameterNames(java.lang.reflect.Method)",
            "public java.lang.String[] getParameterNames(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.StandardReflectionParameterNameDiscoverer.getParameterNames(java.lang.reflect.Constructor<?>)",
            "public java.lang.String[] getParameterNames(java.lang.reflect.Constructor<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AbstractMergedAnnotation.isDirectlyPresent()",
            "public boolean isDirectlyPresent()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AbstractMergedAnnotation.isMetaPresent()",
            "public boolean isMetaPresent()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AbstractMergedAnnotation.hasNonDefaultValue(java.lang.String)",
            "public boolean hasNonDefaultValue(java.lang.String)"
        ],
        [
            "byte",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getByte(java.lang.String)",
            "public byte getByte(java.lang.String)"
        ],
        [
            "byte[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getByteArray(java.lang.String)",
            "public byte[] getByteArray(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getBoolean(java.lang.String)",
            "public boolean getBoolean(java.lang.String)"
        ],
        [
            "boolean[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getBooleanArray(java.lang.String)",
            "public boolean[] getBooleanArray(java.lang.String)"
        ],
        [
            "char",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getChar(java.lang.String)",
            "public char getChar(java.lang.String)"
        ],
        [
            "char[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getCharArray(java.lang.String)",
            "public char[] getCharArray(java.lang.String)"
        ],
        [
            "short",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getShort(java.lang.String)",
            "public short getShort(java.lang.String)"
        ],
        [
            "short[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getShortArray(java.lang.String)",
            "public short[] getShortArray(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getInt(java.lang.String)",
            "public int getInt(java.lang.String)"
        ],
        [
            "int[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getIntArray(java.lang.String)",
            "public int[] getIntArray(java.lang.String)"
        ],
        [
            "long",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getLong(java.lang.String)",
            "public long getLong(java.lang.String)"
        ],
        [
            "long[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getLongArray(java.lang.String)",
            "public long[] getLongArray(java.lang.String)"
        ],
        [
            "double",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getDouble(java.lang.String)",
            "public double getDouble(java.lang.String)"
        ],
        [
            "double[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getDoubleArray(java.lang.String)",
            "public double[] getDoubleArray(java.lang.String)"
        ],
        [
            "float",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getFloat(java.lang.String)",
            "public float getFloat(java.lang.String)"
        ],
        [
            "float[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getFloatArray(java.lang.String)",
            "public float[] getFloatArray(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getString(java.lang.String)",
            "public java.lang.String getString(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getStringArray(java.lang.String)",
            "public java.lang.String[] getStringArray(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getClass(java.lang.String)",
            "public java.lang.Class<?> getClass(java.lang.String)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getClassArray(java.lang.String)",
            "public java.lang.Class<?>[] getClassArray(java.lang.String)"
        ],
        [
            "<E extends java.lang.Enum<E>> E",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getEnum(java.lang.String, java.lang.Class<E>)",
            "public <E extends java.lang.Enum<E>> E getEnum(java.lang.String, java.lang.Class<E>)"
        ],
        [
            "<E extends java.lang.Enum<E>> E[]",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getEnumArray(java.lang.String, java.lang.Class<E>)",
            "public <E extends java.lang.Enum<E>> E[] getEnumArray(java.lang.String, java.lang.Class<E>)"
        ],
        [
            "java.util.Optional<java.lang.Object>",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getValue(java.lang.String)",
            "public java.util.Optional<java.lang.Object> getValue(java.lang.String)"
        ],
        [
            "<T> java.util.Optional<T>",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getValue(java.lang.String, java.lang.Class<T>)",
            "public <T> java.util.Optional<T> getValue(java.lang.String, java.lang.Class<T>)"
        ],
        [
            "java.util.Optional<java.lang.Object>",
            "org.springframework.core.annotation.AbstractMergedAnnotation.getDefaultValue(java.lang.String)",
            "public java.util.Optional<java.lang.Object> getDefaultValue(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.AbstractMergedAnnotation.filterDefaultValues()",
            "public org.springframework.core.annotation.MergedAnnotation<A> filterDefaultValues()"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AbstractMergedAnnotation.asAnnotationAttributes(org.springframework.core.annotation.MergedAnnotation$Adapt...)",
            "public org.springframework.core.annotation.AnnotationAttributes asAnnotationAttributes(org.springframework.core.annotation.MergedAnnotation$Adapt...)"
        ],
        [
            "java.util.Optional<A>",
            "org.springframework.core.annotation.AbstractMergedAnnotation.synthesize(java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)",
            "public java.util.Optional<A> synthesize(java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>) throws java.util.NoSuchElementException"
        ],
        [
            "A",
            "org.springframework.core.annotation.AbstractMergedAnnotation.synthesize()",
            "public A synthesize()"
        ],
        [
            "<T extends java.lang.annotation.Annotation> T",
            "org.springframework.core.annotation.AnnotatedElementUtils$AnnotatedElementForAnnotations.getAnnotation(java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> T getAnnotation(java.lang.Class<T>)"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.annotation.AnnotatedElementUtils$AnnotatedElementForAnnotations.getAnnotations()",
            "public java.lang.annotation.Annotation[] getAnnotations()"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.annotation.AnnotatedElementUtils$AnnotatedElementForAnnotations.getDeclaredAnnotations()",
            "public java.lang.annotation.Annotation[] getDeclaredAnnotations()"
        ],
        [
            "org.springframework.core.annotation.AnnotatedElementUtils",
            "org.springframework.core.annotation.AnnotatedElementUtils()",
            "public org.springframework.core.annotation.AnnotatedElementUtils()"
        ],
        [
            "java.lang.reflect.AnnotatedElement",
            "org.springframework.core.annotation.AnnotatedElementUtils.forAnnotations(java.lang.annotation.Annotation...)",
            "public static java.lang.reflect.AnnotatedElement forAnnotations(java.lang.annotation.Annotation...)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.annotation.AnnotatedElementUtils.getMetaAnnotationTypes(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static java.util.Set<java.lang.String> getMetaAnnotationTypes(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.annotation.AnnotatedElementUtils.getMetaAnnotationTypes(java.lang.reflect.AnnotatedElement, java.lang.String)",
            "public static java.util.Set<java.lang.String> getMetaAnnotationTypes(java.lang.reflect.AnnotatedElement, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotatedElementUtils.hasMetaAnnotationTypes(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static boolean hasMetaAnnotationTypes(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotatedElementUtils.hasMetaAnnotationTypes(java.lang.reflect.AnnotatedElement, java.lang.String)",
            "public static boolean hasMetaAnnotationTypes(java.lang.reflect.AnnotatedElement, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotatedElementUtils.isAnnotated(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static boolean isAnnotated(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotatedElementUtils.isAnnotated(java.lang.reflect.AnnotatedElement, java.lang.String)",
            "public static boolean isAnnotated(java.lang.reflect.AnnotatedElement, java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotatedElementUtils.getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotatedElementUtils.getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String)",
            "public static org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotatedElementUtils.getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String, boolean, boolean)",
            "public static org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String, boolean, boolean)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotatedElementUtils.getMergedAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A getMergedAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotatedElementUtils.getAllMergedAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> getAllMergedAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "java.util.Set<java.lang.annotation.Annotation>",
            "org.springframework.core.annotation.AnnotatedElementUtils.getAllMergedAnnotations(java.lang.reflect.AnnotatedElement, java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>)",
            "public static java.util.Set<java.lang.annotation.Annotation> getAllMergedAnnotations(java.lang.reflect.AnnotatedElement, java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotatedElementUtils.getMergedRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> getMergedRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotatedElementUtils.getMergedRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> getMergedRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>",
            "org.springframework.core.annotation.AnnotatedElementUtils.getAllAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String)",
            "public static org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object> getAllAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>",
            "org.springframework.core.annotation.AnnotatedElementUtils.getAllAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String, boolean, boolean)",
            "public static org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object> getAllAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String, boolean, boolean)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotatedElementUtils.hasAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static boolean hasAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, boolean)",
            "public static org.springframework.core.annotation.AnnotationAttributes findMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, boolean)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String, boolean, boolean)",
            "public static org.springframework.core.annotation.AnnotationAttributes findMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.String, boolean, boolean)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A findMergedAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotatedElementUtils.findAllMergedAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> findAllMergedAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "java.util.Set<java.lang.annotation.Annotation>",
            "org.springframework.core.annotation.AnnotatedElementUtils.findAllMergedAnnotations(java.lang.reflect.AnnotatedElement, java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>)",
            "public static java.util.Set<java.lang.annotation.Annotation> findAllMergedAnnotations(java.lang.reflect.AnnotatedElement, java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotatedElementUtils.findMergedRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> findMergedRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotatedElementUtils.findMergedRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> findMergedRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationAttributes()",
            "public org.springframework.core.annotation.AnnotationAttributes()"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationAttributes(int)",
            "public org.springframework.core.annotation.AnnotationAttributes(int)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationAttributes(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.annotation.AnnotationAttributes(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationAttributes(org.springframework.core.annotation.AnnotationAttributes)",
            "public org.springframework.core.annotation.AnnotationAttributes(org.springframework.core.annotation.AnnotationAttributes)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationAttributes(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public org.springframework.core.annotation.AnnotationAttributes(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationAttributes(java.lang.String, java.lang.ClassLoader)",
            "public org.springframework.core.annotation.AnnotationAttributes(java.lang.String, java.lang.ClassLoader)"
        ],
        [
            "java.lang.Class<? extends java.lang.annotation.Annotation>",
            "org.springframework.core.annotation.AnnotationAttributes.annotationType()",
            "public java.lang.Class<? extends java.lang.annotation.Annotation> annotationType()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.annotation.AnnotationAttributes.getString(java.lang.String)",
            "public java.lang.String getString(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.annotation.AnnotationAttributes.getStringArray(java.lang.String)",
            "public java.lang.String[] getStringArray(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationAttributes.getBoolean(java.lang.String)",
            "public boolean getBoolean(java.lang.String)"
        ],
        [
            "<N extends java.lang.Number> N",
            "org.springframework.core.annotation.AnnotationAttributes.getNumber(java.lang.String)",
            "public <N extends java.lang.Number> N getNumber(java.lang.String)"
        ],
        [
            "<E extends java.lang.Enum<?>> E",
            "org.springframework.core.annotation.AnnotationAttributes.getEnum(java.lang.String)",
            "public <E extends java.lang.Enum<?>> E getEnum(java.lang.String)"
        ],
        [
            "<T> java.lang.Class<? extends T>",
            "org.springframework.core.annotation.AnnotationAttributes.getClass(java.lang.String)",
            "public <T> java.lang.Class<? extends T> getClass(java.lang.String)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.core.annotation.AnnotationAttributes.getClassArray(java.lang.String)",
            "public java.lang.Class<?>[] getClassArray(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationAttributes.getAnnotation(java.lang.String)",
            "public org.springframework.core.annotation.AnnotationAttributes getAnnotation(java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationAttributes.getAnnotation(java.lang.String, java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.String, java.lang.Class<A>)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes[]",
            "org.springframework.core.annotation.AnnotationAttributes.getAnnotationArray(java.lang.String)",
            "public org.springframework.core.annotation.AnnotationAttributes[] getAnnotationArray(java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A[]",
            "org.springframework.core.annotation.AnnotationAttributes.getAnnotationArray(java.lang.String, java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A[] getAnnotationArray(java.lang.String, java.lang.Class<A>)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.annotation.AnnotationAttributes.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationAttributes.fromMap(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static org.springframework.core.annotation.AnnotationAttributes fromMap(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAwareOrderComparator",
            "org.springframework.core.annotation.AnnotationAwareOrderComparator()",
            "public org.springframework.core.annotation.AnnotationAwareOrderComparator()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.annotation.AnnotationAwareOrderComparator.getPriority(java.lang.Object)",
            "public java.lang.Integer getPriority(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(java.util.List<?>)",
            "public static void sort(java.util.List<?>)"
        ],
        [
            "void",
            "org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(java.lang.Object[])",
            "public static void sort(java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.core.annotation.AnnotationAwareOrderComparator.sortIfNecessary(java.lang.Object)",
            "public static void sortIfNecessary(java.lang.Object)"
        ],
        [
            "org.springframework.core.annotation.AnnotationConfigurationException",
            "org.springframework.core.annotation.AnnotationConfigurationException(java.lang.String)",
            "public org.springframework.core.annotation.AnnotationConfigurationException(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.AnnotationConfigurationException",
            "org.springframework.core.annotation.AnnotationConfigurationException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.annotation.AnnotationConfigurationException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationFilter$1.matches(java.lang.annotation.Annotation)",
            "public boolean matches(java.lang.annotation.Annotation)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationFilter$1.matches(java.lang.Class<?>)",
            "public boolean matches(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationFilter$1.matches(java.lang.String)",
            "public boolean matches(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.annotation.AnnotationFilter$1.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationFilter$2.matches(java.lang.annotation.Annotation)",
            "public boolean matches(java.lang.annotation.Annotation)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationFilter$2.matches(java.lang.Class<?>)",
            "public boolean matches(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationFilter$2.matches(java.lang.String)",
            "public boolean matches(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.annotation.AnnotationFilter$2.toString()",
            "public java.lang.String toString()"
        ],
        [
            "default",
            "org.springframework.core.annotation.AnnotationFilter.boolean matches(java.lang.annotation.Annotation)",
            "public default boolean matches(java.lang.annotation.Annotation)"
        ],
        [
            "default",
            "org.springframework.core.annotation.AnnotationFilter.boolean matches(java.lang.Class<?>)",
            "public default boolean matches(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.annotation.AnnotationFilter",
            "org.springframework.core.annotation.AnnotationFilter.packages(java.lang.String...)",
            "public static org.springframework.core.annotation.AnnotationFilter packages(java.lang.String...)"
        ],
        [
            "org.springframework.core.annotation.AnnotationUtils$DefaultValueHolder",
            "org.springframework.core.annotation.AnnotationUtils$DefaultValueHolder(java.lang.Object)",
            "public org.springframework.core.annotation.AnnotationUtils$DefaultValueHolder(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.annotation.AnnotationUtils$DefaultValueHolder.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.annotation.AnnotationUtils",
            "org.springframework.core.annotation.AnnotationUtils()",
            "public org.springframework.core.annotation.AnnotationUtils()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationUtils.isCandidateClass(java.lang.Class<?>, java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>>)",
            "public static boolean isCandidateClass(java.lang.Class<?>, java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationUtils.isCandidateClass(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static boolean isCandidateClass(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationUtils.isCandidateClass(java.lang.Class<?>, java.lang.String)",
            "public static boolean isCandidateClass(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotation(java.lang.annotation.Annotation, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.annotation.Annotation, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotation(java.lang.reflect.Method, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.reflect.Method, java.lang.Class<A>)"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotations(java.lang.reflect.AnnotatedElement)",
            "public static java.lang.annotation.Annotation[] getAnnotations(java.lang.reflect.AnnotatedElement)"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotations(java.lang.reflect.Method)",
            "public static java.lang.annotation.Annotation[] getAnnotations(java.lang.reflect.Method)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotationUtils.getRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> getRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotationUtils.getRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> getRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotationUtils.getDeclaredRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> getDeclaredRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.Set<A>",
            "org.springframework.core.annotation.AnnotationUtils.getDeclaredRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.Set<A> getDeclaredRepeatableAnnotations(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.findAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A findAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.findAnnotation(java.lang.reflect.Method, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A findAnnotation(java.lang.reflect.Method, java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.findAnnotation(java.lang.Class<?>, java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A findAnnotation(java.lang.Class<?>, java.lang.Class<A>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.annotation.AnnotationUtils.findAnnotationDeclaringClass(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<?>)",
            "public static java.lang.Class<?> findAnnotationDeclaringClass(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.annotation.AnnotationUtils.findAnnotationDeclaringClassForTypes(java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>, java.lang.Class<?>)",
            "public static java.lang.Class<?> findAnnotationDeclaringClassForTypes(java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationUtils.isAnnotationDeclaredLocally(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<?>)",
            "public static boolean isAnnotationDeclaredLocally(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationUtils.isAnnotationInherited(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<?>)",
            "public static boolean isAnnotationInherited(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationUtils.isAnnotationMetaPresent(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static boolean isAnnotationMetaPresent(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationUtils.isInJavaLangAnnotationPackage(java.lang.annotation.Annotation)",
            "public static boolean isInJavaLangAnnotationPackage(java.lang.annotation.Annotation)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.AnnotationUtils.isInJavaLangAnnotationPackage(java.lang.String)",
            "public static boolean isInJavaLangAnnotationPackage(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.annotation.AnnotationUtils.validateAnnotation(java.lang.annotation.Annotation)",
            "public static void validateAnnotation(java.lang.annotation.Annotation)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(java.lang.annotation.Annotation)",
            "public static java.util.Map<java.lang.String, java.lang.Object> getAnnotationAttributes(java.lang.annotation.Annotation)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(java.lang.annotation.Annotation, boolean)",
            "public static java.util.Map<java.lang.String, java.lang.Object> getAnnotationAttributes(java.lang.annotation.Annotation, boolean)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(java.lang.annotation.Annotation, boolean, boolean)",
            "public static org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.annotation.Annotation, boolean, boolean)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.annotation.Annotation)",
            "public static org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.annotation.Annotation)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.annotation.Annotation, boolean, boolean)",
            "public static org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement, java.lang.annotation.Annotation, boolean, boolean)"
        ],
        [
            "void",
            "org.springframework.core.annotation.AnnotationUtils.registerDefaultValues(org.springframework.core.annotation.AnnotationAttributes)",
            "public static void registerDefaultValues(org.springframework.core.annotation.AnnotationAttributes)"
        ],
        [
            "void",
            "org.springframework.core.annotation.AnnotationUtils.postProcessAnnotationAttributes(java.lang.Object, org.springframework.core.annotation.AnnotationAttributes, boolean)",
            "public static void postProcessAnnotationAttributes(java.lang.Object, org.springframework.core.annotation.AnnotationAttributes, boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.AnnotationUtils.getValue(java.lang.annotation.Annotation)",
            "public static java.lang.Object getValue(java.lang.annotation.Annotation)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.AnnotationUtils.getValue(java.lang.annotation.Annotation, java.lang.String)",
            "public static java.lang.Object getValue(java.lang.annotation.Annotation, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.AnnotationUtils.getDefaultValue(java.lang.annotation.Annotation)",
            "public static java.lang.Object getDefaultValue(java.lang.annotation.Annotation)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.AnnotationUtils.getDefaultValue(java.lang.annotation.Annotation, java.lang.String)",
            "public static java.lang.Object getDefaultValue(java.lang.annotation.Annotation, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.AnnotationUtils.getDefaultValue(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static java.lang.Object getDefaultValue(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.AnnotationUtils.getDefaultValue(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.String)",
            "public static java.lang.Object getDefaultValue(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.synthesizeAnnotation(A, java.lang.reflect.AnnotatedElement)",
            "public static <A extends java.lang.annotation.Annotation> A synthesizeAnnotation(A, java.lang.reflect.AnnotatedElement)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.synthesizeAnnotation(java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> A synthesizeAnnotation(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.core.annotation.AnnotationUtils.synthesizeAnnotation(java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<A>, java.lang.reflect.AnnotatedElement)",
            "public static <A extends java.lang.annotation.Annotation> A synthesizeAnnotation(java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<A>, java.lang.reflect.AnnotatedElement)"
        ],
        [
            "void",
            "org.springframework.core.annotation.AnnotationUtils.clearCache()",
            "public static void clearCache()"
        ],
        [
            "default",
            "org.springframework.core.annotation.AnnotationsProcessor.R doWithAggregate(C, int)",
            "public default R doWithAggregate(C, int)"
        ],
        [
            "default",
            "org.springframework.core.annotation.AnnotationsProcessor.R finish(R)",
            "public default R finish(R)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.IntrospectionFailureLogger$1.isEnabled()",
            "public boolean isEnabled()"
        ],
        [
            "void",
            "org.springframework.core.annotation.IntrospectionFailureLogger$1.log(java.lang.String)",
            "public void log(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.IntrospectionFailureLogger$2.isEnabled()",
            "public boolean isEnabled()"
        ],
        [
            "void",
            "org.springframework.core.annotation.IntrospectionFailureLogger$2.log(java.lang.String)",
            "public void log(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.IntrospectionFailureLogger[]",
            "org.springframework.core.annotation.IntrospectionFailureLogger.values()",
            "public static org.springframework.core.annotation.IntrospectionFailureLogger[] values()"
        ],
        [
            "org.springframework.core.annotation.IntrospectionFailureLogger",
            "org.springframework.core.annotation.IntrospectionFailureLogger.valueOf(java.lang.String)",
            "public static org.springframework.core.annotation.IntrospectionFailureLogger valueOf(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation$Adapt[]",
            "org.springframework.core.annotation.MergedAnnotation$Adapt.values()",
            "public static org.springframework.core.annotation.MergedAnnotation$Adapt[] values()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation$Adapt",
            "org.springframework.core.annotation.MergedAnnotation$Adapt.valueOf(java.lang.String)",
            "public static org.springframework.core.annotation.MergedAnnotation$Adapt valueOf(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation$Adapt[]",
            "org.springframework.core.annotation.MergedAnnotation$Adapt.values(boolean, boolean)",
            "public static org.springframework.core.annotation.MergedAnnotation$Adapt[] values(boolean, boolean)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotation.missing()",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> missing()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotation.from(A)",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> from(A)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotation.from(java.lang.Object, A)",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> from(java.lang.Object, A)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotation.of(java.lang.Class<A>)",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> of(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotation.of(java.lang.Class<A>, java.util.Map<java.lang.String, ?>)",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> of(java.lang.Class<A>, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotation.of(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.util.Map<java.lang.String, ?>)",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> of(java.lang.reflect.AnnotatedElement, java.lang.Class<A>, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotation.of(java.lang.ClassLoader, java.lang.Object, java.lang.Class<A>, java.util.Map<java.lang.String, ?>)",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> of(java.lang.ClassLoader, java.lang.Object, java.lang.Class<A>, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, java.util.Set<A>>",
            "org.springframework.core.annotation.MergedAnnotationCollectors.toAnnotationSet()",
            "public static <A extends java.lang.annotation.Annotation> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, java.util.Set<A>> toAnnotationSet()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, java.lang.annotation.Annotation[]>",
            "org.springframework.core.annotation.MergedAnnotationCollectors.toAnnotationArray()",
            "public static <A extends java.lang.annotation.Annotation> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, java.lang.annotation.Annotation[]> toAnnotationArray()"
        ],
        [
            "<R extends java.lang.annotation.Annotation, A extends R> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, R[]>",
            "org.springframework.core.annotation.MergedAnnotationCollectors.toAnnotationArray(java.util.function.IntFunction<R[]>)",
            "public static <R extends java.lang.annotation.Annotation, A extends R> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, R[]> toAnnotationArray(java.util.function.IntFunction<R[]>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>>",
            "org.springframework.core.annotation.MergedAnnotationCollectors.toMultiValueMap(org.springframework.core.annotation.MergedAnnotation$Adapt...)",
            "public static <A extends java.lang.annotation.Annotation> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>> toMultiValueMap(org.springframework.core.annotation.MergedAnnotation$Adapt...)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>>",
            "org.springframework.core.annotation.MergedAnnotationCollectors.toMultiValueMap(java.util.function.Function<org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>, org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>>, org.springframework.core.annotation.MergedAnnotation$Adapt...)",
            "public static <A extends java.lang.annotation.Annotation> java.util.stream.Collector<org.springframework.core.annotation.MergedAnnotation<A>, ?, org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>> toMultiValueMap(java.util.function.Function<org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>, org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>>, org.springframework.core.annotation.MergedAnnotation$Adapt...)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationPredicates$FirstRunOfPredicate.test(org.springframework.core.annotation.MergedAnnotation<A>)",
            "public boolean test(org.springframework.core.annotation.MergedAnnotation<A>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationPredicates$FirstRunOfPredicate.test(java.lang.Object)",
            "public boolean test(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationPredicates$UniquePredicate.test(org.springframework.core.annotation.MergedAnnotation<A>)",
            "public boolean test(org.springframework.core.annotation.MergedAnnotation<A>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationPredicates$UniquePredicate.test(java.lang.Object)",
            "public boolean test(java.lang.Object)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<? extends A>>",
            "org.springframework.core.annotation.MergedAnnotationPredicates.typeIn(java.lang.String...)",
            "public static <A extends java.lang.annotation.Annotation> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<? extends A>> typeIn(java.lang.String...)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<? extends A>>",
            "org.springframework.core.annotation.MergedAnnotationPredicates.typeIn(java.lang.Class<?>...)",
            "public static <A extends java.lang.annotation.Annotation> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<? extends A>> typeIn(java.lang.Class<?>...)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<? extends A>>",
            "org.springframework.core.annotation.MergedAnnotationPredicates.typeIn(java.util.Collection<?>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<? extends A>> typeIn(java.util.Collection<?>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<A>>",
            "org.springframework.core.annotation.MergedAnnotationPredicates.firstRunOf(java.util.function.Function<? super org.springframework.core.annotation.MergedAnnotation<A>, ?>)",
            "public static <A extends java.lang.annotation.Annotation> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<A>> firstRunOf(java.util.function.Function<? super org.springframework.core.annotation.MergedAnnotation<A>, ?>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation, K> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<A>>",
            "org.springframework.core.annotation.MergedAnnotationPredicates.unique(java.util.function.Function<? super org.springframework.core.annotation.MergedAnnotation<A>, K>)",
            "public static <A extends java.lang.annotation.Annotation, K> java.util.function.Predicate<org.springframework.core.annotation.MergedAnnotation<A>> unique(java.util.function.Function<? super org.springframework.core.annotation.MergedAnnotation<A>, K>)"
        ],
        [
            "default",
            "org.springframework.core.annotation.MergedAnnotationSelector.boolean isBestCandidate(org.springframework.core.annotation.MergedAnnotation<A>)",
            "public default boolean isBestCandidate(org.springframework.core.annotation.MergedAnnotation<A>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationSelectors$FirstDirectlyDeclared.isBestCandidate(org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>)",
            "public boolean isBestCandidate(org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>",
            "org.springframework.core.annotation.MergedAnnotationSelectors$FirstDirectlyDeclared.select(org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>, org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>)",
            "public org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation> select(org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>, org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationSelectors$Nearest.isBestCandidate(org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>)",
            "public boolean isBestCandidate(org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>",
            "org.springframework.core.annotation.MergedAnnotationSelectors$Nearest.select(org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>, org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>)",
            "public org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation> select(org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>, org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotationSelector<A>",
            "org.springframework.core.annotation.MergedAnnotationSelectors.nearest()",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotationSelector<A> nearest()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotationSelector<A>",
            "org.springframework.core.annotation.MergedAnnotationSelectors.firstDirectlyDeclared()",
            "public static <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotationSelector<A> firstDirectlyDeclared()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations$SearchStrategy[]",
            "org.springframework.core.annotation.MergedAnnotations$SearchStrategy.values()",
            "public static org.springframework.core.annotation.MergedAnnotations$SearchStrategy[] values()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations$SearchStrategy",
            "org.springframework.core.annotation.MergedAnnotations$SearchStrategy.valueOf(java.lang.String)",
            "public static org.springframework.core.annotation.MergedAnnotations$SearchStrategy valueOf(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.from(java.lang.reflect.AnnotatedElement)",
            "public static org.springframework.core.annotation.MergedAnnotations from(java.lang.reflect.AnnotatedElement)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.from(java.lang.reflect.AnnotatedElement, org.springframework.core.annotation.MergedAnnotations$SearchStrategy)",
            "public static org.springframework.core.annotation.MergedAnnotations from(java.lang.reflect.AnnotatedElement, org.springframework.core.annotation.MergedAnnotations$SearchStrategy)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.from(java.lang.reflect.AnnotatedElement, org.springframework.core.annotation.MergedAnnotations$SearchStrategy, org.springframework.core.annotation.RepeatableContainers)",
            "public static org.springframework.core.annotation.MergedAnnotations from(java.lang.reflect.AnnotatedElement, org.springframework.core.annotation.MergedAnnotations$SearchStrategy, org.springframework.core.annotation.RepeatableContainers)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.from(java.lang.reflect.AnnotatedElement, org.springframework.core.annotation.MergedAnnotations$SearchStrategy, org.springframework.core.annotation.RepeatableContainers, org.springframework.core.annotation.AnnotationFilter)",
            "public static org.springframework.core.annotation.MergedAnnotations from(java.lang.reflect.AnnotatedElement, org.springframework.core.annotation.MergedAnnotations$SearchStrategy, org.springframework.core.annotation.RepeatableContainers, org.springframework.core.annotation.AnnotationFilter)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.from(java.lang.annotation.Annotation...)",
            "public static org.springframework.core.annotation.MergedAnnotations from(java.lang.annotation.Annotation...)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.from(java.lang.Object, java.lang.annotation.Annotation...)",
            "public static org.springframework.core.annotation.MergedAnnotations from(java.lang.Object, java.lang.annotation.Annotation...)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.from(java.lang.Object, java.lang.annotation.Annotation[], org.springframework.core.annotation.RepeatableContainers)",
            "public static org.springframework.core.annotation.MergedAnnotations from(java.lang.Object, java.lang.annotation.Annotation[], org.springframework.core.annotation.RepeatableContainers)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.from(java.lang.Object, java.lang.annotation.Annotation[], org.springframework.core.annotation.RepeatableContainers, org.springframework.core.annotation.AnnotationFilter)",
            "public static org.springframework.core.annotation.MergedAnnotations from(java.lang.Object, java.lang.annotation.Annotation[], org.springframework.core.annotation.RepeatableContainers, org.springframework.core.annotation.AnnotationFilter)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.MergedAnnotations.of(java.util.Collection<org.springframework.core.annotation.MergedAnnotation<?>>)",
            "public static org.springframework.core.annotation.MergedAnnotations of(java.util.Collection<org.springframework.core.annotation.MergedAnnotation<?>>)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator",
            "org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator(org.springframework.core.annotation.MergedAnnotationsCollection, java.lang.Object)",
            "public org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator(org.springframework.core.annotation.MergedAnnotationsCollection, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator.tryAdvance(java.util.function.Consumer<? super org.springframework.core.annotation.MergedAnnotation<A>>)",
            "public boolean tryAdvance(java.util.function.Consumer<? super org.springframework.core.annotation.MergedAnnotation<A>>)"
        ],
        [
            "java.util.Spliterator<org.springframework.core.annotation.MergedAnnotation<A>>",
            "org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator.trySplit()",
            "public java.util.Spliterator<org.springframework.core.annotation.MergedAnnotation<A>> trySplit()"
        ],
        [
            "long",
            "org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator.estimateSize()",
            "public long estimateSize()"
        ],
        [
            "int",
            "org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator.characteristics()",
            "public int characteristics()"
        ],
        [
            "java.util.Iterator<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.iterator()",
            "public java.util.Iterator<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>> iterator()"
        ],
        [
            "java.util.Spliterator<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.spliterator()",
            "public java.util.Spliterator<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>> spliterator()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> boolean",
            "org.springframework.core.annotation.MergedAnnotationsCollection.isPresent(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> boolean isPresent(java.lang.Class<A>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationsCollection.isPresent(java.lang.String)",
            "public boolean isPresent(java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> boolean",
            "org.springframework.core.annotation.MergedAnnotationsCollection.isDirectlyPresent(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> boolean isDirectlyPresent(java.lang.Class<A>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MergedAnnotationsCollection.isDirectlyPresent(java.lang.String)",
            "public boolean isDirectlyPresent(java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.get(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.get(java.lang.Class<A>, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.Class<A>, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.get(java.lang.Class<A>, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>, org.springframework.core.annotation.MergedAnnotationSelector<A>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.Class<A>, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>, org.springframework.core.annotation.MergedAnnotationSelector<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.get(java.lang.String)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.get(java.lang.String, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.String, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.get(java.lang.String, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>, org.springframework.core.annotation.MergedAnnotationSelector<A>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.String, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>, org.springframework.core.annotation.MergedAnnotationSelector<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<A>>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.stream(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<A>> stream(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<A>>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.stream(java.lang.String)",
            "public <A extends java.lang.annotation.Annotation> java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<A>> stream(java.lang.String)"
        ],
        [
            "java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>>",
            "org.springframework.core.annotation.MergedAnnotationsCollection.stream()",
            "public java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>> stream()"
        ],
        [
            "java.lang.Class<A>",
            "org.springframework.core.annotation.MissingMergedAnnotation.getType()",
            "public java.lang.Class<A> getType()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MissingMergedAnnotation.isPresent()",
            "public boolean isPresent()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.MissingMergedAnnotation.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<?>",
            "org.springframework.core.annotation.MissingMergedAnnotation.getMetaSource()",
            "public org.springframework.core.annotation.MergedAnnotation<?> getMetaSource()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<?>",
            "org.springframework.core.annotation.MissingMergedAnnotation.getRoot()",
            "public org.springframework.core.annotation.MergedAnnotation<?> getRoot()"
        ],
        [
            "java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>",
            "org.springframework.core.annotation.MissingMergedAnnotation.getMetaTypes()",
            "public java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> getMetaTypes()"
        ],
        [
            "int",
            "org.springframework.core.annotation.MissingMergedAnnotation.getDistance()",
            "public int getDistance()"
        ],
        [
            "int",
            "org.springframework.core.annotation.MissingMergedAnnotation.getAggregateIndex()",
            "public int getAggregateIndex()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MissingMergedAnnotation.hasNonDefaultValue(java.lang.String)",
            "public boolean hasNonDefaultValue(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.MissingMergedAnnotation.hasDefaultValue(java.lang.String)",
            "public boolean hasDefaultValue(java.lang.String)"
        ],
        [
            "<T> java.util.Optional<T>",
            "org.springframework.core.annotation.MissingMergedAnnotation.getValue(java.lang.String, java.lang.Class<T>)",
            "public <T> java.util.Optional<T> getValue(java.lang.String, java.lang.Class<T>)"
        ],
        [
            "<T> java.util.Optional<T>",
            "org.springframework.core.annotation.MissingMergedAnnotation.getDefaultValue(java.lang.String, java.lang.Class<T>)",
            "public <T> java.util.Optional<T> getDefaultValue(java.lang.String, java.lang.Class<T>)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MissingMergedAnnotation.filterAttributes(java.util.function.Predicate<java.lang.String>)",
            "public org.springframework.core.annotation.MergedAnnotation<A> filterAttributes(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.MissingMergedAnnotation.withNonMergedAttributes()",
            "public org.springframework.core.annotation.MergedAnnotation<A> withNonMergedAttributes()"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.annotation.MissingMergedAnnotation.asAnnotationAttributes(org.springframework.core.annotation.MergedAnnotation$Adapt...)",
            "public org.springframework.core.annotation.AnnotationAttributes asAnnotationAttributes(org.springframework.core.annotation.MergedAnnotation$Adapt...)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.annotation.MissingMergedAnnotation.asMap(org.springframework.core.annotation.MergedAnnotation$Adapt...)",
            "public java.util.Map<java.lang.String, java.lang.Object> asMap(org.springframework.core.annotation.MergedAnnotation$Adapt...)"
        ],
        [
            "<T extends java.util.Map<java.lang.String, java.lang.Object>> T",
            "org.springframework.core.annotation.MissingMergedAnnotation.asMap(java.util.function.Function<org.springframework.core.annotation.MergedAnnotation<?>, T>, org.springframework.core.annotation.MergedAnnotation$Adapt...)",
            "public <T extends java.util.Map<java.lang.String, java.lang.Object>> T asMap(java.util.function.Function<org.springframework.core.annotation.MergedAnnotation<?>, T>, org.springframework.core.annotation.MergedAnnotation$Adapt...)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.annotation.MissingMergedAnnotation.toString()",
            "public java.lang.String toString()"
        ],
        [
            "<T extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<T>",
            "org.springframework.core.annotation.MissingMergedAnnotation.getAnnotation(java.lang.String, java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<T> getAnnotation(java.lang.String, java.lang.Class<T>) throws java.util.NoSuchElementException"
        ],
        [
            "<T extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<T>[]",
            "org.springframework.core.annotation.MissingMergedAnnotation.getAnnotationArray(java.lang.String, java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<T>[] getAnnotationArray(java.lang.String, java.lang.Class<T>) throws java.util.NoSuchElementException"
        ],
        [
            "org.springframework.core.annotation.OrderUtils",
            "org.springframework.core.annotation.OrderUtils()",
            "public org.springframework.core.annotation.OrderUtils()"
        ],
        [
            "int",
            "org.springframework.core.annotation.OrderUtils.getOrder(java.lang.Class<?>, int)",
            "public static int getOrder(java.lang.Class<?>, int)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.annotation.OrderUtils.getOrder(java.lang.Class<?>, java.lang.Integer)",
            "public static java.lang.Integer getOrder(java.lang.Class<?>, java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.annotation.OrderUtils.getOrder(java.lang.Class<?>)",
            "public static java.lang.Integer getOrder(java.lang.Class<?>)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.annotation.OrderUtils.getOrder(java.lang.reflect.AnnotatedElement)",
            "public static java.lang.Integer getOrder(java.lang.reflect.AnnotatedElement)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.annotation.OrderUtils.getPriority(java.lang.Class<?>)",
            "public static java.lang.Integer getPriority(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.PackagesAnnotationFilter.matches(java.lang.String)",
            "public boolean matches(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.PackagesAnnotationFilter.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.annotation.PackagesAnnotationFilter.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.annotation.PackagesAnnotationFilter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.RepeatableContainers$ExplicitRepeatableContainer.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.annotation.RepeatableContainers$ExplicitRepeatableContainer.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.annotation.RepeatableContainers",
            "org.springframework.core.annotation.RepeatableContainers.and(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public org.springframework.core.annotation.RepeatableContainers and(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.RepeatableContainers.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.annotation.RepeatableContainers.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.annotation.RepeatableContainers",
            "org.springframework.core.annotation.RepeatableContainers.standardRepeatables()",
            "public static org.springframework.core.annotation.RepeatableContainers standardRepeatables()"
        ],
        [
            "org.springframework.core.annotation.RepeatableContainers",
            "org.springframework.core.annotation.RepeatableContainers.of(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static org.springframework.core.annotation.RepeatableContainers of(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.core.annotation.RepeatableContainers",
            "org.springframework.core.annotation.RepeatableContainers.none()",
            "public static org.springframework.core.annotation.RepeatableContainers none()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.core.annotation.SynthesizingMethodParameter(java.lang.reflect.Method, int)",
            "public org.springframework.core.annotation.SynthesizingMethodParameter(java.lang.reflect.Method, int)"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.core.annotation.SynthesizingMethodParameter(java.lang.reflect.Method, int, int)",
            "public org.springframework.core.annotation.SynthesizingMethodParameter(java.lang.reflect.Method, int, int)"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.core.annotation.SynthesizingMethodParameter(java.lang.reflect.Constructor<?>, int)",
            "public org.springframework.core.annotation.SynthesizingMethodParameter(java.lang.reflect.Constructor<?>, int)"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.core.annotation.SynthesizingMethodParameter(java.lang.reflect.Constructor<?>, int, int)",
            "public org.springframework.core.annotation.SynthesizingMethodParameter(java.lang.reflect.Constructor<?>, int, int)"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.core.annotation.SynthesizingMethodParameter.clone()",
            "public org.springframework.core.annotation.SynthesizingMethodParameter clone()"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.core.annotation.SynthesizingMethodParameter.forExecutable(java.lang.reflect.Executable, int)",
            "public static org.springframework.core.annotation.SynthesizingMethodParameter forExecutable(java.lang.reflect.Executable, int)"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.core.annotation.SynthesizingMethodParameter.forParameter(java.lang.reflect.Parameter)",
            "public static org.springframework.core.annotation.SynthesizingMethodParameter forParameter(java.lang.reflect.Parameter)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.core.annotation.SynthesizingMethodParameter.clone()",
            "public org.springframework.core.MethodParameter clone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.SynthesizingMethodParameter.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "java.lang.Class<A>",
            "org.springframework.core.annotation.TypeMappedAnnotation.getType()",
            "public java.lang.Class<A> getType()"
        ],
        [
            "java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>",
            "org.springframework.core.annotation.TypeMappedAnnotation.getMetaTypes()",
            "public java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> getMetaTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.TypeMappedAnnotation.isPresent()",
            "public boolean isPresent()"
        ],
        [
            "int",
            "org.springframework.core.annotation.TypeMappedAnnotation.getDistance()",
            "public int getDistance()"
        ],
        [
            "int",
            "org.springframework.core.annotation.TypeMappedAnnotation.getAggregateIndex()",
            "public int getAggregateIndex()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.TypeMappedAnnotation.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<?>",
            "org.springframework.core.annotation.TypeMappedAnnotation.getMetaSource()",
            "public org.springframework.core.annotation.MergedAnnotation<?> getMetaSource()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<?>",
            "org.springframework.core.annotation.TypeMappedAnnotation.getRoot()",
            "public org.springframework.core.annotation.MergedAnnotation<?> getRoot()"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.TypeMappedAnnotation.hasDefaultValue(java.lang.String)",
            "public boolean hasDefaultValue(java.lang.String)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<T>",
            "org.springframework.core.annotation.TypeMappedAnnotation.getAnnotation(java.lang.String, java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<T> getAnnotation(java.lang.String, java.lang.Class<T>) throws java.util.NoSuchElementException"
        ],
        [
            "<T extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<T>[]",
            "org.springframework.core.annotation.TypeMappedAnnotation.getAnnotationArray(java.lang.String, java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<T>[] getAnnotationArray(java.lang.String, java.lang.Class<T>) throws java.util.NoSuchElementException"
        ],
        [
            "<T> java.util.Optional<T>",
            "org.springframework.core.annotation.TypeMappedAnnotation.getDefaultValue(java.lang.String, java.lang.Class<T>)",
            "public <T> java.util.Optional<T> getDefaultValue(java.lang.String, java.lang.Class<T>)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotation.filterAttributes(java.util.function.Predicate<java.lang.String>)",
            "public org.springframework.core.annotation.MergedAnnotation<A> filterAttributes(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotation.withNonMergedAttributes()",
            "public org.springframework.core.annotation.MergedAnnotation<A> withNonMergedAttributes()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.annotation.TypeMappedAnnotation.asMap(org.springframework.core.annotation.MergedAnnotation$Adapt...)",
            "public java.util.Map<java.lang.String, java.lang.Object> asMap(org.springframework.core.annotation.MergedAnnotation$Adapt...)"
        ],
        [
            "<T extends java.util.Map<java.lang.String, java.lang.Object>> T",
            "org.springframework.core.annotation.TypeMappedAnnotation.asMap(java.util.function.Function<org.springframework.core.annotation.MergedAnnotation<?>, T>, org.springframework.core.annotation.MergedAnnotation$Adapt...)",
            "public <T extends java.util.Map<java.lang.String, java.lang.Object>> T asMap(java.util.function.Function<org.springframework.core.annotation.MergedAnnotation<?>, T>, org.springframework.core.annotation.MergedAnnotation$Adapt...)"
        ],
        [
            "java.util.List<org.springframework.core.annotation.TypeMappedAnnotations$Aggregate>",
            "org.springframework.core.annotation.TypeMappedAnnotations$AggregatesCollector.doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])",
            "public java.util.List<org.springframework.core.annotation.TypeMappedAnnotations$Aggregate> doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])"
        ],
        [
            "java.util.List<org.springframework.core.annotation.TypeMappedAnnotations$Aggregate>",
            "org.springframework.core.annotation.TypeMappedAnnotations$AggregatesCollector.finish(java.util.List<org.springframework.core.annotation.TypeMappedAnnotations$Aggregate>)",
            "public java.util.List<org.springframework.core.annotation.TypeMappedAnnotations$Aggregate> finish(java.util.List<org.springframework.core.annotation.TypeMappedAnnotations$Aggregate>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.TypeMappedAnnotations$AggregatesCollector.finish(java.lang.Object)",
            "public java.lang.Object finish(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.TypeMappedAnnotations$AggregatesCollector.doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])",
            "public java.lang.Object doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator.tryAdvance(java.util.function.Consumer<? super org.springframework.core.annotation.MergedAnnotation<A>>)",
            "public boolean tryAdvance(java.util.function.Consumer<? super org.springframework.core.annotation.MergedAnnotation<A>>)"
        ],
        [
            "java.util.Spliterator<org.springframework.core.annotation.MergedAnnotation<A>>",
            "org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator.trySplit()",
            "public java.util.Spliterator<org.springframework.core.annotation.MergedAnnotation<A>> trySplit()"
        ],
        [
            "long",
            "org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator.estimateSize()",
            "public long estimateSize()"
        ],
        [
            "int",
            "org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator.characteristics()",
            "public int characteristics()"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.core.annotation.TypeMappedAnnotations$IsPresent.doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])",
            "public java.lang.Boolean doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.TypeMappedAnnotations$IsPresent.doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])",
            "public java.lang.Object doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.doWithAggregate(java.lang.Object, int)",
            "public org.springframework.core.annotation.MergedAnnotation<A> doWithAggregate(java.lang.Object, int)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])",
            "public org.springframework.core.annotation.MergedAnnotation<A> doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.finish(org.springframework.core.annotation.MergedAnnotation<A>)",
            "public org.springframework.core.annotation.MergedAnnotation<A> finish(org.springframework.core.annotation.MergedAnnotation<A>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.finish(java.lang.Object)",
            "public java.lang.Object finish(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])",
            "public java.lang.Object doWithAnnotations(java.lang.Object, int, java.lang.Object, java.lang.annotation.Annotation[])"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.doWithAggregate(java.lang.Object, int)",
            "public java.lang.Object doWithAggregate(java.lang.Object, int)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> boolean",
            "org.springframework.core.annotation.TypeMappedAnnotations.isPresent(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> boolean isPresent(java.lang.Class<A>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.TypeMappedAnnotations.isPresent(java.lang.String)",
            "public boolean isPresent(java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> boolean",
            "org.springframework.core.annotation.TypeMappedAnnotations.isDirectlyPresent(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> boolean isDirectlyPresent(java.lang.Class<A>)"
        ],
        [
            "boolean",
            "org.springframework.core.annotation.TypeMappedAnnotations.isDirectlyPresent(java.lang.String)",
            "public boolean isDirectlyPresent(java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations.get(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations.get(java.lang.Class<A>, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.Class<A>, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations.get(java.lang.Class<A>, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>, org.springframework.core.annotation.MergedAnnotationSelector<A>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.Class<A>, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>, org.springframework.core.annotation.MergedAnnotationSelector<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations.get(java.lang.String)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.String)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations.get(java.lang.String, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.String, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A>",
            "org.springframework.core.annotation.TypeMappedAnnotations.get(java.lang.String, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>, org.springframework.core.annotation.MergedAnnotationSelector<A>)",
            "public <A extends java.lang.annotation.Annotation> org.springframework.core.annotation.MergedAnnotation<A> get(java.lang.String, java.util.function.Predicate<? super org.springframework.core.annotation.MergedAnnotation<A>>, org.springframework.core.annotation.MergedAnnotationSelector<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<A>>",
            "org.springframework.core.annotation.TypeMappedAnnotations.stream(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<A>> stream(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<A>>",
            "org.springframework.core.annotation.TypeMappedAnnotations.stream(java.lang.String)",
            "public <A extends java.lang.annotation.Annotation> java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<A>> stream(java.lang.String)"
        ],
        [
            "java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>>",
            "org.springframework.core.annotation.TypeMappedAnnotations.stream()",
            "public java.util.stream.Stream<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>> stream()"
        ],
        [
            "java.util.Iterator<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>>",
            "org.springframework.core.annotation.TypeMappedAnnotations.iterator()",
            "public java.util.Iterator<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>> iterator()"
        ],
        [
            "java.util.Spliterator<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>>",
            "org.springframework.core.annotation.TypeMappedAnnotations.spliterator()",
            "public java.util.Spliterator<org.springframework.core.annotation.MergedAnnotation<java.lang.annotation.Annotation>> spliterator()"
        ],
        [
            "void",
            "org.springframework.core.codec.AbstractDataBufferDecoder.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "int",
            "org.springframework.core.codec.AbstractDataBufferDecoder.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "reactor.core.publisher.Flux<T>",
            "org.springframework.core.codec.AbstractDataBufferDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<T> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<T>",
            "org.springframework.core.codec.AbstractDataBufferDecoder.decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<T> decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.core.codec.AbstractDecoder.setLogger(org.apache.commons.logging.Log)",
            "public void setLogger(org.apache.commons.logging.Log)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.core.codec.AbstractDecoder.getLogger()",
            "public org.apache.commons.logging.Log getLogger()"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.core.codec.AbstractDecoder.getDecodableMimeTypes()",
            "public java.util.List<org.springframework.util.MimeType> getDecodableMimeTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Mono<T>",
            "org.springframework.core.codec.AbstractDecoder.decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<T> decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.core.codec.AbstractEncoder.setLogger(org.apache.commons.logging.Log)",
            "public void setLogger(org.apache.commons.logging.Log)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.core.codec.AbstractEncoder.getLogger()",
            "public org.apache.commons.logging.Log getLogger()"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.core.codec.AbstractEncoder.getEncodableMimeTypes()",
            "public java.util.List<org.springframework.util.MimeType> getEncodableMimeTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.AbstractEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.core.codec.AbstractSingleValueEncoder",
            "org.springframework.core.codec.AbstractSingleValueEncoder(org.springframework.util.MimeType...)",
            "public org.springframework.core.codec.AbstractSingleValueEncoder(org.springframework.util.MimeType...)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.codec.AbstractSingleValueEncoder.encode(org.reactivestreams.Publisher<? extends T>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public final reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends T>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.codec.ByteArrayDecoder",
            "org.springframework.core.codec.ByteArrayDecoder()",
            "public org.springframework.core.codec.ByteArrayDecoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.ByteArrayDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "byte[]",
            "org.springframework.core.codec.ByteArrayDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public byte[] decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.codec.ByteArrayDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "org.springframework.core.codec.ByteArrayEncoder",
            "org.springframework.core.codec.ByteArrayEncoder()",
            "public org.springframework.core.codec.ByteArrayEncoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.ByteArrayEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.codec.ByteArrayEncoder.encode(org.reactivestreams.Publisher<? extends byte[]>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends byte[]>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.ByteArrayEncoder.encodeValue(byte[], org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(byte[], org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.ByteArrayEncoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)"
        ],
        [
            "org.springframework.core.codec.ByteBufferDecoder",
            "org.springframework.core.codec.ByteBufferDecoder()",
            "public org.springframework.core.codec.ByteBufferDecoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.ByteBufferDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.core.codec.ByteBufferDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.nio.ByteBuffer decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.codec.ByteBufferDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "org.springframework.core.codec.ByteBufferEncoder",
            "org.springframework.core.codec.ByteBufferEncoder()",
            "public org.springframework.core.codec.ByteBufferEncoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.ByteBufferEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.codec.ByteBufferEncoder.encode(org.reactivestreams.Publisher<? extends java.nio.ByteBuffer>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends java.nio.ByteBuffer>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.ByteBufferEncoder.encodeValue(java.nio.ByteBuffer, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.nio.ByteBuffer, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.ByteBufferEncoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)"
        ],
        [
            "boolean",
            "org.springframework.core.codec.CharSequenceEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.codec.CharSequenceEncoder.encode(org.reactivestreams.Publisher<? extends java.lang.CharSequence>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends java.lang.CharSequence>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.CharSequenceEncoder.encodeValue(java.lang.CharSequence, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.CharSequence, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.codec.CharSequenceEncoder",
            "org.springframework.core.codec.CharSequenceEncoder.textPlainOnly()",
            "public static org.springframework.core.codec.CharSequenceEncoder textPlainOnly()"
        ],
        [
            "org.springframework.core.codec.CharSequenceEncoder",
            "org.springframework.core.codec.CharSequenceEncoder.allMimeTypes()",
            "public static org.springframework.core.codec.CharSequenceEncoder allMimeTypes()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.CharSequenceEncoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)"
        ],
        [
            "org.springframework.core.codec.CodecException",
            "org.springframework.core.codec.CodecException(java.lang.String)",
            "public org.springframework.core.codec.CodecException(java.lang.String)"
        ],
        [
            "org.springframework.core.codec.CodecException",
            "org.springframework.core.codec.CodecException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.codec.CodecException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.codec.DataBufferDecoder",
            "org.springframework.core.codec.DataBufferDecoder()",
            "public org.springframework.core.codec.DataBufferDecoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.DataBufferDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.codec.DataBufferDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.DataBufferDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.codec.DataBufferDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "org.springframework.core.codec.DataBufferEncoder",
            "org.springframework.core.codec.DataBufferEncoder()",
            "public org.springframework.core.codec.DataBufferEncoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.DataBufferEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.codec.DataBufferEncoder.encode(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.DataBufferEncoder.encodeValue(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.DataBufferEncoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)"
        ],
        [
            "default",
            "org.springframework.core.codec.Decoder.T decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public default T decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.core.codec.Decoder.getDecodableMimeTypes(org.springframework.core.ResolvableType)",
            "public default java.util.List<org.springframework.util.MimeType> getDecodableMimeTypes(org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.core.codec.DecodingException",
            "org.springframework.core.codec.DecodingException(java.lang.String)",
            "public org.springframework.core.codec.DecodingException(java.lang.String)"
        ],
        [
            "org.springframework.core.codec.DecodingException",
            "org.springframework.core.codec.DecodingException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.codec.DecodingException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "default",
            "org.springframework.core.codec.Encoder.org.springframework.core.io.buffer.DataBuffer encodeValue(T, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public default org.springframework.core.io.buffer.DataBuffer encodeValue(T, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.core.codec.Encoder.getEncodableMimeTypes(org.springframework.core.ResolvableType)",
            "public default java.util.List<org.springframework.util.MimeType> getEncodableMimeTypes(org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.core.codec.EncodingException",
            "org.springframework.core.codec.EncodingException(java.lang.String)",
            "public org.springframework.core.codec.EncodingException(java.lang.String)"
        ],
        [
            "org.springframework.core.codec.EncodingException",
            "org.springframework.core.codec.EncodingException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.codec.EncodingException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.codec.Hints",
            "org.springframework.core.codec.Hints()",
            "public org.springframework.core.codec.Hints()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.codec.Hints.from(java.lang.String, java.lang.Object)",
            "public static java.util.Map<java.lang.String, java.lang.Object> from(java.lang.String, java.lang.Object)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.codec.Hints.none()",
            "public static java.util.Map<java.lang.String, java.lang.Object> none()"
        ],
        [
            "<T> T",
            "org.springframework.core.codec.Hints.getRequiredHint(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String)",
            "public static <T> T getRequiredHint(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.codec.Hints.getLogPrefix(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.lang.String getLogPrefix(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "boolean",
            "org.springframework.core.codec.Hints.isLoggingSuppressed(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static boolean isLoggingSuppressed(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.codec.Hints.merge(java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.util.Map<java.lang.String, java.lang.Object> merge(java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.codec.Hints.merge(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.lang.Object)",
            "public static java.util.Map<java.lang.String, java.lang.Object> merge(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.codec.Hints.touchDataBuffer(org.springframework.core.io.buffer.DataBuffer, java.util.Map<java.lang.String, java.lang.Object>, org.apache.commons.logging.Log)",
            "public static void touchDataBuffer(org.springframework.core.io.buffer.DataBuffer, java.util.Map<java.lang.String, java.lang.Object>, org.apache.commons.logging.Log)"
        ],
        [
            "org.springframework.core.codec.NettyByteBufDecoder",
            "org.springframework.core.codec.NettyByteBufDecoder()",
            "public org.springframework.core.codec.NettyByteBufDecoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.NettyByteBufDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "io.netty.buffer.ByteBuf",
            "org.springframework.core.codec.NettyByteBufDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public io.netty.buffer.ByteBuf decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.codec.NettyByteBufDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "org.springframework.core.codec.NettyByteBufEncoder",
            "org.springframework.core.codec.NettyByteBufEncoder()",
            "public org.springframework.core.codec.NettyByteBufEncoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.NettyByteBufEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.codec.NettyByteBufEncoder.encode(org.reactivestreams.Publisher<? extends io.netty.buffer.ByteBuf>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends io.netty.buffer.ByteBuf>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.NettyByteBufEncoder.encodeValue(io.netty.buffer.ByteBuf, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(io.netty.buffer.ByteBuf, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.codec.NettyByteBufEncoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.codec.ResourceDecoder$1.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "long",
            "org.springframework.core.codec.ResourceDecoder$1.contentLength()",
            "public long contentLength()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.codec.ResourceDecoder$2.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "org.springframework.core.codec.ResourceDecoder",
            "org.springframework.core.codec.ResourceDecoder()",
            "public org.springframework.core.codec.ResourceDecoder()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.ResourceDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.Resource>",
            "org.springframework.core.codec.ResourceDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.Resource> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.codec.ResourceDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.Resource decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.codec.ResourceDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "org.springframework.core.codec.ResourceEncoder",
            "org.springframework.core.codec.ResourceEncoder()",
            "public org.springframework.core.codec.ResourceEncoder()"
        ],
        [
            "org.springframework.core.codec.ResourceEncoder",
            "org.springframework.core.codec.ResourceEncoder(int)",
            "public org.springframework.core.codec.ResourceEncoder(int)"
        ],
        [
            "boolean",
            "org.springframework.core.codec.ResourceEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.core.codec.ResourceRegionEncoder",
            "org.springframework.core.codec.ResourceRegionEncoder()",
            "public org.springframework.core.codec.ResourceRegionEncoder()"
        ],
        [
            "org.springframework.core.codec.ResourceRegionEncoder",
            "org.springframework.core.codec.ResourceRegionEncoder(int)",
            "public org.springframework.core.codec.ResourceRegionEncoder(int)"
        ],
        [
            "boolean",
            "org.springframework.core.codec.ResourceRegionEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.codec.ResourceRegionEncoder.encode(org.reactivestreams.Publisher<? extends org.springframework.core.io.support.ResourceRegion>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends org.springframework.core.io.support.ResourceRegion>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.core.codec.StringDecoder.setDefaultCharset(java.nio.charset.Charset)",
            "public void setDefaultCharset(java.nio.charset.Charset)"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.core.codec.StringDecoder.getDefaultCharset()",
            "public java.nio.charset.Charset getDefaultCharset()"
        ],
        [
            "boolean",
            "org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<java.lang.String>",
            "org.springframework.core.codec.StringDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<java.lang.String> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.codec.StringDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.String decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.codec.StringDecoder",
            "org.springframework.core.codec.StringDecoder.textPlainOnly(boolean)",
            "public static org.springframework.core.codec.StringDecoder textPlainOnly(boolean)"
        ],
        [
            "org.springframework.core.codec.StringDecoder",
            "org.springframework.core.codec.StringDecoder.textPlainOnly()",
            "public static org.springframework.core.codec.StringDecoder textPlainOnly()"
        ],
        [
            "org.springframework.core.codec.StringDecoder",
            "org.springframework.core.codec.StringDecoder.textPlainOnly(java.util.List<java.lang.String>, boolean)",
            "public static org.springframework.core.codec.StringDecoder textPlainOnly(java.util.List<java.lang.String>, boolean)"
        ],
        [
            "org.springframework.core.codec.StringDecoder",
            "org.springframework.core.codec.StringDecoder.allMimeTypes(boolean)",
            "public static org.springframework.core.codec.StringDecoder allMimeTypes(boolean)"
        ],
        [
            "org.springframework.core.codec.StringDecoder",
            "org.springframework.core.codec.StringDecoder.allMimeTypes()",
            "public static org.springframework.core.codec.StringDecoder allMimeTypes()"
        ],
        [
            "org.springframework.core.codec.StringDecoder",
            "org.springframework.core.codec.StringDecoder.allMimeTypes(java.util.List<java.lang.String>, boolean)",
            "public static org.springframework.core.codec.StringDecoder allMimeTypes(java.util.List<java.lang.String>, boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.codec.StringDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "org.springframework.core.convert.ConversionException",
            "org.springframework.core.convert.ConversionException(java.lang.String)",
            "public org.springframework.core.convert.ConversionException(java.lang.String)"
        ],
        [
            "org.springframework.core.convert.ConversionException",
            "org.springframework.core.convert.ConversionException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.convert.ConversionException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.convert.ConversionFailedException",
            "org.springframework.core.convert.ConversionFailedException(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor, java.lang.Object, java.lang.Throwable)",
            "public org.springframework.core.convert.ConversionFailedException(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor, java.lang.Object, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.ConversionFailedException.getSourceType()",
            "public org.springframework.core.convert.TypeDescriptor getSourceType()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.ConversionFailedException.getTargetType()",
            "public org.springframework.core.convert.TypeDescriptor getTargetType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.ConversionFailedException.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "org.springframework.core.convert.ConverterNotFoundException",
            "org.springframework.core.convert.ConverterNotFoundException(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public org.springframework.core.convert.ConverterNotFoundException(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.ConverterNotFoundException.getSourceType()",
            "public org.springframework.core.convert.TypeDescriptor getSourceType()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.ConverterNotFoundException.getTargetType()",
            "public org.springframework.core.convert.TypeDescriptor getTargetType()"
        ],
        [
            "org.springframework.core.convert.Property",
            "org.springframework.core.convert.Property(java.lang.Class<?>, java.lang.reflect.Method, java.lang.reflect.Method)",
            "public org.springframework.core.convert.Property(java.lang.Class<?>, java.lang.reflect.Method, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.core.convert.Property",
            "org.springframework.core.convert.Property(java.lang.Class<?>, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.String)",
            "public org.springframework.core.convert.Property(java.lang.Class<?>, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.convert.Property.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.Property.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.convert.Property.getType()",
            "public java.lang.Class<?> getType()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.core.convert.Property.getReadMethod()",
            "public java.lang.reflect.Method getReadMethod()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.core.convert.Property.getWriteMethod()",
            "public java.lang.reflect.Method getWriteMethod()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.Property.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.convert.Property.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter(org.springframework.core.convert.TypeDescriptor, java.lang.annotation.Annotation[])",
            "public org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter(org.springframework.core.convert.TypeDescriptor, java.lang.annotation.Annotation[])"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> T",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.getAnnotation(java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> T getAnnotation(java.lang.Class<T>)"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.getAnnotations()",
            "public java.lang.annotation.Annotation[] getAnnotations()"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.getDeclaredAnnotations()",
            "public java.lang.annotation.Annotation[] getDeclaredAnnotations()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor(org.springframework.core.MethodParameter)",
            "public org.springframework.core.convert.TypeDescriptor(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor(java.lang.reflect.Field)",
            "public org.springframework.core.convert.TypeDescriptor(java.lang.reflect.Field)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor(org.springframework.core.convert.Property)",
            "public org.springframework.core.convert.TypeDescriptor(org.springframework.core.convert.Property)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor(org.springframework.core.ResolvableType, java.lang.Class<?>, java.lang.annotation.Annotation[])",
            "public org.springframework.core.convert.TypeDescriptor(org.springframework.core.ResolvableType, java.lang.Class<?>, java.lang.annotation.Annotation[])"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.convert.TypeDescriptor.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.convert.TypeDescriptor.getType()",
            "public java.lang.Class<?> getType()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.core.convert.TypeDescriptor.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.TypeDescriptor.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.narrow(java.lang.Object)",
            "public org.springframework.core.convert.TypeDescriptor narrow(java.lang.Object)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.upcast(java.lang.Class<?>)",
            "public org.springframework.core.convert.TypeDescriptor upcast(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.TypeDescriptor.getName()",
            "public java.lang.String getName()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor.isPrimitive()",
            "public boolean isPrimitive()"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.core.convert.TypeDescriptor.getAnnotations()",
            "public java.lang.annotation.Annotation[] getAnnotations()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor.hasAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public boolean hasAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> T",
            "org.springframework.core.convert.TypeDescriptor.getAnnotation(java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> T getAnnotation(java.lang.Class<T>)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor.isAssignableTo(org.springframework.core.convert.TypeDescriptor)",
            "public boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor.isCollection()",
            "public boolean isCollection()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor.isArray()",
            "public boolean isArray()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.getElementTypeDescriptor()",
            "public org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.elementTypeDescriptor(java.lang.Object)",
            "public org.springframework.core.convert.TypeDescriptor elementTypeDescriptor(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor.isMap()",
            "public boolean isMap()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.getMapKeyTypeDescriptor()",
            "public org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.getMapKeyTypeDescriptor(java.lang.Object)",
            "public org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor(java.lang.Object)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.getMapValueTypeDescriptor()",
            "public org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.getMapValueTypeDescriptor(java.lang.Object)",
            "public org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.TypeDescriptor.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.convert.TypeDescriptor.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.TypeDescriptor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.forObject(java.lang.Object)",
            "public static org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.valueOf(java.lang.Class<?>)",
            "public static org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.collection(java.lang.Class<?>, org.springframework.core.convert.TypeDescriptor)",
            "public static org.springframework.core.convert.TypeDescriptor collection(java.lang.Class<?>, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.map(java.lang.Class<?>, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public static org.springframework.core.convert.TypeDescriptor map(java.lang.Class<?>, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.array(org.springframework.core.convert.TypeDescriptor)",
            "public static org.springframework.core.convert.TypeDescriptor array(org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.nested(org.springframework.core.MethodParameter, int)",
            "public static org.springframework.core.convert.TypeDescriptor nested(org.springframework.core.MethodParameter, int)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.nested(java.lang.reflect.Field, int)",
            "public static org.springframework.core.convert.TypeDescriptor nested(java.lang.reflect.Field, int)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.TypeDescriptor.nested(org.springframework.core.convert.Property, int)",
            "public static org.springframework.core.convert.TypeDescriptor nested(org.springframework.core.convert.Property, int)"
        ],
        [
            "<U> org.springframework.core.convert.converter.Converter<S, U>",
            "org.springframework.core.convert.converter.Converter.andThen(org.springframework.core.convert.converter.Converter<? super T, ? extends U>)",
            "public default <U> org.springframework.core.convert.converter.Converter<S, U> andThen(org.springframework.core.convert.converter.Converter<? super T, ? extends U>)"
        ],
        [
            "org.springframework.core.convert.converter.ConvertingComparator$ConversionServiceConverter",
            "org.springframework.core.convert.converter.ConvertingComparator$ConversionServiceConverter(org.springframework.core.convert.ConversionService, java.lang.Class<? extends T>)",
            "public org.springframework.core.convert.converter.ConvertingComparator$ConversionServiceConverter(org.springframework.core.convert.ConversionService, java.lang.Class<? extends T>)"
        ],
        [
            "T",
            "org.springframework.core.convert.converter.ConvertingComparator$ConversionServiceConverter.convert(S)",
            "public T convert(S)"
        ],
        [
            "org.springframework.core.convert.converter.ConvertingComparator",
            "org.springframework.core.convert.converter.ConvertingComparator(org.springframework.core.convert.converter.Converter<S, T>)",
            "public org.springframework.core.convert.converter.ConvertingComparator(org.springframework.core.convert.converter.Converter<S, T>)"
        ],
        [
            "org.springframework.core.convert.converter.ConvertingComparator",
            "org.springframework.core.convert.converter.ConvertingComparator(java.util.Comparator<T>, org.springframework.core.convert.converter.Converter<S, T>)",
            "public org.springframework.core.convert.converter.ConvertingComparator(java.util.Comparator<T>, org.springframework.core.convert.converter.Converter<S, T>)"
        ],
        [
            "org.springframework.core.convert.converter.ConvertingComparator",
            "org.springframework.core.convert.converter.ConvertingComparator(java.util.Comparator<T>, org.springframework.core.convert.ConversionService, java.lang.Class<? extends T>)",
            "public org.springframework.core.convert.converter.ConvertingComparator(java.util.Comparator<T>, org.springframework.core.convert.ConversionService, java.lang.Class<? extends T>)"
        ],
        [
            "int",
            "org.springframework.core.convert.converter.ConvertingComparator.compare(S, S)",
            "public int compare(S, S)"
        ],
        [
            "<K, V> org.springframework.core.convert.converter.ConvertingComparator<java.util.Map$Entry<K, V>, K>",
            "org.springframework.core.convert.converter.ConvertingComparator.mapEntryKeys(java.util.Comparator<K>)",
            "public static <K, V> org.springframework.core.convert.converter.ConvertingComparator<java.util.Map$Entry<K, V>, K> mapEntryKeys(java.util.Comparator<K>)"
        ],
        [
            "<K, V> org.springframework.core.convert.converter.ConvertingComparator<java.util.Map$Entry<K, V>, V>",
            "org.springframework.core.convert.converter.ConvertingComparator.mapEntryValues(java.util.Comparator<V>)",
            "public static <K, V> org.springframework.core.convert.converter.ConvertingComparator<java.util.Map$Entry<K, V>, V> mapEntryValues(java.util.Comparator<V>)"
        ],
        [
            "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair",
            "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair(java.lang.Class<?>, java.lang.Class<?>)",
            "public org.springframework.core.convert.converter.GenericConverter$ConvertiblePair(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair.getSourceType()",
            "public java.lang.Class<?> getSourceType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair.getTargetType()",
            "public java.lang.Class<?> getTargetType()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.AbstractConditionalEnumConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ArrayToArrayConverter",
            "org.springframework.core.convert.support.ArrayToArrayConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.ArrayToArrayConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ArrayToArrayConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ArrayToArrayConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ArrayToArrayConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ArrayToCollectionConverter",
            "org.springframework.core.convert.support.ArrayToCollectionConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.ArrayToCollectionConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ArrayToCollectionConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ArrayToCollectionConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ArrayToCollectionConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ArrayToObjectConverter",
            "org.springframework.core.convert.support.ArrayToObjectConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.ArrayToObjectConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ArrayToObjectConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ArrayToObjectConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ArrayToObjectConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ArrayToStringConverter",
            "org.springframework.core.convert.support.ArrayToStringConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.ArrayToStringConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ArrayToStringConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ArrayToStringConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ArrayToStringConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ByteBufferConverter",
            "org.springframework.core.convert.support.ByteBufferConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.ByteBufferConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ByteBufferConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ByteBufferConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ByteBufferConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.CharacterToNumberFactory$CharacterToNumber",
            "org.springframework.core.convert.support.CharacterToNumberFactory$CharacterToNumber(java.lang.Class<T>)",
            "public org.springframework.core.convert.support.CharacterToNumberFactory$CharacterToNumber(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.core.convert.support.CharacterToNumberFactory$CharacterToNumber.convert(java.lang.Character)",
            "public T convert(java.lang.Character)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.CharacterToNumberFactory$CharacterToNumber.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "<T extends java.lang.Number> org.springframework.core.convert.converter.Converter<java.lang.Character, T>",
            "org.springframework.core.convert.support.CharacterToNumberFactory.getConverter(java.lang.Class<T>)",
            "public <T extends java.lang.Number> org.springframework.core.convert.converter.Converter<java.lang.Character, T> getConverter(java.lang.Class<T>)"
        ],
        [
            "org.springframework.core.convert.support.CollectionToArrayConverter",
            "org.springframework.core.convert.support.CollectionToArrayConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.CollectionToArrayConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.CollectionToArrayConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.CollectionToArrayConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.CollectionToArrayConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.CollectionToCollectionConverter",
            "org.springframework.core.convert.support.CollectionToCollectionConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.CollectionToCollectionConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.CollectionToCollectionConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.CollectionToCollectionConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.CollectionToCollectionConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.CollectionToObjectConverter",
            "org.springframework.core.convert.support.CollectionToObjectConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.CollectionToObjectConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.CollectionToObjectConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.CollectionToObjectConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.CollectionToObjectConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.CollectionToStringConverter",
            "org.springframework.core.convert.support.CollectionToStringConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.CollectionToStringConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.CollectionToStringConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.CollectionToStringConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.CollectionToStringConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "void",
            "org.springframework.core.convert.support.ConversionServiceFactory.registerConverters(java.util.Set<?>, org.springframework.core.convert.converter.ConverterRegistry)",
            "public static void registerConverters(java.util.Set<?>, org.springframework.core.convert.converter.ConverterRegistry)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ConversionUtils.invokeConverter(org.springframework.core.convert.converter.GenericConverter, java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public static java.lang.Object invokeConverter(org.springframework.core.convert.converter.GenericConverter, java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ConversionUtils.canConvertElements(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.ConversionService)",
            "public static boolean canConvertElements(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.convert.support.ConversionUtils.getEnumType(java.lang.Class<?>)",
            "public static java.lang.Class<?> getEnumType(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
            "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter(org.springframework.core.convert.ConversionService, org.springframework.core.convert.TypeDescriptor)",
            "public org.springframework.core.convert.support.ConvertingPropertyEditorAdapter(org.springframework.core.convert.ConversionService, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "void",
            "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.core.convert.support.DefaultConversionService",
            "org.springframework.core.convert.support.DefaultConversionService()",
            "public org.springframework.core.convert.support.DefaultConversionService()"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.core.convert.support.DefaultConversionService.getSharedInstance()",
            "public static org.springframework.core.convert.ConversionService getSharedInstance()"
        ],
        [
            "void",
            "org.springframework.core.convert.support.DefaultConversionService.addDefaultConverters(org.springframework.core.convert.converter.ConverterRegistry)",
            "public static void addDefaultConverters(org.springframework.core.convert.converter.ConverterRegistry)"
        ],
        [
            "void",
            "org.springframework.core.convert.support.DefaultConversionService.addCollectionConverters(org.springframework.core.convert.converter.ConverterRegistry)",
            "public static void addCollectionConverters(org.springframework.core.convert.converter.ConverterRegistry)"
        ],
        [
            "org.springframework.core.convert.support.EnumToIntegerConverter",
            "org.springframework.core.convert.support.EnumToIntegerConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.EnumToIntegerConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.core.convert.support.EnumToIntegerConverter.convert(java.lang.Enum<?>)",
            "public java.lang.Integer convert(java.lang.Enum<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.EnumToIntegerConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.core.convert.support.EnumToStringConverter",
            "org.springframework.core.convert.support.EnumToStringConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.EnumToStringConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.EnumToStringConverter.convert(java.lang.Enum<?>)",
            "public java.lang.String convert(java.lang.Enum<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.EnumToStringConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.FallbackObjectToStringConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.FallbackObjectToStringConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.FallbackObjectToStringConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.GenericConversionService$ConverterAdapter",
            "org.springframework.core.convert.support.GenericConversionService$ConverterAdapter(org.springframework.core.convert.converter.Converter<?, ?>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType)",
            "public org.springframework.core.convert.support.GenericConversionService$ConverterAdapter(org.springframework.core.convert.converter.Converter<?, ?>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey",
            "org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey.compareTo(org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey)",
            "public int compareTo(org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey)"
        ],
        [
            "int",
            "org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter",
            "org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter(org.springframework.core.convert.converter.ConverterFactory<?, ?>, org.springframework.core.convert.converter.GenericConverter$ConvertiblePair)",
            "public org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter(org.springframework.core.convert.converter.ConverterFactory<?, ?>, org.springframework.core.convert.converter.GenericConverter$ConvertiblePair)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.core.convert.support.GenericConversionService$Converters.add(org.springframework.core.convert.converter.GenericConverter)",
            "public void add(org.springframework.core.convert.converter.GenericConverter)"
        ],
        [
            "void",
            "org.springframework.core.convert.support.GenericConversionService$Converters.remove(java.lang.Class<?>, java.lang.Class<?>)",
            "public void remove(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.convert.converter.GenericConverter",
            "org.springframework.core.convert.support.GenericConversionService$Converters.find(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public org.springframework.core.convert.converter.GenericConverter find(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.GenericConversionService$Converters.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.core.convert.support.GenericConversionService$ConvertersForPair.add(org.springframework.core.convert.converter.GenericConverter)",
            "public void add(org.springframework.core.convert.converter.GenericConverter)"
        ],
        [
            "org.springframework.core.convert.converter.GenericConverter",
            "org.springframework.core.convert.support.GenericConversionService$ConvertersForPair.getConverter(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public org.springframework.core.convert.converter.GenericConverter getConverter(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.GenericConversionService$ConvertersForPair.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.convert.support.GenericConversionService$NoOpConverter",
            "org.springframework.core.convert.support.GenericConversionService$NoOpConverter(java.lang.String)",
            "public org.springframework.core.convert.support.GenericConversionService$NoOpConverter(java.lang.String)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.GenericConversionService$NoOpConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.GenericConversionService$NoOpConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.GenericConversionService$NoOpConverter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.convert.support.GenericConversionService",
            "org.springframework.core.convert.support.GenericConversionService()",
            "public org.springframework.core.convert.support.GenericConversionService()"
        ],
        [
            "void",
            "org.springframework.core.convert.support.GenericConversionService.addConverter(org.springframework.core.convert.converter.Converter<?, ?>)",
            "public void addConverter(org.springframework.core.convert.converter.Converter<?, ?>)"
        ],
        [
            "<S, T> void",
            "org.springframework.core.convert.support.GenericConversionService.addConverter(java.lang.Class<S>, java.lang.Class<T>, org.springframework.core.convert.converter.Converter<? super S, ? extends T>)",
            "public <S, T> void addConverter(java.lang.Class<S>, java.lang.Class<T>, org.springframework.core.convert.converter.Converter<? super S, ? extends T>)"
        ],
        [
            "void",
            "org.springframework.core.convert.support.GenericConversionService.addConverter(org.springframework.core.convert.converter.GenericConverter)",
            "public void addConverter(org.springframework.core.convert.converter.GenericConverter)"
        ],
        [
            "void",
            "org.springframework.core.convert.support.GenericConversionService.addConverterFactory(org.springframework.core.convert.converter.ConverterFactory<?, ?>)",
            "public void addConverterFactory(org.springframework.core.convert.converter.ConverterFactory<?, ?>)"
        ],
        [
            "void",
            "org.springframework.core.convert.support.GenericConversionService.removeConvertible(java.lang.Class<?>, java.lang.Class<?>)",
            "public void removeConvertible(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.GenericConversionService.canConvert(java.lang.Class<?>, java.lang.Class<?>)",
            "public boolean canConvert(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.GenericConversionService.canConvert(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean canConvert(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.GenericConversionService.canBypassConvert(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean canBypassConvert(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "<T> T",
            "org.springframework.core.convert.support.GenericConversionService.convert(java.lang.Object, java.lang.Class<T>)",
            "public <T> T convert(java.lang.Object, java.lang.Class<T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.GenericConversionService.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.GenericConversionService.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.GenericConversionService.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.convert.support.IdToEntityConverter",
            "org.springframework.core.convert.support.IdToEntityConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.IdToEntityConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.IdToEntityConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.IdToEntityConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.IdToEntityConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.IntegerToEnumConverterFactory$IntegerToEnum",
            "org.springframework.core.convert.support.IntegerToEnumConverterFactory$IntegerToEnum(java.lang.Class<T>)",
            "public org.springframework.core.convert.support.IntegerToEnumConverterFactory$IntegerToEnum(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.core.convert.support.IntegerToEnumConverterFactory$IntegerToEnum.convert(java.lang.Integer)",
            "public T convert(java.lang.Integer)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.IntegerToEnumConverterFactory$IntegerToEnum.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "<T extends java.lang.Enum> org.springframework.core.convert.converter.Converter<java.lang.Integer, T>",
            "org.springframework.core.convert.support.IntegerToEnumConverterFactory.getConverter(java.lang.Class<T>)",
            "public <T extends java.lang.Enum> org.springframework.core.convert.converter.Converter<java.lang.Integer, T> getConverter(java.lang.Class<T>)"
        ],
        [
            "org.springframework.core.convert.support.MapToMapConverter$MapEntry",
            "org.springframework.core.convert.support.MapToMapConverter$MapEntry(java.lang.Object, java.lang.Object)",
            "public org.springframework.core.convert.support.MapToMapConverter$MapEntry(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.convert.support.MapToMapConverter$MapEntry.addToMap(java.util.Map<java.lang.Object, java.lang.Object>)",
            "public void addToMap(java.util.Map<java.lang.Object, java.lang.Object>)"
        ],
        [
            "org.springframework.core.convert.support.MapToMapConverter",
            "org.springframework.core.convert.support.MapToMapConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.MapToMapConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.MapToMapConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.MapToMapConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.MapToMapConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Character",
            "org.springframework.core.convert.support.NumberToCharacterConverter.convert(java.lang.Number)",
            "public java.lang.Character convert(java.lang.Number)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.NumberToCharacterConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "T",
            "org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(java.lang.Number)",
            "public T convert(java.lang.Number)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "<T extends java.lang.Number> org.springframework.core.convert.converter.Converter<java.lang.Number, T>",
            "org.springframework.core.convert.support.NumberToNumberConverterFactory.getConverter(java.lang.Class<T>)",
            "public <T extends java.lang.Number> org.springframework.core.convert.converter.Converter<java.lang.Number, T> getConverter(java.lang.Class<T>)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.NumberToNumberConverterFactory.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ObjectToArrayConverter",
            "org.springframework.core.convert.support.ObjectToArrayConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.ObjectToArrayConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ObjectToArrayConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ObjectToArrayConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ObjectToArrayConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ObjectToCollectionConverter",
            "org.springframework.core.convert.support.ObjectToCollectionConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.ObjectToCollectionConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ObjectToCollectionConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ObjectToCollectionConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ObjectToCollectionConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ObjectToObjectConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ObjectToObjectConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ObjectToObjectConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ObjectToOptionalConverter$GenericTypeDescriptor",
            "org.springframework.core.convert.support.ObjectToOptionalConverter$GenericTypeDescriptor(org.springframework.core.convert.TypeDescriptor)",
            "public org.springframework.core.convert.support.ObjectToOptionalConverter$GenericTypeDescriptor(org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.ObjectToOptionalConverter",
            "org.springframework.core.convert.support.ObjectToOptionalConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.ObjectToOptionalConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.ObjectToOptionalConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.ObjectToOptionalConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ObjectToOptionalConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.ObjectToStringConverter.convert(java.lang.Object)",
            "public java.lang.String convert(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ObjectToStringConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.convert.support.PropertiesToStringConverter.convert(java.util.Properties)",
            "public java.lang.String convert(java.util.Properties)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.PropertiesToStringConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.core.convert.support.StreamConverter",
            "org.springframework.core.convert.support.StreamConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.StreamConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.StreamConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.StreamConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.StreamConverter.matchesFromStream(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matchesFromStream(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.StreamConverter.matchesToStream(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matchesToStream(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StreamConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "org.springframework.core.convert.support.StringToArrayConverter",
            "org.springframework.core.convert.support.StringToArrayConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.StringToArrayConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.StringToArrayConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.StringToArrayConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToArrayConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.core.convert.support.StringToBooleanConverter.convert(java.lang.String)",
            "public java.lang.Boolean convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToBooleanConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.lang.Character",
            "org.springframework.core.convert.support.StringToCharacterConverter.convert(java.lang.String)",
            "public java.lang.Character convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToCharacterConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.core.convert.support.StringToCharsetConverter.convert(java.lang.String)",
            "public java.nio.charset.Charset convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToCharsetConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.core.convert.support.StringToCollectionConverter",
            "org.springframework.core.convert.support.StringToCollectionConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.core.convert.support.StringToCollectionConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.core.convert.support.StringToCollectionConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.core.convert.support.StringToCollectionConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToCollectionConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.util.Currency",
            "org.springframework.core.convert.support.StringToCurrencyConverter.convert(java.lang.String)",
            "public java.util.Currency convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToCurrencyConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "T",
            "org.springframework.core.convert.support.StringToEnumConverterFactory$StringToEnum.convert(java.lang.String)",
            "public T convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToEnumConverterFactory$StringToEnum.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "<T extends java.lang.Enum> org.springframework.core.convert.converter.Converter<java.lang.String, T>",
            "org.springframework.core.convert.support.StringToEnumConverterFactory.getConverter(java.lang.Class<T>)",
            "public <T extends java.lang.Enum> org.springframework.core.convert.converter.Converter<java.lang.String, T> getConverter(java.lang.Class<T>)"
        ],
        [
            "java.util.Locale",
            "org.springframework.core.convert.support.StringToLocaleConverter.convert(java.lang.String)",
            "public java.util.Locale convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToLocaleConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber",
            "org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber(java.lang.Class<T>)",
            "public org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber.convert(java.lang.String)",
            "public T convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "<T extends java.lang.Number> org.springframework.core.convert.converter.Converter<java.lang.String, T>",
            "org.springframework.core.convert.support.StringToNumberConverterFactory.getConverter(java.lang.Class<T>)",
            "public <T extends java.lang.Number> org.springframework.core.convert.converter.Converter<java.lang.String, T> getConverter(java.lang.Class<T>)"
        ],
        [
            "java.util.Properties",
            "org.springframework.core.convert.support.StringToPropertiesConverter.convert(java.lang.String)",
            "public java.util.Properties convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToPropertiesConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.util.TimeZone",
            "org.springframework.core.convert.support.StringToTimeZoneConverter.convert(java.lang.String)",
            "public java.util.TimeZone convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToTimeZoneConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.util.UUID",
            "org.springframework.core.convert.support.StringToUUIDConverter.convert(java.lang.String)",
            "public java.util.UUID convert(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.StringToUUIDConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.util.TimeZone",
            "org.springframework.core.convert.support.ZoneIdToTimeZoneConverter.convert(java.time.ZoneId)",
            "public java.util.TimeZone convert(java.time.ZoneId)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ZoneIdToTimeZoneConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.util.Calendar",
            "org.springframework.core.convert.support.ZonedDateTimeToCalendarConverter.convert(java.time.ZonedDateTime)",
            "public java.util.Calendar convert(java.time.ZonedDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.convert.support.ZonedDateTimeToCalendarConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.core.env.AbstractEnvironment",
            "org.springframework.core.env.AbstractEnvironment()",
            "public org.springframework.core.env.AbstractEnvironment()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.env.AbstractEnvironment.getActiveProfiles()",
            "public java.lang.String[] getActiveProfiles()"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.setActiveProfiles(java.lang.String...)",
            "public void setActiveProfiles(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.addActiveProfile(java.lang.String)",
            "public void addActiveProfile(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.env.AbstractEnvironment.getDefaultProfiles()",
            "public java.lang.String[] getDefaultProfiles()"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.setDefaultProfiles(java.lang.String...)",
            "public void setDefaultProfiles(java.lang.String...)"
        ],
        [
            "boolean",
            "org.springframework.core.env.AbstractEnvironment.acceptsProfiles(java.lang.String...)",
            "public boolean acceptsProfiles(java.lang.String...)"
        ],
        [
            "boolean",
            "org.springframework.core.env.AbstractEnvironment.acceptsProfiles(org.springframework.core.env.Profiles)",
            "public boolean acceptsProfiles(org.springframework.core.env.Profiles)"
        ],
        [
            "org.springframework.core.env.MutablePropertySources",
            "org.springframework.core.env.AbstractEnvironment.getPropertySources()",
            "public org.springframework.core.env.MutablePropertySources getPropertySources()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.env.AbstractEnvironment.getSystemProperties()",
            "public java.util.Map<java.lang.String, java.lang.Object> getSystemProperties()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.env.AbstractEnvironment.getSystemEnvironment()",
            "public java.util.Map<java.lang.String, java.lang.Object> getSystemEnvironment()"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.merge(org.springframework.core.env.ConfigurableEnvironment)",
            "public void merge(org.springframework.core.env.ConfigurableEnvironment)"
        ],
        [
            "org.springframework.core.convert.support.ConfigurableConversionService",
            "org.springframework.core.env.AbstractEnvironment.getConversionService()",
            "public org.springframework.core.convert.support.ConfigurableConversionService getConversionService()"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.setConversionService(org.springframework.core.convert.support.ConfigurableConversionService)",
            "public void setConversionService(org.springframework.core.convert.support.ConfigurableConversionService)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.setPlaceholderPrefix(java.lang.String)",
            "public void setPlaceholderPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.setPlaceholderSuffix(java.lang.String)",
            "public void setPlaceholderSuffix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.setValueSeparator(java.lang.String)",
            "public void setValueSeparator(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.setIgnoreUnresolvableNestedPlaceholders(boolean)",
            "public void setIgnoreUnresolvableNestedPlaceholders(boolean)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.setRequiredProperties(java.lang.String...)",
            "public void setRequiredProperties(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractEnvironment.validateRequiredProperties()",
            "public void validateRequiredProperties() throws org.springframework.core.env.MissingRequiredPropertiesException"
        ],
        [
            "boolean",
            "org.springframework.core.env.AbstractEnvironment.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractEnvironment.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractEnvironment.getProperty(java.lang.String, java.lang.String)",
            "public java.lang.String getProperty(java.lang.String, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.core.env.AbstractEnvironment.getProperty(java.lang.String, java.lang.Class<T>)",
            "public <T> T getProperty(java.lang.String, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.core.env.AbstractEnvironment.getProperty(java.lang.String, java.lang.Class<T>, T)",
            "public <T> T getProperty(java.lang.String, java.lang.Class<T>, T)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractEnvironment.getRequiredProperty(java.lang.String)",
            "public java.lang.String getRequiredProperty(java.lang.String) throws java.lang.IllegalStateException"
        ],
        [
            "<T> T",
            "org.springframework.core.env.AbstractEnvironment.getRequiredProperty(java.lang.String, java.lang.Class<T>)",
            "public <T> T getRequiredProperty(java.lang.String, java.lang.Class<T>) throws java.lang.IllegalStateException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractEnvironment.resolvePlaceholders(java.lang.String)",
            "public java.lang.String resolvePlaceholders(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractEnvironment.resolveRequiredPlaceholders(java.lang.String)",
            "public java.lang.String resolveRequiredPlaceholders(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractEnvironment.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.env.AbstractPropertyResolver",
            "org.springframework.core.env.AbstractPropertyResolver()",
            "public org.springframework.core.env.AbstractPropertyResolver()"
        ],
        [
            "org.springframework.core.convert.support.ConfigurableConversionService",
            "org.springframework.core.env.AbstractPropertyResolver.getConversionService()",
            "public org.springframework.core.convert.support.ConfigurableConversionService getConversionService()"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractPropertyResolver.setConversionService(org.springframework.core.convert.support.ConfigurableConversionService)",
            "public void setConversionService(org.springframework.core.convert.support.ConfigurableConversionService)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractPropertyResolver.setPlaceholderPrefix(java.lang.String)",
            "public void setPlaceholderPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractPropertyResolver.setPlaceholderSuffix(java.lang.String)",
            "public void setPlaceholderSuffix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractPropertyResolver.setValueSeparator(java.lang.String)",
            "public void setValueSeparator(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractPropertyResolver.setIgnoreUnresolvableNestedPlaceholders(boolean)",
            "public void setIgnoreUnresolvableNestedPlaceholders(boolean)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractPropertyResolver.setRequiredProperties(java.lang.String...)",
            "public void setRequiredProperties(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.core.env.AbstractPropertyResolver.validateRequiredProperties()",
            "public void validateRequiredProperties()"
        ],
        [
            "boolean",
            "org.springframework.core.env.AbstractPropertyResolver.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractPropertyResolver.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractPropertyResolver.getProperty(java.lang.String, java.lang.String)",
            "public java.lang.String getProperty(java.lang.String, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.core.env.AbstractPropertyResolver.getProperty(java.lang.String, java.lang.Class<T>, T)",
            "public <T> T getProperty(java.lang.String, java.lang.Class<T>, T)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractPropertyResolver.getRequiredProperty(java.lang.String)",
            "public java.lang.String getRequiredProperty(java.lang.String) throws java.lang.IllegalStateException"
        ],
        [
            "<T> T",
            "org.springframework.core.env.AbstractPropertyResolver.getRequiredProperty(java.lang.String, java.lang.Class<T>)",
            "public <T> T getRequiredProperty(java.lang.String, java.lang.Class<T>) throws java.lang.IllegalStateException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractPropertyResolver.resolvePlaceholders(java.lang.String)",
            "public java.lang.String resolvePlaceholders(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(java.lang.String)",
            "public java.lang.String resolveRequiredPlaceholders(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.core.env.CommandLineArgs.addOptionArg(java.lang.String, java.lang.String)",
            "public void addOptionArg(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.env.CommandLineArgs.getOptionNames()",
            "public java.util.Set<java.lang.String> getOptionNames()"
        ],
        [
            "boolean",
            "org.springframework.core.env.CommandLineArgs.containsOption(java.lang.String)",
            "public boolean containsOption(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.core.env.CommandLineArgs.getOptionValues(java.lang.String)",
            "public java.util.List<java.lang.String> getOptionValues(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.CommandLineArgs.addNonOptionArg(java.lang.String)",
            "public void addNonOptionArg(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.core.env.CommandLineArgs.getNonOptionArgs()",
            "public java.util.List<java.lang.String> getNonOptionArgs()"
        ],
        [
            "org.springframework.core.env.CommandLinePropertySource",
            "org.springframework.core.env.CommandLinePropertySource(T)",
            "public org.springframework.core.env.CommandLinePropertySource(T)"
        ],
        [
            "org.springframework.core.env.CommandLinePropertySource",
            "org.springframework.core.env.CommandLinePropertySource(java.lang.String, T)",
            "public org.springframework.core.env.CommandLinePropertySource(java.lang.String, T)"
        ],
        [
            "void",
            "org.springframework.core.env.CommandLinePropertySource.setNonOptionArgsPropertyName(java.lang.String)",
            "public void setNonOptionArgsPropertyName(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.env.CommandLinePropertySource.containsProperty(java.lang.String)",
            "public final boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.CommandLinePropertySource.getProperty(java.lang.String)",
            "public final java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.CommandLinePropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.core.env.CompositePropertySource",
            "org.springframework.core.env.CompositePropertySource(java.lang.String)",
            "public org.springframework.core.env.CompositePropertySource(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.CompositePropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.env.CompositePropertySource.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.env.CompositePropertySource.getPropertyNames()",
            "public java.lang.String[] getPropertyNames()"
        ],
        [
            "void",
            "org.springframework.core.env.CompositePropertySource.addPropertySource(org.springframework.core.env.PropertySource<?>)",
            "public void addPropertySource(org.springframework.core.env.PropertySource<?>)"
        ],
        [
            "void",
            "org.springframework.core.env.CompositePropertySource.addFirstPropertySource(org.springframework.core.env.PropertySource<?>)",
            "public void addFirstPropertySource(org.springframework.core.env.PropertySource<?>)"
        ],
        [
            "java.util.Collection<org.springframework.core.env.PropertySource<?>>",
            "org.springframework.core.env.CompositePropertySource.getPropertySources()",
            "public java.util.Collection<org.springframework.core.env.PropertySource<?>> getPropertySources()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.CompositePropertySource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.env.EnumerablePropertySource",
            "org.springframework.core.env.EnumerablePropertySource(java.lang.String, T)",
            "public org.springframework.core.env.EnumerablePropertySource(java.lang.String, T)"
        ],
        [
            "boolean",
            "org.springframework.core.env.EnumerablePropertySource.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "org.springframework.core.env.JOptCommandLinePropertySource",
            "org.springframework.core.env.JOptCommandLinePropertySource(joptsimple.OptionSet)",
            "public org.springframework.core.env.JOptCommandLinePropertySource(joptsimple.OptionSet)"
        ],
        [
            "org.springframework.core.env.JOptCommandLinePropertySource",
            "org.springframework.core.env.JOptCommandLinePropertySource(java.lang.String, joptsimple.OptionSet)",
            "public org.springframework.core.env.JOptCommandLinePropertySource(java.lang.String, joptsimple.OptionSet)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.env.JOptCommandLinePropertySource.getPropertyNames()",
            "public java.lang.String[] getPropertyNames()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.core.env.JOptCommandLinePropertySource.getOptionValues(java.lang.String)",
            "public java.util.List<java.lang.String> getOptionValues(java.lang.String)"
        ],
        [
            "org.springframework.core.env.MapPropertySource",
            "org.springframework.core.env.MapPropertySource(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.env.MapPropertySource(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.MapPropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.env.MapPropertySource.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.env.MapPropertySource.getPropertyNames()",
            "public java.lang.String[] getPropertyNames()"
        ],
        [
            "org.springframework.core.env.MissingRequiredPropertiesException",
            "org.springframework.core.env.MissingRequiredPropertiesException()",
            "public org.springframework.core.env.MissingRequiredPropertiesException()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.MissingRequiredPropertiesException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.env.MissingRequiredPropertiesException.getMissingRequiredProperties()",
            "public java.util.Set<java.lang.String> getMissingRequiredProperties()"
        ],
        [
            "org.springframework.core.env.MutablePropertySources",
            "org.springframework.core.env.MutablePropertySources()",
            "public org.springframework.core.env.MutablePropertySources()"
        ],
        [
            "org.springframework.core.env.MutablePropertySources",
            "org.springframework.core.env.MutablePropertySources(org.springframework.core.env.PropertySources)",
            "public org.springframework.core.env.MutablePropertySources(org.springframework.core.env.PropertySources)"
        ],
        [
            "java.util.Iterator<org.springframework.core.env.PropertySource<?>>",
            "org.springframework.core.env.MutablePropertySources.iterator()",
            "public java.util.Iterator<org.springframework.core.env.PropertySource<?>> iterator()"
        ],
        [
            "java.util.Spliterator<org.springframework.core.env.PropertySource<?>>",
            "org.springframework.core.env.MutablePropertySources.spliterator()",
            "public java.util.Spliterator<org.springframework.core.env.PropertySource<?>> spliterator()"
        ],
        [
            "java.util.stream.Stream<org.springframework.core.env.PropertySource<?>>",
            "org.springframework.core.env.MutablePropertySources.stream()",
            "public java.util.stream.Stream<org.springframework.core.env.PropertySource<?>> stream()"
        ],
        [
            "boolean",
            "org.springframework.core.env.MutablePropertySources.contains(java.lang.String)",
            "public boolean contains(java.lang.String)"
        ],
        [
            "org.springframework.core.env.PropertySource<?>",
            "org.springframework.core.env.MutablePropertySources.get(java.lang.String)",
            "public org.springframework.core.env.PropertySource<?> get(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.MutablePropertySources.addFirst(org.springframework.core.env.PropertySource<?>)",
            "public void addFirst(org.springframework.core.env.PropertySource<?>)"
        ],
        [
            "void",
            "org.springframework.core.env.MutablePropertySources.addLast(org.springframework.core.env.PropertySource<?>)",
            "public void addLast(org.springframework.core.env.PropertySource<?>)"
        ],
        [
            "void",
            "org.springframework.core.env.MutablePropertySources.addBefore(java.lang.String, org.springframework.core.env.PropertySource<?>)",
            "public void addBefore(java.lang.String, org.springframework.core.env.PropertySource<?>)"
        ],
        [
            "void",
            "org.springframework.core.env.MutablePropertySources.addAfter(java.lang.String, org.springframework.core.env.PropertySource<?>)",
            "public void addAfter(java.lang.String, org.springframework.core.env.PropertySource<?>)"
        ],
        [
            "int",
            "org.springframework.core.env.MutablePropertySources.precedenceOf(org.springframework.core.env.PropertySource<?>)",
            "public int precedenceOf(org.springframework.core.env.PropertySource<?>)"
        ],
        [
            "org.springframework.core.env.PropertySource<?>",
            "org.springframework.core.env.MutablePropertySources.remove(java.lang.String)",
            "public org.springframework.core.env.PropertySource<?> remove(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.env.MutablePropertySources.replace(java.lang.String, org.springframework.core.env.PropertySource<?>)",
            "public void replace(java.lang.String, org.springframework.core.env.PropertySource<?>)"
        ],
        [
            "int",
            "org.springframework.core.env.MutablePropertySources.size()",
            "public int size()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.MutablePropertySources.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.env.Profiles",
            "org.springframework.core.env.Profiles.of(java.lang.String...)",
            "public static org.springframework.core.env.Profiles of(java.lang.String...)"
        ],
        [
            "org.springframework.core.env.ProfilesParser$Context[]",
            "org.springframework.core.env.ProfilesParser$Context.values()",
            "public static org.springframework.core.env.ProfilesParser$Context[] values()"
        ],
        [
            "org.springframework.core.env.ProfilesParser$Context",
            "org.springframework.core.env.ProfilesParser$Context.valueOf(java.lang.String)",
            "public static org.springframework.core.env.ProfilesParser$Context valueOf(java.lang.String)"
        ],
        [
            "org.springframework.core.env.ProfilesParser$Operator[]",
            "org.springframework.core.env.ProfilesParser$Operator.values()",
            "public static org.springframework.core.env.ProfilesParser$Operator[] values()"
        ],
        [
            "org.springframework.core.env.ProfilesParser$Operator",
            "org.springframework.core.env.ProfilesParser$Operator.valueOf(java.lang.String)",
            "public static org.springframework.core.env.ProfilesParser$Operator valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.env.ProfilesParser$ParsedProfiles.matches(java.util.function.Predicate<java.lang.String>)",
            "public boolean matches(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "int",
            "org.springframework.core.env.ProfilesParser$ParsedProfiles.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.core.env.ProfilesParser$ParsedProfiles.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.ProfilesParser$ParsedProfiles.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.env.PropertiesPropertySource",
            "org.springframework.core.env.PropertiesPropertySource(java.lang.String, java.util.Properties)",
            "public org.springframework.core.env.PropertiesPropertySource(java.lang.String, java.util.Properties)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.env.PropertiesPropertySource.getPropertyNames()",
            "public java.lang.String[] getPropertyNames()"
        ],
        [
            "org.springframework.core.env.PropertySource$ComparisonPropertySource",
            "org.springframework.core.env.PropertySource$ComparisonPropertySource(java.lang.String)",
            "public org.springframework.core.env.PropertySource$ComparisonPropertySource(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.PropertySource$ComparisonPropertySource.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "boolean",
            "org.springframework.core.env.PropertySource$ComparisonPropertySource.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.PropertySource$ComparisonPropertySource.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.PropertySource$ComparisonPropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.core.env.PropertySource$StubPropertySource",
            "org.springframework.core.env.PropertySource$StubPropertySource(java.lang.String)",
            "public org.springframework.core.env.PropertySource$StubPropertySource(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.PropertySource$StubPropertySource.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.PropertySource$StubPropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.core.env.PropertySource",
            "org.springframework.core.env.PropertySource(java.lang.String, T)",
            "public org.springframework.core.env.PropertySource(java.lang.String, T)"
        ],
        [
            "org.springframework.core.env.PropertySource",
            "org.springframework.core.env.PropertySource(java.lang.String)",
            "public org.springframework.core.env.PropertySource(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.PropertySource.getName()",
            "public java.lang.String getName()"
        ],
        [
            "T",
            "org.springframework.core.env.PropertySource.getSource()",
            "public T getSource()"
        ],
        [
            "boolean",
            "org.springframework.core.env.PropertySource.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.env.PropertySource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.env.PropertySource.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.PropertySource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.env.PropertySource<?>",
            "org.springframework.core.env.PropertySource.named(java.lang.String)",
            "public static org.springframework.core.env.PropertySource<?> named(java.lang.String)"
        ],
        [
            "java.util.stream.Stream<org.springframework.core.env.PropertySource<?>>",
            "org.springframework.core.env.PropertySources.stream()",
            "public default java.util.stream.Stream<org.springframework.core.env.PropertySource<?>> stream()"
        ],
        [
            "org.springframework.core.env.PropertySourcesPropertyResolver",
            "org.springframework.core.env.PropertySourcesPropertyResolver(org.springframework.core.env.PropertySources)",
            "public org.springframework.core.env.PropertySourcesPropertyResolver(org.springframework.core.env.PropertySources)"
        ],
        [
            "boolean",
            "org.springframework.core.env.PropertySourcesPropertyResolver.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(java.lang.String, java.lang.Class<T>)",
            "public <T> T getProperty(java.lang.String, java.lang.Class<T>)"
        ],
        [
            "boolean",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.get(java.lang.Object)",
            "public java.lang.String get(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "int",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.size()",
            "public int size()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.put(java.lang.String, java.lang.String)",
            "public java.lang.String put(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.remove(java.lang.Object)",
            "public java.lang.String remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "void",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.putAll(java.util.Map<? extends java.lang.String, ? extends java.lang.String>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.lang.String>)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.values()",
            "public java.util.Collection<java.lang.String> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.String>>",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.String>> entrySet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.ReadOnlySystemAttributesMap.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "org.springframework.core.env.CommandLineArgs",
            "org.springframework.core.env.SimpleCommandLineArgsParser.parse(java.lang.String...)",
            "public org.springframework.core.env.CommandLineArgs parse(java.lang.String...)"
        ],
        [
            "org.springframework.core.env.SimpleCommandLinePropertySource",
            "org.springframework.core.env.SimpleCommandLinePropertySource(java.lang.String...)",
            "public org.springframework.core.env.SimpleCommandLinePropertySource(java.lang.String...)"
        ],
        [
            "org.springframework.core.env.SimpleCommandLinePropertySource",
            "org.springframework.core.env.SimpleCommandLinePropertySource(java.lang.String, java.lang.String[])",
            "public org.springframework.core.env.SimpleCommandLinePropertySource(java.lang.String, java.lang.String[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.env.SimpleCommandLinePropertySource.getPropertyNames()",
            "public java.lang.String[] getPropertyNames()"
        ],
        [
            "org.springframework.core.env.StandardEnvironment",
            "org.springframework.core.env.StandardEnvironment()",
            "public org.springframework.core.env.StandardEnvironment()"
        ],
        [
            "org.springframework.core.env.SystemEnvironmentPropertySource",
            "org.springframework.core.env.SystemEnvironmentPropertySource(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.env.SystemEnvironmentPropertySource(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "boolean",
            "org.springframework.core.env.SystemEnvironmentPropertySource.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.env.SystemEnvironmentPropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.AbstractFileResolvingResource$VfsResourceDelegate.getResource(java.net.URL)",
            "public static org.springframework.core.io.Resource getResource(java.net.URL) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.AbstractFileResolvingResource$VfsResourceDelegate.getResource(java.net.URI)",
            "public static org.springframework.core.io.Resource getResource(java.net.URI) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.AbstractFileResolvingResource",
            "org.springframework.core.io.AbstractFileResolvingResource()",
            "public org.springframework.core.io.AbstractFileResolvingResource()"
        ],
        [
            "boolean",
            "org.springframework.core.io.AbstractFileResolvingResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.core.io.AbstractFileResolvingResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "boolean",
            "org.springframework.core.io.AbstractFileResolvingResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.io.File",
            "org.springframework.core.io.AbstractFileResolvingResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "java.nio.channels.ReadableByteChannel",
            "org.springframework.core.io.AbstractFileResolvingResource.readableChannel()",
            "public java.nio.channels.ReadableByteChannel readableChannel() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.AbstractFileResolvingResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.AbstractFileResolvingResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.AbstractResource",
            "org.springframework.core.io.AbstractResource()",
            "public org.springframework.core.io.AbstractResource()"
        ],
        [
            "boolean",
            "org.springframework.core.io.AbstractResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.core.io.AbstractResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "boolean",
            "org.springframework.core.io.AbstractResource.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "boolean",
            "org.springframework.core.io.AbstractResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.net.URL",
            "org.springframework.core.io.AbstractResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.net.URI",
            "org.springframework.core.io.AbstractResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "java.io.File",
            "org.springframework.core.io.AbstractResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "java.nio.channels.ReadableByteChannel",
            "org.springframework.core.io.AbstractResource.readableChannel()",
            "public java.nio.channels.ReadableByteChannel readableChannel() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.AbstractResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.AbstractResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.AbstractResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.AbstractResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "boolean",
            "org.springframework.core.io.AbstractResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.AbstractResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.AbstractResource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.io.ByteArrayResource",
            "org.springframework.core.io.ByteArrayResource(byte[])",
            "public org.springframework.core.io.ByteArrayResource(byte[])"
        ],
        [
            "org.springframework.core.io.ByteArrayResource",
            "org.springframework.core.io.ByteArrayResource(byte[], java.lang.String)",
            "public org.springframework.core.io.ByteArrayResource(byte[], java.lang.String)"
        ],
        [
            "byte[]",
            "org.springframework.core.io.ByteArrayResource.getByteArray()",
            "public final byte[] getByteArray()"
        ],
        [
            "boolean",
            "org.springframework.core.io.ByteArrayResource.exists()",
            "public boolean exists()"
        ],
        [
            "long",
            "org.springframework.core.io.ByteArrayResource.contentLength()",
            "public long contentLength()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.ByteArrayResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.ByteArrayResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.core.io.ByteArrayResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.ByteArrayResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.io.ClassPathResource",
            "org.springframework.core.io.ClassPathResource(java.lang.String)",
            "public org.springframework.core.io.ClassPathResource(java.lang.String)"
        ],
        [
            "org.springframework.core.io.ClassPathResource",
            "org.springframework.core.io.ClassPathResource(java.lang.String, java.lang.ClassLoader)",
            "public org.springframework.core.io.ClassPathResource(java.lang.String, java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.io.ClassPathResource",
            "org.springframework.core.io.ClassPathResource(java.lang.String, java.lang.Class<?>)",
            "public org.springframework.core.io.ClassPathResource(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.ClassPathResource.getPath()",
            "public final java.lang.String getPath()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.core.io.ClassPathResource.getClassLoader()",
            "public final java.lang.ClassLoader getClassLoader()"
        ],
        [
            "boolean",
            "org.springframework.core.io.ClassPathResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.core.io.ClassPathResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.ClassPathResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "java.net.URL",
            "org.springframework.core.io.ClassPathResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.ClassPathResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.ClassPathResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.ClassPathResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.core.io.ClassPathResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.ClassPathResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.io.ClassRelativeResourceLoader$ClassRelativeContextResource",
            "org.springframework.core.io.ClassRelativeResourceLoader$ClassRelativeContextResource(java.lang.String, java.lang.Class<?>)",
            "public org.springframework.core.io.ClassRelativeResourceLoader$ClassRelativeContextResource(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.ClassRelativeResourceLoader$ClassRelativeContextResource.getPathWithinContext()",
            "public java.lang.String getPathWithinContext()"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.ClassRelativeResourceLoader$ClassRelativeContextResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String)"
        ],
        [
            "org.springframework.core.io.ClassRelativeResourceLoader",
            "org.springframework.core.io.ClassRelativeResourceLoader(java.lang.Class<?>)",
            "public org.springframework.core.io.ClassRelativeResourceLoader(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource",
            "org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource(java.lang.String, java.lang.ClassLoader)",
            "public org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource(java.lang.String, java.lang.ClassLoader)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource.getPathWithinContext()",
            "public java.lang.String getPathWithinContext()"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String)"
        ],
        [
            "org.springframework.core.io.DefaultResourceLoader",
            "org.springframework.core.io.DefaultResourceLoader()",
            "public org.springframework.core.io.DefaultResourceLoader()"
        ],
        [
            "org.springframework.core.io.DefaultResourceLoader",
            "org.springframework.core.io.DefaultResourceLoader(java.lang.ClassLoader)",
            "public org.springframework.core.io.DefaultResourceLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.core.io.DefaultResourceLoader.setClassLoader(java.lang.ClassLoader)",
            "public void setClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.core.io.DefaultResourceLoader.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "void",
            "org.springframework.core.io.DefaultResourceLoader.addProtocolResolver(org.springframework.core.io.ProtocolResolver)",
            "public void addProtocolResolver(org.springframework.core.io.ProtocolResolver)"
        ],
        [
            "java.util.Collection<org.springframework.core.io.ProtocolResolver>",
            "org.springframework.core.io.DefaultResourceLoader.getProtocolResolvers()",
            "public java.util.Collection<org.springframework.core.io.ProtocolResolver> getProtocolResolvers()"
        ],
        [
            "<T> java.util.Map<org.springframework.core.io.Resource, T>",
            "org.springframework.core.io.DefaultResourceLoader.getResourceCache(java.lang.Class<T>)",
            "public <T> java.util.Map<org.springframework.core.io.Resource, T> getResourceCache(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.core.io.DefaultResourceLoader.clearResourceCaches()",
            "public void clearResourceCaches()"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.DefaultResourceLoader.getResource(java.lang.String)",
            "public org.springframework.core.io.Resource getResource(java.lang.String)"
        ],
        [
            "org.springframework.core.io.DescriptiveResource",
            "org.springframework.core.io.DescriptiveResource(java.lang.String)",
            "public org.springframework.core.io.DescriptiveResource(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.io.DescriptiveResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.core.io.DescriptiveResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.DescriptiveResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.DescriptiveResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.core.io.DescriptiveResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.DescriptiveResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.io.FileSystemResource",
            "org.springframework.core.io.FileSystemResource(java.lang.String)",
            "public org.springframework.core.io.FileSystemResource(java.lang.String)"
        ],
        [
            "org.springframework.core.io.FileSystemResource",
            "org.springframework.core.io.FileSystemResource(java.io.File)",
            "public org.springframework.core.io.FileSystemResource(java.io.File)"
        ],
        [
            "org.springframework.core.io.FileSystemResource",
            "org.springframework.core.io.FileSystemResource(java.nio.file.Path)",
            "public org.springframework.core.io.FileSystemResource(java.nio.file.Path)"
        ],
        [
            "org.springframework.core.io.FileSystemResource",
            "org.springframework.core.io.FileSystemResource(java.nio.file.FileSystem, java.lang.String)",
            "public org.springframework.core.io.FileSystemResource(java.nio.file.FileSystem, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.FileSystemResource.getPath()",
            "public final java.lang.String getPath()"
        ],
        [
            "boolean",
            "org.springframework.core.io.FileSystemResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.core.io.FileSystemResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.FileSystemResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.io.FileSystemResource.isWritable()",
            "public boolean isWritable()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.core.io.FileSystemResource.getOutputStream()",
            "public java.io.OutputStream getOutputStream() throws java.io.IOException"
        ],
        [
            "java.net.URL",
            "org.springframework.core.io.FileSystemResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.net.URI",
            "org.springframework.core.io.FileSystemResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.io.FileSystemResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.io.File",
            "org.springframework.core.io.FileSystemResource.getFile()",
            "public java.io.File getFile()"
        ],
        [
            "java.nio.channels.ReadableByteChannel",
            "org.springframework.core.io.FileSystemResource.readableChannel()",
            "public java.nio.channels.ReadableByteChannel readableChannel() throws java.io.IOException"
        ],
        [
            "java.nio.channels.WritableByteChannel",
            "org.springframework.core.io.FileSystemResource.writableChannel()",
            "public java.nio.channels.WritableByteChannel writableChannel() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.FileSystemResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.FileSystemResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.FileSystemResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.FileSystemResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.FileSystemResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.core.io.FileSystemResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.FileSystemResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.io.FileSystemResourceLoader$FileSystemContextResource",
            "org.springframework.core.io.FileSystemResourceLoader$FileSystemContextResource(java.lang.String)",
            "public org.springframework.core.io.FileSystemResourceLoader$FileSystemContextResource(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.FileSystemResourceLoader$FileSystemContextResource.getPathWithinContext()",
            "public java.lang.String getPathWithinContext()"
        ],
        [
            "org.springframework.core.io.FileSystemResourceLoader",
            "org.springframework.core.io.FileSystemResourceLoader()",
            "public org.springframework.core.io.FileSystemResourceLoader()"
        ],
        [
            "org.springframework.core.io.FileUrlResource",
            "org.springframework.core.io.FileUrlResource(java.net.URL)",
            "public org.springframework.core.io.FileUrlResource(java.net.URL)"
        ],
        [
            "org.springframework.core.io.FileUrlResource",
            "org.springframework.core.io.FileUrlResource(java.lang.String)",
            "public org.springframework.core.io.FileUrlResource(java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "java.io.File",
            "org.springframework.core.io.FileUrlResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.io.FileUrlResource.isWritable()",
            "public boolean isWritable()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.core.io.FileUrlResource.getOutputStream()",
            "public java.io.OutputStream getOutputStream() throws java.io.IOException"
        ],
        [
            "java.nio.channels.WritableByteChannel",
            "org.springframework.core.io.FileUrlResource.writableChannel()",
            "public java.nio.channels.WritableByteChannel writableChannel() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.FileUrlResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "org.springframework.core.io.InputStreamResource",
            "org.springframework.core.io.InputStreamResource(java.io.InputStream)",
            "public org.springframework.core.io.InputStreamResource(java.io.InputStream)"
        ],
        [
            "org.springframework.core.io.InputStreamResource",
            "org.springframework.core.io.InputStreamResource(java.io.InputStream, java.lang.String)",
            "public org.springframework.core.io.InputStreamResource(java.io.InputStream, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.io.InputStreamResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.core.io.InputStreamResource.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.InputStreamResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.InputStreamResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.core.io.InputStreamResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.InputStreamResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.io.PathResource",
            "org.springframework.core.io.PathResource(java.nio.file.Path)",
            "public org.springframework.core.io.PathResource(java.nio.file.Path)"
        ],
        [
            "org.springframework.core.io.PathResource",
            "org.springframework.core.io.PathResource(java.lang.String)",
            "public org.springframework.core.io.PathResource(java.lang.String)"
        ],
        [
            "org.springframework.core.io.PathResource",
            "org.springframework.core.io.PathResource(java.net.URI)",
            "public org.springframework.core.io.PathResource(java.net.URI)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.PathResource.getPath()",
            "public final java.lang.String getPath()"
        ],
        [
            "boolean",
            "org.springframework.core.io.PathResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.core.io.PathResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.PathResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.io.PathResource.isWritable()",
            "public boolean isWritable()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.core.io.PathResource.getOutputStream()",
            "public java.io.OutputStream getOutputStream() throws java.io.IOException"
        ],
        [
            "java.net.URL",
            "org.springframework.core.io.PathResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.net.URI",
            "org.springframework.core.io.PathResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.io.PathResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.io.File",
            "org.springframework.core.io.PathResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "java.nio.channels.ReadableByteChannel",
            "org.springframework.core.io.PathResource.readableChannel()",
            "public java.nio.channels.ReadableByteChannel readableChannel() throws java.io.IOException"
        ],
        [
            "java.nio.channels.WritableByteChannel",
            "org.springframework.core.io.PathResource.writableChannel()",
            "public java.nio.channels.WritableByteChannel writableChannel() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.PathResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.PathResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.PathResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.PathResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.PathResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.core.io.PathResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.PathResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "default",
            "org.springframework.core.io.Resource.boolean isReadable()",
            "public default boolean isReadable()"
        ],
        [
            "default",
            "org.springframework.core.io.Resource.boolean isOpen()",
            "public default boolean isOpen()"
        ],
        [
            "default",
            "org.springframework.core.io.Resource.boolean isFile()",
            "public default boolean isFile()"
        ],
        [
            "default",
            "org.springframework.core.io.Resource.java.nio.channels.ReadableByteChannel readableChannel()",
            "public default java.nio.channels.ReadableByteChannel readableChannel() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.ResourceEditor",
            "org.springframework.core.io.ResourceEditor()",
            "public org.springframework.core.io.ResourceEditor()"
        ],
        [
            "org.springframework.core.io.ResourceEditor",
            "org.springframework.core.io.ResourceEditor(org.springframework.core.io.ResourceLoader, org.springframework.core.env.PropertyResolver)",
            "public org.springframework.core.io.ResourceEditor(org.springframework.core.io.ResourceLoader, org.springframework.core.env.PropertyResolver)"
        ],
        [
            "org.springframework.core.io.ResourceEditor",
            "org.springframework.core.io.ResourceEditor(org.springframework.core.io.ResourceLoader, org.springframework.core.env.PropertyResolver, boolean)",
            "public org.springframework.core.io.ResourceEditor(org.springframework.core.io.ResourceLoader, org.springframework.core.env.PropertyResolver, boolean)"
        ],
        [
            "void",
            "org.springframework.core.io.ResourceEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.ResourceEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.core.io.UrlResource",
            "org.springframework.core.io.UrlResource(java.net.URI)",
            "public org.springframework.core.io.UrlResource(java.net.URI) throws java.net.MalformedURLException"
        ],
        [
            "org.springframework.core.io.UrlResource",
            "org.springframework.core.io.UrlResource(java.net.URL)",
            "public org.springframework.core.io.UrlResource(java.net.URL)"
        ],
        [
            "org.springframework.core.io.UrlResource",
            "org.springframework.core.io.UrlResource(java.lang.String)",
            "public org.springframework.core.io.UrlResource(java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "org.springframework.core.io.UrlResource",
            "org.springframework.core.io.UrlResource(java.lang.String, java.lang.String)",
            "public org.springframework.core.io.UrlResource(java.lang.String, java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "org.springframework.core.io.UrlResource",
            "org.springframework.core.io.UrlResource(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.core.io.UrlResource(java.lang.String, java.lang.String, java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.UrlResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "java.net.URL",
            "org.springframework.core.io.UrlResource.getURL()",
            "public java.net.URL getURL()"
        ],
        [
            "java.net.URI",
            "org.springframework.core.io.UrlResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.io.UrlResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.io.File",
            "org.springframework.core.io.UrlResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.UrlResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.UrlResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.UrlResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.core.io.UrlResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.UrlResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.io.VfsResource",
            "org.springframework.core.io.VfsResource(java.lang.Object)",
            "public org.springframework.core.io.VfsResource(java.lang.Object)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.VfsResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.io.VfsResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.core.io.VfsResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "java.net.URL",
            "org.springframework.core.io.VfsResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.net.URI",
            "org.springframework.core.io.VfsResource.getURI()",
            "public java.net.URI getURI() throws java.io.IOException"
        ],
        [
            "java.io.File",
            "org.springframework.core.io.VfsResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.VfsResource.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.core.io.VfsResource.lastModified()",
            "public long lastModified() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.VfsResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.VfsResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.VfsResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.core.io.VfsResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.VfsResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.core.io.VfsUtils",
            "org.springframework.core.io.VfsUtils()",
            "public org.springframework.core.io.VfsUtils()"
        ],
        [
            "default",
            "org.springframework.core.io.WritableResource.boolean isWritable()",
            "public default boolean isWritable()"
        ],
        [
            "default",
            "org.springframework.core.io.WritableResource.java.nio.channels.WritableByteChannel writableChannel()",
            "public default java.nio.channels.WritableByteChannel writableChannel() throws java.io.IOException"
        ],
        [
            "default",
            "org.springframework.core.io.buffer.DataBuffer.org.springframework.core.io.buffer.DataBuffer ensureCapacity(int)",
            "public default org.springframework.core.io.buffer.DataBuffer ensureCapacity(int)"
        ],
        [
            "default",
            "org.springframework.core.io.buffer.DataBuffer.org.springframework.core.io.buffer.DataBuffer write(java.lang.CharSequence, java.nio.charset.Charset)",
            "public default org.springframework.core.io.buffer.DataBuffer write(java.lang.CharSequence, java.nio.charset.Charset)"
        ],
        [
            "default",
            "org.springframework.core.io.buffer.DataBuffer.org.springframework.core.io.buffer.DataBuffer retainedSlice(int, int)",
            "public default org.springframework.core.io.buffer.DataBuffer retainedSlice(int, int)"
        ],
        [
            "default",
            "org.springframework.core.io.buffer.DataBuffer.java.lang.String toString(java.nio.charset.Charset)",
            "public default java.lang.String toString(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferLimitException",
            "org.springframework.core.io.buffer.DataBufferLimitException(java.lang.String)",
            "public org.springframework.core.io.buffer.DataBufferLimitException(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferUtils$AbstractNestedMatcher.match(org.springframework.core.io.buffer.DataBuffer)",
            "public int match(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.DataBufferUtils$AbstractNestedMatcher.match(byte)",
            "public boolean match(byte)"
        ],
        [
            "byte[]",
            "org.springframework.core.io.buffer.DataBufferUtils$AbstractNestedMatcher.delimiter()",
            "public byte[] delimiter()"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$AbstractNestedMatcher.reset()",
            "public void reset()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferUtils$CompositeMatcher.match(org.springframework.core.io.buffer.DataBuffer)",
            "public int match(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "byte[]",
            "org.springframework.core.io.buffer.DataBufferUtils$CompositeMatcher.delimiter()",
            "public byte[] delimiter()"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$CompositeMatcher.reset()",
            "public void reset()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$KnuthMorrisPrattMatcher",
            "org.springframework.core.io.buffer.DataBufferUtils$KnuthMorrisPrattMatcher(byte[])",
            "public org.springframework.core.io.buffer.DataBufferUtils$KnuthMorrisPrattMatcher(byte[])"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.DataBufferUtils$KnuthMorrisPrattMatcher.match(byte)",
            "public boolean match(byte)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler$State[]",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler$State.values()",
            "public static org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler$State[] values()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler$State",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler$State.valueOf(java.lang.String)",
            "public static org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler(java.nio.channels.AsynchronousFileChannel, reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, long, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler(java.nio.channels.AsynchronousFileChannel, reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, long, org.springframework.core.io.buffer.DataBufferFactory, int)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler.request(long)",
            "public void request(long)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler.cancel()",
            "public void cancel()"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler.completed(java.lang.Integer, org.springframework.core.io.buffer.DataBuffer)",
            "public void completed(java.lang.Integer, org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler.failed(java.lang.Throwable, org.springframework.core.io.buffer.DataBuffer)",
            "public void failed(java.lang.Throwable, org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler.failed(java.lang.Throwable, java.lang.Object)",
            "public void failed(java.lang.Throwable, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadCompletionHandler.completed(java.lang.Object, java.lang.Object)",
            "public void completed(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$ReadableByteChannelGenerator",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadableByteChannelGenerator(java.nio.channels.ReadableByteChannel, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public org.springframework.core.io.buffer.DataBufferUtils$ReadableByteChannelGenerator(java.nio.channels.ReadableByteChannel, org.springframework.core.io.buffer.DataBufferFactory, int)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadableByteChannelGenerator.accept(reactor.core.publisher.SynchronousSink<org.springframework.core.io.buffer.DataBuffer>)",
            "public void accept(reactor.core.publisher.SynchronousSink<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$ReadableByteChannelGenerator.accept(java.lang.Object)",
            "public void accept(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferUtils$SingleByteMatcher.match(org.springframework.core.io.buffer.DataBuffer)",
            "public int match(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.DataBufferUtils$SingleByteMatcher.match(byte)",
            "public boolean match(byte)"
        ],
        [
            "byte[]",
            "org.springframework.core.io.buffer.DataBufferUtils$SingleByteMatcher.delimiter()",
            "public byte[] delimiter()"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$SingleByteMatcher.reset()",
            "public void reset()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$WritableByteChannelSubscriber",
            "org.springframework.core.io.buffer.DataBufferUtils$WritableByteChannelSubscriber(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.WritableByteChannel)",
            "public org.springframework.core.io.buffer.DataBufferUtils$WritableByteChannelSubscriber(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.WritableByteChannel)"
        ],
        [
            "reactor.util.context.Context",
            "org.springframework.core.io.buffer.DataBufferUtils$WritableByteChannelSubscriber.currentContext()",
            "public reactor.util.context.Context currentContext()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler",
            "org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long)",
            "public org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler.completed(java.lang.Integer, java.nio.ByteBuffer)",
            "public void completed(java.lang.Integer, java.nio.ByteBuffer)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler.failed(java.lang.Throwable, java.nio.ByteBuffer)",
            "public void failed(java.lang.Throwable, java.nio.ByteBuffer)"
        ],
        [
            "reactor.util.context.Context",
            "org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler.currentContext()",
            "public reactor.util.context.Context currentContext()"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler.failed(java.lang.Throwable, java.lang.Object)",
            "public void failed(java.lang.Throwable, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler.completed(java.lang.Object, java.lang.Object)",
            "public void completed(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils",
            "org.springframework.core.io.buffer.DataBufferUtils()",
            "public org.springframework.core.io.buffer.DataBufferUtils()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.readInputStream(java.util.concurrent.Callable<java.io.InputStream>, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readInputStream(java.util.concurrent.Callable<java.io.InputStream>, org.springframework.core.io.buffer.DataBufferFactory, int)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.readByteChannel(java.util.concurrent.Callable<java.nio.channels.ReadableByteChannel>, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readByteChannel(java.util.concurrent.Callable<java.nio.channels.ReadableByteChannel>, org.springframework.core.io.buffer.DataBufferFactory, int)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, org.springframework.core.io.buffer.DataBufferFactory, int)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, long, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, long, org.springframework.core.io.buffer.DataBufferFactory, int)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.read(java.nio.file.Path, org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.file.OpenOption...)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(java.nio.file.Path, org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.file.OpenOption...)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.read(org.springframework.core.io.Resource, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(org.springframework.core.io.Resource, org.springframework.core.io.buffer.DataBufferFactory, int)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.read(org.springframework.core.io.Resource, long, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(org.springframework.core.io.Resource, long, org.springframework.core.io.buffer.DataBufferFactory, int)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.io.OutputStream)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.io.OutputStream)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.WritableByteChannel)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.WritableByteChannel)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.write(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.core.io.buffer.DataBufferUtils.write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.file.Path, java.nio.file.OpenOption...)",
            "public static reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.file.Path, java.nio.file.OpenOption...)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.takeUntilByteCount(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, long)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> takeUntilByteCount(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, long)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.skipUntilByteCount(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, long)",
            "public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> skipUntilByteCount(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, long)"
        ],
        [
            "<T extends org.springframework.core.io.buffer.DataBuffer> T",
            "org.springframework.core.io.buffer.DataBufferUtils.retain(T)",
            "public static <T extends org.springframework.core.io.buffer.DataBuffer> T retain(T)"
        ],
        [
            "<T extends org.springframework.core.io.buffer.DataBuffer> T",
            "org.springframework.core.io.buffer.DataBufferUtils.touch(T, java.lang.Object)",
            "public static <T extends org.springframework.core.io.buffer.DataBuffer> T touch(T, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.DataBufferUtils.release(org.springframework.core.io.buffer.DataBuffer)",
            "public static boolean release(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.releaseConsumer()",
            "public static java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> releaseConsumer()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.join(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public static reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer> join(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.core.io.buffer.DataBufferUtils.join(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, int)",
            "public static reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer> join(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$Matcher",
            "org.springframework.core.io.buffer.DataBufferUtils.matcher(byte[])",
            "public static org.springframework.core.io.buffer.DataBufferUtils$Matcher matcher(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferUtils$Matcher",
            "org.springframework.core.io.buffer.DataBufferUtils.matcher(byte[]...)",
            "public static org.springframework.core.io.buffer.DataBufferUtils$Matcher matcher(byte[]...)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferWrapper",
            "org.springframework.core.io.buffer.DataBufferWrapper(org.springframework.core.io.buffer.DataBuffer)",
            "public org.springframework.core.io.buffer.DataBufferWrapper(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.dataBuffer()",
            "public org.springframework.core.io.buffer.DataBuffer dataBuffer()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.core.io.buffer.DataBufferWrapper.factory()",
            "public org.springframework.core.io.buffer.DataBufferFactory factory()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferWrapper.indexOf(java.util.function.IntPredicate, int)",
            "public int indexOf(java.util.function.IntPredicate, int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferWrapper.lastIndexOf(java.util.function.IntPredicate, int)",
            "public int lastIndexOf(java.util.function.IntPredicate, int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferWrapper.readableByteCount()",
            "public int readableByteCount()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferWrapper.writableByteCount()",
            "public int writableByteCount()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferWrapper.capacity()",
            "public int capacity()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.capacity(int)",
            "public org.springframework.core.io.buffer.DataBuffer capacity(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.ensureCapacity(int)",
            "public org.springframework.core.io.buffer.DataBuffer ensureCapacity(int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferWrapper.readPosition()",
            "public int readPosition()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.readPosition(int)",
            "public org.springframework.core.io.buffer.DataBuffer readPosition(int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DataBufferWrapper.writePosition()",
            "public int writePosition()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.writePosition(int)",
            "public org.springframework.core.io.buffer.DataBuffer writePosition(int)"
        ],
        [
            "byte",
            "org.springframework.core.io.buffer.DataBufferWrapper.getByte(int)",
            "public byte getByte(int)"
        ],
        [
            "byte",
            "org.springframework.core.io.buffer.DataBufferWrapper.read()",
            "public byte read()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.read(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer read(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.read(byte[], int, int)",
            "public org.springframework.core.io.buffer.DataBuffer read(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.write(byte)",
            "public org.springframework.core.io.buffer.DataBuffer write(byte)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.write(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer write(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.write(byte[], int, int)",
            "public org.springframework.core.io.buffer.DataBuffer write(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.write(org.springframework.core.io.buffer.DataBuffer...)",
            "public org.springframework.core.io.buffer.DataBuffer write(org.springframework.core.io.buffer.DataBuffer...)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.write(java.nio.ByteBuffer...)",
            "public org.springframework.core.io.buffer.DataBuffer write(java.nio.ByteBuffer...)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.write(java.lang.CharSequence, java.nio.charset.Charset)",
            "public org.springframework.core.io.buffer.DataBuffer write(java.lang.CharSequence, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.slice(int, int)",
            "public org.springframework.core.io.buffer.DataBuffer slice(int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.retainedSlice(int, int)",
            "public org.springframework.core.io.buffer.DataBuffer retainedSlice(int, int)"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.asByteBuffer()",
            "public java.nio.ByteBuffer asByteBuffer()"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.core.io.buffer.DataBufferWrapper.asByteBuffer(int, int)",
            "public java.nio.ByteBuffer asByteBuffer(int, int)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.buffer.DataBufferWrapper.asInputStream()",
            "public java.io.InputStream asInputStream()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.buffer.DataBufferWrapper.asInputStream(boolean)",
            "public java.io.InputStream asInputStream(boolean)"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.core.io.buffer.DataBufferWrapper.asOutputStream()",
            "public java.io.OutputStream asOutputStream()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.DataBufferWrapper.toString(java.nio.charset.Charset)",
            "public java.lang.String toString(java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.DataBufferWrapper.toString(int, int, java.nio.charset.Charset)",
            "public java.lang.String toString(int, int, java.nio.charset.Charset)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer$DefaultDataBufferInputStream.available()",
            "public int available()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer$DefaultDataBufferInputStream.read()",
            "public int read()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer$DefaultDataBufferInputStream.read(byte[], int, int)",
            "public int read(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DefaultDataBuffer$DefaultDataBufferOutputStream.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.DefaultDataBuffer$DefaultDataBufferOutputStream.write(byte[], int, int)",
            "public void write(byte[], int, int) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.capacity(int)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer capacity(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.slice(int, int)",
            "public org.springframework.core.io.buffer.DataBuffer slice(int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.write(java.nio.ByteBuffer[])",
            "public org.springframework.core.io.buffer.DataBuffer write(java.nio.ByteBuffer[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.write(org.springframework.core.io.buffer.DataBuffer[])",
            "public org.springframework.core.io.buffer.DataBuffer write(org.springframework.core.io.buffer.DataBuffer[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.write(byte[], int, int)",
            "public org.springframework.core.io.buffer.DataBuffer write(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.write(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer write(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.write(byte)",
            "public org.springframework.core.io.buffer.DataBuffer write(byte)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.read(byte[], int, int)",
            "public org.springframework.core.io.buffer.DataBuffer read(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.read(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer read(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.writePosition(int)",
            "public org.springframework.core.io.buffer.DataBuffer writePosition(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.readPosition(int)",
            "public org.springframework.core.io.buffer.DataBuffer readPosition(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.capacity(int)",
            "public org.springframework.core.io.buffer.DataBuffer capacity(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.core.io.buffer.DefaultDataBuffer$SlicedDefaultDataBuffer.factory()",
            "public org.springframework.core.io.buffer.DataBufferFactory factory()"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.getNativeBuffer()",
            "public java.nio.ByteBuffer getNativeBuffer()"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBufferFactory",
            "org.springframework.core.io.buffer.DefaultDataBuffer.factory()",
            "public org.springframework.core.io.buffer.DefaultDataBufferFactory factory()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer.indexOf(java.util.function.IntPredicate, int)",
            "public int indexOf(java.util.function.IntPredicate, int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer.lastIndexOf(java.util.function.IntPredicate, int)",
            "public int lastIndexOf(java.util.function.IntPredicate, int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer.readableByteCount()",
            "public int readableByteCount()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer.writableByteCount()",
            "public int writableByteCount()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer.readPosition()",
            "public int readPosition()"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.readPosition(int)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer readPosition(int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer.writePosition()",
            "public int writePosition()"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.writePosition(int)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer writePosition(int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer.capacity()",
            "public int capacity()"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.capacity(int)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer capacity(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.ensureCapacity(int)",
            "public org.springframework.core.io.buffer.DataBuffer ensureCapacity(int)"
        ],
        [
            "byte",
            "org.springframework.core.io.buffer.DefaultDataBuffer.getByte(int)",
            "public byte getByte(int)"
        ],
        [
            "byte",
            "org.springframework.core.io.buffer.DefaultDataBuffer.read()",
            "public byte read()"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.read(byte[])",
            "public org.springframework.core.io.buffer.DefaultDataBuffer read(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.read(byte[], int, int)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer read(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(byte)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer write(byte)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(byte[])",
            "public org.springframework.core.io.buffer.DefaultDataBuffer write(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(byte[], int, int)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer write(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(org.springframework.core.io.buffer.DataBuffer...)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer write(org.springframework.core.io.buffer.DataBuffer...)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(java.nio.ByteBuffer...)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer write(java.nio.ByteBuffer...)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.slice(int, int)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer slice(int, int)"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.asByteBuffer()",
            "public java.nio.ByteBuffer asByteBuffer()"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.asByteBuffer(int, int)",
            "public java.nio.ByteBuffer asByteBuffer(int, int)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.buffer.DefaultDataBuffer.asInputStream()",
            "public java.io.InputStream asInputStream()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.buffer.DefaultDataBuffer.asInputStream(boolean)",
            "public java.io.InputStream asInputStream(boolean)"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.core.io.buffer.DefaultDataBuffer.asOutputStream()",
            "public java.io.OutputStream asOutputStream()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.DefaultDataBuffer.toString(int, int, java.nio.charset.Charset)",
            "public java.lang.String toString(int, int, java.nio.charset.Charset)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.DefaultDataBuffer.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.DefaultDataBuffer.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.DefaultDataBuffer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.slice(int, int)",
            "public org.springframework.core.io.buffer.DataBuffer slice(int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(java.nio.ByteBuffer[])",
            "public org.springframework.core.io.buffer.DataBuffer write(java.nio.ByteBuffer[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(org.springframework.core.io.buffer.DataBuffer[])",
            "public org.springframework.core.io.buffer.DataBuffer write(org.springframework.core.io.buffer.DataBuffer[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(byte[], int, int)",
            "public org.springframework.core.io.buffer.DataBuffer write(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer write(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.write(byte)",
            "public org.springframework.core.io.buffer.DataBuffer write(byte)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.read(byte[], int, int)",
            "public org.springframework.core.io.buffer.DataBuffer read(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.read(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer read(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.writePosition(int)",
            "public org.springframework.core.io.buffer.DataBuffer writePosition(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.readPosition(int)",
            "public org.springframework.core.io.buffer.DataBuffer readPosition(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBuffer.capacity(int)",
            "public org.springframework.core.io.buffer.DataBuffer capacity(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.core.io.buffer.DefaultDataBuffer.factory()",
            "public org.springframework.core.io.buffer.DataBufferFactory factory()"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBufferFactory",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory()",
            "public org.springframework.core.io.buffer.DefaultDataBufferFactory()"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBufferFactory",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory(boolean)",
            "public org.springframework.core.io.buffer.DefaultDataBufferFactory(boolean)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBufferFactory",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory(boolean, int)",
            "public org.springframework.core.io.buffer.DefaultDataBufferFactory(boolean, int)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.allocateBuffer()",
            "public org.springframework.core.io.buffer.DefaultDataBuffer allocateBuffer()"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.allocateBuffer(int)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer allocateBuffer(int)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.wrap(java.nio.ByteBuffer)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer wrap(java.nio.ByteBuffer)"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.wrap(byte[])",
            "public org.springframework.core.io.buffer.DefaultDataBuffer wrap(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DefaultDataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.join(java.util.List<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.core.io.buffer.DefaultDataBuffer join(java.util.List<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.join(java.util.List)",
            "public org.springframework.core.io.buffer.DataBuffer join(java.util.List)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.wrap(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer wrap(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.wrap(java.nio.ByteBuffer)",
            "public org.springframework.core.io.buffer.DataBuffer wrap(java.nio.ByteBuffer)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.allocateBuffer(int)",
            "public org.springframework.core.io.buffer.DataBuffer allocateBuffer(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.DefaultDataBufferFactory.allocateBuffer()",
            "public org.springframework.core.io.buffer.DataBuffer allocateBuffer()"
        ],
        [
            "org.springframework.core.io.buffer.LimitedDataBufferList",
            "org.springframework.core.io.buffer.LimitedDataBufferList(int)",
            "public org.springframework.core.io.buffer.LimitedDataBufferList(int)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.LimitedDataBufferList.add(org.springframework.core.io.buffer.DataBuffer)",
            "public boolean add(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.LimitedDataBufferList.add(int, org.springframework.core.io.buffer.DataBuffer)",
            "public void add(int, org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.LimitedDataBufferList.addAll(java.util.Collection<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public boolean addAll(java.util.Collection<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.LimitedDataBufferList.addAll(int, java.util.Collection<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public boolean addAll(int, java.util.Collection<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.LimitedDataBufferList.remove(int)",
            "public org.springframework.core.io.buffer.DataBuffer remove(int)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.LimitedDataBufferList.remove(java.lang.Object)",
            "public boolean remove(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.LimitedDataBufferList.removeAll(java.util.Collection<?>)",
            "public boolean removeAll(java.util.Collection<?>)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.LimitedDataBufferList.removeIf(java.util.function.Predicate<? super org.springframework.core.io.buffer.DataBuffer>)",
            "public boolean removeIf(java.util.function.Predicate<? super org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.LimitedDataBufferList.set(int, org.springframework.core.io.buffer.DataBuffer)",
            "public org.springframework.core.io.buffer.DataBuffer set(int, org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.LimitedDataBufferList.clear()",
            "public void clear()"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.LimitedDataBufferList.releaseAndClear()",
            "public void releaseAndClear()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.io.buffer.LimitedDataBufferList.remove(int)",
            "public java.lang.Object remove(int)"
        ],
        [
            "void",
            "org.springframework.core.io.buffer.LimitedDataBufferList.add(int, java.lang.Object)",
            "public void add(int, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.LimitedDataBufferList.add(java.lang.Object)",
            "public boolean add(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.io.buffer.LimitedDataBufferList.set(int, java.lang.Object)",
            "public java.lang.Object set(int, java.lang.Object)"
        ],
        [
            "io.netty.buffer.ByteBuf",
            "org.springframework.core.io.buffer.NettyDataBuffer.getNativeBuffer()",
            "public io.netty.buffer.ByteBuf getNativeBuffer()"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBufferFactory",
            "org.springframework.core.io.buffer.NettyDataBuffer.factory()",
            "public org.springframework.core.io.buffer.NettyDataBufferFactory factory()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.NettyDataBuffer.indexOf(java.util.function.IntPredicate, int)",
            "public int indexOf(java.util.function.IntPredicate, int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.NettyDataBuffer.lastIndexOf(java.util.function.IntPredicate, int)",
            "public int lastIndexOf(java.util.function.IntPredicate, int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.NettyDataBuffer.readableByteCount()",
            "public int readableByteCount()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.NettyDataBuffer.writableByteCount()",
            "public int writableByteCount()"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.NettyDataBuffer.readPosition()",
            "public int readPosition()"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.readPosition(int)",
            "public org.springframework.core.io.buffer.NettyDataBuffer readPosition(int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.NettyDataBuffer.writePosition()",
            "public int writePosition()"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.writePosition(int)",
            "public org.springframework.core.io.buffer.NettyDataBuffer writePosition(int)"
        ],
        [
            "byte",
            "org.springframework.core.io.buffer.NettyDataBuffer.getByte(int)",
            "public byte getByte(int)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.NettyDataBuffer.capacity()",
            "public int capacity()"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.capacity(int)",
            "public org.springframework.core.io.buffer.NettyDataBuffer capacity(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.ensureCapacity(int)",
            "public org.springframework.core.io.buffer.DataBuffer ensureCapacity(int)"
        ],
        [
            "byte",
            "org.springframework.core.io.buffer.NettyDataBuffer.read()",
            "public byte read()"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.read(byte[])",
            "public org.springframework.core.io.buffer.NettyDataBuffer read(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.read(byte[], int, int)",
            "public org.springframework.core.io.buffer.NettyDataBuffer read(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(byte)",
            "public org.springframework.core.io.buffer.NettyDataBuffer write(byte)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(byte[])",
            "public org.springframework.core.io.buffer.NettyDataBuffer write(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(byte[], int, int)",
            "public org.springframework.core.io.buffer.NettyDataBuffer write(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(org.springframework.core.io.buffer.DataBuffer...)",
            "public org.springframework.core.io.buffer.NettyDataBuffer write(org.springframework.core.io.buffer.DataBuffer...)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(java.nio.ByteBuffer...)",
            "public org.springframework.core.io.buffer.NettyDataBuffer write(java.nio.ByteBuffer...)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(io.netty.buffer.ByteBuf...)",
            "public org.springframework.core.io.buffer.NettyDataBuffer write(io.netty.buffer.ByteBuf...)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(java.lang.CharSequence, java.nio.charset.Charset)",
            "public org.springframework.core.io.buffer.DataBuffer write(java.lang.CharSequence, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.slice(int, int)",
            "public org.springframework.core.io.buffer.NettyDataBuffer slice(int, int)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.retainedSlice(int, int)",
            "public org.springframework.core.io.buffer.NettyDataBuffer retainedSlice(int, int)"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.asByteBuffer()",
            "public java.nio.ByteBuffer asByteBuffer()"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.asByteBuffer(int, int)",
            "public java.nio.ByteBuffer asByteBuffer(int, int)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.buffer.NettyDataBuffer.asInputStream()",
            "public java.io.InputStream asInputStream()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.buffer.NettyDataBuffer.asInputStream(boolean)",
            "public java.io.InputStream asInputStream(boolean)"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.core.io.buffer.NettyDataBuffer.asOutputStream()",
            "public java.io.OutputStream asOutputStream()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.NettyDataBuffer.toString(java.nio.charset.Charset)",
            "public java.lang.String toString(java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.NettyDataBuffer.toString(int, int, java.nio.charset.Charset)",
            "public java.lang.String toString(int, int, java.nio.charset.Charset)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.NettyDataBuffer.isAllocated()",
            "public boolean isAllocated()"
        ],
        [
            "org.springframework.core.io.buffer.PooledDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.retain()",
            "public org.springframework.core.io.buffer.PooledDataBuffer retain()"
        ],
        [
            "org.springframework.core.io.buffer.PooledDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.touch(java.lang.Object)",
            "public org.springframework.core.io.buffer.PooledDataBuffer touch(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.NettyDataBuffer.release()",
            "public boolean release()"
        ],
        [
            "boolean",
            "org.springframework.core.io.buffer.NettyDataBuffer.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.buffer.NettyDataBuffer.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.NettyDataBuffer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.retainedSlice(int, int)",
            "public org.springframework.core.io.buffer.DataBuffer retainedSlice(int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.slice(int, int)",
            "public org.springframework.core.io.buffer.DataBuffer slice(int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(java.nio.ByteBuffer[])",
            "public org.springframework.core.io.buffer.DataBuffer write(java.nio.ByteBuffer[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(org.springframework.core.io.buffer.DataBuffer[])",
            "public org.springframework.core.io.buffer.DataBuffer write(org.springframework.core.io.buffer.DataBuffer[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(byte[], int, int)",
            "public org.springframework.core.io.buffer.DataBuffer write(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer write(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.write(byte)",
            "public org.springframework.core.io.buffer.DataBuffer write(byte)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.read(byte[], int, int)",
            "public org.springframework.core.io.buffer.DataBuffer read(byte[], int, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.read(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer read(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.writePosition(int)",
            "public org.springframework.core.io.buffer.DataBuffer writePosition(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.readPosition(int)",
            "public org.springframework.core.io.buffer.DataBuffer readPosition(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBuffer.capacity(int)",
            "public org.springframework.core.io.buffer.DataBuffer capacity(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.core.io.buffer.NettyDataBuffer.factory()",
            "public org.springframework.core.io.buffer.DataBufferFactory factory()"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBufferFactory",
            "org.springframework.core.io.buffer.NettyDataBufferFactory(io.netty.buffer.ByteBufAllocator)",
            "public org.springframework.core.io.buffer.NettyDataBufferFactory(io.netty.buffer.ByteBufAllocator)"
        ],
        [
            "io.netty.buffer.ByteBufAllocator",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.getByteBufAllocator()",
            "public io.netty.buffer.ByteBufAllocator getByteBufAllocator()"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.allocateBuffer()",
            "public org.springframework.core.io.buffer.NettyDataBuffer allocateBuffer()"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.allocateBuffer(int)",
            "public org.springframework.core.io.buffer.NettyDataBuffer allocateBuffer(int)"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.wrap(java.nio.ByteBuffer)",
            "public org.springframework.core.io.buffer.NettyDataBuffer wrap(java.nio.ByteBuffer)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.wrap(byte[])",
            "public org.springframework.core.io.buffer.DataBuffer wrap(byte[])"
        ],
        [
            "org.springframework.core.io.buffer.NettyDataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.wrap(io.netty.buffer.ByteBuf)",
            "public org.springframework.core.io.buffer.NettyDataBuffer wrap(io.netty.buffer.ByteBuf)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.join(java.util.List<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.core.io.buffer.DataBuffer join(java.util.List<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "io.netty.buffer.ByteBuf",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.toByteBuf(org.springframework.core.io.buffer.DataBuffer)",
            "public static io.netty.buffer.ByteBuf toByteBuf(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.wrap(java.nio.ByteBuffer)",
            "public org.springframework.core.io.buffer.DataBuffer wrap(java.nio.ByteBuffer)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.allocateBuffer(int)",
            "public org.springframework.core.io.buffer.DataBuffer allocateBuffer(int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.core.io.buffer.NettyDataBufferFactory.allocateBuffer()",
            "public org.springframework.core.io.buffer.DataBuffer allocateBuffer()"
        ],
        [
            "org.springframework.core.io.support.DefaultPropertySourceFactory",
            "org.springframework.core.io.support.DefaultPropertySourceFactory()",
            "public org.springframework.core.io.support.DefaultPropertySourceFactory()"
        ],
        [
            "org.springframework.core.env.PropertySource<?>",
            "org.springframework.core.io.support.DefaultPropertySourceFactory.createPropertySource(java.lang.String, org.springframework.core.io.support.EncodedResource)",
            "public org.springframework.core.env.PropertySource<?> createPropertySource(java.lang.String, org.springframework.core.io.support.EncodedResource) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.EncodedResource",
            "org.springframework.core.io.support.EncodedResource(org.springframework.core.io.Resource)",
            "public org.springframework.core.io.support.EncodedResource(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.core.io.support.EncodedResource",
            "org.springframework.core.io.support.EncodedResource(org.springframework.core.io.Resource, java.lang.String)",
            "public org.springframework.core.io.support.EncodedResource(org.springframework.core.io.Resource, java.lang.String)"
        ],
        [
            "org.springframework.core.io.support.EncodedResource",
            "org.springframework.core.io.support.EncodedResource(org.springframework.core.io.Resource, java.nio.charset.Charset)",
            "public org.springframework.core.io.support.EncodedResource(org.springframework.core.io.Resource, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.support.EncodedResource.getResource()",
            "public final org.springframework.core.io.Resource getResource()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.support.EncodedResource.getEncoding()",
            "public final java.lang.String getEncoding()"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.core.io.support.EncodedResource.getCharset()",
            "public final java.nio.charset.Charset getCharset()"
        ],
        [
            "boolean",
            "org.springframework.core.io.support.EncodedResource.requiresReader()",
            "public boolean requiresReader()"
        ],
        [
            "java.io.Reader",
            "org.springframework.core.io.support.EncodedResource.getReader()",
            "public java.io.Reader getReader() throws java.io.IOException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.core.io.support.EncodedResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.io.support.EncodedResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.io.support.EncodedResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.support.EncodedResource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.io.support.LocalizedResourceHelper",
            "org.springframework.core.io.support.LocalizedResourceHelper()",
            "public org.springframework.core.io.support.LocalizedResourceHelper()"
        ],
        [
            "org.springframework.core.io.support.LocalizedResourceHelper",
            "org.springframework.core.io.support.LocalizedResourceHelper(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.core.io.support.LocalizedResourceHelper(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "void",
            "org.springframework.core.io.support.LocalizedResourceHelper.setSeparator(java.lang.String)",
            "public void setSeparator(java.lang.String)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.support.LocalizedResourceHelper.findLocalizedResource(java.lang.String, java.lang.String, java.util.Locale)",
            "public org.springframework.core.io.Resource findLocalizedResource(java.lang.String, java.lang.String, java.util.Locale)"
        ],
        [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor(java.lang.String, java.lang.String, org.springframework.util.PathMatcher)",
            "public org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor(java.lang.String, java.lang.String, org.springframework.util.PathMatcher)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "void",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor.visit(java.lang.Object)",
            "public void visit(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor.getAttributes()",
            "public java.lang.Object getAttributes()"
        ],
        [
            "java.util.Set<org.springframework.core.io.Resource>",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor.getResources()",
            "public java.util.Set<org.springframework.core.io.Resource> getResources()"
        ],
        [
            "int",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor.size()",
            "public int size()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.util.Set<org.springframework.core.io.Resource>",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$VfsResourceMatchingDelegate.findMatchingResources(java.net.URL, java.lang.String, org.springframework.util.PathMatcher)",
            "public static java.util.Set<org.springframework.core.io.Resource> findMatchingResources(java.net.URL, java.lang.String, org.springframework.util.PathMatcher) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver()",
            "public org.springframework.core.io.support.PathMatchingResourcePatternResolver()"
        ],
        [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.core.io.support.PathMatchingResourcePatternResolver(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver(java.lang.ClassLoader)",
            "public org.springframework.core.io.support.PathMatchingResourcePatternResolver(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.io.ResourceLoader",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResourceLoader()",
            "public org.springframework.core.io.ResourceLoader getResourceLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "void",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver.setPathMatcher(org.springframework.util.PathMatcher)",
            "public void setPathMatcher(org.springframework.util.PathMatcher)"
        ],
        [
            "org.springframework.util.PathMatcher",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver.getPathMatcher()",
            "public org.springframework.util.PathMatcher getPathMatcher()"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResource(java.lang.String)",
            "public org.springframework.core.io.Resource getResource(java.lang.String)"
        ],
        [
            "org.springframework.core.io.Resource[]",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(java.lang.String)",
            "public org.springframework.core.io.Resource[] getResources(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.PropertiesLoaderSupport",
            "org.springframework.core.io.support.PropertiesLoaderSupport()",
            "public org.springframework.core.io.support.PropertiesLoaderSupport()"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderSupport.setProperties(java.util.Properties)",
            "public void setProperties(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderSupport.setPropertiesArray(java.util.Properties...)",
            "public void setPropertiesArray(java.util.Properties...)"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderSupport.setLocation(org.springframework.core.io.Resource)",
            "public void setLocation(org.springframework.core.io.Resource)"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderSupport.setLocations(org.springframework.core.io.Resource...)",
            "public void setLocations(org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderSupport.setLocalOverride(boolean)",
            "public void setLocalOverride(boolean)"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderSupport.setIgnoreResourceNotFound(boolean)",
            "public void setIgnoreResourceNotFound(boolean)"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderSupport.setFileEncoding(java.lang.String)",
            "public void setFileEncoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderSupport.setPropertiesPersister(org.springframework.util.PropertiesPersister)",
            "public void setPropertiesPersister(org.springframework.util.PropertiesPersister)"
        ],
        [
            "org.springframework.core.io.support.PropertiesLoaderUtils",
            "org.springframework.core.io.support.PropertiesLoaderUtils()",
            "public org.springframework.core.io.support.PropertiesLoaderUtils()"
        ],
        [
            "java.util.Properties",
            "org.springframework.core.io.support.PropertiesLoaderUtils.loadProperties(org.springframework.core.io.support.EncodedResource)",
            "public static java.util.Properties loadProperties(org.springframework.core.io.support.EncodedResource) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderUtils.fillProperties(java.util.Properties, org.springframework.core.io.support.EncodedResource)",
            "public static void fillProperties(java.util.Properties, org.springframework.core.io.support.EncodedResource) throws java.io.IOException"
        ],
        [
            "java.util.Properties",
            "org.springframework.core.io.support.PropertiesLoaderUtils.loadProperties(org.springframework.core.io.Resource)",
            "public static java.util.Properties loadProperties(org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.io.support.PropertiesLoaderUtils.fillProperties(java.util.Properties, org.springframework.core.io.Resource)",
            "public static void fillProperties(java.util.Properties, org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "java.util.Properties",
            "org.springframework.core.io.support.PropertiesLoaderUtils.loadAllProperties(java.lang.String)",
            "public static java.util.Properties loadAllProperties(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.util.Properties",
            "org.springframework.core.io.support.PropertiesLoaderUtils.loadAllProperties(java.lang.String, java.lang.ClassLoader)",
            "public static java.util.Properties loadAllProperties(java.lang.String, java.lang.ClassLoader) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourceArrayPropertyEditor",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor()",
            "public org.springframework.core.io.support.ResourceArrayPropertyEditor()"
        ],
        [
            "org.springframework.core.io.support.ResourceArrayPropertyEditor",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor(org.springframework.core.io.support.ResourcePatternResolver, org.springframework.core.env.PropertyResolver)",
            "public org.springframework.core.io.support.ResourceArrayPropertyEditor(org.springframework.core.io.support.ResourcePatternResolver, org.springframework.core.env.PropertyResolver)"
        ],
        [
            "org.springframework.core.io.support.ResourceArrayPropertyEditor",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor(org.springframework.core.io.support.ResourcePatternResolver, org.springframework.core.env.PropertyResolver, boolean)",
            "public org.springframework.core.io.support.ResourceArrayPropertyEditor(org.springframework.core.io.support.ResourcePatternResolver, org.springframework.core.env.PropertyResolver, boolean)"
        ],
        [
            "void",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.core.io.support.ResourcePatternUtils",
            "org.springframework.core.io.support.ResourcePatternUtils()",
            "public org.springframework.core.io.support.ResourcePatternUtils()"
        ],
        [
            "boolean",
            "org.springframework.core.io.support.ResourcePatternUtils.isUrl(java.lang.String)",
            "public static boolean isUrl(java.lang.String)"
        ],
        [
            "org.springframework.core.io.support.ResourcePatternResolver",
            "org.springframework.core.io.support.ResourcePatternUtils.getResourcePatternResolver(org.springframework.core.io.ResourceLoader)",
            "public static org.springframework.core.io.support.ResourcePatternResolver getResourcePatternResolver(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertiesPersister",
            "org.springframework.core.io.support.ResourcePropertiesPersister()",
            "public org.springframework.core.io.support.ResourcePropertiesPersister()"
        ],
        [
            "void",
            "org.springframework.core.io.support.ResourcePropertiesPersister.loadFromXml(java.util.Properties, java.io.InputStream)",
            "public void loadFromXml(java.util.Properties, java.io.InputStream) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.io.support.ResourcePropertiesPersister.storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String)",
            "public void storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.io.support.ResourcePropertiesPersister.storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String, java.lang.String)",
            "public void storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource(java.lang.String, org.springframework.core.io.support.EncodedResource)",
            "public org.springframework.core.io.support.ResourcePropertySource(java.lang.String, org.springframework.core.io.support.EncodedResource) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource(org.springframework.core.io.support.EncodedResource)",
            "public org.springframework.core.io.support.ResourcePropertySource(org.springframework.core.io.support.EncodedResource) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource(java.lang.String, org.springframework.core.io.Resource)",
            "public org.springframework.core.io.support.ResourcePropertySource(java.lang.String, org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource(org.springframework.core.io.Resource)",
            "public org.springframework.core.io.support.ResourcePropertySource(org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource(java.lang.String, java.lang.String, java.lang.ClassLoader)",
            "public org.springframework.core.io.support.ResourcePropertySource(java.lang.String, java.lang.String, java.lang.ClassLoader) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource(java.lang.String, java.lang.ClassLoader)",
            "public org.springframework.core.io.support.ResourcePropertySource(java.lang.String, java.lang.ClassLoader) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource(java.lang.String, java.lang.String)",
            "public org.springframework.core.io.support.ResourcePropertySource(java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource(java.lang.String)",
            "public org.springframework.core.io.support.ResourcePropertySource(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource.withName(java.lang.String)",
            "public org.springframework.core.io.support.ResourcePropertySource withName(java.lang.String)"
        ],
        [
            "org.springframework.core.io.support.ResourcePropertySource",
            "org.springframework.core.io.support.ResourcePropertySource.withResourceName()",
            "public org.springframework.core.io.support.ResourcePropertySource withResourceName()"
        ],
        [
            "org.springframework.core.io.support.ResourceRegion",
            "org.springframework.core.io.support.ResourceRegion(org.springframework.core.io.Resource, long, long)",
            "public org.springframework.core.io.support.ResourceRegion(org.springframework.core.io.Resource, long, long)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.io.support.ResourceRegion.getResource()",
            "public org.springframework.core.io.Resource getResource()"
        ],
        [
            "long",
            "org.springframework.core.io.support.ResourceRegion.getPosition()",
            "public long getPosition()"
        ],
        [
            "long",
            "org.springframework.core.io.support.ResourceRegion.getCount()",
            "public long getCount()"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.core.io.support.SpringFactoriesLoader.loadFactories(java.lang.Class<T>, java.lang.ClassLoader)",
            "public static <T> java.util.List<T> loadFactories(java.lang.Class<T>, java.lang.ClassLoader)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.core.io.support.SpringFactoriesLoader.loadFactoryNames(java.lang.Class<?>, java.lang.ClassLoader)",
            "public static java.util.List<java.lang.String> loadFactoryNames(java.lang.Class<?>, java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.log.CompositeLog",
            "org.springframework.core.log.CompositeLog(java.util.List<org.apache.commons.logging.Log>)",
            "public org.springframework.core.log.CompositeLog(java.util.List<org.apache.commons.logging.Log>)"
        ],
        [
            "boolean",
            "org.springframework.core.log.CompositeLog.isFatalEnabled()",
            "public boolean isFatalEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.CompositeLog.isErrorEnabled()",
            "public boolean isErrorEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.CompositeLog.isWarnEnabled()",
            "public boolean isWarnEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.CompositeLog.isInfoEnabled()",
            "public boolean isInfoEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.CompositeLog.isDebugEnabled()",
            "public boolean isDebugEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.CompositeLog.isTraceEnabled()",
            "public boolean isTraceEnabled()"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.fatal(java.lang.Object)",
            "public void fatal(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.fatal(java.lang.Object, java.lang.Throwable)",
            "public void fatal(java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.error(java.lang.Object)",
            "public void error(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.error(java.lang.Object, java.lang.Throwable)",
            "public void error(java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.warn(java.lang.Object)",
            "public void warn(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.warn(java.lang.Object, java.lang.Throwable)",
            "public void warn(java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.info(java.lang.Object)",
            "public void info(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.info(java.lang.Object, java.lang.Throwable)",
            "public void info(java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.debug(java.lang.Object)",
            "public void debug(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.debug(java.lang.Object, java.lang.Throwable)",
            "public void debug(java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.trace(java.lang.Object)",
            "public void trace(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.log.CompositeLog.trace(java.lang.Object, java.lang.Throwable)",
            "public void trace(java.lang.Object, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.log.LogAccessor",
            "org.springframework.core.log.LogAccessor(org.apache.commons.logging.Log)",
            "public org.springframework.core.log.LogAccessor(org.apache.commons.logging.Log)"
        ],
        [
            "org.springframework.core.log.LogAccessor",
            "org.springframework.core.log.LogAccessor(java.lang.Class<?>)",
            "public org.springframework.core.log.LogAccessor(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.log.LogAccessor",
            "org.springframework.core.log.LogAccessor(java.lang.String)",
            "public org.springframework.core.log.LogAccessor(java.lang.String)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.core.log.LogAccessor.getLog()",
            "public final org.apache.commons.logging.Log getLog()"
        ],
        [
            "boolean",
            "org.springframework.core.log.LogAccessor.isFatalEnabled()",
            "public boolean isFatalEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.LogAccessor.isErrorEnabled()",
            "public boolean isErrorEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.LogAccessor.isWarnEnabled()",
            "public boolean isWarnEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.LogAccessor.isInfoEnabled()",
            "public boolean isInfoEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.LogAccessor.isDebugEnabled()",
            "public boolean isDebugEnabled()"
        ],
        [
            "boolean",
            "org.springframework.core.log.LogAccessor.isTraceEnabled()",
            "public boolean isTraceEnabled()"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.fatal(java.lang.CharSequence)",
            "public void fatal(java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.fatal(java.lang.Throwable, java.lang.CharSequence)",
            "public void fatal(java.lang.Throwable, java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.error(java.lang.CharSequence)",
            "public void error(java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.error(java.lang.Throwable, java.lang.CharSequence)",
            "public void error(java.lang.Throwable, java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.warn(java.lang.CharSequence)",
            "public void warn(java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.warn(java.lang.Throwable, java.lang.CharSequence)",
            "public void warn(java.lang.Throwable, java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.info(java.lang.CharSequence)",
            "public void info(java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.info(java.lang.Throwable, java.lang.CharSequence)",
            "public void info(java.lang.Throwable, java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.debug(java.lang.CharSequence)",
            "public void debug(java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.debug(java.lang.Throwable, java.lang.CharSequence)",
            "public void debug(java.lang.Throwable, java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.trace(java.lang.CharSequence)",
            "public void trace(java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.trace(java.lang.Throwable, java.lang.CharSequence)",
            "public void trace(java.lang.Throwable, java.lang.CharSequence)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.fatal(java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void fatal(java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.fatal(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void fatal(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.error(java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void error(java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.error(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void error(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.warn(java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void warn(java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.warn(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void warn(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.info(java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void info(java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.info(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void info(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.debug(java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void debug(java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.debug(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void debug(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.trace(java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void trace(java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "void",
            "org.springframework.core.log.LogAccessor.trace(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public void trace(java.lang.Throwable, java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.core.log.LogDelegateFactory.getCompositeLog(org.apache.commons.logging.Log, org.apache.commons.logging.Log, org.apache.commons.logging.Log...)",
            "public static org.apache.commons.logging.Log getCompositeLog(org.apache.commons.logging.Log, org.apache.commons.logging.Log, org.apache.commons.logging.Log...)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.core.log.LogDelegateFactory.getHiddenLog(java.lang.Class<?>)",
            "public static org.apache.commons.logging.Log getHiddenLog(java.lang.Class<?>)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.core.log.LogDelegateFactory.getHiddenLog(java.lang.String)",
            "public static org.apache.commons.logging.Log getHiddenLog(java.lang.String)"
        ],
        [
            "org.springframework.core.log.LogFormatUtils",
            "org.springframework.core.log.LogFormatUtils()",
            "public org.springframework.core.log.LogFormatUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.log.LogFormatUtils.formatValue(java.lang.Object, boolean)",
            "public static java.lang.String formatValue(java.lang.Object, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.log.LogFormatUtils.formatValue(java.lang.Object, int, boolean)",
            "public static java.lang.String formatValue(java.lang.Object, int, boolean)"
        ],
        [
            "void",
            "org.springframework.core.log.LogFormatUtils.traceDebug(org.apache.commons.logging.Log, java.util.function.Function<java.lang.Boolean, java.lang.String>)",
            "public static void traceDebug(org.apache.commons.logging.Log, java.util.function.Function<java.lang.Boolean, java.lang.String>)"
        ],
        [
            "org.springframework.core.log.LogMessage",
            "org.springframework.core.log.LogMessage()",
            "public org.springframework.core.log.LogMessage()"
        ],
        [
            "int",
            "org.springframework.core.log.LogMessage.length()",
            "public int length()"
        ],
        [
            "char",
            "org.springframework.core.log.LogMessage.charAt(int)",
            "public char charAt(int)"
        ],
        [
            "java.lang.CharSequence",
            "org.springframework.core.log.LogMessage.subSequence(int, int)",
            "public java.lang.CharSequence subSequence(int, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.log.LogMessage.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.log.LogMessage",
            "org.springframework.core.log.LogMessage.of(java.util.function.Supplier<? extends java.lang.CharSequence>)",
            "public static org.springframework.core.log.LogMessage of(java.util.function.Supplier<? extends java.lang.CharSequence>)"
        ],
        [
            "org.springframework.core.log.LogMessage",
            "org.springframework.core.log.LogMessage.format(java.lang.String, java.lang.Object)",
            "public static org.springframework.core.log.LogMessage format(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.core.log.LogMessage",
            "org.springframework.core.log.LogMessage.format(java.lang.String, java.lang.Object, java.lang.Object)",
            "public static org.springframework.core.log.LogMessage format(java.lang.String, java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.core.log.LogMessage",
            "org.springframework.core.log.LogMessage.format(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)",
            "public static org.springframework.core.log.LogMessage format(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.core.log.LogMessage",
            "org.springframework.core.log.LogMessage.format(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)",
            "public static org.springframework.core.log.LogMessage format(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.core.log.LogMessage",
            "org.springframework.core.log.LogMessage.format(java.lang.String, java.lang.Object...)",
            "public static org.springframework.core.log.LogMessage format(java.lang.String, java.lang.Object...)"
        ],
        [
            "java.util.Iterator<org.springframework.core.metrics.StartupStep$Tag>",
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep$DefaultTags.iterator()",
            "public java.util.Iterator<org.springframework.core.metrics.StartupStep$Tag> iterator()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep.getName()",
            "public java.lang.String getName()"
        ],
        [
            "long",
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep.getId()",
            "public long getId()"
        ],
        [
            "java.lang.Long",
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep.getParentId()",
            "public java.lang.Long getParentId()"
        ],
        [
            "org.springframework.core.metrics.StartupStep$Tags",
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep.getTags()",
            "public org.springframework.core.metrics.StartupStep$Tags getTags()"
        ],
        [
            "org.springframework.core.metrics.StartupStep",
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep.tag(java.lang.String, java.lang.String)",
            "public org.springframework.core.metrics.StartupStep tag(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.core.metrics.StartupStep",
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep.tag(java.lang.String, java.util.function.Supplier<java.lang.String>)",
            "public org.springframework.core.metrics.StartupStep tag(java.lang.String, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep.end()",
            "public void end()"
        ],
        [
            "org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep",
            "org.springframework.core.metrics.DefaultApplicationStartup.start(java.lang.String)",
            "public org.springframework.core.metrics.DefaultApplicationStartup$DefaultStartupStep start(java.lang.String)"
        ],
        [
            "org.springframework.core.metrics.StartupStep",
            "org.springframework.core.metrics.DefaultApplicationStartup.start(java.lang.String)",
            "public org.springframework.core.metrics.StartupStep start(java.lang.String)"
        ],
        [
            "org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup",
            "org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup()",
            "public org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup()"
        ],
        [
            "org.springframework.core.metrics.StartupStep",
            "org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup.start(java.lang.String)",
            "public org.springframework.core.metrics.StartupStep start(java.lang.String)"
        ],
        [
            "org.springframework.core.metrics.jfr.FlightRecorderStartupEvent",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupEvent(long, java.lang.String, long)",
            "public org.springframework.core.metrics.jfr.FlightRecorderStartupEvent(long, java.lang.String, long)"
        ],
        [
            "void",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupEvent.setTags(java.lang.String)",
            "public void setTags(java.lang.String)"
        ],
        [
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTag",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTag(java.lang.String, java.lang.String)",
            "public org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTag(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTag.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTag.getValue()",
            "public java.lang.String getValue()"
        ],
        [
            "boolean",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTags$TagsIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "org.springframework.core.metrics.StartupStep$Tag",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTags$TagsIterator.next()",
            "public org.springframework.core.metrics.StartupStep$Tag next()"
        ],
        [
            "void",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTags$TagsIterator.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTags$TagsIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "void",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTags.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTags.add(java.lang.String, java.util.function.Supplier<java.lang.String>)",
            "public void add(java.lang.String, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "java.util.Iterator<org.springframework.core.metrics.StartupStep$Tag>",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep$FlightRecorderTags.iterator()",
            "public java.util.Iterator<org.springframework.core.metrics.StartupStep$Tag> iterator()"
        ],
        [
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep(long, java.lang.String, long, java.util.function.Consumer<org.springframework.core.metrics.jfr.FlightRecorderStartupStep>)",
            "public org.springframework.core.metrics.jfr.FlightRecorderStartupStep(long, java.lang.String, long, java.util.function.Consumer<org.springframework.core.metrics.jfr.FlightRecorderStartupStep>)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep.getName()",
            "public java.lang.String getName()"
        ],
        [
            "long",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep.getId()",
            "public long getId()"
        ],
        [
            "java.lang.Long",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep.getParentId()",
            "public java.lang.Long getParentId()"
        ],
        [
            "org.springframework.core.metrics.StartupStep",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep.tag(java.lang.String, java.lang.String)",
            "public org.springframework.core.metrics.StartupStep tag(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.core.metrics.StartupStep",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep.tag(java.lang.String, java.util.function.Supplier<java.lang.String>)",
            "public org.springframework.core.metrics.StartupStep tag(java.lang.String, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "org.springframework.core.metrics.StartupStep$Tags",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep.getTags()",
            "public org.springframework.core.metrics.StartupStep$Tags getTags()"
        ],
        [
            "void",
            "org.springframework.core.metrics.jfr.FlightRecorderStartupStep.end()",
            "public void end()"
        ],
        [
            "org.springframework.core.serializer.DefaultDeserializer",
            "org.springframework.core.serializer.DefaultDeserializer()",
            "public org.springframework.core.serializer.DefaultDeserializer()"
        ],
        [
            "org.springframework.core.serializer.DefaultDeserializer",
            "org.springframework.core.serializer.DefaultDeserializer(java.lang.ClassLoader)",
            "public org.springframework.core.serializer.DefaultDeserializer(java.lang.ClassLoader)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.serializer.DefaultDeserializer.deserialize(java.io.InputStream)",
            "public java.lang.Object deserialize(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "org.springframework.core.serializer.DefaultSerializer",
            "org.springframework.core.serializer.DefaultSerializer()",
            "public org.springframework.core.serializer.DefaultSerializer()"
        ],
        [
            "void",
            "org.springframework.core.serializer.DefaultSerializer.serialize(java.lang.Object, java.io.OutputStream)",
            "public void serialize(java.lang.Object, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "default",
            "org.springframework.core.serializer.Deserializer.T deserializeFromByteArray(byte[])",
            "public default T deserializeFromByteArray(byte[]) throws java.io.IOException"
        ],
        [
            "default",
            "org.springframework.core.serializer.Serializer.byte[] serializeToByteArray(T)",
            "public default byte[] serializeToByteArray(T) throws java.io.IOException"
        ],
        [
            "org.springframework.core.serializer.support.DeserializingConverter",
            "org.springframework.core.serializer.support.DeserializingConverter()",
            "public org.springframework.core.serializer.support.DeserializingConverter()"
        ],
        [
            "org.springframework.core.serializer.support.DeserializingConverter",
            "org.springframework.core.serializer.support.DeserializingConverter(java.lang.ClassLoader)",
            "public org.springframework.core.serializer.support.DeserializingConverter(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.serializer.support.DeserializingConverter",
            "org.springframework.core.serializer.support.DeserializingConverter(org.springframework.core.serializer.Deserializer<java.lang.Object>)",
            "public org.springframework.core.serializer.support.DeserializingConverter(org.springframework.core.serializer.Deserializer<java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.serializer.support.DeserializingConverter.convert(byte[])",
            "public java.lang.Object convert(byte[])"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.serializer.support.DeserializingConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.core.serializer.support.SerializationDelegate",
            "org.springframework.core.serializer.support.SerializationDelegate(java.lang.ClassLoader)",
            "public org.springframework.core.serializer.support.SerializationDelegate(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.serializer.support.SerializationDelegate",
            "org.springframework.core.serializer.support.SerializationDelegate(org.springframework.core.serializer.Serializer<java.lang.Object>, org.springframework.core.serializer.Deserializer<java.lang.Object>)",
            "public org.springframework.core.serializer.support.SerializationDelegate(org.springframework.core.serializer.Serializer<java.lang.Object>, org.springframework.core.serializer.Deserializer<java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.core.serializer.support.SerializationDelegate.serialize(java.lang.Object, java.io.OutputStream)",
            "public void serialize(java.lang.Object, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.serializer.support.SerializationDelegate.deserialize(java.io.InputStream)",
            "public java.lang.Object deserialize(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "org.springframework.core.serializer.support.SerializationFailedException",
            "org.springframework.core.serializer.support.SerializationFailedException(java.lang.String)",
            "public org.springframework.core.serializer.support.SerializationFailedException(java.lang.String)"
        ],
        [
            "org.springframework.core.serializer.support.SerializationFailedException",
            "org.springframework.core.serializer.support.SerializationFailedException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.serializer.support.SerializationFailedException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.serializer.support.SerializingConverter",
            "org.springframework.core.serializer.support.SerializingConverter()",
            "public org.springframework.core.serializer.support.SerializingConverter()"
        ],
        [
            "org.springframework.core.serializer.support.SerializingConverter",
            "org.springframework.core.serializer.support.SerializingConverter(org.springframework.core.serializer.Serializer<java.lang.Object>)",
            "public org.springframework.core.serializer.support.SerializingConverter(org.springframework.core.serializer.Serializer<java.lang.Object>)"
        ],
        [
            "byte[]",
            "org.springframework.core.serializer.support.SerializingConverter.convert(java.lang.Object)",
            "public byte[] convert(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.core.serializer.support.SerializingConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.core.style.DefaultToStringStyler",
            "org.springframework.core.style.DefaultToStringStyler(org.springframework.core.style.ValueStyler)",
            "public org.springframework.core.style.DefaultToStringStyler(org.springframework.core.style.ValueStyler)"
        ],
        [
            "void",
            "org.springframework.core.style.DefaultToStringStyler.styleStart(java.lang.StringBuilder, java.lang.Object)",
            "public void styleStart(java.lang.StringBuilder, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.style.DefaultToStringStyler.styleEnd(java.lang.StringBuilder, java.lang.Object)",
            "public void styleEnd(java.lang.StringBuilder, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.style.DefaultToStringStyler.styleField(java.lang.StringBuilder, java.lang.String, java.lang.Object)",
            "public void styleField(java.lang.StringBuilder, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.style.DefaultToStringStyler.styleValue(java.lang.StringBuilder, java.lang.Object)",
            "public void styleValue(java.lang.StringBuilder, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.style.DefaultToStringStyler.styleFieldSeparator(java.lang.StringBuilder)",
            "public void styleFieldSeparator(java.lang.StringBuilder)"
        ],
        [
            "org.springframework.core.style.DefaultValueStyler",
            "org.springframework.core.style.DefaultValueStyler()",
            "public org.springframework.core.style.DefaultValueStyler()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.style.DefaultValueStyler.style(java.lang.Object)",
            "public java.lang.String style(java.lang.Object)"
        ],
        [
            "org.springframework.core.style.StylerUtils",
            "org.springframework.core.style.StylerUtils()",
            "public org.springframework.core.style.StylerUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.style.StylerUtils.style(java.lang.Object)",
            "public static java.lang.String style(java.lang.Object)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator(java.lang.Object)",
            "public org.springframework.core.style.ToStringCreator(java.lang.Object)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator(java.lang.Object, org.springframework.core.style.ValueStyler)",
            "public org.springframework.core.style.ToStringCreator(java.lang.Object, org.springframework.core.style.ValueStyler)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator(java.lang.Object, org.springframework.core.style.ToStringStyler)",
            "public org.springframework.core.style.ToStringCreator(java.lang.Object, org.springframework.core.style.ToStringStyler)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.String, byte)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.String, byte)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.String, short)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.String, short)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.String, int)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.String, int)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.String, long)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.String, long)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.String, float)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.String, float)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.String, double)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.String, double)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.String, boolean)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.String, boolean)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.String, java.lang.Object)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.core.style.ToStringCreator",
            "org.springframework.core.style.ToStringCreator.append(java.lang.Object)",
            "public org.springframework.core.style.ToStringCreator append(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.style.ToStringCreator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable",
            "org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable(org.springframework.core.task.SimpleAsyncTaskExecutor, java.lang.Runnable)",
            "public org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable(org.springframework.core.task.SimpleAsyncTaskExecutor, java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable.run()",
            "public void run()"
        ],
        [
            "org.springframework.core.task.SimpleAsyncTaskExecutor",
            "org.springframework.core.task.SimpleAsyncTaskExecutor()",
            "public org.springframework.core.task.SimpleAsyncTaskExecutor()"
        ],
        [
            "org.springframework.core.task.SimpleAsyncTaskExecutor",
            "org.springframework.core.task.SimpleAsyncTaskExecutor(java.lang.String)",
            "public org.springframework.core.task.SimpleAsyncTaskExecutor(java.lang.String)"
        ],
        [
            "org.springframework.core.task.SimpleAsyncTaskExecutor",
            "org.springframework.core.task.SimpleAsyncTaskExecutor(java.util.concurrent.ThreadFactory)",
            "public org.springframework.core.task.SimpleAsyncTaskExecutor(java.util.concurrent.ThreadFactory)"
        ],
        [
            "void",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)",
            "public void setThreadFactory(java.util.concurrent.ThreadFactory)"
        ],
        [
            "java.util.concurrent.ThreadFactory",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.getThreadFactory()",
            "public final java.util.concurrent.ThreadFactory getThreadFactory()"
        ],
        [
            "void",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.setTaskDecorator(org.springframework.core.task.TaskDecorator)",
            "public final void setTaskDecorator(org.springframework.core.task.TaskDecorator)"
        ],
        [
            "void",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.setConcurrencyLimit(int)",
            "public void setConcurrencyLimit(int)"
        ],
        [
            "int",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.getConcurrencyLimit()",
            "public final int getConcurrencyLimit()"
        ],
        [
            "boolean",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.isThrottleActive()",
            "public final boolean isThrottleActive()"
        ],
        [
            "void",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.execute(java.lang.Runnable, long)",
            "public void execute(java.lang.Runnable, long)"
        ],
        [
            "java.util.concurrent.Future<?>",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.submit(java.lang.Runnable)",
            "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"
        ],
        [
            "<T> java.util.concurrent.Future<T>",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.submit(java.util.concurrent.Callable<T>)",
            "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.submitListenable(java.lang.Runnable)",
            "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.core.task.SimpleAsyncTaskExecutor.submitListenable(java.util.concurrent.Callable<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.core.task.SyncTaskExecutor",
            "org.springframework.core.task.SyncTaskExecutor()",
            "public org.springframework.core.task.SyncTaskExecutor()"
        ],
        [
            "void",
            "org.springframework.core.task.SyncTaskExecutor.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "org.springframework.core.task.TaskRejectedException",
            "org.springframework.core.task.TaskRejectedException(java.lang.String)",
            "public org.springframework.core.task.TaskRejectedException(java.lang.String)"
        ],
        [
            "org.springframework.core.task.TaskRejectedException",
            "org.springframework.core.task.TaskRejectedException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.task.TaskRejectedException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.task.TaskTimeoutException",
            "org.springframework.core.task.TaskTimeoutException(java.lang.String)",
            "public org.springframework.core.task.TaskTimeoutException(java.lang.String)"
        ],
        [
            "org.springframework.core.task.TaskTimeoutException",
            "org.springframework.core.task.TaskTimeoutException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.core.task.TaskTimeoutException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.task.support.ConcurrentExecutorAdapter",
            "org.springframework.core.task.support.ConcurrentExecutorAdapter(org.springframework.core.task.TaskExecutor)",
            "public org.springframework.core.task.support.ConcurrentExecutorAdapter(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "void",
            "org.springframework.core.task.support.ConcurrentExecutorAdapter.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "org.springframework.core.task.support.ExecutorServiceAdapter",
            "org.springframework.core.task.support.ExecutorServiceAdapter(org.springframework.core.task.TaskExecutor)",
            "public org.springframework.core.task.support.ExecutorServiceAdapter(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "void",
            "org.springframework.core.task.support.ExecutorServiceAdapter.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.core.task.support.ExecutorServiceAdapter.shutdown()",
            "public void shutdown()"
        ],
        [
            "java.util.List<java.lang.Runnable>",
            "org.springframework.core.task.support.ExecutorServiceAdapter.shutdownNow()",
            "public java.util.List<java.lang.Runnable> shutdownNow()"
        ],
        [
            "boolean",
            "org.springframework.core.task.support.ExecutorServiceAdapter.awaitTermination(long, java.util.concurrent.TimeUnit)",
            "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"
        ],
        [
            "boolean",
            "org.springframework.core.task.support.ExecutorServiceAdapter.isShutdown()",
            "public boolean isShutdown()"
        ],
        [
            "boolean",
            "org.springframework.core.task.support.ExecutorServiceAdapter.isTerminated()",
            "public boolean isTerminated()"
        ],
        [
            "org.springframework.core.task.support.TaskExecutorAdapter",
            "org.springframework.core.task.support.TaskExecutorAdapter(java.util.concurrent.Executor)",
            "public org.springframework.core.task.support.TaskExecutorAdapter(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.core.task.support.TaskExecutorAdapter.setTaskDecorator(org.springframework.core.task.TaskDecorator)",
            "public final void setTaskDecorator(org.springframework.core.task.TaskDecorator)"
        ],
        [
            "void",
            "org.springframework.core.task.support.TaskExecutorAdapter.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.core.task.support.TaskExecutorAdapter.execute(java.lang.Runnable, long)",
            "public void execute(java.lang.Runnable, long)"
        ],
        [
            "java.util.concurrent.Future<?>",
            "org.springframework.core.task.support.TaskExecutorAdapter.submit(java.lang.Runnable)",
            "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"
        ],
        [
            "<T> java.util.concurrent.Future<T>",
            "org.springframework.core.task.support.TaskExecutorAdapter.submit(java.util.concurrent.Callable<T>)",
            "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.core.task.support.TaskExecutorAdapter.submitListenable(java.lang.Runnable)",
            "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.core.task.support.TaskExecutorAdapter.submitListenable(java.util.concurrent.Callable<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"
        ],
        [
            "default",
            "org.springframework.core.type.AnnotatedTypeMetadata.boolean isAnnotated(java.lang.String)",
            "public default boolean isAnnotated(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.AnnotatedTypeMetadata.getAnnotationAttributes(java.lang.String)",
            "public default java.util.Map<java.lang.String, java.lang.Object> getAnnotationAttributes(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.AnnotatedTypeMetadata.getAnnotationAttributes(java.lang.String, boolean)",
            "public default java.util.Map<java.lang.String, java.lang.Object> getAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.AnnotatedTypeMetadata.getAllAnnotationAttributes(java.lang.String)",
            "public default org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object> getAllAnnotationAttributes(java.lang.String)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.AnnotatedTypeMetadata.getAllAnnotationAttributes(java.lang.String, boolean)",
            "public default org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object> getAllAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.type.AnnotationMetadata.getAnnotationTypes()",
            "public default java.util.Set<java.lang.String> getAnnotationTypes()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.type.AnnotationMetadata.getMetaAnnotationTypes(java.lang.String)",
            "public default java.util.Set<java.lang.String> getMetaAnnotationTypes(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.core.type.AnnotationMetadata.boolean hasAnnotation(java.lang.String)",
            "public default boolean hasAnnotation(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.core.type.AnnotationMetadata.boolean hasMetaAnnotation(java.lang.String)",
            "public default boolean hasMetaAnnotation(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.core.type.AnnotationMetadata.boolean hasAnnotatedMethods(java.lang.String)",
            "public default boolean hasAnnotatedMethods(java.lang.String)"
        ],
        [
            "org.springframework.core.type.AnnotationMetadata",
            "org.springframework.core.type.AnnotationMetadata.introspect(java.lang.Class<?>)",
            "public static org.springframework.core.type.AnnotationMetadata introspect(java.lang.Class<?>)"
        ],
        [
            "default",
            "org.springframework.core.type.ClassMetadata.boolean isConcrete()",
            "public default boolean isConcrete()"
        ],
        [
            "default",
            "org.springframework.core.type.ClassMetadata.boolean hasEnclosingClass()",
            "public default boolean hasEnclosingClass()"
        ],
        [
            "default",
            "org.springframework.core.type.ClassMetadata.boolean hasSuperClass()",
            "public default boolean hasSuperClass()"
        ],
        [
            "org.springframework.core.type.StandardAnnotationMetadata",
            "org.springframework.core.type.StandardAnnotationMetadata(java.lang.Class<?>)",
            "public org.springframework.core.type.StandardAnnotationMetadata(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.type.StandardAnnotationMetadata",
            "org.springframework.core.type.StandardAnnotationMetadata(java.lang.Class<?>, boolean)",
            "public org.springframework.core.type.StandardAnnotationMetadata(java.lang.Class<?>, boolean)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.type.StandardAnnotationMetadata.getAnnotations()",
            "public org.springframework.core.annotation.MergedAnnotations getAnnotations()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.type.StandardAnnotationMetadata.getAnnotationTypes()",
            "public java.util.Set<java.lang.String> getAnnotationTypes()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.StandardAnnotationMetadata.getAnnotationAttributes(java.lang.String, boolean)",
            "public java.util.Map<java.lang.String, java.lang.Object> getAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.StandardAnnotationMetadata.getAllAnnotationAttributes(java.lang.String, boolean)",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object> getAllAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardAnnotationMetadata.hasAnnotatedMethods(java.lang.String)",
            "public boolean hasAnnotatedMethods(java.lang.String)"
        ],
        [
            "java.util.Set<org.springframework.core.type.MethodMetadata>",
            "org.springframework.core.type.StandardAnnotationMetadata.getAnnotatedMethods(java.lang.String)",
            "public java.util.Set<org.springframework.core.type.MethodMetadata> getAnnotatedMethods(java.lang.String)"
        ],
        [
            "org.springframework.core.type.StandardClassMetadata",
            "org.springframework.core.type.StandardClassMetadata(java.lang.Class<?>)",
            "public org.springframework.core.type.StandardClassMetadata(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.type.StandardClassMetadata.getIntrospectedClass()",
            "public final java.lang.Class<?> getIntrospectedClass()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.StandardClassMetadata.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardClassMetadata.isInterface()",
            "public boolean isInterface()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardClassMetadata.isAnnotation()",
            "public boolean isAnnotation()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardClassMetadata.isAbstract()",
            "public boolean isAbstract()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardClassMetadata.isFinal()",
            "public boolean isFinal()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardClassMetadata.isIndependent()",
            "public boolean isIndependent()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.StandardClassMetadata.getEnclosingClassName()",
            "public java.lang.String getEnclosingClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.StandardClassMetadata.getSuperClassName()",
            "public java.lang.String getSuperClassName()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.type.StandardClassMetadata.getInterfaceNames()",
            "public java.lang.String[] getInterfaceNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.type.StandardClassMetadata.getMemberClassNames()",
            "public java.lang.String[] getMemberClassNames()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardClassMetadata.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.type.StandardClassMetadata.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.StandardClassMetadata.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.type.StandardMethodMetadata",
            "org.springframework.core.type.StandardMethodMetadata(java.lang.reflect.Method)",
            "public org.springframework.core.type.StandardMethodMetadata(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.core.type.StandardMethodMetadata",
            "org.springframework.core.type.StandardMethodMetadata(java.lang.reflect.Method, boolean)",
            "public org.springframework.core.type.StandardMethodMetadata(java.lang.reflect.Method, boolean)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.type.StandardMethodMetadata.getAnnotations()",
            "public org.springframework.core.annotation.MergedAnnotations getAnnotations()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.core.type.StandardMethodMetadata.getIntrospectedMethod()",
            "public final java.lang.reflect.Method getIntrospectedMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.StandardMethodMetadata.getMethodName()",
            "public java.lang.String getMethodName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.StandardMethodMetadata.getDeclaringClassName()",
            "public java.lang.String getDeclaringClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.StandardMethodMetadata.getReturnTypeName()",
            "public java.lang.String getReturnTypeName()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardMethodMetadata.isAbstract()",
            "public boolean isAbstract()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardMethodMetadata.isStatic()",
            "public boolean isStatic()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardMethodMetadata.isFinal()",
            "public boolean isFinal()"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardMethodMetadata.isOverridable()",
            "public boolean isOverridable()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.StandardMethodMetadata.getAnnotationAttributes(java.lang.String, boolean)",
            "public java.util.Map<java.lang.String, java.lang.Object> getAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.StandardMethodMetadata.getAllAnnotationAttributes(java.lang.String, boolean)",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object> getAllAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "boolean",
            "org.springframework.core.type.StandardMethodMetadata.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.type.StandardMethodMetadata.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.StandardMethodMetadata.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor",
            "org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor(java.lang.ClassLoader, org.springframework.core.annotation.AnnotationAttributes)",
            "public org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor(java.lang.ClassLoader, org.springframework.core.annotation.AnnotationAttributes)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor.visit(java.lang.String, java.lang.Object)",
            "public void visit(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor.visitAnnotation(java.lang.String, java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor.visitArray(java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor.visitEnum(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitEnum(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor",
            "org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor(java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.core.annotation.AnnotationAttributes>, java.util.Map<java.lang.String, java.util.Set<java.lang.String>>, java.lang.ClassLoader)",
            "public org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor(java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.core.annotation.AnnotationAttributes>, java.util.Map<java.lang.String, java.util.Set<java.lang.String>>, java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor(java.lang.ClassLoader)",
            "public org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getAnnotations()",
            "public org.springframework.core.annotation.MergedAnnotations getAnnotations()"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getAnnotationTypes()",
            "public java.util.Set<java.lang.String> getAnnotationTypes()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getMetaAnnotationTypes(java.lang.String)",
            "public java.util.Set<java.lang.String> getMetaAnnotationTypes(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.hasMetaAnnotation(java.lang.String)",
            "public boolean hasMetaAnnotation(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.isAnnotated(java.lang.String)",
            "public boolean isAnnotated(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.hasAnnotation(java.lang.String)",
            "public boolean hasAnnotation(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getAnnotationAttributes(java.lang.String, boolean)",
            "public org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getAllAnnotationAttributes(java.lang.String, boolean)",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object> getAllAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.hasAnnotatedMethods(java.lang.String)",
            "public boolean hasAnnotatedMethods(java.lang.String)"
        ],
        [
            "java.util.Set<org.springframework.core.type.MethodMetadata>",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getAnnotatedMethods(java.lang.String)",
            "public java.util.Set<org.springframework.core.type.MethodMetadata> getAnnotatedMethods(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getMemberClassNames()",
            "public java.lang.String[] getMemberClassNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getInterfaceNames()",
            "public java.lang.String[] getInterfaceNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getSuperClassName()",
            "public java.lang.String getSuperClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getEnclosingClassName()",
            "public java.lang.String getEnclosingClassName()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.hasEnclosingClass()",
            "public boolean hasEnclosingClass()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.isIndependent()",
            "public boolean isIndependent()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.isFinal()",
            "public boolean isFinal()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.isAbstract()",
            "public boolean isAbstract()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.isAnnotation()",
            "public boolean isAnnotation()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.isInterface()",
            "public boolean isInterface()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
            "public org.springframework.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visitSource(java.lang.String, java.lang.String)",
            "public void visitSource(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)",
            "public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "java.util.Map",
            "org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor.getAnnotationAttributes(java.lang.String, boolean)",
            "public java.util.Map getAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.type.classreading.AnnotationReadingVisitorUtils.convertClassValues(java.lang.Object, java.lang.ClassLoader, org.springframework.core.annotation.AnnotationAttributes, boolean)",
            "public static org.springframework.core.annotation.AnnotationAttributes convertClassValues(java.lang.Object, java.lang.ClassLoader, org.springframework.core.annotation.AnnotationAttributes, boolean)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.type.classreading.AnnotationReadingVisitorUtils.getMergedAnnotationAttributes(org.springframework.util.LinkedMultiValueMap<java.lang.String, org.springframework.core.annotation.AnnotationAttributes>, java.util.Map<java.lang.String, java.util.Set<java.lang.String>>, java.lang.String)",
            "public static org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(org.springframework.util.LinkedMultiValueMap<java.lang.String, org.springframework.core.annotation.AnnotationAttributes>, java.util.Map<java.lang.String, java.util.Set<java.lang.String>>, java.lang.String)"
        ],
        [
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory$LocalResourceCache",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory$LocalResourceCache(int)",
            "public org.springframework.core.type.classreading.CachingMetadataReaderFactory$LocalResourceCache(int)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory$LocalResourceCache.setCacheLimit(int)",
            "public void setCacheLimit(int)"
        ],
        [
            "int",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory$LocalResourceCache.getCacheLimit()",
            "public int getCacheLimit()"
        ],
        [
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory()",
            "public org.springframework.core.type.classreading.CachingMetadataReaderFactory()"
        ],
        [
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory(java.lang.ClassLoader)",
            "public org.springframework.core.type.classreading.CachingMetadataReaderFactory(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.core.type.classreading.CachingMetadataReaderFactory(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory.setCacheLimit(int)",
            "public void setCacheLimit(int)"
        ],
        [
            "int",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory.getCacheLimit()",
            "public int getCacheLimit()"
        ],
        [
            "org.springframework.core.type.classreading.MetadataReader",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(org.springframework.core.io.Resource)",
            "public org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.CachingMetadataReaderFactory.clearCache()",
            "public void clearCache()"
        ],
        [
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyAnnotationVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyAnnotationVisitor()",
            "public org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyAnnotationVisitor()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyAnnotationVisitor.visitAnnotation(java.lang.String, java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyAnnotationVisitor.visitArray(java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)"
        ],
        [
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyFieldVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyFieldVisitor()",
            "public org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyFieldVisitor()"
        ],
        [
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyMethodVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyMethodVisitor()",
            "public org.springframework.core.type.classreading.ClassMetadataReadingVisitor$EmptyMethodVisitor()"
        ],
        [
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor()",
            "public org.springframework.core.type.classreading.ClassMetadataReadingVisitor()"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)",
            "public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visitSource(java.lang.String, java.lang.String)",
            "public void visitSource(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
            "public org.springframework.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.isInterface()",
            "public boolean isInterface()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.isAnnotation()",
            "public boolean isAnnotation()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.isAbstract()",
            "public boolean isAbstract()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.isFinal()",
            "public boolean isFinal()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.isIndependent()",
            "public boolean isIndependent()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.hasEnclosingClass()",
            "public boolean hasEnclosingClass()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.getEnclosingClassName()",
            "public java.lang.String getEnclosingClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.getSuperClassName()",
            "public java.lang.String getSuperClassName()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.getInterfaceNames()",
            "public java.lang.String[] getInterfaceNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.type.classreading.ClassMetadataReadingVisitor.getMemberClassNames()",
            "public java.lang.String[] getMemberClassNames()"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor$ArrayVisitor.visit(java.lang.String, java.lang.Object)",
            "public void visit(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor$ArrayVisitor.visitEnum(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitEnum(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor$ArrayVisitor.visitAnnotation(java.lang.String, java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor$ArrayVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor(java.lang.ClassLoader, java.lang.Object, java.lang.Class<A>, java.util.function.Consumer<org.springframework.core.annotation.MergedAnnotation<A>>)",
            "public org.springframework.core.type.classreading.MergedAnnotationReadingVisitor(java.lang.ClassLoader, java.lang.Object, java.lang.Class<A>, java.util.function.Consumer<org.springframework.core.annotation.MergedAnnotation<A>>)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor.visit(java.lang.String, java.lang.Object)",
            "public void visit(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor.visitEnum(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitEnum(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor.visitAnnotation(java.lang.String, java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor.visitArray(java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "<E extends java.lang.Enum<E>> void",
            "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor.visitEnum(java.lang.String, java.lang.String, java.util.function.Consumer<E>)",
            "public <E extends java.lang.Enum<E>> void visitEnum(java.lang.String, java.lang.String, java.util.function.Consumer<E>)"
        ],
        [
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor(java.lang.String, int, java.lang.String, java.lang.String, java.lang.ClassLoader, java.util.Set<org.springframework.core.type.MethodMetadata>)",
            "public org.springframework.core.type.classreading.MethodMetadataReadingVisitor(java.lang.String, int, java.lang.String, java.lang.String, java.lang.ClassLoader, java.util.Set<org.springframework.core.type.MethodMetadata>)"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getAnnotations()",
            "public org.springframework.core.annotation.MergedAnnotations getAnnotations()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getMethodName()",
            "public java.lang.String getMethodName()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.isAbstract()",
            "public boolean isAbstract()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.isStatic()",
            "public boolean isStatic()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.isFinal()",
            "public boolean isFinal()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.isOverridable()",
            "public boolean isOverridable()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.isAnnotated(java.lang.String)",
            "public boolean isAnnotated(java.lang.String)"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getAnnotationAttributes(java.lang.String, boolean)",
            "public org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getAllAnnotationAttributes(java.lang.String, boolean)",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object> getAllAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getDeclaringClassName()",
            "public java.lang.String getDeclaringClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getReturnTypeName()",
            "public java.lang.String getReturnTypeName()"
        ],
        [
            "java.util.Map",
            "org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getAnnotationAttributes(java.lang.String, boolean)",
            "public java.util.Map getAnnotationAttributes(java.lang.String, boolean)"
        ],
        [
            "org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor",
            "org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor(java.lang.String, org.springframework.core.annotation.AnnotationAttributes, java.lang.ClassLoader)",
            "public org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor(java.lang.String, org.springframework.core.annotation.AnnotationAttributes, java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor.visit(java.lang.String, java.lang.Object)",
            "public void visit(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor.visitAnnotation(java.lang.String, java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor",
            "org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor(java.lang.String, org.springframework.core.annotation.AnnotationAttributes, java.lang.ClassLoader)",
            "public org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor(java.lang.String, org.springframework.core.annotation.AnnotationAttributes, java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.isInterface()",
            "public boolean isInterface()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.isAnnotation()",
            "public boolean isAnnotation()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.isAbstract()",
            "public boolean isAbstract()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.isFinal()",
            "public boolean isFinal()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.isIndependent()",
            "public boolean isIndependent()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.getEnclosingClassName()",
            "public java.lang.String getEnclosingClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.getSuperClassName()",
            "public java.lang.String getSuperClassName()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.getInterfaceNames()",
            "public java.lang.String[] getInterfaceNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.getMemberClassNames()",
            "public java.lang.String[] getMemberClassNames()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.getAnnotations()",
            "public org.springframework.core.annotation.MergedAnnotations getAnnotations()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.getAnnotationTypes()",
            "public java.util.Set<java.lang.String> getAnnotationTypes()"
        ],
        [
            "java.util.Set<org.springframework.core.type.MethodMetadata>",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.getAnnotatedMethods(java.lang.String)",
            "public java.util.Set<org.springframework.core.type.MethodMetadata> getAnnotatedMethods(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor$Source.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor$Source.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor$Source.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)",
            "public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.core.type.classreading.SimpleAnnotationMetadata",
            "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor.getMetadata()",
            "public org.springframework.core.type.classreading.SimpleAnnotationMetadata getMetadata()"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.core.type.classreading.SimpleMetadataReader.getResource()",
            "public org.springframework.core.io.Resource getResource()"
        ],
        [
            "org.springframework.core.type.ClassMetadata",
            "org.springframework.core.type.classreading.SimpleMetadataReader.getClassMetadata()",
            "public org.springframework.core.type.ClassMetadata getClassMetadata()"
        ],
        [
            "org.springframework.core.type.AnnotationMetadata",
            "org.springframework.core.type.classreading.SimpleMetadataReader.getAnnotationMetadata()",
            "public org.springframework.core.type.AnnotationMetadata getAnnotationMetadata()"
        ],
        [
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory()",
            "public org.springframework.core.type.classreading.SimpleMetadataReaderFactory()"
        ],
        [
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.core.type.classreading.SimpleMetadataReaderFactory(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory(java.lang.ClassLoader)",
            "public org.springframework.core.type.classreading.SimpleMetadataReaderFactory(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.core.io.ResourceLoader",
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getResourceLoader()",
            "public final org.springframework.core.io.ResourceLoader getResourceLoader()"
        ],
        [
            "org.springframework.core.type.classreading.MetadataReader",
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(java.lang.String)",
            "public org.springframework.core.type.classreading.MetadataReader getMetadataReader(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.core.type.classreading.MetadataReader",
            "org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(org.springframework.core.io.Resource)",
            "public org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.getMethodName()",
            "public java.lang.String getMethodName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.getDeclaringClassName()",
            "public java.lang.String getDeclaringClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.getReturnTypeName()",
            "public java.lang.String getReturnTypeName()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.isAbstract()",
            "public boolean isAbstract()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.isStatic()",
            "public boolean isStatic()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.isFinal()",
            "public boolean isFinal()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.isOverridable()",
            "public boolean isOverridable()"
        ],
        [
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.getAnnotations()",
            "public org.springframework.core.annotation.MergedAnnotations getAnnotations()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleMethodMetadata.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor$Source.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor$Source.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor$Source.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.core.type.filter.AbstractClassTestingTypeFilter",
            "org.springframework.core.type.filter.AbstractClassTestingTypeFilter()",
            "public org.springframework.core.type.filter.AbstractClassTestingTypeFilter()"
        ],
        [
            "boolean",
            "org.springframework.core.type.filter.AbstractClassTestingTypeFilter.match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory)",
            "public final boolean match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory) throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter.match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory)",
            "public boolean match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory) throws java.io.IOException"
        ],
        [
            "org.springframework.core.type.filter.AnnotationTypeFilter",
            "org.springframework.core.type.filter.AnnotationTypeFilter(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public org.springframework.core.type.filter.AnnotationTypeFilter(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.core.type.filter.AnnotationTypeFilter",
            "org.springframework.core.type.filter.AnnotationTypeFilter(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)",
            "public org.springframework.core.type.filter.AnnotationTypeFilter(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)"
        ],
        [
            "org.springframework.core.type.filter.AnnotationTypeFilter",
            "org.springframework.core.type.filter.AnnotationTypeFilter(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, boolean)",
            "public org.springframework.core.type.filter.AnnotationTypeFilter(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, boolean)"
        ],
        [
            "java.lang.Class<? extends java.lang.annotation.Annotation>",
            "org.springframework.core.type.filter.AnnotationTypeFilter.getAnnotationType()",
            "public final java.lang.Class<? extends java.lang.annotation.Annotation> getAnnotationType()"
        ],
        [
            "org.springframework.core.type.filter.AspectJTypeFilter",
            "org.springframework.core.type.filter.AspectJTypeFilter(java.lang.String, java.lang.ClassLoader)",
            "public org.springframework.core.type.filter.AspectJTypeFilter(java.lang.String, java.lang.ClassLoader)"
        ],
        [
            "boolean",
            "org.springframework.core.type.filter.AspectJTypeFilter.match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory)",
            "public boolean match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory) throws java.io.IOException"
        ],
        [
            "org.springframework.core.type.filter.AssignableTypeFilter",
            "org.springframework.core.type.filter.AssignableTypeFilter(java.lang.Class<?>)",
            "public org.springframework.core.type.filter.AssignableTypeFilter(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.core.type.filter.AssignableTypeFilter.getTargetType()",
            "public final java.lang.Class<?> getTargetType()"
        ],
        [
            "org.springframework.core.type.filter.RegexPatternTypeFilter",
            "org.springframework.core.type.filter.RegexPatternTypeFilter(java.util.regex.Pattern)",
            "public org.springframework.core.type.filter.RegexPatternTypeFilter(java.util.regex.Pattern)"
        ],
        [
            "org.springframework.objenesis.SpringObjenesis",
            "org.springframework.objenesis.SpringObjenesis()",
            "public org.springframework.objenesis.SpringObjenesis()"
        ],
        [
            "org.springframework.objenesis.SpringObjenesis",
            "org.springframework.objenesis.SpringObjenesis(org.springframework.objenesis.strategy.InstantiatorStrategy)",
            "public org.springframework.objenesis.SpringObjenesis(org.springframework.objenesis.strategy.InstantiatorStrategy)"
        ],
        [
            "boolean",
            "org.springframework.objenesis.SpringObjenesis.isWorthTrying()",
            "public boolean isWorthTrying()"
        ],
        [
            "<T> T",
            "org.springframework.objenesis.SpringObjenesis.newInstance(java.lang.Class<T>, boolean)",
            "public <T> T newInstance(java.lang.Class<T>, boolean)"
        ],
        [
            "<T> T",
            "org.springframework.objenesis.SpringObjenesis.newInstance(java.lang.Class<T>)",
            "public <T> T newInstance(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.objenesis.instantiator.ObjectInstantiator<T>",
            "org.springframework.objenesis.SpringObjenesis.getInstantiatorOf(java.lang.Class<T>)",
            "public <T> org.springframework.objenesis.instantiator.ObjectInstantiator<T> getInstantiatorOf(java.lang.Class<T>)"
        ],
        [
            "org.springframework.util.AlternativeJdkIdGenerator",
            "org.springframework.util.AlternativeJdkIdGenerator()",
            "public org.springframework.util.AlternativeJdkIdGenerator()"
        ],
        [
            "java.util.UUID",
            "org.springframework.util.AlternativeJdkIdGenerator.generateId()",
            "public java.util.UUID generateId()"
        ],
        [
            "org.springframework.util.AntPathMatcher$AntPathStringMatcher",
            "org.springframework.util.AntPathMatcher$AntPathStringMatcher(java.lang.String)",
            "public org.springframework.util.AntPathMatcher$AntPathStringMatcher(java.lang.String)"
        ],
        [
            "org.springframework.util.AntPathMatcher$AntPathStringMatcher",
            "org.springframework.util.AntPathMatcher$AntPathStringMatcher(java.lang.String, boolean)",
            "public org.springframework.util.AntPathMatcher$AntPathStringMatcher(java.lang.String, boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.AntPathMatcher$AntPathStringMatcher.matchStrings(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)",
            "public boolean matchStrings(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo",
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo(java.lang.String)",
            "public org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo.getUriVars()",
            "public int getUriVars()"
        ],
        [
            "int",
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo.getSingleWildcards()",
            "public int getSingleWildcards()"
        ],
        [
            "int",
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo.getDoubleWildcards()",
            "public int getDoubleWildcards()"
        ],
        [
            "boolean",
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo.isLeastSpecific()",
            "public boolean isLeastSpecific()"
        ],
        [
            "boolean",
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo.isPrefixPattern()",
            "public boolean isPrefixPattern()"
        ],
        [
            "int",
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo.getTotalCount()",
            "public int getTotalCount()"
        ],
        [
            "int",
            "org.springframework.util.AntPathMatcher$AntPatternComparator$PatternInfo.getLength()",
            "public int getLength()"
        ],
        [
            "org.springframework.util.AntPathMatcher$AntPatternComparator",
            "org.springframework.util.AntPathMatcher$AntPatternComparator(java.lang.String)",
            "public org.springframework.util.AntPathMatcher$AntPatternComparator(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.util.AntPathMatcher$AntPatternComparator.compare(java.lang.String, java.lang.String)",
            "public int compare(java.lang.String, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.util.AntPathMatcher$AntPatternComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.util.AntPathMatcher$PathSeparatorPatternCache",
            "org.springframework.util.AntPathMatcher$PathSeparatorPatternCache(java.lang.String)",
            "public org.springframework.util.AntPathMatcher$PathSeparatorPatternCache(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.AntPathMatcher$PathSeparatorPatternCache.getEndsOnWildCard()",
            "public java.lang.String getEndsOnWildCard()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.AntPathMatcher$PathSeparatorPatternCache.getEndsOnDoubleWildCard()",
            "public java.lang.String getEndsOnDoubleWildCard()"
        ],
        [
            "org.springframework.util.AntPathMatcher",
            "org.springframework.util.AntPathMatcher()",
            "public org.springframework.util.AntPathMatcher()"
        ],
        [
            "org.springframework.util.AntPathMatcher",
            "org.springframework.util.AntPathMatcher(java.lang.String)",
            "public org.springframework.util.AntPathMatcher(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.AntPathMatcher.setPathSeparator(java.lang.String)",
            "public void setPathSeparator(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.AntPathMatcher.setCaseSensitive(boolean)",
            "public void setCaseSensitive(boolean)"
        ],
        [
            "void",
            "org.springframework.util.AntPathMatcher.setTrimTokens(boolean)",
            "public void setTrimTokens(boolean)"
        ],
        [
            "void",
            "org.springframework.util.AntPathMatcher.setCachePatterns(boolean)",
            "public void setCachePatterns(boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.AntPathMatcher.isPattern(java.lang.String)",
            "public boolean isPattern(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.AntPathMatcher.match(java.lang.String, java.lang.String)",
            "public boolean match(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.AntPathMatcher.matchStart(java.lang.String, java.lang.String)",
            "public boolean matchStart(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.AntPathMatcher.extractPathWithinPattern(java.lang.String, java.lang.String)",
            "public java.lang.String extractPathWithinPattern(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.util.AntPathMatcher.extractUriTemplateVariables(java.lang.String, java.lang.String)",
            "public java.util.Map<java.lang.String, java.lang.String> extractUriTemplateVariables(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.AntPathMatcher.combine(java.lang.String, java.lang.String)",
            "public java.lang.String combine(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Comparator<java.lang.String>",
            "org.springframework.util.AntPathMatcher.getPatternComparator(java.lang.String)",
            "public java.util.Comparator<java.lang.String> getPatternComparator(java.lang.String)"
        ],
        [
            "org.springframework.util.Assert",
            "org.springframework.util.Assert()",
            "public org.springframework.util.Assert()"
        ],
        [
            "void",
            "org.springframework.util.Assert.state(boolean, java.lang.String)",
            "public static void state(boolean, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.state(boolean, java.util.function.Supplier<java.lang.String>)",
            "public static void state(boolean, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.state(boolean)",
            "public static void state(boolean)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isTrue(boolean, java.lang.String)",
            "public static void isTrue(boolean, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isTrue(boolean, java.util.function.Supplier<java.lang.String>)",
            "public static void isTrue(boolean, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isTrue(boolean)",
            "public static void isTrue(boolean)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isNull(java.lang.Object, java.lang.String)",
            "public static void isNull(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isNull(java.lang.Object, java.util.function.Supplier<java.lang.String>)",
            "public static void isNull(java.lang.Object, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isNull(java.lang.Object)",
            "public static void isNull(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notNull(java.lang.Object, java.lang.String)",
            "public static void notNull(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notNull(java.lang.Object, java.util.function.Supplier<java.lang.String>)",
            "public static void notNull(java.lang.Object, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notNull(java.lang.Object)",
            "public static void notNull(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.util.Assert.hasLength(java.lang.String, java.lang.String)",
            "public static void hasLength(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.hasLength(java.lang.String, java.util.function.Supplier<java.lang.String>)",
            "public static void hasLength(java.lang.String, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.hasLength(java.lang.String)",
            "public static void hasLength(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.hasText(java.lang.String, java.lang.String)",
            "public static void hasText(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.hasText(java.lang.String, java.util.function.Supplier<java.lang.String>)",
            "public static void hasText(java.lang.String, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.hasText(java.lang.String)",
            "public static void hasText(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.doesNotContain(java.lang.String, java.lang.String, java.lang.String)",
            "public static void doesNotContain(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.doesNotContain(java.lang.String, java.lang.String, java.util.function.Supplier<java.lang.String>)",
            "public static void doesNotContain(java.lang.String, java.lang.String, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.doesNotContain(java.lang.String, java.lang.String)",
            "public static void doesNotContain(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.lang.Object[], java.lang.String)",
            "public static void notEmpty(java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.lang.Object[], java.util.function.Supplier<java.lang.String>)",
            "public static void notEmpty(java.lang.Object[], java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.lang.Object[])",
            "public static void notEmpty(java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.util.Assert.noNullElements(java.lang.Object[], java.lang.String)",
            "public static void noNullElements(java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.noNullElements(java.lang.Object[], java.util.function.Supplier<java.lang.String>)",
            "public static void noNullElements(java.lang.Object[], java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.noNullElements(java.lang.Object[])",
            "public static void noNullElements(java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.util.Collection<?>, java.lang.String)",
            "public static void notEmpty(java.util.Collection<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.util.Collection<?>, java.util.function.Supplier<java.lang.String>)",
            "public static void notEmpty(java.util.Collection<?>, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.util.Collection<?>)",
            "public static void notEmpty(java.util.Collection<?>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.noNullElements(java.util.Collection<?>, java.lang.String)",
            "public static void noNullElements(java.util.Collection<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.noNullElements(java.util.Collection<?>, java.util.function.Supplier<java.lang.String>)",
            "public static void noNullElements(java.util.Collection<?>, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.util.Map<?, ?>, java.lang.String)",
            "public static void notEmpty(java.util.Map<?, ?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.util.Map<?, ?>, java.util.function.Supplier<java.lang.String>)",
            "public static void notEmpty(java.util.Map<?, ?>, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.notEmpty(java.util.Map<?, ?>)",
            "public static void notEmpty(java.util.Map<?, ?>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isInstanceOf(java.lang.Class<?>, java.lang.Object, java.lang.String)",
            "public static void isInstanceOf(java.lang.Class<?>, java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isInstanceOf(java.lang.Class<?>, java.lang.Object, java.util.function.Supplier<java.lang.String>)",
            "public static void isInstanceOf(java.lang.Class<?>, java.lang.Object, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isInstanceOf(java.lang.Class<?>, java.lang.Object)",
            "public static void isInstanceOf(java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isAssignable(java.lang.Class<?>, java.lang.Class<?>, java.lang.String)",
            "public static void isAssignable(java.lang.Class<?>, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isAssignable(java.lang.Class<?>, java.lang.Class<?>, java.util.function.Supplier<java.lang.String>)",
            "public static void isAssignable(java.lang.Class<?>, java.lang.Class<?>, java.util.function.Supplier<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.Assert.isAssignable(java.lang.Class<?>, java.lang.Class<?>)",
            "public static void isAssignable(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "org.springframework.util.AutoPopulatingList$ElementInstantiationException",
            "org.springframework.util.AutoPopulatingList$ElementInstantiationException(java.lang.String)",
            "public org.springframework.util.AutoPopulatingList$ElementInstantiationException(java.lang.String)"
        ],
        [
            "org.springframework.util.AutoPopulatingList$ElementInstantiationException",
            "org.springframework.util.AutoPopulatingList$ElementInstantiationException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.util.AutoPopulatingList$ElementInstantiationException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.util.AutoPopulatingList$ReflectiveElementFactory",
            "org.springframework.util.AutoPopulatingList$ReflectiveElementFactory(java.lang.Class<? extends E>)",
            "public org.springframework.util.AutoPopulatingList$ReflectiveElementFactory(java.lang.Class<? extends E>)"
        ],
        [
            "E",
            "org.springframework.util.AutoPopulatingList$ReflectiveElementFactory.createElement(int)",
            "public E createElement(int)"
        ],
        [
            "org.springframework.util.AutoPopulatingList",
            "org.springframework.util.AutoPopulatingList(java.lang.Class<? extends E>)",
            "public org.springframework.util.AutoPopulatingList(java.lang.Class<? extends E>)"
        ],
        [
            "org.springframework.util.AutoPopulatingList",
            "org.springframework.util.AutoPopulatingList(java.util.List<E>, java.lang.Class<? extends E>)",
            "public org.springframework.util.AutoPopulatingList(java.util.List<E>, java.lang.Class<? extends E>)"
        ],
        [
            "org.springframework.util.AutoPopulatingList",
            "org.springframework.util.AutoPopulatingList(org.springframework.util.AutoPopulatingList$ElementFactory<E>)",
            "public org.springframework.util.AutoPopulatingList(org.springframework.util.AutoPopulatingList$ElementFactory<E>)"
        ],
        [
            "org.springframework.util.AutoPopulatingList",
            "org.springframework.util.AutoPopulatingList(java.util.List<E>, org.springframework.util.AutoPopulatingList$ElementFactory<E>)",
            "public org.springframework.util.AutoPopulatingList(java.util.List<E>, org.springframework.util.AutoPopulatingList$ElementFactory<E>)"
        ],
        [
            "void",
            "org.springframework.util.AutoPopulatingList.add(int, E)",
            "public void add(int, E)"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.add(E)",
            "public boolean add(E)"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.addAll(java.util.Collection<? extends E>)",
            "public boolean addAll(java.util.Collection<? extends E>)"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.addAll(int, java.util.Collection<? extends E>)",
            "public boolean addAll(int, java.util.Collection<? extends E>)"
        ],
        [
            "void",
            "org.springframework.util.AutoPopulatingList.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.contains(java.lang.Object)",
            "public boolean contains(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.containsAll(java.util.Collection<?>)",
            "public boolean containsAll(java.util.Collection<?>)"
        ],
        [
            "E",
            "org.springframework.util.AutoPopulatingList.get(int)",
            "public E get(int)"
        ],
        [
            "int",
            "org.springframework.util.AutoPopulatingList.indexOf(java.lang.Object)",
            "public int indexOf(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "java.util.Iterator<E>",
            "org.springframework.util.AutoPopulatingList.iterator()",
            "public java.util.Iterator<E> iterator()"
        ],
        [
            "int",
            "org.springframework.util.AutoPopulatingList.lastIndexOf(java.lang.Object)",
            "public int lastIndexOf(java.lang.Object)"
        ],
        [
            "java.util.ListIterator<E>",
            "org.springframework.util.AutoPopulatingList.listIterator()",
            "public java.util.ListIterator<E> listIterator()"
        ],
        [
            "java.util.ListIterator<E>",
            "org.springframework.util.AutoPopulatingList.listIterator(int)",
            "public java.util.ListIterator<E> listIterator(int)"
        ],
        [
            "E",
            "org.springframework.util.AutoPopulatingList.remove(int)",
            "public E remove(int)"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.remove(java.lang.Object)",
            "public boolean remove(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.removeAll(java.util.Collection<?>)",
            "public boolean removeAll(java.util.Collection<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.retainAll(java.util.Collection<?>)",
            "public boolean retainAll(java.util.Collection<?>)"
        ],
        [
            "E",
            "org.springframework.util.AutoPopulatingList.set(int, E)",
            "public E set(int, E)"
        ],
        [
            "int",
            "org.springframework.util.AutoPopulatingList.size()",
            "public int size()"
        ],
        [
            "java.util.List<E>",
            "org.springframework.util.AutoPopulatingList.subList(int, int)",
            "public java.util.List<E> subList(int, int)"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.util.AutoPopulatingList.toArray()",
            "public java.lang.Object[] toArray()"
        ],
        [
            "<T> T[]",
            "org.springframework.util.AutoPopulatingList.toArray(T[])",
            "public <T> T[] toArray(T[])"
        ],
        [
            "boolean",
            "org.springframework.util.AutoPopulatingList.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.AutoPopulatingList.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.util.Base64Utils",
            "org.springframework.util.Base64Utils()",
            "public org.springframework.util.Base64Utils()"
        ],
        [
            "byte[]",
            "org.springframework.util.Base64Utils.encode(byte[])",
            "public static byte[] encode(byte[])"
        ],
        [
            "byte[]",
            "org.springframework.util.Base64Utils.decode(byte[])",
            "public static byte[] decode(byte[])"
        ],
        [
            "byte[]",
            "org.springframework.util.Base64Utils.encodeUrlSafe(byte[])",
            "public static byte[] encodeUrlSafe(byte[])"
        ],
        [
            "byte[]",
            "org.springframework.util.Base64Utils.decodeUrlSafe(byte[])",
            "public static byte[] decodeUrlSafe(byte[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.Base64Utils.encodeToString(byte[])",
            "public static java.lang.String encodeToString(byte[])"
        ],
        [
            "byte[]",
            "org.springframework.util.Base64Utils.decodeFromString(java.lang.String)",
            "public static byte[] decodeFromString(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.Base64Utils.encodeToUrlSafeString(byte[])",
            "public static java.lang.String encodeToUrlSafeString(byte[])"
        ],
        [
            "byte[]",
            "org.springframework.util.Base64Utils.decodeFromUrlSafeString(java.lang.String)",
            "public static byte[] decodeFromUrlSafeString(java.lang.String)"
        ],
        [
            "org.springframework.util.ClassUtils",
            "org.springframework.util.ClassUtils()",
            "public org.springframework.util.ClassUtils()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.util.ClassUtils.getDefaultClassLoader()",
            "public static java.lang.ClassLoader getDefaultClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.util.ClassUtils.overrideThreadContextClassLoader(java.lang.ClassLoader)",
            "public static java.lang.ClassLoader overrideThreadContextClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.ClassUtils.forName(java.lang.String, java.lang.ClassLoader)",
            "public static java.lang.Class<?> forName(java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException, java.lang.LinkageError"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.ClassUtils.resolveClassName(java.lang.String, java.lang.ClassLoader)",
            "public static java.lang.Class<?> resolveClassName(java.lang.String, java.lang.ClassLoader) throws java.lang.IllegalArgumentException"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isPresent(java.lang.String, java.lang.ClassLoader)",
            "public static boolean isPresent(java.lang.String, java.lang.ClassLoader)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isVisible(java.lang.Class<?>, java.lang.ClassLoader)",
            "public static boolean isVisible(java.lang.Class<?>, java.lang.ClassLoader)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isCacheSafe(java.lang.Class<?>, java.lang.ClassLoader)",
            "public static boolean isCacheSafe(java.lang.Class<?>, java.lang.ClassLoader)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.ClassUtils.resolvePrimitiveClassName(java.lang.String)",
            "public static java.lang.Class<?> resolvePrimitiveClassName(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isPrimitiveWrapper(java.lang.Class<?>)",
            "public static boolean isPrimitiveWrapper(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isPrimitiveOrWrapper(java.lang.Class<?>)",
            "public static boolean isPrimitiveOrWrapper(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isPrimitiveArray(java.lang.Class<?>)",
            "public static boolean isPrimitiveArray(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isPrimitiveWrapperArray(java.lang.Class<?>)",
            "public static boolean isPrimitiveWrapperArray(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.ClassUtils.resolvePrimitiveIfNecessary(java.lang.Class<?>)",
            "public static java.lang.Class<?> resolvePrimitiveIfNecessary(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isAssignable(java.lang.Class<?>, java.lang.Class<?>)",
            "public static boolean isAssignable(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isAssignableValue(java.lang.Class<?>, java.lang.Object)",
            "public static boolean isAssignableValue(java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.convertResourcePathToClassName(java.lang.String)",
            "public static java.lang.String convertResourcePathToClassName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.convertClassNameToResourcePath(java.lang.String)",
            "public static java.lang.String convertClassNameToResourcePath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.addResourcePathToPackagePath(java.lang.Class<?>, java.lang.String)",
            "public static java.lang.String addResourcePathToPackagePath(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.classPackageAsResourcePath(java.lang.Class<?>)",
            "public static java.lang.String classPackageAsResourcePath(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.classNamesToString(java.lang.Class<?>...)",
            "public static java.lang.String classNamesToString(java.lang.Class<?>...)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.classNamesToString(java.util.Collection<java.lang.Class<?>>)",
            "public static java.lang.String classNamesToString(java.util.Collection<java.lang.Class<?>>)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.util.ClassUtils.toClassArray(java.util.Collection<java.lang.Class<?>>)",
            "public static java.lang.Class<?>[] toClassArray(java.util.Collection<java.lang.Class<?>>)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.util.ClassUtils.getAllInterfaces(java.lang.Object)",
            "public static java.lang.Class<?>[] getAllInterfaces(java.lang.Object)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.util.ClassUtils.getAllInterfacesForClass(java.lang.Class<?>)",
            "public static java.lang.Class<?>[] getAllInterfacesForClass(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.util.ClassUtils.getAllInterfacesForClass(java.lang.Class<?>, java.lang.ClassLoader)",
            "public static java.lang.Class<?>[] getAllInterfacesForClass(java.lang.Class<?>, java.lang.ClassLoader)"
        ],
        [
            "java.util.Set<java.lang.Class<?>>",
            "org.springframework.util.ClassUtils.getAllInterfacesAsSet(java.lang.Object)",
            "public static java.util.Set<java.lang.Class<?>> getAllInterfacesAsSet(java.lang.Object)"
        ],
        [
            "java.util.Set<java.lang.Class<?>>",
            "org.springframework.util.ClassUtils.getAllInterfacesForClassAsSet(java.lang.Class<?>)",
            "public static java.util.Set<java.lang.Class<?>> getAllInterfacesForClassAsSet(java.lang.Class<?>)"
        ],
        [
            "java.util.Set<java.lang.Class<?>>",
            "org.springframework.util.ClassUtils.getAllInterfacesForClassAsSet(java.lang.Class<?>, java.lang.ClassLoader)",
            "public static java.util.Set<java.lang.Class<?>> getAllInterfacesForClassAsSet(java.lang.Class<?>, java.lang.ClassLoader)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.ClassUtils.createCompositeInterface(java.lang.Class<?>[], java.lang.ClassLoader)",
            "public static java.lang.Class<?> createCompositeInterface(java.lang.Class<?>[], java.lang.ClassLoader)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.ClassUtils.determineCommonAncestor(java.lang.Class<?>, java.lang.Class<?>)",
            "public static java.lang.Class<?> determineCommonAncestor(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isJavaLanguageInterface(java.lang.Class<?>)",
            "public static boolean isJavaLanguageInterface(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isInnerClass(java.lang.Class<?>)",
            "public static boolean isInnerClass(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isCglibProxy(java.lang.Object)",
            "public static boolean isCglibProxy(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isCglibProxyClass(java.lang.Class<?>)",
            "public static boolean isCglibProxyClass(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isCglibProxyClassName(java.lang.String)",
            "public static boolean isCglibProxyClassName(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.ClassUtils.getUserClass(java.lang.Object)",
            "public static java.lang.Class<?> getUserClass(java.lang.Object)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.ClassUtils.getUserClass(java.lang.Class<?>)",
            "public static java.lang.Class<?> getUserClass(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getDescriptiveType(java.lang.Object)",
            "public static java.lang.String getDescriptiveType(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.matchesTypeName(java.lang.Class<?>, java.lang.String)",
            "public static boolean matchesTypeName(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getShortName(java.lang.String)",
            "public static java.lang.String getShortName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getShortName(java.lang.Class<?>)",
            "public static java.lang.String getShortName(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getShortNameAsProperty(java.lang.Class<?>)",
            "public static java.lang.String getShortNameAsProperty(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getClassFileName(java.lang.Class<?>)",
            "public static java.lang.String getClassFileName(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getPackageName(java.lang.Class<?>)",
            "public static java.lang.String getPackageName(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getPackageName(java.lang.String)",
            "public static java.lang.String getPackageName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getQualifiedName(java.lang.Class<?>)",
            "public static java.lang.String getQualifiedName(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getQualifiedMethodName(java.lang.reflect.Method)",
            "public static java.lang.String getQualifiedMethodName(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ClassUtils.getQualifiedMethodName(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static java.lang.String getQualifiedMethodName(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.hasConstructor(java.lang.Class<?>, java.lang.Class<?>...)",
            "public static boolean hasConstructor(java.lang.Class<?>, java.lang.Class<?>...)"
        ],
        [
            "<T> java.lang.reflect.Constructor<T>",
            "org.springframework.util.ClassUtils.getConstructorIfAvailable(java.lang.Class<T>, java.lang.Class<?>...)",
            "public static <T> java.lang.reflect.Constructor<T> getConstructorIfAvailable(java.lang.Class<T>, java.lang.Class<?>...)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.hasMethod(java.lang.Class<?>, java.lang.reflect.Method)",
            "public static boolean hasMethod(java.lang.Class<?>, java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.hasMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)",
            "public static boolean hasMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.ClassUtils.getMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)",
            "public static java.lang.reflect.Method getMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.ClassUtils.getMethodIfAvailable(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)",
            "public static java.lang.reflect.Method getMethodIfAvailable(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "int",
            "org.springframework.util.ClassUtils.getMethodCountForName(java.lang.Class<?>, java.lang.String)",
            "public static int getMethodCountForName(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.hasAtLeastOneMethodWithName(java.lang.Class<?>, java.lang.String)",
            "public static boolean hasAtLeastOneMethodWithName(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.ClassUtils.getMostSpecificMethod(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.ClassUtils.getInterfaceMethodIfPossible(java.lang.reflect.Method)",
            "public static java.lang.reflect.Method getInterfaceMethodIfPossible(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.ClassUtils.getInterfaceMethodIfPossible(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static java.lang.reflect.Method getInterfaceMethodIfPossible(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ClassUtils.isUserLevelMethod(java.lang.reflect.Method)",
            "public static boolean isUserLevelMethod(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.ClassUtils.getStaticMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)",
            "public static java.lang.reflect.Method getStaticMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "org.springframework.util.CollectionUtils$EnumerationIterator",
            "org.springframework.util.CollectionUtils$EnumerationIterator(java.util.Enumeration<E>)",
            "public org.springframework.util.CollectionUtils$EnumerationIterator(java.util.Enumeration<E>)"
        ],
        [
            "boolean",
            "org.springframework.util.CollectionUtils$EnumerationIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "E",
            "org.springframework.util.CollectionUtils$EnumerationIterator.next()",
            "public E next()"
        ],
        [
            "void",
            "org.springframework.util.CollectionUtils$EnumerationIterator.remove()",
            "public void remove() throws java.lang.UnsupportedOperationException"
        ],
        [
            "org.springframework.util.CollectionUtils",
            "org.springframework.util.CollectionUtils()",
            "public org.springframework.util.CollectionUtils()"
        ],
        [
            "boolean",
            "org.springframework.util.CollectionUtils.isEmpty(java.util.Collection<?>)",
            "public static boolean isEmpty(java.util.Collection<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.CollectionUtils.isEmpty(java.util.Map<?, ?>)",
            "public static boolean isEmpty(java.util.Map<?, ?>)"
        ],
        [
            "<K, V> java.util.HashMap<K, V>",
            "org.springframework.util.CollectionUtils.newHashMap(int)",
            "public static <K, V> java.util.HashMap<K, V> newHashMap(int)"
        ],
        [
            "<K, V> java.util.LinkedHashMap<K, V>",
            "org.springframework.util.CollectionUtils.newLinkedHashMap(int)",
            "public static <K, V> java.util.LinkedHashMap<K, V> newLinkedHashMap(int)"
        ],
        [
            "java.util.List<?>",
            "org.springframework.util.CollectionUtils.arrayToList(java.lang.Object)",
            "public static java.util.List<?> arrayToList(java.lang.Object)"
        ],
        [
            "<E> void",
            "org.springframework.util.CollectionUtils.mergeArrayIntoCollection(java.lang.Object, java.util.Collection<E>)",
            "public static <E> void mergeArrayIntoCollection(java.lang.Object, java.util.Collection<E>)"
        ],
        [
            "<K, V> void",
            "org.springframework.util.CollectionUtils.mergePropertiesIntoMap(java.util.Properties, java.util.Map<K, V>)",
            "public static <K, V> void mergePropertiesIntoMap(java.util.Properties, java.util.Map<K, V>)"
        ],
        [
            "boolean",
            "org.springframework.util.CollectionUtils.contains(java.util.Iterator<?>, java.lang.Object)",
            "public static boolean contains(java.util.Iterator<?>, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.CollectionUtils.contains(java.util.Enumeration<?>, java.lang.Object)",
            "public static boolean contains(java.util.Enumeration<?>, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.CollectionUtils.containsInstance(java.util.Collection<?>, java.lang.Object)",
            "public static boolean containsInstance(java.util.Collection<?>, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.CollectionUtils.containsAny(java.util.Collection<?>, java.util.Collection<?>)",
            "public static boolean containsAny(java.util.Collection<?>, java.util.Collection<?>)"
        ],
        [
            "<E> E",
            "org.springframework.util.CollectionUtils.findFirstMatch(java.util.Collection<?>, java.util.Collection<E>)",
            "public static <E> E findFirstMatch(java.util.Collection<?>, java.util.Collection<E>)"
        ],
        [
            "<T> T",
            "org.springframework.util.CollectionUtils.findValueOfType(java.util.Collection<?>, java.lang.Class<T>)",
            "public static <T> T findValueOfType(java.util.Collection<?>, java.lang.Class<T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.CollectionUtils.findValueOfType(java.util.Collection<?>, java.lang.Class<?>[])",
            "public static java.lang.Object findValueOfType(java.util.Collection<?>, java.lang.Class<?>[])"
        ],
        [
            "boolean",
            "org.springframework.util.CollectionUtils.hasUniqueObject(java.util.Collection<?>)",
            "public static boolean hasUniqueObject(java.util.Collection<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.CollectionUtils.findCommonElementType(java.util.Collection<?>)",
            "public static java.lang.Class<?> findCommonElementType(java.util.Collection<?>)"
        ],
        [
            "<T> T",
            "org.springframework.util.CollectionUtils.firstElement(java.util.Set<T>)",
            "public static <T> T firstElement(java.util.Set<T>)"
        ],
        [
            "<T> T",
            "org.springframework.util.CollectionUtils.firstElement(java.util.List<T>)",
            "public static <T> T firstElement(java.util.List<T>)"
        ],
        [
            "<T> T",
            "org.springframework.util.CollectionUtils.lastElement(java.util.Set<T>)",
            "public static <T> T lastElement(java.util.Set<T>)"
        ],
        [
            "<T> T",
            "org.springframework.util.CollectionUtils.lastElement(java.util.List<T>)",
            "public static <T> T lastElement(java.util.List<T>)"
        ],
        [
            "<A, E extends A> A[]",
            "org.springframework.util.CollectionUtils.toArray(java.util.Enumeration<E>, A[])",
            "public static <A, E extends A> A[] toArray(java.util.Enumeration<E>, A[])"
        ],
        [
            "<E> java.util.Iterator<E>",
            "org.springframework.util.CollectionUtils.toIterator(java.util.Enumeration<E>)",
            "public static <E> java.util.Iterator<E> toIterator(java.util.Enumeration<E>)"
        ],
        [
            "<K, V> org.springframework.util.MultiValueMap<K, V>",
            "org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map<K, java.util.List<V>>)",
            "public static <K, V> org.springframework.util.MultiValueMap<K, V> toMultiValueMap(java.util.Map<K, java.util.List<V>>)"
        ],
        [
            "<K, V> org.springframework.util.MultiValueMap<K, V>",
            "org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap<? extends K, ? extends V>)",
            "public static <K, V> org.springframework.util.MultiValueMap<K, V> unmodifiableMultiValueMap(org.springframework.util.MultiValueMap<? extends K, ? extends V>)"
        ],
        [
            "org.springframework.util.CommonsLogWriter",
            "org.springframework.util.CommonsLogWriter(org.apache.commons.logging.Log)",
            "public org.springframework.util.CommonsLogWriter(org.apache.commons.logging.Log)"
        ],
        [
            "void",
            "org.springframework.util.CommonsLogWriter.write(char)",
            "public void write(char)"
        ],
        [
            "void",
            "org.springframework.util.CommonsLogWriter.write(char[], int, int)",
            "public void write(char[], int, int)"
        ],
        [
            "void",
            "org.springframework.util.CommonsLogWriter.flush()",
            "public void flush()"
        ],
        [
            "void",
            "org.springframework.util.CommonsLogWriter.close()",
            "public void close()"
        ],
        [
            "org.springframework.util.CompositeIterator",
            "org.springframework.util.CompositeIterator()",
            "public org.springframework.util.CompositeIterator()"
        ],
        [
            "void",
            "org.springframework.util.CompositeIterator.add(java.util.Iterator<E>)",
            "public void add(java.util.Iterator<E>)"
        ],
        [
            "boolean",
            "org.springframework.util.CompositeIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "E",
            "org.springframework.util.CompositeIterator.next()",
            "public E next()"
        ],
        [
            "void",
            "org.springframework.util.CompositeIterator.remove()",
            "public void remove()"
        ],
        [
            "org.springframework.util.ConcurrencyThrottleSupport",
            "org.springframework.util.ConcurrencyThrottleSupport()",
            "public org.springframework.util.ConcurrencyThrottleSupport()"
        ],
        [
            "void",
            "org.springframework.util.ConcurrencyThrottleSupport.setConcurrencyLimit(int)",
            "public void setConcurrencyLimit(int)"
        ],
        [
            "int",
            "org.springframework.util.ConcurrencyThrottleSupport.getConcurrencyLimit()",
            "public int getConcurrencyLimit()"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrencyThrottleSupport.isThrottleActive()",
            "public boolean isThrottleActive()"
        ],
        [
            "org.springframework.util.ConcurrentLruCache",
            "org.springframework.util.ConcurrentLruCache(int, java.util.function.Function<K, V>)",
            "public org.springframework.util.ConcurrentLruCache(int, java.util.function.Function<K, V>)"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentLruCache.get(K)",
            "public V get(K)"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentLruCache.contains(K)",
            "public boolean contains(K)"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentLruCache.remove(K)",
            "public boolean remove(K)"
        ],
        [
            "void",
            "org.springframework.util.ConcurrentLruCache.clear()",
            "public void clear()"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentLruCache.size()",
            "public int size()"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentLruCache.sizeLimit()",
            "public int sizeLimit()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Entry",
            "org.springframework.util.ConcurrentReferenceHashMap$Entry(K, V)",
            "public org.springframework.util.ConcurrentReferenceHashMap$Entry(K, V)"
        ],
        [
            "K",
            "org.springframework.util.ConcurrentReferenceHashMap$Entry.getKey()",
            "public K getKey()"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentReferenceHashMap$Entry.getValue()",
            "public V getValue()"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentReferenceHashMap$Entry.setValue(V)",
            "public V setValue(V)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ConcurrentReferenceHashMap$Entry.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap$Entry.equals(java.lang.Object)",
            "public final boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentReferenceHashMap$Entry.hashCode()",
            "public final int hashCode()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$EntryIterator",
            "org.springframework.util.ConcurrentReferenceHashMap$EntryIterator(org.springframework.util.ConcurrentReferenceHashMap)",
            "public org.springframework.util.ConcurrentReferenceHashMap$EntryIterator(org.springframework.util.ConcurrentReferenceHashMap)"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>",
            "org.springframework.util.ConcurrentReferenceHashMap$EntryIterator.next()",
            "public org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V> next()"
        ],
        [
            "void",
            "org.springframework.util.ConcurrentReferenceHashMap$EntryIterator.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.ConcurrentReferenceHashMap$EntryIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<K, V>>",
            "org.springframework.util.ConcurrentReferenceHashMap$EntrySet.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap$EntrySet.contains(java.lang.Object)",
            "public boolean contains(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap$EntrySet.remove(java.lang.Object)",
            "public boolean remove(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentReferenceHashMap$EntrySet.size()",
            "public int size()"
        ],
        [
            "void",
            "org.springframework.util.ConcurrentReferenceHashMap$EntrySet.clear()",
            "public void clear()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>",
            "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.createReference(org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>, int, org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>)",
            "public org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V> createReference(org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>, int, org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>",
            "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()",
            "public org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V> pollForPurge()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType[]",
            "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType.values()",
            "public static org.springframework.util.ConcurrentReferenceHashMap$ReferenceType[] values()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
            "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType.valueOf(java.lang.String)",
            "public static org.springframework.util.ConcurrentReferenceHashMap$ReferenceType valueOf(java.lang.String)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Restructure[]",
            "org.springframework.util.ConcurrentReferenceHashMap$Restructure.values()",
            "public static org.springframework.util.ConcurrentReferenceHashMap$Restructure[] values()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Restructure",
            "org.springframework.util.ConcurrentReferenceHashMap$Restructure.valueOf(java.lang.String)",
            "public static org.springframework.util.ConcurrentReferenceHashMap$Restructure valueOf(java.lang.String)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Segment",
            "org.springframework.util.ConcurrentReferenceHashMap$Segment(org.springframework.util.ConcurrentReferenceHashMap, int, int)",
            "public org.springframework.util.ConcurrentReferenceHashMap$Segment(org.springframework.util.ConcurrentReferenceHashMap, int, int)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>",
            "org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object, int, org.springframework.util.ConcurrentReferenceHashMap$Restructure)",
            "public org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V> getReference(java.lang.Object, int, org.springframework.util.ConcurrentReferenceHashMap$Restructure)"
        ],
        [
            "<T> T",
            "org.springframework.util.ConcurrentReferenceHashMap$Segment.doTask(int, java.lang.Object, org.springframework.util.ConcurrentReferenceHashMap<K, V>.Task<T>)",
            "public <T> T doTask(int, java.lang.Object, org.springframework.util.ConcurrentReferenceHashMap<K, V>.Task<T>)"
        ],
        [
            "void",
            "org.springframework.util.ConcurrentReferenceHashMap$Segment.clear()",
            "public void clear()"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentReferenceHashMap$Segment.getSize()",
            "public final int getSize()"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentReferenceHashMap$Segment.getCount()",
            "public final int getCount()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference",
            "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference(org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>, int, org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>, java.lang.ref.ReferenceQueue<org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>>)",
            "public org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference(org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>, int, org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>, java.lang.ref.ReferenceQueue<org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>>)"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.getHash()",
            "public int getHash()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>",
            "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.getNext()",
            "public org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V> getNext()"
        ],
        [
            "void",
            "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.release()",
            "public void release()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Entry",
            "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get()",
            "public org.springframework.util.ConcurrentReferenceHashMap$Entry get()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Task",
            "org.springframework.util.ConcurrentReferenceHashMap$Task(org.springframework.util.ConcurrentReferenceHashMap, org.springframework.util.ConcurrentReferenceHashMap$TaskOption...)",
            "public org.springframework.util.ConcurrentReferenceHashMap$Task(org.springframework.util.ConcurrentReferenceHashMap, org.springframework.util.ConcurrentReferenceHashMap$TaskOption...)"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)",
            "public boolean hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$TaskOption[]",
            "org.springframework.util.ConcurrentReferenceHashMap$TaskOption.values()",
            "public static org.springframework.util.ConcurrentReferenceHashMap$TaskOption[] values()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$TaskOption",
            "org.springframework.util.ConcurrentReferenceHashMap$TaskOption.valueOf(java.lang.String)",
            "public static org.springframework.util.ConcurrentReferenceHashMap$TaskOption valueOf(java.lang.String)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$WeakEntryReference",
            "org.springframework.util.ConcurrentReferenceHashMap$WeakEntryReference(org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>, int, org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>, java.lang.ref.ReferenceQueue<org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>>)",
            "public org.springframework.util.ConcurrentReferenceHashMap$WeakEntryReference(org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>, int, org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>, java.lang.ref.ReferenceQueue<org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>>)"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentReferenceHashMap$WeakEntryReference.getHash()",
            "public int getHash()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>",
            "org.springframework.util.ConcurrentReferenceHashMap$WeakEntryReference.getNext()",
            "public org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V> getNext()"
        ],
        [
            "void",
            "org.springframework.util.ConcurrentReferenceHashMap$WeakEntryReference.release()",
            "public void release()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap$Entry",
            "org.springframework.util.ConcurrentReferenceHashMap$WeakEntryReference.get()",
            "public org.springframework.util.ConcurrentReferenceHashMap$Entry get()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap",
            "org.springframework.util.ConcurrentReferenceHashMap()",
            "public org.springframework.util.ConcurrentReferenceHashMap()"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap",
            "org.springframework.util.ConcurrentReferenceHashMap(int)",
            "public org.springframework.util.ConcurrentReferenceHashMap(int)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap",
            "org.springframework.util.ConcurrentReferenceHashMap(int, float)",
            "public org.springframework.util.ConcurrentReferenceHashMap(int, float)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap",
            "org.springframework.util.ConcurrentReferenceHashMap(int, int)",
            "public org.springframework.util.ConcurrentReferenceHashMap(int, int)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap",
            "org.springframework.util.ConcurrentReferenceHashMap(int, org.springframework.util.ConcurrentReferenceHashMap$ReferenceType)",
            "public org.springframework.util.ConcurrentReferenceHashMap(int, org.springframework.util.ConcurrentReferenceHashMap$ReferenceType)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap",
            "org.springframework.util.ConcurrentReferenceHashMap(int, float, int)",
            "public org.springframework.util.ConcurrentReferenceHashMap(int, float, int)"
        ],
        [
            "org.springframework.util.ConcurrentReferenceHashMap",
            "org.springframework.util.ConcurrentReferenceHashMap(int, float, int, org.springframework.util.ConcurrentReferenceHashMap$ReferenceType)",
            "public org.springframework.util.ConcurrentReferenceHashMap(int, float, int, org.springframework.util.ConcurrentReferenceHashMap$ReferenceType)"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object)",
            "public V get(java.lang.Object)"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentReferenceHashMap.getOrDefault(java.lang.Object, V)",
            "public V getOrDefault(java.lang.Object, V)"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentReferenceHashMap.put(K, V)",
            "public V put(K, V)"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentReferenceHashMap.putIfAbsent(K, V)",
            "public V putIfAbsent(K, V)"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentReferenceHashMap.remove(java.lang.Object)",
            "public V remove(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap.remove(java.lang.Object, java.lang.Object)",
            "public boolean remove(java.lang.Object, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap.replace(K, V, V)",
            "public boolean replace(K, V, V)"
        ],
        [
            "V",
            "org.springframework.util.ConcurrentReferenceHashMap.replace(K, V)",
            "public V replace(K, V)"
        ],
        [
            "void",
            "org.springframework.util.ConcurrentReferenceHashMap.clear()",
            "public void clear()"
        ],
        [
            "void",
            "org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries()",
            "public void purgeUnreferencedEntries()"
        ],
        [
            "int",
            "org.springframework.util.ConcurrentReferenceHashMap.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.util.ConcurrentReferenceHashMap.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<K, V>>",
            "org.springframework.util.ConcurrentReferenceHashMap.entrySet()",
            "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"
        ],
        [
            "org.springframework.util.CustomizableThreadCreator",
            "org.springframework.util.CustomizableThreadCreator()",
            "public org.springframework.util.CustomizableThreadCreator()"
        ],
        [
            "org.springframework.util.CustomizableThreadCreator",
            "org.springframework.util.CustomizableThreadCreator(java.lang.String)",
            "public org.springframework.util.CustomizableThreadCreator(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.CustomizableThreadCreator.setThreadNamePrefix(java.lang.String)",
            "public void setThreadNamePrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.CustomizableThreadCreator.getThreadNamePrefix()",
            "public java.lang.String getThreadNamePrefix()"
        ],
        [
            "void",
            "org.springframework.util.CustomizableThreadCreator.setThreadPriority(int)",
            "public void setThreadPriority(int)"
        ],
        [
            "int",
            "org.springframework.util.CustomizableThreadCreator.getThreadPriority()",
            "public int getThreadPriority()"
        ],
        [
            "void",
            "org.springframework.util.CustomizableThreadCreator.setDaemon(boolean)",
            "public void setDaemon(boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.CustomizableThreadCreator.isDaemon()",
            "public boolean isDaemon()"
        ],
        [
            "void",
            "org.springframework.util.CustomizableThreadCreator.setThreadGroupName(java.lang.String)",
            "public void setThreadGroupName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.CustomizableThreadCreator.setThreadGroup(java.lang.ThreadGroup)",
            "public void setThreadGroup(java.lang.ThreadGroup)"
        ],
        [
            "java.lang.ThreadGroup",
            "org.springframework.util.CustomizableThreadCreator.getThreadGroup()",
            "public java.lang.ThreadGroup getThreadGroup()"
        ],
        [
            "java.lang.Thread",
            "org.springframework.util.CustomizableThreadCreator.createThread(java.lang.Runnable)",
            "public java.lang.Thread createThread(java.lang.Runnable)"
        ],
        [
            "org.springframework.util.DefaultPropertiesPersister",
            "org.springframework.util.DefaultPropertiesPersister()",
            "public org.springframework.util.DefaultPropertiesPersister()"
        ],
        [
            "void",
            "org.springframework.util.DefaultPropertiesPersister.load(java.util.Properties, java.io.InputStream)",
            "public void load(java.util.Properties, java.io.InputStream) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.DefaultPropertiesPersister.load(java.util.Properties, java.io.Reader)",
            "public void load(java.util.Properties, java.io.Reader) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.DefaultPropertiesPersister.store(java.util.Properties, java.io.OutputStream, java.lang.String)",
            "public void store(java.util.Properties, java.io.OutputStream, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.DefaultPropertiesPersister.store(java.util.Properties, java.io.Writer, java.lang.String)",
            "public void store(java.util.Properties, java.io.Writer, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.DefaultPropertiesPersister.loadFromXml(java.util.Properties, java.io.InputStream)",
            "public void loadFromXml(java.util.Properties, java.io.InputStream) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.DefaultPropertiesPersister.storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String)",
            "public void storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.DefaultPropertiesPersister.storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String, java.lang.String)",
            "public void storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.util.DigestUtils",
            "org.springframework.util.DigestUtils()",
            "public org.springframework.util.DigestUtils()"
        ],
        [
            "byte[]",
            "org.springframework.util.DigestUtils.md5Digest(byte[])",
            "public static byte[] md5Digest(byte[])"
        ],
        [
            "byte[]",
            "org.springframework.util.DigestUtils.md5Digest(java.io.InputStream)",
            "public static byte[] md5Digest(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.DigestUtils.md5DigestAsHex(byte[])",
            "public static java.lang.String md5DigestAsHex(byte[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.DigestUtils.md5DigestAsHex(java.io.InputStream)",
            "public static java.lang.String md5DigestAsHex(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "java.lang.StringBuilder",
            "org.springframework.util.DigestUtils.appendMd5DigestAsHex(byte[], java.lang.StringBuilder)",
            "public static java.lang.StringBuilder appendMd5DigestAsHex(byte[], java.lang.StringBuilder)"
        ],
        [
            "java.lang.StringBuilder",
            "org.springframework.util.DigestUtils.appendMd5DigestAsHex(java.io.InputStream, java.lang.StringBuilder)",
            "public static java.lang.StringBuilder appendMd5DigestAsHex(java.io.InputStream, java.lang.StringBuilder) throws java.io.IOException"
        ],
        [
            "org.springframework.util.ExceptionTypeFilter",
            "org.springframework.util.ExceptionTypeFilter(java.util.Collection<? extends java.lang.Class<? extends java.lang.Throwable>>, java.util.Collection<? extends java.lang.Class<? extends java.lang.Throwable>>, boolean)",
            "public org.springframework.util.ExceptionTypeFilter(java.util.Collection<? extends java.lang.Class<? extends java.lang.Throwable>>, java.util.Collection<? extends java.lang.Class<? extends java.lang.Throwable>>, boolean)"
        ],
        [
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream",
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream(org.springframework.util.FastByteArrayOutputStream)",
            "public org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream(org.springframework.util.FastByteArrayOutputStream)"
        ],
        [
            "int",
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream.read()",
            "public int read()"
        ],
        [
            "int",
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream.read(byte[])",
            "public int read(byte[])"
        ],
        [
            "int",
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream.read(byte[], int, int)",
            "public int read(byte[], int, int)"
        ],
        [
            "long",
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream.skip(long)",
            "public long skip(long) throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream.available()",
            "public int available()"
        ],
        [
            "void",
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream.updateMessageDigest(java.security.MessageDigest)",
            "public void updateMessageDigest(java.security.MessageDigest)"
        ],
        [
            "void",
            "org.springframework.util.FastByteArrayOutputStream$FastByteArrayInputStream.updateMessageDigest(java.security.MessageDigest, int)",
            "public void updateMessageDigest(java.security.MessageDigest, int)"
        ],
        [
            "org.springframework.util.FastByteArrayOutputStream",
            "org.springframework.util.FastByteArrayOutputStream()",
            "public org.springframework.util.FastByteArrayOutputStream()"
        ],
        [
            "org.springframework.util.FastByteArrayOutputStream",
            "org.springframework.util.FastByteArrayOutputStream(int)",
            "public org.springframework.util.FastByteArrayOutputStream(int)"
        ],
        [
            "void",
            "org.springframework.util.FastByteArrayOutputStream.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.FastByteArrayOutputStream.write(byte[], int, int)",
            "public void write(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.FastByteArrayOutputStream.close()",
            "public void close()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.FastByteArrayOutputStream.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.util.FastByteArrayOutputStream.size()",
            "public int size()"
        ],
        [
            "byte[]",
            "org.springframework.util.FastByteArrayOutputStream.toByteArrayUnsafe()",
            "public byte[] toByteArrayUnsafe()"
        ],
        [
            "byte[]",
            "org.springframework.util.FastByteArrayOutputStream.toByteArray()",
            "public byte[] toByteArray()"
        ],
        [
            "void",
            "org.springframework.util.FastByteArrayOutputStream.reset()",
            "public void reset()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.util.FastByteArrayOutputStream.getInputStream()",
            "public java.io.InputStream getInputStream()"
        ],
        [
            "void",
            "org.springframework.util.FastByteArrayOutputStream.writeTo(java.io.OutputStream)",
            "public void writeTo(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.FastByteArrayOutputStream.resize(int)",
            "public void resize(int)"
        ],
        [
            "org.springframework.util.FileCopyUtils",
            "org.springframework.util.FileCopyUtils()",
            "public org.springframework.util.FileCopyUtils()"
        ],
        [
            "int",
            "org.springframework.util.FileCopyUtils.copy(java.io.File, java.io.File)",
            "public static int copy(java.io.File, java.io.File) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.FileCopyUtils.copy(byte[], java.io.File)",
            "public static void copy(byte[], java.io.File) throws java.io.IOException"
        ],
        [
            "byte[]",
            "org.springframework.util.FileCopyUtils.copyToByteArray(java.io.File)",
            "public static byte[] copyToByteArray(java.io.File) throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.util.FileCopyUtils.copy(java.io.InputStream, java.io.OutputStream)",
            "public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.FileCopyUtils.copy(byte[], java.io.OutputStream)",
            "public static void copy(byte[], java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "byte[]",
            "org.springframework.util.FileCopyUtils.copyToByteArray(java.io.InputStream)",
            "public static byte[] copyToByteArray(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.util.FileCopyUtils.copy(java.io.Reader, java.io.Writer)",
            "public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.FileCopyUtils.copy(java.lang.String, java.io.Writer)",
            "public static void copy(java.lang.String, java.io.Writer) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.FileCopyUtils.copyToString(java.io.Reader)",
            "public static java.lang.String copyToString(java.io.Reader) throws java.io.IOException"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.springframework.util.FileSystemUtils$1.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)",
            "public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.springframework.util.FileSystemUtils$1.postVisitDirectory(java.nio.file.Path, java.io.IOException)",
            "public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException) throws java.io.IOException"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.springframework.util.FileSystemUtils$1.postVisitDirectory(java.lang.Object, java.io.IOException)",
            "public java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object, java.io.IOException) throws java.io.IOException"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.springframework.util.FileSystemUtils$1.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)",
            "public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.springframework.util.FileSystemUtils$2.preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)",
            "public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.springframework.util.FileSystemUtils$2.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)",
            "public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.springframework.util.FileSystemUtils$2.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)",
            "public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.springframework.util.FileSystemUtils$2.preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)",
            "public java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"
        ],
        [
            "org.springframework.util.FileSystemUtils",
            "org.springframework.util.FileSystemUtils()",
            "public org.springframework.util.FileSystemUtils()"
        ],
        [
            "boolean",
            "org.springframework.util.FileSystemUtils.deleteRecursively(java.io.File)",
            "public static boolean deleteRecursively(java.io.File)"
        ],
        [
            "boolean",
            "org.springframework.util.FileSystemUtils.deleteRecursively(java.nio.file.Path)",
            "public static boolean deleteRecursively(java.nio.file.Path) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.FileSystemUtils.copyRecursively(java.io.File, java.io.File)",
            "public static void copyRecursively(java.io.File, java.io.File) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.FileSystemUtils.copyRecursively(java.nio.file.Path, java.nio.file.Path)",
            "public static void copyRecursively(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException"
        ],
        [
            "org.springframework.util.InstanceFilter",
            "org.springframework.util.InstanceFilter(java.util.Collection<? extends T>, java.util.Collection<? extends T>, boolean)",
            "public org.springframework.util.InstanceFilter(java.util.Collection<? extends T>, java.util.Collection<? extends T>, boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.InstanceFilter.match(T)",
            "public boolean match(T)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.InstanceFilter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.InvalidMimeTypeException",
            "org.springframework.util.InvalidMimeTypeException(java.lang.String, java.lang.String)",
            "public org.springframework.util.InvalidMimeTypeException(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.InvalidMimeTypeException.getMimeType()",
            "public java.lang.String getMimeType()"
        ],
        [
            "org.springframework.util.JdkIdGenerator",
            "org.springframework.util.JdkIdGenerator()",
            "public org.springframework.util.JdkIdGenerator()"
        ],
        [
            "java.util.UUID",
            "org.springframework.util.JdkIdGenerator.generateId()",
            "public java.util.UUID generateId()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap$1.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator(org.springframework.util.LinkedCaseInsensitiveMap)",
            "public org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator(org.springframework.util.LinkedCaseInsensitiveMap)"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator.remove()",
            "public void remove()"
        ],
        [
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet(java.util.Set<java.util.Map$Entry<java.lang.String, V>>)",
            "public org.springframework.util.LinkedCaseInsensitiveMap$EntrySet(java.util.Set<java.util.Map$Entry<java.lang.String, V>>)"
        ],
        [
            "int",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet.contains(java.lang.Object)",
            "public boolean contains(java.lang.Object)"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<java.lang.String, V>>",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<java.lang.String, V>> iterator()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet.remove(java.lang.Object)",
            "public boolean remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet.clear()",
            "public void clear()"
        ],
        [
            "java.util.Spliterator<java.util.Map$Entry<java.lang.String, V>>",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet.spliterator()",
            "public java.util.Spliterator<java.util.Map$Entry<java.lang.String, V>> spliterator()"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet.forEach(java.util.function.Consumer<? super java.util.Map$Entry<java.lang.String, V>>)",
            "public void forEach(java.util.function.Consumer<? super java.util.Map$Entry<java.lang.String, V>>)"
        ],
        [
            "java.util.Map$Entry<java.lang.String, V>",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator.next()",
            "public java.util.Map$Entry<java.lang.String, V> next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "int",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySet.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySet.contains(java.lang.Object)",
            "public boolean contains(java.lang.Object)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySet.iterator()",
            "public java.util.Iterator<java.lang.String> iterator()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySet.remove(java.lang.Object)",
            "public boolean remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySet.clear()",
            "public void clear()"
        ],
        [
            "java.util.Spliterator<java.lang.String>",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySet.spliterator()",
            "public java.util.Spliterator<java.lang.String> spliterator()"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySet.forEach(java.util.function.Consumer<? super java.lang.String>)",
            "public void forEach(java.util.function.Consumer<? super java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator.next()",
            "public java.lang.String next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "int",
            "org.springframework.util.LinkedCaseInsensitiveMap$Values.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap$Values.contains(java.lang.Object)",
            "public boolean contains(java.lang.Object)"
        ],
        [
            "java.util.Iterator<V>",
            "org.springframework.util.LinkedCaseInsensitiveMap$Values.iterator()",
            "public java.util.Iterator<V> iterator()"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap$Values.clear()",
            "public void clear()"
        ],
        [
            "java.util.Spliterator<V>",
            "org.springframework.util.LinkedCaseInsensitiveMap$Values.spliterator()",
            "public java.util.Spliterator<V> spliterator()"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap$Values.forEach(java.util.function.Consumer<? super V>)",
            "public void forEach(java.util.function.Consumer<? super V>)"
        ],
        [
            "V",
            "org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator.next()",
            "public V next()"
        ],
        [
            "org.springframework.util.LinkedCaseInsensitiveMap",
            "org.springframework.util.LinkedCaseInsensitiveMap()",
            "public org.springframework.util.LinkedCaseInsensitiveMap()"
        ],
        [
            "org.springframework.util.LinkedCaseInsensitiveMap",
            "org.springframework.util.LinkedCaseInsensitiveMap(java.util.Locale)",
            "public org.springframework.util.LinkedCaseInsensitiveMap(java.util.Locale)"
        ],
        [
            "org.springframework.util.LinkedCaseInsensitiveMap",
            "org.springframework.util.LinkedCaseInsensitiveMap(int)",
            "public org.springframework.util.LinkedCaseInsensitiveMap(int)"
        ],
        [
            "org.springframework.util.LinkedCaseInsensitiveMap",
            "org.springframework.util.LinkedCaseInsensitiveMap(int, java.util.Locale)",
            "public org.springframework.util.LinkedCaseInsensitiveMap(int, java.util.Locale)"
        ],
        [
            "int",
            "org.springframework.util.LinkedCaseInsensitiveMap.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "V",
            "org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)",
            "public V get(java.lang.Object)"
        ],
        [
            "V",
            "org.springframework.util.LinkedCaseInsensitiveMap.getOrDefault(java.lang.Object, V)",
            "public V getOrDefault(java.lang.Object, V)"
        ],
        [
            "V",
            "org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String, V)",
            "public V put(java.lang.String, V)"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap.putAll(java.util.Map<? extends java.lang.String, ? extends V>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends V>)"
        ],
        [
            "V",
            "org.springframework.util.LinkedCaseInsensitiveMap.putIfAbsent(java.lang.String, V)",
            "public V putIfAbsent(java.lang.String, V)"
        ],
        [
            "V",
            "org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String, java.util.function.Function<? super java.lang.String, ? extends V>)",
            "public V computeIfAbsent(java.lang.String, java.util.function.Function<? super java.lang.String, ? extends V>)"
        ],
        [
            "V",
            "org.springframework.util.LinkedCaseInsensitiveMap.remove(java.lang.Object)",
            "public V remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.util.LinkedCaseInsensitiveMap.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.util.LinkedCaseInsensitiveMap.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<V>",
            "org.springframework.util.LinkedCaseInsensitiveMap.values()",
            "public java.util.Collection<V> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, V>>",
            "org.springframework.util.LinkedCaseInsensitiveMap.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, V>> entrySet()"
        ],
        [
            "org.springframework.util.LinkedCaseInsensitiveMap<V>",
            "org.springframework.util.LinkedCaseInsensitiveMap.clone()",
            "public org.springframework.util.LinkedCaseInsensitiveMap<V> clone()"
        ],
        [
            "boolean",
            "org.springframework.util.LinkedCaseInsensitiveMap.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.LinkedCaseInsensitiveMap.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.LinkedCaseInsensitiveMap.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.util.Locale",
            "org.springframework.util.LinkedCaseInsensitiveMap.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.LinkedCaseInsensitiveMap.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object, java.util.function.Function)",
            "public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.LinkedCaseInsensitiveMap.putIfAbsent(java.lang.Object, java.lang.Object)",
            "public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.util.LinkedMultiValueMap",
            "org.springframework.util.LinkedMultiValueMap()",
            "public org.springframework.util.LinkedMultiValueMap()"
        ],
        [
            "org.springframework.util.LinkedMultiValueMap",
            "org.springframework.util.LinkedMultiValueMap(int)",
            "public org.springframework.util.LinkedMultiValueMap(int)"
        ],
        [
            "org.springframework.util.LinkedMultiValueMap",
            "org.springframework.util.LinkedMultiValueMap(java.util.Map<K, java.util.List<V>>)",
            "public org.springframework.util.LinkedMultiValueMap(java.util.Map<K, java.util.List<V>>)"
        ],
        [
            "org.springframework.util.LinkedMultiValueMap<K, V>",
            "org.springframework.util.LinkedMultiValueMap.deepCopy()",
            "public org.springframework.util.LinkedMultiValueMap<K, V> deepCopy()"
        ],
        [
            "org.springframework.util.LinkedMultiValueMap<K, V>",
            "org.springframework.util.LinkedMultiValueMap.clone()",
            "public org.springframework.util.LinkedMultiValueMap<K, V> clone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.LinkedMultiValueMap.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.util.MethodInvoker",
            "org.springframework.util.MethodInvoker()",
            "public org.springframework.util.MethodInvoker()"
        ],
        [
            "void",
            "org.springframework.util.MethodInvoker.setTargetClass(java.lang.Class<?>)",
            "public void setTargetClass(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.util.MethodInvoker.getTargetClass()",
            "public java.lang.Class<?> getTargetClass()"
        ],
        [
            "void",
            "org.springframework.util.MethodInvoker.setTargetObject(java.lang.Object)",
            "public void setTargetObject(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.MethodInvoker.getTargetObject()",
            "public java.lang.Object getTargetObject()"
        ],
        [
            "void",
            "org.springframework.util.MethodInvoker.setTargetMethod(java.lang.String)",
            "public void setTargetMethod(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MethodInvoker.getTargetMethod()",
            "public java.lang.String getTargetMethod()"
        ],
        [
            "void",
            "org.springframework.util.MethodInvoker.setStaticMethod(java.lang.String)",
            "public void setStaticMethod(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.MethodInvoker.setArguments(java.lang.Object...)",
            "public void setArguments(java.lang.Object...)"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.util.MethodInvoker.getArguments()",
            "public java.lang.Object[] getArguments()"
        ],
        [
            "void",
            "org.springframework.util.MethodInvoker.prepare()",
            "public void prepare() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.MethodInvoker.getPreparedMethod()",
            "public java.lang.reflect.Method getPreparedMethod() throws java.lang.IllegalStateException"
        ],
        [
            "boolean",
            "org.springframework.util.MethodInvoker.isPrepared()",
            "public boolean isPrepared()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.MethodInvoker.invoke()",
            "public java.lang.Object invoke() throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException"
        ],
        [
            "int",
            "org.springframework.util.MethodInvoker.getTypeDifferenceWeight(java.lang.Class<?>[], java.lang.Object[])",
            "public static int getTypeDifferenceWeight(java.lang.Class<?>[], java.lang.Object[])"
        ],
        [
            "org.springframework.util.MimeType$SpecificityComparator",
            "org.springframework.util.MimeType$SpecificityComparator()",
            "public org.springframework.util.MimeType$SpecificityComparator()"
        ],
        [
            "int",
            "org.springframework.util.MimeType$SpecificityComparator.compare(T, T)",
            "public int compare(T, T)"
        ],
        [
            "int",
            "org.springframework.util.MimeType$SpecificityComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.util.MimeType(java.lang.String)",
            "public org.springframework.util.MimeType(java.lang.String)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.util.MimeType(java.lang.String, java.lang.String)",
            "public org.springframework.util.MimeType(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.util.MimeType(java.lang.String, java.lang.String, java.nio.charset.Charset)",
            "public org.springframework.util.MimeType(java.lang.String, java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.util.MimeType(org.springframework.util.MimeType, java.nio.charset.Charset)",
            "public org.springframework.util.MimeType(org.springframework.util.MimeType, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.util.MimeType(org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.util.MimeType(org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.util.MimeType(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.util.MimeType(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "boolean",
            "org.springframework.util.MimeType.isWildcardType()",
            "public boolean isWildcardType()"
        ],
        [
            "boolean",
            "org.springframework.util.MimeType.isWildcardSubtype()",
            "public boolean isWildcardSubtype()"
        ],
        [
            "boolean",
            "org.springframework.util.MimeType.isConcrete()",
            "public boolean isConcrete()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MimeType.getType()",
            "public java.lang.String getType()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MimeType.getSubtype()",
            "public java.lang.String getSubtype()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MimeType.getSubtypeSuffix()",
            "public java.lang.String getSubtypeSuffix()"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.util.MimeType.getCharset()",
            "public java.nio.charset.Charset getCharset()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MimeType.getParameter(java.lang.String)",
            "public java.lang.String getParameter(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.util.MimeType.getParameters()",
            "public java.util.Map<java.lang.String, java.lang.String> getParameters()"
        ],
        [
            "boolean",
            "org.springframework.util.MimeType.includes(org.springframework.util.MimeType)",
            "public boolean includes(org.springframework.util.MimeType)"
        ],
        [
            "boolean",
            "org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)",
            "public boolean isCompatibleWith(org.springframework.util.MimeType)"
        ],
        [
            "boolean",
            "org.springframework.util.MimeType.equalsTypeAndSubtype(org.springframework.util.MimeType)",
            "public boolean equalsTypeAndSubtype(org.springframework.util.MimeType)"
        ],
        [
            "boolean",
            "org.springframework.util.MimeType.isPresentIn(java.util.Collection<? extends org.springframework.util.MimeType>)",
            "public boolean isPresentIn(java.util.Collection<? extends org.springframework.util.MimeType>)"
        ],
        [
            "boolean",
            "org.springframework.util.MimeType.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.MimeType.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MimeType.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.util.MimeType.compareTo(org.springframework.util.MimeType)",
            "public int compareTo(org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.util.MimeType.valueOf(java.lang.String)",
            "public static org.springframework.util.MimeType valueOf(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.util.MimeType.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.util.MimeTypeUtils",
            "org.springframework.util.MimeTypeUtils()",
            "public org.springframework.util.MimeTypeUtils()"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String)",
            "public static org.springframework.util.MimeType parseMimeType(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.util.MimeTypeUtils.parseMimeTypes(java.lang.String)",
            "public static java.util.List<org.springframework.util.MimeType> parseMimeTypes(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.util.MimeTypeUtils.tokenize(java.lang.String)",
            "public static java.util.List<java.lang.String> tokenize(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MimeTypeUtils.toString(java.util.Collection<? extends org.springframework.util.MimeType>)",
            "public static java.lang.String toString(java.util.Collection<? extends org.springframework.util.MimeType>)"
        ],
        [
            "void",
            "org.springframework.util.MimeTypeUtils.sortBySpecificity(java.util.List<org.springframework.util.MimeType>)",
            "public static void sortBySpecificity(java.util.List<org.springframework.util.MimeType>)"
        ],
        [
            "byte[]",
            "org.springframework.util.MimeTypeUtils.generateMultipartBoundary()",
            "public static byte[] generateMultipartBoundary()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MimeTypeUtils.generateMultipartBoundaryString()",
            "public static java.lang.String generateMultipartBoundaryString()"
        ],
        [
            "default",
            "org.springframework.util.MultiValueMap.void addIfAbsent(K, V)",
            "public default void addIfAbsent(K, V)"
        ],
        [
            "org.springframework.util.MultiValueMapAdapter",
            "org.springframework.util.MultiValueMapAdapter(java.util.Map<K, java.util.List<V>>)",
            "public org.springframework.util.MultiValueMapAdapter(java.util.Map<K, java.util.List<V>>)"
        ],
        [
            "V",
            "org.springframework.util.MultiValueMapAdapter.getFirst(K)",
            "public V getFirst(K)"
        ],
        [
            "void",
            "org.springframework.util.MultiValueMapAdapter.add(K, V)",
            "public void add(K, V)"
        ],
        [
            "void",
            "org.springframework.util.MultiValueMapAdapter.addAll(K, java.util.List<? extends V>)",
            "public void addAll(K, java.util.List<? extends V>)"
        ],
        [
            "void",
            "org.springframework.util.MultiValueMapAdapter.addAll(org.springframework.util.MultiValueMap<K, V>)",
            "public void addAll(org.springframework.util.MultiValueMap<K, V>)"
        ],
        [
            "void",
            "org.springframework.util.MultiValueMapAdapter.set(K, V)",
            "public void set(K, V)"
        ],
        [
            "void",
            "org.springframework.util.MultiValueMapAdapter.setAll(java.util.Map<K, V>)",
            "public void setAll(java.util.Map<K, V>)"
        ],
        [
            "java.util.Map<K, V>",
            "org.springframework.util.MultiValueMapAdapter.toSingleValueMap()",
            "public java.util.Map<K, V> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.util.MultiValueMapAdapter.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.util.MultiValueMapAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.util.MultiValueMapAdapter.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.MultiValueMapAdapter.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<V>",
            "org.springframework.util.MultiValueMapAdapter.get(java.lang.Object)",
            "public java.util.List<V> get(java.lang.Object)"
        ],
        [
            "java.util.List<V>",
            "org.springframework.util.MultiValueMapAdapter.put(K, java.util.List<V>)",
            "public java.util.List<V> put(K, java.util.List<V>)"
        ],
        [
            "java.util.List<V>",
            "org.springframework.util.MultiValueMapAdapter.remove(java.lang.Object)",
            "public java.util.List<V> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.util.MultiValueMapAdapter.putAll(java.util.Map<? extends K, ? extends java.util.List<V>>)",
            "public void putAll(java.util.Map<? extends K, ? extends java.util.List<V>>)"
        ],
        [
            "void",
            "org.springframework.util.MultiValueMapAdapter.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<K>",
            "org.springframework.util.MultiValueMapAdapter.keySet()",
            "public java.util.Set<K> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<V>>",
            "org.springframework.util.MultiValueMapAdapter.values()",
            "public java.util.Collection<java.util.List<V>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<K, java.util.List<V>>>",
            "org.springframework.util.MultiValueMapAdapter.entrySet()",
            "public java.util.Set<java.util.Map$Entry<K, java.util.List<V>>> entrySet()"
        ],
        [
            "boolean",
            "org.springframework.util.MultiValueMapAdapter.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.MultiValueMapAdapter.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.MultiValueMapAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.MultiValueMapAdapter.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.MultiValueMapAdapter.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.MultiValueMapAdapter.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "org.springframework.util.NumberUtils",
            "org.springframework.util.NumberUtils()",
            "public org.springframework.util.NumberUtils()"
        ],
        [
            "<T extends java.lang.Number> T",
            "org.springframework.util.NumberUtils.convertNumberToTargetClass(java.lang.Number, java.lang.Class<T>)",
            "public static <T extends java.lang.Number> T convertNumberToTargetClass(java.lang.Number, java.lang.Class<T>) throws java.lang.IllegalArgumentException"
        ],
        [
            "<T extends java.lang.Number> T",
            "org.springframework.util.NumberUtils.parseNumber(java.lang.String, java.lang.Class<T>)",
            "public static <T extends java.lang.Number> T parseNumber(java.lang.String, java.lang.Class<T>)"
        ],
        [
            "<T extends java.lang.Number> T",
            "org.springframework.util.NumberUtils.parseNumber(java.lang.String, java.lang.Class<T>, java.text.NumberFormat)",
            "public static <T extends java.lang.Number> T parseNumber(java.lang.String, java.lang.Class<T>, java.text.NumberFormat)"
        ],
        [
            "org.springframework.util.ObjectUtils",
            "org.springframework.util.ObjectUtils()",
            "public org.springframework.util.ObjectUtils()"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.isCheckedException(java.lang.Throwable)",
            "public static boolean isCheckedException(java.lang.Throwable)"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.isCompatibleWithThrowsClause(java.lang.Throwable, java.lang.Class<?>...)",
            "public static boolean isCompatibleWithThrowsClause(java.lang.Throwable, java.lang.Class<?>...)"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.isArray(java.lang.Object)",
            "public static boolean isArray(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.isEmpty(java.lang.Object[])",
            "public static boolean isEmpty(java.lang.Object[])"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.isEmpty(java.lang.Object)",
            "public static boolean isEmpty(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.ObjectUtils.unwrapOptional(java.lang.Object)",
            "public static java.lang.Object unwrapOptional(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.containsElement(java.lang.Object[], java.lang.Object)",
            "public static boolean containsElement(java.lang.Object[], java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.containsConstant(java.lang.Enum<?>[], java.lang.String)",
            "public static boolean containsConstant(java.lang.Enum<?>[], java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.containsConstant(java.lang.Enum<?>[], java.lang.String, boolean)",
            "public static boolean containsConstant(java.lang.Enum<?>[], java.lang.String, boolean)"
        ],
        [
            "<E extends java.lang.Enum<?>> E",
            "org.springframework.util.ObjectUtils.caseInsensitiveValueOf(E[], java.lang.String)",
            "public static <E extends java.lang.Enum<?>> E caseInsensitiveValueOf(E[], java.lang.String)"
        ],
        [
            "<A, O extends A> A[]",
            "org.springframework.util.ObjectUtils.addObjectToArray(A[], O)",
            "public static <A, O extends A> A[] addObjectToArray(A[], O)"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.util.ObjectUtils.toObjectArray(java.lang.Object)",
            "public static java.lang.Object[] toObjectArray(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object, java.lang.Object)",
            "public static boolean nullSafeEquals(java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)",
            "public static int nullSafeHashCode(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[])",
            "public static int nullSafeHashCode(java.lang.Object[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(boolean[])",
            "public static int nullSafeHashCode(boolean[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(byte[])",
            "public static int nullSafeHashCode(byte[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(char[])",
            "public static int nullSafeHashCode(char[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(double[])",
            "public static int nullSafeHashCode(double[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(float[])",
            "public static int nullSafeHashCode(float[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(int[])",
            "public static int nullSafeHashCode(int[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(long[])",
            "public static int nullSafeHashCode(long[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.nullSafeHashCode(short[])",
            "public static int nullSafeHashCode(short[])"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.hashCode(boolean)",
            "public static int hashCode(boolean)"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.hashCode(double)",
            "public static int hashCode(double)"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.hashCode(float)",
            "public static int hashCode(float)"
        ],
        [
            "int",
            "org.springframework.util.ObjectUtils.hashCode(long)",
            "public static int hashCode(long)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.identityToString(java.lang.Object)",
            "public static java.lang.String identityToString(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.getIdentityHexString(java.lang.Object)",
            "public static java.lang.String getIdentityHexString(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.getDisplayString(java.lang.Object)",
            "public static java.lang.String getDisplayString(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeClassName(java.lang.Object)",
            "public static java.lang.String nullSafeClassName(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(java.lang.Object)",
            "public static java.lang.String nullSafeToString(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(java.lang.Object[])",
            "public static java.lang.String nullSafeToString(java.lang.Object[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(boolean[])",
            "public static java.lang.String nullSafeToString(boolean[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(byte[])",
            "public static java.lang.String nullSafeToString(byte[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(char[])",
            "public static java.lang.String nullSafeToString(char[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(double[])",
            "public static java.lang.String nullSafeToString(double[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(float[])",
            "public static java.lang.String nullSafeToString(float[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(int[])",
            "public static java.lang.String nullSafeToString(int[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(long[])",
            "public static java.lang.String nullSafeToString(long[])"
        ],
        [
            "java.lang.String",
            "org.springframework.util.ObjectUtils.nullSafeToString(short[])",
            "public static java.lang.String nullSafeToString(short[])"
        ],
        [
            "org.springframework.util.PatternMatchUtils",
            "org.springframework.util.PatternMatchUtils()",
            "public org.springframework.util.PatternMatchUtils()"
        ],
        [
            "boolean",
            "org.springframework.util.PatternMatchUtils.simpleMatch(java.lang.String, java.lang.String)",
            "public static boolean simpleMatch(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.PatternMatchUtils.simpleMatch(java.lang.String[], java.lang.String)",
            "public static boolean simpleMatch(java.lang.String[], java.lang.String)"
        ],
        [
            "org.springframework.util.PropertyPlaceholderHelper",
            "org.springframework.util.PropertyPlaceholderHelper(java.lang.String, java.lang.String)",
            "public org.springframework.util.PropertyPlaceholderHelper(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.util.PropertyPlaceholderHelper",
            "org.springframework.util.PropertyPlaceholderHelper(java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public org.springframework.util.PropertyPlaceholderHelper(java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(java.lang.String, java.util.Properties)",
            "public java.lang.String replacePlaceholders(java.lang.String, java.util.Properties)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(java.lang.String, org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver)",
            "public java.lang.String replacePlaceholders(java.lang.String, org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver)"
        ],
        [
            "default",
            "org.springframework.util.ReflectionUtils$FieldFilter.org.springframework.util.ReflectionUtils$FieldFilter and(org.springframework.util.ReflectionUtils$FieldFilter)",
            "public default org.springframework.util.ReflectionUtils$FieldFilter and(org.springframework.util.ReflectionUtils$FieldFilter)"
        ],
        [
            "default",
            "org.springframework.util.ReflectionUtils$MethodFilter.org.springframework.util.ReflectionUtils$MethodFilter and(org.springframework.util.ReflectionUtils$MethodFilter)",
            "public default org.springframework.util.ReflectionUtils$MethodFilter and(org.springframework.util.ReflectionUtils$MethodFilter)"
        ],
        [
            "org.springframework.util.ReflectionUtils",
            "org.springframework.util.ReflectionUtils()",
            "public org.springframework.util.ReflectionUtils()"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.handleReflectionException(java.lang.Exception)",
            "public static void handleReflectionException(java.lang.Exception)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.handleInvocationTargetException(java.lang.reflect.InvocationTargetException)",
            "public static void handleInvocationTargetException(java.lang.reflect.InvocationTargetException)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.rethrowRuntimeException(java.lang.Throwable)",
            "public static void rethrowRuntimeException(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.rethrowException(java.lang.Throwable)",
            "public static void rethrowException(java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "<T> java.lang.reflect.Constructor<T>",
            "org.springframework.util.ReflectionUtils.accessibleConstructor(java.lang.Class<T>, java.lang.Class<?>...)",
            "public static <T> java.lang.reflect.Constructor<T> accessibleConstructor(java.lang.Class<T>, java.lang.Class<?>...) throws java.lang.NoSuchMethodException"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.makeAccessible(java.lang.reflect.Constructor<?>)",
            "public static void makeAccessible(java.lang.reflect.Constructor<?>)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String)",
            "public static java.lang.reflect.Method findMethod(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.util.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)",
            "public static java.lang.reflect.Method findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.ReflectionUtils.invokeMethod(java.lang.reflect.Method, java.lang.Object)",
            "public static java.lang.Object invokeMethod(java.lang.reflect.Method, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.ReflectionUtils.invokeMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object...)",
            "public static java.lang.Object invokeMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object...)"
        ],
        [
            "boolean",
            "org.springframework.util.ReflectionUtils.declaresException(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static boolean declaresException(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.doWithLocalMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodCallback)",
            "public static void doWithLocalMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodCallback)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.doWithMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodCallback)",
            "public static void doWithMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodCallback)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.doWithMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodCallback, org.springframework.util.ReflectionUtils$MethodFilter)",
            "public static void doWithMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodCallback, org.springframework.util.ReflectionUtils$MethodFilter)"
        ],
        [
            "java.lang.reflect.Method[]",
            "org.springframework.util.ReflectionUtils.getAllDeclaredMethods(java.lang.Class<?>)",
            "public static java.lang.reflect.Method[] getAllDeclaredMethods(java.lang.Class<?>)"
        ],
        [
            "java.lang.reflect.Method[]",
            "org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(java.lang.Class<?>)",
            "public static java.lang.reflect.Method[] getUniqueDeclaredMethods(java.lang.Class<?>)"
        ],
        [
            "java.lang.reflect.Method[]",
            "org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodFilter)",
            "public static java.lang.reflect.Method[] getUniqueDeclaredMethods(java.lang.Class<?>, org.springframework.util.ReflectionUtils$MethodFilter)"
        ],
        [
            "java.lang.reflect.Method[]",
            "org.springframework.util.ReflectionUtils.getDeclaredMethods(java.lang.Class<?>)",
            "public static java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.util.ReflectionUtils.isEqualsMethod(java.lang.reflect.Method)",
            "public static boolean isEqualsMethod(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.util.ReflectionUtils.isHashCodeMethod(java.lang.reflect.Method)",
            "public static boolean isHashCodeMethod(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.util.ReflectionUtils.isToStringMethod(java.lang.reflect.Method)",
            "public static boolean isToStringMethod(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.util.ReflectionUtils.isObjectMethod(java.lang.reflect.Method)",
            "public static boolean isObjectMethod(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.util.ReflectionUtils.isCglibRenamedMethod(java.lang.reflect.Method)",
            "public static boolean isCglibRenamedMethod(java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.makeAccessible(java.lang.reflect.Method)",
            "public static void makeAccessible(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Field",
            "org.springframework.util.ReflectionUtils.findField(java.lang.Class<?>, java.lang.String)",
            "public static java.lang.reflect.Field findField(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.reflect.Field",
            "org.springframework.util.ReflectionUtils.findField(java.lang.Class<?>, java.lang.String, java.lang.Class<?>)",
            "public static java.lang.reflect.Field findField(java.lang.Class<?>, java.lang.String, java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.setField(java.lang.reflect.Field, java.lang.Object, java.lang.Object)",
            "public static void setField(java.lang.reflect.Field, java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.ReflectionUtils.getField(java.lang.reflect.Field, java.lang.Object)",
            "public static java.lang.Object getField(java.lang.reflect.Field, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.doWithLocalFields(java.lang.Class<?>, org.springframework.util.ReflectionUtils$FieldCallback)",
            "public static void doWithLocalFields(java.lang.Class<?>, org.springframework.util.ReflectionUtils$FieldCallback)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.doWithFields(java.lang.Class<?>, org.springframework.util.ReflectionUtils$FieldCallback)",
            "public static void doWithFields(java.lang.Class<?>, org.springframework.util.ReflectionUtils$FieldCallback)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.doWithFields(java.lang.Class<?>, org.springframework.util.ReflectionUtils$FieldCallback, org.springframework.util.ReflectionUtils$FieldFilter)",
            "public static void doWithFields(java.lang.Class<?>, org.springframework.util.ReflectionUtils$FieldCallback, org.springframework.util.ReflectionUtils$FieldFilter)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.shallowCopyFieldState(java.lang.Object, java.lang.Object)",
            "public static void shallowCopyFieldState(java.lang.Object, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.ReflectionUtils.isPublicStaticFinal(java.lang.reflect.Field)",
            "public static boolean isPublicStaticFinal(java.lang.reflect.Field)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.makeAccessible(java.lang.reflect.Field)",
            "public static void makeAccessible(java.lang.reflect.Field)"
        ],
        [
            "void",
            "org.springframework.util.ReflectionUtils.clearCache()",
            "public static void clearCache()"
        ],
        [
            "org.springframework.util.ResizableByteArrayOutputStream",
            "org.springframework.util.ResizableByteArrayOutputStream()",
            "public org.springframework.util.ResizableByteArrayOutputStream()"
        ],
        [
            "org.springframework.util.ResizableByteArrayOutputStream",
            "org.springframework.util.ResizableByteArrayOutputStream(int)",
            "public org.springframework.util.ResizableByteArrayOutputStream(int)"
        ],
        [
            "synchronized",
            "org.springframework.util.ResizableByteArrayOutputStream.void resize(int)",
            "public synchronized void resize(int)"
        ],
        [
            "synchronized",
            "org.springframework.util.ResizableByteArrayOutputStream.void grow(int)",
            "public synchronized void grow(int)"
        ],
        [
            "synchronized",
            "org.springframework.util.ResizableByteArrayOutputStream.int capacity()",
            "public synchronized int capacity()"
        ],
        [
            "org.springframework.util.ResourceUtils",
            "org.springframework.util.ResourceUtils()",
            "public org.springframework.util.ResourceUtils()"
        ],
        [
            "boolean",
            "org.springframework.util.ResourceUtils.isUrl(java.lang.String)",
            "public static boolean isUrl(java.lang.String)"
        ],
        [
            "java.net.URL",
            "org.springframework.util.ResourceUtils.getURL(java.lang.String)",
            "public static java.net.URL getURL(java.lang.String) throws java.io.FileNotFoundException"
        ],
        [
            "java.io.File",
            "org.springframework.util.ResourceUtils.getFile(java.lang.String)",
            "public static java.io.File getFile(java.lang.String) throws java.io.FileNotFoundException"
        ],
        [
            "java.io.File",
            "org.springframework.util.ResourceUtils.getFile(java.net.URL)",
            "public static java.io.File getFile(java.net.URL) throws java.io.FileNotFoundException"
        ],
        [
            "java.io.File",
            "org.springframework.util.ResourceUtils.getFile(java.net.URL, java.lang.String)",
            "public static java.io.File getFile(java.net.URL, java.lang.String) throws java.io.FileNotFoundException"
        ],
        [
            "java.io.File",
            "org.springframework.util.ResourceUtils.getFile(java.net.URI)",
            "public static java.io.File getFile(java.net.URI) throws java.io.FileNotFoundException"
        ],
        [
            "java.io.File",
            "org.springframework.util.ResourceUtils.getFile(java.net.URI, java.lang.String)",
            "public static java.io.File getFile(java.net.URI, java.lang.String) throws java.io.FileNotFoundException"
        ],
        [
            "boolean",
            "org.springframework.util.ResourceUtils.isFileURL(java.net.URL)",
            "public static boolean isFileURL(java.net.URL)"
        ],
        [
            "boolean",
            "org.springframework.util.ResourceUtils.isJarURL(java.net.URL)",
            "public static boolean isJarURL(java.net.URL)"
        ],
        [
            "boolean",
            "org.springframework.util.ResourceUtils.isJarFileURL(java.net.URL)",
            "public static boolean isJarFileURL(java.net.URL)"
        ],
        [
            "java.net.URL",
            "org.springframework.util.ResourceUtils.extractJarFileURL(java.net.URL)",
            "public static java.net.URL extractJarFileURL(java.net.URL) throws java.net.MalformedURLException"
        ],
        [
            "java.net.URL",
            "org.springframework.util.ResourceUtils.extractArchiveURL(java.net.URL)",
            "public static java.net.URL extractArchiveURL(java.net.URL) throws java.net.MalformedURLException"
        ],
        [
            "java.net.URI",
            "org.springframework.util.ResourceUtils.toURI(java.net.URL)",
            "public static java.net.URI toURI(java.net.URL) throws java.net.URISyntaxException"
        ],
        [
            "java.net.URI",
            "org.springframework.util.ResourceUtils.toURI(java.lang.String)",
            "public static java.net.URI toURI(java.lang.String) throws java.net.URISyntaxException"
        ],
        [
            "void",
            "org.springframework.util.ResourceUtils.useCachesIfNecessary(java.net.URLConnection)",
            "public static void useCachesIfNecessary(java.net.URLConnection)"
        ],
        [
            "org.springframework.util.SerializationUtils",
            "org.springframework.util.SerializationUtils()",
            "public org.springframework.util.SerializationUtils()"
        ],
        [
            "byte[]",
            "org.springframework.util.SerializationUtils.serialize(java.lang.Object)",
            "public static byte[] serialize(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.SerializationUtils.deserialize(byte[])",
            "public static java.lang.Object deserialize(byte[])"
        ],
        [
            "org.springframework.util.SimpleIdGenerator",
            "org.springframework.util.SimpleIdGenerator()",
            "public org.springframework.util.SimpleIdGenerator()"
        ],
        [
            "java.util.UUID",
            "org.springframework.util.SimpleIdGenerator.generateId()",
            "public java.util.UUID generateId()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.SimpleRouteMatcher$DefaultRoute.value()",
            "public java.lang.String value()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.SimpleRouteMatcher$DefaultRoute.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.SimpleRouteMatcher",
            "org.springframework.util.SimpleRouteMatcher(org.springframework.util.PathMatcher)",
            "public org.springframework.util.SimpleRouteMatcher(org.springframework.util.PathMatcher)"
        ],
        [
            "org.springframework.util.PathMatcher",
            "org.springframework.util.SimpleRouteMatcher.getPathMatcher()",
            "public org.springframework.util.PathMatcher getPathMatcher()"
        ],
        [
            "org.springframework.util.RouteMatcher$Route",
            "org.springframework.util.SimpleRouteMatcher.parseRoute(java.lang.String)",
            "public org.springframework.util.RouteMatcher$Route parseRoute(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.SimpleRouteMatcher.isPattern(java.lang.String)",
            "public boolean isPattern(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.SimpleRouteMatcher.combine(java.lang.String, java.lang.String)",
            "public java.lang.String combine(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.SimpleRouteMatcher.match(java.lang.String, org.springframework.util.RouteMatcher$Route)",
            "public boolean match(java.lang.String, org.springframework.util.RouteMatcher$Route)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.util.SimpleRouteMatcher.matchAndExtract(java.lang.String, org.springframework.util.RouteMatcher$Route)",
            "public java.util.Map<java.lang.String, java.lang.String> matchAndExtract(java.lang.String, org.springframework.util.RouteMatcher$Route)"
        ],
        [
            "java.util.Comparator<java.lang.String>",
            "org.springframework.util.SimpleRouteMatcher.getPatternComparator(org.springframework.util.RouteMatcher$Route)",
            "public java.util.Comparator<java.lang.String> getPatternComparator(org.springframework.util.RouteMatcher$Route)"
        ],
        [
            "org.springframework.util.SocketUtils$SocketType[]",
            "org.springframework.util.SocketUtils$SocketType.values()",
            "public static org.springframework.util.SocketUtils$SocketType[] values()"
        ],
        [
            "org.springframework.util.SocketUtils$SocketType",
            "org.springframework.util.SocketUtils$SocketType.valueOf(java.lang.String)",
            "public static org.springframework.util.SocketUtils$SocketType valueOf(java.lang.String)"
        ],
        [
            "org.springframework.util.SocketUtils",
            "org.springframework.util.SocketUtils()",
            "public org.springframework.util.SocketUtils()"
        ],
        [
            "int",
            "org.springframework.util.SocketUtils.findAvailableTcpPort()",
            "public static int findAvailableTcpPort()"
        ],
        [
            "int",
            "org.springframework.util.SocketUtils.findAvailableTcpPort(int)",
            "public static int findAvailableTcpPort(int)"
        ],
        [
            "int",
            "org.springframework.util.SocketUtils.findAvailableTcpPort(int, int)",
            "public static int findAvailableTcpPort(int, int)"
        ],
        [
            "java.util.SortedSet<java.lang.Integer>",
            "org.springframework.util.SocketUtils.findAvailableTcpPorts(int)",
            "public static java.util.SortedSet<java.lang.Integer> findAvailableTcpPorts(int)"
        ],
        [
            "java.util.SortedSet<java.lang.Integer>",
            "org.springframework.util.SocketUtils.findAvailableTcpPorts(int, int, int)",
            "public static java.util.SortedSet<java.lang.Integer> findAvailableTcpPorts(int, int, int)"
        ],
        [
            "int",
            "org.springframework.util.SocketUtils.findAvailableUdpPort()",
            "public static int findAvailableUdpPort()"
        ],
        [
            "int",
            "org.springframework.util.SocketUtils.findAvailableUdpPort(int)",
            "public static int findAvailableUdpPort(int)"
        ],
        [
            "int",
            "org.springframework.util.SocketUtils.findAvailableUdpPort(int, int)",
            "public static int findAvailableUdpPort(int, int)"
        ],
        [
            "java.util.SortedSet<java.lang.Integer>",
            "org.springframework.util.SocketUtils.findAvailableUdpPorts(int)",
            "public static java.util.SortedSet<java.lang.Integer> findAvailableUdpPorts(int)"
        ],
        [
            "java.util.SortedSet<java.lang.Integer>",
            "org.springframework.util.SocketUtils.findAvailableUdpPorts(int, int, int)",
            "public static java.util.SortedSet<java.lang.Integer> findAvailableUdpPorts(int, int, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StopWatch$TaskInfo.getTaskName()",
            "public java.lang.String getTaskName()"
        ],
        [
            "long",
            "org.springframework.util.StopWatch$TaskInfo.getTimeNanos()",
            "public long getTimeNanos()"
        ],
        [
            "long",
            "org.springframework.util.StopWatch$TaskInfo.getTimeMillis()",
            "public long getTimeMillis()"
        ],
        [
            "double",
            "org.springframework.util.StopWatch$TaskInfo.getTimeSeconds()",
            "public double getTimeSeconds()"
        ],
        [
            "org.springframework.util.StopWatch",
            "org.springframework.util.StopWatch()",
            "public org.springframework.util.StopWatch()"
        ],
        [
            "org.springframework.util.StopWatch",
            "org.springframework.util.StopWatch(java.lang.String)",
            "public org.springframework.util.StopWatch(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StopWatch.getId()",
            "public java.lang.String getId()"
        ],
        [
            "void",
            "org.springframework.util.StopWatch.setKeepTaskList(boolean)",
            "public void setKeepTaskList(boolean)"
        ],
        [
            "void",
            "org.springframework.util.StopWatch.start()",
            "public void start() throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.util.StopWatch.start(java.lang.String)",
            "public void start(java.lang.String) throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.util.StopWatch.stop()",
            "public void stop() throws java.lang.IllegalStateException"
        ],
        [
            "boolean",
            "org.springframework.util.StopWatch.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StopWatch.currentTaskName()",
            "public java.lang.String currentTaskName()"
        ],
        [
            "long",
            "org.springframework.util.StopWatch.getLastTaskTimeNanos()",
            "public long getLastTaskTimeNanos() throws java.lang.IllegalStateException"
        ],
        [
            "long",
            "org.springframework.util.StopWatch.getLastTaskTimeMillis()",
            "public long getLastTaskTimeMillis() throws java.lang.IllegalStateException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StopWatch.getLastTaskName()",
            "public java.lang.String getLastTaskName() throws java.lang.IllegalStateException"
        ],
        [
            "org.springframework.util.StopWatch$TaskInfo",
            "org.springframework.util.StopWatch.getLastTaskInfo()",
            "public org.springframework.util.StopWatch$TaskInfo getLastTaskInfo() throws java.lang.IllegalStateException"
        ],
        [
            "long",
            "org.springframework.util.StopWatch.getTotalTimeNanos()",
            "public long getTotalTimeNanos()"
        ],
        [
            "long",
            "org.springframework.util.StopWatch.getTotalTimeMillis()",
            "public long getTotalTimeMillis()"
        ],
        [
            "double",
            "org.springframework.util.StopWatch.getTotalTimeSeconds()",
            "public double getTotalTimeSeconds()"
        ],
        [
            "int",
            "org.springframework.util.StopWatch.getTaskCount()",
            "public int getTaskCount()"
        ],
        [
            "org.springframework.util.StopWatch$TaskInfo[]",
            "org.springframework.util.StopWatch.getTaskInfo()",
            "public org.springframework.util.StopWatch$TaskInfo[] getTaskInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StopWatch.shortSummary()",
            "public java.lang.String shortSummary()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StopWatch.prettyPrint()",
            "public java.lang.String prettyPrint()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StopWatch.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.StreamUtils$NonClosingInputStream",
            "org.springframework.util.StreamUtils$NonClosingInputStream(java.io.InputStream)",
            "public org.springframework.util.StreamUtils$NonClosingInputStream(java.io.InputStream)"
        ],
        [
            "void",
            "org.springframework.util.StreamUtils$NonClosingInputStream.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "org.springframework.util.StreamUtils$NonClosingOutputStream",
            "org.springframework.util.StreamUtils$NonClosingOutputStream(java.io.OutputStream)",
            "public org.springframework.util.StreamUtils$NonClosingOutputStream(java.io.OutputStream)"
        ],
        [
            "void",
            "org.springframework.util.StreamUtils$NonClosingOutputStream.write(byte[], int, int)",
            "public void write(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.StreamUtils$NonClosingOutputStream.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "org.springframework.util.StreamUtils",
            "org.springframework.util.StreamUtils()",
            "public org.springframework.util.StreamUtils()"
        ],
        [
            "byte[]",
            "org.springframework.util.StreamUtils.copyToByteArray(java.io.InputStream)",
            "public static byte[] copyToByteArray(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StreamUtils.copyToString(java.io.InputStream, java.nio.charset.Charset)",
            "public static java.lang.String copyToString(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StreamUtils.copyToString(java.io.ByteArrayOutputStream, java.nio.charset.Charset)",
            "public static java.lang.String copyToString(java.io.ByteArrayOutputStream, java.nio.charset.Charset)"
        ],
        [
            "void",
            "org.springframework.util.StreamUtils.copy(byte[], java.io.OutputStream)",
            "public static void copy(byte[], java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.StreamUtils.copy(java.lang.String, java.nio.charset.Charset, java.io.OutputStream)",
            "public static void copy(java.lang.String, java.nio.charset.Charset, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.util.StreamUtils.copy(java.io.InputStream, java.io.OutputStream)",
            "public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.util.StreamUtils.copyRange(java.io.InputStream, java.io.OutputStream, long, long)",
            "public static long copyRange(java.io.InputStream, java.io.OutputStream, long, long) throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.util.StreamUtils.drain(java.io.InputStream)",
            "public static int drain(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.util.StreamUtils.emptyInput()",
            "public static java.io.InputStream emptyInput()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.util.StreamUtils.nonClosing(java.io.InputStream)",
            "public static java.io.InputStream nonClosing(java.io.InputStream)"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.util.StreamUtils.nonClosing(java.io.OutputStream)",
            "public static java.io.OutputStream nonClosing(java.io.OutputStream)"
        ],
        [
            "org.springframework.util.StringUtils",
            "org.springframework.util.StringUtils()",
            "public org.springframework.util.StringUtils()"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.isEmpty(java.lang.Object)",
            "public static boolean isEmpty(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.hasLength(java.lang.CharSequence)",
            "public static boolean hasLength(java.lang.CharSequence)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.hasLength(java.lang.String)",
            "public static boolean hasLength(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.hasText(java.lang.CharSequence)",
            "public static boolean hasText(java.lang.CharSequence)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.hasText(java.lang.String)",
            "public static boolean hasText(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.containsWhitespace(java.lang.CharSequence)",
            "public static boolean containsWhitespace(java.lang.CharSequence)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.containsWhitespace(java.lang.String)",
            "public static boolean containsWhitespace(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.trimWhitespace(java.lang.String)",
            "public static java.lang.String trimWhitespace(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.trimAllWhitespace(java.lang.String)",
            "public static java.lang.String trimAllWhitespace(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.trimLeadingWhitespace(java.lang.String)",
            "public static java.lang.String trimLeadingWhitespace(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.trimTrailingWhitespace(java.lang.String)",
            "public static java.lang.String trimTrailingWhitespace(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.trimLeadingCharacter(java.lang.String, char)",
            "public static java.lang.String trimLeadingCharacter(java.lang.String, char)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.trimTrailingCharacter(java.lang.String, char)",
            "public static java.lang.String trimTrailingCharacter(java.lang.String, char)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.matchesCharacter(java.lang.String, char)",
            "public static boolean matchesCharacter(java.lang.String, char)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.startsWithIgnoreCase(java.lang.String, java.lang.String)",
            "public static boolean startsWithIgnoreCase(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.endsWithIgnoreCase(java.lang.String, java.lang.String)",
            "public static boolean endsWithIgnoreCase(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.substringMatch(java.lang.CharSequence, int, java.lang.CharSequence)",
            "public static boolean substringMatch(java.lang.CharSequence, int, java.lang.CharSequence)"
        ],
        [
            "int",
            "org.springframework.util.StringUtils.countOccurrencesOf(java.lang.String, java.lang.String)",
            "public static int countOccurrencesOf(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String)",
            "public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.delete(java.lang.String, java.lang.String)",
            "public static java.lang.String delete(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.deleteAny(java.lang.String, java.lang.String)",
            "public static java.lang.String deleteAny(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.quote(java.lang.String)",
            "public static java.lang.String quote(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.StringUtils.quoteIfString(java.lang.Object)",
            "public static java.lang.Object quoteIfString(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.unqualify(java.lang.String)",
            "public static java.lang.String unqualify(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.unqualify(java.lang.String, char)",
            "public static java.lang.String unqualify(java.lang.String, char)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.capitalize(java.lang.String)",
            "public static java.lang.String capitalize(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.uncapitalize(java.lang.String)",
            "public static java.lang.String uncapitalize(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.getFilename(java.lang.String)",
            "public static java.lang.String getFilename(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.getFilenameExtension(java.lang.String)",
            "public static java.lang.String getFilenameExtension(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.stripFilenameExtension(java.lang.String)",
            "public static java.lang.String stripFilenameExtension(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.applyRelativePath(java.lang.String, java.lang.String)",
            "public static java.lang.String applyRelativePath(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.cleanPath(java.lang.String)",
            "public static java.lang.String cleanPath(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.StringUtils.pathEquals(java.lang.String, java.lang.String)",
            "public static boolean pathEquals(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.uriDecode(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String uriDecode(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.util.Locale",
            "org.springframework.util.StringUtils.parseLocale(java.lang.String)",
            "public static java.util.Locale parseLocale(java.lang.String)"
        ],
        [
            "java.util.Locale",
            "org.springframework.util.StringUtils.parseLocaleString(java.lang.String)",
            "public static java.util.Locale parseLocaleString(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.toLanguageTag(java.util.Locale)",
            "public static java.lang.String toLanguageTag(java.util.Locale)"
        ],
        [
            "java.util.TimeZone",
            "org.springframework.util.StringUtils.parseTimeZoneString(java.lang.String)",
            "public static java.util.TimeZone parseTimeZoneString(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.toStringArray(java.util.Collection<java.lang.String>)",
            "public static java.lang.String[] toStringArray(java.util.Collection<java.lang.String>)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.toStringArray(java.util.Enumeration<java.lang.String>)",
            "public static java.lang.String[] toStringArray(java.util.Enumeration<java.lang.String>)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.addStringToArray(java.lang.String[], java.lang.String)",
            "public static java.lang.String[] addStringToArray(java.lang.String[], java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.concatenateStringArrays(java.lang.String[], java.lang.String[])",
            "public static java.lang.String[] concatenateStringArrays(java.lang.String[], java.lang.String[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.mergeStringArrays(java.lang.String[], java.lang.String[])",
            "public static java.lang.String[] mergeStringArrays(java.lang.String[], java.lang.String[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.sortStringArray(java.lang.String[])",
            "public static java.lang.String[] sortStringArray(java.lang.String[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.trimArrayElements(java.lang.String[])",
            "public static java.lang.String[] trimArrayElements(java.lang.String[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.removeDuplicateStrings(java.lang.String[])",
            "public static java.lang.String[] removeDuplicateStrings(java.lang.String[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.split(java.lang.String, java.lang.String)",
            "public static java.lang.String[] split(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Properties",
            "org.springframework.util.StringUtils.splitArrayElementsIntoProperties(java.lang.String[], java.lang.String)",
            "public static java.util.Properties splitArrayElementsIntoProperties(java.lang.String[], java.lang.String)"
        ],
        [
            "java.util.Properties",
            "org.springframework.util.StringUtils.splitArrayElementsIntoProperties(java.lang.String[], java.lang.String, java.lang.String)",
            "public static java.util.Properties splitArrayElementsIntoProperties(java.lang.String[], java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.tokenizeToStringArray(java.lang.String, java.lang.String)",
            "public static java.lang.String[] tokenizeToStringArray(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.tokenizeToStringArray(java.lang.String, java.lang.String, boolean, boolean)",
            "public static java.lang.String[] tokenizeToStringArray(java.lang.String, java.lang.String, boolean, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.delimitedListToStringArray(java.lang.String, java.lang.String)",
            "public static java.lang.String[] delimitedListToStringArray(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.delimitedListToStringArray(java.lang.String, java.lang.String, java.lang.String)",
            "public static java.lang.String[] delimitedListToStringArray(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.util.StringUtils.commaDelimitedListToStringArray(java.lang.String)",
            "public static java.lang.String[] commaDelimitedListToStringArray(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.util.StringUtils.commaDelimitedListToSet(java.lang.String)",
            "public static java.util.Set<java.lang.String> commaDelimitedListToSet(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.collectionToDelimitedString(java.util.Collection<?>, java.lang.String, java.lang.String, java.lang.String)",
            "public static java.lang.String collectionToDelimitedString(java.util.Collection<?>, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.collectionToDelimitedString(java.util.Collection<?>, java.lang.String)",
            "public static java.lang.String collectionToDelimitedString(java.util.Collection<?>, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.collectionToCommaDelimitedString(java.util.Collection<?>)",
            "public static java.lang.String collectionToCommaDelimitedString(java.util.Collection<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.arrayToDelimitedString(java.lang.Object[], java.lang.String)",
            "public static java.lang.String arrayToDelimitedString(java.lang.Object[], java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.StringUtils.arrayToCommaDelimitedString(java.lang.Object[])",
            "public static java.lang.String arrayToCommaDelimitedString(java.lang.Object[])"
        ],
        [
            "org.springframework.util.SystemPropertyUtils$SystemPropertyPlaceholderResolver",
            "org.springframework.util.SystemPropertyUtils$SystemPropertyPlaceholderResolver(java.lang.String)",
            "public org.springframework.util.SystemPropertyUtils$SystemPropertyPlaceholderResolver(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.SystemPropertyUtils$SystemPropertyPlaceholderResolver.resolvePlaceholder(java.lang.String)",
            "public java.lang.String resolvePlaceholder(java.lang.String)"
        ],
        [
            "org.springframework.util.SystemPropertyUtils",
            "org.springframework.util.SystemPropertyUtils()",
            "public org.springframework.util.SystemPropertyUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.SystemPropertyUtils.resolvePlaceholders(java.lang.String)",
            "public static java.lang.String resolvePlaceholders(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.SystemPropertyUtils.resolvePlaceholders(java.lang.String, boolean)",
            "public static java.lang.String resolvePlaceholders(java.lang.String, boolean)"
        ],
        [
            "org.springframework.util.TypeUtils",
            "org.springframework.util.TypeUtils()",
            "public org.springframework.util.TypeUtils()"
        ],
        [
            "boolean",
            "org.springframework.util.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type)",
            "public static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type)"
        ],
        [
            "boolean",
            "org.springframework.util.TypeUtils.isAssignableBound(java.lang.reflect.Type, java.lang.reflect.Type)",
            "public static boolean isAssignableBound(java.lang.reflect.Type, java.lang.reflect.Type)"
        ],
        [
            "void",
            "org.springframework.util.UpdateMessageDigestInputStream.updateMessageDigest(java.security.MessageDigest)",
            "public void updateMessageDigest(java.security.MessageDigest) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.util.UpdateMessageDigestInputStream.updateMessageDigest(java.security.MessageDigest, int)",
            "public void updateMessageDigest(java.security.MessageDigest, int) throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.util.backoff.ExponentialBackOff$ExponentialBackOffExecution.nextBackOff()",
            "public long nextBackOff()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.backoff.ExponentialBackOff$ExponentialBackOffExecution.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.backoff.ExponentialBackOff",
            "org.springframework.util.backoff.ExponentialBackOff()",
            "public org.springframework.util.backoff.ExponentialBackOff()"
        ],
        [
            "org.springframework.util.backoff.ExponentialBackOff",
            "org.springframework.util.backoff.ExponentialBackOff(long, double)",
            "public org.springframework.util.backoff.ExponentialBackOff(long, double)"
        ],
        [
            "void",
            "org.springframework.util.backoff.ExponentialBackOff.setInitialInterval(long)",
            "public void setInitialInterval(long)"
        ],
        [
            "long",
            "org.springframework.util.backoff.ExponentialBackOff.getInitialInterval()",
            "public long getInitialInterval()"
        ],
        [
            "void",
            "org.springframework.util.backoff.ExponentialBackOff.setMultiplier(double)",
            "public void setMultiplier(double)"
        ],
        [
            "double",
            "org.springframework.util.backoff.ExponentialBackOff.getMultiplier()",
            "public double getMultiplier()"
        ],
        [
            "void",
            "org.springframework.util.backoff.ExponentialBackOff.setMaxInterval(long)",
            "public void setMaxInterval(long)"
        ],
        [
            "long",
            "org.springframework.util.backoff.ExponentialBackOff.getMaxInterval()",
            "public long getMaxInterval()"
        ],
        [
            "void",
            "org.springframework.util.backoff.ExponentialBackOff.setMaxElapsedTime(long)",
            "public void setMaxElapsedTime(long)"
        ],
        [
            "long",
            "org.springframework.util.backoff.ExponentialBackOff.getMaxElapsedTime()",
            "public long getMaxElapsedTime()"
        ],
        [
            "org.springframework.util.backoff.BackOffExecution",
            "org.springframework.util.backoff.ExponentialBackOff.start()",
            "public org.springframework.util.backoff.BackOffExecution start()"
        ],
        [
            "long",
            "org.springframework.util.backoff.FixedBackOff$FixedBackOffExecution.nextBackOff()",
            "public long nextBackOff()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.backoff.FixedBackOff$FixedBackOffExecution.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.backoff.FixedBackOff",
            "org.springframework.util.backoff.FixedBackOff()",
            "public org.springframework.util.backoff.FixedBackOff()"
        ],
        [
            "org.springframework.util.backoff.FixedBackOff",
            "org.springframework.util.backoff.FixedBackOff(long, long)",
            "public org.springframework.util.backoff.FixedBackOff(long, long)"
        ],
        [
            "void",
            "org.springframework.util.backoff.FixedBackOff.setInterval(long)",
            "public void setInterval(long)"
        ],
        [
            "long",
            "org.springframework.util.backoff.FixedBackOff.getInterval()",
            "public long getInterval()"
        ],
        [
            "void",
            "org.springframework.util.backoff.FixedBackOff.setMaxAttempts(long)",
            "public void setMaxAttempts(long)"
        ],
        [
            "long",
            "org.springframework.util.backoff.FixedBackOff.getMaxAttempts()",
            "public long getMaxAttempts()"
        ],
        [
            "org.springframework.util.backoff.BackOffExecution",
            "org.springframework.util.backoff.FixedBackOff.start()",
            "public org.springframework.util.backoff.BackOffExecution start()"
        ],
        [
            "org.springframework.util.comparator.BooleanComparator",
            "org.springframework.util.comparator.BooleanComparator(boolean)",
            "public org.springframework.util.comparator.BooleanComparator(boolean)"
        ],
        [
            "int",
            "org.springframework.util.comparator.BooleanComparator.compare(java.lang.Boolean, java.lang.Boolean)",
            "public int compare(java.lang.Boolean, java.lang.Boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.comparator.BooleanComparator.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.comparator.BooleanComparator.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.comparator.BooleanComparator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.util.comparator.BooleanComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.util.comparator.ComparableComparator",
            "org.springframework.util.comparator.ComparableComparator()",
            "public org.springframework.util.comparator.ComparableComparator()"
        ],
        [
            "int",
            "org.springframework.util.comparator.ComparableComparator.compare(T, T)",
            "public int compare(T, T)"
        ],
        [
            "int",
            "org.springframework.util.comparator.ComparableComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.util.comparator.Comparators",
            "org.springframework.util.comparator.Comparators()",
            "public org.springframework.util.comparator.Comparators()"
        ],
        [
            "<T> java.util.Comparator<T>",
            "org.springframework.util.comparator.Comparators.comparable()",
            "public static <T> java.util.Comparator<T> comparable()"
        ],
        [
            "<T> java.util.Comparator<T>",
            "org.springframework.util.comparator.Comparators.nullsLow()",
            "public static <T> java.util.Comparator<T> nullsLow()"
        ],
        [
            "<T> java.util.Comparator<T>",
            "org.springframework.util.comparator.Comparators.nullsLow(java.util.Comparator<T>)",
            "public static <T> java.util.Comparator<T> nullsLow(java.util.Comparator<T>)"
        ],
        [
            "<T> java.util.Comparator<T>",
            "org.springframework.util.comparator.Comparators.nullsHigh()",
            "public static <T> java.util.Comparator<T> nullsHigh()"
        ],
        [
            "<T> java.util.Comparator<T>",
            "org.springframework.util.comparator.Comparators.nullsHigh(java.util.Comparator<T>)",
            "public static <T> java.util.Comparator<T> nullsHigh(java.util.Comparator<T>)"
        ],
        [
            "org.springframework.util.comparator.CompoundComparator",
            "org.springframework.util.comparator.CompoundComparator()",
            "public org.springframework.util.comparator.CompoundComparator()"
        ],
        [
            "org.springframework.util.comparator.CompoundComparator",
            "org.springframework.util.comparator.CompoundComparator(java.util.Comparator...)",
            "public org.springframework.util.comparator.CompoundComparator(java.util.Comparator...)"
        ],
        [
            "void",
            "org.springframework.util.comparator.CompoundComparator.addComparator(java.util.Comparator<? extends T>)",
            "public void addComparator(java.util.Comparator<? extends T>)"
        ],
        [
            "void",
            "org.springframework.util.comparator.CompoundComparator.addComparator(java.util.Comparator<? extends T>, boolean)",
            "public void addComparator(java.util.Comparator<? extends T>, boolean)"
        ],
        [
            "void",
            "org.springframework.util.comparator.CompoundComparator.setComparator(int, java.util.Comparator<? extends T>)",
            "public void setComparator(int, java.util.Comparator<? extends T>)"
        ],
        [
            "void",
            "org.springframework.util.comparator.CompoundComparator.setComparator(int, java.util.Comparator<T>, boolean)",
            "public void setComparator(int, java.util.Comparator<T>, boolean)"
        ],
        [
            "void",
            "org.springframework.util.comparator.CompoundComparator.invertOrder()",
            "public void invertOrder()"
        ],
        [
            "void",
            "org.springframework.util.comparator.CompoundComparator.invertOrder(int)",
            "public void invertOrder(int)"
        ],
        [
            "void",
            "org.springframework.util.comparator.CompoundComparator.setAscendingOrder(int)",
            "public void setAscendingOrder(int)"
        ],
        [
            "void",
            "org.springframework.util.comparator.CompoundComparator.setDescendingOrder(int)",
            "public void setDescendingOrder(int)"
        ],
        [
            "int",
            "org.springframework.util.comparator.CompoundComparator.getComparatorCount()",
            "public int getComparatorCount()"
        ],
        [
            "int",
            "org.springframework.util.comparator.CompoundComparator.compare(T, T)",
            "public int compare(T, T)"
        ],
        [
            "boolean",
            "org.springframework.util.comparator.CompoundComparator.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.comparator.CompoundComparator.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.comparator.CompoundComparator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.comparator.InstanceComparator",
            "org.springframework.util.comparator.InstanceComparator(java.lang.Class<?>...)",
            "public org.springframework.util.comparator.InstanceComparator(java.lang.Class<?>...)"
        ],
        [
            "int",
            "org.springframework.util.comparator.InstanceComparator.compare(T, T)",
            "public int compare(T, T)"
        ],
        [
            "org.springframework.util.comparator.InvertibleComparator",
            "org.springframework.util.comparator.InvertibleComparator(java.util.Comparator<T>)",
            "public org.springframework.util.comparator.InvertibleComparator(java.util.Comparator<T>)"
        ],
        [
            "org.springframework.util.comparator.InvertibleComparator",
            "org.springframework.util.comparator.InvertibleComparator(java.util.Comparator<T>, boolean)",
            "public org.springframework.util.comparator.InvertibleComparator(java.util.Comparator<T>, boolean)"
        ],
        [
            "void",
            "org.springframework.util.comparator.InvertibleComparator.setAscending(boolean)",
            "public void setAscending(boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.comparator.InvertibleComparator.isAscending()",
            "public boolean isAscending()"
        ],
        [
            "void",
            "org.springframework.util.comparator.InvertibleComparator.invertOrder()",
            "public void invertOrder()"
        ],
        [
            "int",
            "org.springframework.util.comparator.InvertibleComparator.compare(T, T)",
            "public int compare(T, T)"
        ],
        [
            "boolean",
            "org.springframework.util.comparator.InvertibleComparator.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.comparator.InvertibleComparator.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.comparator.InvertibleComparator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.comparator.NullSafeComparator",
            "org.springframework.util.comparator.NullSafeComparator(java.util.Comparator<T>, boolean)",
            "public org.springframework.util.comparator.NullSafeComparator(java.util.Comparator<T>, boolean)"
        ],
        [
            "int",
            "org.springframework.util.comparator.NullSafeComparator.compare(T, T)",
            "public int compare(T, T)"
        ],
        [
            "boolean",
            "org.springframework.util.comparator.NullSafeComparator.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.comparator.NullSafeComparator.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.comparator.NullSafeComparator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter(java.util.concurrent.CompletionStage<T>)",
            "public org.springframework.util.concurrent.CompletableToListenableFutureAdapter(java.util.concurrent.CompletionStage<T>)"
        ],
        [
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter(java.util.concurrent.CompletableFuture<T>)",
            "public org.springframework.util.concurrent.CompletableToListenableFutureAdapter(java.util.concurrent.CompletableFuture<T>)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter.addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)",
            "public void addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter.addCallback(org.springframework.util.concurrent.SuccessCallback<? super T>, org.springframework.util.concurrent.FailureCallback)",
            "public void addCallback(org.springframework.util.concurrent.SuccessCallback<? super T>, org.springframework.util.concurrent.FailureCallback)"
        ],
        [
            "java.util.concurrent.CompletableFuture<T>",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter.completable()",
            "public java.util.concurrent.CompletableFuture<T> completable()"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter.cancel(boolean)",
            "public boolean cancel(boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter.isCancelled()",
            "public boolean isCancelled()"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter.isDone()",
            "public boolean isDone()"
        ],
        [
            "T",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter.get()",
            "public T get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"
        ],
        [
            "T",
            "org.springframework.util.concurrent.CompletableToListenableFutureAdapter.get(long, java.util.concurrent.TimeUnit)",
            "public T get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"
        ],
        [
            "org.springframework.util.concurrent.DelegatingCompletableFuture",
            "org.springframework.util.concurrent.DelegatingCompletableFuture(java.util.concurrent.Future<T>)",
            "public org.springframework.util.concurrent.DelegatingCompletableFuture(java.util.concurrent.Future<T>)"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.DelegatingCompletableFuture.cancel(boolean)",
            "public boolean cancel(boolean)"
        ],
        [
            "org.springframework.util.concurrent.FutureAdapter$State[]",
            "org.springframework.util.concurrent.FutureAdapter$State.values()",
            "public static org.springframework.util.concurrent.FutureAdapter$State[] values()"
        ],
        [
            "org.springframework.util.concurrent.FutureAdapter$State",
            "org.springframework.util.concurrent.FutureAdapter$State.valueOf(java.lang.String)",
            "public static org.springframework.util.concurrent.FutureAdapter$State valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.FutureAdapter.cancel(boolean)",
            "public boolean cancel(boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.FutureAdapter.isCancelled()",
            "public boolean isCancelled()"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.FutureAdapter.isDone()",
            "public boolean isDone()"
        ],
        [
            "T",
            "org.springframework.util.concurrent.FutureAdapter.get()",
            "public T get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"
        ],
        [
            "T",
            "org.springframework.util.concurrent.FutureAdapter.get(long, java.util.concurrent.TimeUnit)",
            "public T get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"
        ],
        [
            "java.util.concurrent.CompletableFuture<T>",
            "org.springframework.util.concurrent.ListenableFuture.completable()",
            "public default java.util.concurrent.CompletableFuture<T> completable()"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureAdapter$1.onSuccess(S)",
            "public void onSuccess(S)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureAdapter$1.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureAdapter.addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)",
            "public void addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureAdapter.addCallback(org.springframework.util.concurrent.SuccessCallback<? super T>, org.springframework.util.concurrent.FailureCallback)",
            "public void addCallback(org.springframework.util.concurrent.SuccessCallback<? super T>, org.springframework.util.concurrent.FailureCallback)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry$State[]",
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry$State.values()",
            "public static org.springframework.util.concurrent.ListenableFutureCallbackRegistry$State[] values()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry$State",
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry$State.valueOf(java.lang.String)",
            "public static org.springframework.util.concurrent.ListenableFutureCallbackRegistry$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry",
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry()",
            "public org.springframework.util.concurrent.ListenableFutureCallbackRegistry()"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry.addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)",
            "public void addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry.addSuccessCallback(org.springframework.util.concurrent.SuccessCallback<? super T>)",
            "public void addSuccessCallback(org.springframework.util.concurrent.SuccessCallback<? super T>)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry.addFailureCallback(org.springframework.util.concurrent.FailureCallback)",
            "public void addFailureCallback(org.springframework.util.concurrent.FailureCallback)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry.success(T)",
            "public void success(T)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureCallbackRegistry.failure(java.lang.Throwable)",
            "public void failure(java.lang.Throwable)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFutureTask",
            "org.springframework.util.concurrent.ListenableFutureTask(java.util.concurrent.Callable<T>)",
            "public org.springframework.util.concurrent.ListenableFutureTask(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFutureTask",
            "org.springframework.util.concurrent.ListenableFutureTask(java.lang.Runnable, T)",
            "public org.springframework.util.concurrent.ListenableFutureTask(java.lang.Runnable, T)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureTask.addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)",
            "public void addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.ListenableFutureTask.addCallback(org.springframework.util.concurrent.SuccessCallback<? super T>, org.springframework.util.concurrent.FailureCallback)",
            "public void addCallback(org.springframework.util.concurrent.SuccessCallback<? super T>, org.springframework.util.concurrent.FailureCallback)"
        ],
        [
            "java.util.concurrent.CompletableFuture<T>",
            "org.springframework.util.concurrent.ListenableFutureTask.completable()",
            "public java.util.concurrent.CompletableFuture<T> completable()"
        ],
        [
            "org.springframework.util.concurrent.MonoToListenableFutureAdapter",
            "org.springframework.util.concurrent.MonoToListenableFutureAdapter(reactor.core.publisher.Mono<T>)",
            "public org.springframework.util.concurrent.MonoToListenableFutureAdapter(reactor.core.publisher.Mono<T>)"
        ],
        [
            "org.springframework.util.concurrent.SettableListenableFuture$SettableTask",
            "org.springframework.util.concurrent.SettableListenableFuture$SettableTask()",
            "public org.springframework.util.concurrent.SettableListenableFuture$SettableTask()"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.SettableListenableFuture$SettableTask.setResultValue(T)",
            "public boolean setResultValue(T)"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.SettableListenableFuture$SettableTask.setExceptionResult(java.lang.Throwable)",
            "public boolean setExceptionResult(java.lang.Throwable)"
        ],
        [
            "org.springframework.util.concurrent.SettableListenableFuture",
            "org.springframework.util.concurrent.SettableListenableFuture()",
            "public org.springframework.util.concurrent.SettableListenableFuture()"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.SettableListenableFuture.set(T)",
            "public boolean set(T)"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.SettableListenableFuture.setException(java.lang.Throwable)",
            "public boolean setException(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.SettableListenableFuture.addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)",
            "public void addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super T>)"
        ],
        [
            "void",
            "org.springframework.util.concurrent.SettableListenableFuture.addCallback(org.springframework.util.concurrent.SuccessCallback<? super T>, org.springframework.util.concurrent.FailureCallback)",
            "public void addCallback(org.springframework.util.concurrent.SuccessCallback<? super T>, org.springframework.util.concurrent.FailureCallback)"
        ],
        [
            "java.util.concurrent.CompletableFuture<T>",
            "org.springframework.util.concurrent.SettableListenableFuture.completable()",
            "public java.util.concurrent.CompletableFuture<T> completable()"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.SettableListenableFuture.cancel(boolean)",
            "public boolean cancel(boolean)"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.SettableListenableFuture.isCancelled()",
            "public boolean isCancelled()"
        ],
        [
            "boolean",
            "org.springframework.util.concurrent.SettableListenableFuture.isDone()",
            "public boolean isDone()"
        ],
        [
            "T",
            "org.springframework.util.concurrent.SettableListenableFuture.get()",
            "public T get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"
        ],
        [
            "T",
            "org.springframework.util.concurrent.SettableListenableFuture.get(long, java.util.concurrent.TimeUnit)",
            "public T get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"
        ],
        [
            "org.springframework.util.function.SingletonSupplier",
            "org.springframework.util.function.SingletonSupplier(T, java.util.function.Supplier<? extends T>)",
            "public org.springframework.util.function.SingletonSupplier(T, java.util.function.Supplier<? extends T>)"
        ],
        [
            "org.springframework.util.function.SingletonSupplier",
            "org.springframework.util.function.SingletonSupplier(java.util.function.Supplier<? extends T>, java.util.function.Supplier<? extends T>)",
            "public org.springframework.util.function.SingletonSupplier(java.util.function.Supplier<? extends T>, java.util.function.Supplier<? extends T>)"
        ],
        [
            "T",
            "org.springframework.util.function.SingletonSupplier.get()",
            "public T get()"
        ],
        [
            "T",
            "org.springframework.util.function.SingletonSupplier.obtain()",
            "public T obtain()"
        ],
        [
            "<T> org.springframework.util.function.SingletonSupplier<T>",
            "org.springframework.util.function.SingletonSupplier.of(T)",
            "public static <T> org.springframework.util.function.SingletonSupplier<T> of(T)"
        ],
        [
            "<T> org.springframework.util.function.SingletonSupplier<T>",
            "org.springframework.util.function.SingletonSupplier.ofNullable(T)",
            "public static <T> org.springframework.util.function.SingletonSupplier<T> ofNullable(T)"
        ],
        [
            "<T> org.springframework.util.function.SingletonSupplier<T>",
            "org.springframework.util.function.SingletonSupplier.of(java.util.function.Supplier<T>)",
            "public static <T> org.springframework.util.function.SingletonSupplier<T> of(java.util.function.Supplier<T>)"
        ],
        [
            "<T> org.springframework.util.function.SingletonSupplier<T>",
            "org.springframework.util.function.SingletonSupplier.ofNullable(java.util.function.Supplier<T>)",
            "public static <T> org.springframework.util.function.SingletonSupplier<T> ofNullable(java.util.function.Supplier<T>)"
        ],
        [
            "org.springframework.util.function.SupplierUtils",
            "org.springframework.util.function.SupplierUtils()",
            "public org.springframework.util.function.SupplierUtils()"
        ],
        [
            "<T> T",
            "org.springframework.util.function.SupplierUtils.resolve(java.util.function.Supplier<T>)",
            "public static <T> T resolve(java.util.function.Supplier<T>)"
        ],
        [
            "org.springframework.util.unit.DataSize",
            "org.springframework.util.unit.DataSize.ofBytes(long)",
            "public static org.springframework.util.unit.DataSize ofBytes(long)"
        ],
        [
            "org.springframework.util.unit.DataSize",
            "org.springframework.util.unit.DataSize.ofKilobytes(long)",
            "public static org.springframework.util.unit.DataSize ofKilobytes(long)"
        ],
        [
            "org.springframework.util.unit.DataSize",
            "org.springframework.util.unit.DataSize.ofMegabytes(long)",
            "public static org.springframework.util.unit.DataSize ofMegabytes(long)"
        ],
        [
            "org.springframework.util.unit.DataSize",
            "org.springframework.util.unit.DataSize.ofGigabytes(long)",
            "public static org.springframework.util.unit.DataSize ofGigabytes(long)"
        ],
        [
            "org.springframework.util.unit.DataSize",
            "org.springframework.util.unit.DataSize.ofTerabytes(long)",
            "public static org.springframework.util.unit.DataSize ofTerabytes(long)"
        ],
        [
            "org.springframework.util.unit.DataSize",
            "org.springframework.util.unit.DataSize.of(long, org.springframework.util.unit.DataUnit)",
            "public static org.springframework.util.unit.DataSize of(long, org.springframework.util.unit.DataUnit)"
        ],
        [
            "org.springframework.util.unit.DataSize",
            "org.springframework.util.unit.DataSize.parse(java.lang.CharSequence)",
            "public static org.springframework.util.unit.DataSize parse(java.lang.CharSequence)"
        ],
        [
            "org.springframework.util.unit.DataSize",
            "org.springframework.util.unit.DataSize.parse(java.lang.CharSequence, org.springframework.util.unit.DataUnit)",
            "public static org.springframework.util.unit.DataSize parse(java.lang.CharSequence, org.springframework.util.unit.DataUnit)"
        ],
        [
            "boolean",
            "org.springframework.util.unit.DataSize.isNegative()",
            "public boolean isNegative()"
        ],
        [
            "long",
            "org.springframework.util.unit.DataSize.toBytes()",
            "public long toBytes()"
        ],
        [
            "long",
            "org.springframework.util.unit.DataSize.toKilobytes()",
            "public long toKilobytes()"
        ],
        [
            "long",
            "org.springframework.util.unit.DataSize.toMegabytes()",
            "public long toMegabytes()"
        ],
        [
            "long",
            "org.springframework.util.unit.DataSize.toGigabytes()",
            "public long toGigabytes()"
        ],
        [
            "long",
            "org.springframework.util.unit.DataSize.toTerabytes()",
            "public long toTerabytes()"
        ],
        [
            "int",
            "org.springframework.util.unit.DataSize.compareTo(org.springframework.util.unit.DataSize)",
            "public int compareTo(org.springframework.util.unit.DataSize)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.unit.DataSize.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.util.unit.DataSize.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.util.unit.DataSize.hashCode()",
            "public int hashCode()"
        ],
        [
            "int",
            "org.springframework.util.unit.DataSize.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.util.unit.DataUnit[]",
            "org.springframework.util.unit.DataUnit.values()",
            "public static org.springframework.util.unit.DataUnit[] values()"
        ],
        [
            "org.springframework.util.unit.DataUnit",
            "org.springframework.util.unit.DataUnit.valueOf(java.lang.String)",
            "public static org.springframework.util.unit.DataUnit valueOf(java.lang.String)"
        ],
        [
            "org.springframework.util.unit.DataUnit",
            "org.springframework.util.unit.DataUnit.fromSuffix(java.lang.String)",
            "public static org.springframework.util.unit.DataUnit fromSuffix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.startDocument()",
            "public final void startDocument() throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.endDocument()",
            "public final void endDocument() throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.startPrefixMapping(java.lang.String, java.lang.String)",
            "public final void startPrefixMapping(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.endPrefixMapping(java.lang.String)",
            "public final void endPrefixMapping(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "public final void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.endElement(java.lang.String, java.lang.String, java.lang.String)",
            "public final void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.characters(char[], int, int)",
            "public final void characters(char[], int, int) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.ignorableWhitespace(char[], int, int)",
            "public final void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.processingInstruction(java.lang.String, java.lang.String)",
            "public final void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.skippedEntity(java.lang.String)",
            "public final void skippedEntity(java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "public final void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.endDTD()",
            "public final void endDTD() throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.startCDATA()",
            "public final void startCDATA() throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.endCDATA()",
            "public final void endCDATA() throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.comment(char[], int, int)",
            "public final void comment(char[], int, int) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.startEntity(java.lang.String)",
            "public void startEntity(java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxHandler.endEntity(java.lang.String)",
            "public void endEntity(java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator",
            "org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator(javax.xml.stream.Location)",
            "public org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator(javax.xml.stream.Location)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator.getPublicId()",
            "public java.lang.String getPublicId()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator.getSystemId()",
            "public java.lang.String getSystemId()"
        ],
        [
            "int",
            "org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator.getLineNumber()",
            "public int getLineNumber()"
        ],
        [
            "int",
            "org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator.getColumnNumber()",
            "public int getColumnNumber()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractStaxXMLReader.getFeature(java.lang.String)",
            "public boolean getFeature(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxXMLReader.setFeature(java.lang.String, boolean)",
            "public void setFeature(java.lang.String, boolean) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxXMLReader.parse(org.xml.sax.InputSource)",
            "public final void parse(org.xml.sax.InputSource) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractStaxXMLReader.parse(java.lang.String)",
            "public final void parse(java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.xml.AbstractXMLEventReader.next()",
            "public java.lang.Object next()"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLEventReader.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.xml.AbstractXMLEventReader.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLEventReader.close()",
            "public void close()"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLReader.setContentHandler(org.xml.sax.ContentHandler)",
            "public void setContentHandler(org.xml.sax.ContentHandler)"
        ],
        [
            "org.xml.sax.ContentHandler",
            "org.springframework.util.xml.AbstractXMLReader.getContentHandler()",
            "public org.xml.sax.ContentHandler getContentHandler()"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLReader.setDTDHandler(org.xml.sax.DTDHandler)",
            "public void setDTDHandler(org.xml.sax.DTDHandler)"
        ],
        [
            "org.xml.sax.DTDHandler",
            "org.springframework.util.xml.AbstractXMLReader.getDTDHandler()",
            "public org.xml.sax.DTDHandler getDTDHandler()"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLReader.setEntityResolver(org.xml.sax.EntityResolver)",
            "public void setEntityResolver(org.xml.sax.EntityResolver)"
        ],
        [
            "org.xml.sax.EntityResolver",
            "org.springframework.util.xml.AbstractXMLReader.getEntityResolver()",
            "public org.xml.sax.EntityResolver getEntityResolver()"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLReader.setErrorHandler(org.xml.sax.ErrorHandler)",
            "public void setErrorHandler(org.xml.sax.ErrorHandler)"
        ],
        [
            "org.xml.sax.ErrorHandler",
            "org.springframework.util.xml.AbstractXMLReader.getErrorHandler()",
            "public org.xml.sax.ErrorHandler getErrorHandler()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractXMLReader.getFeature(java.lang.String)",
            "public boolean getFeature(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLReader.setFeature(java.lang.String, boolean)",
            "public void setFeature(java.lang.String, boolean) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.xml.AbstractXMLReader.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLReader.setProperty(java.lang.String, java.lang.Object)",
            "public void setProperty(java.lang.String, java.lang.Object) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getElementText()",
            "public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getAttributeLocalName(int)",
            "public java.lang.String getAttributeLocalName(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getAttributeNamespace(int)",
            "public java.lang.String getAttributeNamespace(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getAttributePrefix(int)",
            "public java.lang.String getAttributePrefix(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getNamespaceURI()",
            "public java.lang.String getNamespaceURI()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getNamespaceURI(java.lang.String)",
            "public java.lang.String getNamespaceURI(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractXMLStreamReader.hasText()",
            "public boolean hasText()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getPrefix()",
            "public java.lang.String getPrefix()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractXMLStreamReader.hasName()",
            "public boolean hasName()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractXMLStreamReader.isWhiteSpace()",
            "public boolean isWhiteSpace()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractXMLStreamReader.isStartElement()",
            "public boolean isStartElement()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractXMLStreamReader.isEndElement()",
            "public boolean isEndElement()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractXMLStreamReader.isCharacters()",
            "public boolean isCharacters()"
        ],
        [
            "int",
            "org.springframework.util.xml.AbstractXMLStreamReader.nextTag()",
            "public int nextTag() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.AbstractXMLStreamReader.require(int, java.lang.String, java.lang.String)",
            "public void require(int, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getAttributeValue(java.lang.String, java.lang.String)",
            "public java.lang.String getAttributeValue(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.util.xml.AbstractXMLStreamReader.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.AbstractXMLStreamReader.getLocalName()",
            "public java.lang.String getLocalName()"
        ],
        [
            "char[]",
            "org.springframework.util.xml.AbstractXMLStreamReader.getTextCharacters()",
            "public char[] getTextCharacters()"
        ],
        [
            "int",
            "org.springframework.util.xml.AbstractXMLStreamReader.getTextCharacters(int, char[], int, int)",
            "public int getTextCharacters(int, char[], int, int)"
        ],
        [
            "int",
            "org.springframework.util.xml.AbstractXMLStreamReader.getTextLength()",
            "public int getTextLength()"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.endElement(java.lang.String, java.lang.String, java.lang.String)",
            "public void endElement(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.characters(char[], int, int)",
            "public void characters(char[], int, int)"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.processingInstruction(java.lang.String, java.lang.String)",
            "public void processingInstruction(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.setDocumentLocator(org.xml.sax.Locator)",
            "public void setDocumentLocator(org.xml.sax.Locator)"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.startDocument()",
            "public void startDocument()"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.endDocument()",
            "public void endDocument()"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.startPrefixMapping(java.lang.String, java.lang.String)",
            "public void startPrefixMapping(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.endPrefixMapping(java.lang.String)",
            "public void endPrefixMapping(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.ignorableWhitespace(char[], int, int)",
            "public void ignorableWhitespace(char[], int, int)"
        ],
        [
            "void",
            "org.springframework.util.xml.DomContentHandler.skippedEntity(java.lang.String)",
            "public void skippedEntity(java.lang.String)"
        ],
        [
            "org.springframework.util.xml.DomUtils",
            "org.springframework.util.xml.DomUtils()",
            "public org.springframework.util.xml.DomUtils()"
        ],
        [
            "java.util.List<org.w3c.dom.Element>",
            "org.springframework.util.xml.DomUtils.getChildElementsByTagName(org.w3c.dom.Element, java.lang.String...)",
            "public static java.util.List<org.w3c.dom.Element> getChildElementsByTagName(org.w3c.dom.Element, java.lang.String...)"
        ],
        [
            "java.util.List<org.w3c.dom.Element>",
            "org.springframework.util.xml.DomUtils.getChildElementsByTagName(org.w3c.dom.Element, java.lang.String)",
            "public static java.util.List<org.w3c.dom.Element> getChildElementsByTagName(org.w3c.dom.Element, java.lang.String)"
        ],
        [
            "org.w3c.dom.Element",
            "org.springframework.util.xml.DomUtils.getChildElementByTagName(org.w3c.dom.Element, java.lang.String)",
            "public static org.w3c.dom.Element getChildElementByTagName(org.w3c.dom.Element, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.DomUtils.getChildElementValueByTagName(org.w3c.dom.Element, java.lang.String)",
            "public static java.lang.String getChildElementValueByTagName(org.w3c.dom.Element, java.lang.String)"
        ],
        [
            "java.util.List<org.w3c.dom.Element>",
            "org.springframework.util.xml.DomUtils.getChildElements(org.w3c.dom.Element)",
            "public static java.util.List<org.w3c.dom.Element> getChildElements(org.w3c.dom.Element)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.DomUtils.getTextValue(org.w3c.dom.Element)",
            "public static java.lang.String getTextValue(org.w3c.dom.Element)"
        ],
        [
            "boolean",
            "org.springframework.util.xml.DomUtils.nodeNameEquals(org.w3c.dom.Node, java.lang.String)",
            "public static boolean nodeNameEquals(org.w3c.dom.Node, java.lang.String)"
        ],
        [
            "org.xml.sax.ContentHandler",
            "org.springframework.util.xml.DomUtils.createContentHandler(org.w3c.dom.Node)",
            "public static org.xml.sax.ContentHandler createContentHandler(org.w3c.dom.Node)"
        ],
        [
            "org.springframework.util.xml.ListBasedXMLEventReader",
            "org.springframework.util.xml.ListBasedXMLEventReader(java.util.List<javax.xml.stream.events.XMLEvent>)",
            "public org.springframework.util.xml.ListBasedXMLEventReader(java.util.List<javax.xml.stream.events.XMLEvent>)"
        ],
        [
            "boolean",
            "org.springframework.util.xml.ListBasedXMLEventReader.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "javax.xml.stream.events.XMLEvent",
            "org.springframework.util.xml.ListBasedXMLEventReader.nextEvent()",
            "public javax.xml.stream.events.XMLEvent nextEvent()"
        ],
        [
            "javax.xml.stream.events.XMLEvent",
            "org.springframework.util.xml.ListBasedXMLEventReader.peek()",
            "public javax.xml.stream.events.XMLEvent peek()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.ListBasedXMLEventReader.getElementText()",
            "public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "javax.xml.stream.events.XMLEvent",
            "org.springframework.util.xml.ListBasedXMLEventReader.nextTag()",
            "public javax.xml.stream.events.XMLEvent nextTag() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.ListBasedXMLEventReader.close()",
            "public void close()"
        ],
        [
            "org.springframework.util.xml.SimpleNamespaceContext",
            "org.springframework.util.xml.SimpleNamespaceContext()",
            "public org.springframework.util.xml.SimpleNamespaceContext()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.SimpleNamespaceContext.getNamespaceURI(java.lang.String)",
            "public java.lang.String getNamespaceURI(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.SimpleNamespaceContext.getPrefix(java.lang.String)",
            "public java.lang.String getPrefix(java.lang.String)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.util.xml.SimpleNamespaceContext.getPrefixes(java.lang.String)",
            "public java.util.Iterator<java.lang.String> getPrefixes(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleNamespaceContext.setBindings(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setBindings(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleNamespaceContext.bindDefaultNamespaceUri(java.lang.String)",
            "public void bindDefaultNamespaceUri(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleNamespaceContext.bindNamespaceUri(java.lang.String, java.lang.String)",
            "public void bindNamespaceUri(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleNamespaceContext.removeBinding(java.lang.String)",
            "public void removeBinding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleNamespaceContext.clear()",
            "public void clear()"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.util.xml.SimpleNamespaceContext.getBoundPrefixes()",
            "public java.util.Iterator<java.lang.String> getBoundPrefixes()"
        ],
        [
            "org.springframework.util.xml.SimpleSaxErrorHandler",
            "org.springframework.util.xml.SimpleSaxErrorHandler(org.apache.commons.logging.Log)",
            "public org.springframework.util.xml.SimpleSaxErrorHandler(org.apache.commons.logging.Log)"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleSaxErrorHandler.warning(org.xml.sax.SAXParseException)",
            "public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleSaxErrorHandler.error(org.xml.sax.SAXParseException)",
            "public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleSaxErrorHandler.fatalError(org.xml.sax.SAXParseException)",
            "public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"
        ],
        [
            "org.springframework.util.xml.SimpleTransformErrorListener",
            "org.springframework.util.xml.SimpleTransformErrorListener(org.apache.commons.logging.Log)",
            "public org.springframework.util.xml.SimpleTransformErrorListener(org.apache.commons.logging.Log)"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleTransformErrorListener.warning(javax.xml.transform.TransformerException)",
            "public void warning(javax.xml.transform.TransformerException) throws javax.xml.transform.TransformerException"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleTransformErrorListener.error(javax.xml.transform.TransformerException)",
            "public void error(javax.xml.transform.TransformerException) throws javax.xml.transform.TransformerException"
        ],
        [
            "void",
            "org.springframework.util.xml.SimpleTransformErrorListener.fatalError(javax.xml.transform.TransformerException)",
            "public void fatalError(javax.xml.transform.TransformerException) throws javax.xml.transform.TransformerException"
        ],
        [
            "org.springframework.util.xml.StaxEventHandler$LocatorLocationAdapter",
            "org.springframework.util.xml.StaxEventHandler$LocatorLocationAdapter(org.xml.sax.Locator)",
            "public org.springframework.util.xml.StaxEventHandler$LocatorLocationAdapter(org.xml.sax.Locator)"
        ],
        [
            "int",
            "org.springframework.util.xml.StaxEventHandler$LocatorLocationAdapter.getLineNumber()",
            "public int getLineNumber()"
        ],
        [
            "int",
            "org.springframework.util.xml.StaxEventHandler$LocatorLocationAdapter.getColumnNumber()",
            "public int getColumnNumber()"
        ],
        [
            "int",
            "org.springframework.util.xml.StaxEventHandler$LocatorLocationAdapter.getCharacterOffset()",
            "public int getCharacterOffset()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxEventHandler$LocatorLocationAdapter.getPublicId()",
            "public java.lang.String getPublicId()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxEventHandler$LocatorLocationAdapter.getSystemId()",
            "public java.lang.String getSystemId()"
        ],
        [
            "org.springframework.util.xml.StaxEventHandler",
            "org.springframework.util.xml.StaxEventHandler(javax.xml.stream.XMLEventWriter)",
            "public org.springframework.util.xml.StaxEventHandler(javax.xml.stream.XMLEventWriter)"
        ],
        [
            "org.springframework.util.xml.StaxEventHandler",
            "org.springframework.util.xml.StaxEventHandler(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)",
            "public org.springframework.util.xml.StaxEventHandler(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)"
        ],
        [
            "void",
            "org.springframework.util.xml.StaxEventHandler.setDocumentLocator(org.xml.sax.Locator)",
            "public void setDocumentLocator(org.xml.sax.Locator)"
        ],
        [
            "int",
            "org.springframework.util.xml.StaxEventXMLReader$1.getColumnNumber()",
            "public int getColumnNumber()"
        ],
        [
            "int",
            "org.springframework.util.xml.StaxEventXMLReader$1.getLineNumber()",
            "public int getLineNumber()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxEventXMLReader$1.getPublicId()",
            "public java.lang.String getPublicId()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxEventXMLReader$1.getSystemId()",
            "public java.lang.String getSystemId()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxEventXMLReader$1.getXMLVersion()",
            "public java.lang.String getXMLVersion()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxEventXMLReader$1.getEncoding()",
            "public java.lang.String getEncoding()"
        ],
        [
            "org.springframework.util.xml.StaxResult",
            "org.springframework.util.xml.StaxResult(javax.xml.stream.XMLEventWriter)",
            "public org.springframework.util.xml.StaxResult(javax.xml.stream.XMLEventWriter)"
        ],
        [
            "org.springframework.util.xml.StaxResult",
            "org.springframework.util.xml.StaxResult(javax.xml.stream.XMLStreamWriter)",
            "public org.springframework.util.xml.StaxResult(javax.xml.stream.XMLStreamWriter)"
        ],
        [
            "javax.xml.stream.XMLEventWriter",
            "org.springframework.util.xml.StaxResult.getXMLEventWriter()",
            "public javax.xml.stream.XMLEventWriter getXMLEventWriter()"
        ],
        [
            "javax.xml.stream.XMLStreamWriter",
            "org.springframework.util.xml.StaxResult.getXMLStreamWriter()",
            "public javax.xml.stream.XMLStreamWriter getXMLStreamWriter()"
        ],
        [
            "void",
            "org.springframework.util.xml.StaxResult.setHandler(org.xml.sax.ContentHandler)",
            "public void setHandler(org.xml.sax.ContentHandler)"
        ],
        [
            "void",
            "org.springframework.util.xml.StaxResult.setLexicalHandler(org.xml.sax.ext.LexicalHandler)",
            "public void setLexicalHandler(org.xml.sax.ext.LexicalHandler)"
        ],
        [
            "void",
            "org.springframework.util.xml.StaxSource.setInputSource(org.xml.sax.InputSource)",
            "public void setInputSource(org.xml.sax.InputSource)"
        ],
        [
            "void",
            "org.springframework.util.xml.StaxSource.setXMLReader(org.xml.sax.XMLReader)",
            "public void setXMLReader(org.xml.sax.XMLReader)"
        ],
        [
            "org.springframework.util.xml.StaxStreamHandler",
            "org.springframework.util.xml.StaxStreamHandler(javax.xml.stream.XMLStreamWriter)",
            "public org.springframework.util.xml.StaxStreamHandler(javax.xml.stream.XMLStreamWriter)"
        ],
        [
            "void",
            "org.springframework.util.xml.StaxStreamHandler.setDocumentLocator(org.xml.sax.Locator)",
            "public void setDocumentLocator(org.xml.sax.Locator)"
        ],
        [
            "void",
            "org.springframework.util.xml.StaxStreamHandler.startEntity(java.lang.String)",
            "public void startEntity(java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "void",
            "org.springframework.util.xml.StaxStreamHandler.endEntity(java.lang.String)",
            "public void endEntity(java.lang.String) throws org.xml.sax.SAXException"
        ],
        [
            "int",
            "org.springframework.util.xml.StaxStreamXMLReader$1.getColumnNumber()",
            "public int getColumnNumber()"
        ],
        [
            "int",
            "org.springframework.util.xml.StaxStreamXMLReader$1.getLineNumber()",
            "public int getLineNumber()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxStreamXMLReader$1.getPublicId()",
            "public java.lang.String getPublicId()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxStreamXMLReader$1.getSystemId()",
            "public java.lang.String getSystemId()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxStreamXMLReader$1.getXMLVersion()",
            "public java.lang.String getXMLVersion()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.StaxStreamXMLReader$1.getEncoding()",
            "public java.lang.String getEncoding()"
        ],
        [
            "org.springframework.util.xml.StaxUtils",
            "org.springframework.util.xml.StaxUtils()",
            "public org.springframework.util.xml.StaxUtils()"
        ],
        [
            "javax.xml.stream.XMLInputFactory",
            "org.springframework.util.xml.StaxUtils.createDefensiveInputFactory()",
            "public static javax.xml.stream.XMLInputFactory createDefensiveInputFactory()"
        ],
        [
            "<T extends javax.xml.stream.XMLInputFactory> T",
            "org.springframework.util.xml.StaxUtils.createDefensiveInputFactory(java.util.function.Supplier<T>)",
            "public static <T extends javax.xml.stream.XMLInputFactory> T createDefensiveInputFactory(java.util.function.Supplier<T>)"
        ],
        [
            "javax.xml.transform.Source",
            "org.springframework.util.xml.StaxUtils.createStaxSource(javax.xml.stream.XMLStreamReader)",
            "public static javax.xml.transform.Source createStaxSource(javax.xml.stream.XMLStreamReader)"
        ],
        [
            "javax.xml.transform.Source",
            "org.springframework.util.xml.StaxUtils.createStaxSource(javax.xml.stream.XMLEventReader)",
            "public static javax.xml.transform.Source createStaxSource(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "javax.xml.transform.Source",
            "org.springframework.util.xml.StaxUtils.createCustomStaxSource(javax.xml.stream.XMLStreamReader)",
            "public static javax.xml.transform.Source createCustomStaxSource(javax.xml.stream.XMLStreamReader)"
        ],
        [
            "javax.xml.transform.Source",
            "org.springframework.util.xml.StaxUtils.createCustomStaxSource(javax.xml.stream.XMLEventReader)",
            "public static javax.xml.transform.Source createCustomStaxSource(javax.xml.stream.XMLEventReader)"
        ],
        [
            "boolean",
            "org.springframework.util.xml.StaxUtils.isStaxSource(javax.xml.transform.Source)",
            "public static boolean isStaxSource(javax.xml.transform.Source)"
        ],
        [
            "javax.xml.stream.XMLStreamReader",
            "org.springframework.util.xml.StaxUtils.getXMLStreamReader(javax.xml.transform.Source)",
            "public static javax.xml.stream.XMLStreamReader getXMLStreamReader(javax.xml.transform.Source)"
        ],
        [
            "javax.xml.stream.XMLEventReader",
            "org.springframework.util.xml.StaxUtils.getXMLEventReader(javax.xml.transform.Source)",
            "public static javax.xml.stream.XMLEventReader getXMLEventReader(javax.xml.transform.Source)"
        ],
        [
            "javax.xml.transform.Result",
            "org.springframework.util.xml.StaxUtils.createStaxResult(javax.xml.stream.XMLStreamWriter)",
            "public static javax.xml.transform.Result createStaxResult(javax.xml.stream.XMLStreamWriter)"
        ],
        [
            "javax.xml.transform.Result",
            "org.springframework.util.xml.StaxUtils.createStaxResult(javax.xml.stream.XMLEventWriter)",
            "public static javax.xml.transform.Result createStaxResult(javax.xml.stream.XMLEventWriter)"
        ],
        [
            "javax.xml.transform.Result",
            "org.springframework.util.xml.StaxUtils.createCustomStaxResult(javax.xml.stream.XMLStreamWriter)",
            "public static javax.xml.transform.Result createCustomStaxResult(javax.xml.stream.XMLStreamWriter)"
        ],
        [
            "javax.xml.transform.Result",
            "org.springframework.util.xml.StaxUtils.createCustomStaxResult(javax.xml.stream.XMLEventWriter)",
            "public static javax.xml.transform.Result createCustomStaxResult(javax.xml.stream.XMLEventWriter)"
        ],
        [
            "boolean",
            "org.springframework.util.xml.StaxUtils.isStaxResult(javax.xml.transform.Result)",
            "public static boolean isStaxResult(javax.xml.transform.Result)"
        ],
        [
            "javax.xml.stream.XMLStreamWriter",
            "org.springframework.util.xml.StaxUtils.getXMLStreamWriter(javax.xml.transform.Result)",
            "public static javax.xml.stream.XMLStreamWriter getXMLStreamWriter(javax.xml.transform.Result)"
        ],
        [
            "javax.xml.stream.XMLEventWriter",
            "org.springframework.util.xml.StaxUtils.getXMLEventWriter(javax.xml.transform.Result)",
            "public static javax.xml.stream.XMLEventWriter getXMLEventWriter(javax.xml.transform.Result)"
        ],
        [
            "javax.xml.stream.XMLEventReader",
            "org.springframework.util.xml.StaxUtils.createXMLEventReader(java.util.List<javax.xml.stream.events.XMLEvent>)",
            "public static javax.xml.stream.XMLEventReader createXMLEventReader(java.util.List<javax.xml.stream.events.XMLEvent>)"
        ],
        [
            "org.xml.sax.ContentHandler",
            "org.springframework.util.xml.StaxUtils.createContentHandler(javax.xml.stream.XMLStreamWriter)",
            "public static org.xml.sax.ContentHandler createContentHandler(javax.xml.stream.XMLStreamWriter)"
        ],
        [
            "org.xml.sax.ContentHandler",
            "org.springframework.util.xml.StaxUtils.createContentHandler(javax.xml.stream.XMLEventWriter)",
            "public static org.xml.sax.ContentHandler createContentHandler(javax.xml.stream.XMLEventWriter)"
        ],
        [
            "org.xml.sax.XMLReader",
            "org.springframework.util.xml.StaxUtils.createXMLReader(javax.xml.stream.XMLStreamReader)",
            "public static org.xml.sax.XMLReader createXMLReader(javax.xml.stream.XMLStreamReader)"
        ],
        [
            "org.xml.sax.XMLReader",
            "org.springframework.util.xml.StaxUtils.createXMLReader(javax.xml.stream.XMLEventReader)",
            "public static org.xml.sax.XMLReader createXMLReader(javax.xml.stream.XMLEventReader)"
        ],
        [
            "javax.xml.stream.XMLStreamReader",
            "org.springframework.util.xml.StaxUtils.createEventStreamReader(javax.xml.stream.XMLEventReader)",
            "public static javax.xml.stream.XMLStreamReader createEventStreamReader(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "javax.xml.stream.XMLStreamWriter",
            "org.springframework.util.xml.StaxUtils.createEventStreamWriter(javax.xml.stream.XMLEventWriter)",
            "public static javax.xml.stream.XMLStreamWriter createEventStreamWriter(javax.xml.stream.XMLEventWriter)"
        ],
        [
            "javax.xml.stream.XMLStreamWriter",
            "org.springframework.util.xml.StaxUtils.createEventStreamWriter(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)",
            "public static javax.xml.stream.XMLStreamWriter createEventStreamWriter(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)"
        ],
        [
            "org.springframework.util.xml.TransformerUtils",
            "org.springframework.util.xml.TransformerUtils()",
            "public org.springframework.util.xml.TransformerUtils()"
        ],
        [
            "void",
            "org.springframework.util.xml.TransformerUtils.enableIndenting(javax.xml.transform.Transformer)",
            "public static void enableIndenting(javax.xml.transform.Transformer)"
        ],
        [
            "void",
            "org.springframework.util.xml.TransformerUtils.enableIndenting(javax.xml.transform.Transformer, int)",
            "public static void enableIndenting(javax.xml.transform.Transformer, int)"
        ],
        [
            "void",
            "org.springframework.util.xml.TransformerUtils.disableIndenting(javax.xml.transform.Transformer)",
            "public static void disableIndenting(javax.xml.transform.Transformer)"
        ],
        [
            "org.springframework.util.xml.XMLEventStreamReader",
            "org.springframework.util.xml.XMLEventStreamReader(javax.xml.stream.XMLEventReader)",
            "public org.springframework.util.xml.XMLEventStreamReader(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "javax.xml.namespace.QName",
            "org.springframework.util.xml.XMLEventStreamReader.getName()",
            "public javax.xml.namespace.QName getName()"
        ],
        [
            "javax.xml.stream.Location",
            "org.springframework.util.xml.XMLEventStreamReader.getLocation()",
            "public javax.xml.stream.Location getLocation()"
        ],
        [
            "int",
            "org.springframework.util.xml.XMLEventStreamReader.getEventType()",
            "public int getEventType()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getVersion()",
            "public java.lang.String getVersion()"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.xml.XMLEventStreamReader.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "boolean",
            "org.springframework.util.xml.XMLEventStreamReader.isStandalone()",
            "public boolean isStandalone()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.XMLEventStreamReader.standaloneSet()",
            "public boolean standaloneSet()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getEncoding()",
            "public java.lang.String getEncoding()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getCharacterEncodingScheme()",
            "public java.lang.String getCharacterEncodingScheme()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getPITarget()",
            "public java.lang.String getPITarget()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getPIData()",
            "public java.lang.String getPIData()"
        ],
        [
            "int",
            "org.springframework.util.xml.XMLEventStreamReader.getTextStart()",
            "public int getTextStart()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getText()",
            "public java.lang.String getText()"
        ],
        [
            "int",
            "org.springframework.util.xml.XMLEventStreamReader.getAttributeCount()",
            "public int getAttributeCount()"
        ],
        [
            "boolean",
            "org.springframework.util.xml.XMLEventStreamReader.isAttributeSpecified(int)",
            "public boolean isAttributeSpecified(int)"
        ],
        [
            "javax.xml.namespace.QName",
            "org.springframework.util.xml.XMLEventStreamReader.getAttributeName(int)",
            "public javax.xml.namespace.QName getAttributeName(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getAttributeType(int)",
            "public java.lang.String getAttributeType(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getAttributeValue(int)",
            "public java.lang.String getAttributeValue(int)"
        ],
        [
            "javax.xml.namespace.NamespaceContext",
            "org.springframework.util.xml.XMLEventStreamReader.getNamespaceContext()",
            "public javax.xml.namespace.NamespaceContext getNamespaceContext()"
        ],
        [
            "int",
            "org.springframework.util.xml.XMLEventStreamReader.getNamespaceCount()",
            "public int getNamespaceCount()"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getNamespacePrefix(int)",
            "public java.lang.String getNamespacePrefix(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamReader.getNamespaceURI(int)",
            "public java.lang.String getNamespaceURI(int)"
        ],
        [
            "int",
            "org.springframework.util.xml.XMLEventStreamReader.next()",
            "public int next() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamReader.close()",
            "public void close() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "org.springframework.util.xml.XMLEventStreamWriter",
            "org.springframework.util.xml.XMLEventStreamWriter(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)",
            "public org.springframework.util.xml.XMLEventStreamWriter(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.setNamespaceContext(javax.xml.namespace.NamespaceContext)",
            "public void setNamespaceContext(javax.xml.namespace.NamespaceContext) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "javax.xml.namespace.NamespaceContext",
            "org.springframework.util.xml.XMLEventStreamWriter.getNamespaceContext()",
            "public javax.xml.namespace.NamespaceContext getNamespaceContext()"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.setPrefix(java.lang.String, java.lang.String)",
            "public void setPrefix(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "java.lang.String",
            "org.springframework.util.xml.XMLEventStreamWriter.getPrefix(java.lang.String)",
            "public java.lang.String getPrefix(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.setDefaultNamespace(java.lang.String)",
            "public void setDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "java.lang.Object",
            "org.springframework.util.xml.XMLEventStreamWriter.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeStartDocument()",
            "public void writeStartDocument() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeStartDocument(java.lang.String)",
            "public void writeStartDocument(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeStartDocument(java.lang.String, java.lang.String)",
            "public void writeStartDocument(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeStartElement(java.lang.String)",
            "public void writeStartElement(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeStartElement(java.lang.String, java.lang.String)",
            "public void writeStartElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeStartElement(java.lang.String, java.lang.String, java.lang.String)",
            "public void writeStartElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeEmptyElement(java.lang.String)",
            "public void writeEmptyElement(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeEmptyElement(java.lang.String, java.lang.String)",
            "public void writeEmptyElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeEmptyElement(java.lang.String, java.lang.String, java.lang.String)",
            "public void writeEmptyElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeEndElement()",
            "public void writeEndElement() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeAttribute(java.lang.String, java.lang.String)",
            "public void writeAttribute(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String)",
            "public void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
            "public void writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeNamespace(java.lang.String, java.lang.String)",
            "public void writeNamespace(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeDefaultNamespace(java.lang.String)",
            "public void writeDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeCharacters(java.lang.String)",
            "public void writeCharacters(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeCharacters(char[], int, int)",
            "public void writeCharacters(char[], int, int) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeCData(java.lang.String)",
            "public void writeCData(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeComment(java.lang.String)",
            "public void writeComment(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeProcessingInstruction(java.lang.String)",
            "public void writeProcessingInstruction(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeProcessingInstruction(java.lang.String, java.lang.String)",
            "public void writeProcessingInstruction(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeDTD(java.lang.String)",
            "public void writeDTD(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeEntityRef(java.lang.String)",
            "public void writeEntityRef(java.lang.String) throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.writeEndDocument()",
            "public void writeEndDocument() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.flush()",
            "public void flush() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "void",
            "org.springframework.util.xml.XMLEventStreamWriter.close()",
            "public void close() throws javax.xml.stream.XMLStreamException"
        ],
        [
            "org.springframework.util.xml.XmlValidationModeDetector",
            "org.springframework.util.xml.XmlValidationModeDetector()",
            "public org.springframework.util.xml.XmlValidationModeDetector()"
        ],
        [
            "int",
            "org.springframework.util.xml.XmlValidationModeDetector.detectValidationMode(java.io.InputStream)",
            "public int detectValidationMode(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.core.env.PropertyResolverExtensionsKt.get(org.springframework.core.env.PropertyResolver, java.lang.String)",
            "public static final java.lang.String get(org.springframework.core.env.PropertyResolver, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.core.env.PropertyResolverExtensionsKt.getProperty(org.springframework.core.env.PropertyResolver, java.lang.String)",
            "public static final <T> T getProperty(org.springframework.core.env.PropertyResolver, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.core.env.PropertyResolverExtensionsKt.getRequiredProperty(org.springframework.core.env.PropertyResolver, java.lang.String)",
            "public static final <T> T getRequiredProperty(org.springframework.core.env.PropertyResolver, java.lang.String)"
        ],
        [
            "org.springframework.cglib.beans.BeanCopier$Generator",
            "org.springframework.cglib.beans.BeanCopier$Generator()",
            "public org.springframework.cglib.beans.BeanCopier$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanCopier$Generator.setSource(java.lang.Class)",
            "public void setSource(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanCopier$Generator.setTarget(java.lang.Class)",
            "public void setTarget(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanCopier$Generator.setUseConverter(boolean)",
            "public void setUseConverter(boolean)"
        ],
        [
            "org.springframework.cglib.beans.BeanCopier",
            "org.springframework.cglib.beans.BeanCopier$Generator.create()",
            "public org.springframework.cglib.beans.BeanCopier create()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanCopier$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.beans.BeanCopier",
            "org.springframework.cglib.beans.BeanCopier()",
            "public org.springframework.cglib.beans.BeanCopier()"
        ],
        [
            "org.springframework.cglib.beans.BeanCopier",
            "org.springframework.cglib.beans.BeanCopier.create(java.lang.Class, java.lang.Class, boolean)",
            "public static org.springframework.cglib.beans.BeanCopier create(java.lang.Class, java.lang.Class, boolean)"
        ],
        [
            "org.springframework.cglib.beans.BeanGenerator",
            "org.springframework.cglib.beans.BeanGenerator()",
            "public org.springframework.cglib.beans.BeanGenerator()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanGenerator.setSuperclass(java.lang.Class)",
            "public void setSuperclass(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanGenerator.addProperty(java.lang.String, java.lang.Class)",
            "public void addProperty(java.lang.String, java.lang.Class)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.beans.BeanGenerator.create()",
            "public java.lang.Object create()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.beans.BeanGenerator.createClass()",
            "public java.lang.Object createClass()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanGenerator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanGenerator.addProperties(org.springframework.cglib.beans.BeanGenerator, java.util.Map)",
            "public static void addProperties(org.springframework.cglib.beans.BeanGenerator, java.util.Map)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanGenerator.addProperties(org.springframework.cglib.beans.BeanGenerator, java.lang.Class)",
            "public static void addProperties(org.springframework.cglib.beans.BeanGenerator, java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanGenerator.addProperties(org.springframework.cglib.beans.BeanGenerator, java.beans.PropertyDescriptor[])",
            "public static void addProperties(org.springframework.cglib.beans.BeanGenerator, java.beans.PropertyDescriptor[])"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMapEmitter$1.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMapEmitter$1.processDefault()",
            "public void processDefault()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMapEmitter$2.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMapEmitter$2.processDefault()",
            "public void processDefault()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMapEmitter$3.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BeanMapEmitter$3.processDefault()",
            "public void processDefault()"
        ],
        [
            "org.springframework.cglib.beans.BeanMapEmitter",
            "org.springframework.cglib.beans.BeanMapEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class, int)",
            "public org.springframework.cglib.beans.BeanMapEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class, int)"
        ],
        [
            "org.springframework.cglib.beans.BulkBean$Generator",
            "org.springframework.cglib.beans.BulkBean$Generator()",
            "public org.springframework.cglib.beans.BulkBean$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BulkBean$Generator.setTarget(java.lang.Class)",
            "public void setTarget(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BulkBean$Generator.setGetters(java.lang.String[])",
            "public void setGetters(java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BulkBean$Generator.setSetters(java.lang.String[])",
            "public void setSetters(java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BulkBean$Generator.setTypes(java.lang.Class[])",
            "public void setTypes(java.lang.Class[])"
        ],
        [
            "org.springframework.cglib.beans.BulkBean",
            "org.springframework.cglib.beans.BulkBean$Generator.create()",
            "public org.springframework.cglib.beans.BulkBean create()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.BulkBean$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.cglib.beans.BulkBean.getPropertyValues(java.lang.Object)",
            "public java.lang.Object[] getPropertyValues(java.lang.Object)"
        ],
        [
            "java.lang.Class[]",
            "org.springframework.cglib.beans.BulkBean.getPropertyTypes()",
            "public java.lang.Class[] getPropertyTypes()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.cglib.beans.BulkBean.getGetters()",
            "public java.lang.String[] getGetters()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.cglib.beans.BulkBean.getSetters()",
            "public java.lang.String[] getSetters()"
        ],
        [
            "org.springframework.cglib.beans.BulkBean",
            "org.springframework.cglib.beans.BulkBean.create(java.lang.Class, java.lang.String[], java.lang.String[], java.lang.Class[])",
            "public static org.springframework.cglib.beans.BulkBean create(java.lang.Class, java.lang.String[], java.lang.String[], java.lang.Class[])"
        ],
        [
            "org.springframework.cglib.beans.BulkBeanEmitter",
            "org.springframework.cglib.beans.BulkBeanEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class, java.lang.String[], java.lang.String[], java.lang.Class[])",
            "public org.springframework.cglib.beans.BulkBeanEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class, java.lang.String[], java.lang.String[], java.lang.Class[])"
        ],
        [
            "org.springframework.cglib.beans.BulkBeanException",
            "org.springframework.cglib.beans.BulkBeanException(java.lang.String, int)",
            "public org.springframework.cglib.beans.BulkBeanException(java.lang.String, int)"
        ],
        [
            "org.springframework.cglib.beans.BulkBeanException",
            "org.springframework.cglib.beans.BulkBeanException(java.lang.Throwable, int)",
            "public org.springframework.cglib.beans.BulkBeanException(java.lang.Throwable, int)"
        ],
        [
            "int",
            "org.springframework.cglib.beans.BulkBeanException.getIndex()",
            "public int getIndex()"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.cglib.beans.BulkBeanException.getCause()",
            "public java.lang.Throwable getCause()"
        ],
        [
            "org.springframework.cglib.beans.FixedKeySet",
            "org.springframework.cglib.beans.FixedKeySet(java.lang.String[])",
            "public org.springframework.cglib.beans.FixedKeySet(java.lang.String[])"
        ],
        [
            "java.util.Iterator",
            "org.springframework.cglib.beans.FixedKeySet.iterator()",
            "public java.util.Iterator iterator()"
        ],
        [
            "int",
            "org.springframework.cglib.beans.FixedKeySet.size()",
            "public int size()"
        ],
        [
            "org.springframework.cglib.beans.ImmutableBean$Generator",
            "org.springframework.cglib.beans.ImmutableBean$Generator()",
            "public org.springframework.cglib.beans.ImmutableBean$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.ImmutableBean$Generator.setBean(java.lang.Object)",
            "public void setBean(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.beans.ImmutableBean$Generator.create()",
            "public java.lang.Object create()"
        ],
        [
            "void",
            "org.springframework.cglib.beans.ImmutableBean$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.beans.ImmutableBean.create(java.lang.Object)",
            "public static java.lang.Object create(java.lang.Object)"
        ],
        [
            "org.springframework.cglib.core.Block",
            "org.springframework.cglib.core.Block(org.springframework.cglib.core.CodeEmitter)",
            "public org.springframework.cglib.core.Block(org.springframework.cglib.core.CodeEmitter)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.core.Block.getCodeEmitter()",
            "public org.springframework.cglib.core.CodeEmitter getCodeEmitter()"
        ],
        [
            "void",
            "org.springframework.cglib.core.Block.end()",
            "public void end()"
        ],
        [
            "org.springframework.asm.Label",
            "org.springframework.cglib.core.Block.getStart()",
            "public org.springframework.asm.Label getStart()"
        ],
        [
            "org.springframework.asm.Label",
            "org.springframework.cglib.core.Block.getEnd()",
            "public org.springframework.asm.Label getEnd()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.ClassEmitter$1.getType()",
            "public org.springframework.asm.Type getType()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.ClassEmitter$1.getSuperType()",
            "public org.springframework.asm.Type getSuperType()"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.ClassEmitter$1.getInterfaces()",
            "public org.springframework.asm.Type[] getInterfaces()"
        ],
        [
            "int",
            "org.springframework.cglib.core.ClassEmitter$1.getModifiers()",
            "public int getModifiers()"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassEmitter$2.visitMaxs(int, int)",
            "public void visitMaxs(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassEmitter$2.visitInsn(int)",
            "public void visitInsn(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.ClassEmitter$3.isStaticHook()",
            "public boolean isStaticHook()"
        ],
        [
            "org.springframework.cglib.core.ClassEmitter$FieldInfo",
            "org.springframework.cglib.core.ClassEmitter$FieldInfo(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)",
            "public org.springframework.cglib.core.ClassEmitter$FieldInfo(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.ClassEmitter$FieldInfo.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.core.ClassEmitter$FieldInfo.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.cglib.core.ClassEmitter",
            "org.springframework.cglib.core.ClassEmitter(org.springframework.asm.ClassVisitor)",
            "public org.springframework.cglib.core.ClassEmitter(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.core.ClassEmitter",
            "org.springframework.cglib.core.ClassEmitter()",
            "public org.springframework.cglib.core.ClassEmitter()"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassEmitter.setTarget(org.springframework.asm.ClassVisitor)",
            "public void setTarget(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.core.ClassInfo",
            "org.springframework.cglib.core.ClassEmitter.getClassInfo()",
            "public org.springframework.cglib.core.ClassInfo getClassInfo()"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassEmitter.begin_class(int, int, java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[], java.lang.String)",
            "public void begin_class(int, int, java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[], java.lang.String)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.core.ClassEmitter.getStaticHook()",
            "public org.springframework.cglib.core.CodeEmitter getStaticHook()"
        ],
        [
            "int",
            "org.springframework.cglib.core.ClassEmitter.getAccess()",
            "public int getAccess()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.ClassEmitter.getClassType()",
            "public org.springframework.asm.Type getClassType()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.ClassEmitter.getSuperType()",
            "public org.springframework.asm.Type getSuperType()"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassEmitter.end_class()",
            "public void end_class()"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.core.ClassEmitter.begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])",
            "public org.springframework.cglib.core.CodeEmitter begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.core.ClassEmitter.begin_static()",
            "public org.springframework.cglib.core.CodeEmitter begin_static()"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassEmitter.declare_field(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)",
            "public void declare_field(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassEmitter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassEmitter.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.cglib.core.ClassEmitter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
            "public org.springframework.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.cglib.core.ClassEmitter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.ClassInfo.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.core.ClassInfo.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.ClassInfo.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.cglib.core.ClassNameReader$1.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.ClassNameReader.getClassName(org.springframework.asm.ClassReader)",
            "public static java.lang.String getClassName(org.springframework.asm.ClassReader)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.cglib.core.ClassNameReader.getClassInfo(org.springframework.asm.ClassReader)",
            "public static java.lang.String[] getClassInfo(org.springframework.asm.ClassReader)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.ClassesKey.create(java.lang.Object[])",
            "public static java.lang.Object create(java.lang.Object[])"
        ],
        [
            "org.springframework.cglib.core.ClassInfo",
            "org.springframework.cglib.core.CodeEmitter$State.getClassInfo()",
            "public org.springframework.cglib.core.ClassInfo getClassInfo()"
        ],
        [
            "int",
            "org.springframework.cglib.core.CodeEmitter$State.getModifiers()",
            "public int getModifiers()"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.CodeEmitter$State.getSignature()",
            "public org.springframework.cglib.core.Signature getSignature()"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.CodeEmitter$State.getExceptionTypes()",
            "public org.springframework.asm.Type[] getExceptionTypes()"
        ],
        [
            "org.springframework.asm.Attribute",
            "org.springframework.cglib.core.CodeEmitter$State.getAttribute()",
            "public org.springframework.asm.Attribute getAttribute()"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.core.CodeEmitter(org.springframework.cglib.core.CodeEmitter)",
            "public org.springframework.cglib.core.CodeEmitter(org.springframework.cglib.core.CodeEmitter)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.CodeEmitter.isStaticHook()",
            "public boolean isStaticHook()"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.CodeEmitter.getSignature()",
            "public org.springframework.cglib.core.Signature getSignature()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.CodeEmitter.getReturnType()",
            "public org.springframework.asm.Type getReturnType()"
        ],
        [
            "org.springframework.cglib.core.MethodInfo",
            "org.springframework.cglib.core.CodeEmitter.getMethodInfo()",
            "public org.springframework.cglib.core.MethodInfo getMethodInfo()"
        ],
        [
            "org.springframework.cglib.core.ClassEmitter",
            "org.springframework.cglib.core.CodeEmitter.getClassEmitter()",
            "public org.springframework.cglib.core.ClassEmitter getClassEmitter()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.end_method()",
            "public void end_method()"
        ],
        [
            "org.springframework.cglib.core.Block",
            "org.springframework.cglib.core.CodeEmitter.begin_block()",
            "public org.springframework.cglib.core.Block begin_block()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.catch_exception(org.springframework.cglib.core.Block, org.springframework.asm.Type)",
            "public void catch_exception(org.springframework.cglib.core.Block, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.goTo(org.springframework.asm.Label)",
            "public void goTo(org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.ifnull(org.springframework.asm.Label)",
            "public void ifnull(org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.ifnonnull(org.springframework.asm.Label)",
            "public void ifnonnull(org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.if_jump(int, org.springframework.asm.Label)",
            "public void if_jump(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.if_icmp(int, org.springframework.asm.Label)",
            "public void if_icmp(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.if_cmp(org.springframework.asm.Type, int, org.springframework.asm.Label)",
            "public void if_cmp(org.springframework.asm.Type, int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.pop()",
            "public void pop()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.pop2()",
            "public void pop2()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.dup()",
            "public void dup()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.dup2()",
            "public void dup2()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.dup_x1()",
            "public void dup_x1()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.dup_x2()",
            "public void dup_x2()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.dup2_x1()",
            "public void dup2_x1()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.dup2_x2()",
            "public void dup2_x2()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.swap()",
            "public void swap()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.aconst_null()",
            "public void aconst_null()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.swap(org.springframework.asm.Type, org.springframework.asm.Type)",
            "public void swap(org.springframework.asm.Type, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.monitorenter()",
            "public void monitorenter()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.monitorexit()",
            "public void monitorexit()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.math(int, org.springframework.asm.Type)",
            "public void math(int, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.array_load(org.springframework.asm.Type)",
            "public void array_load(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.array_store(org.springframework.asm.Type)",
            "public void array_store(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.cast_numeric(org.springframework.asm.Type, org.springframework.asm.Type)",
            "public void cast_numeric(org.springframework.asm.Type, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.push(int)",
            "public void push(int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.push(long)",
            "public void push(long)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.push(float)",
            "public void push(float)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.push(double)",
            "public void push(double)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.push(java.lang.String)",
            "public void push(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.newarray()",
            "public void newarray()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.newarray(org.springframework.asm.Type)",
            "public void newarray(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.arraylength()",
            "public void arraylength()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.load_this()",
            "public void load_this()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.load_args()",
            "public void load_args()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.load_arg(int)",
            "public void load_arg(int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.load_args(int, int)",
            "public void load_args(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.iinc(org.springframework.cglib.core.Local, int)",
            "public void iinc(org.springframework.cglib.core.Local, int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.store_local(org.springframework.cglib.core.Local)",
            "public void store_local(org.springframework.cglib.core.Local)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.load_local(org.springframework.cglib.core.Local)",
            "public void load_local(org.springframework.cglib.core.Local)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.return_value()",
            "public void return_value()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.getfield(java.lang.String)",
            "public void getfield(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.putfield(java.lang.String)",
            "public void putfield(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.super_getfield(java.lang.String, org.springframework.asm.Type)",
            "public void super_getfield(java.lang.String, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.super_putfield(java.lang.String, org.springframework.asm.Type)",
            "public void super_putfield(java.lang.String, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.super_getstatic(java.lang.String, org.springframework.asm.Type)",
            "public void super_getstatic(java.lang.String, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.super_putstatic(java.lang.String, org.springframework.asm.Type)",
            "public void super_putstatic(java.lang.String, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.getfield(org.springframework.asm.Type, java.lang.String, org.springframework.asm.Type)",
            "public void getfield(org.springframework.asm.Type, java.lang.String, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.putfield(org.springframework.asm.Type, java.lang.String, org.springframework.asm.Type)",
            "public void putfield(org.springframework.asm.Type, java.lang.String, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.getstatic(org.springframework.asm.Type, java.lang.String, org.springframework.asm.Type)",
            "public void getstatic(org.springframework.asm.Type, java.lang.String, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.putstatic(org.springframework.asm.Type, java.lang.String, org.springframework.asm.Type)",
            "public void putstatic(org.springframework.asm.Type, java.lang.String, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.super_invoke()",
            "public void super_invoke()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.super_invoke(org.springframework.cglib.core.Signature)",
            "public void super_invoke(org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_constructor(org.springframework.asm.Type)",
            "public void invoke_constructor(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.super_invoke_constructor()",
            "public void super_invoke_constructor()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_constructor_this()",
            "public void invoke_constructor_this()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_interface(org.springframework.asm.Type, org.springframework.cglib.core.Signature)",
            "public void invoke_interface(org.springframework.asm.Type, org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_virtual(org.springframework.asm.Type, org.springframework.cglib.core.Signature)",
            "public void invoke_virtual(org.springframework.asm.Type, org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_static(org.springframework.asm.Type, org.springframework.cglib.core.Signature)",
            "public void invoke_static(org.springframework.asm.Type, org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_static(org.springframework.asm.Type, org.springframework.cglib.core.Signature, boolean)",
            "public void invoke_static(org.springframework.asm.Type, org.springframework.cglib.core.Signature, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_virtual_this(org.springframework.cglib.core.Signature)",
            "public void invoke_virtual_this(org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_static_this(org.springframework.cglib.core.Signature)",
            "public void invoke_static_this(org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_constructor(org.springframework.asm.Type, org.springframework.cglib.core.Signature)",
            "public void invoke_constructor(org.springframework.asm.Type, org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke_constructor_this(org.springframework.cglib.core.Signature)",
            "public void invoke_constructor_this(org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.super_invoke_constructor(org.springframework.cglib.core.Signature)",
            "public void super_invoke_constructor(org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.new_instance_this()",
            "public void new_instance_this()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.new_instance(org.springframework.asm.Type)",
            "public void new_instance(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.aaload(int)",
            "public void aaload(int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.aaload()",
            "public void aaload()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.aastore()",
            "public void aastore()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.athrow()",
            "public void athrow()"
        ],
        [
            "org.springframework.asm.Label",
            "org.springframework.cglib.core.CodeEmitter.make_label()",
            "public org.springframework.asm.Label make_label()"
        ],
        [
            "org.springframework.cglib.core.Local",
            "org.springframework.cglib.core.CodeEmitter.make_local()",
            "public org.springframework.cglib.core.Local make_local()"
        ],
        [
            "org.springframework.cglib.core.Local",
            "org.springframework.cglib.core.CodeEmitter.make_local(org.springframework.asm.Type)",
            "public org.springframework.cglib.core.Local make_local(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.checkcast_this()",
            "public void checkcast_this()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.checkcast(org.springframework.asm.Type)",
            "public void checkcast(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.instance_of(org.springframework.asm.Type)",
            "public void instance_of(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.instance_of_this()",
            "public void instance_of_this()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.process_switch(int[], org.springframework.cglib.core.ProcessSwitchCallback)",
            "public void process_switch(int[], org.springframework.cglib.core.ProcessSwitchCallback)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.process_switch(int[], org.springframework.cglib.core.ProcessSwitchCallback, boolean)",
            "public void process_switch(int[], org.springframework.cglib.core.ProcessSwitchCallback, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.mark(org.springframework.asm.Label)",
            "public void mark(org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.push(boolean)",
            "public void push(boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.not()",
            "public void not()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.throw_exception(org.springframework.asm.Type, java.lang.String)",
            "public void throw_exception(org.springframework.asm.Type, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.box(org.springframework.asm.Type)",
            "public void box(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.unbox(org.springframework.asm.Type)",
            "public void unbox(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.create_arg_array()",
            "public void create_arg_array()"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.zero_or_null(org.springframework.asm.Type)",
            "public void zero_or_null(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.unbox_or_zero(org.springframework.asm.Type)",
            "public void unbox_or_zero(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.visitMaxs(int, int)",
            "public void visitMaxs(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke(org.springframework.cglib.core.MethodInfo, org.springframework.asm.Type)",
            "public void invoke(org.springframework.cglib.core.MethodInfo, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CodeEmitter.invoke(org.springframework.cglib.core.MethodInfo)",
            "public void invoke(org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "org.springframework.cglib.core.CodeGenerationException",
            "org.springframework.cglib.core.CodeGenerationException(java.lang.Throwable)",
            "public org.springframework.cglib.core.CodeGenerationException(java.lang.Throwable)"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.cglib.core.CodeGenerationException.getCause()",
            "public java.lang.Throwable getCause()"
        ],
        [
            "java.util.Map",
            "org.springframework.cglib.core.CollectionUtils.bucket(java.util.Collection, org.springframework.cglib.core.Transformer)",
            "public static java.util.Map bucket(java.util.Collection, org.springframework.cglib.core.Transformer)"
        ],
        [
            "void",
            "org.springframework.cglib.core.CollectionUtils.reverse(java.util.Map, java.util.Map)",
            "public static void reverse(java.util.Map, java.util.Map)"
        ],
        [
            "java.util.Collection",
            "org.springframework.cglib.core.CollectionUtils.filter(java.util.Collection, org.springframework.cglib.core.Predicate)",
            "public static java.util.Collection filter(java.util.Collection, org.springframework.cglib.core.Predicate)"
        ],
        [
            "java.util.List",
            "org.springframework.cglib.core.CollectionUtils.transform(java.util.Collection, org.springframework.cglib.core.Transformer)",
            "public static java.util.List transform(java.util.Collection, org.springframework.cglib.core.Transformer)"
        ],
        [
            "java.util.Map",
            "org.springframework.cglib.core.CollectionUtils.getIndexMap(java.util.List)",
            "public static java.util.Map getIndexMap(java.util.List)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.DebuggingClassWriter$1.run()",
            "public java.lang.Object run()"
        ],
        [
            "org.springframework.cglib.core.DebuggingClassWriter",
            "org.springframework.cglib.core.DebuggingClassWriter(int)",
            "public org.springframework.cglib.core.DebuggingClassWriter(int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.DebuggingClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.DebuggingClassWriter.getClassName()",
            "public java.lang.String getClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.DebuggingClassWriter.getSuperName()",
            "public java.lang.String getSuperName()"
        ],
        [
            "byte[]",
            "org.springframework.cglib.core.DebuggingClassWriter.toByteArray()",
            "public byte[] toByteArray()"
        ],
        [
            "org.springframework.cglib.core.DefaultGeneratorStrategy",
            "org.springframework.cglib.core.DefaultGeneratorStrategy()",
            "public org.springframework.cglib.core.DefaultGeneratorStrategy()"
        ],
        [
            "byte[]",
            "org.springframework.cglib.core.DefaultGeneratorStrategy.generate(org.springframework.cglib.core.ClassGenerator)",
            "public byte[] generate(org.springframework.cglib.core.ClassGenerator) throws java.lang.Exception"
        ],
        [
            "org.springframework.cglib.core.DefaultNamingPolicy",
            "org.springframework.cglib.core.DefaultNamingPolicy()",
            "public org.springframework.cglib.core.DefaultNamingPolicy()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.DefaultNamingPolicy.getClassName(java.lang.String, java.lang.String, java.lang.Object, org.springframework.cglib.core.Predicate)",
            "public java.lang.String getClassName(java.lang.String, java.lang.String, java.lang.Object, org.springframework.cglib.core.Predicate)"
        ],
        [
            "int",
            "org.springframework.cglib.core.DefaultNamingPolicy.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.DefaultNamingPolicy.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.core.DuplicatesPredicate$UnnecessaryBridgeFinder$1.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.core.DuplicatesPredicate$UnnecessaryBridgeFinder.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.cglib.core.DuplicatesPredicate$UnnecessaryBridgeFinder.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.cglib.core.DuplicatesPredicate",
            "org.springframework.cglib.core.DuplicatesPredicate()",
            "public org.springframework.cglib.core.DuplicatesPredicate()"
        ],
        [
            "org.springframework.cglib.core.DuplicatesPredicate",
            "org.springframework.cglib.core.DuplicatesPredicate(java.util.List)",
            "public org.springframework.cglib.core.DuplicatesPredicate(java.util.List)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.DuplicatesPredicate.evaluate(java.lang.Object)",
            "public boolean evaluate(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.EmitUtils$1.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.EmitUtils$10.getParameterTypes(org.springframework.cglib.core.MethodInfo)",
            "public org.springframework.asm.Type[] getParameterTypes(org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.EmitUtils$11.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$12.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$12.processDefault()",
            "public void processDefault() throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.EmitUtils$13.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$14.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$14.processDefault()",
            "public void processDefault() throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.EmitUtils$15.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$16.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$16.processDefault()",
            "public void processDefault() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$2.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$2.processDefault()",
            "public void processDefault()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.EmitUtils$3.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$4.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$4.processDefault()",
            "public void processDefault()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.EmitUtils$5.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$6.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$6.processDefault()",
            "public void processDefault()"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$7.processElement(org.springframework.asm.Type)",
            "public void processElement(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$8.processElement(org.springframework.asm.Type)",
            "public void processElement(org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils$9.processElement(org.springframework.asm.Type)",
            "public void processElement(org.springframework.asm.Type)"
        ],
        [
            "org.springframework.cglib.core.EmitUtils$ArrayDelimiters",
            "org.springframework.cglib.core.EmitUtils$ArrayDelimiters(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.cglib.core.EmitUtils$ArrayDelimiters(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.factory_method(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.core.Signature)",
            "public static void factory_method(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.core.Signature)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.null_constructor(org.springframework.cglib.core.ClassEmitter)",
            "public static void null_constructor(org.springframework.cglib.core.ClassEmitter)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.process_array(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.cglib.core.ProcessArrayCallback)",
            "public static void process_array(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.cglib.core.ProcessArrayCallback)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.process_arrays(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.cglib.core.ProcessArrayCallback)",
            "public static void process_arrays(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.cglib.core.ProcessArrayCallback)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.string_switch(org.springframework.cglib.core.CodeEmitter, java.lang.String[], int, org.springframework.cglib.core.ObjectSwitchCallback)",
            "public static void string_switch(org.springframework.cglib.core.CodeEmitter, java.lang.String[], int, org.springframework.cglib.core.ObjectSwitchCallback)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.load_class_this(org.springframework.cglib.core.CodeEmitter)",
            "public static void load_class_this(org.springframework.cglib.core.CodeEmitter)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.load_class(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type)",
            "public static void load_class(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.push_array(org.springframework.cglib.core.CodeEmitter, java.lang.Object[])",
            "public static void push_array(org.springframework.cglib.core.CodeEmitter, java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.push_object(org.springframework.cglib.core.CodeEmitter, java.lang.Object)",
            "public static void push_object(org.springframework.cglib.core.CodeEmitter, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.hash_code(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, int, org.springframework.cglib.core.Customizer)",
            "public static void hash_code(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, int, org.springframework.cglib.core.Customizer)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.hash_code(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, int, org.springframework.cglib.core.internal.CustomizerRegistry)",
            "public static void hash_code(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, int, org.springframework.cglib.core.internal.CustomizerRegistry)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.not_equals(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.asm.Label, org.springframework.cglib.core.Customizer)",
            "public static void not_equals(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.asm.Label, org.springframework.cglib.core.Customizer)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.not_equals(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.asm.Label, org.springframework.cglib.core.internal.CustomizerRegistry)",
            "public static void not_equals(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.asm.Label, org.springframework.cglib.core.internal.CustomizerRegistry)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.append_string(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.cglib.core.EmitUtils$ArrayDelimiters, org.springframework.cglib.core.Customizer)",
            "public static void append_string(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.cglib.core.EmitUtils$ArrayDelimiters, org.springframework.cglib.core.Customizer)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.append_string(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.cglib.core.EmitUtils$ArrayDelimiters, org.springframework.cglib.core.internal.CustomizerRegistry)",
            "public static void append_string(org.springframework.cglib.core.CodeEmitter, org.springframework.asm.Type, org.springframework.cglib.core.EmitUtils$ArrayDelimiters, org.springframework.cglib.core.internal.CustomizerRegistry)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.load_method(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.core.MethodInfo)",
            "public static void load_method(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.method_switch(org.springframework.cglib.core.CodeEmitter, java.util.List, org.springframework.cglib.core.ObjectSwitchCallback)",
            "public static void method_switch(org.springframework.cglib.core.CodeEmitter, java.util.List, org.springframework.cglib.core.ObjectSwitchCallback)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.constructor_switch(org.springframework.cglib.core.CodeEmitter, java.util.List, org.springframework.cglib.core.ObjectSwitchCallback)",
            "public static void constructor_switch(org.springframework.cglib.core.CodeEmitter, java.util.List, org.springframework.cglib.core.ObjectSwitchCallback)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.wrap_throwable(org.springframework.cglib.core.Block, org.springframework.asm.Type)",
            "public static void wrap_throwable(org.springframework.cglib.core.Block, org.springframework.asm.Type)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.add_properties(org.springframework.cglib.core.ClassEmitter, java.lang.String[], org.springframework.asm.Type[])",
            "public static void add_properties(org.springframework.cglib.core.ClassEmitter, java.lang.String[], org.springframework.asm.Type[])"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.add_property(org.springframework.cglib.core.ClassEmitter, java.lang.String, org.springframework.asm.Type, java.lang.String)",
            "public static void add_property(org.springframework.cglib.core.ClassEmitter, java.lang.String, org.springframework.asm.Type, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.core.EmitUtils.wrap_undeclared_throwable(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.core.Block, org.springframework.asm.Type[], org.springframework.asm.Type)",
            "public static void wrap_undeclared_throwable(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.core.Block, org.springframework.asm.Type[], org.springframework.asm.Type)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.core.EmitUtils.begin_method(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.core.MethodInfo)",
            "public static org.springframework.cglib.core.CodeEmitter begin_method(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.core.EmitUtils.begin_method(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.core.MethodInfo, int)",
            "public static org.springframework.cglib.core.CodeEmitter begin_method(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.core.MethodInfo, int)"
        ],
        [
            "org.springframework.cglib.core.Local",
            "org.springframework.cglib.core.Local(int, org.springframework.asm.Type)",
            "public org.springframework.cglib.core.Local(int, org.springframework.asm.Type)"
        ],
        [
            "int",
            "org.springframework.cglib.core.Local.getIndex()",
            "public int getIndex()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.Local.getType()",
            "public org.springframework.asm.Type getType()"
        ],
        [
            "org.springframework.cglib.core.LocalVariablesSorter",
            "org.springframework.cglib.core.LocalVariablesSorter(int, java.lang.String, org.springframework.asm.MethodVisitor)",
            "public org.springframework.cglib.core.LocalVariablesSorter(int, java.lang.String, org.springframework.asm.MethodVisitor)"
        ],
        [
            "org.springframework.cglib.core.LocalVariablesSorter",
            "org.springframework.cglib.core.LocalVariablesSorter(org.springframework.cglib.core.LocalVariablesSorter)",
            "public org.springframework.cglib.core.LocalVariablesSorter(org.springframework.cglib.core.LocalVariablesSorter)"
        ],
        [
            "void",
            "org.springframework.cglib.core.LocalVariablesSorter.visitVarInsn(int, int)",
            "public void visitVarInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.LocalVariablesSorter.visitIincInsn(int, int)",
            "public void visitIincInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.LocalVariablesSorter.visitMaxs(int, int)",
            "public void visitMaxs(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.LocalVariablesSorter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)",
            "public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.MethodInfo.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.core.MethodInfo.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.MethodInfo.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.cglib.core.MethodInfoTransformer",
            "org.springframework.cglib.core.MethodInfoTransformer()",
            "public org.springframework.cglib.core.MethodInfoTransformer()"
        ],
        [
            "org.springframework.cglib.core.MethodInfoTransformer",
            "org.springframework.cglib.core.MethodInfoTransformer.getInstance()",
            "public static org.springframework.cglib.core.MethodInfoTransformer getInstance()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.MethodInfoTransformer.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.MethodWrapper.create(java.lang.reflect.Method)",
            "public static java.lang.Object create(java.lang.reflect.Method)"
        ],
        [
            "java.util.Set",
            "org.springframework.cglib.core.MethodWrapper.createSet(java.util.Collection)",
            "public static java.util.Set createSet(java.util.Collection)"
        ],
        [
            "org.springframework.cglib.core.RejectModifierPredicate",
            "org.springframework.cglib.core.RejectModifierPredicate(int)",
            "public org.springframework.cglib.core.RejectModifierPredicate(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.RejectModifierPredicate.evaluate(java.lang.Object)",
            "public boolean evaluate(java.lang.Object)"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.Signature(java.lang.String, java.lang.String)",
            "public org.springframework.cglib.core.Signature(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.Signature(java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[])",
            "public org.springframework.cglib.core.Signature(java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[])"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.Signature.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.Signature.getDescriptor()",
            "public java.lang.String getDescriptor()"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.Signature.getReturnType()",
            "public org.springframework.asm.Type getReturnType()"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.Signature.getArgumentTypes()",
            "public org.springframework.asm.Type[] getArgumentTypes()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.Signature.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.Signature.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.core.Signature.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.cglib.core.TinyBitSet",
            "org.springframework.cglib.core.TinyBitSet()",
            "public org.springframework.cglib.core.TinyBitSet()"
        ],
        [
            "int",
            "org.springframework.cglib.core.TinyBitSet.length()",
            "public int length()"
        ],
        [
            "int",
            "org.springframework.cglib.core.TinyBitSet.cardinality()",
            "public int cardinality()"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TinyBitSet.get(int)",
            "public boolean get(int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.TinyBitSet.set(int)",
            "public void set(int)"
        ],
        [
            "void",
            "org.springframework.cglib.core.TinyBitSet.clear(int)",
            "public void clear(int)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.TypeUtils.getType(java.lang.String)",
            "public static org.springframework.asm.Type getType(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isFinal(int)",
            "public static boolean isFinal(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isStatic(int)",
            "public static boolean isStatic(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isProtected(int)",
            "public static boolean isProtected(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isPublic(int)",
            "public static boolean isPublic(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isAbstract(int)",
            "public static boolean isAbstract(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isInterface(int)",
            "public static boolean isInterface(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isPrivate(int)",
            "public static boolean isPrivate(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isSynthetic(int)",
            "public static boolean isSynthetic(int)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isBridge(int)",
            "public static boolean isBridge(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.TypeUtils.getPackageName(org.springframework.asm.Type)",
            "public static java.lang.String getPackageName(org.springframework.asm.Type)"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.TypeUtils.getPackageName(java.lang.String)",
            "public static java.lang.String getPackageName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.TypeUtils.upperFirst(java.lang.String)",
            "public static java.lang.String upperFirst(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.TypeUtils.getClassName(org.springframework.asm.Type)",
            "public static java.lang.String getClassName(org.springframework.asm.Type)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.TypeUtils.add(org.springframework.asm.Type[], org.springframework.asm.Type)",
            "public static org.springframework.asm.Type[] add(org.springframework.asm.Type[], org.springframework.asm.Type)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.TypeUtils.add(org.springframework.asm.Type[], org.springframework.asm.Type[])",
            "public static org.springframework.asm.Type[] add(org.springframework.asm.Type[], org.springframework.asm.Type[])"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.TypeUtils.fromInternalName(java.lang.String)",
            "public static org.springframework.asm.Type fromInternalName(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.TypeUtils.fromInternalNames(java.lang.String[])",
            "public static org.springframework.asm.Type[] fromInternalNames(java.lang.String[])"
        ],
        [
            "int",
            "org.springframework.cglib.core.TypeUtils.getStackSize(org.springframework.asm.Type[])",
            "public static int getStackSize(org.springframework.asm.Type[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.cglib.core.TypeUtils.toInternalNames(org.springframework.asm.Type[])",
            "public static java.lang.String[] toInternalNames(org.springframework.asm.Type[])"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.TypeUtils.parseSignature(java.lang.String)",
            "public static org.springframework.cglib.core.Signature parseSignature(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.TypeUtils.parseType(java.lang.String)",
            "public static org.springframework.asm.Type parseType(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.TypeUtils.parseTypes(java.lang.String)",
            "public static org.springframework.asm.Type[] parseTypes(java.lang.String)"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.TypeUtils.parseConstructor(org.springframework.asm.Type[])",
            "public static org.springframework.cglib.core.Signature parseConstructor(org.springframework.asm.Type[])"
        ],
        [
            "org.springframework.cglib.core.Signature",
            "org.springframework.cglib.core.TypeUtils.parseConstructor(java.lang.String)",
            "public static org.springframework.cglib.core.Signature parseConstructor(java.lang.String)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.TypeUtils.getBoxedType(org.springframework.asm.Type)",
            "public static org.springframework.asm.Type getBoxedType(org.springframework.asm.Type)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.TypeUtils.getUnboxedType(org.springframework.asm.Type)",
            "public static org.springframework.asm.Type getUnboxedType(org.springframework.asm.Type)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isArray(org.springframework.asm.Type)",
            "public static boolean isArray(org.springframework.asm.Type)"
        ],
        [
            "org.springframework.asm.Type",
            "org.springframework.cglib.core.TypeUtils.getComponentType(org.springframework.asm.Type)",
            "public static org.springframework.asm.Type getComponentType(org.springframework.asm.Type)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isPrimitive(org.springframework.asm.Type)",
            "public static boolean isPrimitive(org.springframework.asm.Type)"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.TypeUtils.emulateClassGetName(org.springframework.asm.Type)",
            "public static java.lang.String emulateClassGetName(org.springframework.asm.Type)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.TypeUtils.isConstructor(org.springframework.cglib.core.MethodInfo)",
            "public static boolean isConstructor(org.springframework.cglib.core.MethodInfo)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.core.TypeUtils.getTypes(java.lang.Class[])",
            "public static org.springframework.asm.Type[] getTypes(java.lang.Class[])"
        ],
        [
            "int",
            "org.springframework.cglib.core.TypeUtils.ICONST(int)",
            "public static int ICONST(int)"
        ],
        [
            "int",
            "org.springframework.cglib.core.TypeUtils.LCONST(long)",
            "public static int LCONST(long)"
        ],
        [
            "int",
            "org.springframework.cglib.core.TypeUtils.FCONST(float)",
            "public static int FCONST(float)"
        ],
        [
            "int",
            "org.springframework.cglib.core.TypeUtils.DCONST(double)",
            "public static int DCONST(double)"
        ],
        [
            "int",
            "org.springframework.cglib.core.TypeUtils.NEWARRAY(org.springframework.asm.Type)",
            "public static int NEWARRAY(org.springframework.asm.Type)"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.TypeUtils.escapeType(java.lang.String)",
            "public static java.lang.String escapeType(java.lang.String)"
        ],
        [
            "org.springframework.cglib.core.VisibilityPredicate",
            "org.springframework.cglib.core.VisibilityPredicate(java.lang.Class, boolean)",
            "public org.springframework.cglib.core.VisibilityPredicate(java.lang.Class, boolean)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.VisibilityPredicate.evaluate(java.lang.Object)",
            "public boolean evaluate(java.lang.Object)"
        ],
        [
            "org.springframework.cglib.core.WeakCacheKey",
            "org.springframework.cglib.core.WeakCacheKey(T)",
            "public org.springframework.cglib.core.WeakCacheKey(T)"
        ],
        [
            "boolean",
            "org.springframework.cglib.core.WeakCacheKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.core.WeakCacheKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.core.WeakCacheKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.cglib.core.internal.CustomizerRegistry",
            "org.springframework.cglib.core.internal.CustomizerRegistry(java.lang.Class[])",
            "public org.springframework.cglib.core.internal.CustomizerRegistry(java.lang.Class[])"
        ],
        [
            "void",
            "org.springframework.cglib.core.internal.CustomizerRegistry.add(org.springframework.cglib.core.KeyFactoryCustomizer)",
            "public void add(org.springframework.cglib.core.KeyFactoryCustomizer)"
        ],
        [
            "<T> java.util.List<T>",
            "org.springframework.cglib.core.internal.CustomizerRegistry.get(java.lang.Class<T>)",
            "public <T> java.util.List<T> get(java.lang.Class<T>)"
        ],
        [
            "org.springframework.cglib.core.internal.CustomizerRegistry",
            "org.springframework.cglib.core.internal.CustomizerRegistry.singleton(org.springframework.cglib.core.Customizer)",
            "public static org.springframework.cglib.core.internal.CustomizerRegistry singleton(org.springframework.cglib.core.Customizer)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.core.internal.LoadingCache$1.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "V",
            "org.springframework.cglib.core.internal.LoadingCache$2.call()",
            "public V call() throws java.lang.Exception"
        ],
        [
            "org.springframework.cglib.core.internal.LoadingCache",
            "org.springframework.cglib.core.internal.LoadingCache(org.springframework.cglib.core.internal.Function<K, KK>, org.springframework.cglib.core.internal.Function<K, V>)",
            "public org.springframework.cglib.core.internal.LoadingCache(org.springframework.cglib.core.internal.Function<K, KK>, org.springframework.cglib.core.internal.Function<K, V>)"
        ],
        [
            "<K> org.springframework.cglib.core.internal.Function<K, K>",
            "org.springframework.cglib.core.internal.LoadingCache.identity()",
            "public static <K> org.springframework.cglib.core.internal.Function<K, K> identity()"
        ],
        [
            "V",
            "org.springframework.cglib.core.internal.LoadingCache.get(K)",
            "public V get(K)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder$1.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.cglib.proxy.BridgeMethodResolver",
            "org.springframework.cglib.proxy.BridgeMethodResolver(java.util.Map, java.lang.ClassLoader)",
            "public org.springframework.cglib.proxy.BridgeMethodResolver(java.util.Map, java.lang.ClassLoader)"
        ],
        [
            "java.util.Map",
            "org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll()",
            "public java.util.Map resolveAll()"
        ],
        [
            "org.springframework.cglib.proxy.CallbackHelper",
            "org.springframework.cglib.proxy.CallbackHelper(java.lang.Class, java.lang.Class[])",
            "public org.springframework.cglib.proxy.CallbackHelper(java.lang.Class, java.lang.Class[])"
        ],
        [
            "org.springframework.cglib.proxy.Callback[]",
            "org.springframework.cglib.proxy.CallbackHelper.getCallbacks()",
            "public org.springframework.cglib.proxy.Callback[] getCallbacks()"
        ],
        [
            "java.lang.Class[]",
            "org.springframework.cglib.proxy.CallbackHelper.getCallbackTypes()",
            "public java.lang.Class[] getCallbackTypes()"
        ],
        [
            "int",
            "org.springframework.cglib.proxy.CallbackHelper.accept(java.lang.reflect.Method)",
            "public int accept(java.lang.reflect.Method)"
        ],
        [
            "int",
            "org.springframework.cglib.proxy.CallbackHelper.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.cglib.proxy.CallbackHelper.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.proxy.CallbackInfo.determineTypes(java.lang.Class[])",
            "public static org.springframework.asm.Type[] determineTypes(java.lang.Class[])"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.proxy.CallbackInfo.determineTypes(java.lang.Class[], boolean)",
            "public static org.springframework.asm.Type[] determineTypes(java.lang.Class[], boolean)"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.proxy.CallbackInfo.determineTypes(org.springframework.cglib.proxy.Callback[])",
            "public static org.springframework.asm.Type[] determineTypes(org.springframework.cglib.proxy.Callback[])"
        ],
        [
            "org.springframework.asm.Type[]",
            "org.springframework.cglib.proxy.CallbackInfo.determineTypes(org.springframework.cglib.proxy.Callback[], boolean)",
            "public static org.springframework.asm.Type[] determineTypes(org.springframework.cglib.proxy.Callback[], boolean)"
        ],
        [
            "org.springframework.cglib.proxy.CallbackGenerator[]",
            "org.springframework.cglib.proxy.CallbackInfo.getGenerators(org.springframework.asm.Type[])",
            "public static org.springframework.cglib.proxy.CallbackGenerator[] getGenerators(org.springframework.asm.Type[])"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.DispatcherGenerator.generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.DispatcherGenerator.generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.FixedValueGenerator.generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.FixedValueGenerator.generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "org.springframework.cglib.proxy.InterfaceMaker",
            "org.springframework.cglib.proxy.InterfaceMaker()",
            "public org.springframework.cglib.proxy.InterfaceMaker()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.InterfaceMaker.add(org.springframework.cglib.core.Signature, org.springframework.asm.Type[])",
            "public void add(org.springframework.cglib.core.Signature, org.springframework.asm.Type[])"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.InterfaceMaker.add(java.lang.reflect.Method)",
            "public void add(java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.InterfaceMaker.add(java.lang.Class)",
            "public void add(java.lang.Class)"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.proxy.InterfaceMaker.create()",
            "public java.lang.Class create()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.InterfaceMaker.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.InvocationHandlerGenerator.generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.InvocationHandlerGenerator.generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.LazyLoaderGenerator.generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.LazyLoaderGenerator.generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.MethodInterceptorGenerator$1.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.MethodInterceptorGenerator$2.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.MethodInterceptorGenerator$2.processDefault()",
            "public void processDefault()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.MethodInterceptorGenerator.generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.MethodInterceptorGenerator.generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.MethodInterceptorGenerator.generateFindProxy(org.springframework.cglib.core.ClassEmitter, java.util.Map)",
            "public void generateFindProxy(org.springframework.cglib.core.ClassEmitter, java.util.Map)"
        ],
        [
            "org.springframework.cglib.proxy.Mixin$Generator",
            "org.springframework.cglib.proxy.Mixin$Generator()",
            "public org.springframework.cglib.proxy.Mixin$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Mixin$Generator.setStyle(int)",
            "public void setStyle(int)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Mixin$Generator.setClasses(java.lang.Class[])",
            "public void setClasses(java.lang.Class[])"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Mixin$Generator.setDelegates(java.lang.Object[])",
            "public void setDelegates(java.lang.Object[])"
        ],
        [
            "org.springframework.cglib.proxy.Mixin",
            "org.springframework.cglib.proxy.Mixin$Generator.create()",
            "public org.springframework.cglib.proxy.Mixin create()"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.Mixin$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.proxy.Mixin",
            "org.springframework.cglib.proxy.Mixin()",
            "public org.springframework.cglib.proxy.Mixin()"
        ],
        [
            "org.springframework.cglib.proxy.Mixin",
            "org.springframework.cglib.proxy.Mixin.create(java.lang.Object[])",
            "public static org.springframework.cglib.proxy.Mixin create(java.lang.Object[])"
        ],
        [
            "org.springframework.cglib.proxy.Mixin",
            "org.springframework.cglib.proxy.Mixin.create(java.lang.Class[], java.lang.Object[])",
            "public static org.springframework.cglib.proxy.Mixin create(java.lang.Class[], java.lang.Object[])"
        ],
        [
            "org.springframework.cglib.proxy.Mixin",
            "org.springframework.cglib.proxy.Mixin.createBean(java.lang.Object[])",
            "public static org.springframework.cglib.proxy.Mixin createBean(java.lang.Object[])"
        ],
        [
            "org.springframework.cglib.proxy.Mixin",
            "org.springframework.cglib.proxy.Mixin.createBean(java.lang.ClassLoader, java.lang.Object[])",
            "public static org.springframework.cglib.proxy.Mixin createBean(java.lang.ClassLoader, java.lang.Object[])"
        ],
        [
            "java.lang.Class[]",
            "org.springframework.cglib.proxy.Mixin.getClasses(java.lang.Object[])",
            "public static java.lang.Class[] getClasses(java.lang.Object[])"
        ],
        [
            "org.springframework.cglib.proxy.MixinBeanEmitter",
            "org.springframework.cglib.proxy.MixinBeanEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class[])",
            "public org.springframework.cglib.proxy.MixinBeanEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class[])"
        ],
        [
            "org.springframework.cglib.proxy.MixinEmitter",
            "org.springframework.cglib.proxy.MixinEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class[], int[])",
            "public org.springframework.cglib.proxy.MixinEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class[], int[])"
        ],
        [
            "org.springframework.cglib.proxy.MixinEverythingEmitter",
            "org.springframework.cglib.proxy.MixinEverythingEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class[])",
            "public org.springframework.cglib.proxy.MixinEverythingEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class[])"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.NoOpGenerator.generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generate(org.springframework.cglib.core.ClassEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.proxy.NoOpGenerator.generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)",
            "public void generateStatic(org.springframework.cglib.core.CodeEmitter, org.springframework.cglib.proxy.CallbackGenerator$Context, java.util.List)"
        ],
        [
            "int",
            "org.springframework.cglib.proxy.Proxy$1.accept(java.lang.reflect.Method)",
            "public int accept(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.cglib.proxy.InvocationHandler",
            "org.springframework.cglib.proxy.Proxy.getInvocationHandler(java.lang.Object)",
            "public static org.springframework.cglib.proxy.InvocationHandler getInvocationHandler(java.lang.Object)"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.proxy.Proxy.getProxyClass(java.lang.ClassLoader, java.lang.Class[])",
            "public static java.lang.Class getProxyClass(java.lang.ClassLoader, java.lang.Class[])"
        ],
        [
            "boolean",
            "org.springframework.cglib.proxy.Proxy.isProxyClass(java.lang.Class)",
            "public static boolean isProxyClass(java.lang.Class)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.proxy.Proxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class[], org.springframework.cglib.proxy.InvocationHandler)",
            "public static java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class[], org.springframework.cglib.proxy.InvocationHandler)"
        ],
        [
            "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "org.springframework.cglib.proxy.UndeclaredThrowableException(java.lang.Throwable)",
            "public org.springframework.cglib.proxy.UndeclaredThrowableException(java.lang.Throwable)"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.cglib.proxy.UndeclaredThrowableException.getUndeclaredThrowable()",
            "public java.lang.Throwable getUndeclaredThrowable()"
        ],
        [
            "org.springframework.cglib.reflect.ConstructorDelegate$Generator",
            "org.springframework.cglib.reflect.ConstructorDelegate$Generator()",
            "public org.springframework.cglib.reflect.ConstructorDelegate$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.ConstructorDelegate$Generator.setInterface(java.lang.Class)",
            "public void setInterface(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.ConstructorDelegate$Generator.setTargetClass(java.lang.Class)",
            "public void setTargetClass(java.lang.Class)"
        ],
        [
            "org.springframework.cglib.reflect.ConstructorDelegate",
            "org.springframework.cglib.reflect.ConstructorDelegate$Generator.create()",
            "public org.springframework.cglib.reflect.ConstructorDelegate create()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.ConstructorDelegate$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.reflect.ConstructorDelegate",
            "org.springframework.cglib.reflect.ConstructorDelegate.create(java.lang.Class, java.lang.Class)",
            "public static org.springframework.cglib.reflect.ConstructorDelegate create(java.lang.Class, java.lang.Class)"
        ],
        [
            "org.springframework.cglib.reflect.FastClass$Generator",
            "org.springframework.cglib.reflect.FastClass$Generator()",
            "public org.springframework.cglib.reflect.FastClass$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.FastClass$Generator.setType(java.lang.Class)",
            "public void setType(java.lang.Class)"
        ],
        [
            "org.springframework.cglib.reflect.FastClass",
            "org.springframework.cglib.reflect.FastClass$Generator.create()",
            "public org.springframework.cglib.reflect.FastClass create()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.FastClass$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "org.springframework.cglib.reflect.FastClass",
            "org.springframework.cglib.reflect.FastClass.create(java.lang.Class)",
            "public static org.springframework.cglib.reflect.FastClass create(java.lang.Class)"
        ],
        [
            "org.springframework.cglib.reflect.FastClass",
            "org.springframework.cglib.reflect.FastClass.create(java.lang.ClassLoader, java.lang.Class)",
            "public static org.springframework.cglib.reflect.FastClass create(java.lang.ClassLoader, java.lang.Class)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.FastClass.invoke(java.lang.String, java.lang.Class[], java.lang.Object, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.String, java.lang.Class[], java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.FastClass.newInstance()",
            "public java.lang.Object newInstance() throws java.lang.reflect.InvocationTargetException"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.FastClass.newInstance(java.lang.Class[], java.lang.Object[])",
            "public java.lang.Object newInstance(java.lang.Class[], java.lang.Object[]) throws java.lang.reflect.InvocationTargetException"
        ],
        [
            "org.springframework.cglib.reflect.FastMethod",
            "org.springframework.cglib.reflect.FastClass.getMethod(java.lang.reflect.Method)",
            "public org.springframework.cglib.reflect.FastMethod getMethod(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.cglib.reflect.FastConstructor",
            "org.springframework.cglib.reflect.FastClass.getConstructor(java.lang.reflect.Constructor)",
            "public org.springframework.cglib.reflect.FastConstructor getConstructor(java.lang.reflect.Constructor)"
        ],
        [
            "org.springframework.cglib.reflect.FastMethod",
            "org.springframework.cglib.reflect.FastClass.getMethod(java.lang.String, java.lang.Class[])",
            "public org.springframework.cglib.reflect.FastMethod getMethod(java.lang.String, java.lang.Class[])"
        ],
        [
            "org.springframework.cglib.reflect.FastConstructor",
            "org.springframework.cglib.reflect.FastClass.getConstructor(java.lang.Class[])",
            "public org.springframework.cglib.reflect.FastConstructor getConstructor(java.lang.Class[])"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.reflect.FastClass.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.reflect.FastClass.getJavaClass()",
            "public java.lang.Class getJavaClass()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.reflect.FastClass.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.cglib.reflect.FastClass.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.cglib.reflect.FastClass.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.FastClassEmitter$1.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.FastClassEmitter$2.transform(java.lang.Object)",
            "public java.lang.Object transform(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.FastClassEmitter$3.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.FastClassEmitter$3.processDefault()",
            "public void processDefault()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.FastClassEmitter$4.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.FastClassEmitter$4.processDefault()",
            "public void processDefault()"
        ],
        [
            "org.springframework.cglib.reflect.FastClassEmitter$GetIndexCallback",
            "org.springframework.cglib.reflect.FastClassEmitter$GetIndexCallback(org.springframework.cglib.core.CodeEmitter, java.util.List)",
            "public org.springframework.cglib.reflect.FastClassEmitter$GetIndexCallback(org.springframework.cglib.core.CodeEmitter, java.util.List)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.FastClassEmitter$GetIndexCallback.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.FastClassEmitter$GetIndexCallback.processDefault()",
            "public void processDefault()"
        ],
        [
            "org.springframework.cglib.reflect.FastClassEmitter",
            "org.springframework.cglib.reflect.FastClassEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class)",
            "public org.springframework.cglib.reflect.FastClassEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Class)"
        ],
        [
            "java.lang.Class[]",
            "org.springframework.cglib.reflect.FastConstructor.getParameterTypes()",
            "public java.lang.Class[] getParameterTypes()"
        ],
        [
            "java.lang.Class[]",
            "org.springframework.cglib.reflect.FastConstructor.getExceptionTypes()",
            "public java.lang.Class[] getExceptionTypes()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.FastConstructor.newInstance()",
            "public java.lang.Object newInstance() throws java.lang.reflect.InvocationTargetException"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.FastConstructor.newInstance(java.lang.Object[])",
            "public java.lang.Object newInstance(java.lang.Object[]) throws java.lang.reflect.InvocationTargetException"
        ],
        [
            "java.lang.reflect.Constructor",
            "org.springframework.cglib.reflect.FastConstructor.getJavaConstructor()",
            "public java.lang.reflect.Constructor getJavaConstructor()"
        ],
        [
            "int",
            "org.springframework.cglib.reflect.FastMember.getIndex()",
            "public int getIndex()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.reflect.FastMember.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.reflect.FastMember.getDeclaringClass()",
            "public java.lang.Class getDeclaringClass()"
        ],
        [
            "int",
            "org.springframework.cglib.reflect.FastMember.getModifiers()",
            "public int getModifiers()"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.reflect.FastMember.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.cglib.reflect.FastMember.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.cglib.reflect.FastMember.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.reflect.FastMethod.getReturnType()",
            "public java.lang.Class getReturnType()"
        ],
        [
            "java.lang.Class[]",
            "org.springframework.cglib.reflect.FastMethod.getParameterTypes()",
            "public java.lang.Class[] getParameterTypes()"
        ],
        [
            "java.lang.Class[]",
            "org.springframework.cglib.reflect.FastMethod.getExceptionTypes()",
            "public java.lang.Class[] getExceptionTypes()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.FastMethod.invoke(java.lang.Object, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.cglib.reflect.FastMethod.getJavaMethod()",
            "public java.lang.reflect.Method getJavaMethod()"
        ],
        [
            "org.springframework.cglib.reflect.MethodDelegate$Generator",
            "org.springframework.cglib.reflect.MethodDelegate$Generator()",
            "public org.springframework.cglib.reflect.MethodDelegate$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.MethodDelegate$Generator.setTarget(java.lang.Object)",
            "public void setTarget(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.MethodDelegate$Generator.setTargetClass(java.lang.Class)",
            "public void setTargetClass(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.MethodDelegate$Generator.setMethodName(java.lang.String)",
            "public void setMethodName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.MethodDelegate$Generator.setInterface(java.lang.Class)",
            "public void setInterface(java.lang.Class)"
        ],
        [
            "org.springframework.cglib.reflect.MethodDelegate",
            "org.springframework.cglib.reflect.MethodDelegate$Generator.create()",
            "public org.springframework.cglib.reflect.MethodDelegate create()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.MethodDelegate$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.NoSuchMethodException"
        ],
        [
            "org.springframework.cglib.reflect.MethodDelegate",
            "org.springframework.cglib.reflect.MethodDelegate()",
            "public org.springframework.cglib.reflect.MethodDelegate()"
        ],
        [
            "org.springframework.cglib.reflect.MethodDelegate",
            "org.springframework.cglib.reflect.MethodDelegate.createStatic(java.lang.Class, java.lang.String, java.lang.Class)",
            "public static org.springframework.cglib.reflect.MethodDelegate createStatic(java.lang.Class, java.lang.String, java.lang.Class)"
        ],
        [
            "org.springframework.cglib.reflect.MethodDelegate",
            "org.springframework.cglib.reflect.MethodDelegate.create(java.lang.Object, java.lang.String, java.lang.Class)",
            "public static org.springframework.cglib.reflect.MethodDelegate create(java.lang.Object, java.lang.String, java.lang.Class)"
        ],
        [
            "boolean",
            "org.springframework.cglib.reflect.MethodDelegate.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.reflect.MethodDelegate.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.reflect.MethodDelegate.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.MulticastDelegate$Generator$1.processElement(org.springframework.asm.Type)",
            "public void processElement(org.springframework.asm.Type)"
        ],
        [
            "org.springframework.cglib.reflect.MulticastDelegate$Generator",
            "org.springframework.cglib.reflect.MulticastDelegate$Generator()",
            "public org.springframework.cglib.reflect.MulticastDelegate$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.MulticastDelegate$Generator.setInterface(java.lang.Class)",
            "public void setInterface(java.lang.Class)"
        ],
        [
            "org.springframework.cglib.reflect.MulticastDelegate",
            "org.springframework.cglib.reflect.MulticastDelegate$Generator.create()",
            "public org.springframework.cglib.reflect.MulticastDelegate create()"
        ],
        [
            "void",
            "org.springframework.cglib.reflect.MulticastDelegate$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor)"
        ],
        [
            "java.util.List",
            "org.springframework.cglib.reflect.MulticastDelegate.getTargets()",
            "public java.util.List getTargets()"
        ],
        [
            "org.springframework.cglib.reflect.MulticastDelegate",
            "org.springframework.cglib.reflect.MulticastDelegate.remove(java.lang.Object)",
            "public org.springframework.cglib.reflect.MulticastDelegate remove(java.lang.Object)"
        ],
        [
            "org.springframework.cglib.reflect.MulticastDelegate",
            "org.springframework.cglib.reflect.MulticastDelegate.create(java.lang.Class)",
            "public static org.springframework.cglib.reflect.MulticastDelegate create(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.setTarget(org.springframework.asm.ClassVisitor)",
            "public void setTarget(org.springframework.asm.ClassVisitor)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visitSource(java.lang.String, java.lang.String)",
            "public void visitSource(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)",
            "public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
            "public org.springframework.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractClassFilterTransformer.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.transform.AbstractClassLoader$1.run()",
            "public java.lang.Object run()"
        ],
        [
            "java.lang.Class",
            "org.springframework.cglib.transform.AbstractClassLoader.loadClass(java.lang.String)",
            "public java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractClassTransformer.setTarget(org.springframework.asm.ClassVisitor)",
            "public void setTarget(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.transform.AbstractProcessTask",
            "org.springframework.cglib.transform.AbstractProcessTask()",
            "public org.springframework.cglib.transform.AbstractProcessTask()"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractProcessTask.addFileset(org.apache.tools.ant.types.FileSet)",
            "public void addFileset(org.apache.tools.ant.types.FileSet)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractProcessTask.execute()",
            "public void execute() throws org.apache.tools.ant.BuildException"
        ],
        [
            "org.springframework.cglib.transform.AbstractTransformTask",
            "org.springframework.cglib.transform.AbstractTransformTask()",
            "public org.springframework.cglib.transform.AbstractTransformTask()"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AbstractTransformTask.setVerbose(boolean)",
            "public void setVerbose(boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.AnnotationVisitorTee.getInstance(org.springframework.asm.AnnotationVisitor, org.springframework.asm.AnnotationVisitor)",
            "public static org.springframework.asm.AnnotationVisitor getInstance(org.springframework.asm.AnnotationVisitor, org.springframework.asm.AnnotationVisitor)"
        ],
        [
            "org.springframework.cglib.transform.AnnotationVisitorTee",
            "org.springframework.cglib.transform.AnnotationVisitorTee(org.springframework.asm.AnnotationVisitor, org.springframework.asm.AnnotationVisitor)",
            "public org.springframework.cglib.transform.AnnotationVisitorTee(org.springframework.asm.AnnotationVisitor, org.springframework.asm.AnnotationVisitor)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AnnotationVisitorTee.visit(java.lang.String, java.lang.Object)",
            "public void visit(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AnnotationVisitorTee.visitEnum(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitEnum(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.AnnotationVisitorTee.visitAnnotation(java.lang.String, java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.AnnotationVisitorTee.visitArray(java.lang.String)",
            "public org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.AnnotationVisitorTee.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.cglib.transform.ClassEmitterTransformer",
            "org.springframework.cglib.transform.ClassEmitterTransformer()",
            "public org.springframework.cglib.transform.ClassEmitterTransformer()"
        ],
        [
            "org.springframework.cglib.transform.ClassFilterTransformer",
            "org.springframework.cglib.transform.ClassFilterTransformer(org.springframework.cglib.transform.ClassFilter, org.springframework.cglib.transform.ClassTransformer)",
            "public org.springframework.cglib.transform.ClassFilterTransformer(org.springframework.cglib.transform.ClassFilter, org.springframework.cglib.transform.ClassTransformer)"
        ],
        [
            "org.springframework.cglib.transform.ClassReaderGenerator",
            "org.springframework.cglib.transform.ClassReaderGenerator(org.springframework.asm.ClassReader, int)",
            "public org.springframework.cglib.transform.ClassReaderGenerator(org.springframework.asm.ClassReader, int)"
        ],
        [
            "org.springframework.cglib.transform.ClassReaderGenerator",
            "org.springframework.cglib.transform.ClassReaderGenerator(org.springframework.asm.ClassReader, org.springframework.asm.Attribute[], int)",
            "public org.springframework.cglib.transform.ClassReaderGenerator(org.springframework.asm.ClassReader, org.springframework.asm.Attribute[], int)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassReaderGenerator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.transform.ClassTransformer",
            "org.springframework.cglib.transform.ClassTransformer()",
            "public org.springframework.cglib.transform.ClassTransformer()"
        ],
        [
            "org.springframework.cglib.transform.ClassTransformer",
            "org.springframework.cglib.transform.ClassTransformer(int)",
            "public org.springframework.cglib.transform.ClassTransformer(int)"
        ],
        [
            "org.springframework.cglib.transform.ClassTransformerChain",
            "org.springframework.cglib.transform.ClassTransformerChain(org.springframework.cglib.transform.ClassTransformer[])",
            "public org.springframework.cglib.transform.ClassTransformerChain(org.springframework.cglib.transform.ClassTransformer[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassTransformerChain.setTarget(org.springframework.asm.ClassVisitor)",
            "public void setTarget(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.cglib.transform.ClassTransformerChain.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "java.lang.String",
            "org.springframework.cglib.transform.ClassTransformerChain.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.cglib.transform.ClassTransformerTee",
            "org.springframework.cglib.transform.ClassTransformerTee(org.springframework.asm.ClassVisitor)",
            "public org.springframework.cglib.transform.ClassTransformerTee(org.springframework.asm.ClassVisitor)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassTransformerTee.setTarget(org.springframework.asm.ClassVisitor)",
            "public void setTarget(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.transform.ClassVisitorTee",
            "org.springframework.cglib.transform.ClassVisitorTee(org.springframework.asm.ClassVisitor, org.springframework.asm.ClassVisitor)",
            "public org.springframework.cglib.transform.ClassVisitorTee(org.springframework.asm.ClassVisitor, org.springframework.asm.ClassVisitor)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassVisitorTee.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassVisitorTee.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassVisitorTee.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)",
            "public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)"
        ],
        [
            "org.springframework.asm.FieldVisitor",
            "org.springframework.cglib.transform.ClassVisitorTee.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
            "public org.springframework.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.cglib.transform.ClassVisitorTee.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassVisitorTee.visitSource(java.lang.String, java.lang.String)",
            "public void visitSource(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassVisitorTee.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)",
            "public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.ClassVisitorTee.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.ClassVisitorTee.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.ClassVisitorTee.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "org.springframework.cglib.transform.FieldVisitorTee",
            "org.springframework.cglib.transform.FieldVisitorTee(org.springframework.asm.FieldVisitor, org.springframework.asm.FieldVisitor)",
            "public org.springframework.cglib.transform.FieldVisitorTee(org.springframework.asm.FieldVisitor, org.springframework.asm.FieldVisitor)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.FieldVisitorTee.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.FieldVisitorTee.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.FieldVisitorTee.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.FieldVisitorTee.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "org.springframework.cglib.transform.MethodFilterTransformer",
            "org.springframework.cglib.transform.MethodFilterTransformer(org.springframework.cglib.transform.MethodFilter, org.springframework.cglib.transform.ClassTransformer)",
            "public org.springframework.cglib.transform.MethodFilterTransformer(org.springframework.cglib.transform.MethodFilter, org.springframework.cglib.transform.ClassTransformer)"
        ],
        [
            "org.springframework.asm.MethodVisitor",
            "org.springframework.cglib.transform.MethodFilterTransformer.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodFilterTransformer.setTarget(org.springframework.asm.ClassVisitor)",
            "public void setTarget(org.springframework.asm.ClassVisitor)"
        ],
        [
            "org.springframework.cglib.transform.MethodVisitorTee",
            "org.springframework.cglib.transform.MethodVisitorTee(org.springframework.asm.MethodVisitor, org.springframework.asm.MethodVisitor)",
            "public org.springframework.cglib.transform.MethodVisitorTee(org.springframework.asm.MethodVisitor, org.springframework.asm.MethodVisitor)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])",
            "public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.MethodVisitorTee.visitAnnotationDefault()",
            "public org.springframework.asm.AnnotationVisitor visitAnnotationDefault()"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.MethodVisitorTee.visitAnnotation(java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.MethodVisitorTee.visitParameterAnnotation(int, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitParameterAnnotation(int, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitAttribute(org.springframework.asm.Attribute)",
            "public void visitAttribute(org.springframework.asm.Attribute)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitCode()",
            "public void visitCode()"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitInsn(int)",
            "public void visitInsn(int)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitIntInsn(int, int)",
            "public void visitIntInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitVarInsn(int, int)",
            "public void visitVarInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitTypeInsn(int, java.lang.String)",
            "public void visitTypeInsn(int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)",
            "public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)",
            "public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitJumpInsn(int, org.springframework.asm.Label)",
            "public void visitJumpInsn(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitLabel(org.springframework.asm.Label)",
            "public void visitLabel(org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitLdcInsn(java.lang.Object)",
            "public void visitLdcInsn(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitIincInsn(int, int)",
            "public void visitIincInsn(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitTableSwitchInsn(int, int, org.springframework.asm.Label, org.springframework.asm.Label[])",
            "public void visitTableSwitchInsn(int, int, org.springframework.asm.Label, org.springframework.asm.Label[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitLookupSwitchInsn(org.springframework.asm.Label, int[], org.springframework.asm.Label[])",
            "public void visitLookupSwitchInsn(org.springframework.asm.Label, int[], org.springframework.asm.Label[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitMultiANewArrayInsn(java.lang.String, int)",
            "public void visitMultiANewArrayInsn(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitTryCatchBlock(org.springframework.asm.Label, org.springframework.asm.Label, org.springframework.asm.Label, java.lang.String)",
            "public void visitTryCatchBlock(org.springframework.asm.Label, org.springframework.asm.Label, org.springframework.asm.Label, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)",
            "public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.springframework.asm.Label, org.springframework.asm.Label, int)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitLineNumber(int, org.springframework.asm.Label)",
            "public void visitLineNumber(int, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitMaxs(int, int)",
            "public void visitMaxs(int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitEnd()",
            "public void visitEnd()"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitParameter(java.lang.String, int)",
            "public void visitParameter(java.lang.String, int)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.MethodVisitorTee.visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTypeAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.MethodVisitorTee.visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)",
            "public void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.springframework.asm.Handle, java.lang.Object...)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.MethodVisitorTee.visitInsnAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitInsnAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.MethodVisitorTee.visitTryCatchAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitTryCatchAnnotation(int, org.springframework.asm.TypePath, java.lang.String, boolean)"
        ],
        [
            "org.springframework.asm.AnnotationVisitor",
            "org.springframework.cglib.transform.MethodVisitorTee.visitLocalVariableAnnotation(int, org.springframework.asm.TypePath, org.springframework.asm.Label[], org.springframework.asm.Label[], int[], java.lang.String, boolean)",
            "public org.springframework.asm.AnnotationVisitor visitLocalVariableAnnotation(int, org.springframework.asm.TypePath, org.springframework.asm.Label[], org.springframework.asm.Label[], int[], java.lang.String, boolean)"
        ],
        [
            "org.springframework.cglib.transform.TransformingClassGenerator",
            "org.springframework.cglib.transform.TransformingClassGenerator(org.springframework.cglib.core.ClassGenerator, org.springframework.cglib.transform.ClassTransformer)",
            "public org.springframework.cglib.transform.TransformingClassGenerator(org.springframework.cglib.core.ClassGenerator, org.springframework.cglib.transform.ClassTransformer)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.TransformingClassGenerator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "org.springframework.cglib.transform.TransformingClassLoader",
            "org.springframework.cglib.transform.TransformingClassLoader(java.lang.ClassLoader, org.springframework.cglib.transform.ClassFilter, org.springframework.cglib.transform.ClassTransformerFactory)",
            "public org.springframework.cglib.transform.TransformingClassLoader(java.lang.ClassLoader, org.springframework.cglib.transform.ClassFilter, org.springframework.cglib.transform.ClassTransformerFactory)"
        ],
        [
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback()",
            "public org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback()"
        ],
        [
            "int",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeInt(java.lang.Object, java.lang.String, int, int)",
            "public int writeInt(java.lang.Object, java.lang.String, int, int)"
        ],
        [
            "char",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeChar(java.lang.Object, java.lang.String, char, char)",
            "public char writeChar(java.lang.Object, java.lang.String, char, char)"
        ],
        [
            "byte",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeByte(java.lang.Object, java.lang.String, byte, byte)",
            "public byte writeByte(java.lang.Object, java.lang.String, byte, byte)"
        ],
        [
            "boolean",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeBoolean(java.lang.Object, java.lang.String, boolean, boolean)",
            "public boolean writeBoolean(java.lang.Object, java.lang.String, boolean, boolean)"
        ],
        [
            "short",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeShort(java.lang.Object, java.lang.String, short, short)",
            "public short writeShort(java.lang.Object, java.lang.String, short, short)"
        ],
        [
            "float",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeFloat(java.lang.Object, java.lang.String, float, float)",
            "public float writeFloat(java.lang.Object, java.lang.String, float, float)"
        ],
        [
            "double",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeDouble(java.lang.Object, java.lang.String, double, double)",
            "public double writeDouble(java.lang.Object, java.lang.String, double, double)"
        ],
        [
            "long",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeLong(java.lang.Object, java.lang.String, long, long)",
            "public long writeLong(java.lang.Object, java.lang.String, long, long)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.writeObject(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object)",
            "public java.lang.Object writeObject(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readInt(java.lang.Object, java.lang.String, int)",
            "public int readInt(java.lang.Object, java.lang.String, int)"
        ],
        [
            "char",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readChar(java.lang.Object, java.lang.String, char)",
            "public char readChar(java.lang.Object, java.lang.String, char)"
        ],
        [
            "byte",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readByte(java.lang.Object, java.lang.String, byte)",
            "public byte readByte(java.lang.Object, java.lang.String, byte)"
        ],
        [
            "boolean",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readBoolean(java.lang.Object, java.lang.String, boolean)",
            "public boolean readBoolean(java.lang.Object, java.lang.String, boolean)"
        ],
        [
            "short",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readShort(java.lang.Object, java.lang.String, short)",
            "public short readShort(java.lang.Object, java.lang.String, short)"
        ],
        [
            "float",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readFloat(java.lang.Object, java.lang.String, float)",
            "public float readFloat(java.lang.Object, java.lang.String, float)"
        ],
        [
            "double",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readDouble(java.lang.Object, java.lang.String, double)",
            "public double readDouble(java.lang.Object, java.lang.String, double)"
        ],
        [
            "long",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readLong(java.lang.Object, java.lang.String, long)",
            "public long readLong(java.lang.Object, java.lang.String, long)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback.readObject(java.lang.Object, java.lang.String, java.lang.Object)",
            "public java.lang.Object readObject(java.lang.Object, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.cglib.transform.impl.AccessFieldTransformer",
            "org.springframework.cglib.transform.impl.AccessFieldTransformer(org.springframework.cglib.transform.impl.AccessFieldTransformer$Callback)",
            "public org.springframework.cglib.transform.impl.AccessFieldTransformer(org.springframework.cglib.transform.impl.AccessFieldTransformer$Callback)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.AccessFieldTransformer.declare_field(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)",
            "public void declare_field(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.AddDelegateTransformer$1.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)"
        ],
        [
            "org.springframework.cglib.transform.impl.AddDelegateTransformer",
            "org.springframework.cglib.transform.impl.AddDelegateTransformer(java.lang.Class[], java.lang.Class)",
            "public org.springframework.cglib.transform.impl.AddDelegateTransformer(java.lang.Class[], java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.AddDelegateTransformer.begin_class(int, int, java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[], java.lang.String)",
            "public void begin_class(int, int, java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[], java.lang.String)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.transform.impl.AddDelegateTransformer.begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])",
            "public org.springframework.cglib.core.CodeEmitter begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.AddInitTransformer$1.visitInsn(int)",
            "public void visitInsn(int)"
        ],
        [
            "org.springframework.cglib.transform.impl.AddInitTransformer",
            "org.springframework.cglib.transform.impl.AddInitTransformer(java.lang.reflect.Method)",
            "public org.springframework.cglib.transform.impl.AddInitTransformer(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.transform.impl.AddInitTransformer.begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])",
            "public org.springframework.cglib.core.CodeEmitter begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])"
        ],
        [
            "org.springframework.cglib.transform.impl.AddPropertyTransformer",
            "org.springframework.cglib.transform.impl.AddPropertyTransformer(java.util.Map)",
            "public org.springframework.cglib.transform.impl.AddPropertyTransformer(java.util.Map)"
        ],
        [
            "org.springframework.cglib.transform.impl.AddPropertyTransformer",
            "org.springframework.cglib.transform.impl.AddPropertyTransformer(java.lang.String[], org.springframework.asm.Type[])",
            "public org.springframework.cglib.transform.impl.AddPropertyTransformer(java.lang.String[], org.springframework.asm.Type[])"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.AddPropertyTransformer.end_class()",
            "public void end_class()"
        ],
        [
            "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
            "org.springframework.cglib.transform.impl.AddStaticInitTransformer(java.lang.reflect.Method)",
            "public org.springframework.cglib.transform.impl.AddStaticInitTransformer(java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer$1.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer$1.processDefault()",
            "public void processDefault() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer$2.processCase(int, org.springframework.asm.Label)",
            "public void processCase(int, org.springframework.asm.Label) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer$2.processDefault()",
            "public void processDefault() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer$3.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer$3.processDefault()",
            "public void processDefault()"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer$4.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer$4.processDefault()",
            "public void processDefault()"
        ],
        [
            "org.springframework.cglib.transform.impl.FieldProviderTransformer",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer()",
            "public org.springframework.cglib.transform.impl.FieldProviderTransformer()"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer.begin_class(int, int, java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[], java.lang.String)",
            "public void begin_class(int, int, java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer.declare_field(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)",
            "public void declare_field(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.FieldProviderTransformer.end_class()",
            "public void end_class()"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.InterceptFieldTransformer$1.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)",
            "public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
            "org.springframework.cglib.transform.impl.InterceptFieldTransformer(org.springframework.cglib.transform.impl.InterceptFieldFilter)",
            "public org.springframework.cglib.transform.impl.InterceptFieldTransformer(org.springframework.cglib.transform.impl.InterceptFieldFilter)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.InterceptFieldTransformer.begin_class(int, int, java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[], java.lang.String)",
            "public void begin_class(int, int, java.lang.String, org.springframework.asm.Type, org.springframework.asm.Type[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.InterceptFieldTransformer.declare_field(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)",
            "public void declare_field(int, java.lang.String, org.springframework.asm.Type, java.lang.Object)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.transform.impl.InterceptFieldTransformer.begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])",
            "public org.springframework.cglib.core.CodeEmitter begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])"
        ],
        [
            "boolean",
            "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy$1.accept(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
            "public boolean accept(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
            "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy(java.lang.Class)",
            "public org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer$1.visitMaxs(int, int)",
            "public void visitMaxs(int, int)"
        ],
        [
            "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer",
            "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer(java.lang.Class)",
            "public org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer(java.lang.Class)"
        ],
        [
            "org.springframework.cglib.core.CodeEmitter",
            "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer.begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])",
            "public org.springframework.cglib.core.CodeEmitter begin_method(int, org.springframework.cglib.core.Signature, org.springframework.asm.Type[])"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$ByteComparer",
            "org.springframework.cglib.util.ParallelSorter$ByteComparer(byte[])",
            "public org.springframework.cglib.util.ParallelSorter$ByteComparer(byte[])"
        ],
        [
            "int",
            "org.springframework.cglib.util.ParallelSorter$ByteComparer.compare(int, int)",
            "public int compare(int, int)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$ComparatorComparer",
            "org.springframework.cglib.util.ParallelSorter$ComparatorComparer(java.lang.Object[], java.util.Comparator)",
            "public org.springframework.cglib.util.ParallelSorter$ComparatorComparer(java.lang.Object[], java.util.Comparator)"
        ],
        [
            "int",
            "org.springframework.cglib.util.ParallelSorter$ComparatorComparer.compare(int, int)",
            "public int compare(int, int)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$DoubleComparer",
            "org.springframework.cglib.util.ParallelSorter$DoubleComparer(double[])",
            "public org.springframework.cglib.util.ParallelSorter$DoubleComparer(double[])"
        ],
        [
            "int",
            "org.springframework.cglib.util.ParallelSorter$DoubleComparer.compare(int, int)",
            "public int compare(int, int)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$FloatComparer",
            "org.springframework.cglib.util.ParallelSorter$FloatComparer(float[])",
            "public org.springframework.cglib.util.ParallelSorter$FloatComparer(float[])"
        ],
        [
            "int",
            "org.springframework.cglib.util.ParallelSorter$FloatComparer.compare(int, int)",
            "public int compare(int, int)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$Generator",
            "org.springframework.cglib.util.ParallelSorter$Generator()",
            "public org.springframework.cglib.util.ParallelSorter$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter$Generator.setArrays(java.lang.Object[])",
            "public void setArrays(java.lang.Object[])"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter",
            "org.springframework.cglib.util.ParallelSorter$Generator.create()",
            "public org.springframework.cglib.util.ParallelSorter create()"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$IntComparer",
            "org.springframework.cglib.util.ParallelSorter$IntComparer(int[])",
            "public org.springframework.cglib.util.ParallelSorter$IntComparer(int[])"
        ],
        [
            "int",
            "org.springframework.cglib.util.ParallelSorter$IntComparer.compare(int, int)",
            "public int compare(int, int)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$LongComparer",
            "org.springframework.cglib.util.ParallelSorter$LongComparer(long[])",
            "public org.springframework.cglib.util.ParallelSorter$LongComparer(long[])"
        ],
        [
            "int",
            "org.springframework.cglib.util.ParallelSorter$LongComparer.compare(int, int)",
            "public int compare(int, int)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$ObjectComparer",
            "org.springframework.cglib.util.ParallelSorter$ObjectComparer(java.lang.Object[])",
            "public org.springframework.cglib.util.ParallelSorter$ObjectComparer(java.lang.Object[])"
        ],
        [
            "int",
            "org.springframework.cglib.util.ParallelSorter$ObjectComparer.compare(int, int)",
            "public int compare(int, int)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter$ShortComparer",
            "org.springframework.cglib.util.ParallelSorter$ShortComparer(short[])",
            "public org.springframework.cglib.util.ParallelSorter$ShortComparer(short[])"
        ],
        [
            "int",
            "org.springframework.cglib.util.ParallelSorter$ShortComparer.compare(int, int)",
            "public int compare(int, int)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorter",
            "org.springframework.cglib.util.ParallelSorter.create(java.lang.Object[])",
            "public static org.springframework.cglib.util.ParallelSorter create(java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter.quickSort(int)",
            "public void quickSort(int)"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter.quickSort(int, int, int)",
            "public void quickSort(int, int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter.quickSort(int, java.util.Comparator)",
            "public void quickSort(int, java.util.Comparator)"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter.quickSort(int, int, int, java.util.Comparator)",
            "public void quickSort(int, int, int, java.util.Comparator)"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter.mergeSort(int)",
            "public void mergeSort(int)"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter.mergeSort(int, int, int)",
            "public void mergeSort(int, int, int)"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter.mergeSort(int, java.util.Comparator)",
            "public void mergeSort(int, java.util.Comparator)"
        ],
        [
            "void",
            "org.springframework.cglib.util.ParallelSorter.mergeSort(int, int, int, java.util.Comparator)",
            "public void mergeSort(int, int, int, java.util.Comparator)"
        ],
        [
            "org.springframework.cglib.util.ParallelSorterEmitter",
            "org.springframework.cglib.util.ParallelSorterEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Object[])",
            "public org.springframework.cglib.util.ParallelSorterEmitter(org.springframework.asm.ClassVisitor, java.lang.String, java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.cglib.util.StringSwitcher$Generator$1.processCase(java.lang.Object, org.springframework.asm.Label)",
            "public void processCase(java.lang.Object, org.springframework.asm.Label)"
        ],
        [
            "void",
            "org.springframework.cglib.util.StringSwitcher$Generator$1.processDefault()",
            "public void processDefault()"
        ],
        [
            "org.springframework.cglib.util.StringSwitcher$Generator",
            "org.springframework.cglib.util.StringSwitcher$Generator()",
            "public org.springframework.cglib.util.StringSwitcher$Generator()"
        ],
        [
            "void",
            "org.springframework.cglib.util.StringSwitcher$Generator.setStrings(java.lang.String[])",
            "public void setStrings(java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.cglib.util.StringSwitcher$Generator.setInts(int[])",
            "public void setInts(int[])"
        ],
        [
            "void",
            "org.springframework.cglib.util.StringSwitcher$Generator.setFixedInput(boolean)",
            "public void setFixedInput(boolean)"
        ],
        [
            "org.springframework.cglib.util.StringSwitcher",
            "org.springframework.cglib.util.StringSwitcher$Generator.create()",
            "public org.springframework.cglib.util.StringSwitcher create()"
        ],
        [
            "void",
            "org.springframework.cglib.util.StringSwitcher$Generator.generateClass(org.springframework.asm.ClassVisitor)",
            "public void generateClass(org.springframework.asm.ClassVisitor) throws java.lang.Exception"
        ],
        [
            "org.springframework.cglib.util.StringSwitcher",
            "org.springframework.cglib.util.StringSwitcher.create(java.lang.String[], int[], boolean)",
            "public static org.springframework.cglib.util.StringSwitcher create(java.lang.String[], int[], boolean)"
        ],
        [
            "org.springframework.objenesis.ObjenesisBase",
            "org.springframework.objenesis.ObjenesisBase(org.springframework.objenesis.strategy.InstantiatorStrategy)",
            "public org.springframework.objenesis.ObjenesisBase(org.springframework.objenesis.strategy.InstantiatorStrategy)"
        ],
        [
            "org.springframework.objenesis.ObjenesisBase",
            "org.springframework.objenesis.ObjenesisBase(org.springframework.objenesis.strategy.InstantiatorStrategy, boolean)",
            "public org.springframework.objenesis.ObjenesisBase(org.springframework.objenesis.strategy.InstantiatorStrategy, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.objenesis.ObjenesisBase.toString()",
            "public java.lang.String toString()"
        ],
        [
            "<T> T",
            "org.springframework.objenesis.ObjenesisBase.newInstance(java.lang.Class<T>)",
            "public <T> T newInstance(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.objenesis.instantiator.ObjectInstantiator<T>",
            "org.springframework.objenesis.ObjenesisBase.getInstantiatorOf(java.lang.Class<T>)",
            "public <T> org.springframework.objenesis.instantiator.ObjectInstantiator<T> getInstantiatorOf(java.lang.Class<T>)"
        ],
        [
            "org.springframework.objenesis.ObjenesisException",
            "org.springframework.objenesis.ObjenesisException(java.lang.String)",
            "public org.springframework.objenesis.ObjenesisException(java.lang.String)"
        ],
        [
            "org.springframework.objenesis.ObjenesisException",
            "org.springframework.objenesis.ObjenesisException(java.lang.Throwable)",
            "public org.springframework.objenesis.ObjenesisException(java.lang.Throwable)"
        ],
        [
            "org.springframework.objenesis.ObjenesisException",
            "org.springframework.objenesis.ObjenesisException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.objenesis.ObjenesisException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "<T> T",
            "org.springframework.objenesis.ObjenesisHelper.newInstance(java.lang.Class<T>)",
            "public static <T> T newInstance(java.lang.Class<T>)"
        ],
        [
            "<T extends java.io.Serializable> T",
            "org.springframework.objenesis.ObjenesisHelper.newSerializableInstance(java.lang.Class<T>)",
            "public static <T extends java.io.Serializable> T newSerializableInstance(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.objenesis.instantiator.ObjectInstantiator<T>",
            "org.springframework.objenesis.ObjenesisHelper.getInstantiatorOf(java.lang.Class<T>)",
            "public static <T> org.springframework.objenesis.instantiator.ObjectInstantiator<T> getInstantiatorOf(java.lang.Class<T>)"
        ],
        [
            "<T extends java.io.Serializable> org.springframework.objenesis.instantiator.ObjectInstantiator<T>",
            "org.springframework.objenesis.ObjenesisHelper.getSerializableObjectInstantiatorOf(java.lang.Class<T>)",
            "public static <T extends java.io.Serializable> org.springframework.objenesis.instantiator.ObjectInstantiator<T> getSerializableObjectInstantiatorOf(java.lang.Class<T>)"
        ],
        [
            "org.springframework.objenesis.ObjenesisSerializer",
            "org.springframework.objenesis.ObjenesisSerializer()",
            "public org.springframework.objenesis.ObjenesisSerializer()"
        ],
        [
            "org.springframework.objenesis.ObjenesisSerializer",
            "org.springframework.objenesis.ObjenesisSerializer(boolean)",
            "public org.springframework.objenesis.ObjenesisSerializer(boolean)"
        ],
        [
            "org.springframework.objenesis.ObjenesisStd",
            "org.springframework.objenesis.ObjenesisStd()",
            "public org.springframework.objenesis.ObjenesisStd()"
        ],
        [
            "org.springframework.objenesis.ObjenesisStd",
            "org.springframework.objenesis.ObjenesisStd(boolean)",
            "public org.springframework.objenesis.ObjenesisStd(boolean)"
        ],
        [
            "org.springframework.objenesis.instantiator.SerializationInstantiatorHelper",
            "org.springframework.objenesis.instantiator.SerializationInstantiatorHelper()",
            "public org.springframework.objenesis.instantiator.SerializationInstantiatorHelper()"
        ],
        [
            "<T> java.lang.Class<? super T>",
            "org.springframework.objenesis.instantiator.SerializationInstantiatorHelper.getNonSerializableSuperClass(java.lang.Class<T>)",
            "public static <T> java.lang.Class<? super T> getNonSerializableSuperClass(java.lang.Class<T>)"
        ],
        [
            "org.springframework.objenesis.instantiator.android.Android10Instantiator",
            "org.springframework.objenesis.instantiator.android.Android10Instantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.android.Android10Instantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.android.Android10Instantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.android.Android17Instantiator",
            "org.springframework.objenesis.instantiator.android.Android17Instantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.android.Android17Instantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.android.Android17Instantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.android.Android18Instantiator",
            "org.springframework.objenesis.instantiator.android.Android18Instantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.android.Android18Instantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.android.Android18Instantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.android.AndroidSerializationInstantiator",
            "org.springframework.objenesis.instantiator.android.AndroidSerializationInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.android.AndroidSerializationInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.android.AndroidSerializationInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.annotations.Typology[]",
            "org.springframework.objenesis.instantiator.annotations.Typology.values()",
            "public static org.springframework.objenesis.instantiator.annotations.Typology[] values()"
        ],
        [
            "org.springframework.objenesis.instantiator.annotations.Typology",
            "org.springframework.objenesis.instantiator.annotations.Typology.valueOf(java.lang.String)",
            "public static org.springframework.objenesis.instantiator.annotations.Typology valueOf(java.lang.String)"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.AccessibleInstantiator",
            "org.springframework.objenesis.instantiator.basic.AccessibleInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.basic.AccessibleInstantiator(java.lang.Class<T>)"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.ConstructorInstantiator",
            "org.springframework.objenesis.instantiator.basic.ConstructorInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.basic.ConstructorInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.basic.ConstructorInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.basic.DelegatingToExoticInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.FailingInstantiator",
            "org.springframework.objenesis.instantiator.basic.FailingInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.basic.FailingInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.basic.FailingInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.NewInstanceInstantiator",
            "org.springframework.objenesis.instantiator.basic.NewInstanceInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.basic.NewInstanceInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.basic.NewInstanceInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.NullInstantiator",
            "org.springframework.objenesis.instantiator.basic.NullInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.basic.NullInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.basic.NullInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream",
            "org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream(java.lang.Class<?>)",
            "public org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream(java.lang.Class<?>)"
        ],
        [
            "int",
            "org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream.read()",
            "public int read()"
        ],
        [
            "int",
            "org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream.available()",
            "public int available()"
        ],
        [
            "int",
            "org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream.read(byte[], int, int)",
            "public int read(byte[], int, int)"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator",
            "org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.ObjectStreamClassInstantiator",
            "org.springframework.objenesis.instantiator.basic.ObjectStreamClassInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.basic.ObjectStreamClassInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.basic.ObjectStreamClassInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.basic.ProxyingInstantiator",
            "org.springframework.objenesis.instantiator.basic.ProxyingInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.basic.ProxyingInstantiator(java.lang.Class<T>)"
        ],
        [
            "org.springframework.objenesis.instantiator.gcj.GCJInstantiator",
            "org.springframework.objenesis.instantiator.gcj.GCJInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.gcj.GCJInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.gcj.GCJInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.gcj.GCJInstantiatorBase$DummyStream",
            "org.springframework.objenesis.instantiator.gcj.GCJInstantiatorBase$DummyStream()",
            "public org.springframework.objenesis.instantiator.gcj.GCJInstantiatorBase$DummyStream() throws java.io.IOException"
        ],
        [
            "org.springframework.objenesis.instantiator.gcj.GCJInstantiatorBase",
            "org.springframework.objenesis.instantiator.gcj.GCJInstantiatorBase(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.gcj.GCJInstantiatorBase(java.lang.Class<T>)"
        ],
        [
            "org.springframework.objenesis.instantiator.gcj.GCJSerializationInstantiator",
            "org.springframework.objenesis.instantiator.gcj.GCJSerializationInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.gcj.GCJSerializationInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.gcj.GCJSerializationInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.perc.PercInstantiator",
            "org.springframework.objenesis.instantiator.perc.PercInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.perc.PercInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.perc.PercInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.perc.PercSerializationInstantiator",
            "org.springframework.objenesis.instantiator.perc.PercSerializationInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.perc.PercSerializationInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.perc.PercSerializationInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.sun.MagicInstantiator",
            "org.springframework.objenesis.instantiator.sun.MagicInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.sun.MagicInstantiator(java.lang.Class<T>)"
        ],
        [
            "<T> java.lang.reflect.Constructor<T>",
            "org.springframework.objenesis.instantiator.sun.SunReflectionFactoryHelper.newConstructorForSerialization(java.lang.Class<T>, java.lang.reflect.Constructor<?>)",
            "public static <T> java.lang.reflect.Constructor<T> newConstructorForSerialization(java.lang.Class<T>, java.lang.reflect.Constructor<?>)"
        ],
        [
            "org.springframework.objenesis.instantiator.sun.SunReflectionFactoryInstantiator",
            "org.springframework.objenesis.instantiator.sun.SunReflectionFactoryInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.sun.SunReflectionFactoryInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.sun.SunReflectionFactoryInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.sun.SunReflectionFactorySerializationInstantiator",
            "org.springframework.objenesis.instantiator.sun.SunReflectionFactorySerializationInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.sun.SunReflectionFactorySerializationInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.sun.SunReflectionFactorySerializationInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator",
            "org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator(java.lang.Class<T>)",
            "public org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator(java.lang.Class<T>)"
        ],
        [
            "T",
            "org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator.newInstance()",
            "public T newInstance()"
        ],
        [
            "java.lang.String",
            "org.springframework.objenesis.instantiator.util.ClassUtils.classNameToInternalClassName(java.lang.String)",
            "public static java.lang.String classNameToInternalClassName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.objenesis.instantiator.util.ClassUtils.classNameToResource(java.lang.String)",
            "public static java.lang.String classNameToResource(java.lang.String)"
        ],
        [
            "<T> java.lang.Class<T>",
            "org.springframework.objenesis.instantiator.util.ClassUtils.getExistingClass(java.lang.ClassLoader, java.lang.String)",
            "public static <T> java.lang.Class<T> getExistingClass(java.lang.ClassLoader, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.objenesis.instantiator.util.ClassUtils.newInstance(java.lang.Class<T>)",
            "public static <T> T newInstance(java.lang.Class<T>)"
        ],
        [
            "sun.misc.Unsafe",
            "org.springframework.objenesis.instantiator.util.UnsafeUtils.getUnsafe()",
            "public static sun.misc.Unsafe getUnsafe()"
        ],
        [
            "org.springframework.objenesis.strategy.BaseInstantiatorStrategy",
            "org.springframework.objenesis.strategy.BaseInstantiatorStrategy()",
            "public org.springframework.objenesis.strategy.BaseInstantiatorStrategy()"
        ],
        [
            "java.lang.String",
            "org.springframework.objenesis.strategy.PlatformDescription.describePlatform()",
            "public static java.lang.String describePlatform()"
        ],
        [
            "boolean",
            "org.springframework.objenesis.strategy.PlatformDescription.isThisJVM(java.lang.String)",
            "public static boolean isThisJVM(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.objenesis.strategy.PlatformDescription.isAndroidOpenJDK()",
            "public static boolean isAndroidOpenJDK()"
        ],
        [
            "boolean",
            "org.springframework.objenesis.strategy.PlatformDescription.isAfterJigsaw()",
            "public static boolean isAfterJigsaw()"
        ],
        [
            "boolean",
            "org.springframework.objenesis.strategy.PlatformDescription.isAfterJava11()",
            "public static boolean isAfterJava11()"
        ],
        [
            "boolean",
            "org.springframework.objenesis.strategy.PlatformDescription.isGoogleAppEngine()",
            "public static boolean isGoogleAppEngine()"
        ],
        [
            "org.springframework.objenesis.strategy.SerializingInstantiatorStrategy",
            "org.springframework.objenesis.strategy.SerializingInstantiatorStrategy()",
            "public org.springframework.objenesis.strategy.SerializingInstantiatorStrategy()"
        ],
        [
            "<T> org.springframework.objenesis.instantiator.ObjectInstantiator<T>",
            "org.springframework.objenesis.strategy.SerializingInstantiatorStrategy.newInstantiatorOf(java.lang.Class<T>)",
            "public <T> org.springframework.objenesis.instantiator.ObjectInstantiator<T> newInstantiatorOf(java.lang.Class<T>)"
        ],
        [
            "<T extends org.springframework.objenesis.instantiator.ObjectInstantiator<?>>",
            "org.springframework.objenesis.strategy.SingleInstantiatorStrategy.org.springframework.objenesis.strategy.SingleInstantiatorStrategy(java.lang.Class<T>)",
            "public <T extends org.springframework.objenesis.instantiator.ObjectInstantiator<?>> org.springframework.objenesis.strategy.SingleInstantiatorStrategy(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.objenesis.instantiator.ObjectInstantiator<T>",
            "org.springframework.objenesis.strategy.SingleInstantiatorStrategy.newInstantiatorOf(java.lang.Class<T>)",
            "public <T> org.springframework.objenesis.instantiator.ObjectInstantiator<T> newInstantiatorOf(java.lang.Class<T>)"
        ],
        [
            "org.springframework.objenesis.strategy.StdInstantiatorStrategy",
            "org.springframework.objenesis.strategy.StdInstantiatorStrategy()",
            "public org.springframework.objenesis.strategy.StdInstantiatorStrategy()"
        ],
        [
            "<T> org.springframework.objenesis.instantiator.ObjectInstantiator<T>",
            "org.springframework.objenesis.strategy.StdInstantiatorStrategy.newInstantiatorOf(java.lang.Class<T>)",
            "public <T> org.springframework.objenesis.instantiator.ObjectInstantiator<T> newInstantiatorOf(java.lang.Class<T>)"
        ]
    ]
}